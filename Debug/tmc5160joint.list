
tmc5160joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f0c  08017eb0  08017eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018dbc  08018dbc  00030620  2**0
                  CONTENTS
  4 .ARM          00000008  08018dbc  08018dbc  00028dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018dc4  08018dc4  00030620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018dc4  08018dc4  00028dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018dcc  08018dcc  00028dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000620  20000000  08018dd0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000695c  20000620  080193f0  00030620  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006f7c  080193f0  00036f7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030620  2**0
                  CONTENTS, READONLY
 12 .debug_info   00079d39  00000000  00000000  00030650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000e7bc  00000000  00000000  000aa389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003470  00000000  00000000  000b8b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003020  00000000  00000000  000bbfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003293e  00000000  00000000  000befd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004528a  00000000  00000000  000f1916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1ea3  00000000  00000000  00136ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00218a43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e7c0  00000000  00000000  00218a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00227254  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  00227278  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000620 	.word	0x20000620
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017e98 	.word	0x08017e98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000624 	.word	0x20000624
 80001cc:	08017e98 	.word	0x08017e98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <MX_CAN1_Init+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d7c:	220e      	movs	r2, #14
 8000d7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d8e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000d92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000dc0:	f00d fa9a 	bl	800e2f8 <HAL_CAN_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000dca:	f000 fc1d 	bl	8001608 <Error_Handler>
  }

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000063c 	.word	0x2000063c
 8000dd8:	40006400 	.word	0x40006400

08000ddc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <HAL_CAN_MspInit+0xc4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d14c      	bne.n	8000e98 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e48:	2309      	movs	r3, #9
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4815      	ldr	r0, [pc, #84]	; (8000ea8 <HAL_CAN_MspInit+0xcc>)
 8000e54:	f00e fe28 	bl	800faa8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 12, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	210c      	movs	r1, #12
 8000e5c:	2013      	movs	r0, #19
 8000e5e:	f00e fa59 	bl	800f314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000e62:	2013      	movs	r0, #19
 8000e64:	f00e fa72 	bl	800f34c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 12, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	210c      	movs	r1, #12
 8000e6c:	2014      	movs	r0, #20
 8000e6e:	f00e fa51 	bl	800f314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e72:	2014      	movs	r0, #20
 8000e74:	f00e fa6a 	bl	800f34c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 12, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	210c      	movs	r1, #12
 8000e7c:	2015      	movs	r0, #21
 8000e7e:	f00e fa49 	bl	800f314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e82:	2015      	movs	r0, #21
 8000e84:	f00e fa62 	bl	800f34c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 12, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	210c      	movs	r1, #12
 8000e8c:	2016      	movs	r0, #22
 8000e8e:	f00e fa41 	bl	800f314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e92:	2016      	movs	r0, #22
 8000e94:	f00e fa5a 	bl	800f34c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40006400 	.word	0x40006400
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_CAN_MspDeInit+0x48>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d116      	bne.n	8000eec <HAL_CAN_MspDeInit+0x40>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_CAN_MspDeInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_CAN_MspDeInit+0x4c>)
 8000ec4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8000eca:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ece:	480b      	ldr	r0, [pc, #44]	; (8000efc <HAL_CAN_MspDeInit+0x50>)
 8000ed0:	f00e ff86 	bl	800fde0 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8000ed4:	2013      	movs	r0, #19
 8000ed6:	f00e fa47 	bl	800f368 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000eda:	2014      	movs	r0, #20
 8000edc:	f00e fa44 	bl	800f368 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8000ee0:	2015      	movs	r0, #21
 8000ee2:	f00e fa41 	bl	800f368 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8000ee6:	2016      	movs	r0, #22
 8000ee8:	f00e fa3e 	bl	800f368 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40006400 	.word	0x40006400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020400 	.word	0x40020400

08000f00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_DMA_Init+0x4c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <MX_DMA_Init+0x4c>)
 8000f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <MX_DMA_Init+0x4c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	203a      	movs	r0, #58	; 0x3a
 8000f28:	f00e f9f4 	bl	800f314 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f2c:	203a      	movs	r0, #58	; 0x3a
 8000f2e:	f00e fa0d 	bl	800f34c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2046      	movs	r0, #70	; 0x46
 8000f38:	f00e f9ec 	bl	800f314 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000f3c:	2046      	movs	r0, #70	; 0x46
 8000f3e:	f00e fa05 	bl	800f34c <HAL_NVIC_EnableIRQ>

}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800

08000f50 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  /* Initialize the USART*/
  FUART_Init();
 8000f54:	f00c fe6e 	bl	800dc34 <FUART_Init>

  LOG_Init(LOG_InfoLevel, 1, LOG_USARTOut);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f008 fd57 	bl	8009a10 <LOG_Init>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */

  // Motion 初始化
  MT_init();
 8000f62:	f009 fbef 	bl	800a744 <MT_init>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTaskMain, NULL, &defaultTask_attributes);
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <MX_FREERTOS_Init+0x6c>)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <MX_FREERTOS_Init+0x70>)
 8000f6c:	f012 f90e 	bl	801318c <osThreadNew>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <MX_FREERTOS_Init+0x74>)
 8000f74:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(LedTaskMain, NULL, &ledTask_attributes);
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <MX_FREERTOS_Init+0x78>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4814      	ldr	r0, [pc, #80]	; (8000fcc <MX_FREERTOS_Init+0x7c>)
 8000f7c:	f012 f906 	bl	801318c <osThreadNew>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <MX_FREERTOS_Init+0x80>)
 8000f84:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(EncoderTaskMain, NULL, &encoderTask_attributes);
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <MX_FREERTOS_Init+0x84>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <MX_FREERTOS_Init+0x88>)
 8000f8c:	f012 f8fe 	bl	801318c <osThreadNew>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MX_FREERTOS_Init+0x8c>)
 8000f94:	6013      	str	r3, [r2, #0]

  /* creation of uartTask */
  motionTaskHandle = osThreadNew(MotionTaskMain, NULL, &motionTask_attributes);
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <MX_FREERTOS_Init+0x90>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <MX_FREERTOS_Init+0x94>)
 8000f9c:	f012 f8f6 	bl	801318c <osThreadNew>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <MX_FREERTOS_Init+0x98>)
 8000fa4:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(CanCommTaskMain, NULL, &canTask_attributes);
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <MX_FREERTOS_Init+0x9c>)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <MX_FREERTOS_Init+0xa0>)
 8000fac:	f012 f8ee 	bl	801318c <osThreadNew>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <MX_FREERTOS_Init+0xa4>)
 8000fb4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	080181a8 	.word	0x080181a8
 8000fc0:	08000ff9 	.word	0x08000ff9
 8000fc4:	200006f0 	.word	0x200006f0
 8000fc8:	080181cc 	.word	0x080181cc
 8000fcc:	08001009 	.word	0x08001009
 8000fd0:	200006f4 	.word	0x200006f4
 8000fd4:	080181f0 	.word	0x080181f0
 8000fd8:	0800108d 	.word	0x0800108d
 8000fdc:	200006f8 	.word	0x200006f8
 8000fe0:	08018214 	.word	0x08018214
 8000fe4:	08001159 	.word	0x08001159
 8000fe8:	200006fc 	.word	0x200006fc
 8000fec:	08018238 	.word	0x08018238
 8000ff0:	08001191 	.word	0x08001191
 8000ff4:	20000700 	.word	0x20000700

08000ff8 <_Z15DefaultTaskMainPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTaskMain */
void DefaultTaskMain(void *argument)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTaskMain */
  /* Infinite loop */
  for(;;)
  {
	//MT_process_v3(g_IncSteps);
	osDelay(4);
 8001000:	2004      	movs	r0, #4
 8001002:	f012 f969 	bl	80132d8 <osDelay>
 8001006:	e7fb      	b.n	8001000 <_Z15DefaultTaskMainPv+0x8>

08001008 <_Z11LedTaskMainPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTaskMain */
void LedTaskMain(void *argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTaskMain */
  /* Infinite loop */
  uint32_t count = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	if (++count >= 1000) count = 0;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001020:	4293      	cmp	r3, r2
 8001022:	bf8c      	ite	hi
 8001024:	2301      	movhi	r3, #1
 8001026:	2300      	movls	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <_Z11LedTaskMainPv+0x2a>
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]

	uint32_t cycles = LED1_NORMAL_BQCNT;
 8001032:	2332      	movs	r3, #50	; 0x32
 8001034:	60bb      	str	r3, [r7, #8]
	if (g_TransportInited && CO->CANmodule[0]->errOld){
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <_Z11LedTaskMainPv+0x78>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d007      	beq.n	800104e <_Z11LedTaskMainPv+0x46>
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <_Z11LedTaskMainPv+0x7c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <_Z11LedTaskMainPv+0x46>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <_Z11LedTaskMainPv+0x48>
 800104e:	2300      	movs	r3, #0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <_Z11LedTaskMainPv+0x50>
		cycles = LED1_ERR_BQCNT;
 8001054:	230a      	movs	r3, #10
 8001056:	60bb      	str	r3, [r7, #8]
	}

	if (count % cycles == 0)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	fb01 f202 	mul.w	r2, r1, r2
 8001066:	1a9b      	subs	r3, r3, r2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d104      	bne.n	8001076 <_Z11LedTaskMainPv+0x6e>
		HAL_GPIO_TogglePin(GPIOC, LED1_Pin);
 800106c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <_Z11LedTaskMainPv+0x80>)
 8001072:	f00e ffe2 	bl	801003a <HAL_GPIO_TogglePin>

	osDelay(LEDLOOPMS);
 8001076:	2014      	movs	r0, #20
 8001078:	f012 f92e 	bl	80132d8 <osDelay>
  }
 800107c:	e7ca      	b.n	8001014 <_Z11LedTaskMainPv+0xc>
 800107e:	bf00      	nop
 8001080:	20000664 	.word	0x20000664
 8001084:	20000b7c 	.word	0x20000b7c
 8001088:	40020800 	.word	0x40020800

0800108c <_Z15EncoderTaskMainPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EncoderTaskMain */
void EncoderTaskMain(void *argument)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderTaskMain */
  /* Infinite loop */
  AS5048A_Init();
 8001094:	f008 fd24 	bl	8009ae0 <AS5048A_Init>

  uint16_t retry = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	81fb      	strh	r3, [r7, #14]
  uint16_t result = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	81bb      	strh	r3, [r7, #12]

  //AS5048A_ZeroPoint();

  do {
    result = AS5048A_ReadAngle((uint16_t*)&g_AbsAngle);
 80010a0:	4829      	ldr	r0, [pc, #164]	; (8001148 <_Z15EncoderTaskMainPv+0xbc>)
 80010a2:	f008 fe16 	bl	8009cd2 <AS5048A_ReadAngle>
 80010a6:	4603      	mov	r3, r0
 80010a8:	81bb      	strh	r3, [r7, #12]
    if (result == HAL_OK)
 80010aa:	89bb      	ldrh	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d009      	beq.n	80010c4 <_Z15EncoderTaskMainPv+0x38>
      break;

    osDelay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f012 f911 	bl	80132d8 <osDelay>
    retry ++;
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	3301      	adds	r3, #1
 80010ba:	81fb      	strh	r3, [r7, #14]
  }while(retry < ENCODER_ReadAngle_Retry);
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	2b0e      	cmp	r3, #14
 80010c0:	d801      	bhi.n	80010c6 <_Z15EncoderTaskMainPv+0x3a>
  do {
 80010c2:	e7ed      	b.n	80010a0 <_Z15EncoderTaskMainPv+0x14>
      break;
 80010c4:	bf00      	nop

  if (result != HAL_OK){
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d138      	bne.n	800113e <_Z15EncoderTaskMainPv+0xb2>
	return;
  }

  printf("Initialized angle: %d\n", g_AbsAngle);
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <_Z15EncoderTaskMainPv+0xbc>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	481d      	ldr	r0, [pc, #116]	; (800114c <_Z15EncoderTaskMainPv+0xc0>)
 80010d6:	f015 fe7f 	bl	8016dd8 <iprintf>

  RND_Init(g_AbsAngle);
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <_Z15EncoderTaskMainPv+0xbc>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f008 fe07 	bl	8009cf4 <RND_Init>

  uint16_t angle = g_AbsAngle;
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <_Z15EncoderTaskMainPv+0xbc>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	813b      	strh	r3, [r7, #8]

  /* Infinite loop */
  for(;;) {
	/*Feed the current angle*/
	RND_Input(g_AbsAngle);
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <_Z15EncoderTaskMainPv+0xbc>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f008 fe47 	bl	8009d88 <RND_Input>

	/*Update the increment steps*/
	// 40.24(64teeths)/9.68(16teeths) * 16(g_MicroSteps) = 66.51
	g_IncSteps = RND_GetIncSteps(g_AbsAngle, g_EncoderRatio); //
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_Z15EncoderTaskMainPv+0xbc>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4a13      	ldr	r2, [pc, #76]	; (8001150 <_Z15EncoderTaskMainPv+0xc4>)
 8001102:	edd2 7a00 	vldr	s15, [r2]
 8001106:	eeb0 0a67 	vmov.f32	s0, s15
 800110a:	4618      	mov	r0, r3
 800110c:	f008 ffa6 	bl	800a05c <RND_GetIncSteps>
 8001110:	4603      	mov	r3, r0
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <_Z15EncoderTaskMainPv+0xc8>)
 8001114:	6013      	str	r3, [r2, #0]

	/*loop read, and update global absolute angle*/
	uint16_t status = AS5048A_ReadAngle((uint16_t*)&angle);
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4618      	mov	r0, r3
 800111c:	f008 fdd9 	bl	8009cd2 <AS5048A_ReadAngle>
 8001120:	4603      	mov	r3, r0
 8001122:	817b      	strh	r3, [r7, #10]
	if (status == HAL_OK && angle != 0){
 8001124:	897b      	ldrh	r3, [r7, #10]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d105      	bne.n	8001136 <_Z15EncoderTaskMainPv+0xaa>
 800112a:	893b      	ldrh	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <_Z15EncoderTaskMainPv+0xaa>
		g_AbsAngle = angle;
 8001130:	893a      	ldrh	r2, [r7, #8]
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <_Z15EncoderTaskMainPv+0xbc>)
 8001134:	801a      	strh	r2, [r3, #0]
	}
	osDelay(2);
 8001136:	2002      	movs	r0, #2
 8001138:	f012 f8ce 	bl	80132d8 <osDelay>
  }
 800113c:	e7d7      	b.n	80010ee <_Z15EncoderTaskMainPv+0x62>
	return;
 800113e:	bf00      	nop
  /* USER CODE END EncoderTaskMain */
}
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200006e8 	.word	0x200006e8
 800114c:	08017ee4 	.word	0x08017ee4
 8001150:	20000004 	.word	0x20000004
 8001154:	200006e4 	.word	0x200006e4

08001158 <_Z14MotionTaskMainPv>:
* @retval None
*/
/* USER CODE END Header_UITaskMain */
#if (USE_TMC5160 == 1)
void MotionTaskMain(void *argument)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  FUART_beginReceive(&huart1);
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <_Z14MotionTaskMainPv+0x30>)
 8001162:	f00c fd8f 	bl	800dc84 <FUART_beginReceive>

  MOTOR_Init();
 8001166:	f009 f8c3 	bl	800a2f0 <MOTOR_Init>
  MOTOR_bindDriver(&driver);
 800116a:	4808      	ldr	r0, [pc, #32]	; (800118c <_Z14MotionTaskMainPv+0x34>)
 800116c:	f009 f8d8 	bl	800a320 <MOTOR_bindDriver>

  MT_begin();
 8001170:	f009 fab0 	bl	800a6d4 <MT_begin>

  uint32_t ticks = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	//JNT_processMsg();
	  MT_loop(ticks);
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f009 fab7 	bl	800a6ec <MT_loop>
	  osDelay(ticks);
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f012 f8aa 	bl	80132d8 <osDelay>
	  MT_loop(ticks);
 8001184:	e7f8      	b.n	8001178 <_Z14MotionTaskMainPv+0x20>
 8001186:	bf00      	nop
 8001188:	2000093c 	.word	0x2000093c
 800118c:	20000668 	.word	0x20000668

08001190 <_Z15CanCommTaskMainPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CanCommTaskMain */
void CanCommTaskMain(void *argument)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CanCommTaskMain */
  uint8_t ret;

  if (NODE_new() == CO_ERROR_NO){
 8001198:	f007 fe40 	bl	8008e1c <NODE_new>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bf0c      	ite	eq
 80011a2:	2301      	moveq	r3, #1
 80011a4:	2300      	movne	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00b      	beq.n	80011c4 <_Z15CanCommTaskMainPv+0x34>
    ret = NODE_Init((void*)&hcan1, g_NodeId);
 80011ac:	4b26      	ldr	r3, [pc, #152]	; (8001248 <_Z15CanCommTaskMainPv+0xb8>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4826      	ldr	r0, [pc, #152]	; (800124c <_Z15CanCommTaskMainPv+0xbc>)
 80011b4:	f007 fe50 	bl	8008e58 <NODE_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	75fb      	strb	r3, [r7, #23]
  }else{
    printf("Create CAN node failed.\n");
	return;
  }

  if (ret != CO_ERROR_NO){
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <_Z15CanCommTaskMainPv+0x48>
 80011c2:	e003      	b.n	80011cc <_Z15CanCommTaskMainPv+0x3c>
    printf("Create CAN node failed.\n");
 80011c4:	4822      	ldr	r0, [pc, #136]	; (8001250 <_Z15CanCommTaskMainPv+0xc0>)
 80011c6:	f015 fe8d 	bl	8016ee4 <puts>
	return;
 80011ca:	e03a      	b.n	8001242 <_Z15CanCommTaskMainPv+0xb2>
    printf("Node initialize failed. [%d]\n", ret);
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4820      	ldr	r0, [pc, #128]	; (8001254 <_Z15CanCommTaskMainPv+0xc4>)
 80011d2:	f015 fe01 	bl	8016dd8 <iprintf>
	return;
 80011d6:	e034      	b.n	8001242 <_Z15CanCommTaskMainPv+0xb2>
  }

  bool_t   syncWas;
  uint32_t timerNext;

  uint32_t timeInterval = CAN_LOOP_DUARTION * TMR_TASK_INTERVAL;
 80011d8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80011dc:	613b      	str	r3, [r7, #16]

  g_TransportInited = 1;
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <_Z15CanCommTaskMainPv+0xc8>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  for(;;) {
	if(CO->CANmodule[0]->CANnormal){
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <_Z15CanCommTaskMainPv+0xcc>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	7c9b      	ldrb	r3, [r3, #18]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bf14      	ite	ne
 80011f2:	2301      	movne	r3, #1
 80011f4:	2300      	moveq	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d01e      	beq.n	800123a <_Z15CanCommTaskMainPv+0xaa>

	  CO_process(CO, timeInterval, &timerNext);
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <_Z15CanCommTaskMainPv+0xcc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f107 0208 	add.w	r2, r7, #8
 8001204:	6939      	ldr	r1, [r7, #16]
 8001206:	4618      	mov	r0, r3
 8001208:	f007 faee 	bl	80087e8 <CO_process>

	  syncWas = CO_process_SYNC(CO, timeInterval, &timerNext);
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <_Z15CanCommTaskMainPv+0xcc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f107 0208 	add.w	r2, r7, #8
 8001214:	6939      	ldr	r1, [r7, #16]
 8001216:	4618      	mov	r0, r3
 8001218:	f007 fb4a 	bl	80088b0 <CO_process_SYNC>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]

	  NODE_process(timeInterval, syncWas);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	b29b      	uxth	r3, r3
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f007 ff3f 	bl	80090ac <NODE_process>

	  CO_CANpolling_Tx(CO->CANmodule[0]);
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <_Z15CanCommTaskMainPv+0xcc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f008 fa4b 	bl	80096d0 <CO_CANpolling_Tx>
    }
	osDelay(CAN_LOOP_DUARTION);
 800123a:	2004      	movs	r0, #4
 800123c:	f012 f84c 	bl	80132d8 <osDelay>
	if(CO->CANmodule[0]->CANnormal){
 8001240:	e7d0      	b.n	80011e4 <_Z15CanCommTaskMainPv+0x54>
  }
  /* USER CODE END CanCommTaskMain */
}
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	2000063c 	.word	0x2000063c
 8001250:	08017efc 	.word	0x08017efc
 8001254:	08017f14 	.word	0x08017f14
 8001258:	20000664 	.word	0x20000664
 800125c:	20000b7c 	.word	0x20000b7c

08001260 <_Z41__static_initialization_and_destruction_0ii>:
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af02      	add	r7, sp, #8
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d111      	bne.n	8001294 <_Z41__static_initialization_and_destruction_0ii+0x34>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001276:	4293      	cmp	r3, r2
 8001278:	d10c      	bne.n	8001294 <_Z41__static_initialization_and_destruction_0ii+0x34>
TMC5160Stepper driver(0, 0.075, 0, 0, 0, -1);
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2300      	movs	r3, #0
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2300      	movs	r3, #0
 8001286:	2200      	movs	r2, #0
 8001288:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800129c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800128c:	2100      	movs	r1, #0
 800128e:	4804      	ldr	r0, [pc, #16]	; (80012a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001290:	f00c f8f8 	bl	800d484 <_ZN14TMC5160StepperC1Etfttta>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	3d99999a 	.word	0x3d99999a
 80012a0:	20000668 	.word	0x20000668

080012a4 <_GLOBAL__sub_I_g_TransportInited>:
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012ac:	2001      	movs	r0, #1
 80012ae:	f7ff ffd7 	bl	8001260 <_Z41__static_initialization_and_destruction_0ii>
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b6e      	ldr	r3, [pc, #440]	; (8001488 <MX_GPIO_Init+0x1d4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a6d      	ldr	r2, [pc, #436]	; (8001488 <MX_GPIO_Init+0x1d4>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b6b      	ldr	r3, [pc, #428]	; (8001488 <MX_GPIO_Init+0x1d4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b67      	ldr	r3, [pc, #412]	; (8001488 <MX_GPIO_Init+0x1d4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a66      	ldr	r2, [pc, #408]	; (8001488 <MX_GPIO_Init+0x1d4>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b64      	ldr	r3, [pc, #400]	; (8001488 <MX_GPIO_Init+0x1d4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b60      	ldr	r3, [pc, #384]	; (8001488 <MX_GPIO_Init+0x1d4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a5f      	ldr	r2, [pc, #380]	; (8001488 <MX_GPIO_Init+0x1d4>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b5d      	ldr	r3, [pc, #372]	; (8001488 <MX_GPIO_Init+0x1d4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b59      	ldr	r3, [pc, #356]	; (8001488 <MX_GPIO_Init+0x1d4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a58      	ldr	r2, [pc, #352]	; (8001488 <MX_GPIO_Init+0x1d4>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <MX_GPIO_Init+0x1d4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b52      	ldr	r3, [pc, #328]	; (8001488 <MX_GPIO_Init+0x1d4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a51      	ldr	r2, [pc, #324]	; (8001488 <MX_GPIO_Init+0x1d4>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <MX_GPIO_Init+0x1d4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|SPI3_CS_Pin|DRV_ENN_Pin|LED2_Pin
 8001356:	2200      	movs	r2, #0
 8001358:	f242 3171 	movw	r1, #9073	; 0x2371
 800135c:	484b      	ldr	r0, [pc, #300]	; (800148c <MX_GPIO_Init+0x1d8>)
 800135e:	f00e fe53 	bl	8010008 <HAL_GPIO_WritePin>
                          |EXTSTEP_DIR_Pin|DCEN_Pin|Stepper_Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI2_CS_Pin|DCO_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f241 0102 	movw	r1, #4098	; 0x1002
 8001368:	4849      	ldr	r0, [pc, #292]	; (8001490 <MX_GPIO_Init+0x1dc>)
 800136a:	f00e fe4d 	bl	8010008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTSTEP_EN_GPIO_Port, EXTSTEP_EN_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001374:	4847      	ldr	r0, [pc, #284]	; (8001494 <MX_GPIO_Init+0x1e0>)
 8001376:	f00e fe47 	bl	8010008 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|DRV_ENN_Pin|LED2_Pin|EXTSTEP_DIR_Pin
 800137a:	f242 3370 	movw	r3, #9072	; 0x2370
 800137e:	617b      	str	r3, [r7, #20]
                          |DCEN_Pin|Stepper_Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	483e      	ldr	r0, [pc, #248]	; (800148c <MX_GPIO_Init+0x1d8>)
 8001394:	f00e fb88 	bl	800faa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001398:	2301      	movs	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4837      	ldr	r0, [pc, #220]	; (800148c <MX_GPIO_Init+0x1d8>)
 80013b0:	f00e fb7a 	bl	800faa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80013b4:	2302      	movs	r3, #2
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c0:	2302      	movs	r3, #2
 80013c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4831      	ldr	r0, [pc, #196]	; (8001490 <MX_GPIO_Init+0x1dc>)
 80013cc:	f00e fb6c 	bl	800faa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTSTEP_EN_Pin;
 80013d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTSTEP_EN_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	482a      	ldr	r0, [pc, #168]	; (8001494 <MX_GPIO_Init+0x1e0>)
 80013ea:	f00e fb5d 	bl	800faa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCIN_Pin;
 80013ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCIN_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4823      	ldr	r0, [pc, #140]	; (8001490 <MX_GPIO_Init+0x1dc>)
 8001404:	f00e fb50 	bl	800faa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCO_Pin;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCO_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	481b      	ldr	r0, [pc, #108]	; (8001490 <MX_GPIO_Init+0x1dc>)
 8001422:	f00e fb41 	bl	800faa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001426:	2304      	movs	r3, #4
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = g_EndStopTriggerMode;
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_GPIO_Init+0x1e4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4818      	ldr	r0, [pc, #96]	; (800149c <MX_GPIO_Init+0x1e8>)
 800143c:	f00e fb34 	bl	800faa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001440:	2310      	movs	r3, #16
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_GPIO_Init+0x1ec>)
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4810      	ldr	r0, [pc, #64]	; (8001494 <MX_GPIO_Init+0x1e0>)
 8001454:	f00e fb28 	bl	800faa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIAG1_Pin|DIAG0_Pin;
 8001458:	23c0      	movs	r3, #192	; 0xc0
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	480a      	ldr	r0, [pc, #40]	; (8001494 <MX_GPIO_Init+0x1e0>)
 800146c:	f00e fb1c 	bl	800faa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 6, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2106      	movs	r1, #6
 8001474:	2008      	movs	r0, #8
 8001476:	f00d ff4d 	bl	800f314 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800147a:	2008      	movs	r0, #8
 800147c:	f00d ff66 	bl	800f34c <HAL_NVIC_EnableIRQ>

}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	40020800 	.word	0x40020800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	20000008 	.word	0x20000008
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	10110000 	.word	0x10110000

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 80014a8:	f015 f960 	bl	801676c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ac:	f00c febe 	bl	800e22c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b0:	f000 f824 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f7ff fefe 	bl	80012b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014b8:	f7ff fd22 	bl	8000f00 <MX_DMA_Init>
  MX_CAN1_Init();
 80014bc:	f7ff fc58 	bl	8000d70 <MX_CAN1_Init>
  MX_SPI3_Init();
 80014c0:	f000 f8e0 	bl	8001684 <MX_SPI3_Init>
  MX_TIM1_Init();
 80014c4:	f000 fb36 	bl	8001b34 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014c8:	f000 fbb8 	bl	8001c3c <MX_TIM2_Init>
  MX_TIM5_Init();
 80014cc:	f000 fc0c 	bl	8001ce8 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80014d0:	f000 fe5a 	bl	8002188 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80014d4:	f000 f8a0 	bl	8001618 <MX_SPI2_Init>
  MX_TIM8_Init();
 80014d8:	f000 fc5c 	bl	8001d94 <MX_TIM8_Init>
  MX_TIM12_Init();
 80014dc:	f000 fcdc 	bl	8001e98 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  g_GPIOInitFinished = 1;
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <main+0x54>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  PosProfile_Initialize();
 80014e6:	f00a f9ad 	bl	800b844 <PosProfile_Initialize>
  }

  printf("Exhaust time: %ld\n", st);
*/
  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80014ea:	f011 fde5 	bl	80130b8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80014ee:	f7ff fd2f 	bl	8000f50 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80014f2:	f011 fe15 	bl	8013120 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <main+0x52>
 80014f8:	20000704 	.word	0x20000704

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	; 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2230      	movs	r2, #48	; 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f015 fb66 	bl	8016bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <SystemClock_Config+0xcc>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a27      	ldr	r2, [pc, #156]	; (80015c8 <SystemClock_Config+0xcc>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <SystemClock_Config+0xcc>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <SystemClock_Config+0xd0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a21      	ldr	r2, [pc, #132]	; (80015cc <SystemClock_Config+0xd0>)
 8001546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <SystemClock_Config+0xd0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001558:	2301      	movs	r3, #1
 800155a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800155c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001562:	2302      	movs	r3, #2
 8001564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800156c:	230f      	movs	r3, #15
 800156e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001570:	23c0      	movs	r3, #192	; 0xc0
 8001572:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001574:	2302      	movs	r3, #2
 8001576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001578:	2304      	movs	r3, #4
 800157a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	4618      	mov	r0, r3
 8001582:	f00e fd99 	bl	80100b8 <HAL_RCC_OscConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800158c:	f000 f83c 	bl	8001608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001590:	230f      	movs	r3, #15
 8001592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001594:	2302      	movs	r3, #2
 8001596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800159c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2105      	movs	r1, #5
 80015ae:	4618      	mov	r0, r3
 80015b0:	f00e fff0 	bl	8010594 <HAL_RCC_ClockConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015ba:	f000 f825 	bl	8001608 <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	3750      	adds	r7, #80	; 0x50
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015e2:	f00c fe45 	bl	800e270 <HAL_IncTick>
  }

  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM5){
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a06      	ldr	r2, [pc, #24]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d102      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0x26>
	  MT_process_v3(4);
 80015f0:	2004      	movs	r0, #4
 80015f2:	f009 f901 	bl	800a7f8 <MT_process_v3>
  }
  /* USER CODE END Callback 1 */
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40001c00 	.word	0x40001c00
 8001604:	40000c00 	.word	0x40000c00

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_SPI2_Init+0x64>)
 800161e:	4a18      	ldr	r2, [pc, #96]	; (8001680 <MX_SPI2_Init+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_SPI2_Init+0x64>)
 8001624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001628:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_SPI2_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_SPI2_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_SPI2_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_SPI2_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_SPI2_Init+0x64>)
 8001644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001648:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_SPI2_Init+0x64>)
 800164c:	2228      	movs	r2, #40	; 0x28
 800164e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_SPI2_Init+0x64>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_SPI2_Init+0x64>)
 8001658:	2200      	movs	r2, #0
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <MX_SPI2_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_SPI2_Init+0x64>)
 8001664:	220a      	movs	r2, #10
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_SPI2_Init+0x64>)
 800166a:	f00f f9a5 	bl	80109b8 <HAL_SPI_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001674:	f7ff ffc8 	bl	8001608 <Error_Handler>
  }

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000708 	.word	0x20000708
 8001680:	40003800 	.word	0x40003800

08001684 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_SPI3_Init+0x68>)
 800168a:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <MX_SPI3_Init+0x6c>)
 800168c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_SPI3_Init+0x68>)
 8001690:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001694:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_SPI3_Init+0x68>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_SPI3_Init+0x68>)
 800169e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_SPI3_Init+0x68>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_SPI3_Init+0x68>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_SPI3_Init+0x68>)
 80016b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_SPI3_Init+0x68>)
 80016ba:	2228      	movs	r2, #40	; 0x28
 80016bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_SPI3_Init+0x68>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_SPI3_Init+0x68>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_SPI3_Init+0x68>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_SPI3_Init+0x68>)
 80016d2:	220a      	movs	r2, #10
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_SPI3_Init+0x68>)
 80016d8:	f00f f96e 	bl	80109b8 <HAL_SPI_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80016e2:	f7ff ff91 	bl	8001608 <Error_Handler>
  }

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000760 	.word	0x20000760
 80016f0:	40003c00 	.word	0x40003c00

080016f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a42      	ldr	r2, [pc, #264]	; (800181c <HAL_SPI_MspInit+0x128>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d14b      	bne.n	80017ae <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a40      	ldr	r2, [pc, #256]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a39      	ldr	r2, [pc, #228]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800176a:	230c      	movs	r3, #12
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800177a:	2305      	movs	r3, #5
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	4827      	ldr	r0, [pc, #156]	; (8001824 <HAL_SPI_MspInit+0x130>)
 8001786:	f00e f98f 	bl	800faa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800178a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800179c:	2305      	movs	r3, #5
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	4820      	ldr	r0, [pc, #128]	; (8001828 <HAL_SPI_MspInit+0x134>)
 80017a8:	f00e f97e 	bl	800faa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80017ac:	e031      	b.n	8001812 <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1e      	ldr	r2, [pc, #120]	; (800182c <HAL_SPI_MspInit+0x138>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d12c      	bne.n	8001812 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a17      	ldr	r2, [pc, #92]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 80017c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a10      	ldr	r2, [pc, #64]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_SPI_MspInit+0x12c>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001802:	2306      	movs	r3, #6
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <HAL_SPI_MspInit+0x130>)
 800180e:	f00e f94b 	bl	800faa8 <HAL_GPIO_Init>
}
 8001812:	bf00      	nop
 8001814:	3730      	adds	r7, #48	; 0x30
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40003800 	.word	0x40003800
 8001820:	40023800 	.word	0x40023800
 8001824:	40020800 	.word	0x40020800
 8001828:	40020400 	.word	0x40020400
 800182c:	40003c00 	.word	0x40003c00

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_MspInit+0x4c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_MspInit+0x4c>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_MspInit+0x4c>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_MspInit+0x4c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_MspInit+0x4c>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_MspInit+0x4c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800

08001880 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	202c      	movs	r0, #44	; 0x2c
 8001896:	f00d fd3d 	bl	800f314 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800189a:	202c      	movs	r0, #44	; 0x2c
 800189c:	f00d fd56 	bl	800f34c <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HAL_InitTick+0xa4>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_InitTick+0xa4>)
 80018aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
 80018b0:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_InitTick+0xa4>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018bc:	f107 0210 	add.w	r2, r7, #16
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f00f f844 	bl	8010954 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018cc:	f00f f81a 	bl	8010904 <HAL_RCC_GetPCLK1Freq>
 80018d0:	4603      	mov	r3, r0
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d8:	4a13      	ldr	r2, [pc, #76]	; (8001928 <HAL_InitTick+0xa8>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	0c9b      	lsrs	r3, r3, #18
 80018e0:	3b01      	subs	r3, #1
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_InitTick+0xac>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <HAL_InitTick+0xb0>)
 80018e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000 / 1000) - 1;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_InitTick+0xac>)
 80018ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018f0:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_InitTick+0xac>)
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_InitTick+0xac>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_InitTick+0xac>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001904:	4809      	ldr	r0, [pc, #36]	; (800192c <HAL_InitTick+0xac>)
 8001906:	f00f fb09 	bl	8010f1c <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d104      	bne.n	800191a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001910:	4806      	ldr	r0, [pc, #24]	; (800192c <HAL_InitTick+0xac>)
 8001912:	f00f fb38 	bl	8010f86 <HAL_TIM_Base_Start_IT>
 8001916:	4603      	mov	r3, r0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3730      	adds	r7, #48	; 0x30
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	431bde83 	.word	0x431bde83
 800192c:	200007b8 	.word	0x200007b8
 8001930:	40001c00 	.word	0x40001c00

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800196c:	2004      	movs	r0, #4
 800196e:	f00e fb7f 	bl	8010070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == g_EndStopTriggerState && g_GPIOInitFinished == 1){
 8001972:	2104      	movs	r1, #4
 8001974:	4808      	ldr	r0, [pc, #32]	; (8001998 <EXTI2_IRQHandler+0x30>)
 8001976:	f00e fb2f 	bl	800ffd8 <HAL_GPIO_ReadPin>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <EXTI2_IRQHandler+0x34>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d106      	bne.n	8001994 <EXTI2_IRQHandler+0x2c>
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <EXTI2_IRQHandler+0x38>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d102      	bne.n	8001994 <EXTI2_IRQHandler+0x2c>
    HOME_OnSwitchSignal(GPIO_PIN_2);
 800198e:	2004      	movs	r0, #4
 8001990:	f006 fad6 	bl	8007f40 <HOME_OnSwitchSignal>
  }
  /* USER CODE END EXTI2_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40020c00 	.word	0x40020c00
 800199c:	200006e0 	.word	0x200006e0
 80019a0:	20000704 	.word	0x20000704

080019a4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <CAN1_TX_IRQHandler+0x10>)
 80019aa:	f00d f9a5 	bl	800ecf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000063c 	.word	0x2000063c

080019b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <CAN1_RX0_IRQHandler+0x10>)
 80019be:	f00d f99b 	bl	800ecf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000063c 	.word	0x2000063c

080019cc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <CAN1_RX1_IRQHandler+0x10>)
 80019d2:	f00d f991 	bl	800ecf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000063c 	.word	0x2000063c

080019e0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <CAN1_SCE_IRQHandler+0x10>)
 80019e6:	f00d f987 	bl	800ecf8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000063c 	.word	0x2000063c

080019f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019fa:	f00f fc9b 	bl	8011334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200007fc 	.word	0x200007fc

08001a08 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <TIM1_CC_IRQHandler+0x10>)
 8001a0e:	f00f fc91 	bl	8011334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200007fc 	.word	0x200007fc

08001a1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <TIM2_IRQHandler+0x10>)
 8001a22:	f00f fc87 	bl	8011334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000083c 	.word	0x2000083c

08001a30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <USART1_IRQHandler+0x10>)
 8001a36:	f010 fb5b 	bl	80120f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000093c 	.word	0x2000093c

08001a44 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a48:	4803      	ldr	r0, [pc, #12]	; (8001a58 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8001a4a:	f00f fc73 	bl	8011334 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001a50:	f00f fc70 	bl	8011334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200008bc 	.word	0x200008bc
 8001a5c:	200007b8 	.word	0x200007b8

08001a60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <TIM5_IRQHandler+0x10>)
 8001a66:	f00f fc65 	bl	8011334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000087c 	.word	0x2000087c

08001a74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <DMA2_Stream2_IRQHandler+0x10>)
 8001a7a:	f00d fdab 	bl	800f5d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000097c 	.word	0x2000097c

08001a88 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <DMA2_Stream7_IRQHandler+0x10>)
 8001a8e:	f00d fda1 	bl	800f5d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200009dc 	.word	0x200009dc

08001a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <_sbrk+0x5c>)
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <_sbrk+0x60>)
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <_sbrk+0x64>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <_sbrk+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001acc:	f014 ff4c 	bl	8016968 <__errno>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	e009      	b.n	8001af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <_sbrk+0x64>)
 8001aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20020000 	.word	0x20020000
 8001afc:	00000400 	.word	0x00000400
 8001b00:	200007f8 	.word	0x200007f8
 8001b04:	20006f80 	.word	0x20006f80

08001b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <SystemInit+0x28>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <SystemInit+0x28>)
 8001b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SystemInit+0x28>)
 8001b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b22:	609a      	str	r2, [r3, #8]
#endif
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b092      	sub	sp, #72	; 0x48
 8001b38:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
 8001b54:	615a      	str	r2, [r3, #20]
 8001b56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f015 f83c 	bl	8016bdc <memset>

  htim1.Instance = TIM1;
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001b66:	4a34      	ldr	r2, [pc, #208]	; (8001c38 <MX_TIM1_Init+0x104>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;	// APB2 timer clock 160MHz
 8001b6a:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001b6c:	224f      	movs	r2, #79	; 0x4f
 8001b6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001b78:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b90:	4828      	ldr	r0, [pc, #160]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001b92:	f00f fa47 	bl	8011024 <HAL_TIM_PWM_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b9c:	f7ff fd34 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ba0:	2320      	movs	r3, #32
 8001ba2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bac:	4619      	mov	r1, r3
 8001bae:	4821      	ldr	r0, [pc, #132]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001bb0:	f010 f882 	bl	8011cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001bba:	f7ff fd25 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bbe:	2360      	movs	r3, #96	; 0x60
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 250;
 8001bc2:	23fa      	movs	r3, #250	; 0xfa
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bde:	2200      	movs	r2, #0
 8001be0:	4619      	mov	r1, r3
 8001be2:	4814      	ldr	r0, [pc, #80]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001be4:	f00f fd0e 	bl	8011604 <HAL_TIM_PWM_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001bee:	f7ff fd0b 	bl	8001608 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	4807      	ldr	r0, [pc, #28]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001c16:	f010 f8cb 	bl	8011db0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001c20:	f7ff fcf2 	bl	8001608 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001c24:	4803      	ldr	r0, [pc, #12]	; (8001c34 <MX_TIM1_Init+0x100>)
 8001c26:	f000 fa23 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001c2a:	bf00      	nop
 8001c2c:	3748      	adds	r7, #72	; 0x48
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200007fc 	.word	0x200007fc
 8001c38:	40010000 	.word	0x40010000

08001c3c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c42:	f107 0320 	add.w	r3, r7, #32
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <MX_TIM2_Init+0xa8>)
 8001c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001c66:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <MX_TIM2_Init+0xa8>)
 8001c68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <MX_TIM2_Init+0xa8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <MX_TIM2_Init+0xa8>)
 8001c76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <MX_TIM2_Init+0xa8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <MX_TIM2_Init+0xa8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001c88:	4816      	ldr	r0, [pc, #88]	; (8001ce4 <MX_TIM2_Init+0xa8>)
 8001c8a:	f00f f9a0 	bl	8010fce <HAL_TIM_OC_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001c94:	f7ff fcb8 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca0:	f107 0320 	add.w	r3, r7, #32
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480f      	ldr	r0, [pc, #60]	; (8001ce4 <MX_TIM2_Init+0xa8>)
 8001ca8:	f010 f806 	bl	8011cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001cb2:	f7ff fca9 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_TIM2_Init+0xa8>)
 8001cce:	f00f fc39 	bl	8011544 <HAL_TIM_OC_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001cd8:	f7ff fc96 	bl	8001608 <Error_Handler>
  }

}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000083c 	.word	0x2000083c

08001ce8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cee:	f107 0320 	add.w	r3, r7, #32
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	615a      	str	r2, [r3, #20]
 8001d08:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <MX_TIM5_Init+0xa4>)
 8001d0c:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <MX_TIM5_Init+0xa8>)
 8001d0e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <MX_TIM5_Init+0xa4>)
 8001d12:	224f      	movs	r2, #79	; 0x4f
 8001d14:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <MX_TIM5_Init+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3999;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <MX_TIM5_Init+0xa4>)
 8001d1e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001d22:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <MX_TIM5_Init+0xa4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <MX_TIM5_Init+0xa4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001d30:	4816      	ldr	r0, [pc, #88]	; (8001d8c <MX_TIM5_Init+0xa4>)
 8001d32:	f00f f94c 	bl	8010fce <HAL_TIM_OC_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001d3c:	f7ff fc64 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d40:	2320      	movs	r3, #32
 8001d42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d48:	f107 0320 	add.w	r3, r7, #32
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480f      	ldr	r0, [pc, #60]	; (8001d8c <MX_TIM5_Init+0xa4>)
 8001d50:	f00f ffb2 	bl	8011cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001d5a:	f7ff fc55 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2200      	movs	r2, #0
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_TIM5_Init+0xa4>)
 8001d76:	f00f fbe5 	bl	8011544 <HAL_TIM_OC_ConfigChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001d80:	f7ff fc42 	bl	8001608 <Error_Handler>
  }

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	2000087c 	.word	0x2000087c
 8001d90:	40000c00 	.word	0x40000c00

08001d94 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b092      	sub	sp, #72	; 0x48
 8001d98:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	615a      	str	r2, [r3, #20]
 8001db6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2220      	movs	r2, #32
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f014 ff0c 	bl	8016bdc <memset>

  htim8.Instance = TIM8;
 8001dc4:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001dc6:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <MX_TIM8_Init+0x100>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 6;
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001dd8:	2206      	movs	r2, #6
 8001dda:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ddc:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001de2:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001dee:	4828      	ldr	r0, [pc, #160]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001df0:	f00f f918 	bl	8011024 <HAL_TIM_PWM_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8001dfa:	f7ff fc05 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4820      	ldr	r0, [pc, #128]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001e0e:	f00f ff53 	bl	8011cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8001e18:	f7ff fbf6 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1c:	2360      	movs	r3, #96	; 0x60
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 3;
 8001e20:	2303      	movs	r3, #3
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4813      	ldr	r0, [pc, #76]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001e42:	f00f fbdf 	bl	8011604 <HAL_TIM_PWM_ConfigChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8001e4c:	f7ff fbdc 	bl	8001608 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	4619      	mov	r1, r3
 8001e72:	4807      	ldr	r0, [pc, #28]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001e74:	f00f ff9c 	bl	8011db0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8001e7e:	f7ff fbc3 	bl	8001608 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8001e82:	4803      	ldr	r0, [pc, #12]	; (8001e90 <MX_TIM8_Init+0xfc>)
 8001e84:	f000 f8f4 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001e88:	bf00      	nop
 8001e8a:	3748      	adds	r7, #72	; 0x48
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200008bc 	.word	0x200008bc
 8001e94:	40010400 	.word	0x40010400

08001e98 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
 8001eac:	615a      	str	r2, [r3, #20]
 8001eae:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MX_TIM12_Init+0x80>)
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <MX_TIM12_Init+0x84>)
 8001eb4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 6;
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <MX_TIM12_Init+0x80>)
 8001eb8:	2206      	movs	r2, #6
 8001eba:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <MX_TIM12_Init+0x80>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 5;
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <MX_TIM12_Init+0x80>)
 8001ec4:	2205      	movs	r2, #5
 8001ec6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <MX_TIM12_Init+0x80>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_TIM12_Init+0x80>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001ed4:	4810      	ldr	r0, [pc, #64]	; (8001f18 <MX_TIM12_Init+0x80>)
 8001ed6:	f00f f8a5 	bl	8011024 <HAL_TIM_PWM_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001ee0:	f7ff fb92 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee4:	2360      	movs	r3, #96	; 0x60
 8001ee6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <MX_TIM12_Init+0x80>)
 8001efc:	f00f fb82 	bl	8011604 <HAL_TIM_PWM_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001f06:	f7ff fb7f 	bl	8001608 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001f0a:	4803      	ldr	r0, [pc, #12]	; (8001f18 <MX_TIM12_Init+0x80>)
 8001f0c:	f000 f8b0 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200008fc 	.word	0x200008fc
 8001f1c:	40001800 	.word	0x40001800

08001f20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d11e      	bne.n	8001f70 <HAL_TIM_PWM_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_TIM_PWM_MspInit+0xbc>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <HAL_TIM_PWM_MspInit+0xbc>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_TIM_PWM_MspInit+0xbc>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	2019      	movs	r0, #25
 8001f54:	f00d f9de 	bl	800f314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f58:	2019      	movs	r0, #25
 8001f5a:	f00d f9f7 	bl	800f34c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	201b      	movs	r0, #27
 8001f64:	f00d f9d6 	bl	800f314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f68:	201b      	movs	r0, #27
 8001f6a:	f00d f9ef 	bl	800f34c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001f6e:	e02e      	b.n	8001fce <HAL_TIM_PWM_MspInit+0xae>
  else if(tim_pwmHandle->Instance==TIM8)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d116      	bne.n	8001fa8 <HAL_TIM_PWM_MspInit+0x88>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_TIM_PWM_MspInit+0xbc>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <HAL_TIM_PWM_MspInit+0xbc>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_TIM_PWM_MspInit+0xbc>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	202c      	movs	r0, #44	; 0x2c
 8001f9c:	f00d f9ba 	bl	800f314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001fa0:	202c      	movs	r0, #44	; 0x2c
 8001fa2:	f00d f9d3 	bl	800f34c <HAL_NVIC_EnableIRQ>
}
 8001fa6:	e012      	b.n	8001fce <HAL_TIM_PWM_MspInit+0xae>
  else if(tim_pwmHandle->Instance==TIM12)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <HAL_TIM_PWM_MspInit+0xc4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10d      	bne.n	8001fce <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_TIM_PWM_MspInit+0xbc>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_TIM_PWM_MspInit+0xbc>)
 8001fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_TIM_PWM_MspInit+0xbc>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40010400 	.word	0x40010400
 8001fe4:	40001800 	.word	0x40001800

08001fe8 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d116      	bne.n	8002028 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_TIM_OC_MspInit+0x80>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_TIM_OC_MspInit+0x80>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_TIM_OC_MspInit+0x80>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	201c      	movs	r0, #28
 800201c:	f00d f97a 	bl	800f314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002020:	201c      	movs	r0, #28
 8002022:	f00d f993 	bl	800f34c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002026:	e01a      	b.n	800205e <HAL_TIM_OC_MspInit+0x76>
  else if(tim_ocHandle->Instance==TIM5)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0f      	ldr	r2, [pc, #60]	; (800206c <HAL_TIM_OC_MspInit+0x84>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d115      	bne.n	800205e <HAL_TIM_OC_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_TIM_OC_MspInit+0x80>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <HAL_TIM_OC_MspInit+0x80>)
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_TIM_OC_MspInit+0x80>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 10, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	210a      	movs	r1, #10
 8002052:	2032      	movs	r0, #50	; 0x32
 8002054:	f00d f95e 	bl	800f314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002058:	2032      	movs	r0, #50	; 0x32
 800205a:	f00d f977 	bl	800f34c <HAL_NVIC_EnableIRQ>
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	40000c00 	.word	0x40000c00

08002070 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a37      	ldr	r2, [pc, #220]	; (800216c <HAL_TIM_MspPostInit+0xfc>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d11f      	bne.n	80020d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_TIM_MspPostInit+0x100>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a35      	ldr	r2, [pc, #212]	; (8002170 <HAL_TIM_MspPostInit+0x100>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <HAL_TIM_MspPostInit+0x100>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4619      	mov	r1, r3
 80020ca:	482a      	ldr	r0, [pc, #168]	; (8002174 <HAL_TIM_MspPostInit+0x104>)
 80020cc:	f00d fcec 	bl	800faa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80020d0:	e047      	b.n	8002162 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_TIM_MspPostInit+0x108>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d11e      	bne.n	800211a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <HAL_TIM_MspPostInit+0x100>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4a22      	ldr	r2, [pc, #136]	; (8002170 <HAL_TIM_MspPostInit+0x100>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6313      	str	r3, [r2, #48]	; 0x30
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_TIM_MspPostInit+0x100>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002108:	2303      	movs	r3, #3
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	481a      	ldr	r0, [pc, #104]	; (800217c <HAL_TIM_MspPostInit+0x10c>)
 8002114:	f00d fcc8 	bl	800faa8 <HAL_GPIO_Init>
}
 8002118:	e023      	b.n	8002162 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM12)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_TIM_MspPostInit+0x110>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d11e      	bne.n	8002162 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_TIM_MspPostInit+0x100>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_TIM_MspPostInit+0x100>)
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	6313      	str	r3, [r2, #48]	; 0x30
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_TIM_MspPostInit+0x100>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002140:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002152:	2309      	movs	r3, #9
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	4809      	ldr	r0, [pc, #36]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 800215e:	f00d fca3 	bl	800faa8 <HAL_GPIO_Init>
}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40010000 	.word	0x40010000
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40010400 	.word	0x40010400
 800217c:	40020800 	.word	0x40020800
 8002180:	40001800 	.word	0x40001800
 8002184:	40020400 	.word	0x40020400

08002188 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <MX_USART1_UART_Init+0x50>)
 8002190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021c0:	f00f fe5c 	bl	8011e7c <HAL_UART_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021ca:	f7ff fa1d 	bl	8001608 <Error_Handler>
  }

}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000093c 	.word	0x2000093c
 80021d8:	40011000 	.word	0x40011000

080021dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a4c      	ldr	r2, [pc, #304]	; (800232c <HAL_UART_MspInit+0x150>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	f040 8092 	bne.w	8002324 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	4b4a      	ldr	r3, [pc, #296]	; (8002330 <HAL_UART_MspInit+0x154>)
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	4a49      	ldr	r2, [pc, #292]	; (8002330 <HAL_UART_MspInit+0x154>)
 800220a:	f043 0310 	orr.w	r3, r3, #16
 800220e:	6453      	str	r3, [r2, #68]	; 0x44
 8002210:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_UART_MspInit+0x154>)
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	4b43      	ldr	r3, [pc, #268]	; (8002330 <HAL_UART_MspInit+0x154>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4a42      	ldr	r2, [pc, #264]	; (8002330 <HAL_UART_MspInit+0x154>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6313      	str	r3, [r2, #48]	; 0x30
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <HAL_UART_MspInit+0x154>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002238:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002246:	2303      	movs	r3, #3
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800224a:	2307      	movs	r3, #7
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	4837      	ldr	r0, [pc, #220]	; (8002334 <HAL_UART_MspInit+0x158>)
 8002256:	f00d fc27 	bl	800faa8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800225a:	4b37      	ldr	r3, [pc, #220]	; (8002338 <HAL_UART_MspInit+0x15c>)
 800225c:	4a37      	ldr	r2, [pc, #220]	; (800233c <HAL_UART_MspInit+0x160>)
 800225e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <HAL_UART_MspInit+0x15c>)
 8002262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002266:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002268:	4b33      	ldr	r3, [pc, #204]	; (8002338 <HAL_UART_MspInit+0x15c>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_UART_MspInit+0x15c>)
 8002270:	2200      	movs	r2, #0
 8002272:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002274:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_UART_MspInit+0x15c>)
 8002276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800227a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800227c:	4b2e      	ldr	r3, [pc, #184]	; (8002338 <HAL_UART_MspInit+0x15c>)
 800227e:	2200      	movs	r2, #0
 8002280:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002282:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_UART_MspInit+0x15c>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_UART_MspInit+0x15c>)
 800228a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002290:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_UART_MspInit+0x15c>)
 8002292:	2200      	movs	r2, #0
 8002294:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002296:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_UART_MspInit+0x15c>)
 8002298:	2200      	movs	r2, #0
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800229c:	4826      	ldr	r0, [pc, #152]	; (8002338 <HAL_UART_MspInit+0x15c>)
 800229e:	f00d f871 	bl	800f384 <HAL_DMA_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80022a8:	f7ff f9ae 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a22      	ldr	r2, [pc, #136]	; (8002338 <HAL_UART_MspInit+0x15c>)
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34
 80022b2:	4a21      	ldr	r2, [pc, #132]	; (8002338 <HAL_UART_MspInit+0x15c>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <HAL_UART_MspInit+0x164>)
 80022ba:	4a22      	ldr	r2, [pc, #136]	; (8002344 <HAL_UART_MspInit+0x168>)
 80022bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_UART_MspInit+0x164>)
 80022c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <HAL_UART_MspInit+0x164>)
 80022c8:	2240      	movs	r2, #64	; 0x40
 80022ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_UART_MspInit+0x164>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022d2:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_UART_MspInit+0x164>)
 80022d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_UART_MspInit+0x164>)
 80022dc:	2200      	movs	r2, #0
 80022de:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_UART_MspInit+0x164>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_UART_MspInit+0x164>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_UART_MspInit+0x164>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022f2:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_UART_MspInit+0x164>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022f8:	4811      	ldr	r0, [pc, #68]	; (8002340 <HAL_UART_MspInit+0x164>)
 80022fa:	f00d f843 	bl	800f384 <HAL_DMA_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002304:	f7ff f980 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_UART_MspInit+0x164>)
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
 800230e:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <HAL_UART_MspInit+0x164>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2105      	movs	r1, #5
 8002318:	2025      	movs	r0, #37	; 0x25
 800231a:	f00c fffb 	bl	800f314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800231e:	2025      	movs	r0, #37	; 0x25
 8002320:	f00d f814 	bl	800f34c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002324:	bf00      	nop
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40011000 	.word	0x40011000
 8002330:	40023800 	.word	0x40023800
 8002334:	40020000 	.word	0x40020000
 8002338:	2000097c 	.word	0x2000097c
 800233c:	40026440 	.word	0x40026440
 8002340:	200009dc 	.word	0x200009dc
 8002344:	400264b8 	.word	0x400264b8

08002348 <CO_getUint32>:
 * Helper function returns uint32 from byte array.
 *
 * @param data Location of source data.
 * @return Variable of type uint32_t.
 */
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
    uint32_t value;
    memcpy(&value, data, sizeof(value));
 8002354:	60fb      	str	r3, [r7, #12]
    return value;
 8002356:	68fb      	ldr	r3, [r7, #12]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <CO_setUint32>:
 * Helper function writes uint32 to byte array.
 *
 * @param data Location of destination data.
 * @param value Variable of type uint32_t to be written into data.
 */
static inline void CO_setUint32(uint8_t data[], const uint32_t value){
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	683a      	ldr	r2, [r7, #0]
    memcpy(data, &value, sizeof(value));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <CO_EM_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_EM_receive(void *object, void *msg) {
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af02      	add	r7, sp, #8
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
    CO_EM_t *em;

    em = (CO_EM_t*)object;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	61fb      	str	r3, [r7, #28]

    if(em!=NULL && em->pFunctSignalRx!=NULL){
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d022      	beq.n	80023da <CO_EM_receive+0x5a>
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01e      	beq.n	80023da <CO_EM_receive+0x5a>
        uint16_t ident = CO_CANrxMsg_readIdent(msg);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	837b      	strh	r3, [r7, #26]
        if (ident != 0x80) {
 80023a2:	8b7b      	ldrh	r3, [r7, #26]
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d018      	beq.n	80023da <CO_EM_receive+0x5a>
            /* ignore sync messages (necessary if sync object is not used) */
            uint8_t *data = CO_CANrxMsg_readData(msg);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	3321      	adds	r3, #33	; 0x21
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
            uint16_t errorCode;
            uint32_t infoCode;

            CO_memcpySwap2(&errorCode, &data[0]);
 80023b4:	827b      	strh	r3, [r7, #18]
            CO_memcpySwap4(&infoCode, &data[4]);
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3304      	adds	r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
            em->pFunctSignalRx(ident,
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 80023c2:	8a79      	ldrh	r1, [r7, #18]
                            errorCode,
                            data[2],
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3302      	adds	r3, #2
            em->pFunctSignalRx(ident,
 80023c8:	781a      	ldrb	r2, [r3, #0]
                            data[3],
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3303      	adds	r3, #3
            em->pFunctSignalRx(ident,
 80023ce:	781d      	ldrb	r5, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8b78      	ldrh	r0, [r7, #26]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	462b      	mov	r3, r5
 80023d8:	47a0      	blx	r4
                            infoCode);
        }
    }
}
 80023da:	bf00      	nop
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080023e4 <CO_ODF_1003>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    CO_EMpr_t *emPr;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

    emPr = (CO_EMpr_t*) ODF_arg->object;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7ddb      	ldrb	r3, [r3, #23]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <CO_ODF_1003+0x50>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	7a5b      	ldrb	r3, [r3, #9]
 800240a:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7d9b      	ldrb	r3, [r3, #22]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d104      	bne.n	800241e <CO_ODF_1003+0x3a>
            ODF_arg->data[0] = noOfErrors;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	7bba      	ldrb	r2, [r7, #14]
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	e01a      	b.n	8002454 <CO_ODF_1003+0x70>
        }
        else if(ODF_arg->subIndex > noOfErrors){
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7d9b      	ldrb	r3, [r3, #22]
 8002422:	7bba      	ldrb	r2, [r7, #14]
 8002424:	429a      	cmp	r2, r3
 8002426:	d202      	bcs.n	800242e <CO_ODF_1003+0x4a>
            ret = CO_SDO_AB_NO_DATA;
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <CO_ODF_1003+0x80>)
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e012      	b.n	8002454 <CO_ODF_1003+0x70>
        }
        else{
            ret = CO_SDO_AB_NONE;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e00f      	b.n	8002454 <CO_ODF_1003+0x70>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7d9b      	ldrb	r3, [r3, #22]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <CO_ODF_1003+0x6c>
            if(value == 0U){
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <CO_ODF_1003+0x66>
                emPr->preDefErrNoOfErrors = 0U;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2200      	movs	r2, #0
 8002446:	725a      	strb	r2, [r3, #9]
 8002448:	e004      	b.n	8002454 <CO_ODF_1003+0x70>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <CO_ODF_1003+0x84>)
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e001      	b.n	8002454 <CO_ODF_1003+0x70>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <CO_ODF_1003+0x88>)
 8002452:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
 8002454:	697b      	ldr	r3, [r7, #20]
}
 8002456:	4618      	mov	r0, r3
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	08000024 	.word	0x08000024
 8002468:	06090030 	.word	0x06090030
 800246c:	06010002 	.word	0x06010002

08002470 <CO_ODF_1014>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff5e 	bl	8002348 <CO_getUint32>
 800248c:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7ddb      	ldrb	r3, [r3, #23]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <CO_ODF_1014+0x3c>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	4619      	mov	r1, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	440b      	add	r3, r1
 80024a4:	4619      	mov	r1, r3
 80024a6:	4610      	mov	r0, r2
 80024a8:	f7ff ff5c 	bl	8002364 <CO_setUint32>
    }

    return ret;
 80024ac:	697b      	ldr	r3, [r7, #20]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <CO_EM_init>:
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidTxEM)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af04      	add	r7, sp, #16
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
    uint8_t i;
    CO_ReturnError_t ret = CO_ERROR_NO;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75bb      	strb	r3, [r7, #22]

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL || errorStatusBitsSize<6U ||
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d018      	beq.n	8002502 <CO_EM_init+0x4a>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d015      	beq.n	8002502 <CO_EM_init+0x4a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d012      	beq.n	8002502 <CO_EM_init+0x4a>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00f      	beq.n	8002502 <CO_EM_init+0x4a>
 80024e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d90b      	bls.n	8002502 <CO_EM_init+0x4a>
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <CO_EM_init+0x4a>
       errorRegister==NULL || preDefErr==NULL || CANdevTx==NULL
 80024f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <CO_EM_init+0x4a>
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <CO_EM_init+0x4a>
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx==NULL
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <CO_EM_init+0x50>
#endif
    ){
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	e08d      	b.n	8002624 <CO_EM_init+0x16c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002514:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3305      	adds	r3, #5
 800251a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1d5a      	adds	r2, r3, #5
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1d5a      	adds	r2, r3, #5
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
#if (CO_CONFIG_EM) & CO_CONFIG_FLAG_CALLBACK_PRE
    em->pFunctSignalPre         = NULL;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	669a      	str	r2, [r3, #104]	; 0x68
    em->functSignalObjectPre    = NULL;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
    em->pFunctSignalRx          = NULL;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	671a      	str	r2, [r3, #112]	; 0x70
#endif
    emPr->em                    = em;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002564:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800256c:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2200      	movs	r2, #0
 8002572:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]

    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
 800257a:	2300      	movs	r3, #0
 800257c:	75fb      	strb	r3, [r7, #23]
 800257e:	e008      	b.n	8002592 <CO_EM_init+0xda>
        em->errorStatusBits[i] = 0U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	4413      	add	r3, r2
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	3301      	adds	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
 8002592:	7dfa      	ldrb	r2, [r7, #23]
 8002594:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002598:	429a      	cmp	r2, r3
 800259a:	d3f1      	bcc.n	8002580 <CO_EM_init+0xc8>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure(SDO, OD_H1003_PREDEF_ERR_FIELD, CO_ODF_1003, (void*)emPr, 0, 0U);
 800259c:	2300      	movs	r3, #0
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	2300      	movs	r3, #0
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4a21      	ldr	r2, [pc, #132]	; (800262c <CO_EM_init+0x174>)
 80025a8:	f241 0103 	movw	r1, #4099	; 0x1003
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f002 fddd 	bl	800516c <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1014_COBID_EMERGENCY, CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 80025b8:	2200      	movs	r2, #0
 80025ba:	9201      	str	r2, [sp, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <CO_EM_init+0x178>)
 80025c2:	f241 0114 	movw	r1, #4116	; 0x1014
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f002 fdd0 	bl	800516c <CO_OD_configure>

#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(
 80025cc:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <CO_EM_init+0x17c>)
 80025d0:	9302      	str	r3, [sp, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2300      	movs	r3, #0
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e2:	f006 ff35 	bl	8009450 <CO_CANrxBufferInit>
 80025e6:	4603      	mov	r3, r0
 80025e8:	75bb      	strb	r3, [r7, #22]
            (void*)em,              /* object passed to receive function */
            CO_EM_receive);         /* this function will process received message */
#endif

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdevTx;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ee:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	61da      	str	r2, [r3, #28]
    emPr->CANtxBuff = CO_CANtxBufferInit(
 80025f8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80025fc:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80025fe:	2300      	movs	r3, #0
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	2308      	movs	r3, #8
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2300      	movs	r3, #0
 8002608:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800260a:	f006 ff77 	bl	80094fc <CO_CANtxBufferInit>
 800260e:	4602      	mov	r2, r0
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (emPr->CANtxBuff == NULL) {
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <CO_EM_init+0x168>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800261c:	23ff      	movs	r3, #255	; 0xff
 800261e:	75bb      	strb	r3, [r7, #22]
    }

    return ret;
 8002620:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	080023e5 	.word	0x080023e5
 8002630:	08002471 	.word	0x08002471
 8002634:	08002381 	.word	0x08002381

08002638 <CO_EM_process>:
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint16_t                emInhTime_100us,
        uint32_t               *timerNext_us)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b08f      	sub	sp, #60	; 0x3c
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	461a      	mov	r2, r3
 8002644:	460b      	mov	r3, r1
 8002646:	72fb      	strb	r3, [r7, #11]
 8002648:	4613      	mov	r3, r2
 800264a:	813b      	strh	r3, [r7, #8]

    CO_EM_t *em = emPr->em;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorRegister;
    uint8_t errorMask;
    uint8_t i;
    uint32_t emInhTime_us = (uint32_t)emInhTime_100us * 100;
 8002652:	893b      	ldrh	r3, [r7, #8]
 8002654:	2264      	movs	r2, #100	; 0x64
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	627b      	str	r3, [r7, #36]	; 0x24

    /* verify errors from driver and other */
    CO_CANverifyErrors(emPr->CANdev);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	4618      	mov	r0, r3
 8002662:	f007 f8a5 	bl	80097b0 <CO_CANverifyErrors>
    if(em->wrongErrorReport != 0U){
 8002666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002668:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00c      	beq.n	800268a <CO_EM_process+0x52>
        CO_errorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8002676:	f44f 42c2 	mov.w	r2, #24832	; 0x6100
 800267a:	2128      	movs	r1, #40	; 0x28
 800267c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800267e:	f000 f92c 	bl	80028da <CO_errorReport>
        em->wrongErrorReport = 0U;
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    errorMask = (uint8_t)~(CO_ERR_REG_GENERIC_ERR | CO_ERR_REG_COMM_ERR | CO_ERR_REG_MANUFACTURER);
 8002690:	236e      	movs	r3, #110	; 0x6e
 8002692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /* generic error */
    if(em->errorStatusBits[5]){
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3305      	adds	r3, #5
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <CO_EM_process+0x76>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 80026a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3302      	adds	r3, #2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d105      	bne.n	80026c6 <CO_EM_process+0x8e>
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3303      	adds	r3, #3
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <CO_EM_process+0x9a>
        errorRegister |= CO_ERR_REG_COMM_ERR;
 80026c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026ca:	f043 0310 	orr.w	r3, r3, #16
 80026ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    /* Manufacturer */
    for(i=6; i<em->errorStatusBitsSize; i++) {
 80026d2:	2306      	movs	r3, #6
 80026d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80026d8:	e012      	b.n	8002700 <CO_EM_process+0xc8>
        if (em->errorStatusBits[i]) {
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <CO_EM_process+0xbe>
            errorRegister |= CO_ERR_REG_MANUFACTURER;
 80026ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for(i=6; i<em->errorStatusBitsSize; i++) {
 80026f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026fa:	3301      	adds	r3, #1
 80026fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	791b      	ldrb	r3, [r3, #4]
 8002704:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002708:	429a      	cmp	r2, r3
 800270a:	d3e6      	bcc.n	80026da <CO_EM_process+0xa2>
        }
    }
    *emPr->errorRegister = (*emPr->errorRegister & errorMask) | errorRegister;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002716:	4013      	ands	r3, r2
 8002718:	b2d9      	uxtb	r1, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002722:	430a      	orrs	r2, r1
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if (emPr->inhibitEmTimer < emInhTime_us) {
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272e:	429a      	cmp	r2, r3
 8002730:	d905      	bls.n	800273e <CO_EM_process+0x106>
        emPr->inhibitEmTimer += timeDifference_us;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	441a      	add	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	60da      	str	r2, [r3, #12]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80c6 	beq.w	80028d2 <CO_EM_process+0x29a>
            !emPr->CANtxBuff->bufferFull &&
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	7b5b      	ldrb	r3, [r3, #13]
 800274c:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
 800274e:	2b00      	cmp	r3, #0
 8002750:	f040 80bf 	bne.w	80028d2 <CO_EM_process+0x29a>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            !emPr->CANtxBuff->bufferFull &&
 800275c:	429a      	cmp	r2, r3
 800275e:	d105      	bne.n	800276c <CO_EM_process+0x134>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 80b3 	beq.w	80028d2 <CO_EM_process+0x29a>
    {
        uint32_t preDEF;    /* preDefinedErrorField */

        if (emPr->inhibitEmTimer >= emInhTime_us) {
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	429a      	cmp	r2, r3
 8002774:	f200 809c 	bhi.w	80028b0 <CO_EM_process+0x278>
            /* inhibit time elapsed, send message */

            /* add error register */
            em->bufReadPtr[2] = *emPr->errorRegister;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002780:	3302      	adds	r3, #2
 8002782:	7812      	ldrb	r2, [r2, #0]
 8002784:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
            /* report also own emergency messages */
            if (em->pFunctSignalRx != NULL) {
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	2b00      	cmp	r3, #0
 800278c:	d019      	beq.n	80027c2 <CO_EM_process+0x18a>
                uint16_t errorCode;
                uint32_t infoCode;
                CO_memcpySwap2(&errorCode, &em->bufReadPtr[0]);
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	82fb      	strh	r3, [r7, #22]
                CO_memcpySwap4(&infoCode, &em->bufReadPtr[4]);
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279c:	3304      	adds	r3, #4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	613b      	str	r3, [r7, #16]
                em->pFunctSignalRx(0,
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 80027a6:	8af9      	ldrh	r1, [r7, #22]
                                   errorCode,
                                   em->bufReadPtr[2],
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ac:	3302      	adds	r3, #2
                em->pFunctSignalRx(0,
 80027ae:	781a      	ldrb	r2, [r3, #0]
                                   em->bufReadPtr[3],
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b4:	3303      	adds	r3, #3
                em->pFunctSignalRx(0,
 80027b6:	7818      	ldrb	r0, [r3, #0]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	4603      	mov	r3, r0
 80027be:	2000      	movs	r0, #0
 80027c0:	47a0      	blx	r4
                                   infoCode);
            }
#endif

            /* copy data to CAN emergency message */
            memcpy(emPr->CANtxBuff->data, em->bufReadPtr, sizeof(emPr->CANtxBuff->data));
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	1d58      	adds	r0, r3, #5
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	2208      	movs	r2, #8
 80027ce:	4619      	mov	r1, r3
 80027d0:	f014 f9f6 	bl	8016bc0 <memcpy>
            memcpy(&preDEF, em->bufReadPtr, sizeof(preDEF));
 80027d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	61bb      	str	r3, [r7, #24]
            em->bufReadPtr += 8;
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e0:	f103 0208 	add.w	r2, r3, #8
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update read buffer pointer and reset inhibit timer */
            if(em->bufReadPtr == em->bufEnd){
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d103      	bne.n	80027fc <CO_EM_process+0x1c4>
                em->bufReadPtr = em->buf;
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	1d5a      	adds	r2, r3, #5
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	661a      	str	r2, [r3, #96]	; 0x60
            }
            emPr->inhibitEmTimer = 0U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]

            /* verify message buffer overflow, then clear full flag */
            if(em->bufFull == 2U){
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002808:	2b02      	cmp	r3, #2
 800280a:	d10b      	bne.n	8002824 <CO_EM_process+0x1ec>
                em->bufFull = 0U;    /* will be updated below */
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
 8002814:	2300      	movs	r3, #0
 8002816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800281a:	2120      	movs	r1, #32
 800281c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800281e:	f000 f85c 	bl	80028da <CO_errorReport>
 8002822:	e008      	b.n	8002836 <CO_EM_process+0x1fe>
            }
            else{
                em->bufFull = 0;
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2120      	movs	r1, #32
 8002830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002832:	f000 f8d8 	bl	80029e6 <CO_errorReset>
            }

            /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
            if(emPr->preDefErr){
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d02f      	beq.n	800289e <CO_EM_process+0x266>
                uint8_t j;

                if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	7a5a      	ldrb	r2, [r3, #9]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	7a1b      	ldrb	r3, [r3, #8]
 8002846:	429a      	cmp	r2, r3
 8002848:	d205      	bcs.n	8002856 <CO_EM_process+0x21e>
                    emPr->preDefErrNoOfErrors++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	7a5b      	ldrb	r3, [r3, #9]
 800284e:	3301      	adds	r3, #1
 8002850:	b2da      	uxtb	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	725a      	strb	r2, [r3, #9]
                for(j=emPr->preDefErrNoOfErrors-1; j>0; j--)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	7a5b      	ldrb	r3, [r3, #9]
 800285a:	3b01      	subs	r3, #1
 800285c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002860:	e015      	b.n	800288e <CO_EM_process+0x256>
                    emPr->preDefErr[j] = emPr->preDefErr[j-1];
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800286a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800286e:	3b01      	subs	r3, #1
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	441a      	add	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	601a      	str	r2, [r3, #0]
                for(j=emPr->preDefErrNoOfErrors-1; j>0; j--)
 8002884:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002888:	3b01      	subs	r3, #1
 800288a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800288e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1e5      	bne.n	8002862 <CO_EM_process+0x22a>
                emPr->preDefErr[0] = preDEF;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	601a      	str	r2, [r3, #0]
            }

            /* send CAN message */
            CO_CANsend(emPr->CANdev, emPr->CANtxBuff);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f006 fe67 	bl	800957c <CO_CANsend>
            }
        }
#endif
    }

    return;
 80028ae:	e010      	b.n	80028d2 <CO_EM_process+0x29a>
        else if (timerNext_us != NULL) {
 80028b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <CO_EM_process+0x29a>
            diff = emInhTime_us - emPr->inhibitEmTimer;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	61fb      	str	r3, [r7, #28]
            if (*timerNext_us > diff) {
 80028c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d203      	bcs.n	80028d2 <CO_EM_process+0x29a>
                *timerNext_us = diff;
 80028ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	601a      	str	r2, [r3, #0]
    return;
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
}
 80028d4:	3734      	adds	r7, #52	; 0x34
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd90      	pop	{r4, r7, pc}

080028da <CO_errorReport>:


/******************************************************************************/
void CO_errorReport(CO_EM_t *em, const uint8_t errorBit, const uint16_t errorCode, const uint32_t infoCode){
 80028da:	b580      	push	{r7, lr}
 80028dc:	b088      	sub	sp, #32
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	72fb      	strb	r3, [r7, #11]
 80028e8:	4613      	mov	r3, r2
 80028ea:	813b      	strh	r3, [r7, #8]
    uint8_t index = errorBit >> 3;
 80028ec:	7afb      	ldrb	r3, [r7, #11]
 80028ee:	08db      	lsrs	r3, r3, #3
 80028f0:	76bb      	strb	r3, [r7, #26]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80028f2:	7afb      	ldrb	r3, [r7, #11]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	2201      	movs	r2, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	767b      	strb	r3, [r7, #25]
    uint8_t *errorStatusBits = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
    bool_t sendEmergency = true;
 8002904:	2301      	movs	r3, #1
 8002906:	76fb      	strb	r3, [r7, #27]

    if(em == NULL){
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <CO_errorReport+0x3a>
        sendEmergency = false;
 800290e:	2300      	movs	r3, #0
 8002910:	76fb      	strb	r3, [r7, #27]
 8002912:	e019      	b.n	8002948 <CO_errorReport+0x6e>
    }
    else if(index >= em->errorStatusBitsSize){
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	791b      	ldrb	r3, [r3, #4]
 8002918:	7eba      	ldrb	r2, [r7, #26]
 800291a:	429a      	cmp	r2, r3
 800291c:	d306      	bcc.n	800292c <CO_errorReport+0x52>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	7afa      	ldrb	r2, [r7, #11]
 8002922:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 8002926:	2300      	movs	r3, #0
 8002928:	76fb      	strb	r3, [r7, #27]
 800292a:	e00d      	b.n	8002948 <CO_errorReport+0x6e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	7ebb      	ldrb	r3, [r7, #26]
 8002932:	4413      	add	r3, r2
 8002934:	61fb      	str	r3, [r7, #28]
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	7e7b      	ldrb	r3, [r7, #25]
 800293c:	4013      	ands	r3, r2
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <CO_errorReport+0x6e>
            sendEmergency = false;
 8002944:	2300      	movs	r3, #0
 8002946:	76fb      	strb	r3, [r7, #27]
        }
    }

    if(sendEmergency){
 8002948:	7efb      	ldrb	r3, [r7, #27]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d047      	beq.n	80029de <CO_errorReport+0x104>
        /* set error bit */
        if(errorBit){
 800294e:	7afb      	ldrb	r3, [r7, #11]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d006      	beq.n	8002962 <CO_errorReport+0x88>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	7e7b      	ldrb	r3, [r7, #25]
 800295a:	4313      	orrs	r3, r2
 800295c:	b2da      	uxtb	r2, r3
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <CO_errorReport+0x9c>
            em->bufFull = 2;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                em->pFunctSignalPre(em->functSignalObjectPre);
            }
#endif
        }
    }
}
 8002974:	e033      	b.n	80029de <CO_errorReport+0x104>
 8002976:	893b      	ldrh	r3, [r7, #8]
            CO_memcpySwap2(&bufCopy[0], &errorCode);
 8002978:	823b      	strh	r3, [r7, #16]
            bufCopy[2] = 0; /* error register will be set later */
 800297a:	2300      	movs	r3, #0
 800297c:	74bb      	strb	r3, [r7, #18]
            bufCopy[3] = errorBit;
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	74fb      	strb	r3, [r7, #19]
 8002982:	687b      	ldr	r3, [r7, #4]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 8002984:	617b      	str	r3, [r7, #20]
            memcpy(em->bufWritePtr, bufCopy, sizeof(bufCopy));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	461a      	mov	r2, r3
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	cb03      	ldmia	r3!, {r0, r1}
 8002992:	6010      	str	r0, [r2, #0]
 8002994:	6051      	str	r1, [r2, #4]
            em->bufWritePtr += 8;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	f103 0208 	add.w	r2, r3, #8
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d103      	bne.n	80029b6 <CO_errorReport+0xdc>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1d5a      	adds	r2, r3, #5
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029be:	429a      	cmp	r2, r3
 80029c0:	d103      	bne.n	80029ca <CO_errorReport+0xf0>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignalPre != NULL) {
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <CO_errorReport+0x104>
                em->pFunctSignalPre(em->functSignalObjectPre);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80029da:	4610      	mov	r0, r2
 80029dc:	4798      	blx	r3
}
 80029de:	bf00      	nop
 80029e0:	3720      	adds	r7, #32
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <CO_errorReset>:


/******************************************************************************/
void CO_errorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b088      	sub	sp, #32
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	460b      	mov	r3, r1
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	72fb      	strb	r3, [r7, #11]
    uint8_t index = errorBit >> 3;
 80029f4:	7afb      	ldrb	r3, [r7, #11]
 80029f6:	08db      	lsrs	r3, r3, #3
 80029f8:	76bb      	strb	r3, [r7, #26]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80029fa:	7afb      	ldrb	r3, [r7, #11]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	2201      	movs	r2, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	767b      	strb	r3, [r7, #25]
    uint8_t *errorStatusBits = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
    bool_t sendEmergency = true;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	76fb      	strb	r3, [r7, #27]

    if(em == NULL){
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <CO_errorReset+0x36>
        sendEmergency = false;
 8002a16:	2300      	movs	r3, #0
 8002a18:	76fb      	strb	r3, [r7, #27]
 8002a1a:	e019      	b.n	8002a50 <CO_errorReset+0x6a>
    }
    else if(index >= em->errorStatusBitsSize){
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	791b      	ldrb	r3, [r3, #4]
 8002a20:	7eba      	ldrb	r2, [r7, #26]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d306      	bcc.n	8002a34 <CO_errorReset+0x4e>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	7afa      	ldrb	r2, [r7, #11]
 8002a2a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	76fb      	strb	r3, [r7, #27]
 8002a32:	e00d      	b.n	8002a50 <CO_errorReset+0x6a>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	7ebb      	ldrb	r3, [r7, #26]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	61fb      	str	r3, [r7, #28]
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	7e7b      	ldrb	r3, [r7, #25]
 8002a44:	4013      	ands	r3, r2
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <CO_errorReset+0x6a>
            sendEmergency = false;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	76fb      	strb	r3, [r7, #27]
        }
    }

    if(sendEmergency){
 8002a50:	7efb      	ldrb	r3, [r7, #27]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d04b      	beq.n	8002aee <CO_errorReset+0x108>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	b25a      	sxtb	r2, r3
 8002a5c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	b25b      	sxtb	r3, r3
 8002a64:	4013      	ands	r3, r2
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d004      	beq.n	8002a82 <CO_errorReset+0x9c>
            em->bufFull = 2;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                em->pFunctSignalPre(em->functSignalObjectPre);
            }
#endif
        }
    }
}
 8002a80:	e035      	b.n	8002aee <CO_errorReset+0x108>
            bufCopy[0] = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	743b      	strb	r3, [r7, #16]
            bufCopy[1] = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	747b      	strb	r3, [r7, #17]
            bufCopy[2] = 0; /* error register will be set later */
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	74bb      	strb	r3, [r7, #18]
            bufCopy[3] = errorBit;
 8002a8e:	7afb      	ldrb	r3, [r7, #11]
 8002a90:	74fb      	strb	r3, [r7, #19]
 8002a92:	687b      	ldr	r3, [r7, #4]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 8002a94:	617b      	str	r3, [r7, #20]
            memcpy(em->bufWritePtr, bufCopy, sizeof(bufCopy));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	cb03      	ldmia	r3!, {r0, r1}
 8002aa2:	6010      	str	r0, [r2, #0]
 8002aa4:	6051      	str	r1, [r2, #4]
            em->bufWritePtr += 8;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	f103 0208 	add.w	r2, r3, #8
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d103      	bne.n	8002ac6 <CO_errorReset+0xe0>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1d5a      	adds	r2, r3, #5
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d103      	bne.n	8002ada <CO_errorReset+0xf4>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignalPre != NULL) {
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <CO_errorReset+0x108>
                em->pFunctSignalPre(em->functSignalObjectPre);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002aea:	4610      	mov	r0, r2
 8002aec:	4798      	blx	r3
}
 8002aee:	bf00      	nop
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <CO_isError>:


/******************************************************************************/
bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit){
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	73bb      	strb	r3, [r7, #14]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	2201      	movs	r2, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	737b      	strb	r3, [r7, #13]
    bool_t ret = false;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]

    if(em != NULL && index < em->errorStatusBitsSize){
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d010      	beq.n	8002b42 <CO_isError+0x4c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	791b      	ldrb	r3, [r3, #4]
 8002b24:	7bba      	ldrb	r2, [r7, #14]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d20b      	bcs.n	8002b42 <CO_isError+0x4c>
        if((em->errorStatusBits[index] & bitmask) != 0){
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	7bbb      	ldrb	r3, [r7, #14]
 8002b30:	4413      	add	r3, r2
 8002b32:	781a      	ldrb	r2, [r3, #0]
 8002b34:	7b7b      	ldrb	r3, [r7, #13]
 8002b36:	4013      	ands	r3, r2
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <CO_isError+0x4c>
            ret = true;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8002b5c:	60fb      	str	r3, [r7, #12]
    return value;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b7c:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	3321      	adds	r3, #33	; 0x21
 8002b82:	613b      	str	r3, [r7, #16]

    HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	60fb      	str	r3, [r7, #12]

    /* verify message length */
    if(DLC == 1){
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d107      	bne.n	8002b9e <CO_HBcons_receive+0x32>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	b25a      	sxtb	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	60da      	str	r2, [r3, #12]
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_CALLBACK_PRE
    /* Optional signal to RTOS, which can resume task, which handles HBcons. */
    if(HBconsNode->pFunctSignalPre != NULL) {
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <CO_HBcons_receive+0x46>
        HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	6952      	ldr	r2, [r2, #20]
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4798      	blx	r3
    }
#endif
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <CO_ODF_1016>:
 * OD function for accessing _Consumer Heartbeat Time_ (index 0x1016) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
    uint8_t NodeID;
    uint16_t HBconsTime;
    uint32_t value;
    CO_ReturnError_t ret;

    if(ODF_arg->reading){
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7ddb      	ldrb	r3, [r3, #23]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <CO_ODF_1016+0x14>
        return CO_SDO_AB_NONE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e026      	b.n	8002c1e <CO_ODF_1016+0x62>
    }

    HBcons = (CO_HBconsumer_t*) ODF_arg->object;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	617b      	str	r3, [r7, #20]
    value = CO_getUint32(ODF_arg->data);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ffb8 	bl	8002b50 <CO_getUint32>
 8002be0:	6138      	str	r0, [r7, #16]
    NodeID = (value >> 16U) & 0xFFU;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	73fb      	strb	r3, [r7, #15]
    HBconsTime = value & 0xFFFFU;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	81bb      	strh	r3, [r7, #12]

    if((value & 0xFF800000U) != 0){
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	0ddb      	lsrs	r3, r3, #23
 8002bf0:	05db      	lsls	r3, r3, #23
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <CO_ODF_1016+0x3e>
        return CO_SDO_AB_PRAM_INCOMPAT;
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <CO_ODF_1016+0x6c>)
 8002bf8:	e011      	b.n	8002c1e <CO_ODF_1016+0x62>
    }

    ret = CO_HBconsumer_initEntry(HBcons, ODF_arg->subIndex-1U, NodeID, HBconsTime);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7d9b      	ldrb	r3, [r3, #22]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b2d9      	uxtb	r1, r3
 8002c02:	89bb      	ldrh	r3, [r7, #12]
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f000 f8a6 	bl	8002d58 <CO_HBconsumer_initEntry>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	72fb      	strb	r3, [r7, #11]
    if (ret != CO_ERROR_NO) {
 8002c10:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <CO_ODF_1016+0x60>
        return CO_SDO_AB_PRAM_INCOMPAT;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <CO_ODF_1016+0x6c>)
 8002c1a:	e000      	b.n	8002c1e <CO_ODF_1016+0x62>
    }
    return CO_SDO_AB_NONE;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	06040043 	.word	0x06040043

08002c2c <CO_HBconsumer_init>:
        const uint32_t          HBconsTime[],
        CO_HBconsNode_t         monitoredNodes[],
        uint8_t                 numberOfMonitoredNodes,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdxStart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
    uint8_t i;
    CO_ReturnError_t ret = CO_ERROR_NO;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75bb      	strb	r3, [r7, #22]

    /* verify arguments */
    if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <CO_HBconsumer_init+0x36>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <CO_HBconsumer_init+0x36>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <CO_HBconsumer_init+0x36>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <CO_HBconsumer_init+0x36>
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <CO_HBconsumer_init+0x36>
        monitoredNodes==NULL || CANdevRx==NULL){
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <CO_HBconsumer_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002c62:	f04f 33ff 	mov.w	r3, #4294967295
 8002c66:	e071      	b.n	8002d4c <CO_HBconsumer_init+0x120>
    }

    /* Configure object variables */
    HBcons->em = em;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	601a      	str	r2, [r3, #0]
    HBcons->HBconsTime = HBconsTime;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	605a      	str	r2, [r3, #4]
    HBcons->monitoredNodes = monitoredNodes;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a3a      	ldr	r2, [r7, #32]
 8002c78:	609a      	str	r2, [r3, #8]
    HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002c80:	731a      	strb	r2, [r3, #12]
    HBcons->allMonitoredActive = false;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	735a      	strb	r2, [r3, #13]
    HBcons->allMonitoredOperational = CO_NMT_UNKNOWN;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	22ff      	movs	r2, #255	; 0xff
 8002c8c:	739a      	strb	r2, [r3, #14]
    HBcons->NMTisPreOrOperationalPrev = false;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	73da      	strb	r2, [r3, #15]
    HBcons->CANdevRx = CANdevRx;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c98:	611a      	str	r2, [r3, #16]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002c9e:	829a      	strh	r2, [r3, #20]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
    HBcons->pFunctSignalNmtChanged = NULL;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	619a      	str	r2, [r3, #24]
#endif

    for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]
 8002caa:	e03d      	b.n	8002d28 <CO_HBconsumer_init+0xfc>
        uint8_t nodeId = (HBcons->HBconsTime[i] >> 16U) & 0xFFU;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	757b      	strb	r3, [r7, #21]
        uint16_t time = HBcons->HBconsTime[i] & 0xFFFFU;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	7dfb      	ldrb	r3, [r7, #23]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	827b      	strh	r3, [r7, #18]
        ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8002cca:	8a7b      	ldrh	r3, [r7, #18]
 8002ccc:	7d7a      	ldrb	r2, [r7, #21]
 8002cce:	7df9      	ldrb	r1, [r7, #23]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f841 	bl	8002d58 <CO_HBconsumer_initEntry>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	75bb      	strb	r3, [r7, #22]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_CALLBACK_PRE
            HBcons->monitoredNodes[i].pFunctSignalPre = NULL;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	2134      	movs	r1, #52	; 0x34
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
#endif
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            HBcons->monitoredNodes[i].pFunctSignalHbStarted = NULL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	2134      	movs	r1, #52	; 0x34
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
            HBcons->monitoredNodes[i].pFunctSignalTimeout = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	2134      	movs	r1, #52	; 0x34
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24
            HBcons->monitoredNodes[i].pFunctSignalRemoteReset = NULL;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2134      	movs	r1, #52	; 0x34
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	2200      	movs	r2, #0
 8002d20:	62da      	str	r2, [r3, #44]	; 0x2c
    for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	3301      	adds	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	7b1b      	ldrb	r3, [r3, #12]
 8002d2c:	7dfa      	ldrb	r2, [r7, #23]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3bc      	bcc.n	8002cac <CO_HBconsumer_init+0x80>
#endif
    }

    /* Configure Object dictionary entry at index 0x1016 */
    CO_OD_configure(SDO, OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
 8002d32:	2300      	movs	r3, #0
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	2300      	movs	r3, #0
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <CO_HBconsumer_init+0x128>)
 8002d3e:	f241 0116 	movw	r1, #4118	; 0x1016
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f002 fa12 	bl	800516c <CO_OD_configure>

    return ret;
 8002d48:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	08002bbd 	.word	0x08002bbd

08002d58 <CO_HBconsumer_initEntry>:
CO_ReturnError_t CO_HBconsumer_initEntry(
        CO_HBconsumer_t        *HBcons,
        uint8_t                 idx,
        uint8_t                 nodeId,
        uint16_t                consumerTime_ms)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b08b      	sub	sp, #44	; 0x2c
 8002d5c:	af04      	add	r7, sp, #16
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	4608      	mov	r0, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	70fb      	strb	r3, [r7, #3]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	70bb      	strb	r3, [r7, #2]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8002d72:	2300      	movs	r3, #0
 8002d74:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <CO_HBconsumer_initEntry+0x2e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7b1b      	ldrb	r3, [r3, #12]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8a:	e084      	b.n	8002e96 <CO_HBconsumer_initEntry+0x13e>
    }

    if((consumerTime_ms != 0) && (nodeId != 0)){
 8002d8c:	883b      	ldrh	r3, [r7, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d026      	beq.n	8002de0 <CO_HBconsumer_initEntry+0x88>
 8002d92:	78bb      	ldrb	r3, [r7, #2]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d023      	beq.n	8002de0 <CO_HBconsumer_initEntry+0x88>
        uint8_t i;
        /* there must not be more entries with same index and time different than zero */
        for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 8002d98:	2300      	movs	r3, #0
 8002d9a:	75bb      	strb	r3, [r7, #22]
 8002d9c:	e01b      	b.n	8002dd6 <CO_HBconsumer_initEntry+0x7e>
            uint32_t objectCopy = HBcons->HBconsTime[i];
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	7dbb      	ldrb	r3, [r7, #22]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	613b      	str	r3, [r7, #16]
            uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	0c1b      	lsrs	r3, r3, #16
 8002db0:	73fb      	strb	r3, [r7, #15]
            uint16_t HBconsTimeObj = objectCopy & 0xFFFFU;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	81bb      	strh	r3, [r7, #12]
            if((idx != i) && (HBconsTimeObj != 0) && (nodeId == NodeIDObj)){
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	7dbb      	ldrb	r3, [r7, #22]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d008      	beq.n	8002dd0 <CO_HBconsumer_initEntry+0x78>
 8002dbe:	89bb      	ldrh	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <CO_HBconsumer_initEntry+0x78>
 8002dc4:	78ba      	ldrb	r2, [r7, #2]
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d101      	bne.n	8002dd0 <CO_HBconsumer_initEntry+0x78>
                ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8002dcc:	23ff      	movs	r3, #255	; 0xff
 8002dce:	75fb      	strb	r3, [r7, #23]
        for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 8002dd0:	7dbb      	ldrb	r3, [r7, #22]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	75bb      	strb	r3, [r7, #22]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	7b1b      	ldrb	r3, [r3, #12]
 8002dda:	7dba      	ldrb	r2, [r7, #22]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d3de      	bcc.n	8002d9e <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8002de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d154      	bne.n	8002e92 <CO_HBconsumer_initEntry+0x13a>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	2134      	movs	r1, #52	; 0x34
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
        monitoredNode->nodeId = nodeId;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	78ba      	ldrb	r2, [r7, #2]
 8002dfc:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8002dfe:	883b      	ldrh	r3, [r7, #0]
 8002e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e04:	fb02 f303 	mul.w	r3, r2, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	22ff      	movs	r2, #255	; 0xff
 8002e18:	761a      	strb	r2, [r3, #24]
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId && monitoredNode->time_us) {
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00d      	beq.n	8002e44 <CO_HBconsumer_initEntry+0xec>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <CO_HBconsumer_initEntry+0xec>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8002e3a:	82bb      	strh	r3, [r7, #20]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	709a      	strb	r2, [r3, #2]
 8002e42:	e007      	b.n	8002e54 <CO_HBconsumer_initEntry+0xfc>
        }
        else {
            COB_ID = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	82bb      	strh	r3, [r7, #20]
            monitoredNode->time_us = 0;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2200      	movs	r2, #0
 8002e52:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer CAN reception */
        if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	789b      	ldrb	r3, [r3, #2]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01a      	beq.n	8002e92 <CO_HBconsumer_initEntry+0x13a>
            ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6918      	ldr	r0, [r3, #16]
                                     HBcons->CANdevRxIdxStart + idx,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8a9a      	ldrh	r2, [r3, #20]
            ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	b299      	uxth	r1, r3
                                     COB_ID,
                                     0x7FF,
                                     0,
                                     (void*)&HBcons->monitoredNodes[idx],
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	2434      	movs	r4, #52	; 0x34
 8002e74:	fb04 f303 	mul.w	r3, r4, r3
 8002e78:	4413      	add	r3, r2
            ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8002e7a:	8aba      	ldrh	r2, [r7, #20]
 8002e7c:	4c08      	ldr	r4, [pc, #32]	; (8002ea0 <CO_HBconsumer_initEntry+0x148>)
 8002e7e:	9402      	str	r4, [sp, #8]
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	2300      	movs	r3, #0
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002e8a:	f006 fae1 	bl	8009450 <CO_CANrxBufferInit>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	75fb      	strb	r3, [r7, #23]
                                     CO_HBcons_receive);
        }
    }
    return ret;
 8002e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd90      	pop	{r4, r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	08002b6d 	.word	0x08002b6d

08002ea4 <CO_HBconsumer_initCallbackHeartbeatStarted>:
void CO_HBconsumer_initCallbackHeartbeatStarted(
    CO_HBconsumer_t        *HBcons,
    uint8_t                 idx,
    void                   *object,
    void                  (*pFunctSignal)(uint8_t nodeId, uint8_t idx, void *object))
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	72fb      	strb	r3, [r7, #11]
    CO_HBconsNode_t *monitoredNode;

    if (HBcons==NULL || idx>=HBcons->numberOfMonitoredNodes) {
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d013      	beq.n	8002ee2 <CO_HBconsumer_initCallbackHeartbeatStarted+0x3e>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	7b1b      	ldrb	r3, [r3, #12]
 8002ebe:	7afa      	ldrb	r2, [r7, #11]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d20e      	bcs.n	8002ee2 <CO_HBconsumer_initCallbackHeartbeatStarted+0x3e>
        return;
    }

    monitoredNode = &HBcons->monitoredNodes[idx];
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	2134      	movs	r1, #52	; 0x34
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
    monitoredNode->pFunctSignalHbStarted = pFunctSignal;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	61da      	str	r2, [r3, #28]
    monitoredNode->functSignalObjectHbStarted = object;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	621a      	str	r2, [r3, #32]
 8002ee0:	e000      	b.n	8002ee4 <CO_HBconsumer_initCallbackHeartbeatStarted+0x40>
        return;
 8002ee2:	bf00      	nop
}
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <CO_HBconsumer_initCallbackTimeout>:
void CO_HBconsumer_initCallbackTimeout(
    CO_HBconsumer_t        *HBcons,
    uint8_t                 idx,
    void                   *object,
    void                  (*pFunctSignal)(uint8_t nodeId, uint8_t idx, void *object))
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b087      	sub	sp, #28
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	460b      	mov	r3, r1
 8002efc:	72fb      	strb	r3, [r7, #11]
    CO_HBconsNode_t *monitoredNode;

    if (HBcons==NULL || idx>=HBcons->numberOfMonitoredNodes) {
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <CO_HBconsumer_initCallbackTimeout+0x3e>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	7b1b      	ldrb	r3, [r3, #12]
 8002f08:	7afa      	ldrb	r2, [r7, #11]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d20e      	bcs.n	8002f2c <CO_HBconsumer_initCallbackTimeout+0x3e>
        return;
    }

    monitoredNode = &HBcons->monitoredNodes[idx];
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	7afb      	ldrb	r3, [r7, #11]
 8002f14:	2134      	movs	r1, #52	; 0x34
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]
    monitoredNode->pFunctSignalTimeout = pFunctSignal;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24
    monitoredNode->functSignalObjectTimeout = object;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	629a      	str	r2, [r3, #40]	; 0x28
 8002f2a:	e000      	b.n	8002f2e <CO_HBconsumer_initCallbackTimeout+0x40>
        return;
 8002f2c:	bf00      	nop
}
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	460b      	mov	r3, r1
 8002f46:	72fb      	strb	r3, [r7, #11]
    uint8_t i;
    bool_t allMonitoredActiveCurrent = true;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	77bb      	strb	r3, [r7, #30]
    uint8_t allMonitoredOperationalCurrent = CO_NMT_OPERATIONAL;
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	777b      	strb	r3, [r7, #29]
    CO_HBconsNode_t *monitoredNode = &HBcons->monitoredNodes[0];
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	61bb      	str	r3, [r7, #24]

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80ba 	beq.w	80030d2 <CO_HBconsumer_process+0x19a>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	7bdb      	ldrb	r3, [r3, #15]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80b5 	beq.w	80030d2 <CO_HBconsumer_process+0x19a>
        for (i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8002f68:	2300      	movs	r3, #0
 8002f6a:	77fb      	strb	r3, [r7, #31]
 8002f6c:	e0aa      	b.n	80030c4 <CO_HBconsumer_process+0x18c>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	617b      	str	r3, [r7, #20]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	789b      	ldrb	r3, [r3, #2]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80a0 	beq.w	80030bc <CO_HBconsumer_process+0x184>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d03b      	beq.n	8002ffc <CO_HBconsumer_process+0xc4>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11b      	bne.n	8002fc6 <CO_HBconsumer_process+0x8e>
                    /* bootup message*/
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <CO_HBconsumer_process+0x6e>
                        monitoredNode->pFunctSignalRemoteReset(
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	7810      	ldrb	r0, [r2, #0]
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fa2:	7ff9      	ldrb	r1, [r7, #31]
 8002fa4:	4798      	blx	r3
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	789b      	ldrb	r3, [r3, #2]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d107      	bne.n	8002fbe <CO_HBconsumer_process+0x86>
                        CO_errorReport(HBcons->em,
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	7ffb      	ldrb	r3, [r7, #31]
 8002fb4:	f248 1230 	movw	r2, #33072	; 0x8130
 8002fb8:	211c      	movs	r1, #28
 8002fba:	f7ff fc8e 	bl	80028da <CO_errorReport>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	709a      	strb	r2, [r3, #2]
 8002fc4:	e017      	b.n	8002ff6 <CO_HBconsumer_process+0xbe>

                }
                else {
                    /* heartbeat message */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
                    if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE &&
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	789b      	ldrb	r3, [r3, #2]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d00b      	beq.n	8002fe6 <CO_HBconsumer_process+0xae>
                        monitoredNode->pFunctSignalHbStarted != NULL) {
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	69db      	ldr	r3, [r3, #28]
                    if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE &&
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <CO_HBconsumer_process+0xae>
                        monitoredNode->pFunctSignalHbStarted(
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	7810      	ldrb	r0, [r2, #0]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	6a12      	ldr	r2, [r2, #32]
 8002fe2:	7ff9      	ldrb	r1, [r7, #31]
 8002fe4:	4798      	blx	r3
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	789b      	ldrb	r3, [r3, #2]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d12f      	bne.n	8003064 <CO_HBconsumer_process+0x12c>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	441a      	add	r2, r3
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d312      	bcc.n	8003042 <CO_HBconsumer_process+0x10a>
                    /* timeout expired */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
                    if (monitoredNode->pFunctSignalTimeout!=NULL) {
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <CO_HBconsumer_process+0xfc>
                        monitoredNode->pFunctSignalTimeout(
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	7810      	ldrb	r0, [r2, #0]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003030:	7ff9      	ldrb	r1, [r7, #31]
 8003032:	4798      	blx	r3
#endif
                    /*
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
                                   CO_EMC_HEARTBEAT, i);
                    */
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	22ff      	movs	r2, #255	; 0xff
 8003038:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2203      	movs	r2, #3
 800303e:	709a      	strb	r2, [r3, #2]
 8003040:	e010      	b.n	8003064 <CO_HBconsumer_process+0x12c>
                }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_TIMERNEXT
                else if (timerNext_us != NULL) {
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00d      	beq.n	8003064 <CO_HBconsumer_process+0x12c>
                    /* Calculate timerNext_us for next timeout checking. */
                    uint32_t diff = monitoredNode->time_us
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	689a      	ldr	r2, [r3, #8]
                                  - monitoredNode->timeoutTimer;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	685b      	ldr	r3, [r3, #4]
                    uint32_t diff = monitoredNode->time_us
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	613b      	str	r3, [r7, #16]
                    if (*timerNext_us > diff) {
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d202      	bcs.n	8003064 <CO_HBconsumer_process+0x12c>
                        *timerNext_us = diff;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	601a      	str	r2, [r3, #0]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	789b      	ldrb	r3, [r3, #2]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d001      	beq.n	8003070 <CO_HBconsumer_process+0x138>
                allMonitoredActiveCurrent = false;
 800306c:	2300      	movs	r3, #0
 800306e:	77bb      	strb	r3, [r7, #30]
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d001      	beq.n	800307e <CO_HBconsumer_process+0x146>
                allMonitoredOperationalCurrent = CO_NMT_UNKNOWN;
 800307a:	23ff      	movs	r3, #255	; 0xff
 800307c:	777b      	strb	r3, [r7, #29]
            }
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
            /* Verify, if NMT state of monitored node changed */
            if(monitoredNode->NMTstate != monitoredNode->NMTstatePrev) {
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800308a:	429a      	cmp	r2, r3
 800308c:	d012      	beq.n	80030b4 <CO_HBconsumer_process+0x17c>
                if (HBcons->pFunctSignalNmtChanged != NULL) {
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <CO_HBconsumer_process+0x172>
                    HBcons->pFunctSignalNmtChanged(
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	7810      	ldrb	r0, [r2, #0]
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	f992 1001 	ldrsb.w	r1, [r2, #1]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	69d2      	ldr	r2, [r2, #28]
 80030a8:	4798      	blx	r3
                        monitoredNode->nodeId, monitoredNode->NMTstate,
                        HBcons->pFunctSignalObjectNmtChanged);
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	761a      	strb	r2, [r3, #24]
            }
#endif
            monitoredNode++;
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	3334      	adds	r3, #52	; 0x34
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	e000      	b.n	80030be <CO_HBconsumer_process+0x186>
                continue;
 80030bc:	bf00      	nop
        for (i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80030be:	7ffb      	ldrb	r3, [r7, #31]
 80030c0:	3301      	adds	r3, #1
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	7b1b      	ldrb	r3, [r3, #12]
 80030c8:	7ffa      	ldrb	r2, [r7, #31]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	f4ff af4f 	bcc.w	8002f6e <CO_HBconsumer_process+0x36>
    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 80030d0:	e028      	b.n	8003124 <CO_HBconsumer_process+0x1ec>
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80030d2:	7afb      	ldrb	r3, [r7, #11]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <CO_HBconsumer_process+0x1a8>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	7bdb      	ldrb	r3, [r3, #15]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d021      	beq.n	8003124 <CO_HBconsumer_process+0x1ec>
        /* (pre)operational state changed, clear variables */
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80030e0:	2300      	movs	r3, #0
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e015      	b.n	8003112 <CO_HBconsumer_process+0x1da>
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	22ff      	movs	r2, #255	; 0xff
 80030ea:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	22ff      	movs	r2, #255	; 0xff
 80030f0:	761a      	strb	r2, [r3, #24]
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2200      	movs	r2, #0
 80030f6:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	789b      	ldrb	r3, [r3, #2]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <CO_HBconsumer_process+0x1ce>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2201      	movs	r2, #1
 8003104:	709a      	strb	r2, [r3, #2]
            }
            monitoredNode++;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	3334      	adds	r3, #52	; 0x34
 800310a:	61bb      	str	r3, [r7, #24]
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 800310c:	7ffb      	ldrb	r3, [r7, #31]
 800310e:	3301      	adds	r3, #1
 8003110:	77fb      	strb	r3, [r7, #31]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	7b1b      	ldrb	r3, [r3, #12]
 8003116:	7ffa      	ldrb	r2, [r7, #31]
 8003118:	429a      	cmp	r2, r3
 800311a:	d3e4      	bcc.n	80030e6 <CO_HBconsumer_process+0x1ae>
        }
        allMonitoredActiveCurrent = false;
 800311c:	2300      	movs	r3, #0
 800311e:	77bb      	strb	r3, [r7, #30]
        allMonitoredOperationalCurrent = CO_NMT_UNKNOWN;
 8003120:	23ff      	movs	r3, #255	; 0xff
 8003122:	777b      	strb	r3, [r7, #29]
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	7b5b      	ldrb	r3, [r3, #13]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d110      	bne.n	800314e <CO_HBconsumer_process+0x216>
 800312c:	7fbb      	ldrb	r3, [r7, #30]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <CO_HBconsumer_process+0x216>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2200      	movs	r2, #0
 8003138:	211b      	movs	r1, #27
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fc53 	bl	80029e6 <CO_errorReset>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2200      	movs	r2, #0
 8003146:	211c      	movs	r1, #28
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fc4c 	bl	80029e6 <CO_errorReset>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	7fba      	ldrb	r2, [r7, #30]
 8003152:	735a      	strb	r2, [r3, #13]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	7f7a      	ldrb	r2, [r7, #29]
 8003158:	739a      	strb	r2, [r3, #14]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	7afa      	ldrb	r2, [r7, #11]
 800315e:	73da      	strb	r2, [r3, #15]
}
 8003160:	bf00      	nop
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg){
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003178:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	3321      	adds	r3, #33	; 0x21
 800317e:	613b      	str	r3, [r7, #16]

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60fb      	str	r3, [r7, #12]

    nodeId = data[1];
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	785b      	ldrb	r3, [r3, #1]
 8003188:	72fb      	strb	r3, [r7, #11]

    if((DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
 800318a:	7dfb      	ldrb	r3, [r7, #23]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d14d      	bne.n	800322c <CO_NMT_receive+0xc4>
 8003190:	7afb      	ldrb	r3, [r7, #11]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d004      	beq.n	80031a0 <CO_NMT_receive+0x38>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	7bdb      	ldrb	r3, [r3, #15]
 800319a:	7afa      	ldrb	r2, [r7, #11]
 800319c:	429a      	cmp	r2, r3
 800319e:	d145      	bne.n	800322c <CO_NMT_receive+0xc4>
        uint8_t command = data[0];
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	72bb      	strb	r3, [r7, #10]
#if (CO_CONFIG_NMT) & (CO_CONFIG_NMT_CALLBACK_CHANGE | CO_CONFIG_FLAG_CALLBACK_PRE)
        CO_NMT_internalState_t currentOperatingState = NMT->operatingState;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	7b1b      	ldrb	r3, [r3, #12]
 80031aa:	727b      	strb	r3, [r7, #9]
#endif

        switch(command){
 80031ac:	7abb      	ldrb	r3, [r7, #10]
 80031ae:	2b82      	cmp	r3, #130	; 0x82
 80031b0:	d024      	beq.n	80031fc <CO_NMT_receive+0x94>
 80031b2:	2b82      	cmp	r3, #130	; 0x82
 80031b4:	dc26      	bgt.n	8003204 <CO_NMT_receive+0x9c>
 80031b6:	2b81      	cmp	r3, #129	; 0x81
 80031b8:	d01c      	beq.n	80031f4 <CO_NMT_receive+0x8c>
 80031ba:	2b81      	cmp	r3, #129	; 0x81
 80031bc:	dc22      	bgt.n	8003204 <CO_NMT_receive+0x9c>
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d014      	beq.n	80031ec <CO_NMT_receive+0x84>
 80031c2:	2b80      	cmp	r3, #128	; 0x80
 80031c4:	dc1e      	bgt.n	8003204 <CO_NMT_receive+0x9c>
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d002      	beq.n	80031d0 <CO_NMT_receive+0x68>
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d00a      	beq.n	80031e4 <CO_NMT_receive+0x7c>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 80031ce:	e019      	b.n	8003204 <CO_NMT_receive+0x9c>
                if((*NMT->emPr->errorRegister) == 0U){
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d115      	bne.n	8003208 <CO_NMT_receive+0xa0>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2205      	movs	r2, #5
 80031e0:	731a      	strb	r2, [r3, #12]
                break;
 80031e2:	e011      	b.n	8003208 <CO_NMT_receive+0xa0>
                NMT->operatingState = CO_NMT_STOPPED;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2204      	movs	r2, #4
 80031e8:	731a      	strb	r2, [r3, #12]
                break;
 80031ea:	e00e      	b.n	800320a <CO_NMT_receive+0xa2>
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	227f      	movs	r2, #127	; 0x7f
 80031f0:	731a      	strb	r2, [r3, #12]
                break;
 80031f2:	e00a      	b.n	800320a <CO_NMT_receive+0xa2>
                NMT->resetCommand = CO_RESET_APP;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2202      	movs	r2, #2
 80031f8:	739a      	strb	r2, [r3, #14]
                break;
 80031fa:	e006      	b.n	800320a <CO_NMT_receive+0xa2>
                NMT->resetCommand = CO_RESET_COMM;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	739a      	strb	r2, [r3, #14]
                break;
 8003202:	e002      	b.n	800320a <CO_NMT_receive+0xa2>
                break;
 8003204:	bf00      	nop
 8003206:	e000      	b.n	800320a <CO_NMT_receive+0xa2>
                break;
 8003208:	bf00      	nop
        }
#endif
*/
#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_CALLBACK_PRE
    /* Optional signal to RTOS, which can resume task, which handles NMT. */
    if(NMT->pFunctSignalPre != NULL && currentOperatingState!=NMT->operatingState) {
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00c      	beq.n	800322c <CO_NMT_receive+0xc4>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003218:	f997 2009 	ldrsb.w	r2, [r7, #9]
 800321c:	429a      	cmp	r2, r3
 800321e:	d005      	beq.n	800322c <CO_NMT_receive+0xc4>
        NMT->pFunctSignalPre(NMT->functSignalObjectPre);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003228:	4610      	mov	r0, r2
 800322a:	4798      	blx	r3
    }
#endif
    }
}
 800322c:	bf00      	nop
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <CO_NMT_init>:
        uint16_t                NMT_txIdx,
        uint16_t                CANidTxNMT,
        CO_CANmodule_t         *HB_CANdevTx,
        uint16_t                HB_txIdx,
        uint16_t                CANidTxHB)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af04      	add	r7, sp, #16
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	4611      	mov	r1, r2
 8003240:	461a      	mov	r2, r3
 8003242:	460b      	mov	r3, r1
 8003244:	71fb      	strb	r3, [r7, #7]
 8003246:	4613      	mov	r3, r2
 8003248:	80bb      	strh	r3, [r7, #4]
    /* verify arguments */
    if (NMT == NULL || emPr == NULL || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <CO_NMT_init+0x2e>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <CO_NMT_init+0x2e>
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <CO_NMT_init+0x2e>
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <CO_NMT_init+0x34>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003262:	f04f 33ff 	mov.w	r3, #4294967295
 8003266:	e067      	b.n	8003338 <CO_NMT_init+0x104>
    }

    CO_ReturnError_t ret = CO_ERROR_NO;
 8003268:	2300      	movs	r3, #0
 800326a:	75fb      	strb	r3, [r7, #23]

    /* blinking bytes and LEDS */
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_LEDS
    NMT->LEDtimer               = 0;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
    NMT->LEDflickering          = 0;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	711a      	strb	r2, [r3, #4]
    NMT->LEDblinking            = 0;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	715a      	strb	r2, [r3, #5]
    NMT->LEDsingleFlash         = 0;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	719a      	strb	r2, [r3, #6]
    NMT->LEDdoubleFlash         = 0;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	71da      	strb	r2, [r3, #7]
    NMT->LEDtripleFlash         = 0;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	721a      	strb	r2, [r3, #8]
    NMT->LEDquadrupleFlash      = 0;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	725a      	strb	r2, [r3, #9]
    NMT->LEDgreenRun            = -1;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	22ff      	movs	r2, #255	; 0xff
 800329a:	729a      	strb	r2, [r3, #10]
    NMT->LEDredError            = 1;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	72da      	strb	r2, [r3, #11]
#endif /* CO_CONFIG_NMT_LEDS */

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	731a      	strb	r2, [r3, #12]
    NMT->operatingStatePrev     = CO_NMT_INITIALIZING;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	735a      	strb	r2, [r3, #13]
    NMT->nodeId                 = nodeId;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	79fa      	ldrb	r2, [r7, #7]
 80032b2:	73da      	strb	r2, [r3, #15]
    NMT->firstHBTime            = (int32_t)firstHBTime_ms * 1000;
 80032b4:	88bb      	ldrh	r3, [r7, #4]
 80032b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	615a      	str	r2, [r3, #20]
    NMT->resetCommand           = 0;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	739a      	strb	r2, [r3, #14]
    NMT->HBproducerTimer        = 0;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]
    NMT->emPr                   = emPr;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	619a      	str	r2, [r3, #24]
#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_CALLBACK_PRE
    NMT->pFunctSignalPre = NULL;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->functSignalObjectPre = NULL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
    NMT->pFunctNMT              = NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 80032e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80032ea:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <CO_NMT_init+0x10c>)
 80032ee:	9302      	str	r3, [sp, #8]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	2300      	movs	r3, #0
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80032fc:	6a38      	ldr	r0, [r7, #32]
 80032fe:	f006 f8a7 	bl	8009450 <CO_CANrxBufferInit>
 8003302:	4603      	mov	r3, r0
 8003304:	75fb      	strb	r3, [r7, #23]
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800330a:	61da      	str	r2, [r3, #28]
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 800330c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003310:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8003312:	2300      	movs	r3, #0
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2301      	movs	r3, #1
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2300      	movs	r3, #0
 800331c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800331e:	f006 f8ed 	bl	80094fc <CO_CANtxBufferInit>
 8003322:	4602      	mov	r2, r0
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	621a      	str	r2, [r3, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (NMT->HB_TXbuff == NULL) {
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <CO_NMT_init+0x100>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003330:	23ff      	movs	r3, #255	; 0xff
 8003332:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8003334:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	08003169 	.word	0x08003169

08003344 <CO_NMT_initCallbackPre>:
#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_CALLBACK_PRE
void CO_NMT_initCallbackPre(
        CO_NMT_t               *NMT,
        void                   *object,
        void                  (*pFunctSignal)(void *object))
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
    if (NMT != NULL) {
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <CO_NMT_initCallbackPre+0x1e>
        NMT->pFunctSignalPre = pFunctSignal;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	625a      	str	r2, [r3, #36]	; 0x24
        NMT->functSignalObjectPre = object;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
    }
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <CO_NMT_initCallbackChanged>:
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
/******************************************************************************/
void CO_NMT_initCallbackChanged(
        CO_NMT_t               *NMT,
        void                  (*pFunctNMT)(CO_NMT_internalState_t state))
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
    if(NMT != NULL){
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <CO_NMT_initCallbackChanged+0x2c>
        NMT->pFunctNMT = pFunctNMT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	62da      	str	r2, [r3, #44]	; 0x2c
        if(NMT->pFunctNMT != NULL){
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d006      	beq.n	800339a <CO_NMT_initCallbackChanged+0x2c>
            NMT->pFunctNMT(NMT->operatingState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8003396:	4610      	mov	r0, r2
 8003398:	4798      	blx	r3
        }
    }
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <CO_NMT_process>:
        uint16_t                HBtime_ms,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint32_t               *timerNext_us)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b088      	sub	sp, #32
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
    uint8_t CANpassive;

    CO_NMT_internalState_t currentOperatingState = NMT->operatingState;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	7b1b      	ldrb	r3, [r3, #12]
 80033b6:	77bb      	strb	r3, [r7, #30]
    uint32_t HBtime = (uint32_t)HBtime_ms * 1000;
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer += timeDifference_us;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	441a      	add	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	611a      	str	r2, [r3, #16]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer and Timer expired or
     * - HB producer and NMT->operatingState changed, but not from initialised */
    if ((NMT->operatingState == CO_NMT_INITIALIZING) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00f      	beq.n	80033fa <CO_NMT_process+0x58>
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d038      	beq.n	8003452 <CO_NMT_process+0xb0>
        (HBtime != 0 && (NMT->HBproducerTimer >= HBtime ||
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d907      	bls.n	80033fa <CO_NMT_process+0x58>
                         NMT->operatingState != NMT->operatingStatePrev)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f993 200c 	ldrsb.w	r2, [r3, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f993 300d 	ldrsb.w	r3, [r3, #13]
        (HBtime != 0 && (NMT->HBproducerTimer >= HBtime ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d02b      	beq.n	8003452 <CO_NMT_process+0xb0>
        ))
    {
        /* Start from the beginning. If OS is slow, time sliding may occur. However,
         * heartbeat is not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	611a      	str	r2, [r3, #16]

        NMT->HB_TXbuff->data[0] = (uint8_t) NMT->operatingState;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	69da      	ldr	r2, [r3, #28]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f006 f8af 	bl	800957c <CO_CANsend>

        if (NMT->operatingState == CO_NMT_INITIALIZING) {
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d114      	bne.n	8003452 <CO_NMT_process+0xb0>
            /* After bootup messages send first heartbeat earlier */
            if (HBtime > NMT->firstHBTime) {
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	429a      	cmp	r2, r3
 8003430:	d905      	bls.n	800343e <CO_NMT_process+0x9c>
                NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	1ad2      	subs	r2, r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	611a      	str	r2, [r3, #16]
            }

            /* NMT slave self starting */
            if (NMTstartup == 0x00000008U) NMT->operatingState = CO_NMT_OPERATIONAL;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b08      	cmp	r3, #8
 8003442:	d103      	bne.n	800344c <CO_NMT_process+0xaa>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2205      	movs	r2, #5
 8003448:	731a      	strb	r2, [r3, #12]
 800344a:	e002      	b.n	8003452 <CO_NMT_process+0xb0>
            else                           NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	227f      	movs	r2, #127	; 0x7f
 8003450:	731a      	strb	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMT->operatingState;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	735a      	strb	r2, [r3, #13]

    /* CAN passive flag */
    CANpassive = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	77fb      	strb	r3, [r7, #31]
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || CO_isError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2107      	movs	r1, #7
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fb44 	bl	8002af6 <CO_isError>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <CO_NMT_process+0xe6>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2106      	movs	r1, #6
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fb3a 	bl	8002af6 <CO_isError>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <CO_NMT_process+0xea>
        CANpassive = 1;
 8003488:	2301      	movs	r3, #1
 800348a:	77fb      	strb	r3, [r7, #31]


#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_LEDS
    NMT->LEDtimer += timeDifference_us;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	441a      	add	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]
    if (NMT->LEDtimer >= 50000) {
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80034a0:	4293      	cmp	r3, r2
 80034a2:	f240 80e6 	bls.w	8003672 <CO_NMT_process+0x2d0>
        NMT->LEDtimer -= 50000;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 80034ae:	3b50      	subs	r3, #80	; 0x50
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	6013      	str	r3, [r2, #0]

#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_TIMERNEXT
        if (timerNext_us != NULL) {
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00d      	beq.n	80034d6 <CO_NMT_process+0x134>
            uint32_t diff = 50000 - NMT->LEDtimer;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f5c3 4343 	rsb	r3, r3, #49920	; 0xc300
 80034c2:	3350      	adds	r3, #80	; 0x50
 80034c4:	617b      	str	r3, [r7, #20]
            if (*timerNext_us > diff) {
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d202      	bcs.n	80034d6 <CO_NMT_process+0x134>
                *timerNext_us = diff;
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	601a      	str	r2, [r3, #0]
            }
        }
#endif

        if (++NMT->LEDflickering >= 1) NMT->LEDflickering = -1;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	b25a      	sxtb	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	711a      	strb	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	dd02      	ble.n	80034f8 <CO_NMT_process+0x156>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	22ff      	movs	r2, #255	; 0xff
 80034f6:	711a      	strb	r2, [r3, #4]

        if (++NMT->LEDblinking >= 4) NMT->LEDblinking = -4;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	b25a      	sxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	715a      	strb	r2, [r3, #5]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003510:	2b03      	cmp	r3, #3
 8003512:	dd02      	ble.n	800351a <CO_NMT_process+0x178>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	22fc      	movs	r2, #252	; 0xfc
 8003518:	715a      	strb	r2, [r3, #5]

        if (++NMT->LEDsingleFlash >= 4) NMT->LEDsingleFlash = -20;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	3301      	adds	r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	b25a      	sxtb	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	719a      	strb	r2, [r3, #6]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003532:	2b03      	cmp	r3, #3
 8003534:	dd02      	ble.n	800353c <CO_NMT_process+0x19a>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	22ec      	movs	r2, #236	; 0xec
 800353a:	719a      	strb	r2, [r3, #6]

        switch (++NMT->LEDdoubleFlash) {
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3301      	adds	r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	b25a      	sxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	71da      	strb	r2, [r3, #7]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003554:	2b68      	cmp	r3, #104	; 0x68
 8003556:	d00e      	beq.n	8003576 <CO_NMT_process+0x1d4>
 8003558:	2b68      	cmp	r3, #104	; 0x68
 800355a:	dc10      	bgt.n	800357e <CO_NMT_process+0x1dc>
 800355c:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003560:	d005      	beq.n	800356e <CO_NMT_process+0x1cc>
 8003562:	2b04      	cmp	r3, #4
 8003564:	d10b      	bne.n	800357e <CO_NMT_process+0x1dc>
            case    4: NMT->LEDdoubleFlash = -104; break;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2298      	movs	r2, #152	; 0x98
 800356a:	71da      	strb	r2, [r3, #7]
 800356c:	e008      	b.n	8003580 <CO_NMT_process+0x1de>
            case -100: NMT->LEDdoubleFlash =  100; break;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2264      	movs	r2, #100	; 0x64
 8003572:	71da      	strb	r2, [r3, #7]
 8003574:	e004      	b.n	8003580 <CO_NMT_process+0x1de>
            case  104: NMT->LEDdoubleFlash =  -20; break;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22ec      	movs	r2, #236	; 0xec
 800357a:	71da      	strb	r2, [r3, #7]
 800357c:	e000      	b.n	8003580 <CO_NMT_process+0x1de>
            default: break;
 800357e:	bf00      	nop
        }

        switch (++NMT->LEDtripleFlash) {
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	3301      	adds	r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	b25a      	sxtb	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	721a      	strb	r2, [r3, #8]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003598:	2b72      	cmp	r3, #114	; 0x72
 800359a:	d020      	beq.n	80035de <CO_NMT_process+0x23c>
 800359c:	2b72      	cmp	r3, #114	; 0x72
 800359e:	dc22      	bgt.n	80035e6 <CO_NMT_process+0x244>
 80035a0:	2b68      	cmp	r3, #104	; 0x68
 80035a2:	d014      	beq.n	80035ce <CO_NMT_process+0x22c>
 80035a4:	2b68      	cmp	r3, #104	; 0x68
 80035a6:	dc1e      	bgt.n	80035e6 <CO_NMT_process+0x244>
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d008      	beq.n	80035be <CO_NMT_process+0x21c>
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	dc1a      	bgt.n	80035e6 <CO_NMT_process+0x244>
 80035b0:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 80035b4:	d00f      	beq.n	80035d6 <CO_NMT_process+0x234>
 80035b6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80035ba:	d004      	beq.n	80035c6 <CO_NMT_process+0x224>
            case    4: NMT->LEDtripleFlash = -104; break;
            case -100: NMT->LEDtripleFlash =  100; break;
            case  104: NMT->LEDtripleFlash = -114; break;
            case -110: NMT->LEDtripleFlash =  110; break;
            case  114: NMT->LEDtripleFlash =  -20; break;
            default: break;
 80035bc:	e013      	b.n	80035e6 <CO_NMT_process+0x244>
            case    4: NMT->LEDtripleFlash = -104; break;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2298      	movs	r2, #152	; 0x98
 80035c2:	721a      	strb	r2, [r3, #8]
 80035c4:	e010      	b.n	80035e8 <CO_NMT_process+0x246>
            case -100: NMT->LEDtripleFlash =  100; break;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2264      	movs	r2, #100	; 0x64
 80035ca:	721a      	strb	r2, [r3, #8]
 80035cc:	e00c      	b.n	80035e8 <CO_NMT_process+0x246>
            case  104: NMT->LEDtripleFlash = -114; break;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	228e      	movs	r2, #142	; 0x8e
 80035d2:	721a      	strb	r2, [r3, #8]
 80035d4:	e008      	b.n	80035e8 <CO_NMT_process+0x246>
            case -110: NMT->LEDtripleFlash =  110; break;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	226e      	movs	r2, #110	; 0x6e
 80035da:	721a      	strb	r2, [r3, #8]
 80035dc:	e004      	b.n	80035e8 <CO_NMT_process+0x246>
            case  114: NMT->LEDtripleFlash =  -20; break;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	22ec      	movs	r2, #236	; 0xec
 80035e2:	721a      	strb	r2, [r3, #8]
 80035e4:	e000      	b.n	80035e8 <CO_NMT_process+0x246>
            default: break;
 80035e6:	bf00      	nop
        }

        switch (++NMT->LEDquadrupleFlash) {
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	b25a      	sxtb	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	725a      	strb	r2, [r3, #9]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003600:	2b7c      	cmp	r3, #124	; 0x7c
 8003602:	d032      	beq.n	800366a <CO_NMT_process+0x2c8>
 8003604:	2b7c      	cmp	r3, #124	; 0x7c
 8003606:	dc36      	bgt.n	8003676 <CO_NMT_process+0x2d4>
 8003608:	2b72      	cmp	r3, #114	; 0x72
 800360a:	d026      	beq.n	800365a <CO_NMT_process+0x2b8>
 800360c:	2b72      	cmp	r3, #114	; 0x72
 800360e:	dc32      	bgt.n	8003676 <CO_NMT_process+0x2d4>
 8003610:	2b68      	cmp	r3, #104	; 0x68
 8003612:	d01a      	beq.n	800364a <CO_NMT_process+0x2a8>
 8003614:	2b68      	cmp	r3, #104	; 0x68
 8003616:	dc2e      	bgt.n	8003676 <CO_NMT_process+0x2d4>
 8003618:	2b04      	cmp	r3, #4
 800361a:	d00e      	beq.n	800363a <CO_NMT_process+0x298>
 800361c:	2b04      	cmp	r3, #4
 800361e:	dc2a      	bgt.n	8003676 <CO_NMT_process+0x2d4>
 8003620:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003624:	d00d      	beq.n	8003642 <CO_NMT_process+0x2a0>
 8003626:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800362a:	dc24      	bgt.n	8003676 <CO_NMT_process+0x2d4>
 800362c:	f113 0f78 	cmn.w	r3, #120	; 0x78
 8003630:	d017      	beq.n	8003662 <CO_NMT_process+0x2c0>
 8003632:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 8003636:	d00c      	beq.n	8003652 <CO_NMT_process+0x2b0>
            case  104: NMT->LEDquadrupleFlash = -114; break;
            case -110: NMT->LEDquadrupleFlash =  110; break;
            case  114: NMT->LEDquadrupleFlash = -124; break;
            case -120: NMT->LEDquadrupleFlash =  120; break;
            case  124: NMT->LEDquadrupleFlash =  -20; break;
            default: break;
 8003638:	e01d      	b.n	8003676 <CO_NMT_process+0x2d4>
            case    4: NMT->LEDquadrupleFlash = -104; break;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2298      	movs	r2, #152	; 0x98
 800363e:	725a      	strb	r2, [r3, #9]
 8003640:	e01a      	b.n	8003678 <CO_NMT_process+0x2d6>
            case -100: NMT->LEDquadrupleFlash =  100; break;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2264      	movs	r2, #100	; 0x64
 8003646:	725a      	strb	r2, [r3, #9]
 8003648:	e016      	b.n	8003678 <CO_NMT_process+0x2d6>
            case  104: NMT->LEDquadrupleFlash = -114; break;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	228e      	movs	r2, #142	; 0x8e
 800364e:	725a      	strb	r2, [r3, #9]
 8003650:	e012      	b.n	8003678 <CO_NMT_process+0x2d6>
            case -110: NMT->LEDquadrupleFlash =  110; break;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	226e      	movs	r2, #110	; 0x6e
 8003656:	725a      	strb	r2, [r3, #9]
 8003658:	e00e      	b.n	8003678 <CO_NMT_process+0x2d6>
            case  114: NMT->LEDquadrupleFlash = -124; break;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2284      	movs	r2, #132	; 0x84
 800365e:	725a      	strb	r2, [r3, #9]
 8003660:	e00a      	b.n	8003678 <CO_NMT_process+0x2d6>
            case -120: NMT->LEDquadrupleFlash =  120; break;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2278      	movs	r2, #120	; 0x78
 8003666:	725a      	strb	r2, [r3, #9]
 8003668:	e006      	b.n	8003678 <CO_NMT_process+0x2d6>
            case  124: NMT->LEDquadrupleFlash =  -20; break;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	22ec      	movs	r2, #236	; 0xec
 800366e:	725a      	strb	r2, [r3, #9]
 8003670:	e002      	b.n	8003678 <CO_NMT_process+0x2d6>
        }
    }
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <CO_NMT_process+0x2d6>
            default: break;
 8003676:	bf00      	nop

    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800367e:	2b7f      	cmp	r3, #127	; 0x7f
 8003680:	d00c      	beq.n	800369c <CO_NMT_process+0x2fa>
 8003682:	2b7f      	cmp	r3, #127	; 0x7f
 8003684:	dc14      	bgt.n	80036b0 <CO_NMT_process+0x30e>
 8003686:	2b04      	cmp	r3, #4
 8003688:	d002      	beq.n	8003690 <CO_NMT_process+0x2ee>
 800368a:	2b05      	cmp	r3, #5
 800368c:	d00c      	beq.n	80036a8 <CO_NMT_process+0x306>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
        default: break;
 800368e:	e00f      	b.n	80036b0 <CO_NMT_process+0x30e>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	729a      	strb	r2, [r3, #10]
 800369a:	e00a      	b.n	80036b2 <CO_NMT_process+0x310>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	729a      	strb	r2, [r3, #10]
 80036a6:	e004      	b.n	80036b2 <CO_NMT_process+0x310>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	729a      	strb	r2, [r3, #10]
 80036ae:	e000      	b.n	80036b2 <CO_NMT_process+0x310>
        default: break;
 80036b0:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2112      	movs	r1, #18
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fa1b 	bl	8002af6 <CO_isError>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <CO_NMT_process+0x32c>
        NMT->LEDredError = 1;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	72da      	strb	r2, [r3, #11]
 80036cc:	e04f      	b.n	800376e <CO_NMT_process+0x3cc>

    else if(CO_isError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2118      	movs	r1, #24
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fa0d 	bl	8002af6 <CO_isError>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <CO_NMT_process+0x34c>
        NMT->LEDredError = NMT->LEDtripleFlash;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	72da      	strb	r2, [r3, #11]
 80036ec:	e03f      	b.n	800376e <CO_NMT_process+0x3cc>

    else if(CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	211b      	movs	r1, #27
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f9fd 	bl	8002af6 <CO_isError>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <CO_NMT_process+0x374>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	211c      	movs	r1, #28
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff f9f3 	bl	8002af6 <CO_isError>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <CO_NMT_process+0x380>
        NMT->LEDredError = NMT->LEDdoubleFlash;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f993 2007 	ldrsb.w	r2, [r3, #7]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	72da      	strb	r2, [r3, #11]
 8003720:	e025      	b.n	800376e <CO_NMT_process+0x3cc>

    else if(CANpassive || CO_isError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
 8003722:	7ffb      	ldrb	r3, [r7, #31]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <CO_NMT_process+0x39a>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2101      	movs	r1, #1
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff f9e0 	bl	8002af6 <CO_isError>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <CO_NMT_process+0x3a6>
        NMT->LEDredError = NMT->LEDsingleFlash;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	72da      	strb	r2, [r3, #11]
 8003746:	e012      	b.n	800376e <CO_NMT_process+0x3cc>

    else if(errorRegister)
 8003748:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00b      	beq.n	8003768 <CO_NMT_process+0x3c6>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003756:	2b00      	cmp	r3, #0
 8003758:	db02      	blt.n	8003760 <CO_NMT_process+0x3be>
 800375a:	f04f 32ff 	mov.w	r2, #4294967295
 800375e:	e000      	b.n	8003762 <CO_NMT_process+0x3c0>
 8003760:	2201      	movs	r2, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	72da      	strb	r2, [r3, #11]
 8003766:	e002      	b.n	800376e <CO_NMT_process+0x3cc>

    else
        NMT->LEDredError = -1;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	22ff      	movs	r2, #255	; 0xff
 800376c:	72da      	strb	r2, [r3, #11]
#endif /* CO_CONFIG_NMT_LEDS */


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80ae 	beq.w	80038d2 <CO_NMT_process+0x530>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800377c:	2b05      	cmp	r3, #5
 800377e:	f040 80a8 	bne.w	80038d2 <CO_NMT_process+0x530>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
 8003782:	7ffb      	ldrb	r3, [r7, #31]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00f      	beq.n	80037a8 <CO_NMT_process+0x406>
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	3302      	adds	r3, #2
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d004      	beq.n	800379c <CO_NMT_process+0x3fa>
 8003792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003794:	3302      	adds	r3, #2
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d105      	bne.n	80037a8 <CO_NMT_process+0x406>
 800379c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037a0:	f043 0310 	orr.w	r3, r3, #16
 80037a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        if(errorRegister){
 80037a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8090 	beq.w	80038d2 <CO_NMT_process+0x530>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
 80037b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d03e      	beq.n	800383c <CO_NMT_process+0x49a>
                if(errorBehavior[1] == 0){
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	3301      	adds	r3, #1
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <CO_NMT_process+0x42e>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	227f      	movs	r2, #127	; 0x7f
 80037cc:	731a      	strb	r2, [r3, #12]
 80037ce:	e035      	b.n	800383c <CO_NMT_process+0x49a>
                }
                else if(errorBehavior[1] == 2){
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	3301      	adds	r3, #1
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d103      	bne.n	80037e2 <CO_NMT_process+0x440>
                    NMT->operatingState = CO_NMT_STOPPED;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2204      	movs	r2, #4
 80037de:	731a      	strb	r2, [r3, #12]
 80037e0:	e02c      	b.n	800383c <CO_NMT_process+0x49a>
                }
                else if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2112      	movs	r1, #18
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff f983 	bl	8002af6 <CO_isError>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d113      	bne.n	800381e <CO_NMT_process+0x47c>
                     || CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	211b      	movs	r1, #27
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff f979 	bl	8002af6 <CO_isError>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <CO_NMT_process+0x47c>
                     || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	211c      	movs	r1, #28
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff f96f 	bl	8002af6 <CO_isError>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00e      	beq.n	800383c <CO_NMT_process+0x49a>
                {
                    if(errorBehavior[0] == 0){
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <CO_NMT_process+0x48c>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	227f      	movs	r2, #127	; 0x7f
 800382a:	731a      	strb	r2, [r3, #12]
 800382c:	e006      	b.n	800383c <CO_NMT_process+0x49a>
                    }
                    else if(errorBehavior[0] == 2){
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d102      	bne.n	800383c <CO_NMT_process+0x49a>
                        NMT->operatingState = CO_NMT_STOPPED;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2204      	movs	r2, #4
 800383a:	731a      	strb	r2, [r3, #12]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
 800383c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <CO_NMT_process+0x4c8>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	3303      	adds	r3, #3
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <CO_NMT_process+0x4b8>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	227f      	movs	r2, #127	; 0x7f
 8003856:	731a      	strb	r2, [r3, #12]
 8003858:	e007      	b.n	800386a <CO_NMT_process+0x4c8>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	3303      	adds	r3, #3
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d102      	bne.n	800386a <CO_NMT_process+0x4c8>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2204      	movs	r2, #4
 8003868:	731a      	strb	r2, [r3, #12]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
 800386a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d010      	beq.n	8003898 <CO_NMT_process+0x4f6>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	3304      	adds	r3, #4
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d103      	bne.n	8003888 <CO_NMT_process+0x4e6>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	227f      	movs	r2, #127	; 0x7f
 8003884:	731a      	strb	r2, [r3, #12]
 8003886:	e007      	b.n	8003898 <CO_NMT_process+0x4f6>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388a:	3304      	adds	r3, #4
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d102      	bne.n	8003898 <CO_NMT_process+0x4f6>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2204      	movs	r2, #4
 8003896:	731a      	strb	r2, [r3, #12]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
 8003898:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 800389c:	2b00      	cmp	r3, #0
 800389e:	da10      	bge.n	80038c2 <CO_NMT_process+0x520>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	3305      	adds	r3, #5
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <CO_NMT_process+0x510>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	227f      	movs	r2, #127	; 0x7f
 80038ae:	731a      	strb	r2, [r3, #12]
 80038b0:	e007      	b.n	80038c2 <CO_NMT_process+0x520>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	3305      	adds	r3, #5
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d102      	bne.n	80038c2 <CO_NMT_process+0x520>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2204      	movs	r2, #4
 80038c0:	731a      	strb	r2, [r3, #12]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d002      	beq.n	80038d2 <CO_NMT_process+0x530>
                NMT->HBproducerTimer = HBtime;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	611a      	str	r2, [r3, #16]
        }
    }

    if (currentOperatingState != NMT->operatingState) {
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80038d8:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d010      	beq.n	8003902 <CO_NMT_process+0x560>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
        if (NMT->pFunctNMT != NULL) {
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d006      	beq.n	80038f6 <CO_NMT_process+0x554>
            NMT->pFunctNMT(NMT->operatingState);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	f992 200c 	ldrsb.w	r2, [r2, #12]
 80038f2:	4610      	mov	r0, r2
 80038f4:	4798      	blx	r3
        }
#endif
#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_TIMERNEXT
        /* execute next CANopen processing immediately */
        if (timerNext_us != NULL) {
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <CO_NMT_process+0x560>
            *timerNext_us = 0;
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
#endif
    }

#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_TIMERNEXT
    /* Calculate, when next Heartbeat needs to be send and lower timerNext_us if necessary. */
    if (HBtime != 0 && timerNext_us != NULL) {
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d018      	beq.n	800393a <CO_NMT_process+0x598>
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	2b00      	cmp	r3, #0
 800390c:	d015      	beq.n	800393a <CO_NMT_process+0x598>
        if (NMT->HBproducerTimer < HBtime) {
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	429a      	cmp	r2, r3
 8003916:	d90d      	bls.n	8003934 <CO_NMT_process+0x592>
            uint32_t diff = HBtime - NMT->HBproducerTimer;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	613b      	str	r3, [r7, #16]
            if (*timerNext_us > diff) {
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	429a      	cmp	r2, r3
 800392a:	d206      	bcs.n	800393a <CO_NMT_process+0x598>
                *timerNext_us = diff;
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e002      	b.n	800393a <CO_NMT_process+0x598>
            }
        } else {
            *timerNext_us = 0;
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
        }
    }
#endif

    return (CO_NMT_reset_cmd_t) NMT->resetCommand;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	7b9b      	ldrb	r3, [r3, #14]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <CO_getUint16>:
static inline uint16_t CO_getUint16(const uint8_t data[]){
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
    memcpy(&value, data, sizeof(value));
 8003954:	81fb      	strh	r3, [r7, #14]
    return value;
 8003956:	89fb      	ldrh	r3, [r7, #14]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8003970:	60fb      	str	r3, [r7, #12]
    return value;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <CO_setUint32>:
static inline void CO_setUint32(uint8_t data[], const uint32_t value){
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	683a      	ldr	r2, [r7, #0]
    memcpy(data, &value, sizeof(value));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	601a      	str	r2, [r3, #0]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, void *msg){
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ac:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	3321      	adds	r3, #33	; 0x21
 80039b2:	613b      	str	r3, [r7, #16]

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	7e5b      	ldrb	r3, [r3, #25]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d038      	beq.n	8003a32 <CO_PDO_receive+0x96>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f993 3000 	ldrsb.w	r3, [r3]
    if( (RPDO->valid) &&
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d132      	bne.n	8003a32 <CO_PDO_receive+0x96>
        (DLC >= RPDO->dataLength))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	7e9b      	ldrb	r3, [r3, #26]
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 80039d0:	7dfa      	ldrb	r2, [r7, #23]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d32d      	bcc.n	8003a32 <CO_PDO_receive+0x96>
    {
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        const size_t index = RPDO->SYNC && RPDO->synchronous && RPDO->SYNC->CANrxToggle;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <CO_PDO_receive+0x5a>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d006      	beq.n	80039f6 <CO_PDO_receive+0x5a>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	7f1b      	ldrb	r3, [r3, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <CO_PDO_receive+0x5a>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <CO_PDO_receive+0x5c>
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
#else
        const size_t index = 0;
#endif

        /* copy data into appropriate buffer and set 'new message' flag */
        memcpy(RPDO->CANrxData[index], data, sizeof(RPDO->CANrxData[index]));
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3309      	adds	r3, #9
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	3304      	adds	r3, #4
 8003a06:	2208      	movs	r2, #8
 8003a08:	6939      	ldr	r1, [r7, #16]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f013 f8d8 	bl	8016bc0 <memcpy>
        CO_FLAG_SET(RPDO->CANrxNew[index]);
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3310      	adds	r3, #16
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	605a      	str	r2, [r3, #4]

#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_CALLBACK_PRE
        /* Optional signal to RTOS, which can resume task, which handles RPDO. */
        if(RPDO->pFunctSignalPre != NULL) {
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <CO_PDO_receive+0x96>
            RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4798      	blx	r3
        }
#endif
    }
}
 8003a32:	bf00      	nop
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <CO_RPDOconfigCom>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af04      	add	r7, sp, #16
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
    uint16_t ID;
    CO_ReturnError_t r;

    ID = (uint16_t)COB_IDUsedByRPDO;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	81fb      	strh	r3, [r7, #14]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <CO_RPDOconfigCom+0xb8>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d121      	bne.n	8003a98 <CO_RPDOconfigCom+0x5c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	7e9b      	ldrb	r3, [r3, #26]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01d      	beq.n	8003a98 <CO_RPDOconfigCom+0x5c>
 8003a5c:	89fb      	ldrh	r3, [r7, #14]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01a      	beq.n	8003a98 <CO_RPDOconfigCom+0x5c>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8adb      	ldrh	r3, [r3, #22]
 8003a66:	89fa      	ldrh	r2, [r7, #14]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d105      	bne.n	8003a78 <CO_RPDOconfigCom+0x3c>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	7d1b      	ldrb	r3, [r3, #20]
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	89fb      	ldrh	r3, [r7, #14]
 8003a74:	4413      	add	r3, r2
 8003a76:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = true;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	765a      	strb	r2, [r3, #25]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	7a1b      	ldrb	r3, [r3, #8]
 8003a84:	2bf0      	cmp	r3, #240	; 0xf0
 8003a86:	bf94      	ite	ls
 8003a88:	2301      	movls	r3, #1
 8003a8a:	2300      	movhi	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a96:	e00a      	b.n	8003aae <CO_RPDOconfigCom+0x72>
#endif
    }
    else{
        ID = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = false;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	765a      	strb	r2, [r3, #25]
        CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    }
    r = CO_CANrxBufferInit(
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 8003ab8:	89fa      	ldrh	r2, [r7, #14]
 8003aba:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <CO_RPDOconfigCom+0xbc>)
 8003abc:	9302      	str	r3, [sp, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003aca:	f005 fcc1 	bl	8009450 <CO_CANrxBufferInit>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	737b      	strb	r3, [r7, #13]
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    if(r != CO_ERROR_NO){
 8003ad2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <CO_RPDOconfigCom+0xb0>
        RPDO->valid = false;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	765a      	strb	r2, [r3, #25]
        CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    }
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	bffff800 	.word	0xbffff800
 8003af8:	0800399d 	.word	0x0800399d

08003afc <CO_TPDOconfigCom>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b089      	sub	sp, #36	; 0x24
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	71fb      	strb	r3, [r7, #7]
    uint16_t ID;

    ID = (uint16_t)COB_IDUsedByTPDO;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	82fb      	strh	r3, [r7, #22]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <CO_TPDOconfigCom+0x8c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d115      	bne.n	8003b44 <CO_TPDOconfigCom+0x48>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	7e9b      	ldrb	r3, [r3, #26]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d011      	beq.n	8003b44 <CO_TPDOconfigCom+0x48>
 8003b20:	8afb      	ldrh	r3, [r7, #22]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00e      	beq.n	8003b44 <CO_TPDOconfigCom+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8adb      	ldrh	r3, [r3, #22]
 8003b2a:	8afa      	ldrh	r2, [r7, #22]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d105      	bne.n	8003b3c <CO_TPDOconfigCom+0x40>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	7d1b      	ldrb	r3, [r3, #20]
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	8afb      	ldrh	r3, [r7, #22]
 8003b38:	4413      	add	r3, r2
 8003b3a:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = true;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	765a      	strb	r2, [r3, #25]
 8003b42:	e004      	b.n	8003b4e <CO_TPDOconfigCom+0x52>
    }
    else{
        ID = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = false;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	765a      	strb	r2, [r3, #25]
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	7e9b      	ldrb	r3, [r3, #26]
 8003b5c:	8afc      	ldrh	r4, [r7, #22]
 8003b5e:	79fa      	ldrb	r2, [r7, #7]
 8003b60:	9201      	str	r2, [sp, #4]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	2300      	movs	r3, #0
 8003b66:	4622      	mov	r2, r4
 8003b68:	f005 fcc8 	bl	80094fc <CO_CANtxBufferInit>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <CO_TPDOconfigCom+0x84>
        TPDO->valid = false;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	765a      	strb	r2, [r3, #25]
    }
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd90      	pop	{r4, r7, pc}
 8003b88:	bffff800 	.word	0xbffff800

08003b8c <CO_PDOfindMap>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint16_t)(map>>16);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	837b      	strh	r3, [r7, #26]
    subIndex = (uint8_t)(map>>8);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	767b      	strb	r3, [r7, #25]
    dataLen = (uint8_t) map;   /* data length in bits */
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	763b      	strb	r3, [r7, #24]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003bac:	7e3b      	ldrb	r3, [r7, #24]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <CO_PDOfindMap+0x2e>
 8003bb6:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <CO_PDOfindMap+0x1c4>)
 8003bb8:	e0c6      	b.n	8003d48 <CO_PDOfindMap+0x1bc>

    dataLen >>= 3;    /* new data length is in bytes */
 8003bba:	7e3b      	ldrb	r3, [r7, #24]
 8003bbc:	08db      	lsrs	r3, r3, #3
 8003bbe:	763b      	strb	r3, [r7, #24]
    *pLength += dataLen;
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	781a      	ldrb	r2, [r3, #0]
 8003bc4:	7e3b      	ldrb	r3, [r7, #24]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d901      	bls.n	8003bda <CO_PDOfindMap+0x4e>
 8003bd6:	4b5f      	ldr	r3, [pc, #380]	; (8003d54 <CO_PDOfindMap+0x1c8>)
 8003bd8:	e0b6      	b.n	8003d48 <CO_PDOfindMap+0x1bc>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
 8003bda:	8b7b      	ldrh	r3, [r7, #26]
 8003bdc:	2b07      	cmp	r3, #7
 8003bde:	d82d      	bhi.n	8003c3c <CO_PDOfindMap+0xb0>
 8003be0:	7e7b      	ldrb	r3, [r7, #25]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d12a      	bne.n	8003c3c <CO_PDOfindMap+0xb0>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
 8003be6:	2304      	movs	r3, #4
 8003be8:	77fb      	strb	r3, [r7, #31]

        if(index<2) dummySize = 0;
 8003bea:	8b7b      	ldrh	r3, [r7, #26]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d802      	bhi.n	8003bf6 <CO_PDOfindMap+0x6a>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e010      	b.n	8003c18 <CO_PDOfindMap+0x8c>
        else if(index==2 || index==5) dummySize = 1;
 8003bf6:	8b7b      	ldrh	r3, [r7, #26]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d002      	beq.n	8003c02 <CO_PDOfindMap+0x76>
 8003bfc:	8b7b      	ldrh	r3, [r7, #26]
 8003bfe:	2b05      	cmp	r3, #5
 8003c00:	d102      	bne.n	8003c08 <CO_PDOfindMap+0x7c>
 8003c02:	2301      	movs	r3, #1
 8003c04:	77fb      	strb	r3, [r7, #31]
 8003c06:	e007      	b.n	8003c18 <CO_PDOfindMap+0x8c>
        else if(index==3 || index==6) dummySize = 2;
 8003c08:	8b7b      	ldrh	r3, [r7, #26]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d002      	beq.n	8003c14 <CO_PDOfindMap+0x88>
 8003c0e:	8b7b      	ldrh	r3, [r7, #26]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d101      	bne.n	8003c18 <CO_PDOfindMap+0x8c>
 8003c14:	2302      	movs	r3, #2
 8003c16:	77fb      	strb	r3, [r7, #31]

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003c18:	7ffa      	ldrb	r2, [r7, #31]
 8003c1a:	7e3b      	ldrb	r3, [r7, #24]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d201      	bcs.n	8003c24 <CO_PDOfindMap+0x98>
 8003c20:	4b4b      	ldr	r3, [pc, #300]	; (8003d50 <CO_PDOfindMap+0x1c4>)
 8003c22:	e091      	b.n	8003d48 <CO_PDOfindMap+0x1bc>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d103      	bne.n	8003c32 <CO_PDOfindMap+0xa6>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	4a4a      	ldr	r2, [pc, #296]	; (8003d58 <CO_PDOfindMap+0x1cc>)
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e002      	b.n	8003c38 <CO_PDOfindMap+0xac>
        else         *ppData = (uint8_t*) &dummyTX;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	4a49      	ldr	r2, [pc, #292]	; (8003d5c <CO_PDOfindMap+0x1d0>)
 8003c36:	601a      	str	r2, [r3, #0]

        return 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e085      	b.n	8003d48 <CO_PDOfindMap+0x1bc>
    }

    /* find object in Object Dictionary */
    entryNo = CO_OD_find(SDO, index);
 8003c3c:	8b7b      	ldrh	r3, [r7, #26]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f001 faeb 	bl	800521c <CO_OD_find>
 8003c46:	4603      	mov	r3, r0
 8003c48:	82fb      	strh	r3, [r7, #22]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
 8003c4a:	8afb      	ldrh	r3, [r7, #22]
 8003c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00c      	beq.n	8003c6e <CO_PDOfindMap+0xe2>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 8003c5a:	8afa      	ldrh	r2, [r7, #22]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	789b      	ldrb	r3, [r3, #2]
 8003c68:	7e7a      	ldrb	r2, [r7, #25]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d901      	bls.n	8003c72 <CO_PDOfindMap+0xe6>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <CO_PDOfindMap+0x1d4>)
 8003c70:	e06a      	b.n	8003d48 <CO_PDOfindMap+0x1bc>

    attr = CO_OD_getAttribute(SDO, entryNo, subIndex);
 8003c72:	7e7a      	ldrb	r2, [r7, #25]
 8003c74:	8afb      	ldrh	r3, [r7, #22]
 8003c76:	4619      	mov	r1, r3
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f001 fb78 	bl	800536e <CO_OD_getAttribute>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	757b      	strb	r3, [r7, #21]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10b      	bne.n	8003ca0 <CO_PDOfindMap+0x114>
 8003c88:	7d7b      	ldrb	r3, [r7, #21]
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <CO_PDOfindMap+0x110>
 8003c92:	7d7b      	ldrb	r3, [r7, #21]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <CO_PDOfindMap+0x114>
 8003c9c:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <CO_PDOfindMap+0x1c4>)
 8003c9e:	e053      	b.n	8003d48 <CO_PDOfindMap+0x1bc>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <CO_PDOfindMap+0x132>
 8003ca6:	7d7b      	ldrb	r3, [r7, #21]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <CO_PDOfindMap+0x12e>
 8003cb0:	7d7b      	ldrb	r3, [r7, #21]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <CO_PDOfindMap+0x132>
 8003cba:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <CO_PDOfindMap+0x1c4>)
 8003cbc:	e044      	b.n	8003d48 <CO_PDOfindMap+0x1bc>

    /* is size of variable big enough for map */
    objectLen = CO_OD_getLength(SDO, entryNo, subIndex);
 8003cbe:	7e7a      	ldrb	r2, [r7, #25]
 8003cc0:	8afb      	ldrh	r3, [r7, #22]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f001 fb01 	bl	80052cc <CO_OD_getLength>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	753b      	strb	r3, [r7, #20]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003cce:	7d3a      	ldrb	r2, [r7, #20]
 8003cd0:	7e3b      	ldrb	r3, [r7, #24]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d201      	bcs.n	8003cda <CO_PDOfindMap+0x14e>
 8003cd6:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <CO_PDOfindMap+0x1c4>)
 8003cd8:	e036      	b.n	8003d48 <CO_PDOfindMap+0x1bc>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
 8003cda:	7d7b      	ldrb	r3, [r7, #21]
 8003cdc:	09db      	lsrs	r3, r3, #7
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) CO_OD_getDataPointer(SDO, entryNo, subIndex);
 8003ce4:	7e7a      	ldrb	r2, [r7, #25]
 8003ce6:	8afb      	ldrh	r3, [r7, #22]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f001 fb93 	bl	8005416 <CO_OD_getDataPointer>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
 8003cf6:	7d7b      	ldrb	r3, [r7, #21]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d022      	beq.n	8003d46 <CO_PDOfindMap+0x1ba>
        int16_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	7e3b      	ldrb	r3, [r7, #24]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	83bb      	strh	r3, [r7, #28]
 8003d10:	e013      	b.n	8003d3a <CO_PDOfindMap+0x1ae>
            *pSendIfCOSFlags |= 1<<i;
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	b25a      	sxtb	r2, r3
 8003d18:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	b25b      	sxtb	r3, r3
 8003d24:	4313      	orrs	r3, r2
 8003d26:	b25b      	sxtb	r3, r3
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
 8003d2e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	83bb      	strh	r3, [r7, #28]
 8003d3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	4293      	cmp	r3, r2
 8003d44:	dbe5      	blt.n	8003d12 <CO_PDOfindMap+0x186>
        }
    }

    return 0;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	06040041 	.word	0x06040041
 8003d54:	06040042 	.word	0x06040042
 8003d58:	20000a3c 	.word	0x20000a3c
 8003d5c:	20000a40 	.word	0x20000a40
 8003d60:	06020000 	.word	0x06020000

08003d64 <CO_RPDOconfigMap>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08e      	sub	sp, #56	; 0x38
 8003d68:	af04      	add	r7, sp, #16
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	61fb      	str	r3, [r7, #28]

    for(i=noOfMappedObjects; i>0; i--){
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d84:	e047      	b.n	8003e16 <CO_RPDOconfigMap+0xb2>
        int16_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	72fb      	strb	r3, [r7, #11]
        uint8_t prevLength = length;
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	1d1a      	adds	r2, r3, #4
 8003d92:	61fa      	str	r2, [r7, #28]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6858      	ldr	r0, [r3, #4]
 8003d9c:	f107 020c 	add.w	r2, r7, #12
 8003da0:	f107 030a 	add.w	r3, r7, #10
 8003da4:	9302      	str	r3, [sp, #8]
 8003da6:	f107 030b 	add.w	r3, r7, #11
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	f107 0313 	add.w	r3, r7, #19
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	4613      	mov	r3, r2
 8003db4:	2200      	movs	r2, #0
 8003db6:	6979      	ldr	r1, [r7, #20]
 8003db8:	f7ff fee8 	bl	8003b8c <CO_PDOfindMap>
 8003dbc:	6238      	str	r0, [r7, #32]
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
        if(ret){
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <CO_RPDOconfigMap+0x76>
            length = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 8003dd2:	211a      	movs	r1, #26
 8003dd4:	f7fe fd81 	bl	80028da <CO_errorReport>
 8003dd8:	e021      	b.n	8003e1e <CO_RPDOconfigMap+0xba>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 8003dda:	7e7b      	ldrb	r3, [r7, #25]
 8003ddc:	837b      	strh	r3, [r7, #26]
 8003dde:	e00f      	b.n	8003e00 <CO_RPDOconfigMap+0x9c>
            RPDO->mapPointer[j] = pData++;
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	1c53      	adds	r3, r2, #1
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	3306      	adds	r3, #6
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
 8003df4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	837b      	strh	r3, [r7, #26]
 8003e00:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003e04:	7cfa      	ldrb	r2, [r7, #19]
 8003e06:	4293      	cmp	r3, r2
 8003e08:	dbea      	blt.n	8003de0 <CO_RPDOconfigMap+0x7c>
    for(i=noOfMappedObjects; i>0; i--){
 8003e0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	dcb3      	bgt.n	8003d86 <CO_RPDOconfigMap+0x22>
        }
#endif

    }

    RPDO->dataLength = length;
 8003e1e:	7cfa      	ldrb	r2, [r7, #19]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	769a      	strb	r2, [r3, #26]

    return ret;
 8003e24:	6a3b      	ldr	r3, [r7, #32]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3728      	adds	r7, #40	; 0x28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <CO_TPDOconfigMap>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b08e      	sub	sp, #56	; 0x38
 8003e32:	af04      	add	r7, sp, #16
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	3304      	adds	r3, #4
 8003e48:	61fb      	str	r3, [r7, #28]

    TPDO->sendIfCOSFlags = 0;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for(i=noOfMappedObjects; i>0; i--){
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e56:	e045      	b.n	8003ee4 <CO_TPDOconfigMap+0xb6>
        int16_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	1d1a      	adds	r2, r3, #4
 8003e60:	61fa      	str	r2, [r7, #28]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6858      	ldr	r0, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3344      	adds	r3, #68	; 0x44
 8003e6e:	f107 010c 	add.w	r1, r7, #12
 8003e72:	f107 020b 	add.w	r2, r7, #11
 8003e76:	9202      	str	r2, [sp, #8]
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	f107 0313 	add.w	r3, r7, #19
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	460b      	mov	r3, r1
 8003e82:	2201      	movs	r2, #1
 8003e84:	6979      	ldr	r1, [r7, #20]
 8003e86:	f7ff fe81 	bl	8003b8c <CO_PDOfindMap>
 8003e8a:	6238      	str	r0, [r7, #32]
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
        if(ret){
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <CO_TPDOconfigMap+0x7a>
            length = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 8003ea0:	211a      	movs	r1, #26
 8003ea2:	f7fe fd1a 	bl	80028da <CO_errorReport>
 8003ea6:	e021      	b.n	8003eec <CO_TPDOconfigMap+0xbe>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 8003ea8:	7e7b      	ldrb	r3, [r7, #25]
 8003eaa:	837b      	strh	r3, [r7, #26]
 8003eac:	e00f      	b.n	8003ece <CO_TPDOconfigMap+0xa0>
            TPDO->mapPointer[j] = pData++;
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	1c53      	adds	r3, r2, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	3306      	adds	r3, #6
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
 8003ec2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	837b      	strh	r3, [r7, #26]
 8003ece:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ed2:	7cfa      	ldrb	r2, [r7, #19]
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	dbea      	blt.n	8003eae <CO_TPDOconfigMap+0x80>
    for(i=noOfMappedObjects; i>0; i--){
 8003ed8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ee4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	dcb5      	bgt.n	8003e58 <CO_TPDOconfigMap+0x2a>
        }
#endif

    }

    TPDO->dataLength = length;
 8003eec:	7cfa      	ldrb	r2, [r7, #19]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	769a      	strb	r2, [r3, #26]

    return ret;
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3728      	adds	r7, #40	; 0x28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <CO_ODF_RPDOcom>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	617b      	str	r3, [r7, #20]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	7ddb      	ldrb	r3, [r3, #23]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d029      	beq.n	8003f66 <CO_ODF_RPDOcom+0x6a>
        if(ODF_arg->subIndex == 1){
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7d9b      	ldrb	r3, [r3, #22]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d123      	bne.n	8003f62 <CO_ODF_RPDOcom+0x66>
            uint32_t value = CO_getUint32(ODF_arg->data);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fd20 	bl	8003964 <CO_getUint32>
 8003f24:	61f8      	str	r0, [r7, #28]

            /* if default COB ID is used, write default value here */
            if(((value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	8ad2      	ldrh	r2, [r2, #22]
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d109      	bne.n	8003f46 <CO_ODF_RPDOcom+0x4a>
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	8adb      	ldrh	r3, [r3, #22]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <CO_ODF_RPDOcom+0x4a>
                value += RPDO->nodeId;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	7d1b      	ldrb	r3, [r3, #20]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	4413      	add	r3, r2
 8003f44:	61fb      	str	r3, [r7, #28]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) value |= 0x80000000L;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	7e5b      	ldrb	r3, [r3, #25]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <CO_ODF_RPDOcom+0x5a>
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f54:	61fb      	str	r3, [r7, #28]

            CO_setUint32(ODF_arg->data, value);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	69f9      	ldr	r1, [r7, #28]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fd0f 	bl	8003980 <CO_setUint32>
        }
        return CO_SDO_AB_NONE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e07e      	b.n	8004064 <CO_ODF_RPDOcom+0x168>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	7e1b      	ldrb	r3, [r3, #24]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <CO_ODF_RPDOcom+0x7a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8003f72:	4b3e      	ldr	r3, [pc, #248]	; (800406c <CO_ODF_RPDOcom+0x170>)
 8003f74:	e076      	b.n	8004064 <CO_ODF_RPDOcom+0x168>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f993 3000 	ldrsb.w	r3, [r3]
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d107      	bne.n	8003f92 <CO_ODF_RPDOcom+0x96>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	7e1b      	ldrb	r3, [r3, #24]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <CO_ODF_RPDOcom+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8003f8e:	4b38      	ldr	r3, [pc, #224]	; (8004070 <CO_ODF_RPDOcom+0x174>)
 8003f90:	e068      	b.n	8004064 <CO_ODF_RPDOcom+0x168>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7d9b      	ldrb	r3, [r3, #22]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d13a      	bne.n	8004010 <CO_ODF_RPDOcom+0x114>
        uint32_t value = CO_getUint32(ODF_arg->data);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fce0 	bl	8003964 <CO_getUint32>
 8003fa4:	61b8      	str	r0, [r7, #24]

        /* bits 11...29 must be zero */
        if(value & 0x3FFF8000L)
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4b32      	ldr	r3, [pc, #200]	; (8004074 <CO_ODF_RPDOcom+0x178>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <CO_ODF_RPDOcom+0xb8>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8003fb0:	4b31      	ldr	r3, [pc, #196]	; (8004078 <CO_ODF_RPDOcom+0x17c>)
 8003fb2:	e057      	b.n	8004064 <CO_ODF_RPDOcom+0x168>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	8ad2      	ldrh	r2, [r2, #22]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	7d12      	ldrb	r2, [r2, #20]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d10f      	bne.n	8003fe8 <CO_ODF_RPDOcom+0xec>
            value &= 0xC0000000L;
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003fce:	61bb      	str	r3, [r7, #24]
            value += RPDO->defaultCOB_ID;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	8adb      	ldrh	r3, [r3, #22]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	4413      	add	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
            CO_setUint32(ODF_arg->data, value);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	69b9      	ldr	r1, [r7, #24]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fccc 	bl	8003980 <CO_setUint32>
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	7e5b      	ldrb	r3, [r3, #25]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <CO_ODF_RPDOcom+0x10a>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	4053      	eors	r3, r2
 8003ffa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <CO_ODF_RPDOcom+0x10a>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <CO_ODF_RPDOcom+0x17c>)
 8004004:	e02e      	b.n	8004064 <CO_ODF_RPDOcom+0x168>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, value);
 8004006:	69b9      	ldr	r1, [r7, #24]
 8004008:	6978      	ldr	r0, [r7, #20]
 800400a:	f7ff fd17 	bl	8003a3c <CO_RPDOconfigCom>
 800400e:	e028      	b.n	8004062 <CO_ODF_RPDOcom+0x166>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	7d9b      	ldrb	r3, [r3, #22]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d124      	bne.n	8004062 <CO_ODF_RPDOcom+0x166>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        bool_t synchronousPrev = RPDO->synchronous;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004024:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2bf0      	cmp	r3, #240	; 0xf0
 800402c:	d905      	bls.n	800403a <CO_ODF_RPDOcom+0x13e>
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2bfd      	cmp	r3, #253	; 0xfd
 8004034:	d801      	bhi.n	800403a <CO_ODF_RPDOcom+0x13e>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <CO_ODF_RPDOcom+0x17c>)
 8004038:	e014      	b.n	8004064 <CO_ODF_RPDOcom+0x168>

        RPDO->synchronous = (*value <= 240) ? true : false;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2bf0      	cmp	r3, #240	; 0xf0
 8004040:	bf94      	ite	ls
 8004042:	2301      	movls	r3, #1
 8004044:	2300      	movhi	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	429a      	cmp	r2, r3
 800405a:	d002      	beq.n	8004062 <CO_ODF_RPDOcom+0x166>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2200      	movs	r2, #0
 8004060:	649a      	str	r2, [r3, #72]	; 0x48
        if(*value <= 253)
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
#endif
    }

    return CO_SDO_AB_NONE;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	06010002 	.word	0x06010002
 8004070:	08000022 	.word	0x08000022
 8004074:	3fff8000 	.word	0x3fff8000
 8004078:	06090030 	.word	0x06090030

0800407c <CO_ODF_TPDOcom>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	617b      	str	r3, [r7, #20]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7d9b      	ldrb	r3, [r3, #22]
 800408e:	2b04      	cmp	r3, #4
 8004090:	d101      	bne.n	8004096 <CO_ODF_TPDOcom+0x1a>
 8004092:	4b73      	ldr	r3, [pc, #460]	; (8004260 <CO_ODF_TPDOcom+0x1e4>)
 8004094:	e0e0      	b.n	8004258 <CO_ODF_TPDOcom+0x1dc>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	7ddb      	ldrb	r3, [r3, #23]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d029      	beq.n	80040f2 <CO_ODF_TPDOcom+0x76>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	7d9b      	ldrb	r3, [r3, #22]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d123      	bne.n	80040ee <CO_ODF_TPDOcom+0x72>
            uint32_t value = CO_getUint32(ODF_arg->data);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fc5a 	bl	8003964 <CO_getUint32>
 80040b0:	61f8      	str	r0, [r7, #28]

            /* if default COB ID is used, write default value here */
            if(((value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	8ad2      	ldrh	r2, [r2, #22]
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d109      	bne.n	80040d2 <CO_ODF_TPDOcom+0x56>
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	8adb      	ldrh	r3, [r3, #22]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <CO_ODF_TPDOcom+0x56>
                value += TPDO->nodeId;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	7d1b      	ldrb	r3, [r3, #20]
 80040ca:	461a      	mov	r2, r3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	61fb      	str	r3, [r7, #28]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) value |= 0x80000000L;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	7e5b      	ldrb	r3, [r3, #25]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <CO_ODF_TPDOcom+0x66>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040e0:	61fb      	str	r3, [r7, #28]

            CO_setUint32(ODF_arg->data, value);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	69f9      	ldr	r1, [r7, #28]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fc49 	bl	8003980 <CO_setUint32>
        }
        return CO_SDO_AB_NONE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e0b2      	b.n	8004258 <CO_ODF_TPDOcom+0x1dc>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	7e1b      	ldrb	r3, [r3, #24]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <CO_ODF_TPDOcom+0x86>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 80040fe:	4b59      	ldr	r3, [pc, #356]	; (8004264 <CO_ODF_TPDOcom+0x1e8>)
 8004100:	e0aa      	b.n	8004258 <CO_ODF_TPDOcom+0x1dc>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f993 3000 	ldrsb.w	r3, [r3]
 800410a:	2b05      	cmp	r3, #5
 800410c:	d107      	bne.n	800411e <CO_ODF_TPDOcom+0xa2>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	7e1b      	ldrb	r3, [r3, #24]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <CO_ODF_TPDOcom+0xa2>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 800411a:	4b53      	ldr	r3, [pc, #332]	; (8004268 <CO_ODF_TPDOcom+0x1ec>)
 800411c:	e09c      	b.n	8004258 <CO_ODF_TPDOcom+0x1dc>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7d9b      	ldrb	r3, [r3, #22]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d143      	bne.n	80041ae <CO_ODF_TPDOcom+0x132>
        uint32_t value = CO_getUint32(ODF_arg->data);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fc1a 	bl	8003964 <CO_getUint32>
 8004130:	61b8      	str	r0, [r7, #24]

        /* bits 11...29 must be zero */
        if(value & 0x3FFF8000L)
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4b4d      	ldr	r3, [pc, #308]	; (800426c <CO_ODF_TPDOcom+0x1f0>)
 8004136:	4013      	ands	r3, r2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <CO_ODF_TPDOcom+0xc4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 800413c:	4b4c      	ldr	r3, [pc, #304]	; (8004270 <CO_ODF_TPDOcom+0x1f4>)
 800413e:	e08b      	b.n	8004258 <CO_ODF_TPDOcom+0x1dc>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	b29b      	uxth	r3, r3
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	8ad2      	ldrh	r2, [r2, #22]
 8004148:	4611      	mov	r1, r2
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	7d12      	ldrb	r2, [r2, #20]
 800414e:	440a      	add	r2, r1
 8004150:	4293      	cmp	r3, r2
 8004152:	d10f      	bne.n	8004174 <CO_ODF_TPDOcom+0xf8>
            value &= 0xC0000000L;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800415a:	61bb      	str	r3, [r7, #24]
            value += TPDO->defaultCOB_ID;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	8adb      	ldrh	r3, [r3, #22]
 8004160:	461a      	mov	r2, r3
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4413      	add	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]

            CO_setUint32(ODF_arg->data, value);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	69b9      	ldr	r1, [r7, #24]
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fc06 	bl	8003980 <CO_setUint32>
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	7e5b      	ldrb	r3, [r3, #25]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <CO_ODF_TPDOcom+0x116>
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	4053      	eors	r3, r2
 8004186:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <CO_ODF_TPDOcom+0x116>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 800418e:	4b38      	ldr	r3, [pc, #224]	; (8004270 <CO_ODF_TPDOcom+0x1f4>)
 8004190:	e062      	b.n	8004258 <CO_ODF_TPDOcom+0x1dc>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, value, TPDO->CANtxBuff->syncFlag);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	7b9b      	ldrb	r3, [r3, #14]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	69b9      	ldr	r1, [r7, #24]
 800419e:	6978      	ldr	r0, [r7, #20]
 80041a0:	f7ff fcac 	bl	8003afc <CO_TPDOconfigCom>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	22ff      	movs	r2, #255	; 0xff
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ac:	e053      	b.n	8004256 <CO_ODF_TPDOcom+0x1da>
#endif
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	7d9b      	ldrb	r3, [r3, #22]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d11b      	bne.n	80041ee <CO_ODF_TPDOcom+0x172>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2bf0      	cmp	r3, #240	; 0xf0
 80041c2:	d905      	bls.n	80041d0 <CO_ODF_TPDOcom+0x154>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2bfd      	cmp	r3, #253	; 0xfd
 80041ca:	d801      	bhi.n	80041d0 <CO_ODF_TPDOcom+0x154>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 80041cc:	4b28      	ldr	r3, [pc, #160]	; (8004270 <CO_ODF_TPDOcom+0x1f4>)
 80041ce:	e043      	b.n	8004258 <CO_ODF_TPDOcom+0x1dc>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2bf0      	cmp	r3, #240	; 0xf0
 80041d6:	bf94      	ite	ls
 80041d8:	2301      	movls	r3, #1
 80041da:	2300      	movhi	r3, #0
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	22ff      	movs	r2, #255	; 0xff
 80041e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ec:	e033      	b.n	8004256 <CO_ODF_TPDOcom+0x1da>
        /* values from 0...253 are not valid */
        if(*value <= 253)
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
#endif
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	7d9b      	ldrb	r3, [r3, #22]
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d109      	bne.n	800420a <CO_ODF_TPDOcom+0x18e>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	7e5b      	ldrb	r3, [r3, #25]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <CO_ODF_TPDOcom+0x186>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 80041fe:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <CO_ODF_TPDOcom+0x1f4>)
 8004200:	e02a      	b.n	8004258 <CO_ODF_TPDOcom+0x1dc>

        TPDO->inhibitTimer = 0;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2200      	movs	r2, #0
 8004206:	63da      	str	r2, [r3, #60]	; 0x3c
 8004208:	e025      	b.n	8004256 <CO_ODF_TPDOcom+0x1da>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	7d9b      	ldrb	r3, [r3, #22]
 800420e:	2b05      	cmp	r3, #5
 8004210:	d10e      	bne.n	8004230 <CO_ODF_TPDOcom+0x1b4>
        uint16_t value = CO_getUint16(ODF_arg->data);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fb95 	bl	8003946 <CO_getUint16>
 800421c:	4603      	mov	r3, r0
 800421e:	81fb      	strh	r3, [r7, #14]

        TPDO->eventTimer = ((uint32_t) value) * 1000;
 8004220:	89fb      	ldrh	r3, [r7, #14]
 8004222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004226:	fb03 f202 	mul.w	r2, r3, r2
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
 800422e:	e012      	b.n	8004256 <CO_ODF_TPDOcom+0x1da>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7d9b      	ldrb	r3, [r3, #22]
 8004234:	2b06      	cmp	r3, #6
 8004236:	d10e      	bne.n	8004256 <CO_ODF_TPDOcom+0x1da>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	7e5b      	ldrb	r3, [r3, #25]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <CO_ODF_TPDOcom+0x1ce>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004246:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <CO_ODF_TPDOcom+0x1f4>)
 8004248:	e006      	b.n	8004258 <CO_ODF_TPDOcom+0x1dc>

        /* values from 240...255 are not valid */
        if(*value > 240)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2bf0      	cmp	r3, #240	; 0xf0
 8004250:	d901      	bls.n	8004256 <CO_ODF_TPDOcom+0x1da>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004252:	4b07      	ldr	r3, [pc, #28]	; (8004270 <CO_ODF_TPDOcom+0x1f4>)
 8004254:	e000      	b.n	8004258 <CO_ODF_TPDOcom+0x1dc>
    }

    return CO_SDO_AB_NONE;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	06090011 	.word	0x06090011
 8004264:	06010002 	.word	0x06010002
 8004268:	08000022 	.word	0x08000022
 800426c:	3fff8000 	.word	0x3fff8000
 8004270:	06090030 	.word	0x06090030

08004274 <CO_ODF_RPDOmap>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
 8004274:	b580      	push	{r7, lr}
 8004276:	b08c      	sub	sp, #48	; 0x30
 8004278:	af04      	add	r7, sp, #16
 800427a:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	7ddb      	ldrb	r3, [r3, #23]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00f      	beq.n	80042aa <CO_ODF_RPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7d9b      	ldrb	r3, [r3, #22]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <CO_ODF_RPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	7e9b      	ldrb	r3, [r3, #26]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <CO_ODF_RPDOmap+0x32>
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e054      	b.n	8004354 <CO_ODF_RPDOmap+0xe0>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	7e1b      	ldrb	r3, [r3, #24]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <CO_ODF_RPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <CO_ODF_RPDOmap+0xe8>)
 80042b8:	e04c      	b.n	8004354 <CO_ODF_RPDOmap+0xe0>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f993 3000 	ldrsb.w	r3, [r3]
 80042c2:	2b05      	cmp	r3, #5
 80042c4:	d107      	bne.n	80042d6 <CO_ODF_RPDOmap+0x62>
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	7e1b      	ldrb	r3, [r3, #24]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <CO_ODF_RPDOmap+0x62>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 80042d2:	4b23      	ldr	r3, [pc, #140]	; (8004360 <CO_ODF_RPDOmap+0xec>)
 80042d4:	e03e      	b.n	8004354 <CO_ODF_RPDOmap+0xe0>
    if(RPDO->valid)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	7e5b      	ldrb	r3, [r3, #25]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <CO_ODF_RPDOmap+0x6e>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 80042de:	4b21      	ldr	r3, [pc, #132]	; (8004364 <CO_ODF_RPDOmap+0xf0>)
 80042e0:	e038      	b.n	8004354 <CO_ODF_RPDOmap+0xe0>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7d9b      	ldrb	r3, [r3, #22]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d110      	bne.n	800430c <CO_ODF_RPDOmap+0x98>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d901      	bls.n	80042fc <CO_ODF_RPDOmap+0x88>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 80042f8:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <CO_ODF_RPDOmap+0xf4>)
 80042fa:	e02b      	b.n	8004354 <CO_ODF_RPDOmap+0xe0>

        /* configure mapping */
        return (CO_SDO_abortCode_t) CO_RPDOconfigMap(RPDO, *value);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	4619      	mov	r1, r3
 8004302:	69f8      	ldr	r0, [r7, #28]
 8004304:	f7ff fd2e 	bl	8003d64 <CO_RPDOconfigMap>
 8004308:	4603      	mov	r3, r0
 800430a:	e023      	b.n	8004354 <CO_ODF_RPDOmap+0xe0>
    }

    /* mappedObject */
    else{
        uint32_t value = CO_getUint32(ODF_arg->data);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fb27 	bl	8003964 <CO_getUint32>
 8004316:	61b8      	str	r0, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	7e9b      	ldrb	r3, [r3, #26]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <CO_ODF_RPDOmap+0xb8>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <CO_ODF_RPDOmap+0xf0>)
 800432a:	e013      	b.n	8004354 <CO_ODF_RPDOmap+0xe0>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t) CO_PDOfindMap(
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	6858      	ldr	r0, [r3, #4]
 8004330:	f107 020c 	add.w	r2, r7, #12
 8004334:	f107 0309 	add.w	r3, r7, #9
 8004338:	9302      	str	r3, [sp, #8]
 800433a:	f107 030a 	add.w	r3, r7, #10
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	f107 030b 	add.w	r3, r7, #11
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	2200      	movs	r2, #0
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	f7ff fc1e 	bl	8003b8c <CO_PDOfindMap>
 8004350:	4603      	mov	r3, r0
 8004352:	bf00      	nop
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 8004354:	4618      	mov	r0, r3
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	06010002 	.word	0x06010002
 8004360:	08000022 	.word	0x08000022
 8004364:	06010000 	.word	0x06010000
 8004368:	06040042 	.word	0x06040042

0800436c <CO_ODF_TPDOmap>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
 800436c:	b580      	push	{r7, lr}
 800436e:	b08c      	sub	sp, #48	; 0x30
 8004370:	af04      	add	r7, sp, #16
 8004372:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	7ddb      	ldrb	r3, [r3, #23]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00f      	beq.n	80043a2 <CO_ODF_TPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	7d9b      	ldrb	r3, [r3, #22]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d106      	bne.n	800439e <CO_ODF_TPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	7e9b      	ldrb	r3, [r3, #26]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <CO_ODF_TPDOmap+0x32>
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 800439e:	2300      	movs	r3, #0
 80043a0:	e054      	b.n	800444c <CO_ODF_TPDOmap+0xe0>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	7e1b      	ldrb	r3, [r3, #24]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <CO_ODF_TPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 80043ae:	4b29      	ldr	r3, [pc, #164]	; (8004454 <CO_ODF_TPDOmap+0xe8>)
 80043b0:	e04c      	b.n	800444c <CO_ODF_TPDOmap+0xe0>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f993 3000 	ldrsb.w	r3, [r3]
 80043ba:	2b05      	cmp	r3, #5
 80043bc:	d107      	bne.n	80043ce <CO_ODF_TPDOmap+0x62>
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	7e1b      	ldrb	r3, [r3, #24]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <CO_ODF_TPDOmap+0x62>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <CO_ODF_TPDOmap+0xec>)
 80043cc:	e03e      	b.n	800444c <CO_ODF_TPDOmap+0xe0>
    if(TPDO->valid)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	7e5b      	ldrb	r3, [r3, #25]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <CO_ODF_TPDOmap+0x6e>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 80043d6:	4b21      	ldr	r3, [pc, #132]	; (800445c <CO_ODF_TPDOmap+0xf0>)
 80043d8:	e038      	b.n	800444c <CO_ODF_TPDOmap+0xe0>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	7d9b      	ldrb	r3, [r3, #22]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d110      	bne.n	8004404 <CO_ODF_TPDOmap+0x98>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d901      	bls.n	80043f4 <CO_ODF_TPDOmap+0x88>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 80043f0:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <CO_ODF_TPDOmap+0xf4>)
 80043f2:	e02b      	b.n	800444c <CO_ODF_TPDOmap+0xe0>

        /* configure mapping */
        return (CO_SDO_abortCode_t) CO_TPDOconfigMap(TPDO, *value);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	4619      	mov	r1, r3
 80043fa:	69f8      	ldr	r0, [r7, #28]
 80043fc:	f7ff fd17 	bl	8003e2e <CO_TPDOconfigMap>
 8004400:	4603      	mov	r3, r0
 8004402:	e023      	b.n	800444c <CO_ODF_TPDOmap+0xe0>
    }

    /* mappedObject */
    else{
        uint32_t value = CO_getUint32(ODF_arg->data);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff faab 	bl	8003964 <CO_getUint32>
 800440e:	61b8      	str	r0, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	7e9b      	ldrb	r3, [r3, #26]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <CO_ODF_TPDOmap+0xb8>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <CO_ODF_TPDOmap+0xf0>)
 8004422:	e013      	b.n	800444c <CO_ODF_TPDOmap+0xe0>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t) CO_PDOfindMap(
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	6858      	ldr	r0, [r3, #4]
 8004428:	f107 020c 	add.w	r2, r7, #12
 800442c:	f107 0309 	add.w	r3, r7, #9
 8004430:	9302      	str	r3, [sp, #8]
 8004432:	f107 030a 	add.w	r3, r7, #10
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	f107 030b 	add.w	r3, r7, #11
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	2201      	movs	r2, #1
 8004442:	69b9      	ldr	r1, [r7, #24]
 8004444:	f7ff fba2 	bl	8003b8c <CO_PDOfindMap>
 8004448:	4603      	mov	r3, r0
 800444a:	bf00      	nop
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	06010002 	.word	0x06010002
 8004458:	08000022 	.word	0x08000022
 800445c:	06010000 	.word	0x06010000
 8004460:	06040042 	.word	0x06040042

08004464 <CO_RPDO_init>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint16_t                idx_RPDOCommPar,
        uint16_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d011      	beq.n	800449c <CO_RPDO_init+0x38>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00e      	beq.n	800449c <CO_RPDO_init+0x38>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <CO_RPDO_init+0x38>
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d008      	beq.n	800449c <CO_RPDO_init+0x38>
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <CO_RPDO_init+0x38>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <CO_RPDO_init+0x38>
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d102      	bne.n	80044a2 <CO_RPDO_init+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800449c:	f04f 33ff 	mov.w	r3, #4294967295
 80044a0:	e04f      	b.n	8004542 <CO_RPDO_init+0xde>
    }

    /* Configure object variables */
    RPDO->em = em;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	605a      	str	r2, [r3, #4]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    RPDO->SYNC = (CO_SYNC_t *)SYNC;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
    RPDO->RPDOCommPar = RPDOCommPar;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b8:	609a      	str	r2, [r3, #8]
    RPDO->RPDOMapPar = RPDOMapPar;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044be:	60da      	str	r2, [r3, #12]
    RPDO->operatingState = operatingState;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	611a      	str	r2, [r3, #16]
    RPDO->nodeId = nodeId;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	7f3a      	ldrb	r2, [r7, #28]
 80044ca:	751a      	strb	r2, [r3, #20]
    RPDO->defaultCOB_ID = defaultCOB_ID;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8c3a      	ldrh	r2, [r7, #32]
 80044d0:	82da      	strh	r2, [r3, #22]
    RPDO->restrictionFlags = restrictionFlags;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80044d8:	761a      	strb	r2, [r3, #24]
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_CALLBACK_PRE
    RPDO->pFunctSignalPre = NULL;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	65da      	str	r2, [r3, #92]	; 0x5c
    RPDO->functSignalObjectPre = NULL;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	661a      	str	r2, [r3, #96]	; 0x60
#endif

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    CO_OD_configure(SDO, idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
 80044e6:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80044e8:	2300      	movs	r3, #0
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	2300      	movs	r3, #0
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a16      	ldr	r2, [pc, #88]	; (800454c <CO_RPDO_init+0xe8>)
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fe39 	bl	800516c <CO_OD_configure>
    CO_OD_configure(SDO, idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
 80044fa:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80044fc:	2300      	movs	r3, #0
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	2300      	movs	r3, #0
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a12      	ldr	r2, [pc, #72]	; (8004550 <CO_RPDO_init+0xec>)
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fe2f 	bl	800516c <CO_OD_configure>

    /* configure communication and mapping */
    CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    RPDO->CANdevRx = CANdevRx;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800451e:	665a      	str	r2, [r3, #100]	; 0x64
    RPDO->CANdevRxIdx = CANdevRxIdx;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004524:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7ff fc18 	bl	8003d64 <CO_RPDOconfigMap>
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4619      	mov	r1, r3
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7ff fa7e 	bl	8003a3c <CO_RPDOconfigCom>

    return CO_ERROR_NO;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	08003efd 	.word	0x08003efd
 8004550:	08004275 	.word	0x08004275

08004554 <CO_TPDO_init>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint16_t                idx_TPDOCommPar,
        uint16_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d011      	beq.n	800458c <CO_TPDO_init+0x38>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00e      	beq.n	800458c <CO_TPDO_init+0x38>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00b      	beq.n	800458c <CO_TPDO_init+0x38>
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <CO_TPDO_init+0x38>
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <CO_TPDO_init+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <CO_TPDO_init+0x38>
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <CO_TPDO_init+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800458c:	f04f 33ff 	mov.w	r3, #4294967295
 8004590:	e070      	b.n	8004674 <CO_TPDO_init+0x120>
    }

    /* Configure object variables */
    TPDO->em = em;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	605a      	str	r2, [r3, #4]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->SYNC = (CO_SYNC_t *)SYNC;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    TPDO->TPDOCommPar = TPDOCommPar;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a8:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ae:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	7f3a      	ldrb	r2, [r7, #28]
 80045ba:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8c3a      	ldrh	r2, [r7, #32]
 80045c0:	82da      	strh	r2, [r3, #22]
    TPDO->restrictionFlags = restrictionFlags;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80045c8:	761a      	strb	r2, [r3, #24]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    CO_OD_configure(SDO, idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
 80045ca:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80045cc:	2300      	movs	r3, #0
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	2300      	movs	r3, #0
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a29      	ldr	r2, [pc, #164]	; (800467c <CO_TPDO_init+0x128>)
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fdc7 	bl	800516c <CO_OD_configure>
    CO_OD_configure(SDO, idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
 80045de:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80045e0:	2300      	movs	r3, #0
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	2300      	movs	r3, #0
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4a25      	ldr	r2, [pc, #148]	; (8004680 <CO_TPDO_init+0x12c>)
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fdbd 	bl	800516c <CO_OD_configure>

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045f6:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80045fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    TPDO->inhibitTimer = 0;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	63da      	str	r2, [r3, #60]	; 0x3c
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	89db      	ldrh	r3, [r3, #14]
 800460a:	461a      	mov	r2, r3
 800460c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004610:	fb03 f202 	mul.w	r2, r3, r2
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	641a      	str	r2, [r3, #64]	; 0x40
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	7a1b      	ldrb	r3, [r3, #8]
 800461c:	2bfd      	cmp	r3, #253	; 0xfd
 800461e:	d902      	bls.n	8004626 <CO_TPDO_init+0xd2>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	76da      	strb	r2, [r3, #27]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	4619      	mov	r1, r3
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff fbfe 	bl	8003e2e <CO_TPDOconfigMap>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncCounter = 255;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	22ff      	movs	r2, #255	; 0xff
 8004636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	6859      	ldr	r1, [r3, #4]
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004640:	7a1b      	ldrb	r3, [r3, #8]
 8004642:	2bf0      	cmp	r3, #240	; 0xf0
 8004644:	bf94      	ite	ls
 8004646:	2301      	movls	r3, #1
 8004648:	2300      	movhi	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff fa54 	bl	8003afc <CO_TPDOconfigCom>

    if((TPDOCommPar->transmissionType>240 &&
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	7a1b      	ldrb	r3, [r3, #8]
 8004658:	2bf0      	cmp	r3, #240	; 0xf0
 800465a:	d903      	bls.n	8004664 <CO_TPDO_init+0x110>
         TPDOCommPar->transmissionType<254) ||
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
 8004660:	2bfd      	cmp	r3, #253	; 0xfd
 8004662:	d903      	bls.n	800466c <CO_TPDO_init+0x118>
         TPDOCommPar->SYNCStartValue>240){
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	7c1b      	ldrb	r3, [r3, #16]
         TPDOCommPar->transmissionType<254) ||
 8004668:	2bf0      	cmp	r3, #240	; 0xf0
 800466a:	d902      	bls.n	8004672 <CO_TPDO_init+0x11e>
            TPDO->valid = false;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	765a      	strb	r2, [r3, #25]
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, 0);
    if(TPDOCommPar->transmissionType<254)
        TPDO->valid = false;
#endif

    return CO_ERROR_NO;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	0800407d 	.word	0x0800407d
 8004680:	0800436d 	.word	0x0800436d

08004684 <CO_TPDOisCOS>:


/******************************************************************************/
uint8_t CO_TPDOisCOS(CO_TPDO_t *TPDO){
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	7e92      	ldrb	r2, [r2, #26]
 8004694:	4413      	add	r3, r2
 8004696:	3305      	adds	r3, #5
 8004698:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	7e9b      	ldrb	r3, [r3, #26]
 800469e:	3306      	adds	r3, #6
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	3304      	adds	r3, #4
 80046a8:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	7e9b      	ldrb	r3, [r3, #26]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	2b07      	cmp	r3, #7
 80046b2:	f200 80c2 	bhi.w	800483a <CO_TPDOisCOS+0x1b6>
 80046b6:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <CO_TPDOisCOS+0x38>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	0800480f 	.word	0x0800480f
 80046c0:	080047e3 	.word	0x080047e3
 80046c4:	080047b7 	.word	0x080047b7
 80046c8:	0800478b 	.word	0x0800478b
 80046cc:	0800475f 	.word	0x0800475f
 80046d0:	08004733 	.word	0x08004733
 80046d4:	08004707 	.word	0x08004707
 80046d8:	080046dd 	.word	0x080046dd
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1; // fallthrough
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3b01      	subs	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	3b04      	subs	r3, #4
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d007      	beq.n	8004706 <CO_TPDOisCOS+0x82>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046fc:	b25b      	sxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	da01      	bge.n	8004706 <CO_TPDOisCOS+0x82>
 8004702:	2301      	movs	r3, #1
 8004704:	e09a      	b.n	800483c <CO_TPDOisCOS+0x1b8>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1; // fallthrough
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3b01      	subs	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	781a      	ldrb	r2, [r3, #0]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	3b04      	subs	r3, #4
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d008      	beq.n	8004732 <CO_TPDOisCOS+0xae>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <CO_TPDOisCOS+0xae>
 800472e:	2301      	movs	r3, #1
 8004730:	e084      	b.n	800483c <CO_TPDOisCOS+0x1b8>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1; // fallthrough
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3b01      	subs	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	781a      	ldrb	r2, [r3, #0]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	3b04      	subs	r3, #4
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d008      	beq.n	800475e <CO_TPDOisCOS+0xda>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <CO_TPDOisCOS+0xda>
 800475a:	2301      	movs	r3, #1
 800475c:	e06e      	b.n	800483c <CO_TPDOisCOS+0x1b8>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1; // fallthrough
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3b01      	subs	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	781a      	ldrb	r2, [r3, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	3b04      	subs	r3, #4
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d008      	beq.n	800478a <CO_TPDOisCOS+0x106>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <CO_TPDOisCOS+0x106>
 8004786:	2301      	movs	r3, #1
 8004788:	e058      	b.n	800483c <CO_TPDOisCOS+0x1b8>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1; // fallthrough
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b01      	subs	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	3b04      	subs	r3, #4
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d008      	beq.n	80047b6 <CO_TPDOisCOS+0x132>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <CO_TPDOisCOS+0x132>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e042      	b.n	800483c <CO_TPDOisCOS+0x1b8>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1; // fallthrough
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	781a      	ldrb	r2, [r3, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3b04      	subs	r3, #4
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d008      	beq.n	80047e2 <CO_TPDOisCOS+0x15e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <CO_TPDOisCOS+0x15e>
 80047de:	2301      	movs	r3, #1
 80047e0:	e02c      	b.n	800483c <CO_TPDOisCOS+0x1b8>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1; // fallthrough
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	3b04      	subs	r3, #4
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d008      	beq.n	800480e <CO_TPDOisCOS+0x18a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <CO_TPDOisCOS+0x18a>
 800480a:	2301      	movs	r3, #1
 800480c:	e016      	b.n	800483c <CO_TPDOisCOS+0x1b8>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1; // fallthrough
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3b01      	subs	r3, #1
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	781a      	ldrb	r2, [r3, #0]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	3b04      	subs	r3, #4
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d008      	beq.n	800483a <CO_TPDOisCOS+0x1b6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <CO_TPDOisCOS+0x1b6>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <CO_TPDOisCOS+0x1b8>
    }

    return 0;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <CO_TPDOsend>:

/******************************************************************************/
int16_t CO_TPDOsend(CO_TPDO_t *TPDO){
 8004848:	b580      	push	{r7, lr}
 800484a:	b094      	sub	sp, #80	; 0x50
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
    int16_t i;
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_CALLS_EXTENSION
    if(TPDO->SDO->ODExtensions){
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d07c      	beq.n	8004956 <CO_TPDOsend+0x10e>
        /* for each mapped OD, check mapping to see if an OD extension is available, and call it if it is */
        const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	3304      	adds	r3, #4
 8004862:	643b      	str	r3, [r7, #64]	; 0x40
        CO_SDO_t *pSDO = TPDO->SDO;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(i=TPDO->TPDOMapPar->numberOfMappedObjects; i>0; i--){
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004874:	e06b      	b.n	800494e <CO_TPDOsend+0x106>
            uint32_t map = *(pMap++);
 8004876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004878:	1d1a      	adds	r2, r3, #4
 800487a:	643a      	str	r2, [r7, #64]	; 0x40
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	63bb      	str	r3, [r7, #56]	; 0x38
            uint16_t index = (uint16_t)(map>>16);
 8004880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004882:	0c1b      	lsrs	r3, r3, #16
 8004884:	86fb      	strh	r3, [r7, #54]	; 0x36
            uint8_t subIndex = (uint8_t)(map>>8);
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	0a1b      	lsrs	r3, r3, #8
 800488a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            uint16_t entryNo = CO_OD_find(pSDO, index);
 800488e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004890:	4619      	mov	r1, r3
 8004892:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004894:	f000 fcc2 	bl	800521c <CO_OD_find>
 8004898:	4603      	mov	r3, r0
 800489a:	867b      	strh	r3, [r7, #50]	; 0x32
            if ( entryNo == 0xFFFF ) continue;
 800489c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800489e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d049      	beq.n	800493a <CO_TPDOsend+0xf2>
            CO_OD_extension_t *ext = &pSDO->ODExtensions[entryNo];
 80048a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a8:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 80048ac:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80048ae:	4613      	mov	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            if( ext->pODFunc == NULL) continue;
 80048ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d03d      	beq.n	800493e <CO_TPDOsend+0xf6>
            CO_ODF_arg_t ODF_arg;
            memset((void*)&ODF_arg, 0, sizeof(CO_ODF_arg_t));
 80048c2:	f107 0308 	add.w	r3, r7, #8
 80048c6:	2224      	movs	r2, #36	; 0x24
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f012 f986 	bl	8016bdc <memset>
            ODF_arg.reading = true;
 80048d0:	2301      	movs	r3, #1
 80048d2:	77fb      	strb	r3, [r7, #31]
            ODF_arg.index = index;
 80048d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048d6:	83bb      	strh	r3, [r7, #28]
            ODF_arg.subIndex = subIndex;
 80048d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80048dc:	77bb      	strb	r3, [r7, #30]
            ODF_arg.object = ext->object;
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60bb      	str	r3, [r7, #8]
            ODF_arg.attribute = CO_OD_getAttribute(pSDO, entryNo, subIndex);
 80048e4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80048e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048ea:	4619      	mov	r1, r3
 80048ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80048ee:	f000 fd3e 	bl	800536e <CO_OD_getAttribute>
 80048f2:	4603      	mov	r3, r0
 80048f4:	82fb      	strh	r3, [r7, #22]
            ODF_arg.pFlags = CO_OD_getFlagsPointer(pSDO, entryNo, subIndex);
 80048f6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80048fa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048fc:	4619      	mov	r1, r3
 80048fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004900:	f000 fdd6 	bl	80054b0 <CO_OD_getFlagsPointer>
 8004904:	4603      	mov	r3, r0
 8004906:	61bb      	str	r3, [r7, #24]
            ODF_arg.data = CO_OD_getDataPointer(pSDO, entryNo, subIndex); //https://github.com/CANopenNode/CANopenNode/issues/100
 8004908:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800490c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800490e:	4619      	mov	r1, r3
 8004910:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004912:	f000 fd80 	bl	8005416 <CO_OD_getDataPointer>
 8004916:	4603      	mov	r3, r0
 8004918:	60fb      	str	r3, [r7, #12]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
 800491a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800491e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004920:	4619      	mov	r1, r3
 8004922:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004924:	f000 fcd2 	bl	80052cc <CO_OD_getLength>
 8004928:	4603      	mov	r3, r0
 800492a:	82bb      	strh	r3, [r7, #20]
            ext->pODFunc(&ODF_arg);
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f107 0208 	add.w	r2, r7, #8
 8004934:	4610      	mov	r0, r2
 8004936:	4798      	blx	r3
 8004938:	e002      	b.n	8004940 <CO_TPDOsend+0xf8>
            if ( entryNo == 0xFFFF ) continue;
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <CO_TPDOsend+0xf8>
            if( ext->pODFunc == NULL) continue;
 800493e:	bf00      	nop
        for(i=TPDO->TPDOMapPar->numberOfMappedObjects; i>0; i--){
 8004940:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29b      	uxth	r3, r3
 800494a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800494e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004952:	2b00      	cmp	r3, #0
 8004954:	dc8f      	bgt.n	8004876 <CO_TPDOsend+0x2e>
        }
    }
#endif
    i = TPDO->dataLength;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	7e9b      	ldrb	r3, [r3, #26]
 800495a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004962:	3305      	adds	r3, #5
 8004964:	64bb      	str	r3, [r7, #72]	; 0x48
    ppODdataByte = &TPDO->mapPointer[0];
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	331c      	adds	r3, #28
 800496a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
 800496c:	e00f      	b.n	800498e <CO_TPDOsend+0x146>
        *(pPDOdataByte++) = **(ppODdataByte++);
 800496e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004970:	1d1a      	adds	r2, r3, #4
 8004972:	647a      	str	r2, [r7, #68]	; 0x44
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004978:	1c59      	adds	r1, r3, #1
 800497a:	64b9      	str	r1, [r7, #72]	; 0x48
 800497c:	7812      	ldrb	r2, [r2, #0]
 800497e:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
 8004980:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29b      	uxth	r3, r3
 800498a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800498e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004992:	2b00      	cmp	r3, #0
 8004994:	dceb      	bgt.n	800496e <CO_TPDOsend+0x126>
    }

    TPDO->sendRequest = 0;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	76da      	strb	r2, [r3, #27]

    return CO_CANsend(TPDO->CANdevTx, TPDO->CANtxBuff);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f004 fde8 	bl	800957c <CO_CANsend>
 80049ac:	4603      	mov	r3, r0
 80049ae:	b21b      	sxth	r3, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3750      	adds	r7, #80	; 0x50
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <CO_RPDO_process>:

/******************************************************************************/
void CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b096      	sub	sp, #88	; 0x58
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
    bool_t process_rpdo = true;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    if(RPDO->synchronous && !syncWas)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <CO_RPDO_process+0x28>
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <CO_RPDO_process+0x28>
        process_rpdo = false;
 80049da:	2300      	movs	r3, #0
 80049dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	7e5b      	ldrb	r3, [r3, #25]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <CO_RPDO_process+0x3c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f993 3000 	ldrsb.w	r3, [r3]
 80049f0:	2b05      	cmp	r3, #5
 80049f2:	d006      	beq.n	8004a02 <CO_RPDO_process+0x4a>
    {
        CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	649a      	str	r2, [r3, #72]	; 0x48
                ext->pODFunc(&ODF_arg);
            }
        }
#endif
    }
}
 8004a00:	e0dc      	b.n	8004bbc <CO_RPDO_process+0x204>
    else if(process_rpdo)
 8004a02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80d8 	beq.w	8004bbc <CO_RPDO_process+0x204>
        bool_t update = false;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        uint8_t bufNo = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        if(RPDO->SYNC && RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d03c      	beq.n	8004a9a <CO_RPDO_process+0xe2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d037      	beq.n	8004a9a <CO_RPDO_process+0xe2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	7f1b      	ldrb	r3, [r3, #28]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d132      	bne.n	8004a9a <CO_RPDO_process+0xe2>
            bufNo = 1;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        while(CO_FLAG_READ(RPDO->CANrxNew[bufNo])){
 8004a3a:	e02e      	b.n	8004a9a <CO_RPDO_process+0xe2>
            i = RPDO->dataLength;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	7e9b      	ldrb	r3, [r3, #26]
 8004a40:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
 8004a44:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004a48:	3309      	adds	r3, #9
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	3304      	adds	r3, #4
 8004a52:	64fb      	str	r3, [r7, #76]	; 0x4c
            ppODdataByte = &RPDO->mapPointer[0];
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	331c      	adds	r3, #28
 8004a58:	64bb      	str	r3, [r7, #72]	; 0x48
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8004a5a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	3310      	adds	r3, #16
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	2200      	movs	r2, #0
 8004a68:	605a      	str	r2, [r3, #4]
            for(; i>0; i--) {
 8004a6a:	e00f      	b.n	8004a8c <CO_RPDO_process+0xd4>
                **(ppODdataByte++) = *(pPDOdataByte++);
 8004a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a74:	1d11      	adds	r1, r2, #4
 8004a76:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
 8004a7e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004a8c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	dceb      	bgt.n	8004a6c <CO_RPDO_process+0xb4>
            update = true;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        while(CO_FLAG_READ(RPDO->CANrxNew[bufNo])){
 8004a9a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	3310      	adds	r3, #16
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1c7      	bne.n	8004a3c <CO_RPDO_process+0x84>
        if(update && RPDO->SDO->ODExtensions){
 8004aac:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 8083 	beq.w	8004bbc <CO_RPDO_process+0x204>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d07c      	beq.n	8004bbc <CO_RPDO_process+0x204>
            const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
            CO_SDO_t *pSDO = RPDO->SDO;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
            for(i=RPDO->RPDOMapPar->numberOfMappedObjects; i>0; i--){
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ada:	e06b      	b.n	8004bb4 <CO_RPDO_process+0x1fc>
                uint32_t map = *(pMap++);
 8004adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ade:	1d1a      	adds	r2, r3, #4
 8004ae0:	643a      	str	r2, [r7, #64]	; 0x40
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	63bb      	str	r3, [r7, #56]	; 0x38
                uint16_t index = (uint16_t)(map>>16);
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	0c1b      	lsrs	r3, r3, #16
 8004aea:	86fb      	strh	r3, [r7, #54]	; 0x36
                uint8_t subIndex = (uint8_t)(map>>8);
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                uint16_t entryNo = CO_OD_find(pSDO, index);
 8004af4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004af6:	4619      	mov	r1, r3
 8004af8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004afa:	f000 fb8f 	bl	800521c <CO_OD_find>
 8004afe:	4603      	mov	r3, r0
 8004b00:	867b      	strh	r3, [r7, #50]	; 0x32
                if ( entryNo == 0xFFFF ) continue;
 8004b02:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d049      	beq.n	8004ba0 <CO_RPDO_process+0x1e8>
                CO_OD_extension_t *ext = &pSDO->ODExtensions[entryNo];
 8004b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0e:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8004b12:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004b14:	4613      	mov	r3, r2
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                if( ext->pODFunc == NULL) continue;
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d03d      	beq.n	8004ba4 <CO_RPDO_process+0x1ec>
                memset((void*)&ODF_arg, 0, sizeof(CO_ODF_arg_t));
 8004b28:	f107 0308 	add.w	r3, r7, #8
 8004b2c:	2224      	movs	r2, #36	; 0x24
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f012 f853 	bl	8016bdc <memset>
                ODF_arg.reading = false;
 8004b36:	2300      	movs	r3, #0
 8004b38:	77fb      	strb	r3, [r7, #31]
                ODF_arg.index = index;
 8004b3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b3c:	83bb      	strh	r3, [r7, #28]
                ODF_arg.subIndex = subIndex;
 8004b3e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b42:	77bb      	strb	r3, [r7, #30]
                ODF_arg.object = ext->object;
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	60bb      	str	r3, [r7, #8]
                ODF_arg.attribute = CO_OD_getAttribute(pSDO, entryNo, subIndex);
 8004b4a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004b4e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b50:	4619      	mov	r1, r3
 8004b52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b54:	f000 fc0b 	bl	800536e <CO_OD_getAttribute>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	82fb      	strh	r3, [r7, #22]
                ODF_arg.pFlags = CO_OD_getFlagsPointer(pSDO, entryNo, subIndex);
 8004b5c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004b60:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b62:	4619      	mov	r1, r3
 8004b64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b66:	f000 fca3 	bl	80054b0 <CO_OD_getFlagsPointer>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	61bb      	str	r3, [r7, #24]
                ODF_arg.data = CO_OD_getDataPointer(pSDO, entryNo, subIndex); //https://github.com/CANopenNode/CANopenNode/issues/100
 8004b6e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004b72:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b74:	4619      	mov	r1, r3
 8004b76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b78:	f000 fc4d 	bl	8005416 <CO_OD_getDataPointer>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	60fb      	str	r3, [r7, #12]
                ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
 8004b80:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004b84:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b86:	4619      	mov	r1, r3
 8004b88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b8a:	f000 fb9f 	bl	80052cc <CO_OD_getLength>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	82bb      	strh	r3, [r7, #20]
                ext->pODFunc(&ODF_arg);
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f107 0208 	add.w	r2, r7, #8
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4798      	blx	r3
 8004b9e:	e002      	b.n	8004ba6 <CO_RPDO_process+0x1ee>
                if ( entryNo == 0xFFFF ) continue;
 8004ba0:	bf00      	nop
 8004ba2:	e000      	b.n	8004ba6 <CO_RPDO_process+0x1ee>
                if( ext->pODFunc == NULL) continue;
 8004ba4:	bf00      	nop
            for(i=RPDO->RPDOMapPar->numberOfMappedObjects; i>0; i--){
 8004ba6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004bb4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	dc8f      	bgt.n	8004adc <CO_RPDO_process+0x124>
}
 8004bbc:	bf00      	nop
 8004bbe:	3758      	adds	r7, #88	; 0x58
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <CO_TPDO_process>:
void CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        bool_t                  syncWas,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	72fb      	strb	r3, [r7, #11]
    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d204      	bcs.n	8004be8 <CO_TPDO_process+0x24>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	e000      	b.n	8004bea <CO_TPDO_process+0x26>
 8004be8:	2300      	movs	r3, #0
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	63d3      	str	r3, [r2, #60]	; 0x3c
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d204      	bcs.n	8004c02 <CO_TPDO_process+0x3e>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	e000      	b.n	8004c04 <CO_TPDO_process+0x40>
 8004c02:	2300      	movs	r3, #0
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	6413      	str	r3, [r2, #64]	; 0x40

    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	7e5b      	ldrb	r3, [r3, #25]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80b2 	beq.w	8004d76 <CO_TPDO_process+0x1b2>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f993 3000 	ldrsb.w	r3, [r3]
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	f040 80ab 	bne.w	8004d76 <CO_TPDO_process+0x1b2>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	7a1b      	ldrb	r3, [r3, #8]
 8004c26:	2bfc      	cmp	r3, #252	; 0xfc
 8004c28:	d94c      	bls.n	8004cc4 <CO_TPDO_process+0x100>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d125      	bne.n	8004c7e <CO_TPDO_process+0xba>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	7edb      	ldrb	r3, [r3, #27]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d108      	bne.n	8004c4c <CO_TPDO_process+0x88>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	89db      	ldrh	r3, [r3, #14]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01c      	beq.n	8004c7e <CO_TPDO_process+0xba>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d118      	bne.n	8004c7e <CO_TPDO_process+0xba>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7ff fdfb 	bl	8004848 <CO_TPDOsend>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d112      	bne.n	8004c7e <CO_TPDO_process+0xba>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	895b      	ldrh	r3, [r3, #10]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	2364      	movs	r3, #100	; 0x64
 8004c62:	fb03 f202 	mul.w	r2, r3, r2
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	63da      	str	r2, [r3, #60]	; 0x3c
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	89db      	ldrh	r3, [r3, #14]
 8004c70:	461a      	mov	r2, r3
 8004c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c76:	fb03 f202 	mul.w	r2, r3, r2
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
                }
            }
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_TIMERNEXT
            if(timerNext_us != NULL){
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8085 	beq.w	8004d90 <CO_TPDO_process+0x1cc>
                if(TPDO->sendRequest && *timerNext_us > TPDO->inhibitTimer){
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	7edb      	ldrb	r3, [r3, #27]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <CO_TPDO_process+0xe0>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d904      	bls.n	8004ca4 <CO_TPDO_process+0xe0>
                    *timerNext_us = TPDO->inhibitTimer; /* Schedule for just beyond inhibit window */
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	601a      	str	r2, [r3, #0]
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004ca2:	e075      	b.n	8004d90 <CO_TPDO_process+0x1cc>
                }else if(TPDO->TPDOCommPar->eventTimer && *timerNext_us > TPDO->eventTimer){
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	89db      	ldrh	r3, [r3, #14]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d070      	beq.n	8004d90 <CO_TPDO_process+0x1cc>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d96a      	bls.n	8004d90 <CO_TPDO_process+0x1cc>
                    *timerNext_us = TPDO->eventTimer; /* Schedule for next maximum event time */
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	601a      	str	r2, [r3, #0]
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004cc2:	e065      	b.n	8004d90 <CO_TPDO_process+0x1cc>
#endif
        }

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        /* Synchronous PDOs */
        else if(TPDO->SYNC && syncWas){
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d061      	beq.n	8004d90 <CO_TPDO_process+0x1cc>
 8004ccc:	7afb      	ldrb	r3, [r7, #11]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d05e      	beq.n	8004d90 <CO_TPDO_process+0x1cc>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	7a1b      	ldrb	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d107      	bne.n	8004cec <CO_TPDO_process+0x128>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	7edb      	ldrb	r3, [r3, #27]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d055      	beq.n	8004d90 <CO_TPDO_process+0x1cc>
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7ff fdaf 	bl	8004848 <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004cea:	e051      	b.n	8004d90 <CO_TPDO_process+0x1cc>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cf2:	2bff      	cmp	r3, #255	; 0xff
 8004cf4:	d114      	bne.n	8004d20 <CO_TPDO_process+0x15c>
                    if(TPDO->SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfa:	7d1b      	ldrb	r3, [r3, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d009      	beq.n	8004d14 <CO_TPDO_process+0x150>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	7c1b      	ldrb	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d004      	beq.n	8004d14 <CO_TPDO_process+0x150>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	22fe      	movs	r2, #254	; 0xfe
 8004d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d12:	e005      	b.n	8004d20 <CO_TPDO_process+0x15c>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	7a1a      	ldrb	r2, [r3, #8]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d26:	2bfe      	cmp	r3, #254	; 0xfe
 8004d28:	d10e      	bne.n	8004d48 <CO_TPDO_process+0x184>
                    if(TPDO->SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2e:	7f5a      	ldrb	r2, [r3, #29]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	7c1b      	ldrb	r3, [r3, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d12a      	bne.n	8004d90 <CO_TPDO_process+0x1cc>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	7a1a      	ldrb	r2, [r3, #8]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004d46:	e023      	b.n	8004d90 <CO_TPDO_process+0x1cc>
                        //CO_TPDOsend(TPDO);
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d116      	bne.n	8004d90 <CO_TPDO_process+0x1cc>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	7a1a      	ldrb	r2, [r3, #8]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                    CO_TPDOsend(TPDO);
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f7ff fd6a 	bl	8004848 <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004d74:	e00c      	b.n	8004d90 <CO_TPDO_process+0x1cc>
#endif

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	7a1b      	ldrb	r3, [r3, #8]
 8004d7c:	2bfd      	cmp	r3, #253	; 0xfd
 8004d7e:	d903      	bls.n	8004d88 <CO_TPDO_process+0x1c4>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	76da      	strb	r2, [r3, #27]
        else                                         TPDO->sendRequest = 0;
    }
}
 8004d86:	e004      	b.n	8004d92 <CO_TPDO_process+0x1ce>
        else                                         TPDO->sendRequest = 0;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	76da      	strb	r2, [r3, #27]
}
 8004d8e:	e000      	b.n	8004d92 <CO_TPDO_process+0x1ce>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004d90:	bf00      	nop
}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8004da6:	60fb      	str	r3, [r7, #12]
    return value;
 8004da8:	68fb      	ldr	r3, [r7, #12]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <CO_setUint32>:
static inline void CO_setUint32(uint8_t data[], const uint32_t value){
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
 8004dc0:	683a      	ldr	r2, [r7, #0]
    memcpy(data, &value, sizeof(value));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <CO_SDO_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg);
static void CO_SDO_receive(void *object, void *msg){
 8004dd2:	b590      	push	{r4, r7, lr}
 8004dd4:	b087      	sub	sp, #28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de2:	75bb      	strb	r3, [r7, #22]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	3321      	adds	r3, #33	; 0x21
 8004de8:	613b      	str	r3, [r7, #16]

    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	60fb      	str	r3, [r7, #12]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((DLC == 8U) && (!CO_FLAG_READ(SDO->CANrxNew))){
 8004dee:	7dbb      	ldrb	r3, [r7, #22]
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	f040 80b9 	bne.w	8004f68 <CO_SDO_receive+0x196>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 80b3 	bne.w	8004f68 <CO_SDO_receive+0x196>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8004e08:	2ba5      	cmp	r3, #165	; 0xa5
 8004e0a:	d024      	beq.n	8004e56 <CO_SDO_receive+0x84>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = data[0];
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = data[1];
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	785a      	ldrb	r2, [r3, #1]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = data[2];
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	789a      	ldrb	r2, [r3, #2]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = data[3];
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	78da      	ldrb	r2, [r3, #3]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = data[4];
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	791a      	ldrb	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = data[5];
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	795a      	ldrb	r2, [r3, #5]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = data[6];
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	799a      	ldrb	r2, [r3, #6]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = data[7];
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	79da      	ldrb	r2, [r3, #7]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	71da      	strb	r2, [r3, #7]

            CO_FLAG_SET(SDO->CANrxNew);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
 8004e54:	e076      	b.n	8004f44 <CO_SDO_receive+0x172>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = data[0];
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	781a      	ldrb	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e66:	72fb      	strb	r3, [r7, #11]
            SDO->timeoutTimer = 0;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
            /* clear timeout in sub-block transfer indication if set before */
            if (SDO->timeoutSubblockDownolad) {
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <CO_SDO_receive+0xb0>
                SDO->timeoutSubblockDownolad = false;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
            }

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
 8004e82:	7afa      	ldrb	r2, [r7, #11]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d146      	bne.n	8004f1e <CO_SDO_receive+0x14c>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8004e96:	3301      	adds	r3, #1
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a

                /* copy data */
                for(i=1; i<8; i++) {
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	75fb      	strb	r3, [r7, #23]
 8004ea4:	e022      	b.n	8004eec <CO_SDO_receive+0x11a>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	441a      	add	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8004eb8:	1c58      	adds	r0, r3, #1
 8004eba:	b284      	uxth	r4, r0
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f8a0 4720 	strh.w	r4, [r0, #1824]	; 0x720
 8004ec2:	440b      	add	r3, r1
 8004ec4:	7812      	ldrb	r2, [r2, #0]
 8004ec6:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_CONFIG_SDO_BUFFER_SIZE) {
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8004ece:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004ed2:	d308      	bcc.n	8004ee6 <CO_SDO_receive+0x114>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	22a6      	movs	r2, #166	; 0xa6
 8004ed8:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                        CO_FLAG_SET(SDO->CANrxNew);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
                        break;
 8004ee4:	e005      	b.n	8004ef2 <CO_SDO_receive+0x120>
                for(i=1; i<8; i++) {
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	75fb      	strb	r3, [r7, #23]
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
 8004eee:	2b07      	cmp	r3, #7
 8004ef0:	d9d9      	bls.n	8004ea6 <CO_SDO_receive+0xd4>
                    }
                }

                /* break reception if last segment, block ends or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	b25b      	sxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	db07      	blt.n	8004f0c <CO_SDO_receive+0x13a>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 274a 	ldrb.w	r2, [r3, #1866]	; 0x74a
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d31b      	bcc.n	8004f44 <CO_SDO_receive+0x172>
                	SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	22a6      	movs	r2, #166	; 0xa6
 8004f10:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                    CO_FLAG_SET(SDO->CANrxNew);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
 8004f1c:	e012      	b.n	8004f44 <CO_SDO_receive+0x172>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8004f24:	7afa      	ldrb	r2, [r7, #11]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d00c      	beq.n	8004f44 <CO_SDO_receive+0x172>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <CO_SDO_receive+0x172>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is wrong, send response without resetting sequence */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP_2;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	22a7      	movs	r2, #167	; 0xa7
 8004f38:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                CO_FLAG_SET(SDO->CANrxNew);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            }
        }

#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_CALLBACK_PRE
        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(CO_FLAG_READ(SDO->CANrxNew) && SDO->pFunctSignalPre != NULL) {
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00c      	beq.n	8004f68 <CO_SDO_receive+0x196>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <CO_SDO_receive+0x196>
            SDO->pFunctSignalPre(SDO->functSignalObjectPre);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	f8d2 2764 	ldr.w	r2, [r2, #1892]	; 0x764
 8004f64:	4610      	mov	r0, r2
 8004f66:	4798      	blx	r3
        }
#endif
    }
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd90      	pop	{r4, r7, pc}

08004f70 <CO_ODF_1200>:
 * from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff ff07 	bl	8004d9a <CO_getUint32>
 8004f8c:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	7ddb      	ldrb	r3, [r3, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00e      	beq.n	8004fb4 <CO_ODF_1200+0x44>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7d9b      	ldrb	r3, [r3, #22]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <CO_ODF_1200+0x44>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	440b      	add	r3, r1
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f7ff ff01 	bl	8004db6 <CO_setUint32>
    }

    return ret;
 8004fb4:	697b      	ldr	r3, [r7, #20]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <CO_SDO_init>:
        uint16_t                SDOtimeoutTime_ms,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af04      	add	r7, sp, #16
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	807b      	strh	r3, [r7, #2]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SDO==NULL || CANdevRx==NULL || CANdevTx==NULL){
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <CO_SDO_init+0x24>
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <CO_SDO_init+0x24>
 8004fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <CO_SDO_init+0x2a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe8:	e0b8      	b.n	800515c <CO_SDO_init+0x19c>
    }

    /* configure own object dictionary */
    if(parentSDO == NULL){
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d13b      	bne.n	8005068 <CO_SDO_init+0xa8>
        uint16_t i;

        SDO->ownOD = true;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
        SDO->OD = OD;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffc:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        SDO->ODSize = ODSize;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005004:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718
        SDO->ODExtensions = ODExtensions;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800500c:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
 8005010:	2300      	movs	r3, #0
 8005012:	82bb      	strh	r3, [r7, #20]
 8005014:	e023      	b.n	800505e <CO_SDO_init+0x9e>
            SDO->ODExtensions[i].pODFunc = NULL;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 800501c:	8aba      	ldrh	r2, [r7, #20]
 800501e:	4613      	mov	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8005032:	8aba      	ldrh	r2, [r7, #20]
 8005034:	4613      	mov	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	2200      	movs	r2, #0
 8005040:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8005048:	8aba      	ldrh	r2, [r7, #20]
 800504a:	4613      	mov	r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	2200      	movs	r2, #0
 8005056:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
 8005058:	8abb      	ldrh	r3, [r7, #20]
 800505a:	3301      	adds	r3, #1
 800505c:	82bb      	strh	r3, [r7, #20]
 800505e:	8aba      	ldrh	r2, [r7, #20]
 8005060:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005062:	429a      	cmp	r2, r3
 8005064:	d3d7      	bcc.n	8005016 <CO_SDO_init+0x56>
 8005066:	e015      	b.n	8005094 <CO_SDO_init+0xd4>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
        SDO->OD = parentSDO->OD;
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	f8d3 2714 	ldr.w	r2, [r3, #1812]	; 0x714
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        SDO->ODSize = parentSDO->ODSize;
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	f8b3 2718 	ldrh.w	r2, [r3, #1816]	; 0x718
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718
        SDO->ODExtensions = parentSDO->ODExtensions;
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800509a:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 800509e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050a4:	fb03 f202 	mul.w	r2, r3, r2
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
    SDO->state = CO_SDO_ST_IDLE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
    CO_FLAG_CLEAR(SDO->CANrxNew);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_CALLBACK_PRE
    SDO->pFunctSignalPre = NULL;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
    SDO->functSignalObjectPre = NULL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
#endif

    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
 80050ce:	887b      	ldrh	r3, [r7, #2]
 80050d0:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80050d4:	d10b      	bne.n	80050ee <CO_SDO_init+0x12e>
        CO_OD_configure(SDO, ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 80050dc:	8879      	ldrh	r1, [r7, #2]
 80050de:	2200      	movs	r2, #0
 80050e0:	9201      	str	r2, [sp, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	9200      	str	r2, [sp, #0]
 80050e6:	4a1f      	ldr	r2, [pc, #124]	; (8005164 <CO_SDO_init+0x1a4>)
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f83f 	bl	800516c <CO_OD_configure>
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	db02      	blt.n	80050fa <CO_SDO_init+0x13a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	da03      	bge.n	8005102 <CO_SDO_init+0x142>
        // SDO is invalid
        COB_IDClientToServer = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]
        COB_IDServerToClient = 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	607b      	str	r3, [r7, #4]
    }
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	b29a      	uxth	r2, r3
 8005106:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8005108:	4b17      	ldr	r3, [pc, #92]	; (8005168 <CO_SDO_init+0x1a8>)
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	2300      	movs	r3, #0
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800511a:	f004 f999 	bl	8009450 <CO_CANrxBufferInit>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */

    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005126:	f8c3 2768 	str.w	r2, [r3, #1896]	; 0x768
    SDO->CANtxBuff = CO_CANtxBufferInit(
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	b29a      	uxth	r2, r3
 800512e:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8005132:	2300      	movs	r3, #0
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	2308      	movs	r3, #8
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	2300      	movs	r3, #0
 800513c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800513e:	f004 f9dd 	bl	80094fc <CO_CANtxBufferInit>
 8005142:	4602      	mov	r2, r0
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8c3 276c 	str.w	r2, [r3, #1900]	; 0x76c
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <CO_SDO_init+0x198>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005154:	23ff      	movs	r3, #255	; 0xff
 8005156:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8005158:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	08004f71 	.word	0x08004f71
 8005168:	08004dd3 	.word	0x08004dd3

0800516c <CO_OD_configure>:
        uint16_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	460b      	mov	r3, r1
 800517a:	817b      	strh	r3, [r7, #10]
    uint16_t entryNo;

    entryNo = CO_OD_find(SDO, index);
 800517c:	897b      	ldrh	r3, [r7, #10]
 800517e:	4619      	mov	r1, r3
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f84b 	bl	800521c <CO_OD_find>
 8005186:	4603      	mov	r3, r0
 8005188:	83bb      	strh	r3, [r7, #28]
    if(entryNo < 0xFFFFU){
 800518a:	8bbb      	ldrh	r3, [r7, #28]
 800518c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005190:	4293      	cmp	r3, r2
 8005192:	d03f      	beq.n	8005214 <CO_OD_configure+0xa8>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 800519a:	8bba      	ldrh	r2, [r7, #28]
 800519c:	4613      	mov	r3, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	61bb      	str	r3, [r7, #24]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 80051ae:	8bba      	ldrh	r2, [r7, #28]
 80051b0:	4613      	mov	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	789b      	ldrb	r3, [r3, #2]
 80051bc:	75fb      	strb	r3, [r7, #23]

        ext->pODFunc = pODFunc;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	601a      	str	r2, [r3, #0]
        ext->object = object;
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01d      	beq.n	800520c <CO_OD_configure+0xa0>
 80051d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d019      	beq.n	800520c <CO_OD_configure+0xa0>
 80051d8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d114      	bne.n	800520c <CO_OD_configure+0xa0>
            uint16_t i;
            ext->flags = flags;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e6:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
 80051e8:	2300      	movs	r3, #0
 80051ea:	83fb      	strh	r3, [r7, #30]
 80051ec:	e008      	b.n	8005200 <CO_OD_configure+0x94>
                ext->flags[i] = 0U;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	8bfb      	ldrh	r3, [r7, #30]
 80051f4:	4413      	add	r3, r2
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
 80051fa:	8bfb      	ldrh	r3, [r7, #30]
 80051fc:	3301      	adds	r3, #1
 80051fe:	83fb      	strh	r3, [r7, #30]
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	b29b      	uxth	r3, r3
 8005204:	8bfa      	ldrh	r2, [r7, #30]
 8005206:	429a      	cmp	r2, r3
 8005208:	d9f1      	bls.n	80051ee <CO_OD_configure+0x82>
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 800520a:	e003      	b.n	8005214 <CO_OD_configure+0xa8>
            }
        }
        else{
            ext->flags = NULL;
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2200      	movs	r2, #0
 8005210:	609a      	str	r2, [r3, #8]
        }
    }
}
 8005212:	e7ff      	b.n	8005214 <CO_OD_configure+0xa8>
 8005214:	bf00      	nop
 8005216:	3720      	adds	r7, #32
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <CO_OD_find>:


/******************************************************************************/
uint16_t CO_OD_find(CO_SDO_t *SDO, uint16_t index){
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	807b      	strh	r3, [r7, #2]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint16_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	82fb      	strh	r3, [r7, #22]
    max = SDO->ODSize - 1U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8b3 3718 	ldrh.w	r3, [r3, #1816]	; 0x718
 8005232:	3b01      	subs	r3, #1
 8005234:	82bb      	strh	r3, [r7, #20]
    while(min < max){
 8005236:	e028      	b.n	800528a <CO_OD_find+0x6e>
        cur = (min + max) / 2;
 8005238:	8afa      	ldrh	r2, [r7, #22]
 800523a:	8abb      	ldrh	r3, [r7, #20]
 800523c:	4413      	add	r3, r2
 800523e:	0fda      	lsrs	r2, r3, #31
 8005240:	4413      	add	r3, r2
 8005242:	105b      	asrs	r3, r3, #1
 8005244:	81fb      	strh	r3, [r7, #14]
        object = &SDO->OD[cur];
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 800524c:	89fa      	ldrh	r2, [r7, #14]
 800524e:	4613      	mov	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	887a      	ldrh	r2, [r7, #2]
 8005260:	429a      	cmp	r2, r3
 8005262:	d101      	bne.n	8005268 <CO_OD_find+0x4c>
            return cur;
 8005264:	89fb      	ldrh	r3, [r7, #14]
 8005266:	e02b      	b.n	80052c0 <CO_OD_find+0xa4>
        }
        if(index < object->index){
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	887a      	ldrh	r2, [r7, #2]
 800526e:	429a      	cmp	r2, r3
 8005270:	d208      	bcs.n	8005284 <CO_OD_find+0x68>
            max = cur;
 8005272:	89fb      	ldrh	r3, [r7, #14]
 8005274:	82bb      	strh	r3, [r7, #20]
            if(max) max--;
 8005276:	8abb      	ldrh	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d006      	beq.n	800528a <CO_OD_find+0x6e>
 800527c:	8abb      	ldrh	r3, [r7, #20]
 800527e:	3b01      	subs	r3, #1
 8005280:	82bb      	strh	r3, [r7, #20]
 8005282:	e002      	b.n	800528a <CO_OD_find+0x6e>
        }
        else
            min = cur + 1U;
 8005284:	89fb      	ldrh	r3, [r7, #14]
 8005286:	3301      	adds	r3, #1
 8005288:	82fb      	strh	r3, [r7, #22]
    while(min < max){
 800528a:	8afa      	ldrh	r2, [r7, #22]
 800528c:	8abb      	ldrh	r3, [r7, #20]
 800528e:	429a      	cmp	r2, r3
 8005290:	d3d2      	bcc.n	8005238 <CO_OD_find+0x1c>
    }

    if(min == max){
 8005292:	8afa      	ldrh	r2, [r7, #22]
 8005294:	8abb      	ldrh	r3, [r7, #20]
 8005296:	429a      	cmp	r2, r3
 8005298:	d110      	bne.n	80052bc <CO_OD_find+0xa0>
        object = &SDO->OD[min];
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 80052a0:	8afa      	ldrh	r2, [r7, #22]
 80052a2:	4613      	mov	r3, r2
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	887a      	ldrh	r2, [r7, #2]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d101      	bne.n	80052bc <CO_OD_find+0xa0>
            return min;
 80052b8:	8afb      	ldrh	r3, [r7, #22]
 80052ba:	e001      	b.n	80052c0 <CO_OD_find+0xa4>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
 80052bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <CO_OD_getLength>:


/******************************************************************************/
uint16_t CO_OD_getLength(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	807b      	strh	r3, [r7, #2]
 80052d8:	4613      	mov	r3, r2
 80052da:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 80052e2:	887a      	ldrh	r2, [r7, #2]
 80052e4:	4613      	mov	r3, r2
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 80052f0:	887b      	ldrh	r3, [r7, #2]
 80052f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d101      	bne.n	80052fe <CO_OD_getLength+0x32>
        return 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e031      	b.n	8005362 <CO_OD_getLength+0x96>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	789b      	ldrb	r3, [r3, #2]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <CO_OD_getLength+0x4e>
        if(object->pData == 0){ /* data type is domain */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <CO_OD_getLength+0x48>
            return CO_CONFIG_SDO_BUFFER_SIZE;
 800530e:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8005312:	e026      	b.n	8005362 <CO_OD_getLength+0x96>
        }
        else{
            return object->length;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	88db      	ldrh	r3, [r3, #6]
 8005318:	e023      	b.n	8005362 <CO_OD_getLength+0x96>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	889b      	ldrh	r3, [r3, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00e      	beq.n	8005340 <CO_OD_getLength+0x74>
        if(subIndex == 0U){
 8005322:	787b      	ldrb	r3, [r7, #1]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <CO_OD_getLength+0x60>
            return 1U;
 8005328:	2301      	movs	r3, #1
 800532a:	e01a      	b.n	8005362 <CO_OD_getLength+0x96>
        }
        else if(object->pData == 0){
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <CO_OD_getLength+0x6e>
            /* data type is domain */
            return CO_CONFIG_SDO_BUFFER_SIZE;
 8005334:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8005338:	e013      	b.n	8005362 <CO_OD_getLength+0x96>
        }
        else{
            return object->length;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	88db      	ldrh	r3, [r3, #6]
 800533e:	e010      	b.n	8005362 <CO_OD_getLength+0x96>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	787b      	ldrb	r3, [r7, #1]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4413      	add	r3, r2
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d102      	bne.n	8005356 <CO_OD_getLength+0x8a>
            /* data type is domain */
            return CO_CONFIG_SDO_BUFFER_SIZE;
 8005350:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8005354:	e005      	b.n	8005362 <CO_OD_getLength+0x96>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	787b      	ldrb	r3, [r7, #1]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	88db      	ldrh	r3, [r3, #6]
        }
    }
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <CO_OD_getAttribute>:


/******************************************************************************/
uint16_t CO_OD_getAttribute(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	807b      	strh	r3, [r7, #2]
 800537a:	4613      	mov	r3, r2
 800537c:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 8005384:	887a      	ldrh	r2, [r7, #2]
 8005386:	4613      	mov	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	60bb      	str	r3, [r7, #8]

    if(entryNo == 0xFFFFU){
 8005392:	887b      	ldrh	r3, [r7, #2]
 8005394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005398:	4293      	cmp	r3, r2
 800539a:	d101      	bne.n	80053a0 <CO_OD_getAttribute+0x32>
        return 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	e034      	b.n	800540a <CO_OD_getAttribute+0x9c>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	789b      	ldrb	r3, [r3, #2]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <CO_OD_getAttribute+0x40>
        return object->attribute;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	889b      	ldrh	r3, [r3, #4]
 80053ac:	e02d      	b.n	800540a <CO_OD_getAttribute+0x9c>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	889b      	ldrh	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d023      	beq.n	80053fe <CO_OD_getAttribute+0x90>
        bool_t exception_1003 = false;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]
        uint16_t attr = object->attribute;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	889b      	ldrh	r3, [r3, #4]
 80053be:	81bb      	strh	r3, [r7, #12]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d108      	bne.n	80053de <CO_OD_getAttribute+0x70>
 80053cc:	787b      	ldrb	r3, [r7, #1]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d105      	bne.n	80053de <CO_OD_getAttribute+0x70>
            exception_1003 = true;
 80053d2:	2301      	movs	r3, #1
 80053d4:	73fb      	strb	r3, [r7, #15]
            attr |= CO_ODA_WRITEABLE;
 80053d6:	89bb      	ldrh	r3, [r7, #12]
 80053d8:	f043 0308 	orr.w	r3, r3, #8
 80053dc:	81bb      	strh	r3, [r7, #12]
        }

        if(subIndex == 0U  && !exception_1003){
 80053de:	787b      	ldrb	r3, [r7, #1]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <CO_OD_getAttribute+0x8c>
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d107      	bne.n	80053fa <CO_OD_getAttribute+0x8c>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
 80053ea:	89bb      	ldrh	r3, [r7, #12]
 80053ec:	f023 0318 	bic.w	r3, r3, #24
 80053f0:	81bb      	strh	r3, [r7, #12]
            attr |= CO_ODA_READABLE;
 80053f2:	89bb      	ldrh	r3, [r7, #12]
 80053f4:	f043 0304 	orr.w	r3, r3, #4
 80053f8:	81bb      	strh	r3, [r7, #12]
        }
        return attr;
 80053fa:	89bb      	ldrh	r3, [r7, #12]
 80053fc:	e005      	b.n	800540a <CO_OD_getAttribute+0x9c>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	787b      	ldrb	r3, [r7, #1]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	889b      	ldrh	r3, [r3, #4]
    }
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <CO_OD_getDataPointer>:


/******************************************************************************/
void* CO_OD_getDataPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	460b      	mov	r3, r1
 8005420:	807b      	strh	r3, [r7, #2]
 8005422:	4613      	mov	r3, r2
 8005424:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 800542c:	887a      	ldrh	r2, [r7, #2]
 800542e:	4613      	mov	r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 800543a:	887b      	ldrh	r3, [r7, #2]
 800543c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005440:	4293      	cmp	r3, r2
 8005442:	d101      	bne.n	8005448 <CO_OD_getDataPointer+0x32>
        return 0;
 8005444:	2300      	movs	r3, #0
 8005446:	e02d      	b.n	80054a4 <CO_OD_getDataPointer+0x8e>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	789b      	ldrb	r3, [r3, #2]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <CO_OD_getDataPointer+0x40>
        return object->pData;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	e026      	b.n	80054a4 <CO_OD_getDataPointer+0x8e>
    }
    else if(object->maxSubIndex < subIndex){
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	789b      	ldrb	r3, [r3, #2]
 800545a:	787a      	ldrb	r2, [r7, #1]
 800545c:	429a      	cmp	r2, r3
 800545e:	d901      	bls.n	8005464 <CO_OD_getDataPointer+0x4e>
        /* Object type Array/Record, request is out of bounds */
        return 0;
 8005460:	2300      	movs	r3, #0
 8005462:	e01f      	b.n	80054a4 <CO_OD_getDataPointer+0x8e>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	889b      	ldrh	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d015      	beq.n	8005498 <CO_OD_getDataPointer+0x82>
        if(subIndex==0){
 800546c:	787b      	ldrb	r3, [r7, #1]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d102      	bne.n	8005478 <CO_OD_getDataPointer+0x62>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3302      	adds	r3, #2
 8005476:	e015      	b.n	80054a4 <CO_OD_getDataPointer+0x8e>
        }
        else if(object->pData == 0){
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <CO_OD_getDataPointer+0x6e>
            /* data type is domain */
            return 0;
 8005480:	2300      	movs	r3, #0
 8005482:	e00f      	b.n	80054a4 <CO_OD_getDataPointer+0x8e>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	787a      	ldrb	r2, [r7, #1]
 800548a:	3a01      	subs	r2, #1
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	88c9      	ldrh	r1, [r1, #6]
 8005490:	fb01 f202 	mul.w	r2, r1, r2
 8005494:	4413      	add	r3, r2
 8005496:	e005      	b.n	80054a4 <CO_OD_getDataPointer+0x8e>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	787b      	ldrb	r3, [r7, #1]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	681b      	ldr	r3, [r3, #0]
    }
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <CO_OD_getFlagsPointer>:


/******************************************************************************/
uint8_t* CO_OD_getFlagsPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
 80054bc:	4613      	mov	r3, r2
 80054be:	707b      	strb	r3, [r7, #1]
    if(entryNo == 0xFFFF || SDO->ODExtensions == NULL){
 80054c0:	887b      	ldrh	r3, [r7, #2]
 80054c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <CO_OD_getFlagsPointer+0x24>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <CO_OD_getFlagsPointer+0x28>
        return NULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	e013      	b.n	8005500 <CO_OD_getFlagsPointer+0x50>
    }

    CO_OD_extension_t* ext = &SDO->ODExtensions[entryNo];
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 80054de:	887a      	ldrh	r2, [r7, #2]
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	60fb      	str	r3, [r7, #12]
    if (ext->flags == NULL){
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <CO_OD_getFlagsPointer+0x48>
        return NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e003      	b.n	8005500 <CO_OD_getFlagsPointer+0x50>
    }

    return &ext->flags[subIndex];
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	787b      	ldrb	r3, [r7, #1]
 80054fe:	4413      	add	r3, r2
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <CO_SDO_initTransfer>:


/******************************************************************************/
uint32_t CO_SDO_initTransfer(CO_SDO_t *SDO, uint16_t index, uint8_t subIndex){
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	807b      	strh	r3, [r7, #2]
 8005518:	4613      	mov	r3, r2
 800551a:	707b      	strb	r3, [r7, #1]

    SDO->ODF_arg.index = index;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	887a      	ldrh	r2, [r7, #2]
 8005520:	f8a3 2738 	strh.w	r2, [r3, #1848]	; 0x738
    SDO->ODF_arg.subIndex = subIndex;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	787a      	ldrb	r2, [r7, #1]
 8005528:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find(SDO, index);
 800552c:	887b      	ldrh	r3, [r7, #2]
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fe73 	bl	800521c <CO_OD_find>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8a3 2722 	strh.w	r2, [r3, #1826]	; 0x722
    if(SDO->entryNo == 0xFFFFU){
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800554a:	4293      	cmp	r3, r2
 800554c:	d101      	bne.n	8005552 <CO_SDO_initTransfer+0x46>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
 800554e:	4b4e      	ldr	r3, [pc, #312]	; (8005688 <CO_SDO_initTransfer+0x17c>)
 8005550:	e096      	b.n	8005680 <CO_SDO_initTransfer+0x174>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 2714 	ldr.w	r2, [r3, #1812]	; 0x714
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 800555e:	4619      	mov	r1, r3
 8005560:	460b      	mov	r3, r1
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	440b      	add	r3, r1
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	789b      	ldrb	r3, [r3, #2]
 800556c:	787a      	ldrb	r2, [r7, #1]
 800556e:	429a      	cmp	r2, r3
 8005570:	d910      	bls.n	8005594 <CO_SDO_initTransfer+0x88>
            SDO->OD[SDO->entryNo].pData != NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 2714 	ldr.w	r2, [r3, #1812]	; 0x714
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 800557e:	4619      	mov	r1, r3
 8005580:	460b      	mov	r3, r1
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	440b      	add	r3, r1
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	689b      	ldr	r3, [r3, #8]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <CO_SDO_initTransfer+0x88>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
 8005590:	4b3e      	ldr	r3, [pc, #248]	; (800568c <CO_SDO_initTransfer+0x180>)
 8005592:	e075      	b.n	8005680 <CO_SDO_initTransfer+0x174>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO, SDO->entryNo, subIndex);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 800559a:	787a      	ldrb	r2, [r7, #1]
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ff39 	bl	8005416 <CO_OD_getDataPointer>
 80055a4:	4602      	mov	r2, r0
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8c3 272c 	str.w	r2, [r3, #1836]	; 0x72c

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
    if(SDO->ODExtensions){
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d011      	beq.n	80055e2 <CO_SDO_initTransfer+0xd6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 80055ca:	4619      	mov	r1, r3
 80055cc:	460b      	mov	r3, r1
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	440b      	add	r3, r1
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
        SDO->ODF_arg.object = ext->object;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
    }
    SDO->ODF_arg.data = SDO->databuffer;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f103 0208 	add.w	r2, r3, #8
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, subIndex);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 80055f4:	787a      	ldrb	r2, [r7, #1]
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff fe67 	bl	80052cc <CO_OD_getLength>
 80055fe:	4603      	mov	r3, r0
 8005600:	461a      	mov	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO, SDO->entryNo, subIndex);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 800560e:	787a      	ldrb	r2, [r7, #1]
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff feab 	bl	800536e <CO_OD_getAttribute>
 8005618:	4603      	mov	r3, r0
 800561a:	461a      	mov	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8a3 2732 	strh.w	r2, [r3, #1842]	; 0x732
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer(SDO, SDO->entryNo, subIndex);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005628:	787a      	ldrb	r2, [r7, #1]
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff ff3f 	bl	80054b0 <CO_OD_getFlagsPointer>
 8005632:	4602      	mov	r2, r0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    SDO->ODF_arg.firstSegment = true;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
    SDO->ODF_arg.lastSegment = true;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <CO_SDO_initTransfer+0x152>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800565a:	461a      	mov	r2, r3
 800565c:	e000      	b.n	8005660 <CO_SDO_initTransfer+0x154>
 800565e:	2200      	movs	r2, #0
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740

    SDO->ODF_arg.offset = 0U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_CONFIG_SDO_BUFFER_SIZE){
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005674:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005678:	d901      	bls.n	800567e <CO_SDO_initTransfer+0x172>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <CO_SDO_initTransfer+0x184>)
 800567c:	e000      	b.n	8005680 <CO_SDO_initTransfer+0x174>
    }

    return 0U;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	06020000 	.word	0x06020000
 800568c:	06090011 	.word	0x06090011
 8005690:	06040047 	.word	0x06040047

08005694 <CO_SDO_readOD>:


/******************************************************************************/
uint32_t CO_SDO_readOD(CO_SDO_t *SDO, uint16_t SDOBufferSize){
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 80056a6:	61fb      	str	r3, [r7, #28]
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80056ae:	61bb      	str	r3, [r7, #24]
    uint16_t length = SDO->ODF_arg.dataLength;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80056b6:	82fb      	strh	r3, [r7, #22]
    CO_OD_extension_t *ext = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8b3 3732 	ldrh.w	r3, [r3, #1842]	; 0x732
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <CO_SDO_readOD+0x3a>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
 80056ca:	4b30      	ldr	r3, [pc, #192]	; (800578c <CO_SDO_readOD+0xf8>)
 80056cc:	e05a      	b.n	8005784 <CO_SDO_readOD+0xf0>

    /* find extension */
    if(SDO->ODExtensions != NULL){
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <CO_SDO_readOD+0x5e>
        ext = &SDO->ODExtensions[SDO->entryNo];
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 80056e4:	4619      	mov	r1, r3
 80056e6:	460b      	mov	r3, r1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	440b      	add	r3, r1
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
    }

    CO_LOCK_OD();

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00e      	beq.n	8005716 <CO_SDO_readOD+0x82>
        while(length--) *(SDObuffer++) = *(ODdata++);
 80056f8:	e007      	b.n	800570a <CO_SDO_readOD+0x76>
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	1c53      	adds	r3, r2, #1
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	1c59      	adds	r1, r3, #1
 8005704:	61f9      	str	r1, [r7, #28]
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	8afb      	ldrh	r3, [r7, #22]
 800570c:	1e5a      	subs	r2, r3, #1
 800570e:	82fa      	strh	r2, [r7, #22]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f2      	bne.n	80056fa <CO_SDO_readOD+0x66>
 8005714:	e005      	b.n	8005722 <CO_SDO_readOD+0x8e>
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <CO_SDO_readOD+0x8e>
            CO_UNLOCK_OD();
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 800571e:	4b1c      	ldr	r3, [pc, #112]	; (8005790 <CO_SDO_readOD+0xfc>)
 8005720:	e030      	b.n	8005784 <CO_SDO_readOD+0xf0>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
    if(ext->pODFunc != NULL){
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d019      	beq.n	8005766 <CO_SDO_readOD+0xd2>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	f202 7224 	addw	r2, r2, #1828	; 0x724
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
 8005740:	60f8      	str	r0, [r7, #12]
        if(abortCode != 0U){
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <CO_SDO_readOD+0xb8>
            CO_UNLOCK_OD();
            return abortCode;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	e01b      	b.n	8005784 <CO_SDO_readOD+0xf0>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <CO_SDO_readOD+0xce>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800575c:	887a      	ldrh	r2, [r7, #2]
 800575e:	429a      	cmp	r2, r3
 8005760:	d201      	bcs.n	8005766 <CO_SDO_readOD+0xd2>
            CO_UNLOCK_OD();
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 8005762:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <CO_SDO_readOD+0xfc>)
 8005764:	e00e      	b.n	8005784 <CO_SDO_readOD+0xf0>
        }
    }

    CO_UNLOCK_OD();

    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 8005772:	441a      	add	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
    SDO->ODF_arg.firstSegment = false;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	06010001 	.word	0x06010001
 8005790:	06040047 	.word	0x06040047

08005794 <CO_SDO_writeOD>:


/******************************************************************************/
uint32_t CO_SDO_writeOD(CO_SDO_t *SDO, uint16_t length){
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 80057a6:	61fb      	str	r3, [r7, #28]
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80057ae:	61bb      	str	r3, [r7, #24]
    bool_t exception_1003 = false;
 80057b0:	2300      	movs	r3, #0
 80057b2:	75fb      	strb	r3, [r7, #23]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8b3 3732 	ldrh.w	r3, [r3, #1842]	; 0x732
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <CO_SDO_writeOD+0x32>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
 80057c2:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <CO_SDO_writeOD+0x10c>)
 80057c4:	e067      	b.n	8005896 <CO_SDO_writeOD+0x102>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <CO_SDO_writeOD+0x42>
        SDO->ODF_arg.dataLength = length;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	887a      	ldrh	r2, [r7, #2]
 80057d0:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
 80057d4:	e007      	b.n	80057e6 <CO_SDO_writeOD+0x52>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80057dc:	887a      	ldrh	r2, [r7, #2]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d001      	beq.n	80057e6 <CO_SDO_writeOD+0x52>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
 80057e2:	4b30      	ldr	r3, [pc, #192]	; (80058a4 <CO_SDO_writeOD+0x110>)
 80057e4:	e057      	b.n	8005896 <CO_SDO_writeOD+0x102>
#endif

    CO_LOCK_OD();

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
    if(SDO->ODExtensions != NULL){
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01d      	beq.n	8005834 <CO_SDO_writeOD+0xa0>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005804:	4619      	mov	r1, r3
 8005806:	460b      	mov	r3, r1
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	440b      	add	r3, r1
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	613b      	str	r3, [r7, #16]

        if(ext->pODFunc != NULL){
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00c      	beq.n	8005834 <CO_SDO_writeOD+0xa0>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	f202 7224 	addw	r2, r2, #1828	; 0x724
 8005824:	4610      	mov	r0, r2
 8005826:	4798      	blx	r3
 8005828:	60f8      	str	r0, [r7, #12]
            if(abortCode != 0U){
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <CO_SDO_writeOD+0xa0>
                CO_UNLOCK_OD();
                return abortCode;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	e030      	b.n	8005896 <CO_SDO_writeOD+0x102>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 8005840:	441a      	add	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
    SDO->ODF_arg.firstSegment = false;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8b3 3738 	ldrh.w	r3, [r3, #1848]	; 0x738
 8005856:	f241 0203 	movw	r2, #4099	; 0x1003
 800585a:	4293      	cmp	r3, r2
 800585c:	d106      	bne.n	800586c <CO_SDO_writeOD+0xd8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 373a 	ldrb.w	r3, [r3, #1850]	; 0x73a
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <CO_SDO_writeOD+0xd8>
        exception_1003 = true;
 8005868:	2301      	movs	r3, #1
 800586a:	75fb      	strb	r3, [r7, #23]
    }

    /* copy data from SDO buffer to OD if not domain */
    if((ODdata != NULL) && !exception_1003){
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d010      	beq.n	8005894 <CO_SDO_writeOD+0x100>
 8005872:	7dfb      	ldrb	r3, [r7, #23]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10d      	bne.n	8005894 <CO_SDO_writeOD+0x100>
        while(length--){
 8005878:	e007      	b.n	800588a <CO_SDO_writeOD+0xf6>
            *(ODdata++) = *(SDObuffer++);
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	1c53      	adds	r3, r2, #1
 800587e:	61fb      	str	r3, [r7, #28]
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	1c59      	adds	r1, r3, #1
 8005884:	61b9      	str	r1, [r7, #24]
 8005886:	7812      	ldrb	r2, [r2, #0]
 8005888:	701a      	strb	r2, [r3, #0]
        while(length--){
 800588a:	887b      	ldrh	r3, [r7, #2]
 800588c:	1e5a      	subs	r2, r3, #1
 800588e:	807a      	strh	r2, [r7, #2]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f2      	bne.n	800587a <CO_SDO_writeOD+0xe6>
        }
    }

    CO_UNLOCK_OD();

    return 0;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	06010002 	.word	0x06010002
 80058a4:	06070010 	.word	0x06070010

080058a8 <CO_SDO_abort>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO, uint32_t code){
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8b3 2738 	ldrh.w	r2, [r3, #1848]	; 0x738
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8b3 3738 	ldrh.w	r3, [r3, #1848]	; 0x738
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	f892 273a 	ldrb.w	r2, [r2, #1850]	; 0x73a
 80058ec:	721a      	strb	r2, [r3, #8]
    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80058f4:	3309      	adds	r3, #9
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	601a      	str	r2, [r3, #0]
    SDO->state = CO_SDO_ST_IDLE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
    CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 2768 	ldr.w	r2, [r3, #1896]	; 0x768
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f003 fe2f 	bl	800957c <CO_CANsend>
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <CO_SDO_process>:
int8_t CO_SDO_process(
        CO_SDO_t               *SDO,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b093      	sub	sp, #76	; 0x4c
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	460b      	mov	r3, r1
 8005936:	72fb      	strb	r3, [r7, #11]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
 8005938:	2300      	movs	r3, #0
 800593a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t sendResponse = false;
 800593e:	2300      	movs	r3, #0
 8005940:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!CO_FLAG_READ(SDO->CANrxNew))){
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 800594a:	2b00      	cmp	r3, #0
 800594c:	d107      	bne.n	800595e <CO_SDO_process+0x36>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <CO_SDO_process+0x36>
        return 0;
 8005958:	2300      	movs	r3, #0
 800595a:	f001 b911 	b.w	8006b80 <CO_SDO_process+0x1258>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
 800595e:	7afb      	ldrb	r3, [r7, #11]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <CO_SDO_process+0x52>
        SDO->state = CO_SDO_ST_IDLE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
        CO_FLAG_CLEAR(SDO->CANrxNew);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
        return 0;
 8005974:	2300      	movs	r3, #0
 8005976:	f001 b903 	b.w	8006b80 <CO_SDO_process+0x1258>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((CO_FLAG_READ(SDO->CANrxNew)) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005980:	7b5b      	ldrb	r3, [r3, #13]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	f040 80e1 	bne.w	8005b4c <CO_SDO_process+0x224>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <CO_SDO_process+0x78>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 800599a:	2bb6      	cmp	r3, #182	; 0xb6
 800599c:	f040 80d6 	bne.w	8005b4c <CO_SDO_process+0x224>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK) {
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 80059b0:	2bb6      	cmp	r3, #182	; 0xb6
 80059b2:	d005      	beq.n	80059c0 <CO_SDO_process+0x98>
            SDO->timeoutTimer = 0;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
            timeDifference_us = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	607b      	str	r3, [r7, #4]
        }

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80059c6:	2200      	movs	r2, #0
 80059c8:	721a      	strb	r2, [r3, #8]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 80059d0:	7a1b      	ldrb	r3, [r3, #8]
 80059d2:	71d3      	strb	r3, [r2, #7]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80059da:	79d2      	ldrb	r2, [r2, #7]
 80059dc:	719a      	strb	r2, [r3, #6]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 80059e4:	799b      	ldrb	r3, [r3, #6]
 80059e6:	7153      	strb	r3, [r2, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80059ee:	2200      	movs	r2, #0
 80059f0:	731a      	strb	r2, [r3, #12]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 80059f8:	7b1b      	ldrb	r3, [r3, #12]
 80059fa:	72d3      	strb	r3, [r2, #11]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005a02:	7ad2      	ldrb	r2, [r2, #11]
 8005a04:	729a      	strb	r2, [r3, #10]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 8005a0c:	7a9b      	ldrb	r3, [r3, #10]
 8005a0e:	7253      	strb	r3, [r2, #9]

        /* Is abort from client? */
        if((CO_FLAG_READ(SDO->CANrxNew)) && (SDO->CANrxData[0] == CCS_ABORT)){
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00f      	beq.n	8005a3a <CO_SDO_process+0x112>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b80      	cmp	r3, #128	; 0x80
 8005a20:	d10b      	bne.n	8005a3a <CO_SDO_process+0x112>
            SDO->state = CO_SDO_ST_IDLE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            CO_FLAG_CLEAR(SDO->CANrxNew);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            return -1;
 8005a32:	f04f 33ff 	mov.w	r3, #4294967295
 8005a36:	f001 b8a3 	b.w	8006b80 <CO_SDO_process+0x1258>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <CO_SDO_process+0x128>
            state = SDO->state;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005a4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005a4e:	e07d      	b.n	8005b4c <CO_SDO_process+0x224>
        else{
            uint32_t abortCode;
            uint16_t index;

            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
 8005a50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d013      	beq.n	8005a80 <CO_SDO_process+0x158>
 8005a58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d00f      	beq.n	8005a80 <CO_SDO_process+0x158>
 8005a60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a64:	2b06      	cmp	r3, #6
 8005a66:	d00b      	beq.n	8005a80 <CO_SDO_process+0x158>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
 8005a68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	d007      	beq.n	8005a80 <CO_SDO_process+0x158>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005a70:	49b4      	ldr	r1, [pc, #720]	; (8005d44 <CO_SDO_process+0x41c>)
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff ff18 	bl	80058a8 <CO_SDO_abort>
                return -1;
 8005a78:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7c:	f001 b880 	b.w	8006b80 <CO_SDO_process+0x1258>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	789b      	ldrb	r3, [r3, #2]
 8005a84:	87bb      	strh	r3, [r7, #60]	; 0x3c
            index = index << 8 | SDO->CANrxData[1];
 8005a86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	b21a      	sxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	b21b      	sxth	r3, r3
 8005a92:	4313      	orrs	r3, r2
 8005a94:	b21b      	sxth	r3, r3
 8005a96:	87bb      	strh	r3, [r7, #60]	; 0x3c
            abortCode = CO_SDO_initTransfer(SDO, index, SDO->CANrxData[3]);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	78da      	ldrb	r2, [r3, #3]
 8005a9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7ff fd33 	bl	800550c <CO_SDO_initTransfer>
 8005aa6:	63b8      	str	r0, [r7, #56]	; 0x38
            if(abortCode != 0U){
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <CO_SDO_process+0x196>
                CO_SDO_abort(SDO, abortCode);
 8005aae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff fef9 	bl	80058a8 <CO_SDO_abort>
                return -1;
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	f001 b861 	b.w	8006b80 <CO_SDO_process+0x1258>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
 8005abe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d003      	beq.n	8005ace <CO_SDO_process+0x1a6>
 8005ac6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005aca:	2b06      	cmp	r3, #6
 8005acc:	d11a      	bne.n	8005b04 <CO_SDO_process+0x1dc>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8b3 3732 	ldrh.w	r3, [r3, #1842]	; 0x732
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d107      	bne.n	8005aec <CO_SDO_process+0x1c4>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
 8005adc:	499a      	ldr	r1, [pc, #616]	; (8005d48 <CO_SDO_process+0x420>)
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff fee2 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 8005ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae8:	f001 b84a 	b.w	8006b80 <CO_SDO_process+0x1258>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005aec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d103      	bne.n	8005afc <CO_SDO_process+0x1d4>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
 8005af4:	23a1      	movs	r3, #161	; 0xa1
 8005af6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005afa:	e027      	b.n	8005b4c <CO_SDO_process+0x224>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
 8005afc:	23a4      	movs	r3, #164	; 0xa4
 8005afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005b02:	e023      	b.n	8005b4c <CO_SDO_process+0x224>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD(SDO, CO_CONFIG_SDO_BUFFER_SIZE);
 8005b04:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7ff fdc3 	bl	8005694 <CO_SDO_readOD>
 8005b0e:	63b8      	str	r0, [r7, #56]	; 0x38
                if(abortCode != 0U){
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d007      	beq.n	8005b26 <CO_SDO_process+0x1fe>
                    CO_SDO_abort(SDO, abortCode);
 8005b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7ff fec5 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 8005b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b22:	f001 b82d 	b.w	8006b80 <CO_SDO_process+0x1258>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
 8005b26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	d10b      	bne.n	8005b46 <CO_SDO_process+0x21e>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	795b      	ldrb	r3, [r3, #5]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d903      	bls.n	8005b46 <CO_SDO_process+0x21e>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
 8005b3e:	23b4      	movs	r3, #180	; 0xb4
 8005b40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b44:	e002      	b.n	8005b4c <CO_SDO_process+0x224>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
 8005b46:	23b1      	movs	r3, #177	; 0xb1
 8005b48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8d3 2750 	ldr.w	r2, [r3, #1872]	; 0x750
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d207      	bcs.n	8005b6c <CO_SDO_process+0x244>
        SDO->timeoutTimer += timeDifference_us;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8d3 2750 	ldr.w	r2, [r3, #1872]	; 0x750
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
    }
    if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8d3 2750 	ldr.w	r2, [r3, #1872]	; 0x750
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d324      	bcc.n	8005bc6 <CO_SDO_process+0x29e>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (!SDO->timeoutSubblockDownolad) && (!SDO->CANtxBuff->bufferFull)){
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005b82:	2ba5      	cmp	r3, #165	; 0xa5
 8005b84:	d117      	bne.n	8005bb6 <CO_SDO_process+0x28e>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d112      	bne.n	8005bb6 <CO_SDO_process+0x28e>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005b96:	7b5b      	ldrb	r3, [r3, #13]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <CO_SDO_process+0x28e>
            /* set indication timeout in sub-block transfer and reset timeout */
            SDO->timeoutSubblockDownolad = true;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
            SDO->timeoutTimer = 0;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
            /* send response without resetting sequence */
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP_2;
 8005bae:	23a7      	movs	r3, #167	; 0xa7
 8005bb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005bb4:	e01a      	b.n	8005bec <CO_SDO_process+0x2c4>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
 8005bb6:	4965      	ldr	r1, [pc, #404]	; (8005d4c <CO_SDO_process+0x424>)
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff fe75 	bl	80058a8 <CO_SDO_abort>
            return -1;
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc2:	f000 bfdd 	b.w	8006b80 <CO_SDO_process+0x1258>
        }
    }
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
    else if (timerNext_us != NULL) {
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00f      	beq.n	8005bec <CO_SDO_process+0x2c4>
        /* check again after timeout time elapsed */
        uint32_t diff = SDO->SDOtimeoutTime_us - SDO->timeoutTimer;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8d3 274c 	ldr.w	r2, [r3, #1868]	; 0x74c
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8d3 3750 	ldr.w	r3, [r3, #1872]	; 0x750
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	637b      	str	r3, [r7, #52]	; 0x34
        if (*timerNext_us > diff) {
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d202      	bcs.n	8005bec <CO_SDO_process+0x2c4>
            *timerNext_us = diff;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bea:	601a      	str	r2, [r3, #0]
        }
    }
#endif

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
 8005bec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d102      	bne.n	8005bfa <CO_SDO_process+0x2d2>
        return 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f000 bfc3 	b.w	8006b80 <CO_SDO_process+0x1258>
    }

    /* state machine (buffer is freed (CO_FLAG_CLEAR()) at the end) */
    switch(state){
 8005bfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 8799 	beq.w	8006b36 <CO_SDO_process+0x120e>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f2c0 878f 	blt.w	8006b28 <CO_SDO_process+0x1200>
 8005c0a:	2bb7      	cmp	r3, #183	; 0xb7
 8005c0c:	f300 878c 	bgt.w	8006b28 <CO_SDO_process+0x1200>
 8005c10:	2ba1      	cmp	r3, #161	; 0xa1
 8005c12:	f2c0 8789 	blt.w	8006b28 <CO_SDO_process+0x1200>
 8005c16:	3ba1      	subs	r3, #161	; 0xa1
 8005c18:	2b16      	cmp	r3, #22
 8005c1a:	f200 8785 	bhi.w	8006b28 <CO_SDO_process+0x1200>
 8005c1e:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <CO_SDO_process+0x2fc>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c81 	.word	0x08005c81
 8005c28:	08005dd7 	.word	0x08005dd7
 8005c2c:	08006b29 	.word	0x08006b29
 8005c30:	08005f75 	.word	0x08005f75
 8005c34:	08006b3b 	.word	0x08006b3b
 8005c38:	0800605f 	.word	0x0800605f
 8005c3c:	0800605f 	.word	0x0800605f
 8005c40:	080061c9 	.word	0x080061c9
 8005c44:	08006b29 	.word	0x08006b29
 8005c48:	08006b29 	.word	0x08006b29
 8005c4c:	08006b29 	.word	0x08006b29
 8005c50:	08006b29 	.word	0x08006b29
 8005c54:	08006b29 	.word	0x08006b29
 8005c58:	08006b29 	.word	0x08006b29
 8005c5c:	08006b29 	.word	0x08006b29
 8005c60:	08006b29 	.word	0x08006b29
 8005c64:	080062b7 	.word	0x080062b7
 8005c68:	080063b7 	.word	0x080063b7
 8005c6c:	08006b29 	.word	0x08006b29
 8005c70:	08006611 	.word	0x08006611
 8005c74:	08006727 	.word	0x08006727
 8005c78:	08006769 	.word	0x08006769
 8005c7c:	08006af9 	.word	0x08006af9
        uint16_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005c86:	2260      	movs	r2, #96	; 0x60
 8005c88:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	7852      	ldrb	r2, [r2, #1]
 8005c94:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	7892      	ldrb	r2, [r2, #2]
 8005ca0:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	78d2      	ldrb	r2, [r2, #3]
 8005cac:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d05a      	beq.n	8005d70 <CO_SDO_process+0x448>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <CO_SDO_process+0x3b8>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	089b      	lsrs	r3, r3, #2
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f1c3 0304 	rsb	r3, r3, #4
 8005cda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cde:	e004      	b.n	8005cea <CO_SDO_process+0x3c2>
                }
                else{
                    len = SDO->ODF_arg.dataLength;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005ce6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	7912      	ldrb	r2, [r2, #4]
 8005cf4:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	7952      	ldrb	r2, [r2, #5]
 8005d02:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	7992      	ldrb	r2, [r2, #6]
 8005d10:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005d18:	3303      	adds	r3, #3
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	79d2      	ldrb	r2, [r2, #7]
 8005d1e:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD(SDO, len);
 8005d20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d24:	4619      	mov	r1, r3
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f7ff fd34 	bl	8005794 <CO_SDO_writeOD>
 8005d2c:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00d      	beq.n	8005d50 <CO_SDO_process+0x428>
                    CO_SDO_abort(SDO, abortCode);
 8005d34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff fdb6 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d40:	f000 bf1e 	b.w	8006b80 <CO_SDO_process+0x1258>
 8005d44:	05040001 	.word	0x05040001
 8005d48:	06010002 	.word	0x06010002
 8005d4c:	05040000 	.word	0x05040000
                }

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                sendResponse = true;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 86ec 	beq.w	8006b3e <CO_SDO_process+0x1216>
                    *timerNext_us = 0;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
                SDO->bufferOffset = 0U;
                SDO->sequence = 0U;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
 8005d6c:	f000 bee7 	b.w	8006b3e <CO_SDO_process+0x1216>
                if((SDO->CANrxData[0]&0x01) != 0){
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01b      	beq.n	8005db4 <CO_SDO_process+0x48c>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
                    SDO->ODF_arg.dataLengthTotal = lenRx;
 8005d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005d92:	461a      	mov	r2, r3
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d00c      	beq.n	8005db4 <CO_SDO_process+0x48c>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <CO_SDO_process+0x48c>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 8005da4:	49b4      	ldr	r1, [pc, #720]	; (8006078 <CO_SDO_process+0x750>)
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff fd7e 	bl	80058a8 <CO_SDO_abort>
                        return -1;
 8005dac:	f04f 33ff 	mov.w	r3, #4294967295
 8005db0:	f000 bee6 	b.w	8006b80 <CO_SDO_process+0x1258>
                SDO->bufferOffset = 0U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                SDO->sequence = 0U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	22a2      	movs	r2, #162	; 0xa2
 8005dc8:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                sendResponse = true;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 8005dd2:	f000 beb4 	b.w	8006b3e <CO_SDO_process+0x1216>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <CO_SDO_process+0x4ca>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005de2:	49a6      	ldr	r1, [pc, #664]	; (800607c <CO_SDO_process+0x754>)
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff fd5f 	bl	80058a8 <CO_SDO_abort>
                return -1;
 8005dea:	f04f 33ff 	mov.w	r3, #4294967295
 8005dee:	f000 bec7 	b.w	8006b80 <CO_SDO_process+0x1258>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	091b      	lsrs	r3, r3, #4
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(i != SDO->sequence){
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d007      	beq.n	8005e22 <CO_SDO_process+0x4fa>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 8005e12:	499b      	ldr	r1, [pc, #620]	; (8006080 <CO_SDO_process+0x758>)
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff fd47 	bl	80058a8 <CO_SDO_abort>
                return -1;
 8005e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1e:	f000 beaf 	b.w	8006b80 <CO_SDO_process+0x1258>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e44:	4413      	add	r3, r2
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	dd2c      	ble.n	8005eaa <CO_SDO_process+0x582>
                if(SDO->ODF_arg.ODdataStorage != 0){
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <CO_SDO_process+0x542>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
 8005e5a:	498a      	ldr	r1, [pc, #552]	; (8006084 <CO_SDO_process+0x75c>)
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff fd23 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 8005e62:	f04f 33ff 	mov.w	r3, #4294967295
 8005e66:	f000 be8b 	b.w	8006b80 <CO_SDO_process+0x1258>
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
                    abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8005e78:	4619      	mov	r1, r3
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7ff fc8a 	bl	8005794 <CO_SDO_writeOD>
 8005e80:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <CO_SDO_process+0x570>
                        CO_SDO_abort(SDO, abortCode);
 8005e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f7ff fd0c 	bl	80058a8 <CO_SDO_abort>
                        return -1;
 8005e90:	f04f 33ff 	mov.w	r3, #4294967295
 8005e94:	f000 be74 	b.w	8006b80 <CO_SDO_process+0x1258>
                    }

                    SDO->ODF_arg.dataLength = CO_CONFIG_SDO_BUFFER_SIZE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005e9e:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                    SDO->bufferOffset = 0U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005eb0:	e016      	b.n	8005ee0 <CO_SDO_process+0x5b8>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
 8005eb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8005ec4:	1c58      	adds	r0, r3, #1
 8005ec6:	b284      	uxth	r4, r0
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f8a0 4720 	strh.w	r4, [r0, #1824]	; 0x720
 8005ece:	440b      	add	r3, r1
 8005ed0:	68f9      	ldr	r1, [r7, #12]
 8005ed2:	5c8a      	ldrb	r2, [r1, r2]
 8005ed4:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
 8005ed6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005eda:	3301      	adds	r3, #1
 8005edc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ee0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8005ee4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d3e2      	bcc.n	8005eb2 <CO_SDO_process+0x58a>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d020      	beq.n	8005f3a <CO_SDO_process+0x612>
                SDO->ODF_arg.lastSegment = true;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8005f06:	4619      	mov	r1, r3
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f7ff fc43 	bl	8005794 <CO_SDO_writeOD>
 8005f0e:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <CO_SDO_process+0x5fe>
                    CO_SDO_abort(SDO, abortCode);
 8005f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7ff fcc5 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 8005f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f22:	f000 be2d 	b.w	8006b80 <CO_SDO_process+0x1258>
                }

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <CO_SDO_process+0x612>
                    *timerNext_us = 0;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
#endif
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <CO_SDO_process+0x620>
 8005f44:	2230      	movs	r2, #48	; 0x30
 8005f46:	e000      	b.n	8005f4a <CO_SDO_process+0x622>
 8005f48:	2220      	movs	r2, #32
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005f50:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            sendResponse = true;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 8005f70:	f000 bdec 	b.w	8006b4c <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 8005f7c:	2bc0      	cmp	r3, #192	; 0xc0
 8005f7e:	d007      	beq.n	8005f90 <CO_SDO_process+0x668>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005f80:	493e      	ldr	r1, [pc, #248]	; (800607c <CO_SDO_process+0x754>)
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fc90 	bl	80058a8 <CO_SDO_abort>
                return -1;
 8005f88:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8c:	f000 bdf8 	b.w	8006b80 <CO_SDO_process+0x1258>
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005f96:	22a4      	movs	r2, #164	; 0xa4
 8005f98:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	7852      	ldrb	r2, [r2, #1]
 8005fa4:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	7892      	ldrb	r2, [r2, #2]
 8005fb0:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	78d2      	ldrb	r2, [r2, #3]
 8005fbc:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_CONFIG_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_CONFIG_SDO_BUFFER_SIZE / 7);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	227f      	movs	r2, #127	; 0x7f
 8005fc2:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
            SDO->CANtxBuff->data[4] = SDO->blksize;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	f892 2754 	ldrb.w	r2, [r2, #1876]	; 0x754
 8005fd2:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	109b      	asrs	r3, r3, #2
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f883 2755 	strb.w	r2, [r3, #1877]	; 0x755
            SDO->crc = 0;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01b      	beq.n	8006034 <CO_SDO_process+0x70c>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3304      	adds	r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	623b      	str	r3, [r7, #32]
                SDO->ODF_arg.dataLengthTotal = lenRx;
 8006004:	6a3a      	ldr	r2, [r7, #32]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006012:	461a      	mov	r2, r3
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	429a      	cmp	r2, r3
 8006018:	d00c      	beq.n	8006034 <CO_SDO_process+0x70c>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <CO_SDO_process+0x70c>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 8006024:	4914      	ldr	r1, [pc, #80]	; (8006078 <CO_SDO_process+0x750>)
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7ff fc3e 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 800602c:	f04f 33ff 	mov.w	r3, #4294967295
 8006030:	f000 bda6 	b.w	8006b80 <CO_SDO_process+0x1258>
                }
            }

            SDO->bufferOffset = 0U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
            SDO->sequence = 0U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            SDO->timeoutSubblockDownolad = false;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	22a5      	movs	r2, #165	; 0xa5
 8006050:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749

            /* send response */
            sendResponse = true;
 8006054:	2301      	movs	r3, #1
 8006056:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 800605a:	f000 bd77 	b.w	8006b4c <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:
        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP_2:{
            /* check if last segment received */
            lastSegmentInSubblock = (!SDO->timeoutSubblockDownolad &&
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10f      	bne.n	8006088 <CO_SDO_process+0x760>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	b25b      	sxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	da0a      	bge.n	8006088 <CO_SDO_process+0x760>
 8006072:	2301      	movs	r3, #1
 8006074:	e009      	b.n	800608a <CO_SDO_process+0x762>
 8006076:	bf00      	nop
 8006078:	06070010 	.word	0x06070010
 800607c:	05040001 	.word	0x05040001
 8006080:	05030000 	.word	0x05030000
 8006084:	06070012 	.word	0x06070012
 8006088:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!SDO->timeoutSubblockDownolad &&
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006094:	22a2      	movs	r2, #162	; 0xa2
 8006096:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	f892 274a 	ldrb.w	r2, [r2, #1866]	; 0x74a
 80060a4:	719a      	strb	r2, [r3, #6]

            /* reset sequence on reception break */
            if (state == CO_SDO_ST_DOWNLOAD_BL_SUB_RESP) {
 80060a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060aa:	2ba6      	cmp	r3, #166	; 0xa6
 80060ac:	d103      	bne.n	80060b6 <CO_SDO_process+0x78e>
                SDO->sequence = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            }

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d13f      	bne.n	8006140 <CO_SDO_process+0x818>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d03a      	beq.n	8006140 <CO_SDO_process+0x818>
 80060ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d136      	bne.n	8006140 <CO_SDO_process+0x818>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d011      	beq.n	8006100 <CO_SDO_process+0x7d8>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 80060e8:	4619      	mov	r1, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 80060f0:	461a      	mov	r2, r3
 80060f2:	f001 f9d1 	bl	8007498 <crc16_ccitt>
 80060f6:	4603      	mov	r3, r0
 80060f8:	461a      	mov	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 800610e:	4619      	mov	r1, r3
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff fb3f 	bl	8005794 <CO_SDO_writeOD>
 8006116:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8006118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d007      	beq.n	800612e <CO_SDO_process+0x806>
                    CO_SDO_abort(SDO, abortCode);
 800611e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff fbc1 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 8006126:	f04f 33ff 	mov.w	r3, #4294967295
 800612a:	f000 bd29 	b.w	8006b80 <CO_SDO_process+0x1258>
                }

                SDO->ODF_arg.dataLength = CO_CONFIG_SDO_BUFFER_SIZE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006134:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                SDO->bufferOffset = 0U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
            }

            /* blksize */
            len = CO_CONFIG_SDO_BUFFER_SIZE - SDO->bufferOffset;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006146:	f5c3 63e1 	rsb	r3, r3, #1800	; 0x708
 800614a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
 800614e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006152:	f240 3279 	movw	r2, #889	; 0x379
 8006156:	4293      	cmp	r3, r2
 8006158:	d80b      	bhi.n	8006172 <CO_SDO_process+0x84a>
 800615a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800615e:	4bba      	ldr	r3, [pc, #744]	; (8006448 <CO_SDO_process+0xb20>)
 8006160:	fba3 1302 	umull	r1, r3, r3, r2
 8006164:	1ad2      	subs	r2, r2, r3
 8006166:	0852      	lsrs	r2, r2, #1
 8006168:	4413      	add	r3, r2
 800616a:	089b      	lsrs	r3, r3, #2
 800616c:	b29b      	uxth	r3, r3
 800616e:	b2da      	uxtb	r2, r3
 8006170:	e000      	b.n	8006174 <CO_SDO_process+0x84c>
 8006172:	227f      	movs	r2, #127	; 0x7f
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
            SDO->CANtxBuff->data[2] = SDO->blksize;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	f892 2754 	ldrb.w	r2, [r2, #1876]	; 0x754
 8006186:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
 8006188:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800618c:	2b00      	cmp	r3, #0
 800618e:	d004      	beq.n	800619a <CO_SDO_process+0x872>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	22a8      	movs	r2, #168	; 0xa8
 8006194:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 8006198:	e011      	b.n	80061be <CO_SDO_process+0x896>
            }
            else if(SDO->bufferOffset >= CO_CONFIG_SDO_BUFFER_SIZE) {
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 80061a0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80061a4:	d307      	bcc.n	80061b6 <CO_SDO_process+0x88e>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
 80061a6:	49a9      	ldr	r1, [pc, #676]	; (800644c <CO_SDO_process+0xb24>)
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff fb7d 	bl	80058a8 <CO_SDO_abort>
                return -1;
 80061ae:	f04f 33ff 	mov.w	r3, #4294967295
 80061b2:	f000 bce5 	b.w	8006b80 <CO_SDO_process+0x1258>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	22a5      	movs	r2, #165	; 0xa5
 80061ba:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            }

            /* send response */
            sendResponse = true;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

            break;
 80061c4:	f000 bcc2 	b.w	8006b4c <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 80061d0:	2bc1      	cmp	r3, #193	; 0xc1
 80061d2:	d007      	beq.n	80061e4 <CO_SDO_process+0x8bc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80061d4:	499e      	ldr	r1, [pc, #632]	; (8006450 <CO_SDO_process+0xb28>)
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff fb66 	bl	80058a8 <CO_SDO_abort>
                return -1;
 80061dc:	f04f 33ff 	mov.w	r3, #4294967295
 80061e0:	f000 bcce 	b.w	8006b80 <CO_SDO_process+0x1258>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	089b      	lsrs	r3, r3, #2
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            SDO->bufferOffset -= len;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8b3 2720 	ldrh.w	r2, [r3, #1824]	; 0x720
 80061fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 8006210:	2b00      	cmp	r3, #0
 8006212:	d024      	beq.n	800625e <CO_SDO_process+0x936>
                uint16_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006220:	4619      	mov	r1, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 8006228:	461a      	mov	r2, r3
 800622a:	f001 f935 	bl	8007498 <crc16_ccitt>
 800622e:	4603      	mov	r3, r0
 8006230:	461a      	mov	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3301      	adds	r3, #1
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	83fb      	strh	r3, [r7, #30]

                if(SDO->crc != crc){
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8b3 2756 	ldrh.w	r2, [r3, #1878]	; 0x756
 8006248:	8bfb      	ldrh	r3, [r7, #30]
 800624a:	429a      	cmp	r2, r3
 800624c:	d007      	beq.n	800625e <CO_SDO_process+0x936>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
 800624e:	4981      	ldr	r1, [pc, #516]	; (8006454 <CO_SDO_process+0xb2c>)
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff fb29 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 8006256:	f04f 33ff 	mov.w	r3, #4294967295
 800625a:	f000 bc91 	b.w	8006b80 <CO_SDO_process+0x1258>
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
            abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 800626c:	4619      	mov	r1, r3
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7ff fa90 	bl	8005794 <CO_SDO_writeOD>
 8006274:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <CO_SDO_process+0x964>
                CO_SDO_abort(SDO, abortCode);
 800627c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f7ff fb12 	bl	80058a8 <CO_SDO_abort>
                return -1;
 8006284:	f04f 33ff 	mov.w	r3, #4294967295
 8006288:	f000 bc7a 	b.w	8006b80 <CO_SDO_process+0x1258>
            }

            /* finish the communication and run mainline processing again */
            SDO->CANtxBuff->data[0] = 0xA1;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006292:	22a1      	movs	r2, #161	; 0xa1
 8006294:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            sendResponse = true;
 800629e:	2301      	movs	r3, #1
 80062a0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
            if (timerNext_us != NULL)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 844b 	beq.w	8006b42 <CO_SDO_process+0x121a>
                *timerNext_us = 0;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
#endif
            break;
 80062b2:	f000 bc46 	b.w	8006b42 <CO_SDO_process+0x121a>
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	7852      	ldrb	r2, [r2, #1]
 80062c0:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	7892      	ldrb	r2, [r2, #2]
 80062cc:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	78d2      	ldrb	r2, [r2, #3]
 80062d8:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d83e      	bhi.n	8006362 <CO_SDO_process+0xa3a>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 80062e4:	2300      	movs	r3, #0
 80062e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80062ea:	e014      	b.n	8006316 <CO_SDO_process+0x9ee>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 80062f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80062f6:	18d1      	adds	r1, r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8d3 276c 	ldr.w	r2, [r3, #1900]	; 0x76c
 80062fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006302:	3304      	adds	r3, #4
 8006304:	7809      	ldrb	r1, [r1, #0]
 8006306:	4413      	add	r3, r2
 8006308:	460a      	mov	r2, r1
 800630a:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 800630c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006310:	3301      	adds	r3, #1
 8006312:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800631c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006320:	429a      	cmp	r2, r3
 8006322:	d3e3      	bcc.n	80062ec <CO_SDO_process+0x9c4>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f1c3 0304 	rsb	r3, r3, #4
 8006330:	b2db      	uxtb	r3, r3
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	b2da      	uxtb	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800633c:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	715a      	strb	r2, [r3, #5]

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                sendResponse = true;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 83f6 	beq.w	8006b46 <CO_SDO_process+0x121e>
                    *timerNext_us = 0;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
                }

                /* send response */
                sendResponse = true;
            }
            break;
 8006360:	e3f1      	b.n	8006b46 <CO_SDO_process+0x121e>
                SDO->bufferOffset = 0U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                SDO->sequence = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	22b2      	movs	r2, #178	; 0xb2
 8006376:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                if(SDO->ODF_arg.dataLengthTotal != 0U){
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00f      	beq.n	80063a4 <CO_SDO_process+0xa7c>
                    uint32_t dlentot = SDO->ODF_arg.dataLengthTotal;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 800638a:	61bb      	str	r3, [r7, #24]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &dlentot);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006392:	3309      	adds	r3, #9
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	601a      	str	r2, [r3, #0]
                    SDO->CANtxBuff->data[0] = 0x41U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800639e:	2241      	movs	r2, #65	; 0x41
 80063a0:	715a      	strb	r2, [r3, #5]
 80063a2:	e004      	b.n	80063ae <CO_SDO_process+0xa86>
                    SDO->CANtxBuff->data[0] = 0x40U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80063aa:	2240      	movs	r2, #64	; 0x40
 80063ac:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 80063b4:	e3c7      	b.n	8006b46 <CO_SDO_process+0x121e>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80063be:	2b60      	cmp	r3, #96	; 0x60
 80063c0:	d006      	beq.n	80063d0 <CO_SDO_process+0xaa8>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80063c2:	4923      	ldr	r1, [pc, #140]	; (8006450 <CO_SDO_process+0xb28>)
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff fa6f 	bl	80058a8 <CO_SDO_abort>
                return -1;
 80063ca:	f04f 33ff 	mov.w	r3, #4294967295
 80063ce:	e3d7      	b.n	8006b80 <CO_SDO_process+0x1258>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	091b      	lsrs	r3, r3, #4
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(i != SDO->sequence){
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d006      	beq.n	80063fe <CO_SDO_process+0xad6>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 80063f0:	4919      	ldr	r1, [pc, #100]	; (8006458 <CO_SDO_process+0xb30>)
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff fa58 	bl	80058a8 <CO_SDO_abort>
                return -1;
 80063f8:	f04f 33ff 	mov.w	r3, #4294967295
 80063fc:	e3c0      	b.n	8006b80 <CO_SDO_process+0x1258>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            if(len > 7U) len = 7U;
 8006410:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006414:	2b07      	cmp	r3, #7
 8006416:	d902      	bls.n	800641e <CO_SDO_process+0xaf6>
 8006418:	2307      	movs	r3, #7
 800641a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8006424:	2b00      	cmp	r3, #0
 8006426:	f040 8087 	bne.w	8006538 <CO_SDO_process+0xc10>
 800642a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800642e:	2b06      	cmp	r3, #6
 8006430:	f200 8082 	bhi.w	8006538 <CO_SDO_process+0xc10>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 800643a:	2b00      	cmp	r3, #0
 800643c:	d17c      	bne.n	8006538 <CO_SDO_process+0xc10>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
 800643e:	2300      	movs	r3, #0
 8006440:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006444:	e022      	b.n	800648c <CO_SDO_process+0xb64>
 8006446:	bf00      	nop
 8006448:	24924925 	.word	0x24924925
 800644c:	06040047 	.word	0x06040047
 8006450:	05040001 	.word	0x05040001
 8006454:	05040004 	.word	0x05040004
 8006458:	05030000 	.word	0x05030000
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	f8b2 2720 	ldrh.w	r2, [r2, #1824]	; 0x720
 8006468:	4611      	mov	r1, r2
 800646a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800646e:	440a      	add	r2, r1
 8006470:	441a      	add	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 8006478:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800647c:	440b      	add	r3, r1
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
 8006482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006486:	3301      	adds	r3, #1
 8006488:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800648c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006490:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006494:	429a      	cmp	r2, r3
 8006496:	d3e1      	bcc.n	800645c <CO_SDO_process+0xb34>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 800649e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064a2:	441a      	add	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8b3 1722 	ldrh.w	r1, [r3, #1826]	; 0x722
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 373a 	ldrb.w	r3, [r3, #1850]	; 0x73a
 80064b6:	461a      	mov	r2, r3
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f7fe ff07 	bl	80052cc <CO_OD_getLength>
 80064be:	4603      	mov	r3, r0
 80064c0:	461a      	mov	r2, r3
 80064c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD(SDO, CO_CONFIG_SDO_BUFFER_SIZE);
 80064d0:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff f8dd 	bl	8005694 <CO_SDO_readOD>
 80064da:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <CO_SDO_process+0xbc8>
                    CO_SDO_abort(SDO, abortCode);
 80064e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f7ff f9df 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 80064ea:	f04f 33ff 	mov.w	r3, #4294967295
 80064ee:	e347      	b.n	8006b80 <CO_SDO_process+0x1258>
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 80064f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064fa:	425b      	negs	r3, r3
 80064fc:	441a      	add	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                SDO->ODF_arg.dataLength +=  len;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 800650a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800650e:	4413      	add	r3, r2
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                SDO->bufferOffset = 0;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006526:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                if(len > 7U) len = 7U;
 800652a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800652e:	2b07      	cmp	r3, #7
 8006530:	d902      	bls.n	8006538 <CO_SDO_process+0xc10>
 8006532:	2307      	movs	r3, #7
 8006534:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
 8006538:	2300      	movs	r3, #0
 800653a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800653e:	e01a      	b.n	8006576 <CO_SDO_process+0xc4e>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 800654c:	1c59      	adds	r1, r3, #1
 800654e:	b288      	uxth	r0, r1
 8006550:	68f9      	ldr	r1, [r7, #12]
 8006552:	f8a1 0720 	strh.w	r0, [r1, #1824]	; 0x720
 8006556:	18d1      	adds	r1, r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 276c 	ldr.w	r2, [r3, #1900]	; 0x76c
 800655e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006562:	3301      	adds	r3, #1
 8006564:	7809      	ldrb	r1, [r1, #0]
 8006566:	4413      	add	r3, r2
 8006568:	460a      	mov	r2, r1
 800656a:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
 800656c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006570:	3301      	adds	r3, #1
 8006572:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006576:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800657a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800657e:	429a      	cmp	r2, r3
 8006580:	d3de      	bcc.n	8006540 <CO_SDO_process+0xc18>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <CO_SDO_process+0xc68>
 800658c:	2210      	movs	r2, #16
 800658e:	e000      	b.n	8006592 <CO_SDO_process+0xc6a>
 8006590:	2200      	movs	r2, #0
 8006592:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006596:	f1c3 0307 	rsb	r3, r3, #7
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	b25b      	sxtb	r3, r3
 800659e:	4313      	orrs	r3, r2
 80065a0:	b25a      	sxtb	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8b3 2720 	ldrh.w	r2, [r3, #1824]	; 0x720
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d119      	bne.n	8006608 <CO_SDO_process+0xce0>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d014      	beq.n	8006608 <CO_SDO_process+0xce0>
                SDO->CANtxBuff->data[0] |= 0x01;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80065e4:	795a      	ldrb	r2, [r3, #5]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80065ec:	f042 0201 	orr.w	r2, r2, #1
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	715a      	strb	r2, [r3, #5]

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <CO_SDO_process+0xce0>
                    *timerNext_us = 0;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
#endif
            }

            /* send response */
            sendResponse = true;
 8006608:	2301      	movs	r3, #1
 800660a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 800660e:	e29d      	b.n	8006b4c <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	7852      	ldrb	r2, [r2, #1]
 800661a:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	7892      	ldrb	r2, [r2, #2]
 8006626:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	78d2      	ldrb	r2, [r2, #3]
 8006632:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d013      	beq.n	8006668 <CO_SDO_process+0xd40>
                SDO->crcEnabled = true;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2755 	strb.w	r2, [r3, #1877]	; 0x755
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006654:	2200      	movs	r2, #0
 8006656:	4619      	mov	r1, r3
 8006658:	f000 ff1e 	bl	8007498 <crc16_ccitt>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
 8006666:	e007      	b.n	8006678 <CO_SDO_process+0xd50>
            }
            else{
                SDO->crcEnabled = false;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2755 	strb.w	r2, [r3, #1877]	; 0x755
                SDO->crc = 0;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	791a      	ldrb	r2, [r3, #4]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d006      	beq.n	800669c <CO_SDO_process+0xd74>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 800668e:	49a5      	ldr	r1, [pc, #660]	; (8006924 <CO_SDO_process+0xffc>)
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7ff f909 	bl	80058a8 <CO_SDO_abort>
                return -1;
 8006696:	f04f 33ff 	mov.w	r3, #4294967295
 800669a:	e271      	b.n	8006b80 <CO_SDO_process+0x1258>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d016      	beq.n	80066d4 <CO_SDO_process+0xdac>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80066ac:	b25b      	sxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	db10      	blt.n	80066d4 <CO_SDO_process+0xdac>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80066b8:	461a      	mov	r2, r3
 80066ba:	4613      	mov	r3, r2
 80066bc:	00db      	lsls	r3, r3, #3
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d90b      	bls.n	80066e2 <CO_SDO_process+0xdba>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <CO_SDO_process+0xdba>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 80066d4:	4994      	ldr	r1, [pc, #592]	; (8006928 <CO_SDO_process+0x1000>)
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff f8e6 	bl	80058a8 <CO_SDO_abort>
                return -1;
 80066dc:	f04f 33ff 	mov.w	r3, #4294967295
 80066e0:	e24e      	b.n	8006b80 <CO_SDO_process+0x1258>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00f      	beq.n	800670c <CO_SDO_process+0xde4>
                uint32_t dlentot = SDO->ODF_arg.dataLengthTotal;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 80066f2:	617b      	str	r3, [r7, #20]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &dlentot);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80066fa:	3309      	adds	r3, #9
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	601a      	str	r2, [r3, #0]
                SDO->CANtxBuff->data[0] = 0xC6U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006706:	22c6      	movs	r2, #198	; 0xc6
 8006708:	715a      	strb	r2, [r3, #5]
 800670a:	e004      	b.n	8006716 <CO_SDO_process+0xdee>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006712:	22c4      	movs	r2, #196	; 0xc4
 8006714:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	22b5      	movs	r2, #181	; 0xb5
 800671a:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            sendResponse = true;
 800671e:	2301      	movs	r3, #1
 8006720:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 8006724:	e212      	b.n	8006b4c <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 800672e:	2ba3      	cmp	r3, #163	; 0xa3
 8006730:	d006      	beq.n	8006740 <CO_SDO_process+0xe18>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006732:	497c      	ldr	r1, [pc, #496]	; (8006924 <CO_SDO_process+0xffc>)
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff f8b7 	bl	80058a8 <CO_SDO_abort>
                return -1;
 800673a:	f04f 33ff 	mov.w	r3, #4294967295
 800673e:	e21f      	b.n	8006b80 <CO_SDO_process+0x1258>
            }

            SDO->bufferOffset = 0U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
            SDO->sequence = 0U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            SDO->endOfTransfer = false;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
            CO_FLAG_CLEAR(SDO->CANrxNew);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	22b6      	movs	r2, #182	; 0xb6
 8006764:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
        }
        // fallthrough

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(CO_FLAG_READ(SDO->CANrxNew)){
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 8131 	beq.w	80069d6 <CO_SDO_process+0x10ae>
                uint8_t ackseq;
                uint16_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 800677c:	2ba2      	cmp	r3, #162	; 0xa2
 800677e:	d006      	beq.n	800678e <CO_SDO_process+0xe66>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006780:	4968      	ldr	r1, [pc, #416]	; (8006924 <CO_SDO_process+0xffc>)
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff f890 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 8006788:	f04f 33ff 	mov.w	r3, #4294967295
 800678c:	e1f8      	b.n	8006b80 <CO_SDO_process+0x1258>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 800679c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d906      	bls.n	80067b2 <CO_SDO_process+0xe8a>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
 80067a4:	4961      	ldr	r1, [pc, #388]	; (800692c <CO_SDO_process+0x1004>)
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff f87e 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295
 80067b0:	e1e6      	b.n	8006b80 <CO_SDO_process+0x1258>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 375a 	ldrb.w	r3, [r3, #1882]	; 0x75a
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d02c      	beq.n	8006816 <CO_SDO_process+0xeee>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80067c2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d125      	bne.n	8006816 <CO_SDO_process+0xeee>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 80067d0:	f1c3 0307 	rsb	r3, r3, #7
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	b25b      	sxtb	r3, r3
 80067d8:	f063 033e 	orn	r3, r3, #62	; 0x3e
 80067dc:	b25a      	sxtb	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <CO_SDO_process+0xede>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80067f8:	3306      	adds	r3, #6
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	f202 7256 	addw	r2, r2, #1878	; 0x756
 8006800:	8812      	ldrh	r2, [r2, #0]
 8006802:	b292      	uxth	r2, r2
 8006804:	801a      	strh	r2, [r3, #0]

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	22b7      	movs	r2, #183	; 0xb7
 800680a:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749

                    /* send response */
                    sendResponse = true;
 800680e:	2301      	movs	r3, #1
 8006810:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                    break;
 8006814:	e19a      	b.n	8006b4c <CO_SDO_process+0x1224>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 8006816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800681a:	b29b      	uxth	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	00d2      	lsls	r2, r2, #3
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006826:	2300      	movs	r3, #0
 8006828:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800682c:	e017      	b.n	800685e <CO_SDO_process+0xf36>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 8006834:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006838:	441a      	add	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 8006840:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006844:	440b      	add	r3, r1
 8006846:	7812      	ldrb	r2, [r2, #0]
 8006848:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 800684a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800684e:	3301      	adds	r3, #1
 8006850:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006854:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006858:	3301      	adds	r3, #1
 800685a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006864:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006868:	429a      	cmp	r2, r3
 800686a:	d3e0      	bcc.n	800682e <CO_SDO_process+0xf06>

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8006872:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006876:	b29b      	uxth	r3, r3
 8006878:	4619      	mov	r1, r3
 800687a:	00c9      	lsls	r1, r1, #3
 800687c:	1acb      	subs	r3, r1, r3
 800687e:	b29b      	uxth	r3, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	789a      	ldrb	r2, [r3, #2]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 800689a:	2b00      	cmp	r3, #0
 800689c:	d173      	bne.n	8006986 <CO_SDO_process+0x105e>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80068a4:	4619      	mov	r1, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80068ac:	461a      	mov	r2, r3
 80068ae:	4613      	mov	r3, r2
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	4299      	cmp	r1, r3
 80068b6:	d266      	bcs.n	8006986 <CO_SDO_process+0x105e>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d161      	bne.n	8006986 <CO_SDO_process+0x105e>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80068c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                    SDO->ODF_arg.data += len;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 80068d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068d6:	441a      	add	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8b3 1722 	ldrh.w	r1, [r3, #1826]	; 0x722
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 373a 	ldrb.w	r3, [r3, #1850]	; 0x73a
 80068ea:	461a      	mov	r2, r3
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7fe fced 	bl	80052cc <CO_OD_getLength>
 80068f2:	4603      	mov	r3, r0
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD(SDO, CO_CONFIG_SDO_BUFFER_SIZE);
 8006904:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7fe fec3 	bl	8005694 <CO_SDO_readOD>
 800690e:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00c      	beq.n	8006930 <CO_SDO_process+0x1008>
                        CO_SDO_abort(SDO, abortCode);
 8006916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7fe ffc5 	bl	80058a8 <CO_SDO_abort>
                        return -1;
 800691e:	f04f 33ff 	mov.w	r3, #4294967295
 8006922:	e12d      	b.n	8006b80 <CO_SDO_process+0x1258>
 8006924:	05040001 	.word	0x05040001
 8006928:	05040002 	.word	0x05040002
 800692c:	05040003 	.word	0x05040003
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 8006936:	2b00      	cmp	r3, #0
 8006938:	d011      	beq.n	800695e <CO_SDO_process+0x1036>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006946:	4619      	mov	r1, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 800694e:	461a      	mov	r2, r3
 8006950:	f000 fda2 	bl	8007498 <crc16_ccitt>
 8006954:	4603      	mov	r3, r0
 8006956:	461a      	mov	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 8006964:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006968:	425b      	negs	r3, r3
 800696a:	441a      	add	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                    SDO->ODF_arg.dataLength +=  len;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8006978:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800697c:	4413      	add	r3, r2
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 800698c:	461a      	mov	r2, r3
 800698e:	4613      	mov	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 800699a:	4293      	cmp	r3, r2
 800699c:	d90b      	bls.n	80069b6 <CO_SDO_process+0x108e>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <CO_SDO_process+0x108e>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 80069a8:	4977      	ldr	r1, [pc, #476]	; (8006b88 <CO_SDO_process+0x1260>)
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7fe ff7c 	bl	80058a8 <CO_SDO_abort>
                    return -1;
 80069b0:	f04f 33ff 	mov.w	r3, #4294967295
 80069b4:	e0e4      	b.n	8006b80 <CO_SDO_process+0x1258>
                }

                SDO->bufferOffset = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                SDO->sequence = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
                SDO->endOfTransfer = false;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a

                /* clear flag here */
                CO_FLAG_CLEAR(SDO->CANrxNew);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 274a 	ldrb.w	r2, [r3, #1866]	; 0x74a
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d004      	beq.n	80069f0 <CO_SDO_process+0x10c8>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 375a 	ldrb.w	r3, [r3, #1882]	; 0x75a
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <CO_SDO_process+0x10cc>
                return 1;/* don't call CO_FLAG_CLEAR, so return directly */
 80069f0:	2301      	movs	r3, #1
 80069f2:	e0c5      	b.n	8006b80 <CO_SDO_process+0x1258>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            if(len > 7U){
 8006a0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a12:	2b07      	cmp	r3, #7
 8006a14:	d902      	bls.n	8006a1c <CO_SDO_process+0x10f4>
                len = 7U;
 8006a16:	2307      	movs	r3, #7
 8006a18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a22:	e01a      	b.n	8006a5a <CO_SDO_process+0x1132>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006a30:	1c59      	adds	r1, r3, #1
 8006a32:	b288      	uxth	r0, r1
 8006a34:	68f9      	ldr	r1, [r7, #12]
 8006a36:	f8a1 0720 	strh.w	r0, [r1, #1824]	; 0x720
 8006a3a:	18d1      	adds	r1, r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 276c 	ldr.w	r2, [r3, #1900]	; 0x76c
 8006a42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a46:	3301      	adds	r3, #1
 8006a48:	7809      	ldrb	r1, [r1, #0]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	460a      	mov	r2, r1
 8006a4e:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
 8006a50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a54:	3301      	adds	r3, #1
 8006a56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006a5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d3de      	bcc.n	8006a24 <CO_SDO_process+0x10fc>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	f892 274a 	ldrb.w	r2, [r2, #1866]	; 0x74a
 8006a82:	715a      	strb	r2, [r3, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8b3 2720 	ldrh.w	r2, [r3, #1824]	; 0x720
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d11f      	bne.n	8006ad4 <CO_SDO_process+0x11ac>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d01a      	beq.n	8006ad4 <CO_SDO_process+0x11ac>
                SDO->CANtxBuff->data[0] |= 0x80;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006aa4:	795a      	ldrb	r2, [r3, #5]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006aac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
 8006ab4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
                SDO->blksize = SDO->sequence;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 274a 	ldrb.w	r2, [r3, #1866]	; 0x74a
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
                SDO->endOfTransfer = true;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
            }

            /* send response */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8d3 2768 	ldr.w	r2, [r3, #1896]	; 0x768
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f002 fd4a 	bl	800957c <CO_CANsend>

#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
            /* Inform OS to call this function again without delay. */
            if (timerNext_us != NULL) {
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <CO_SDO_process+0x11cc>
                *timerNext_us = 0;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
            }
#endif

            /* don't call CO_FLAG_CLEAR, so return directly */
            return 1;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e043      	b.n	8006b80 <CO_SDO_process+0x1258>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 8006b00:	2ba1      	cmp	r3, #161	; 0xa1
 8006b02:	d006      	beq.n	8006b12 <CO_SDO_process+0x11ea>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006b04:	4921      	ldr	r1, [pc, #132]	; (8006b8c <CO_SDO_process+0x1264>)
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7fe fece 	bl	80058a8 <CO_SDO_abort>
                return -1;
 8006b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b10:	e036      	b.n	8006b80 <CO_SDO_process+0x1258>
            }

            /* finish the communication and run mainline processing again */
            SDO->state = CO_SDO_ST_IDLE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
            if (timerNext_us != NULL)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d014      	beq.n	8006b4a <CO_SDO_process+0x1222>
                *timerNext_us = 0;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
#endif
            break;
 8006b26:	e010      	b.n	8006b4a <CO_SDO_process+0x1222>
            /* Nothing to do, this never happens. */
            break;
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
 8006b28:	4919      	ldr	r1, [pc, #100]	; (8006b90 <CO_SDO_process+0x1268>)
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f7fe febc 	bl	80058a8 <CO_SDO_abort>
            return -1;
 8006b30:	f04f 33ff 	mov.w	r3, #4294967295
 8006b34:	e024      	b.n	8006b80 <CO_SDO_process+0x1258>
            break;
 8006b36:	bf00      	nop
 8006b38:	e008      	b.n	8006b4c <CO_SDO_process+0x1224>
            break;
 8006b3a:	bf00      	nop
 8006b3c:	e006      	b.n	8006b4c <CO_SDO_process+0x1224>
            break;
 8006b3e:	bf00      	nop
 8006b40:	e004      	b.n	8006b4c <CO_SDO_process+0x1224>
            break;
 8006b42:	bf00      	nop
 8006b44:	e002      	b.n	8006b4c <CO_SDO_process+0x1224>
            break;
 8006b46:	bf00      	nop
 8006b48:	e000      	b.n	8006b4c <CO_SDO_process+0x1224>
            break;
 8006b4a:	bf00      	nop
        }
    }

    /* free buffer and send message */
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
    if(sendResponse) {
 8006b54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <CO_SDO_process+0x1248>
        CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8d3 2768 	ldr.w	r2, [r3, #1896]	; 0x768
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	f002 fd06 	bl	800957c <CO_CANsend>
    }

    if(SDO->state != CO_SDO_ST_IDLE){
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <CO_SDO_process+0x1256>
        return 1;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <CO_SDO_process+0x1258>
    }

    return 0;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	374c      	adds	r7, #76	; 0x4c
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd90      	pop	{r4, r7, pc}
 8006b88:	05040002 	.word	0x05040002
 8006b8c:	05040001 	.word	0x05040001
 8006b90:	06040047 	.word	0x06040047

08006b94 <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8006ba0:	60fb      	str	r3, [r7, #12]
    return value;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC;
    CO_NMT_internalState_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	617b      	str	r3, [r7, #20]
    operState = *SYNC->operatingState;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	74fb      	strb	r3, [r7, #19]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
 8006bc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	d003      	beq.n	8006bd6 <CO_SYNC_receive+0x26>
 8006bce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd4:	d143      	bne.n	8006c5e <CO_SYNC_receive+0xae>
        uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bdc:	74bb      	strb	r3, [r7, #18]

        if(SYNC->counterOverflowValue == 0){
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	7d1b      	ldrb	r3, [r3, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10e      	bne.n	8006c04 <CO_SYNC_receive+0x54>
            if(DLC == 0U){
 8006be6:	7cbb      	ldrb	r3, [r7, #18]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d103      	bne.n	8006bf4 <CO_SYNC_receive+0x44>
                CO_FLAG_SET(SYNC->CANrxNew);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	619a      	str	r2, [r3, #24]
 8006bf2:	e01c      	b.n	8006c2e <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)DLC | 0x0100U;
 8006bf4:	7cbb      	ldrb	r3, [r7, #18]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	849a      	strh	r2, [r3, #36]	; 0x24
 8006c02:	e014      	b.n	8006c2e <CO_SYNC_receive+0x7e>
            }
        }
        else{
            if(DLC == 1U){
 8006c04:	7cbb      	ldrb	r3, [r7, #18]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d10a      	bne.n	8006c20 <CO_SYNC_receive+0x70>
                uint8_t *data = CO_CANrxMsg_readData(msg);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	3321      	adds	r3, #33	; 0x21
 8006c0e:	60fb      	str	r3, [r7, #12]
                SYNC->counter = data[0];
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	781a      	ldrb	r2, [r3, #0]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	775a      	strb	r2, [r3, #29]
                CO_FLAG_SET(SYNC->CANrxNew);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	619a      	str	r2, [r3, #24]
 8006c1e:	e006      	b.n	8006c2e <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)DLC | 0x0200U;
 8006c20:	7cbb      	ldrb	r3, [r7, #18]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	849a      	strh	r2, [r3, #36]	; 0x24
            }
        }
        if(CO_FLAG_READ(SYNC->CANrxNew)) {
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d013      	beq.n	8006c5e <CO_SYNC_receive+0xae>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	7f1b      	ldrb	r3, [r3, #28]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bf0c      	ite	eq
 8006c3e:	2301      	moveq	r3, #1
 8006c40:	2300      	movne	r3, #0
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	771a      	strb	r2, [r3, #28]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_CALLBACK_PRE
            /* Optional signal to RTOS, which can resume task, which handles SYNC. */
            if(SYNC->pFunctSignalPre != NULL) {
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <CO_SYNC_receive+0xae>
                SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	4798      	blx	r3
            }
#endif
        }
    }
}
 8006c5e:	bf00      	nop
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <CO_ODF_1005>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08c      	sub	sp, #48	; 0x30
 8006c6c:	af04      	add	r7, sp, #16
 8006c6e:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61fb      	str	r3, [r7, #28]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	617b      	str	r3, [r7, #20]
    value = CO_getUint32(ODF_arg->data);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff ff88 	bl	8006b94 <CO_getUint32>
 8006c84:	6138      	str	r0, [r7, #16]

    if(!ODF_arg->reading){
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	7ddb      	ldrb	r3, [r3, #23]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d16f      	bne.n	8006d6e <CO_ODF_1005+0x106>
        uint8_t configureSyncProducer = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	76fb      	strb	r3, [r7, #27]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <CO_ODF_1005+0x3a>
            ret = CO_SDO_AB_INVALID_VALUE;
 8006c9c:	4b36      	ldr	r3, [pc, #216]	; (8006d78 <CO_ODF_1005+0x110>)
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	e00d      	b.n	8006cbe <CO_ODF_1005+0x56>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d008      	beq.n	8006cbe <CO_ODF_1005+0x56>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	7a1b      	ldrb	r3, [r3, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <CO_ODF_1005+0x52>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
 8006cb4:	4b31      	ldr	r3, [pc, #196]	; (8006d7c <CO_ODF_1005+0x114>)
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	e001      	b.n	8006cbe <CO_ODF_1005+0x56>
                }
                else{
                    configureSyncProducer = 1;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	76fb      	strb	r3, [r7, #27]
                }
            }
        }

        /* configure sync producer */
        if(ret == CO_SDO_AB_NONE){
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d139      	bne.n	8006d38 <CO_ODF_1005+0xd0>
            SYNC->COB_ID = (uint16_t)(value & 0x7FFU);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	815a      	strh	r2, [r3, #10]

            if(configureSyncProducer){
 8006cd2:	7efb      	ldrb	r3, [r7, #27]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d02c      	beq.n	8006d32 <CO_ODF_1005+0xca>
                uint8_t len = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	76bb      	strb	r3, [r7, #26]
                if(SYNC->counterOverflowValue != 0U){
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	7d1b      	ldrb	r3, [r3, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <CO_ODF_1005+0x8c>
                    len = 1U;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	76bb      	strb	r3, [r7, #26]
                    SYNC->counter = 0U;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2200      	movs	r2, #0
 8006cec:	775a      	strb	r2, [r3, #29]
                    SYNC->timer = 0U;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = CO_CANtxBufferInit(
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	895a      	ldrh	r2, [r3, #10]
 8006d02:	2300      	movs	r3, #0
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	7ebb      	ldrb	r3, [r7, #26]
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f002 fbf6 	bl	80094fc <CO_CANtxBufferInit>
 8006d10:	4602      	mov	r2, r0
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	63da      	str	r2, [r3, #60]	; 0x3c
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */

                if (SYNC->CANtxBuff == NULL) {
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d105      	bne.n	8006d2a <CO_ODF_1005+0xc2>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
 8006d1e:	4b17      	ldr	r3, [pc, #92]	; (8006d7c <CO_ODF_1005+0x114>)
 8006d20:	61fb      	str	r3, [r7, #28]
                    SYNC->isProducer = false;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2200      	movs	r2, #0
 8006d26:	721a      	strb	r2, [r3, #8]
 8006d28:	e006      	b.n	8006d38 <CO_ODF_1005+0xd0>
                } else {
                    SYNC->isProducer = true;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	721a      	strb	r2, [r3, #8]
 8006d30:	e002      	b.n	8006d38 <CO_ODF_1005+0xd0>
                }
            }
            else{
                SYNC->isProducer = false;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2200      	movs	r2, #0
 8006d36:	721a      	strb	r2, [r3, #8]
            }
        }

        /* configure sync consumer */
        if (ret == CO_SDO_AB_NONE) {
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d117      	bne.n	8006d6e <CO_ODF_1005+0x106>
            CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	895a      	ldrh	r2, [r3, #10]
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <CO_ODF_1005+0x118>)
 8006d4c:	9302      	str	r3, [sp, #8]
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	2300      	movs	r3, #0
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006d5a:	f002 fb79 	bl	8009450 <CO_CANrxBufferInit>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
                0x7FF,                  /* mask */
                0,                      /* rtr */
                (void*)SYNC,            /* object passed to receive function */
                CO_SYNC_receive);       /* this function will process received message */

            if (CANret != CO_ERROR_NO) {
 8006d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <CO_ODF_1005+0x106>
                ret = CO_SDO_AB_DATA_DEV_STATE;
 8006d6a:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <CO_ODF_1005+0x114>)
 8006d6c:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    return ret;
 8006d6e:	69fb      	ldr	r3, [r7, #28]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3720      	adds	r7, #32
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	06090030 	.word	0x06090030
 8006d7c:	08000022 	.word	0x08000022
 8006d80:	08006bb1 	.word	0x08006bb1

08006d84 <CO_ODF_1006>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fefa 	bl	8006b94 <CO_getUint32>
 8006da0:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	7ddb      	ldrb	r3, [r3, #23]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d11f      	bne.n	8006dea <CO_ODF_1006+0x66>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d105      	bne.n	8006dbe <CO_ODF_1006+0x3a>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <CO_ODF_1006+0x3a>
            SYNC->counter = 0;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	775a      	strb	r2, [r3, #29]
        }

        SYNC->periodTime = value;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	60da      	str	r2, [r3, #12]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	085a      	lsrs	r2, r3, #1
 8006dc8:	4613      	mov	r3, r2
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	441a      	add	r2, r3
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	611a      	str	r2, [r3, #16]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d903      	bls.n	8006de4 <CO_ODF_1006+0x60>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f04f 32ff 	mov.w	r2, #4294967295
 8006de2:	611a      	str	r2, [r3, #16]
        }

        SYNC->timer = 0;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	2200      	movs	r2, #0
 8006de8:	621a      	str	r2, [r3, #32]
    }

    return ret;
 8006dea:	697b      	ldr	r3, [r7, #20]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <CO_ODF_1019>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7ddb      	ldrb	r3, [r3, #23]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d130      	bne.n	8006e78 <CO_ODF_1019+0x84>
        uint8_t len = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <CO_ODF_1019+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
 8006e22:	4b18      	ldr	r3, [pc, #96]	; (8006e84 <CO_ODF_1019+0x90>)
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	e027      	b.n	8006e78 <CO_ODF_1019+0x84>
        }
        else if((value == 1) || (value > 240)){
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d002      	beq.n	8006e34 <CO_ODF_1019+0x40>
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	2bf0      	cmp	r3, #240	; 0xf0
 8006e32:	d902      	bls.n	8006e3a <CO_ODF_1019+0x46>
            ret = CO_SDO_AB_INVALID_VALUE;
 8006e34:	4b14      	ldr	r3, [pc, #80]	; (8006e88 <CO_ODF_1019+0x94>)
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	e01e      	b.n	8006e78 <CO_ODF_1019+0x84>
        }
        else{
            SYNC->counterOverflowValue = value;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	7afa      	ldrb	r2, [r7, #11]
 8006e3e:	751a      	strb	r2, [r3, #20]
            if(value != 0){
 8006e40:	7afb      	ldrb	r3, [r7, #11]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <CO_ODF_1019+0x56>
                len = 1U;
 8006e46:	2301      	movs	r3, #1
 8006e48:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff = CO_CANtxBufferInit(
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	895a      	ldrh	r2, [r3, #10]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	7cfb      	ldrb	r3, [r7, #19]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	2300      	movs	r3, #0
 8006e62:	f002 fb4b 	bl	80094fc <CO_CANtxBufferInit>
 8006e66:	4602      	mov	r2, r0
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	63da      	str	r2, [r3, #60]	; 0x3c
                    SYNC->COB_ID,           /* CAN identifier */
                    0,                      /* rtr */
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */

            if (SYNC->CANtxBuff == NULL) {
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <CO_ODF_1019+0x84>
                ret = CO_SDO_AB_DATA_DEV_STATE;
 8006e74:	4b03      	ldr	r3, [pc, #12]	; (8006e84 <CO_ODF_1019+0x90>)
 8006e76:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return ret;
 8006e78:	697b      	ldr	r3, [r7, #20]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	08000022 	.word	0x08000022
 8006e88:	06090030 	.word	0x06090030

08006e8c <CO_SYNC_init>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	; 0x28
 8006e90:	af04      	add	r7, sp, #16
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	75fb      	strb	r3, [r7, #23]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75bb      	strb	r3, [r7, #22]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00e      	beq.n	8006ec6 <CO_SYNC_init+0x3a>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00b      	beq.n	8006ec6 <CO_SYNC_init+0x3a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d008      	beq.n	8006ec6 <CO_SYNC_init+0x3a>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d005      	beq.n	8006ec6 <CO_SYNC_init+0x3a>
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <CO_SYNC_init+0x3a>
        CANdevRx==NULL || CANdevTx==NULL){
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d102      	bne.n	8006ecc <CO_SYNC_init+0x40>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eca:	e09d      	b.n	8007008 <CO_SYNC_init+0x17c>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	0f9b      	lsrs	r3, r3, #30
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	815a      	strh	r2, [r3, #10]

    SYNC->periodTime = communicationCyclePeriod;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eee:	60da      	str	r2, [r3, #12]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	085a      	lsrs	r2, r3, #1
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	441a      	add	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	611a      	str	r2, [r3, #16]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d903      	bls.n	8006f10 <CO_SYNC_init+0x84>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0e:	611a      	str	r2, [r3, #16]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006f16:	751a      	strb	r2, [r3, #20]
    if(synchronousCounterOverflowValue) len = 1;
 8006f18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <CO_SYNC_init+0x98>
 8006f20:	2301      	movs	r3, #1
 8006f22:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2201      	movs	r2, #1
 8006f28:	755a      	strb	r2, [r3, #21]

    CO_FLAG_CLEAR(SYNC->CANrxNew);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = false;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	771a      	strb	r2, [r3, #28]
    SYNC->timer = 0;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	775a      	strb	r2, [r3, #29]
    SYNC->receiveError = 0U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	849a      	strh	r2, [r3, #36]	; 0x24

    SYNC->em = em;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f58:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006f5e:	869a      	strh	r2, [r3, #52]	; 0x34

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_CALLBACK_PRE
    SYNC->pFunctSignalPre = NULL;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->functSignalObjectPre = NULL;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    CO_OD_configure(SDO, OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	2300      	movs	r3, #0
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4a26      	ldr	r2, [pc, #152]	; (8007010 <CO_SYNC_init+0x184>)
 8006f78:	f241 0105 	movw	r1, #4101	; 0x1005
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7fe f8f5 	bl	800516c <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
 8006f82:	2300      	movs	r3, #0
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	2300      	movs	r3, #0
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4a21      	ldr	r2, [pc, #132]	; (8007014 <CO_SYNC_init+0x188>)
 8006f8e:	f241 0106 	movw	r1, #4102	; 0x1006
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7fe f8ea 	bl	800516c <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4a1d      	ldr	r2, [pc, #116]	; (8007018 <CO_SYNC_init+0x18c>)
 8006fa4:	f241 0119 	movw	r1, #4121	; 0x1019
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7fe f8df 	bl	800516c <CO_OD_configure>

    /* configure SYNC CAN reception */
    ret = CO_CANrxBufferInit(
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	895a      	ldrh	r2, [r3, #10]
 8006fb2:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8006fb4:	4b19      	ldr	r3, [pc, #100]	; (800701c <CO_SYNC_init+0x190>)
 8006fb6:	9302      	str	r3, [sp, #8]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fc6:	f002 fa43 	bl	8009450 <CO_CANrxBufferInit>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	75bb      	strb	r3, [r7, #22]
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	895a      	ldrh	r2, [r3, #10]
 8006fe0:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	2300      	movs	r3, #0
 8006fec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006fee:	f002 fa85 	bl	80094fc <CO_CANtxBufferInit>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	63da      	str	r2, [r3, #60]	; 0x3c
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <CO_SYNC_init+0x178>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007000:	23ff      	movs	r3, #255	; 0xff
 8007002:	75bb      	strb	r3, [r7, #22]
    }

    return ret;
 8007004:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	08006c69 	.word	0x08006c69
 8007014:	08006d85 	.word	0x08006d85
 8007018:	08006df5 	.word	0x08006df5
 800701c:	08006bb1 	.word	0x08006bb1

08007020 <CO_SYNC_process>:
CO_SYNC_status_t CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength,
        uint32_t               *timerNext_us)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
    CO_SYNC_status_t ret = CO_SYNC_NONE;
 800702e:	2300      	movs	r3, #0
 8007030:	77fb      	strb	r3, [r7, #31]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f993 3000 	ldrsb.w	r3, [r3]
 800703a:	2b05      	cmp	r3, #5
 800703c:	d006      	beq.n	800704c <CO_SYNC_process+0x2c>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f993 3000 	ldrsb.w	r3, [r3]
 8007046:	2b7f      	cmp	r3, #127	; 0x7f
 8007048:	f040 80a8 	bne.w	800719c <CO_SYNC_process+0x17c>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	4413      	add	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	429a      	cmp	r2, r3
 800705e:	d902      	bls.n	8007066 <CO_SYNC_process+0x46>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	621a      	str	r2, [r3, #32]

        /* was SYNC just received */
        if(CO_FLAG_READ(SYNC->CANrxNew)){
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <CO_SYNC_process+0x5e>
            SYNC->timer = 0;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	621a      	str	r2, [r3, #32]
            ret = CO_SYNC_RECEIVED;
 8007074:	2301      	movs	r3, #1
 8007076:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	619a      	str	r2, [r3, #24]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	7a1b      	ldrb	r3, [r3, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d045      	beq.n	8007112 <CO_SYNC_process+0xf2>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d041      	beq.n	8007112 <CO_SYNC_process+0xf2>
            if(SYNC->timer >= SYNC->periodTime){
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1a      	ldr	r2, [r3, #32]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	429a      	cmp	r2, r3
 8007098:	d32a      	bcc.n	80070f0 <CO_SYNC_process+0xd0>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	7f5b      	ldrb	r3, [r3, #29]
 800709e:	3301      	adds	r3, #1
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	775a      	strb	r2, [r3, #29]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	7f5a      	ldrb	r2, [r3, #29]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	7d1b      	ldrb	r3, [r3, #20]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d902      	bls.n	80070b8 <CO_SYNC_process+0x98>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	775a      	strb	r2, [r3, #29]
                SYNC->timer = 0;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	621a      	str	r2, [r3, #32]
                ret = CO_SYNC_RECEIVED;
 80070be:	2301      	movs	r3, #1
 80070c0:	77fb      	strb	r3, [r7, #31]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	7f1b      	ldrb	r3, [r3, #28]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bf0c      	ite	eq
 80070ca:	2301      	moveq	r3, #1
 80070cc:	2300      	movne	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	771a      	strb	r2, [r3, #28]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	7f52      	ldrb	r2, [r2, #29]
 80070de:	715a      	strb	r2, [r3, #5]
                CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e8:	4619      	mov	r1, r3
 80070ea:	4610      	mov	r0, r2
 80070ec:	f002 fa46 	bl	800957c <CO_CANsend>
            }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_TIMERNEXT
            /* Calculate when next SYNC needs to be sent */
            if(timerNext_us != NULL){
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00d      	beq.n	8007112 <CO_SYNC_process+0xf2>
                uint32_t diff = SYNC->periodTime - SYNC->timer;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	617b      	str	r3, [r7, #20]
                if(*timerNext_us > diff){
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	429a      	cmp	r2, r3
 800710a:	d202      	bcs.n	8007112 <CO_SYNC_process+0xf2>
                    *timerNext_us = diff;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	601a      	str	r2, [r3, #0]
            }
#endif
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d012      	beq.n	800713e <CO_SYNC_process+0x11e>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	d209      	bcs.n	8007136 <CO_SYNC_process+0x116>
                if(SYNC->curentSyncTimeIsInsideWindow){
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	7d5b      	ldrb	r3, [r3, #21]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <CO_SYNC_process+0x10e>
                    ret = CO_SYNC_OUTSIDE_WINDOW;
 800712a:	2302      	movs	r3, #2
 800712c:	77fb      	strb	r3, [r7, #31]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	755a      	strb	r2, [r3, #21]
 8007134:	e006      	b.n	8007144 <CO_SYNC_process+0x124>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	755a      	strb	r2, [r3, #21]
 800713c:	e002      	b.n	8007144 <CO_SYNC_process+0x124>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	755a      	strb	r2, [r3, #21]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d02b      	beq.n	80071a4 <CO_SYNC_process+0x184>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f993 3000 	ldrsb.w	r3, [r3]
 8007154:	2b05      	cmp	r3, #5
 8007156:	d125      	bne.n	80071a4 <CO_SYNC_process+0x184>
            if(SYNC->timer > SYNC->periodTimeoutTime) {
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a1a      	ldr	r2, [r3, #32]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	429a      	cmp	r2, r3
 8007162:	d909      	bls.n	8007178 <CO_SYNC_process+0x158>
                CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8007170:	2118      	movs	r1, #24
 8007172:	f7fb fbb2 	bl	80028da <CO_errorReport>
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 8007176:	e015      	b.n	80071a4 <CO_SYNC_process+0x184>
            }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_TIMERNEXT
            else if(timerNext_us != NULL) {
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d012      	beq.n	80071a4 <CO_SYNC_process+0x184>
                uint32_t diff = SYNC->periodTimeoutTime - SYNC->timer;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	691a      	ldr	r2, [r3, #16]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	613b      	str	r3, [r7, #16]
                if(*timerNext_us > diff){
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	429a      	cmp	r2, r3
 8007192:	d207      	bcs.n	80071a4 <CO_SYNC_process+0x184>
                    *timerNext_us = diff;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	601a      	str	r2, [r3, #0]
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 800719a:	e003      	b.n	80071a4 <CO_SYNC_process+0x184>
            }
#endif
        }
    }
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	619a      	str	r2, [r3, #24]
 80071a2:	e000      	b.n	80071a6 <CO_SYNC_process+0x186>
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 80071a4:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <CO_SYNC_process+0x1a6>
        CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071b6:	f248 2240 	movw	r2, #33344	; 0x8240
 80071ba:	2119      	movs	r1, #25
 80071bc:	f7fb fb8d 	bl	80028da <CO_errorReport>
        SYNC->receiveError = 0U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    return ret;
 80071c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3720      	adds	r7, #32
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <CO_TIME_receive>:
 * Read received message from CAN module.
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received.
 */
static void CO_TIME_receive(void *object, void *msg){
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME;
    CO_NMT_internalState_t operState;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071e0:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	3321      	adds	r3, #33	; 0x21
 80071e6:	613b      	str	r3, [r7, #16]

    TIME = (CO_TIME_t*)object;   /* this is the correct pointer type of the first argument */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	60fb      	str	r3, [r7, #12]
    operState = *TIME->operatingState;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
 80071f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80071f8:	2b05      	cmp	r3, #5
 80071fa:	d003      	beq.n	8007204 <CO_TIME_receive+0x34>
 80071fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007200:	2b7f      	cmp	r3, #127	; 0x7f
 8007202:	d114      	bne.n	800722e <CO_TIME_receive+0x5e>
        // Process Time from msg buffer
        memcpy(&TIME->Time.ullValue, data, DLC);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3340      	adds	r3, #64	; 0x40
 8007208:	7dfa      	ldrb	r2, [r7, #23]
 800720a:	6939      	ldr	r1, [r7, #16]
 800720c:	4618      	mov	r0, r3
 800720e:	f00f fcd7 	bl	8016bc0 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	615a      	str	r2, [r3, #20]

#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_CALLBACK_PRE
        /* Optional signal to RTOS, which can resume task, which handles TIME. */
        if(TIME->pFunctSignalPre != NULL) {
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <CO_TIME_receive+0x68>
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007228:	4610      	mov	r0, r2
 800722a:	4798      	blx	r3
        if(TIME->pFunctSignalPre != NULL) {
 800722c:	e004      	b.n	8007238 <CO_TIME_receive+0x68>
        }
#endif
    }
    else{
        TIME->receiveError = (uint16_t)DLC;
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	839a      	strh	r2, [r3, #28]
    }
}
 8007236:	bf00      	nop
 8007238:	bf00      	nop
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <CO_TIME_init>:
        uint32_t                TIMECyclePeriod,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af04      	add	r7, sp, #16
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800724e:	2300      	movs	r3, #0
 8007250:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(TIME==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00e      	beq.n	8007276 <CO_TIME_init+0x36>
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <CO_TIME_init+0x36>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <CO_TIME_init+0x36>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <CO_TIME_init+0x36>
 800726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <CO_TIME_init+0x36>
    CANdevRx==NULL || CANdevTx==NULL){
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	2b00      	cmp	r3, #0
 8007274:	d102      	bne.n	800727c <CO_TIME_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007276:	f04f 33ff 	mov.w	r3, #4294967295
 800727a:	e075      	b.n	8007368 <CO_TIME_init+0x128>
    }

    /* Configure object variables */
    TIME->isConsumer = (COB_ID_TIMEMessage&0x80000000L) ? true : false;
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	0fdb      	lsrs	r3, r3, #31
 8007280:	b2da      	uxtb	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	721a      	strb	r2, [r3, #8]
    TIME->isProducer = (COB_ID_TIMEMessage&0x40000000L) ? true : false;
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	0f9b      	lsrs	r3, r3, #30
 800728a:	b2db      	uxtb	r3, r3
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	b2da      	uxtb	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	725a      	strb	r2, [r3, #9]
    TIME->COB_ID = COB_ID_TIMEMessage&0x7FF; // 11 bit ID
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	b29b      	uxth	r3, r3
 800729a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	815a      	strh	r2, [r3, #10]

    TIME->periodTime = TIMECyclePeriod;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a8:	60da      	str	r2, [r3, #12]
    TIME->periodTimeoutTime = TIMECyclePeriod / 2 * 3;
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	085a      	lsrs	r2, r3, #1
 80072ae:	4613      	mov	r3, r2
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	441a      	add	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	611a      	str	r2, [r3, #16]
    /* overflow? */
    if(TIME->periodTimeoutTime < TIMECyclePeriod)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072be:	429a      	cmp	r2, r3
 80072c0:	d903      	bls.n	80072ca <CO_TIME_init+0x8a>
        TIME->periodTimeoutTime = 0xFFFFFFFFL;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f04f 32ff 	mov.w	r2, #4294967295
 80072c8:	611a      	str	r2, [r3, #16]

    CO_FLAG_CLEAR(TIME->CANrxNew);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	615a      	str	r2, [r3, #20]
    TIME->timer = 0;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	619a      	str	r2, [r3, #24]
    TIME->receiveError = 0U;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	839a      	strh	r2, [r3, #28]

    TIME->em = em;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	601a      	str	r2, [r3, #0]
    TIME->operatingState = operatingState;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	605a      	str	r2, [r3, #4]

#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_CALLBACK_PRE
    TIME->pFunctSignalPre = NULL;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	621a      	str	r2, [r3, #32]
    TIME->functSignalObjectPre = NULL;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	625a      	str	r2, [r3, #36]	; 0x24
#endif


    /* configure TIME consumer message reception */
    TIME->CANdevRx = CANdevRx;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f8:	629a      	str	r2, [r3, #40]	; 0x28
    TIME->CANdevRxIdx = CANdevRxIdx;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80072fe:	859a      	strh	r2, [r3, #44]	; 0x2c
	if (TIME->isConsumer) {
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	7a1b      	ldrb	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00f      	beq.n	8007328 <CO_TIME_init+0xe8>
        ret = CO_CANrxBufferInit(
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	895a      	ldrh	r2, [r3, #10]
 800730c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800730e:	4b18      	ldr	r3, [pc, #96]	; (8007370 <CO_TIME_init+0x130>)
 8007310:	9302      	str	r3, [sp, #8]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	2300      	movs	r3, #0
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800731e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007320:	f002 f896 	bl	8009450 <CO_CANrxBufferInit>
 8007324:	4603      	mov	r3, r0
 8007326:	75fb      	strb	r3, [r7, #23]
                (void*)TIME,            /* object passed to receive function */
                CO_TIME_receive);       /* this function will process received message */
    }

    /* configure TIME producer message transmission */
    TIME->CANdevTx = CANdevTx;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732c:	631a      	str	r2, [r3, #48]	; 0x30
    TIME->CANdevTxIdx = CANdevTxIdx;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007332:	869a      	strh	r2, [r3, #52]	; 0x34
    if (TIME->isProducer) {
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	7a5b      	ldrb	r3, [r3, #9]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d013      	beq.n	8007364 <CO_TIME_init+0x124>
        TIME->TXbuff = CO_CANtxBufferInit(
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	895a      	ldrh	r2, [r3, #10]
 8007340:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8007342:	2300      	movs	r3, #0
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	2306      	movs	r3, #6
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	2300      	movs	r3, #0
 800734c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800734e:	f002 f8d5 	bl	80094fc <CO_CANtxBufferInit>
 8007352:	4602      	mov	r2, r0
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	639a      	str	r2, [r3, #56]	; 0x38
            TIME->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            TIME_MSG_LENGTH,        /* number of data bytes */
            0);                     /* synchronous message flag bit */

        if (TIME->TXbuff == NULL) {
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <CO_TIME_init+0x124>
            ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007360:	23ff      	movs	r3, #255	; 0xff
 8007362:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
 8007364:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	080071d1 	.word	0x080071d1

08007374 <CO_TIME_process>:

/******************************************************************************/
uint8_t CO_TIME_process(
        CO_TIME_t              *TIME,
        uint32_t                timeDifference_us)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
    uint8_t ret = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*TIME->operatingState == CO_NMT_OPERATIONAL || *TIME->operatingState == CO_NMT_PRE_OPERATIONAL){
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f993 3000 	ldrsb.w	r3, [r3]
 800738a:	2b05      	cmp	r3, #5
 800738c:	d005      	beq.n	800739a <CO_TIME_process+0x26>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f993 3000 	ldrsb.w	r3, [r3]
 8007396:	2b7f      	cmp	r3, #127	; 0x7f
 8007398:	d162      	bne.n	8007460 <CO_TIME_process+0xec>
        /* update TIME timer, no overflow */
        uint32_t timeDifference_ms = (timeDifference_us+500) / 1000; //this should be optimized
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80073a0:	4a3c      	ldr	r2, [pc, #240]	; (8007494 <CO_TIME_process+0x120>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	099b      	lsrs	r3, r3, #6
 80073a8:	613b      	str	r3, [r7, #16]
        timerNew = TIME->timer + timeDifference_ms;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	4413      	add	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]
        if(timerNew > TIME->timer)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d902      	bls.n	80073c4 <CO_TIME_process+0x50>
            TIME->timer = timerNew;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	619a      	str	r2, [r3, #24]

        /* was TIME just received */
        if(CO_FLAG_READ(TIME->CANrxNew)){
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d007      	beq.n	80073dc <CO_TIME_process+0x68>
            TIME->timer = 0;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	619a      	str	r2, [r3, #24]
            ret = 1;
 80073d2:	2301      	movs	r3, #1
 80073d4:	75fb      	strb	r3, [r7, #23]
            CO_FLAG_CLEAR(TIME->CANrxNew);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	615a      	str	r2, [r3, #20]
        }

        /* TIME producer */
        if(TIME->isProducer && TIME->periodTime){
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7a5b      	ldrb	r3, [r3, #9]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01f      	beq.n	8007424 <CO_TIME_process+0xb0>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01b      	beq.n	8007424 <CO_TIME_process+0xb0>
            if(TIME->timer >= TIME->periodTime){
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699a      	ldr	r2, [r3, #24]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d315      	bcc.n	8007424 <CO_TIME_process+0xb0>
                TIME->timer = 0;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	619a      	str	r2, [r3, #24]
                ret = 1;
 80073fe:	2301      	movs	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
                memcpy(TIME->TXbuff->data, &TIME->Time.ullValue, TIME_MSG_LENGTH);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	1d58      	adds	r0, r3, #5
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3340      	adds	r3, #64	; 0x40
 800740c:	2206      	movs	r2, #6
 800740e:	4619      	mov	r1, r3
 8007410:	f00f fbd6 	bl	8016bc0 <memcpy>
                CO_CANsend(TIME->CANdevTx, TIME->TXbuff);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	4619      	mov	r1, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f002 f8ac 	bl	800957c <CO_CANsend>
            }
        }

        /* Verify TIME timeout if node is consumer */
        if(TIME->isConsumer && TIME->periodTime && TIME->timer > TIME->periodTimeoutTime
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	7a1b      	ldrb	r3, [r3, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01d      	beq.n	8007468 <CO_TIME_process+0xf4>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d019      	beq.n	8007468 <CO_TIME_process+0xf4>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699a      	ldr	r2, [r3, #24]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	429a      	cmp	r2, r3
 800743e:	d913      	bls.n	8007468 <CO_TIME_process+0xf4>
        && *TIME->operatingState == CO_NMT_OPERATIONAL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f993 3000 	ldrsb.w	r3, [r3]
 8007448:	2b05      	cmp	r3, #5
 800744a:	d10d      	bne.n	8007468 <CO_TIME_process+0xf4>
            CO_errorReport(TIME->em, CO_EM_TIME_TIMEOUT, CO_EMC_COMMUNICATION, TIME->timer);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8007458:	2109      	movs	r1, #9
 800745a:	f7fb fa3e 	bl	80028da <CO_errorReport>
    if(*TIME->operatingState == CO_NMT_OPERATIONAL || *TIME->operatingState == CO_NMT_PRE_OPERATIONAL){
 800745e:	e003      	b.n	8007468 <CO_TIME_process+0xf4>
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	615a      	str	r2, [r3, #20]
 8007466:	e000      	b.n	800746a <CO_TIME_process+0xf6>
    if(*TIME->operatingState == CO_NMT_OPERATIONAL || *TIME->operatingState == CO_NMT_PRE_OPERATIONAL){
 8007468:	bf00      	nop
    }

    /* verify error from receive function */
    if(TIME->receiveError != 0U){
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	8b9b      	ldrh	r3, [r3, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <CO_TIME_process+0x116>
        CO_errorReport(TIME->em, CO_EM_TIME_LENGTH, CO_EMC_TIME_DATA_LENGTH, (uint32_t)TIME->receiveError);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	8b9b      	ldrh	r3, [r3, #28]
 800747a:	f248 2260 	movw	r2, #33376	; 0x8260
 800747e:	210a      	movs	r1, #10
 8007480:	f7fb fa2b 	bl	80028da <CO_errorReport>
        TIME->receiveError = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	839a      	strh	r2, [r3, #28]
    }

    return ret;
 800748a:	7dfb      	ldrb	r3, [r7, #23]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	10624dd3 	.word	0x10624dd3

08007498 <crc16_ccitt>:
/******************************************************************************/
unsigned short crc16_ccitt(
        const unsigned char     block[],
        unsigned int            blockLength,
        unsigned short          crc)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	80fb      	strh	r3, [r7, #6]
    unsigned int i;

    for(i=0U; i<blockLength; i++){
 80074a6:	2300      	movs	r3, #0
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	e015      	b.n	80074d8 <crc16_ccitt+0x40>
        unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
 80074ac:	88fb      	ldrh	r3, [r7, #6]
 80074ae:	0a1b      	lsrs	r3, r3, #8
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68f9      	ldr	r1, [r7, #12]
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	440b      	add	r3, r1
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	4053      	eors	r3, r2
 80074be:	827b      	strh	r3, [r7, #18]
        crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
 80074c0:	88fb      	ldrh	r3, [r7, #6]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	8a7b      	ldrh	r3, [r7, #18]
 80074c8:	4909      	ldr	r1, [pc, #36]	; (80074f0 <crc16_ccitt+0x58>)
 80074ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80074ce:	4053      	eors	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
    for(i=0U; i<blockLength; i++){
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	3301      	adds	r3, #1
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d3e5      	bcc.n	80074ac <crc16_ccitt+0x14>
    }
    return crc;
 80074e0:	88fb      	ldrh	r3, [r7, #6]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	08018274 	.word	0x08018274

080074f4 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bfb8      	it	lt
 8007502:	425b      	neglt	r3, r3
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <PP_active>:
	ProfPosMode.taskQueue = xQueueCreate(16, sizeof(MotionMsgItem_t));
	PP_reset();
}

void PP_active()
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
	/* Reset task queue*/
	taskENTER_CRITICAL();
 8007514:	f00e fc06 	bl	8015d24 <vPortEnterCritical>
	xQueueReset(ProfPosMode.taskQueue);
 8007518:	4b08      	ldr	r3, [pc, #32]	; (800753c <PP_active+0x2c>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2100      	movs	r1, #0
 800751e:	4618      	mov	r0, r3
 8007520:	f00b fff0 	bl	8013504 <xQueueGenericReset>
	taskEXIT_CRITICAL();
 8007524:	f00e fc2e 	bl	8015d84 <vPortExitCritical>

	ProfPosMode.status = DS402_PP_Idle;
 8007528:	4b04      	ldr	r3, [pc, #16]	; (800753c <PP_active+0x2c>)
 800752a:	2200      	movs	r2, #0
 800752c:	701a      	strb	r2, [r3, #0]
	ProfPosMode.holdState = MHOLD_Close;
 800752e:	4b03      	ldr	r3, [pc, #12]	; (800753c <PP_active+0x2c>)
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2020 	strb.w	r2, [r3, #32]
}
 8007536:	bf00      	nop
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20000af8 	.word	0x20000af8

08007540 <_Z7PP_haltv>:

void PP_halt()
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 8007546:	f00e fbed 	bl	8015d24 <vPortEnterCritical>
	xQueueReset(ProfPosMode.taskQueue);
 800754a:	4b13      	ldr	r3, [pc, #76]	; (8007598 <_Z7PP_haltv+0x58>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2100      	movs	r1, #0
 8007550:	4618      	mov	r0, r3
 8007552:	f00b ffd7 	bl	8013504 <xQueueGenericReset>

	MotionMsgItem_t item;

	item.code     = MMC_MotionHalt;
 8007556:	f240 2306 	movw	r3, #518	; 0x206
 800755a:	80bb      	strh	r3, [r7, #4]
	item.position = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	60bb      	str	r3, [r7, #8]
	item.velocity = 0;
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
	item.acceleration = g_MotionCtrl.dece;
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <_Z7PP_haltv+0x5c>)
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007572:	edc7 7a04 	vstr	s15, [r7, #16]

	xQueueSend(ProfPosMode.taskQueue, &item, 0);
 8007576:	4b08      	ldr	r3, [pc, #32]	; (8007598 <_Z7PP_haltv+0x58>)
 8007578:	6858      	ldr	r0, [r3, #4]
 800757a:	1d39      	adds	r1, r7, #4
 800757c:	2300      	movs	r3, #0
 800757e:	2200      	movs	r2, #0
 8007580:	f00c f936 	bl	80137f0 <xQueueGenericSend>

	taskEXIT_CRITICAL();
 8007584:	f00e fbfe 	bl	8015d84 <vPortExitCritical>

	ProfPosMode.status = DS402_PP_Halt;
 8007588:	4b03      	ldr	r3, [pc, #12]	; (8007598 <_Z7PP_haltv+0x58>)
 800758a:	2202      	movs	r2, #2
 800758c:	701a      	strb	r2, [r3, #0]
}
 800758e:	bf00      	nop
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000af8 	.word	0x20000af8
 800759c:	20000a44 	.word	0x20000a44

080075a0 <_Z13PP_updateTaskh>:

void PP_updateTask(uint8_t absOrRel)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 80075aa:	f00e fbbb 	bl	8015d24 <vPortEnterCritical>

	xQueueReset(ProfPosMode.taskQueue);
 80075ae:	4b14      	ldr	r3, [pc, #80]	; (8007600 <_Z13PP_updateTaskh+0x60>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f00b ffa5 	bl	8013504 <xQueueGenericReset>

	MotionMsgItem_t item;

	item.position = g_MotionCtrl.targetPos;
 80075ba:	4b12      	ldr	r3, [pc, #72]	; (8007604 <_Z13PP_updateTaskh+0x64>)
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	613b      	str	r3, [r7, #16]
	item.velocity = g_MotionCtrl.profileVel;
 80075c0:	4b10      	ldr	r3, [pc, #64]	; (8007604 <_Z13PP_updateTaskh+0x64>)
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	ee07 3a90 	vmov	s15, r3
 80075c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075cc:	edc7 7a05 	vstr	s15, [r7, #20]
	item.acceleration = g_MotionCtrl.acce;
 80075d0:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <_Z13PP_updateTaskh+0x64>)
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075dc:	edc7 7a06 	vstr	s15, [r7, #24]
	item.abs  = absOrRel;
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	77bb      	strb	r3, [r7, #30]

	xQueueSend(ProfPosMode.taskQueue, &item, 0);
 80075e4:	4b06      	ldr	r3, [pc, #24]	; (8007600 <_Z13PP_updateTaskh+0x60>)
 80075e6:	6858      	ldr	r0, [r3, #4]
 80075e8:	f107 010c 	add.w	r1, r7, #12
 80075ec:	2300      	movs	r3, #0
 80075ee:	2200      	movs	r2, #0
 80075f0:	f00c f8fe 	bl	80137f0 <xQueueGenericSend>

	taskEXIT_CRITICAL();
 80075f4:	f00e fbc6 	bl	8015d84 <vPortExitCritical>
}
 80075f8:	bf00      	nop
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20000af8 	.word	0x20000af8
 8007604:	20000a44 	.word	0x20000a44

08007608 <_Z13PP_addNewTaskh>:

void PP_addNewTask(uint8_t absOrRel)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 8007612:	f00e fb87 	bl	8015d24 <vPortEnterCritical>
	if (uxQueueGetQueueNumber(ProfPosMode.taskQueue) >= 16){
 8007616:	4b18      	ldr	r3, [pc, #96]	; (8007678 <_Z13PP_addNewTaskh+0x70>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	4618      	mov	r0, r3
 800761c:	f00c fd78 	bl	8014110 <uxQueueGetQueueNumber>
 8007620:	4603      	mov	r3, r0
 8007622:	2b0f      	cmp	r3, #15
 8007624:	bf8c      	ite	hi
 8007626:	2301      	movhi	r3, #1
 8007628:	2300      	movls	r3, #0
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d11f      	bne.n	8007670 <_Z13PP_addNewTaskh+0x68>
		return;
	}

	MotionMsgItem_t item;

	item.position = g_MotionCtrl.targetPos;
 8007630:	4b12      	ldr	r3, [pc, #72]	; (800767c <_Z13PP_addNewTaskh+0x74>)
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	613b      	str	r3, [r7, #16]
	item.velocity = g_MotionCtrl.profileVel;
 8007636:	4b11      	ldr	r3, [pc, #68]	; (800767c <_Z13PP_addNewTaskh+0x74>)
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007642:	edc7 7a05 	vstr	s15, [r7, #20]
	item.acceleration = g_MotionCtrl.acce;
 8007646:	4b0d      	ldr	r3, [pc, #52]	; (800767c <_Z13PP_addNewTaskh+0x74>)
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007652:	edc7 7a06 	vstr	s15, [r7, #24]
	item.abs  = absOrRel;
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	77bb      	strb	r3, [r7, #30]

	xQueueSend(ProfPosMode.taskQueue, &item, 0);
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <_Z13PP_addNewTaskh+0x70>)
 800765c:	6858      	ldr	r0, [r3, #4]
 800765e:	f107 010c 	add.w	r1, r7, #12
 8007662:	2300      	movs	r3, #0
 8007664:	2200      	movs	r2, #0
 8007666:	f00c f8c3 	bl	80137f0 <xQueueGenericSend>

	taskEXIT_CRITICAL();
 800766a:	f00e fb8b 	bl	8015d84 <vPortExitCritical>
 800766e:	e000      	b.n	8007672 <_Z13PP_addNewTaskh+0x6a>
		return;
 8007670:	bf00      	nop
}
 8007672:	3720      	adds	r7, #32
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20000af8 	.word	0x20000af8
 800767c:	20000a44 	.word	0x20000a44

08007680 <PP_exec>:

uint16_t PP_exec(uint16_t controlWord, uint8_t newSetPoint)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	460a      	mov	r2, r1
 800768a:	80fb      	strh	r3, [r7, #6]
 800768c:	4613      	mov	r3, r2
 800768e:	717b      	strb	r3, [r7, #5]
	uint16_t ret = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	81bb      	strh	r3, [r7, #12]

	uint8_t changeSetImmediately = 0;
 8007694:	2300      	movs	r3, #0
 8007696:	73fb      	strb	r3, [r7, #15]
	uint8_t abs  = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	73bb      	strb	r3, [r7, #14]

	/* Halt bit 8*/
	if (controlWord & 0x100){
 800769c:	88fb      	ldrh	r3, [r7, #6]
 800769e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d012      	beq.n	80076cc <PP_exec+0x4c>
		/* Build a halt task*/
		/* motion halt with deceleration*/
		PP_halt();
 80076a6:	f7ff ff4b 	bl	8007540 <_Z7PP_haltv>

		/* Reset the ack flag, bit 12*/
		g_MotionCtrl.statusWord &= ~0x1000;
 80076aa:	4b1e      	ldr	r3, [pc, #120]	; (8007724 <PP_exec+0xa4>)
 80076ac:	885b      	ldrh	r3, [r3, #2]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <PP_exec+0xa4>)
 80076b8:	805a      	strh	r2, [r3, #2]

		/* Reset the reach flag, bit 10*/
		g_MotionCtrl.statusWord &= ~0x400;
 80076ba:	4b1a      	ldr	r3, [pc, #104]	; (8007724 <PP_exec+0xa4>)
 80076bc:	885b      	ldrh	r3, [r3, #2]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	4b17      	ldr	r3, [pc, #92]	; (8007724 <PP_exec+0xa4>)
 80076c8:	805a      	strh	r2, [r3, #2]
 80076ca:	e025      	b.n	8007718 <PP_exec+0x98>
	}else{
		/* New set position bit 4*/
		if (!newSetPoint){
 80076cc:	797b      	ldrb	r3, [r7, #5]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d108      	bne.n	80076e4 <PP_exec+0x64>
			/* Reset the ack flag, bit 12*/
			g_MotionCtrl.statusWord &= ~0x1000;
 80076d2:	4b14      	ldr	r3, [pc, #80]	; (8007724 <PP_exec+0xa4>)
 80076d4:	885b      	ldrh	r3, [r3, #2]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076dc:	b29a      	uxth	r2, r3
 80076de:	4b11      	ldr	r3, [pc, #68]	; (8007724 <PP_exec+0xa4>)
 80076e0:	805a      	strh	r2, [r3, #2]
 80076e2:	e019      	b.n	8007718 <PP_exec+0x98>
		}else{

			/* Change set immediately bit 5*/
			if (controlWord & 0x20){
 80076e4:	88fb      	ldrh	r3, [r7, #6]
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <PP_exec+0x72>
				/*Set the motion posqueue pop position immediately*/
				changeSetImmediately = 1;
 80076ee:	2301      	movs	r3, #1
 80076f0:	73fb      	strb	r3, [r7, #15]
			}

			/* Absolution or relative position*/
			if (!(controlWord & 0x40)){
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <PP_exec+0x80>
				abs = 1;
 80076fc:	2301      	movs	r3, #1
 80076fe:	73bb      	strb	r3, [r7, #14]
			}

			if (changeSetImmediately){
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <PP_exec+0x90>
				/* Replace the current motion */
				PP_updateTask(abs);
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff ff49 	bl	80075a0 <_Z13PP_updateTaskh>
 800770e:	e003      	b.n	8007718 <PP_exec+0x98>
			}else{
				/* Insert an new task*/
				PP_addNewTask(abs);
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff ff78 	bl	8007608 <_Z13PP_addNewTaskh>
			}
		}
	}

	return ret;
 8007718:	89bb      	ldrh	r3, [r7, #12]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000a44 	.word	0x20000a44

08007728 <_Z17PP_isTaskTimeoverP16MT_RequestBlock_>:

boolean_T PP_isTaskTimeover(MT_RequestBlock* req)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
	return PosProfile_StepOver(req->inhibittime);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	4618      	mov	r0, r3
 8007736:	f004 f99b 	bl	800ba70 <PosProfile_StepOver>
 800773a:	4603      	mov	r3, r0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <_Z8PP_reachP16MT_RequestBlock_>:

void PP_reach(MT_RequestBlock* req)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
	MOTOR_stop();
 800774c:	f002 ff04 	bl	800a558 <MOTOR_stop>

	if (ProfPosMode.status != DS402_PP_Halt){
 8007750:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <_Z8PP_reachP16MT_RequestBlock_+0x40>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b02      	cmp	r3, #2
 8007756:	d007      	beq.n	8007768 <_Z8PP_reachP16MT_RequestBlock_+0x24>
		/* Set the status word bit 10*/
		g_MotionCtrl.statusWord |= 0x400;
 8007758:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <_Z8PP_reachP16MT_RequestBlock_+0x44>)
 800775a:	885b      	ldrh	r3, [r3, #2]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007762:	b29a      	uxth	r2, r3
 8007764:	4b08      	ldr	r3, [pc, #32]	; (8007788 <_Z8PP_reachP16MT_RequestBlock_+0x44>)
 8007766:	805a      	strh	r2, [r3, #2]
	}

	ProfPosMode.status = DS402_PP_Idle;
 8007768:	4b06      	ldr	r3, [pc, #24]	; (8007784 <_Z8PP_reachP16MT_RequestBlock_+0x40>)
 800776a:	2200      	movs	r2, #0
 800776c:	701a      	strb	r2, [r3, #0]
	ProfPosMode.holdState = MHOLD_Close;
 800776e:	4b05      	ldr	r3, [pc, #20]	; (8007784 <_Z8PP_reachP16MT_RequestBlock_+0x40>)
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2020 	strb.w	r2, [r3, #32]

	req->state = MRS_Empty;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]
}
 800777c:	bf00      	nop
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20000af8 	.word	0x20000af8
 8007788:	20000a44 	.word	0x20000a44

0800778c <_Z10PP_isReachP16MT_RequestBlock_>:

boolean_T PP_isReach(MT_RequestBlock* req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	if (ProfPosMode.status == DS402_PP_Halt){
 8007794:	4b19      	ldr	r3, [pc, #100]	; (80077fc <_Z10PP_isReachP16MT_RequestBlock_+0x70>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d101      	bne.n	80077a0 <_Z10PP_isReachP16MT_RequestBlock_+0x14>
		return true;
 800779c:	2301      	movs	r3, #1
 800779e:	e028      	b.n	80077f2 <_Z10PP_isReachP16MT_RequestBlock_+0x66>
	}

	uint32_t diff = abs(MOTOR_getPosDiff());
 80077a0:	f002 ff76 	bl	800a690 <MOTOR_getPosDiff>
 80077a4:	4603      	mov	r3, r0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff fea4 	bl	80074f4 <_ZSt3absl>
 80077ac:	4603      	mov	r3, r0
 80077ae:	60fb      	str	r3, [r7, #12]
	if (diff <= CO_C402_Params.position_window){
 80077b0:	4b13      	ldr	r3, [pc, #76]	; (8007800 <_Z10PP_isReachP16MT_RequestBlock_+0x74>)
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d817      	bhi.n	80077ea <_Z10PP_isReachP16MT_RequestBlock_+0x5e>
		if (++(req->reachcounter) > CO_C402_Params.position_window_time)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	3301      	adds	r3, #1
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	b25a      	sxtb	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	751a      	strb	r2, [r3, #20]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80077d2:	461a      	mov	r2, r3
 80077d4:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <_Z10PP_isReachP16MT_RequestBlock_+0x74>)
 80077d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077d8:	429a      	cmp	r2, r3
 80077da:	bfcc      	ite	gt
 80077dc:	2301      	movgt	r3, #1
 80077de:	2300      	movle	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d004      	beq.n	80077f0 <_Z10PP_isReachP16MT_RequestBlock_+0x64>
			return true;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e003      	b.n	80077f2 <_Z10PP_isReachP16MT_RequestBlock_+0x66>
	}else{
		/*Reset reach counter*/
		req->reachcounter = 0;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	751a      	strb	r2, [r3, #20]
	}

	return false;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000af8 	.word	0x20000af8
 8007800:	20000a78 	.word	0x20000a78

08007804 <_Z12PP_startTaskP14MotionMsgItem_m>:


void PP_startTask(MotionMsgItem_t* pitem, uint32_t ticks)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
	real32_T ts = (real32_T)ticks / 1000.0f;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	ee07 3a90 	vmov	s15, r3
 8007814:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007818:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8007990 <_Z12PP_startTaskP14MotionMsgItem_m+0x18c>
 800781c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007820:	edc7 7a07 	vstr	s15, [r7, #28]

	/*Current velocity from motor model*/
	real32_T curVel = (real32_T)MOTOR_getSpeed();
 8007824:	f002 feec 	bl	800a600 <MOTOR_getSpeed>
 8007828:	ee07 0a90 	vmov	s15, r0
 800782c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007830:	edc7 7a06 	vstr	s15, [r7, #24]

	uint32_t maxJerk = pitem->acceleration;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	edd3 7a03 	vldr	s15, [r3, #12]
 800783a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783e:	ee17 3a90 	vmov	r3, s15
 8007842:	617b      	str	r3, [r7, #20]

	if (pitem->code == MMC_MotionHalt){
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	f240 2206 	movw	r2, #518	; 0x206
 800784c:	4293      	cmp	r3, r2
 800784e:	d129      	bne.n	80078a4 <_Z12PP_startTaskP14MotionMsgItem_m+0xa0>
		/*Act halt definition, use halt deceleration
		 * start halt motion*/
		PosProfile_StartHalt(curVel/200.0f, maxJerk/200.0f, ts);
 8007850:	edd7 7a06 	vldr	s15, [r7, #24]
 8007854:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007994 <_Z12PP_startTaskP14MotionMsgItem_m+0x190>
 8007858:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007866:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 8007994 <_Z12PP_startTaskP14MotionMsgItem_m+0x190>
 800786a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800786e:	ed97 1a07 	vldr	s2, [r7, #28]
 8007872:	eef0 0a66 	vmov.f32	s1, s13
 8007876:	eeb0 0a47 	vmov.f32	s0, s14
 800787a:	f004 f85d 	bl	800b938 <PosProfile_StartHalt>

		pitem->position = PosProfile_GetTargetPos();
 800787e:	f004 f8db 	bl	800ba38 <PosProfile_GetTargetPos>
 8007882:	eef0 7a40 	vmov.f32	s15, s0
 8007886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800788a:	ee17 2a90 	vmov	r2, s15
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	605a      	str	r2, [r3, #4]
		MOTOR_setRelTarget(pitem->position);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	4618      	mov	r0, r3
 8007898:	f002 febe 	bl	800a618 <MOTOR_setRelTarget>

		ProfPosMode.status = DS402_PP_Halt;
 800789c:	4b3e      	ldr	r3, [pc, #248]	; (8007998 <_Z12PP_startTaskP14MotionMsgItem_m+0x194>)
 800789e:	2202      	movs	r2, #2
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	e061      	b.n	8007968 <_Z12PP_startTaskP14MotionMsgItem_m+0x164>
	}else{
		/*0x6083  accelerate*/
		real32_T maxAcce = pitem->acceleration / 200.0F;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80078aa:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8007994 <_Z12PP_startTaskP14MotionMsgItem_m+0x190>
 80078ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078b2:	edc7 7a04 	vstr	s15, [r7, #16]

		/*0x6081  profile velocity*/
		real32_T maxVel  = pitem->velocity / 200.0F;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80078bc:	eddf 6a35 	vldr	s13, [pc, #212]	; 8007994 <_Z12PP_startTaskP14MotionMsgItem_m+0x190>
 80078c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078c4:	edc7 7a03 	vstr	s15, [r7, #12]

		if (pitem->abs)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	7c9b      	ldrb	r3, [r3, #18]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d005      	beq.n	80078dc <_Z12PP_startTaskP14MotionMsgItem_m+0xd8>
			MOTOR_setAbsTarget(pitem->position);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f002 feb9 	bl	800a64c <MOTOR_setAbsTarget>
 80078da:	e004      	b.n	80078e6 <_Z12PP_startTaskP14MotionMsgItem_m+0xe2>
		else
			MOTOR_setRelTarget(pitem->position);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f002 fe99 	bl	800a618 <MOTOR_setRelTarget>

		pitem->position = MOTOR_getPosDiff();
 80078e6:	f002 fed3 	bl	800a690 <MOTOR_getPosDiff>
 80078ea:	4602      	mov	r2, r0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	605a      	str	r2, [r3, #4]

		/*Motion start from current pos to request position*/
		PosProfile_Start(pitem->position/200.0f,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	ee07 3a90 	vmov	s15, r3
 80078f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078fc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007994 <_Z12PP_startTaskP14MotionMsgItem_m+0x190>
 8007900:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007904:	edd7 7a06 	vldr	s15, [r7, #24]
 8007908:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8007994 <_Z12PP_startTaskP14MotionMsgItem_m+0x190>
 800790c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791a:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8007994 <_Z12PP_startTaskP14MotionMsgItem_m+0x190>
 800791e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8007922:	ed97 3a07 	vldr	s6, [r7, #28]
 8007926:	eef0 2a46 	vmov.f32	s5, s12
 800792a:	ed97 2a04 	vldr	s4, [r7, #16]
 800792e:	edd7 1a03 	vldr	s3, [r7, #12]
 8007932:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 800799c <_Z12PP_startTaskP14MotionMsgItem_m+0x198>
 8007936:	eef0 0a66 	vmov.f32	s1, s13
 800793a:	eeb0 0a47 	vmov.f32	s0, s14
 800793e:	f003 ff93 	bl	800b868 <PosProfile_Start>
						 maxVel, maxAcce, maxJerk/200.0F, ts);

		/*Acknowledge a motion request*/
		/* New set point acknowledged
		* Set status word bit 12*/
		g_MotionCtrl.statusWord |= 0x1000;
 8007942:	4b17      	ldr	r3, [pc, #92]	; (80079a0 <_Z12PP_startTaskP14MotionMsgItem_m+0x19c>)
 8007944:	885b      	ldrh	r3, [r3, #2]
 8007946:	b29b      	uxth	r3, r3
 8007948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800794c:	b29a      	uxth	r2, r3
 800794e:	4b14      	ldr	r3, [pc, #80]	; (80079a0 <_Z12PP_startTaskP14MotionMsgItem_m+0x19c>)
 8007950:	805a      	strh	r2, [r3, #2]

		/* Reset the status word reach target flag, bit10*/
		g_MotionCtrl.statusWord &= ~0x400;
 8007952:	4b13      	ldr	r3, [pc, #76]	; (80079a0 <_Z12PP_startTaskP14MotionMsgItem_m+0x19c>)
 8007954:	885b      	ldrh	r3, [r3, #2]
 8007956:	b29b      	uxth	r3, r3
 8007958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800795c:	b29a      	uxth	r2, r3
 800795e:	4b10      	ldr	r3, [pc, #64]	; (80079a0 <_Z12PP_startTaskP14MotionMsgItem_m+0x19c>)
 8007960:	805a      	strh	r2, [r3, #2]

		ProfPosMode.status = DS402_PP_Running;
 8007962:	4b0d      	ldr	r3, [pc, #52]	; (8007998 <_Z12PP_startTaskP14MotionMsgItem_m+0x194>)
 8007964:	2201      	movs	r2, #1
 8007966:	701a      	strb	r2, [r3, #0]
	}

	/*Setting the current motion request, start inhibit timer*/
	ProfPosMode.reqblock.state = MRS_Running;
 8007968:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <_Z12PP_startTaskP14MotionMsgItem_m+0x194>)
 800796a:	2201      	movs	r2, #1
 800796c:	721a      	strb	r2, [r3, #8]
	ProfPosMode.reqblock.inhibittime = 0;
 800796e:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <_Z12PP_startTaskP14MotionMsgItem_m+0x194>)
 8007970:	2200      	movs	r2, #0
 8007972:	619a      	str	r2, [r3, #24]
	ProfPosMode.reqblock.reachcounter = 0;
 8007974:	4b08      	ldr	r3, [pc, #32]	; (8007998 <_Z12PP_startTaskP14MotionMsgItem_m+0x194>)
 8007976:	2200      	movs	r2, #0
 8007978:	771a      	strb	r2, [r3, #28]

	/*Stop the PID correcting*/
	ProfPosMode.holdState = MHOLD_Close;
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <_Z12PP_startTaskP14MotionMsgItem_m+0x194>)
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2020 	strb.w	r2, [r3, #32]

	/*Start motor*/
	MOTOR_run();
 8007982:	f002 fde3 	bl	800a54c <MOTOR_run>
}
 8007986:	bf00      	nop
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	447a0000 	.word	0x447a0000
 8007994:	43480000 	.word	0x43480000
 8007998:	20000af8 	.word	0x20000af8
 800799c:	00000000 	.word	0x00000000
 80079a0:	20000a44 	.word	0x20000a44

080079a4 <_Z7PP_stepP16MT_RequestBlock_m>:


void PP_step(MT_RequestBlock* req, uint32_t ticks)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
	int32_t perr = MOTOR_getPosDiff();
 80079ae:	f002 fe6f 	bl	800a690 <MOTOR_getPosDiff>
 80079b2:	60f8      	str	r0, [r7, #12]

	PosProfile_Step(perr);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079be:	eeb0 0a67 	vmov.f32	s0, s15
 80079c2:	f003 f837 	bl	800aa34 <PosProfile_Step>
	MOTOR_setSpeed((int32_t)roundf(rtY.CmdVel * 200.0f));
 80079c6:	4b0e      	ldr	r3, [pc, #56]	; (8007a00 <_Z7PP_stepP16MT_RequestBlock_m+0x5c>)
 80079c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80079cc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007a04 <_Z7PP_stepP16MT_RequestBlock_m+0x60>
 80079d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079d4:	eeb0 0a67 	vmov.f32	s0, s15
 80079d8:	f00e ff72 	bl	80168c0 <roundf>
 80079dc:	eef0 7a40 	vmov.f32	s15, s0
 80079e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079e4:	ee17 0a90 	vmov	r0, s15
 80079e8:	f002 fddc 	bl	800a5a4 <MOTOR_setSpeed>

	req->inhibittime += ticks;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691a      	ldr	r2, [r3, #16]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	441a      	add	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	611a      	str	r2, [r3, #16]
}
 80079f8:	bf00      	nop
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000c64 	.word	0x20000c64
 8007a04:	43480000 	.word	0x43480000

08007a08 <_Z11PP_holdStepm>:


void PP_holdStep(uint32_t ticks)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	real32_T ts = ticks/1000.0f;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a1a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8007a58 <_Z11PP_holdStepm+0x50>
 8007a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a22:	edc7 7a03 	vstr	s15, [r7, #12]

	PIDProfile_Step(ts, g_IncSteps);
 8007a26:	4b0d      	ldr	r3, [pc, #52]	; (8007a5c <_Z11PP_holdStepm+0x54>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a32:	eef0 0a67 	vmov.f32	s1, s15
 8007a36:	ed97 0a03 	vldr	s0, [r7, #12]
 8007a3a:	f002 fb7b 	bl	800a134 <PIDProfile_Step>
	MOTOR_setSpeed((int32_t)(rtPIDY.CmdVel));
 8007a3e:	4b08      	ldr	r3, [pc, #32]	; (8007a60 <_Z11PP_holdStepm+0x58>)
 8007a40:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a48:	ee17 0a90 	vmov	r0, s15
 8007a4c:	f002 fdaa 	bl	800a5a4 <MOTOR_setSpeed>
}
 8007a50:	bf00      	nop
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	447a0000 	.word	0x447a0000
 8007a5c:	200006e4 	.word	0x200006e4
 8007a60:	20000c08 	.word	0x20000c08

08007a64 <_Z7PP_holdP16MT_RequestBlock_m>:

void PP_hold(MT_RequestBlock* req, uint32_t ticks)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
	uint32_t diff = abs(MOTOR_getPosDiff());
 8007a6e:	f002 fe0f 	bl	800a690 <MOTOR_getPosDiff>
 8007a72:	4603      	mov	r3, r0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fd3d 	bl	80074f4 <_ZSt3absl>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	60fb      	str	r3, [r7, #12]
	if (diff > CO_C402_Params.position_window){
 8007a7e:	4b16      	ldr	r3, [pc, #88]	; (8007ad8 <_Z7PP_holdP16MT_RequestBlock_m+0x74>)
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d91a      	bls.n	8007abe <_Z7PP_holdP16MT_RequestBlock_m+0x5a>
		if (ProfPosMode.holdState == MHOLD_Close){
 8007a88:	4b14      	ldr	r3, [pc, #80]	; (8007adc <_Z7PP_holdP16MT_RequestBlock_m+0x78>)
 8007a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d115      	bne.n	8007abe <_Z7PP_holdP16MT_RequestBlock_m+0x5a>

			/*Correcting PID start, from current pos to target position*/
			PIDProfile_Start(MOTOR_getTarget(), 1200.0f, 1000.0f, 1000.0f);
 8007a92:	f002 fdf1 	bl	800a678 <MOTOR_getTarget>
 8007a96:	ee07 0a90 	vmov	s15, r0
 8007a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a9e:	eddf 1a10 	vldr	s3, [pc, #64]	; 8007ae0 <_Z7PP_holdP16MT_RequestBlock_m+0x7c>
 8007aa2:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8007ae0 <_Z7PP_holdP16MT_RequestBlock_m+0x7c>
 8007aa6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8007ae4 <_Z7PP_holdP16MT_RequestBlock_m+0x80>
 8007aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8007aae:	f002 fbd1 	bl	800a254 <PIDProfile_Start>
			ProfPosMode.holdState = MHOLD_Open;
 8007ab2:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <_Z7PP_holdP16MT_RequestBlock_m+0x78>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2020 	strb.w	r2, [r3, #32]
			MOTOR_run();
 8007aba:	f002 fd47 	bl	800a54c <MOTOR_run>
		}
	}

	if (ProfPosMode.holdState == MHOLD_Open){
 8007abe:	4b07      	ldr	r3, [pc, #28]	; (8007adc <_Z7PP_holdP16MT_RequestBlock_m+0x78>)
 8007ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d102      	bne.n	8007ace <_Z7PP_holdP16MT_RequestBlock_m+0x6a>
		PP_holdStep(ticks);
 8007ac8:	6838      	ldr	r0, [r7, #0]
 8007aca:	f7ff ff9d 	bl	8007a08 <_Z11PP_holdStepm>
	}
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20000a78 	.word	0x20000a78
 8007adc:	20000af8 	.word	0x20000af8
 8007ae0:	447a0000 	.word	0x447a0000
 8007ae4:	44960000 	.word	0x44960000

08007ae8 <PP_process>:

void PP_process(uint32_t ticks)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b08e      	sub	sp, #56	; 0x38
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	MotionMsgItem_t item;

	if (ProfPosMode.status == DS402_PP_Idle ||
 8007af0:	4b3d      	ldr	r3, [pc, #244]	; (8007be8 <PP_process+0x100>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
			g_MotionCtrl.controlWord & 0x100 /*Halt bit set*/ ||
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00d      	beq.n	8007b14 <PP_process+0x2c>
 8007af8:	4b3c      	ldr	r3, [pc, #240]	; (8007bec <PP_process+0x104>)
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
	if (ProfPosMode.status == DS402_PP_Idle ||
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <PP_process+0x2c>
			g_MotionCtrl.controlWord & 0x20  /*Change on immediate bit set*/){
 8007b06:	4b39      	ldr	r3, [pc, #228]	; (8007bec <PP_process+0x104>)
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f003 0320 	and.w	r3, r3, #32
			g_MotionCtrl.controlWord & 0x100 /*Halt bit set*/ ||
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <PP_process+0x30>
 8007b14:	2301      	movs	r3, #1
 8007b16:	e000      	b.n	8007b1a <PP_process+0x32>
 8007b18:	2300      	movs	r3, #0
	if (ProfPosMode.status == DS402_PP_Idle ||
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d036      	beq.n	8007b8c <PP_process+0xa4>

		/*High priority motion*/
		BaseType_t xTaskWokenByReceive = pdFALSE;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60fb      	str	r3, [r7, #12]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b22:	f3ef 8211 	mrs	r2, BASEPRI
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	62ba      	str	r2, [r7, #40]	; 0x28
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28

		UBaseType_t uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34
		BaseType_t result = xQueueReceiveFromISR(ProfPosMode.taskQueue, &item, &xTaskWokenByReceive);
 8007b3e:	4b2a      	ldr	r3, [pc, #168]	; (8007be8 <PP_process+0x100>)
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f107 020c 	add.w	r2, r7, #12
 8007b46:	f107 0110 	add.w	r1, r7, #16
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f00c fa60 	bl	8014010 <xQueueReceiveFromISR>
 8007b50:	6338      	str	r0, [r7, #48]	; 0x30
 8007b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b5c:	bf00      	nop
		taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);

		if (result == pdPASS) {
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d105      	bne.n	8007b70 <PP_process+0x88>
			/*Motion plan and run*/
			PP_startTask(&item, ticks);
 8007b64:	f107 0310 	add.w	r3, r7, #16
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff fe4a 	bl	8007804 <_Z12PP_startTaskP14MotionMsgItem_m>
		}

		if(xTaskWokenByReceive == pdTRUE) {
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d10a      	bne.n	8007b8c <PP_process+0xa4>
			portYIELD_FROM_ISR (xTaskWokenByReceive);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <PP_process+0xa4>
 8007b7c:	4b1c      	ldr	r3, [pc, #112]	; (8007bf0 <PP_process+0x108>)
 8007b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	f3bf 8f6f 	isb	sy
		}
	}

	/*step*/
	if (ProfPosMode.status != DS402_PP_Idle){
 8007b8c:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <PP_process+0x100>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d022      	beq.n	8007bda <PP_process+0xf2>
		if (ProfPosMode.reqblock.state != MRS_Empty){
 8007b94:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <PP_process+0x100>)
 8007b96:	7a1b      	ldrb	r3, [r3, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01e      	beq.n	8007bda <PP_process+0xf2>
			if (!PP_isTaskTimeover(&ProfPosMode.reqblock)){
 8007b9c:	4815      	ldr	r0, [pc, #84]	; (8007bf4 <PP_process+0x10c>)
 8007b9e:	f7ff fdc3 	bl	8007728 <_Z17PP_isTaskTimeoverP16MT_RequestBlock_>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2301      	moveq	r3, #1
 8007baa:	2300      	movne	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d004      	beq.n	8007bbc <PP_process+0xd4>
				PP_step(&ProfPosMode.reqblock, ticks);
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	480f      	ldr	r0, [pc, #60]	; (8007bf4 <PP_process+0x10c>)
 8007bb6:	f7ff fef5 	bl	80079a4 <_Z7PP_stepP16MT_RequestBlock_m>
				return;
 8007bba:	e012      	b.n	8007be2 <PP_process+0xfa>
			}else{
				if (PP_isReach(&ProfPosMode.reqblock)){
 8007bbc:	480d      	ldr	r0, [pc, #52]	; (8007bf4 <PP_process+0x10c>)
 8007bbe:	f7ff fde5 	bl	800778c <_Z10PP_isReachP16MT_RequestBlock_>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	bf14      	ite	ne
 8007bc8:	2301      	movne	r3, #1
 8007bca:	2300      	moveq	r3, #0
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <PP_process+0xf2>
					PP_reach(&ProfPosMode.reqblock);
 8007bd2:	4808      	ldr	r0, [pc, #32]	; (8007bf4 <PP_process+0x10c>)
 8007bd4:	f7ff fdb6 	bl	8007744 <_Z8PP_reachP16MT_RequestBlock_>
					return;
 8007bd8:	e003      	b.n	8007be2 <PP_process+0xfa>
			}
		}
	}

	/*prepare a correcting phase, and correcting step*/
	PP_hold(&ProfPosMode.reqblock, ticks);
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4805      	ldr	r0, [pc, #20]	; (8007bf4 <PP_process+0x10c>)
 8007bde:	f7ff ff41 	bl	8007a64 <_Z7PP_holdP16MT_RequestBlock_m>
}
 8007be2:	3738      	adds	r7, #56	; 0x38
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000af8 	.word	0x20000af8
 8007bec:	20000a44 	.word	0x20000a44
 8007bf0:	e000ed04 	.word	0xe000ed04
 8007bf4:	20000b00 	.word	0x20000b00

08007bf8 <DS402_buildStatusWordByStatus>:

	g_DSStateData.lastStatusWord = g_DSStateData.statusWord;
}*/

uint16_t DS402_buildStatusWordByStatus(uint16_t curStatusWord, DS402_Status_t status)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	460a      	mov	r2, r1
 8007c02:	80fb      	strh	r3, [r7, #6]
 8007c04:	4613      	mov	r3, r2
 8007c06:	717b      	strb	r3, [r7, #5]
	uint16_t newStatusWord = curStatusWord;
 8007c08:	88fb      	ldrh	r3, [r7, #6]
 8007c0a:	81fb      	strh	r3, [r7, #14]

	switch(status){
 8007c0c:	797b      	ldrb	r3, [r7, #5]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	f200 8089 	bhi.w	8007d28 <DS402_buildStatusWordByStatus+0x130>
 8007c16:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <DS402_buildStatusWordByStatus+0x24>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007ca1 	.word	0x08007ca1
 8007c20:	08007cab 	.word	0x08007cab
 8007c24:	08007cbd 	.word	0x08007cbd
 8007c28:	08007ccf 	.word	0x08007ccf
 8007c2c:	08007ce1 	.word	0x08007ce1
 8007c30:	08007cf3 	.word	0x08007cf3
 8007c34:	08007d29 	.word	0x08007d29
 8007c38:	08007d29 	.word	0x08007d29
 8007c3c:	08007d29 	.word	0x08007d29
 8007c40:	08007d29 	.word	0x08007d29
 8007c44:	08007d29 	.word	0x08007d29
 8007c48:	08007d29 	.word	0x08007d29
 8007c4c:	08007d29 	.word	0x08007d29
 8007c50:	08007d29 	.word	0x08007d29
 8007c54:	08007d29 	.word	0x08007d29
 8007c58:	08007d29 	.word	0x08007d29
 8007c5c:	08007d29 	.word	0x08007d29
 8007c60:	08007d29 	.word	0x08007d29
 8007c64:	08007d29 	.word	0x08007d29
 8007c68:	08007d29 	.word	0x08007d29
 8007c6c:	08007d29 	.word	0x08007d29
 8007c70:	08007d29 	.word	0x08007d29
 8007c74:	08007d29 	.word	0x08007d29
 8007c78:	08007d29 	.word	0x08007d29
 8007c7c:	08007d29 	.word	0x08007d29
 8007c80:	08007d29 	.word	0x08007d29
 8007c84:	08007d29 	.word	0x08007d29
 8007c88:	08007d29 	.word	0x08007d29
 8007c8c:	08007d29 	.word	0x08007d29
 8007c90:	08007d29 	.word	0x08007d29
 8007c94:	08007d29 	.word	0x08007d29
 8007c98:	08007d05 	.word	0x08007d05
 8007c9c:	08007d17 	.word	0x08007d17
	case DS402_Status_NotReadyToSwitchON:
		newStatusWord &= 0xFFB0;
 8007ca0:	89fb      	ldrh	r3, [r7, #14]
 8007ca2:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007ca6:	81fb      	strh	r3, [r7, #14]
		break;
 8007ca8:	e03f      	b.n	8007d2a <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_SwitchONDisabled:
		newStatusWord &= 0xFFB0;
 8007caa:	89fb      	ldrh	r3, [r7, #14]
 8007cac:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007cb0:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0040;
 8007cb2:	89fb      	ldrh	r3, [r7, #14]
 8007cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb8:	81fb      	strh	r3, [r7, #14]
		break;
 8007cba:	e036      	b.n	8007d2a <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_ReadyToSwitchON:
		newStatusWord &= 0xFFB0;
 8007cbc:	89fb      	ldrh	r3, [r7, #14]
 8007cbe:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007cc2:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0021;
 8007cc4:	89fb      	ldrh	r3, [r7, #14]
 8007cc6:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8007cca:	81fb      	strh	r3, [r7, #14]
		break;
 8007ccc:	e02d      	b.n	8007d2a <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_SwitchedON:
		newStatusWord &= 0xFFB0;
 8007cce:	89fb      	ldrh	r3, [r7, #14]
 8007cd0:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007cd4:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0023;
 8007cd6:	89fb      	ldrh	r3, [r7, #14]
 8007cd8:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8007cdc:	81fb      	strh	r3, [r7, #14]
		break;
 8007cde:	e024      	b.n	8007d2a <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_OperationEnable:
		newStatusWord &= 0xFFB0;
 8007ce0:	89fb      	ldrh	r3, [r7, #14]
 8007ce2:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007ce6:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0027;
 8007ce8:	89fb      	ldrh	r3, [r7, #14]
 8007cea:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8007cee:	81fb      	strh	r3, [r7, #14]
		break;
 8007cf0:	e01b      	b.n	8007d2a <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_QuickStopActive:
		newStatusWord &= 0xFF90;
 8007cf2:	89fb      	ldrh	r3, [r7, #14]
 8007cf4:	f023 036f 	bic.w	r3, r3, #111	; 0x6f
 8007cf8:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0007;
 8007cfa:	89fb      	ldrh	r3, [r7, #14]
 8007cfc:	f043 0307 	orr.w	r3, r3, #7
 8007d00:	81fb      	strh	r3, [r7, #14]
		break;
 8007d02:	e012      	b.n	8007d2a <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_FaultReactionActive:
		newStatusWord &= 0xFFB0;
 8007d04:	89fb      	ldrh	r3, [r7, #14]
 8007d06:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007d0a:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x000F;
 8007d0c:	89fb      	ldrh	r3, [r7, #14]
 8007d0e:	f043 030f 	orr.w	r3, r3, #15
 8007d12:	81fb      	strh	r3, [r7, #14]
		break;
 8007d14:	e009      	b.n	8007d2a <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_Fault:
		newStatusWord &= 0xFFB0;
 8007d16:	89fb      	ldrh	r3, [r7, #14]
 8007d18:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007d1c:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0008;
 8007d1e:	89fb      	ldrh	r3, [r7, #14]
 8007d20:	f043 0308 	orr.w	r3, r3, #8
 8007d24:	81fb      	strh	r3, [r7, #14]
		break;
 8007d26:	e000      	b.n	8007d2a <DS402_buildStatusWordByStatus+0x132>
	default:
		break;
 8007d28:	bf00      	nop
	}

	return newStatusWord;
 8007d2a:	89fb      	ldrh	r3, [r7, #14]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <DS402_getStatus>:

	return controlWord;
}

DS402_Status_t DS402_getStatus(uint16_t statusWord)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	4603      	mov	r3, r0
 8007d40:	80fb      	strh	r3, [r7, #6]
	DS402_Status_t status = DS402_Status_Fault;
 8007d42:	2321      	movs	r3, #33	; 0x21
 8007d44:	73fb      	strb	r3, [r7, #15]
	uint16_t sw = statusWord & 0x6F;
 8007d46:	88fb      	ldrh	r3, [r7, #6]
 8007d48:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8007d4c:	81bb      	strh	r3, [r7, #12]

	if (sw == 0x21) {
 8007d4e:	89bb      	ldrh	r3, [r7, #12]
 8007d50:	2b21      	cmp	r3, #33	; 0x21
 8007d52:	d102      	bne.n	8007d5a <DS402_getStatus+0x22>
		status = DS402_Status_ReadyToSwitchON;
 8007d54:	2303      	movs	r3, #3
 8007d56:	73fb      	strb	r3, [r7, #15]
 8007d58:	e026      	b.n	8007da8 <DS402_getStatus+0x70>
	}else if (sw == 0x23) {
 8007d5a:	89bb      	ldrh	r3, [r7, #12]
 8007d5c:	2b23      	cmp	r3, #35	; 0x23
 8007d5e:	d102      	bne.n	8007d66 <DS402_getStatus+0x2e>
		status = DS402_Status_SwitchedON;
 8007d60:	2304      	movs	r3, #4
 8007d62:	73fb      	strb	r3, [r7, #15]
 8007d64:	e020      	b.n	8007da8 <DS402_getStatus+0x70>
	}else if (sw == 0x27) {
 8007d66:	89bb      	ldrh	r3, [r7, #12]
 8007d68:	2b27      	cmp	r3, #39	; 0x27
 8007d6a:	d102      	bne.n	8007d72 <DS402_getStatus+0x3a>
		status = DS402_Status_OperationEnable;
 8007d6c:	2305      	movs	r3, #5
 8007d6e:	73fb      	strb	r3, [r7, #15]
 8007d70:	e01a      	b.n	8007da8 <DS402_getStatus+0x70>
	}else if (sw == 0x07) {
 8007d72:	89bb      	ldrh	r3, [r7, #12]
 8007d74:	2b07      	cmp	r3, #7
 8007d76:	d102      	bne.n	8007d7e <DS402_getStatus+0x46>
		status = DS402_Status_QuickStopActive;
 8007d78:	2306      	movs	r3, #6
 8007d7a:	73fb      	strb	r3, [r7, #15]
 8007d7c:	e014      	b.n	8007da8 <DS402_getStatus+0x70>
	}else {
		sw &= 0x4F;
 8007d7e:	89bb      	ldrh	r3, [r7, #12]
 8007d80:	f003 034f 	and.w	r3, r3, #79	; 0x4f
 8007d84:	81bb      	strh	r3, [r7, #12]
		if (sw == 0) {
 8007d86:	89bb      	ldrh	r3, [r7, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d102      	bne.n	8007d92 <DS402_getStatus+0x5a>
			status = DS402_Status_NotReadyToSwitchON;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	73fb      	strb	r3, [r7, #15]
 8007d90:	e00a      	b.n	8007da8 <DS402_getStatus+0x70>
		}else if (sw == 0x40) {
 8007d92:	89bb      	ldrh	r3, [r7, #12]
 8007d94:	2b40      	cmp	r3, #64	; 0x40
 8007d96:	d102      	bne.n	8007d9e <DS402_getStatus+0x66>
			status = DS402_Status_SwitchONDisabled;
 8007d98:	2302      	movs	r3, #2
 8007d9a:	73fb      	strb	r3, [r7, #15]
 8007d9c:	e004      	b.n	8007da8 <DS402_getStatus+0x70>
		}else if (sw == 0x0F) {
 8007d9e:	89bb      	ldrh	r3, [r7, #12]
 8007da0:	2b0f      	cmp	r3, #15
 8007da2:	d101      	bne.n	8007da8 <DS402_getStatus+0x70>
			status = DS402_Status_FaultReactionActive;
 8007da4:	2320      	movs	r3, #32
 8007da6:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <DS402_getNewStatusByControlWord>:
	}
	return command;
}

DS402_Status_t DS402_getNewStatusByControlWord(DS402_Status_t curStatus, uint16_t controlWord)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	460a      	mov	r2, r1
 8007dc0:	71fb      	strb	r3, [r7, #7]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	80bb      	strh	r3, [r7, #4]
	DS402_Status_t newStatus = DS402_Status_Fault;
 8007dc6:	2321      	movs	r3, #33	; 0x21
 8007dc8:	73fb      	strb	r3, [r7, #15]
	//DS402_Status_t curStatus = DS402_getStatus(statusWord);

	uint32_t cw = controlWord & 0x0F;
 8007dca:	88bb      	ldrh	r3, [r7, #4]
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	60bb      	str	r3, [r7, #8]
	    if ((cw & 0x02) == 0){
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10d      	bne.n	8007df8 <DS402_getNewStatusByControlWord+0x42>
	    	if (curStatus == DS402_Status_ReadyToSwitchON ||
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d008      	beq.n	8007df4 <DS402_getNewStatusByControlWord+0x3e>
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	2b05      	cmp	r3, #5
 8007de6:	d005      	beq.n	8007df4 <DS402_getNewStatusByControlWord+0x3e>
	    		curStatus == DS402_Status_OperationEnable ||
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d002      	beq.n	8007df4 <DS402_getNewStatusByControlWord+0x3e>
				curStatus == DS402_Status_SwitchedON ||
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	2b06      	cmp	r3, #6
 8007df2:	d101      	bne.n	8007df8 <DS402_getNewStatusByControlWord+0x42>
				curStatus == DS402_Status_QuickStopActive){
	    		newStatus = DS402_Status_SwitchONDisabled;
 8007df4:	2302      	movs	r3, #2
 8007df6:	73fb      	strb	r3, [r7, #15]
	    	}
	    }

	    if (cw == 0x06 || cw == 0x0E){
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b06      	cmp	r3, #6
 8007dfc:	d002      	beq.n	8007e04 <DS402_getNewStatusByControlWord+0x4e>
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b0e      	cmp	r3, #14
 8007e02:	d10b      	bne.n	8007e1c <DS402_getNewStatusByControlWord+0x66>
	    	if (curStatus == DS402_Status_SwitchONDisabled ||
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d005      	beq.n	8007e16 <DS402_getNewStatusByControlWord+0x60>
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d002      	beq.n	8007e16 <DS402_getNewStatusByControlWord+0x60>
	    		curStatus == DS402_Status_SwitchedON ||
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	2b05      	cmp	r3, #5
 8007e14:	d13e      	bne.n	8007e94 <DS402_getNewStatusByControlWord+0xde>
				curStatus == DS402_Status_OperationEnable){
	    		newStatus = DS402_Status_ReadyToSwitchON;
 8007e16:	2303      	movs	r3, #3
 8007e18:	73fb      	strb	r3, [r7, #15]
	    	if (curStatus == DS402_Status_SwitchONDisabled ||
 8007e1a:	e03b      	b.n	8007e94 <DS402_getNewStatusByControlWord+0xde>
	    	}
	    }else if (cw == 0x07){
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b07      	cmp	r3, #7
 8007e20:	d10e      	bne.n	8007e40 <DS402_getNewStatusByControlWord+0x8a>
	    	if (curStatus == DS402_Status_ReadyToSwitchON ||
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d002      	beq.n	8007e2e <DS402_getNewStatusByControlWord+0x78>
 8007e28:	79fb      	ldrb	r3, [r7, #7]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d102      	bne.n	8007e34 <DS402_getNewStatusByControlWord+0x7e>
	    		curStatus == DS402_Status_SwitchONDisabled){
	    		newStatus = DS402_Status_SwitchedON;
 8007e2e:	2304      	movs	r3, #4
 8007e30:	73fb      	strb	r3, [r7, #15]
 8007e32:	e030      	b.n	8007e96 <DS402_getNewStatusByControlWord+0xe0>
	    	}else if (curStatus == DS402_Status_OperationEnable){
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	2b05      	cmp	r3, #5
 8007e38:	d12d      	bne.n	8007e96 <DS402_getNewStatusByControlWord+0xe0>
	    		newStatus = DS402_Status_SwitchedON;
 8007e3a:	2304      	movs	r3, #4
 8007e3c:	73fb      	strb	r3, [r7, #15]
 8007e3e:	e02a      	b.n	8007e96 <DS402_getNewStatusByControlWord+0xe0>
	    	}
	    }else if (cw == 0x0F){
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b0f      	cmp	r3, #15
 8007e44:	d111      	bne.n	8007e6a <DS402_getNewStatusByControlWord+0xb4>
	    	if (curStatus == DS402_Status_ReadyToSwitchON){
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d102      	bne.n	8007e52 <DS402_getNewStatusByControlWord+0x9c>
	    		newStatus = DS402_Status_SwitchedON;
 8007e4c:	2304      	movs	r3, #4
 8007e4e:	73fb      	strb	r3, [r7, #15]
 8007e50:	e021      	b.n	8007e96 <DS402_getNewStatusByControlWord+0xe0>
	    	}else if (curStatus == DS402_Status_SwitchedON ||
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d005      	beq.n	8007e64 <DS402_getNewStatusByControlWord+0xae>
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	2b06      	cmp	r3, #6
 8007e5c:	d002      	beq.n	8007e64 <DS402_getNewStatusByControlWord+0xae>
	    			curStatus == DS402_Status_QuickStopActive ||
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	d118      	bne.n	8007e96 <DS402_getNewStatusByControlWord+0xe0>
					curStatus == DS402_Status_OperationEnable){
	    		newStatus = DS402_Status_OperationEnable;
 8007e64:	2305      	movs	r3, #5
 8007e66:	73fb      	strb	r3, [r7, #15]
 8007e68:	e015      	b.n	8007e96 <DS402_getNewStatusByControlWord+0xe0>
	    	}
	    }else if (cw == 0x02 || cw == 0x03){
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d002      	beq.n	8007e76 <DS402_getNewStatusByControlWord+0xc0>
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d10f      	bne.n	8007e96 <DS402_getNewStatusByControlWord+0xe0>
	    	if (curStatus == DS402_Status_ReadyToSwitchON ||
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d002      	beq.n	8007e82 <DS402_getNewStatusByControlWord+0xcc>
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d102      	bne.n	8007e88 <DS402_getNewStatusByControlWord+0xd2>
	    		curStatus == DS402_Status_SwitchedON){
	    		newStatus = DS402_Status_SwitchONDisabled;
 8007e82:	2302      	movs	r3, #2
 8007e84:	73fb      	strb	r3, [r7, #15]
 8007e86:	e006      	b.n	8007e96 <DS402_getNewStatusByControlWord+0xe0>
	    	}else if (curStatus == DS402_Status_OperationEnable){
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	d103      	bne.n	8007e96 <DS402_getNewStatusByControlWord+0xe0>
	    		newStatus = DS402_Status_QuickStopActive;
 8007e8e:	2306      	movs	r3, #6
 8007e90:	73fb      	strb	r3, [r7, #15]
 8007e92:	e000      	b.n	8007e96 <DS402_getNewStatusByControlWord+0xe0>
	    	if (curStatus == DS402_Status_SwitchONDisabled ||
 8007e94:	bf00      	nop
	    	}
	    }
	return newStatus;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HOME_reset>:
extern volatile int32_t g_IncSteps;
extern QueueHandle_t g_MotionMsgQueue;
extern Node_DriveProfile_t g_NodeDriveProfile;

void HOME_reset()
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
	g_MotorHomeData.status = DS402_HOME_None;
 8007ea8:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <HOME_reset+0x1c>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	701a      	strb	r2, [r3, #0]
	g_MotorHomeData.reachWindow = 32;
 8007eae:	4b04      	ldr	r3, [pc, #16]	; (8007ec0 <HOME_reset+0x1c>)
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	611a      	str	r2, [r3, #16]
}
 8007eb4:	bf00      	nop
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20000b1c 	.word	0x20000b1c

08007ec4 <HOME_setProfile>:

void HOME_setProfile(int32_t offset, int8_t method, uint32_t speed, uint32_t acce)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	607a      	str	r2, [r7, #4]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	72fb      	strb	r3, [r7, #11]
	g_MotorHomeData.method = method;
 8007ed4:	4a08      	ldr	r2, [pc, #32]	; (8007ef8 <HOME_setProfile+0x34>)
 8007ed6:	7afb      	ldrb	r3, [r7, #11]
 8007ed8:	7713      	strb	r3, [r2, #28]
	g_MotorHomeData.offset = offset;
 8007eda:	4a07      	ldr	r2, [pc, #28]	; (8007ef8 <HOME_setProfile+0x34>)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6053      	str	r3, [r2, #4]
	g_MotorHomeData.speed  = speed;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a05      	ldr	r2, [pc, #20]	; (8007ef8 <HOME_setProfile+0x34>)
 8007ee4:	6093      	str	r3, [r2, #8]
	g_MotorHomeData.acce   = acce;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	4a03      	ldr	r2, [pc, #12]	; (8007ef8 <HOME_setProfile+0x34>)
 8007eea:	60d3      	str	r3, [r2, #12]
}
 8007eec:	bf00      	nop
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	20000b1c 	.word	0x20000b1c

08007efc <HOME_Init>:

bool HOME_Init(int32_t offset, int8_t method, uint32_t speed, uint32_t acce)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	607a      	str	r2, [r7, #4]
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	72fb      	strb	r3, [r7, #11]
	bool_t ret = true;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	75fb      	strb	r3, [r7, #23]

	HOME_setProfile(offset, method, speed, acce);
 8007f10:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f7ff ffd3 	bl	8007ec4 <HOME_setProfile>
	g_MotorHomeData.finishedCallback = NULL;
 8007f1e:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <HOME_Init+0x40>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	619a      	str	r2, [r3, #24]

	HOME_reset();
 8007f24:	f7ff ffbe 	bl	8007ea4 <HOME_reset>

	return ret;
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bf14      	ite	ne
 8007f2e:	2301      	movne	r3, #1
 8007f30:	2300      	moveq	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3718      	adds	r7, #24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000b1c 	.word	0x20000b1c

08007f40 <HOME_OnSwitchSignal>:

	return ret;
}

void HOME_OnSwitchSignal(uint16_t pin)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	80fb      	strh	r3, [r7, #6]
	if (pin != GPIO_PIN_2) {
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d12d      	bne.n	8007fac <HOME_OnSwitchSignal+0x6c>
		return;
	}

	if (g_MotorHomeData.status != DS402_HOME_GoHome && g_MotionMsgQueue != NULL){
 8007f50:	4b18      	ldr	r3, [pc, #96]	; (8007fb4 <HOME_OnSwitchSignal+0x74>)
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d02a      	beq.n	8007fae <HOME_OnSwitchSignal+0x6e>
 8007f58:	4b17      	ldr	r3, [pc, #92]	; (8007fb8 <HOME_OnSwitchSignal+0x78>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d026      	beq.n	8007fae <HOME_OnSwitchSignal+0x6e>

		/*Reset the callback*/

		/*Send go home message*/
		MotionMsgItem_t item;
		item.code = MMC_HomeGoHome;
 8007f60:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007f64:	81bb      	strh	r3, [r7, #12]
		item.position = g_MotorHomeData.offset;
 8007f66:	4b13      	ldr	r3, [pc, #76]	; (8007fb4 <HOME_OnSwitchSignal+0x74>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	613b      	str	r3, [r7, #16]

		BaseType_t highTaskWoken = pdFALSE;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60bb      	str	r3, [r7, #8]
		if (pdPASS == xQueueSendFromISR(g_MotionMsgQueue, &item, &highTaskWoken)){
 8007f70:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <HOME_OnSwitchSignal+0x78>)
 8007f72:	6818      	ldr	r0, [r3, #0]
 8007f74:	f107 0208 	add.w	r2, r7, #8
 8007f78:	f107 010c 	add.w	r1, r7, #12
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f00b fd35 	bl	80139ec <xQueueGenericSendFromISR>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d102      	bne.n	8007f8e <HOME_OnSwitchSignal+0x4e>
			g_MotorHomeData.status = DS402_HOME_GoHome;
 8007f88:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <HOME_OnSwitchSignal+0x74>)
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	701a      	strb	r2, [r3, #0]
		}

		if(highTaskWoken == pdTRUE) {
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d10c      	bne.n	8007fae <HOME_OnSwitchSignal+0x6e>
			portYIELD_FROM_ISR (highTaskWoken);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d009      	beq.n	8007fae <HOME_OnSwitchSignal+0x6e>
 8007f9a:	4b08      	ldr	r3, [pc, #32]	; (8007fbc <HOME_OnSwitchSignal+0x7c>)
 8007f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	e000      	b.n	8007fae <HOME_OnSwitchSignal+0x6e>
		return;
 8007fac:	bf00      	nop
		}
	}
}
 8007fae:	3720      	adds	r7, #32
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20000b1c 	.word	0x20000b1c
 8007fb8:	200006ec 	.word	0x200006ec
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <CO_new>:
                          CO_NO_LSS_CLIENT)


/* Create objects from heap ***************************************************/
#ifndef CO_USE_GLOBALS
CO_ReturnError_t CO_new(uint32_t *heapMemoryUsed) {
 8007fc0:	b5b0      	push	{r4, r5, r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
    int16_t i;
    uint16_t errCnt = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	81bb      	strh	r3, [r7, #12]
    uint32_t CO_memoryUsed = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60bb      	str	r3, [r7, #8]

    /* If CANopen was initialized before, return. */
    if (CO != NULL) {
 8007fd0:	4b7f      	ldr	r3, [pc, #508]	; (80081d0 <CO_new+0x210>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <CO_new+0x1c>
        return CO_ERROR_NO;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e15c      	b.n	8008296 <CO_new+0x2d6>
    }

    /* globals */
    CO = &COO;
 8007fdc:	4b7c      	ldr	r3, [pc, #496]	; (80081d0 <CO_new+0x210>)
 8007fde:	4a7d      	ldr	r2, [pc, #500]	; (80081d4 <CO_new+0x214>)
 8007fe0:	601a      	str	r2, [r3, #0]

    /* CANmodule */
    CO->CANmodule[0] = (CO_CANmodule_t *)calloc(1, sizeof(CO_CANmodule_t));
 8007fe2:	4b7b      	ldr	r3, [pc, #492]	; (80081d0 <CO_new+0x210>)
 8007fe4:	681c      	ldr	r4, [r3, #0]
 8007fe6:	2120      	movs	r1, #32
 8007fe8:	2001      	movs	r0, #1
 8007fea:	f00e fcb5 	bl	8016958 <calloc>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	6023      	str	r3, [r4, #0]
    if (CO->CANmodule[0] == NULL) errCnt++;
 8007ff2:	4b77      	ldr	r3, [pc, #476]	; (80081d0 <CO_new+0x210>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <CO_new+0x42>
 8007ffc:	89bb      	ldrh	r3, [r7, #12]
 8007ffe:	3301      	adds	r3, #1
 8008000:	81bb      	strh	r3, [r7, #12]
    CO_CANmodule_rxArray0 =
        (CO_CANrx_t *)calloc(CO_RXCAN_NO_MSGS, sizeof(CO_CANrx_t));
 8008002:	210c      	movs	r1, #12
 8008004:	200a      	movs	r0, #10
 8008006:	f00e fca7 	bl	8016958 <calloc>
 800800a:	4603      	mov	r3, r0
 800800c:	461a      	mov	r2, r3
    CO_CANmodule_rxArray0 =
 800800e:	4b72      	ldr	r3, [pc, #456]	; (80081d8 <CO_new+0x218>)
 8008010:	601a      	str	r2, [r3, #0]
    if (CO_CANmodule_rxArray0 == NULL) errCnt++;
 8008012:	4b71      	ldr	r3, [pc, #452]	; (80081d8 <CO_new+0x218>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d102      	bne.n	8008020 <CO_new+0x60>
 800801a:	89bb      	ldrh	r3, [r7, #12]
 800801c:	3301      	adds	r3, #1
 800801e:	81bb      	strh	r3, [r7, #12]
    CO_CANmodule_txArray0 =
        (CO_CANtx_t *)calloc(CO_TXCAN_NO_MSGS, sizeof(CO_CANtx_t));
 8008020:	2110      	movs	r1, #16
 8008022:	2009      	movs	r0, #9
 8008024:	f00e fc98 	bl	8016958 <calloc>
 8008028:	4603      	mov	r3, r0
 800802a:	461a      	mov	r2, r3
    CO_CANmodule_txArray0 =
 800802c:	4b6b      	ldr	r3, [pc, #428]	; (80081dc <CO_new+0x21c>)
 800802e:	601a      	str	r2, [r3, #0]
    if (CO_CANmodule_txArray0 == NULL) errCnt++;
 8008030:	4b6a      	ldr	r3, [pc, #424]	; (80081dc <CO_new+0x21c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <CO_new+0x7e>
 8008038:	89bb      	ldrh	r3, [r7, #12]
 800803a:	3301      	adds	r3, #1
 800803c:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_CANmodule_t) +
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008044:	60bb      	str	r3, [r7, #8]
                     sizeof(CO_CANrx_t) * CO_RXCAN_NO_MSGS +
                     sizeof(CO_CANtx_t) * CO_TXCAN_NO_MSGS;

    /* SDOserver */
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8008046:	2300      	movs	r3, #0
 8008048:	81fb      	strh	r3, [r7, #14]
 800804a:	e01f      	b.n	800808c <CO_new+0xcc>
        CO->SDO[i] = (CO_SDO_t *)calloc(1, sizeof(CO_SDO_t));
 800804c:	4b60      	ldr	r3, [pc, #384]	; (80081d0 <CO_new+0x210>)
 800804e:	681c      	ldr	r4, [r3, #0]
 8008050:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 8008054:	f44f 61ee 	mov.w	r1, #1904	; 0x770
 8008058:	2001      	movs	r0, #1
 800805a:	f00e fc7d 	bl	8016958 <calloc>
 800805e:	4603      	mov	r3, r0
 8008060:	461a      	mov	r2, r3
 8008062:	00ab      	lsls	r3, r5, #2
 8008064:	4423      	add	r3, r4
 8008066:	605a      	str	r2, [r3, #4]
        if (CO->SDO[i] == NULL) errCnt++;
 8008068:	4b59      	ldr	r3, [pc, #356]	; (80081d0 <CO_new+0x210>)
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d102      	bne.n	8008080 <CO_new+0xc0>
 800807a:	89bb      	ldrh	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8008080:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008084:	b29b      	uxth	r3, r3
 8008086:	3301      	adds	r3, #1
 8008088:	b29b      	uxth	r3, r3
 800808a:	81fb      	strh	r3, [r7, #14]
 800808c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008090:	2b00      	cmp	r3, #0
 8008092:	dddb      	ble.n	800804c <CO_new+0x8c>
    }
    CO_SDO_ODExtensions = (CO_OD_extension_t *)calloc(
 8008094:	210c      	movs	r1, #12
 8008096:	2044      	movs	r0, #68	; 0x44
 8008098:	f00e fc5e 	bl	8016958 <calloc>
 800809c:	4603      	mov	r3, r0
 800809e:	461a      	mov	r2, r3
 80080a0:	4b4f      	ldr	r3, [pc, #316]	; (80081e0 <CO_new+0x220>)
 80080a2:	601a      	str	r2, [r3, #0]
        CO_OD_NoOfElements, sizeof(CO_OD_extension_t));
    if (CO_SDO_ODExtensions == NULL) errCnt++;
 80080a4:	4b4e      	ldr	r3, [pc, #312]	; (80081e0 <CO_new+0x220>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d102      	bne.n	80080b2 <CO_new+0xf2>
 80080ac:	89bb      	ldrh	r3, [r7, #12]
 80080ae:	3301      	adds	r3, #1
 80080b0:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_SDO_t) * CO_NO_SDO_SERVER +
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 80080b8:	60bb      	str	r3, [r7, #8]
                     sizeof(CO_OD_extension_t) * CO_OD_NoOfElements;

    /* Emergency */
    CO->em = (CO_EM_t *)calloc(1, sizeof(CO_EM_t));
 80080ba:	4b45      	ldr	r3, [pc, #276]	; (80081d0 <CO_new+0x210>)
 80080bc:	681c      	ldr	r4, [r3, #0]
 80080be:	2174      	movs	r1, #116	; 0x74
 80080c0:	2001      	movs	r0, #1
 80080c2:	f00e fc49 	bl	8016958 <calloc>
 80080c6:	4603      	mov	r3, r0
 80080c8:	60a3      	str	r3, [r4, #8]
    if (CO->em == NULL) errCnt++;
 80080ca:	4b41      	ldr	r3, [pc, #260]	; (80081d0 <CO_new+0x210>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <CO_new+0x11a>
 80080d4:	89bb      	ldrh	r3, [r7, #12]
 80080d6:	3301      	adds	r3, #1
 80080d8:	81bb      	strh	r3, [r7, #12]
    CO->emPr = (CO_EMpr_t *)calloc(1, sizeof(CO_EMpr_t));
 80080da:	4b3d      	ldr	r3, [pc, #244]	; (80081d0 <CO_new+0x210>)
 80080dc:	681c      	ldr	r4, [r3, #0]
 80080de:	211c      	movs	r1, #28
 80080e0:	2001      	movs	r0, #1
 80080e2:	f00e fc39 	bl	8016958 <calloc>
 80080e6:	4603      	mov	r3, r0
 80080e8:	60e3      	str	r3, [r4, #12]
    if (CO->emPr == NULL) errCnt++;
 80080ea:	4b39      	ldr	r3, [pc, #228]	; (80081d0 <CO_new+0x210>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <CO_new+0x13a>
 80080f4:	89bb      	ldrh	r3, [r7, #12]
 80080f6:	3301      	adds	r3, #1
 80080f8:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_EM_t) + sizeof(CO_EMpr_t);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	3390      	adds	r3, #144	; 0x90
 80080fe:	60bb      	str	r3, [r7, #8]

    /* NMT_Heartbeat */
    CO->NMT = (CO_NMT_t *)calloc(1, sizeof(CO_NMT_t));
 8008100:	4b33      	ldr	r3, [pc, #204]	; (80081d0 <CO_new+0x210>)
 8008102:	681c      	ldr	r4, [r3, #0]
 8008104:	2130      	movs	r1, #48	; 0x30
 8008106:	2001      	movs	r0, #1
 8008108:	f00e fc26 	bl	8016958 <calloc>
 800810c:	4603      	mov	r3, r0
 800810e:	6123      	str	r3, [r4, #16]
    if (CO->NMT == NULL) errCnt++;
 8008110:	4b2f      	ldr	r3, [pc, #188]	; (80081d0 <CO_new+0x210>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d102      	bne.n	8008120 <CO_new+0x160>
 800811a:	89bb      	ldrh	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_NMT_t);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	3330      	adds	r3, #48	; 0x30
 8008124:	60bb      	str	r3, [r7, #8]

#if CO_NO_SYNC == 1
    /* SYNC */
    CO->SYNC = (CO_SYNC_t *)calloc(1, sizeof(CO_SYNC_t));
 8008126:	4b2a      	ldr	r3, [pc, #168]	; (80081d0 <CO_new+0x210>)
 8008128:	681c      	ldr	r4, [r3, #0]
 800812a:	2144      	movs	r1, #68	; 0x44
 800812c:	2001      	movs	r0, #1
 800812e:	f00e fc13 	bl	8016958 <calloc>
 8008132:	4603      	mov	r3, r0
 8008134:	6163      	str	r3, [r4, #20]
    if (CO->SYNC == NULL) errCnt++;
 8008136:	4b26      	ldr	r3, [pc, #152]	; (80081d0 <CO_new+0x210>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d102      	bne.n	8008146 <CO_new+0x186>
 8008140:	89bb      	ldrh	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_SYNC_t);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	3344      	adds	r3, #68	; 0x44
 800814a:	60bb      	str	r3, [r7, #8]
    CO->SYNC = NULL;
#endif

#if CO_NO_TIME == 1
    /* TIME */
    CO->TIME = (CO_TIME_t *)calloc(1, sizeof(CO_TIME_t));
 800814c:	4b20      	ldr	r3, [pc, #128]	; (80081d0 <CO_new+0x210>)
 800814e:	681c      	ldr	r4, [r3, #0]
 8008150:	2148      	movs	r1, #72	; 0x48
 8008152:	2001      	movs	r0, #1
 8008154:	f00e fc00 	bl	8016958 <calloc>
 8008158:	4603      	mov	r3, r0
 800815a:	61a3      	str	r3, [r4, #24]
    if (CO->TIME == NULL) errCnt++;
 800815c:	4b1c      	ldr	r3, [pc, #112]	; (80081d0 <CO_new+0x210>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d102      	bne.n	800816c <CO_new+0x1ac>
 8008166:	89bb      	ldrh	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_TIME_t);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	3348      	adds	r3, #72	; 0x48
 8008170:	60bb      	str	r3, [r7, #8]
#else
    CO->TIME = NULL;
#endif

    /* RPDO */
    for (i = 0; i < CO_NO_RPDO; i++) {
 8008172:	2300      	movs	r3, #0
 8008174:	81fb      	strh	r3, [r7, #14]
 8008176:	e020      	b.n	80081ba <CO_new+0x1fa>
        CO->RPDO[i] = (CO_RPDO_t *)calloc(1, sizeof(CO_RPDO_t));
 8008178:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <CO_new+0x210>)
 800817a:	681c      	ldr	r4, [r3, #0]
 800817c:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 8008180:	216c      	movs	r1, #108	; 0x6c
 8008182:	2001      	movs	r0, #1
 8008184:	f00e fbe8 	bl	8016958 <calloc>
 8008188:	4603      	mov	r3, r0
 800818a:	461a      	mov	r2, r3
 800818c:	1dab      	adds	r3, r5, #6
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4423      	add	r3, r4
 8008192:	605a      	str	r2, [r3, #4]
        if (CO->RPDO[i] == NULL) errCnt++;
 8008194:	4b0e      	ldr	r3, [pc, #56]	; (80081d0 <CO_new+0x210>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800819c:	3306      	adds	r3, #6
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d102      	bne.n	80081ae <CO_new+0x1ee>
 80081a8:	89bb      	ldrh	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
 80081ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < CO_NO_RPDO; i++) {
 80081ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	3301      	adds	r3, #1
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	81fb      	strh	r3, [r7, #14]
 80081ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80081be:	2b03      	cmp	r3, #3
 80081c0:	ddda      	ble.n	8008178 <CO_new+0x1b8>
    }
    CO_memoryUsed += sizeof(CO_RPDO_t) * CO_NO_RPDO;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80081c8:	60bb      	str	r3, [r7, #8]

    /* TPDO */
    for (i = 0; i < CO_NO_TPDO; i++) {
 80081ca:	2300      	movs	r3, #0
 80081cc:	81fb      	strh	r3, [r7, #14]
 80081ce:	e02b      	b.n	8008228 <CO_new+0x268>
 80081d0:	20000b7c 	.word	0x20000b7c
 80081d4:	20000b3c 	.word	0x20000b3c
 80081d8:	20000b80 	.word	0x20000b80
 80081dc:	20000b84 	.word	0x20000b84
 80081e0:	20000b88 	.word	0x20000b88
        CO->TPDO[i] = (CO_TPDO_t *)calloc(1, sizeof(CO_TPDO_t));
 80081e4:	4b2e      	ldr	r3, [pc, #184]	; (80082a0 <CO_new+0x2e0>)
 80081e6:	681c      	ldr	r4, [r3, #0]
 80081e8:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 80081ec:	2158      	movs	r1, #88	; 0x58
 80081ee:	2001      	movs	r0, #1
 80081f0:	f00e fbb2 	bl	8016958 <calloc>
 80081f4:	4603      	mov	r3, r0
 80081f6:	461a      	mov	r2, r3
 80081f8:	f105 030a 	add.w	r3, r5, #10
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4423      	add	r3, r4
 8008200:	605a      	str	r2, [r3, #4]
        if (CO->TPDO[i] == NULL) errCnt++;
 8008202:	4b27      	ldr	r3, [pc, #156]	; (80082a0 <CO_new+0x2e0>)
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800820a:	330a      	adds	r3, #10
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d102      	bne.n	800821c <CO_new+0x25c>
 8008216:	89bb      	ldrh	r3, [r7, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < CO_NO_TPDO; i++) {
 800821c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008220:	b29b      	uxth	r3, r3
 8008222:	3301      	adds	r3, #1
 8008224:	b29b      	uxth	r3, r3
 8008226:	81fb      	strh	r3, [r7, #14]
 8008228:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800822c:	2b03      	cmp	r3, #3
 800822e:	ddd9      	ble.n	80081e4 <CO_new+0x224>
    }
    CO_memoryUsed += sizeof(CO_TPDO_t) * CO_NO_TPDO;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008236:	60bb      	str	r3, [r7, #8]

    /* Heartbeat consumer */
    CO->HBcons = (CO_HBconsumer_t *)calloc(1, sizeof(CO_HBconsumer_t));
 8008238:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <CO_new+0x2e0>)
 800823a:	681c      	ldr	r4, [r3, #0]
 800823c:	2120      	movs	r1, #32
 800823e:	2001      	movs	r0, #1
 8008240:	f00e fb8a 	bl	8016958 <calloc>
 8008244:	4603      	mov	r3, r0
 8008246:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (CO->HBcons == NULL) errCnt++;
 8008248:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <CO_new+0x2e0>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d102      	bne.n	8008258 <CO_new+0x298>
 8008252:	89bb      	ldrh	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	81bb      	strh	r3, [r7, #12]
    CO_HBcons_monitoredNodes =
        (CO_HBconsNode_t *)calloc(CO_NO_HB_CONS, sizeof(CO_HBconsNode_t));
 8008258:	2134      	movs	r1, #52	; 0x34
 800825a:	2001      	movs	r0, #1
 800825c:	f00e fb7c 	bl	8016958 <calloc>
 8008260:	4603      	mov	r3, r0
 8008262:	461a      	mov	r2, r3
    CO_HBcons_monitoredNodes =
 8008264:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <CO_new+0x2e4>)
 8008266:	601a      	str	r2, [r3, #0]
    if (CO_HBcons_monitoredNodes == NULL) errCnt++;
 8008268:	4b0e      	ldr	r3, [pc, #56]	; (80082a4 <CO_new+0x2e4>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d102      	bne.n	8008276 <CO_new+0x2b6>
 8008270:	89bb      	ldrh	r3, [r7, #12]
 8008272:	3301      	adds	r3, #1
 8008274:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_HBconsumer_t) +
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	3354      	adds	r3, #84	; 0x54
 800827a:	60bb      	str	r3, [r7, #8]
        }
        CO_memoryUsed += CO_traceBufferSize[i] * sizeof(uint32_t) * 2;
    }
#endif

    if(heapMemoryUsed != NULL) {
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d002      	beq.n	8008288 <CO_new+0x2c8>
        *heapMemoryUsed = CO_memoryUsed;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	601a      	str	r2, [r3, #0]
    }

    return (errCnt == 0) ? CO_ERROR_NO : CO_ERROR_OUT_OF_MEMORY;
 8008288:	89bb      	ldrh	r3, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <CO_new+0x2d2>
 800828e:	2300      	movs	r3, #0
 8008290:	e001      	b.n	8008296 <CO_new+0x2d6>
 8008292:	f06f 0301 	mvn.w	r3, #1
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bdb0      	pop	{r4, r5, r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000b7c 	.word	0x20000b7c
 80082a4:	20000b8c 	.word	0x20000b8c

080082a8 <CO_CANinit>:


/******************************************************************************/
CO_ReturnError_t CO_CANinit(void *CANptr,
                            uint16_t bitRate)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af04      	add	r7, sp, #16
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	807b      	strh	r3, [r7, #2]
    CO_ReturnError_t err;

    CO->CANmodule[0]->CANnormal = false;
 80082b4:	4b10      	ldr	r3, [pc, #64]	; (80082f8 <CO_CANinit+0x50>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2200      	movs	r2, #0
 80082bc:	749a      	strb	r2, [r3, #18]
    CO_CANsetConfigurationMode(CANptr);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 ff22 	bl	8009108 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(CO->CANmodule[0],
 80082c4:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <CO_CANinit+0x50>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <CO_CANinit+0x54>)
 80082cc:	6819      	ldr	r1, [r3, #0]
 80082ce:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <CO_CANinit+0x58>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	887a      	ldrh	r2, [r7, #2]
 80082d4:	9202      	str	r2, [sp, #8]
 80082d6:	2209      	movs	r2, #9
 80082d8:	9201      	str	r2, [sp, #4]
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	230a      	movs	r3, #10
 80082de:	460a      	mov	r2, r1
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	f000 ff3f 	bl	8009164 <CO_CANmodule_init>
 80082e6:	4603      	mov	r3, r0
 80082e8:	73fb      	strb	r3, [r7, #15]
                            CO_RXCAN_NO_MSGS,
                            CO_CANmodule_txArray0,
                            CO_TXCAN_NO_MSGS,
                            bitRate);

    return err;
 80082ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20000b7c 	.word	0x20000b7c
 80082fc:	20000b80 	.word	0x20000b80
 8008300:	20000b84 	.word	0x20000b84

08008304 <CO_CANopenInit>:
}
#endif /* CO_NO_LSS_SERVER == 1 */


/******************************************************************************/
CO_ReturnError_t CO_CANopenInit(uint8_t nodeId) {
 8008304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008306:	b097      	sub	sp, #92	; 0x5c
 8008308:	af0a      	add	r7, sp, #40	; 0x28
 800830a:	4603      	mov	r3, r0
 800830c:	75fb      	strb	r3, [r7, #23]
    int16_t i;
    CO_ReturnError_t err;

    /* Verify CANopen Node-ID */
    if (nodeId < 1 || nodeId > 127) {
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d003      	beq.n	800831c <CO_CANopenInit+0x18>
 8008314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	da02      	bge.n	8008322 <CO_CANopenInit+0x1e>
        return CO_ERROR_PARAMETERS;
 800831c:	f06f 030b 	mvn.w	r3, #11
 8008320:	e256      	b.n	80087d0 <CO_CANopenInit+0x4cc>
    }
#endif


    /* SDOserver */
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8008322:	2300      	movs	r3, #0
 8008324:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008326:	e069      	b.n	80083fc <CO_CANopenInit+0xf8>
        uint32_t COB_IDClientToServer;
        uint32_t COB_IDServerToClient;
        if (i == 0) {
 8008328:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800832c:	2b00      	cmp	r3, #0
 800832e:	d107      	bne.n	8008340 <CO_CANopenInit+0x3c>
            /*Default SDO server must be located at first index*/
            COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8008336:	62bb      	str	r3, [r7, #40]	; 0x28
            COB_IDServerToClient = CO_CAN_ID_TSDO + 0x01;
 8008338:	f240 5381 	movw	r3, #1409	; 0x581
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
 800833e:	e015      	b.n	800836c <CO_CANopenInit+0x68>
        }
        else {
            COB_IDClientToServer =
                OD_SDOServerParameter[i].COB_IDClientToServer;
 8008340:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
            COB_IDClientToServer =
 8008344:	4997      	ldr	r1, [pc, #604]	; (80085a4 <CO_CANopenInit+0x2a0>)
 8008346:	4613      	mov	r3, r2
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	440b      	add	r3, r1
 8008350:	3368      	adds	r3, #104	; 0x68
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	62bb      	str	r3, [r7, #40]	; 0x28
            COB_IDServerToClient =
                OD_SDOServerParameter[i].COB_IDServerToClient;
 8008356:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
            COB_IDServerToClient =
 800835a:	4992      	ldr	r1, [pc, #584]	; (80085a4 <CO_CANopenInit+0x2a0>)
 800835c:	4613      	mov	r3, r2
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	336c      	adds	r3, #108	; 0x6c
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	627b      	str	r3, [r7, #36]	; 0x24
        }

        err = CO_SDO_init(CO->SDO[i],
 800836c:	4b8e      	ldr	r3, [pc, #568]	; (80085a8 <CO_CANopenInit+0x2a4>)
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	685e      	ldr	r6, [r3, #4]
 800837a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800837c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008380:	fa1f fc83 	uxth.w	ip, r3
 8008384:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <CO_CANopenInit+0x90>
                          COB_IDClientToServer,
                          COB_IDServerToClient,
                          OD_H1200_SDO_SERVER_PARAM + i,
                          i == 0 ? 0 : CO->SDO[0],
 800838c:	4b86      	ldr	r3, [pc, #536]	; (80085a8 <CO_CANopenInit+0x2a4>)
 800838e:	681b      	ldr	r3, [r3, #0]
        err = CO_SDO_init(CO->SDO[i],
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	e000      	b.n	8008396 <CO_CANopenInit+0x92>
 8008394:	2300      	movs	r3, #0
 8008396:	4a85      	ldr	r2, [pc, #532]	; (80085ac <CO_CANopenInit+0x2a8>)
 8008398:	6812      	ldr	r2, [r2, #0]
                          &CO_OD[0],
                          CO_OD_NoOfElements,
                          CO_SDO_ODExtensions,
                          nodeId,
                          30000,
                          CO->CANmodule[0],
 800839a:	4983      	ldr	r1, [pc, #524]	; (80085a8 <CO_CANopenInit+0x2a4>)
 800839c:	6809      	ldr	r1, [r1, #0]
        err = CO_SDO_init(CO->SDO[i],
 800839e:	6809      	ldr	r1, [r1, #0]
 80083a0:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 80083a2:	3008      	adds	r0, #8
 80083a4:	b280      	uxth	r0, r0
                          CO_RXCAN_SDO_SRV + i,
                          CO->CANmodule[0],
 80083a6:	4c80      	ldr	r4, [pc, #512]	; (80085a8 <CO_CANopenInit+0x2a4>)
 80083a8:	6824      	ldr	r4, [r4, #0]
        err = CO_SDO_init(CO->SDO[i],
 80083aa:	6824      	ldr	r4, [r4, #0]
 80083ac:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 80083ae:	3507      	adds	r5, #7
 80083b0:	b2ad      	uxth	r5, r5
 80083b2:	9509      	str	r5, [sp, #36]	; 0x24
 80083b4:	9408      	str	r4, [sp, #32]
 80083b6:	9007      	str	r0, [sp, #28]
 80083b8:	9106      	str	r1, [sp, #24]
 80083ba:	f247 5130 	movw	r1, #30000	; 0x7530
 80083be:	9105      	str	r1, [sp, #20]
 80083c0:	7df9      	ldrb	r1, [r7, #23]
 80083c2:	9104      	str	r1, [sp, #16]
 80083c4:	9203      	str	r2, [sp, #12]
 80083c6:	2244      	movs	r2, #68	; 0x44
 80083c8:	9202      	str	r2, [sp, #8]
 80083ca:	4a79      	ldr	r2, [pc, #484]	; (80085b0 <CO_CANopenInit+0x2ac>)
 80083cc:	9201      	str	r2, [sp, #4]
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	4663      	mov	r3, ip
 80083d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083d6:	4630      	mov	r0, r6
 80083d8:	f7fc fdf2 	bl	8004fc0 <CO_SDO_init>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                          CO_TXCAN_SDO_SRV + i);

        if (err) return err;
 80083e2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <CO_CANopenInit+0xec>
 80083ea:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80083ee:	e1ef      	b.n	80087d0 <CO_CANopenInit+0x4cc>
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 80083f0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3301      	adds	r3, #1
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80083fc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008400:	2b00      	cmp	r3, #0
 8008402:	dd91      	ble.n	8008328 <CO_CANopenInit+0x24>
    }


    /* Emergency */
    err = CO_EM_init(CO->em,
 8008404:	4b68      	ldr	r3, [pc, #416]	; (80085a8 <CO_CANopenInit+0x2a4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6898      	ldr	r0, [r3, #8]
                     CO->emPr,
 800840a:	4b67      	ldr	r3, [pc, #412]	; (80085a8 <CO_CANopenInit+0x2a4>)
 800840c:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(CO->em,
 800840e:	68dc      	ldr	r4, [r3, #12]
                     CO->SDO[0],
 8008410:	4b65      	ldr	r3, [pc, #404]	; (80085a8 <CO_CANopenInit+0x2a4>)
 8008412:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(CO->em,
 8008414:	685d      	ldr	r5, [r3, #4]
                     &OD_errorStatusBits[0],
                     ODL_errorStatusBits_stringLength,
                     &OD_errorRegister,
                     &OD_preDefinedErrorField[0],
                     ODL_preDefinedErrorField_arrayLength,
                     CO->CANmodule[0],
 8008416:	4b64      	ldr	r3, [pc, #400]	; (80085a8 <CO_CANopenInit+0x2a4>)
 8008418:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(CO->em,
 800841a:	681b      	ldr	r3, [r3, #0]
                     CO_RXCAN_EMERG,
                     CO->CANmodule[0],
 800841c:	4a62      	ldr	r2, [pc, #392]	; (80085a8 <CO_CANopenInit+0x2a4>)
 800841e:	6812      	ldr	r2, [r2, #0]
    err = CO_EM_init(CO->em,
 8008420:	6812      	ldr	r2, [r2, #0]
 8008422:	7df9      	ldrb	r1, [r7, #23]
 8008424:	b289      	uxth	r1, r1
 8008426:	3180      	adds	r1, #128	; 0x80
 8008428:	b289      	uxth	r1, r1
 800842a:	9108      	str	r1, [sp, #32]
 800842c:	2101      	movs	r1, #1
 800842e:	9107      	str	r1, [sp, #28]
 8008430:	9206      	str	r2, [sp, #24]
 8008432:	2202      	movs	r2, #2
 8008434:	9205      	str	r2, [sp, #20]
 8008436:	9304      	str	r3, [sp, #16]
 8008438:	2308      	movs	r3, #8
 800843a:	9303      	str	r3, [sp, #12]
 800843c:	4b5d      	ldr	r3, [pc, #372]	; (80085b4 <CO_CANopenInit+0x2b0>)
 800843e:	9302      	str	r3, [sp, #8]
 8008440:	4b5d      	ldr	r3, [pc, #372]	; (80085b8 <CO_CANopenInit+0x2b4>)
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	230a      	movs	r3, #10
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	4b5c      	ldr	r3, [pc, #368]	; (80085bc <CO_CANopenInit+0x2b8>)
 800844a:	462a      	mov	r2, r5
 800844c:	4621      	mov	r1, r4
 800844e:	f7fa f833 	bl	80024b8 <CO_EM_init>
 8008452:	4603      	mov	r3, r0
 8008454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                     CO_TXCAN_EMERG,
                     (uint16_t)CO_CAN_ID_EMERGENCY + nodeId);

    if (err) return err;
 8008458:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <CO_CANopenInit+0x162>
 8008460:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008464:	e1b4      	b.n	80087d0 <CO_CANopenInit+0x4cc>

    /* NMT_Heartbeat */
    err = CO_NMT_init(CO->NMT,
 8008466:	4b50      	ldr	r3, [pc, #320]	; (80085a8 <CO_CANopenInit+0x2a4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	691c      	ldr	r4, [r3, #16]
                      CO->emPr,
 800846c:	4b4e      	ldr	r3, [pc, #312]	; (80085a8 <CO_CANopenInit+0x2a4>)
 800846e:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(CO->NMT,
 8008470:	68dd      	ldr	r5, [r3, #12]
                      nodeId,
                      500,
                      CO->CANmodule[0],
 8008472:	4b4d      	ldr	r3, [pc, #308]	; (80085a8 <CO_CANopenInit+0x2a4>)
 8008474:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(CO->NMT,
 8008476:	681b      	ldr	r3, [r3, #0]
                      CO_RXCAN_NMT,
                      CO_CAN_ID_NMT_SERVICE,
                      CO->CANmodule[0],
 8008478:	4a4b      	ldr	r2, [pc, #300]	; (80085a8 <CO_CANopenInit+0x2a4>)
 800847a:	6812      	ldr	r2, [r2, #0]
    err = CO_NMT_init(CO->NMT,
 800847c:	6812      	ldr	r2, [r2, #0]
                      CO_TXCAN_NMT,
                      CO_CAN_ID_NMT_SERVICE,
                      CO->CANmodule[0],
 800847e:	494a      	ldr	r1, [pc, #296]	; (80085a8 <CO_CANopenInit+0x2a4>)
 8008480:	6809      	ldr	r1, [r1, #0]
    err = CO_NMT_init(CO->NMT,
 8008482:	6809      	ldr	r1, [r1, #0]
 8008484:	7df8      	ldrb	r0, [r7, #23]
 8008486:	b280      	uxth	r0, r0
 8008488:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
 800848c:	b280      	uxth	r0, r0
 800848e:	7dfe      	ldrb	r6, [r7, #23]
 8008490:	9008      	str	r0, [sp, #32]
 8008492:	2008      	movs	r0, #8
 8008494:	9007      	str	r0, [sp, #28]
 8008496:	9106      	str	r1, [sp, #24]
 8008498:	2100      	movs	r1, #0
 800849a:	9105      	str	r1, [sp, #20]
 800849c:	2100      	movs	r1, #0
 800849e:	9104      	str	r1, [sp, #16]
 80084a0:	9203      	str	r2, [sp, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	9202      	str	r2, [sp, #8]
 80084a6:	2200      	movs	r2, #0
 80084a8:	9201      	str	r2, [sp, #4]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80084b0:	4632      	mov	r2, r6
 80084b2:	4629      	mov	r1, r5
 80084b4:	4620      	mov	r0, r4
 80084b6:	f7fa febd 	bl	8003234 <CO_NMT_init>
 80084ba:	4603      	mov	r3, r0
 80084bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                      CO_TXCAN_HB,
                      CO_CAN_ID_HEARTBEAT + nodeId);

    if (err) return err;
 80084c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <CO_CANopenInit+0x1ca>
 80084c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80084cc:	e180      	b.n	80087d0 <CO_CANopenInit+0x4cc>

#if CO_NO_SYNC == 1
    /* SYNC */
    err = CO_SYNC_init(CO->SYNC,
 80084ce:	4b36      	ldr	r3, [pc, #216]	; (80085a8 <CO_CANopenInit+0x2a4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	695d      	ldr	r5, [r3, #20]
                       CO->em,
 80084d4:	4b34      	ldr	r3, [pc, #208]	; (80085a8 <CO_CANopenInit+0x2a4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(CO->SYNC,
 80084d8:	689e      	ldr	r6, [r3, #8]
                       CO->SDO[0],
 80084da:	4b33      	ldr	r3, [pc, #204]	; (80085a8 <CO_CANopenInit+0x2a4>)
 80084dc:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(CO->SYNC,
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	613b      	str	r3, [r7, #16]
                       &CO->NMT->operatingState,
 80084e2:	4b31      	ldr	r3, [pc, #196]	; (80085a8 <CO_CANopenInit+0x2a4>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	691b      	ldr	r3, [r3, #16]
    err = CO_SYNC_init(CO->SYNC,
 80084e8:	f103 0c0c 	add.w	ip, r3, #12
 80084ec:	4b2d      	ldr	r3, [pc, #180]	; (80085a4 <CO_CANopenInit+0x2a0>)
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	4a2c      	ldr	r2, [pc, #176]	; (80085a4 <CO_CANopenInit+0x2a0>)
 80084f2:	68d2      	ldr	r2, [r2, #12]
 80084f4:	492b      	ldr	r1, [pc, #172]	; (80085a4 <CO_CANopenInit+0x2a0>)
 80084f6:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
 80084fa:	60f9      	str	r1, [r7, #12]
                       OD_COB_ID_SYNCMessage,
                       OD_communicationCyclePeriod,
                       OD_synchronousCounterOverflowValue,
                       CO->CANmodule[0],
 80084fc:	482a      	ldr	r0, [pc, #168]	; (80085a8 <CO_CANopenInit+0x2a4>)
 80084fe:	6800      	ldr	r0, [r0, #0]
    err = CO_SYNC_init(CO->SYNC,
 8008500:	6800      	ldr	r0, [r0, #0]
                       CO_RXCAN_SYNC,
                       CO->CANmodule[0],
 8008502:	4c29      	ldr	r4, [pc, #164]	; (80085a8 <CO_CANopenInit+0x2a4>)
 8008504:	6824      	ldr	r4, [r4, #0]
    err = CO_SYNC_init(CO->SYNC,
 8008506:	6824      	ldr	r4, [r4, #0]
 8008508:	2100      	movs	r1, #0
 800850a:	9106      	str	r1, [sp, #24]
 800850c:	9405      	str	r4, [sp, #20]
 800850e:	2401      	movs	r4, #1
 8008510:	9404      	str	r4, [sp, #16]
 8008512:	9003      	str	r0, [sp, #12]
 8008514:	68f9      	ldr	r1, [r7, #12]
 8008516:	9102      	str	r1, [sp, #8]
 8008518:	9201      	str	r2, [sp, #4]
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	4663      	mov	r3, ip
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4631      	mov	r1, r6
 8008522:	4628      	mov	r0, r5
 8008524:	f7fe fcb2 	bl	8006e8c <CO_SYNC_init>
 8008528:	4603      	mov	r3, r0
 800852a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                       CO_TXCAN_SYNC);

    if (err) return err;
 800852e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <CO_CANopenInit+0x238>
 8008536:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800853a:	e149      	b.n	80087d0 <CO_CANopenInit+0x4cc>
#endif

#if CO_NO_TIME == 1
    /* TIME */
    err = CO_TIME_init(CO->TIME,
 800853c:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <CO_CANopenInit+0x2a4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6998      	ldr	r0, [r3, #24]
                       CO->em,
 8008542:	4b19      	ldr	r3, [pc, #100]	; (80085a8 <CO_CANopenInit+0x2a4>)
 8008544:	681b      	ldr	r3, [r3, #0]
    err = CO_TIME_init(CO->TIME,
 8008546:	689c      	ldr	r4, [r3, #8]
                       CO->SDO[0],
 8008548:	4b17      	ldr	r3, [pc, #92]	; (80085a8 <CO_CANopenInit+0x2a4>)
 800854a:	681b      	ldr	r3, [r3, #0]
    err = CO_TIME_init(CO->TIME,
 800854c:	685d      	ldr	r5, [r3, #4]
                       &CO->NMT->operatingState,
 800854e:	4b16      	ldr	r3, [pc, #88]	; (80085a8 <CO_CANopenInit+0x2a4>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	691b      	ldr	r3, [r3, #16]
    err = CO_TIME_init(CO->TIME,
 8008554:	f103 060c 	add.w	r6, r3, #12
 8008558:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <CO_CANopenInit+0x2a0>)
 800855a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855c:	613b      	str	r3, [r7, #16]
                       OD_COB_ID_TIME,
                       0,
                       CO->CANmodule[0],
 800855e:	4a12      	ldr	r2, [pc, #72]	; (80085a8 <CO_CANopenInit+0x2a4>)
 8008560:	6812      	ldr	r2, [r2, #0]
    err = CO_TIME_init(CO->TIME,
 8008562:	6812      	ldr	r2, [r2, #0]
                       CO_RXCAN_TIME,
                       CO->CANmodule[0],
 8008564:	4910      	ldr	r1, [pc, #64]	; (80085a8 <CO_CANopenInit+0x2a4>)
 8008566:	6809      	ldr	r1, [r1, #0]
    err = CO_TIME_init(CO->TIME,
 8008568:	6809      	ldr	r1, [r1, #0]
 800856a:	2302      	movs	r3, #2
 800856c:	9305      	str	r3, [sp, #20]
 800856e:	9104      	str	r1, [sp, #16]
 8008570:	2103      	movs	r1, #3
 8008572:	9103      	str	r1, [sp, #12]
 8008574:	9202      	str	r2, [sp, #8]
 8008576:	2200      	movs	r2, #0
 8008578:	9201      	str	r2, [sp, #4]
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	4633      	mov	r3, r6
 8008580:	462a      	mov	r2, r5
 8008582:	4621      	mov	r1, r4
 8008584:	f7fe fe5c 	bl	8007240 <CO_TIME_init>
 8008588:	4603      	mov	r3, r0
 800858a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                       CO_TXCAN_TIME);

    if (err) return err;
 800858e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <CO_CANopenInit+0x298>
 8008596:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800859a:	e119      	b.n	80087d0 <CO_CANopenInit+0x4cc>
#endif

    /* RPDO */
    for (i = 0; i < CO_NO_RPDO; i++) {
 800859c:	2300      	movs	r3, #0
 800859e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80085a0:	e079      	b.n	8008696 <CO_CANopenInit+0x392>
 80085a2:	bf00      	nop
 80085a4:	200001c4 	.word	0x200001c4
 80085a8:	20000b7c 	.word	0x20000b7c
 80085ac:	20000b88 	.word	0x20000b88
 80085b0:	080188a4 	.word	0x080188a4
 80085b4:	20000074 	.word	0x20000074
 80085b8:	2000006c 	.word	0x2000006c
 80085bc:	200000ac 	.word	0x200000ac
        CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
 80085c0:	4b85      	ldr	r3, [pc, #532]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	61fb      	str	r3, [r7, #28]
        uint16_t CANdevRxIdx = CO_RXCAN_RPDO + i;
 80085c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085ca:	3304      	adds	r3, #4
 80085cc:	837b      	strh	r3, [r7, #26]

        err = CO_RPDO_init(CO->RPDO[i],
 80085ce:	4b82      	ldr	r3, [pc, #520]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80085d6:	3306      	adds	r3, #6
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	613b      	str	r3, [r7, #16]
                           CO->em,
 80085e0:	4b7d      	ldr	r3, [pc, #500]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80085e2:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(CO->RPDO[i],
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	60fb      	str	r3, [r7, #12]
                           CO->SDO[0],
 80085e8:	4b7b      	ldr	r3, [pc, #492]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80085ea:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(CO->RPDO[i],
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	60bb      	str	r3, [r7, #8]
                           (void *)CO->SYNC,
 80085f0:	4b79      	ldr	r3, [pc, #484]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	607b      	str	r3, [r7, #4]
                           &CO->NMT->operatingState,
 80085f8:	4b77      	ldr	r3, [pc, #476]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
        err = CO_RPDO_init(CO->RPDO[i],
 80085fe:	f103 000c 	add.w	r0, r3, #12
 8008602:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008606:	2b03      	cmp	r3, #3
 8008608:	dc06      	bgt.n	8008618 <CO_CANopenInit+0x314>
                           nodeId,
                           ((i < 4) ? (CO_CAN_ID_RPDO_1 + i * 0x100) : 0),
 800860a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800860e:	3302      	adds	r3, #2
        err = CO_RPDO_init(CO->RPDO[i],
 8008610:	b29b      	uxth	r3, r3
 8008612:	021b      	lsls	r3, r3, #8
 8008614:	b29a      	uxth	r2, r3
 8008616:	e000      	b.n	800861a <CO_CANopenInit+0x316>
 8008618:	2200      	movs	r2, #0
                           0,
                           (CO_RPDOCommPar_t*)&OD_RPDOCommunicationParameter[i],
 800861a:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 800861e:	460b      	mov	r3, r1
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	440b      	add	r3, r1
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	3370      	adds	r3, #112	; 0x70
 8008628:	496c      	ldr	r1, [pc, #432]	; (80087dc <CO_CANopenInit+0x4d8>)
 800862a:	185c      	adds	r4, r3, r1
                           (CO_RPDOMapPar_t *)&OD_RPDOMappingParameter[i],
 800862c:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8008630:	460b      	mov	r3, r1
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	440b      	add	r3, r1
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	33a0      	adds	r3, #160	; 0xa0
 800863a:	4968      	ldr	r1, [pc, #416]	; (80087dc <CO_CANopenInit+0x4d8>)
 800863c:	440b      	add	r3, r1
        err = CO_RPDO_init(CO->RPDO[i],
 800863e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8008640:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8008644:	b289      	uxth	r1, r1
 8008646:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 8008648:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
 800864c:	b2ad      	uxth	r5, r5
 800864e:	8b7e      	ldrh	r6, [r7, #26]
 8008650:	9609      	str	r6, [sp, #36]	; 0x24
 8008652:	69fe      	ldr	r6, [r7, #28]
 8008654:	9608      	str	r6, [sp, #32]
 8008656:	9507      	str	r5, [sp, #28]
 8008658:	9106      	str	r1, [sp, #24]
 800865a:	9305      	str	r3, [sp, #20]
 800865c:	9404      	str	r4, [sp, #16]
 800865e:	2300      	movs	r3, #0
 8008660:	9303      	str	r3, [sp, #12]
 8008662:	9202      	str	r2, [sp, #8]
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	9000      	str	r0, [sp, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	68f9      	ldr	r1, [r7, #12]
 8008670:	6938      	ldr	r0, [r7, #16]
 8008672:	f7fb fef7 	bl	8004464 <CO_RPDO_init>
 8008676:	4603      	mov	r3, r0
 8008678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                           OD_H1400_RXPDO_1_PARAM + i,
                           OD_H1600_RXPDO_1_MAPPING + i,
                           CANdevRx,
                           CANdevRxIdx);

        if (err) return err;
 800867c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <CO_CANopenInit+0x386>
 8008684:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008688:	e0a2      	b.n	80087d0 <CO_CANopenInit+0x4cc>
    for (i = 0; i < CO_NO_RPDO; i++) {
 800868a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800868e:	b29b      	uxth	r3, r3
 8008690:	3301      	adds	r3, #1
 8008692:	b29b      	uxth	r3, r3
 8008694:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008696:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800869a:	2b03      	cmp	r3, #3
 800869c:	dd90      	ble.n	80085c0 <CO_CANopenInit+0x2bc>
    }

    /* TPDO */
    for (i = 0; i < CO_NO_TPDO; i++) {
 800869e:	2300      	movs	r3, #0
 80086a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80086a2:	e06e      	b.n	8008782 <CO_CANopenInit+0x47e>
        err = CO_TPDO_init(CO->TPDO[i],
 80086a4:	4b4c      	ldr	r3, [pc, #304]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80086ac:	330a      	adds	r3, #10
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	613b      	str	r3, [r7, #16]
                           CO->em,
 80086b6:	4b48      	ldr	r3, [pc, #288]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80086b8:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	60fb      	str	r3, [r7, #12]
                           CO->SDO[0],
 80086be:	4b46      	ldr	r3, [pc, #280]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80086c0:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	60bb      	str	r3, [r7, #8]
                           (void *)CO->SYNC,
 80086c6:	4b44      	ldr	r3, [pc, #272]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	607b      	str	r3, [r7, #4]
                           &CO->NMT->operatingState,
 80086ce:	4b42      	ldr	r3, [pc, #264]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	691b      	ldr	r3, [r3, #16]
        err = CO_TPDO_init(CO->TPDO[i],
 80086d4:	f103 000c 	add.w	r0, r3, #12
 80086d8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80086dc:	2b03      	cmp	r3, #3
 80086de:	dc06      	bgt.n	80086ee <CO_CANopenInit+0x3ea>
                           nodeId,
                           ((i < 4) ? (CO_CAN_ID_TPDO_1 + i * 0x100) : 0),
 80086e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086e2:	021b      	lsls	r3, r3, #8
 80086e4:	b29b      	uxth	r3, r3
        err = CO_TPDO_init(CO->TPDO[i],
 80086e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	e000      	b.n	80086f0 <CO_CANopenInit+0x3ec>
 80086ee:	2200      	movs	r2, #0
                           0,
                           (CO_TPDOCommPar_t*)&OD_TPDOCommunicationParameter[i],
 80086f0:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 80086f4:	460b      	mov	r3, r1
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	440b      	add	r3, r1
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8008700:	4936      	ldr	r1, [pc, #216]	; (80087dc <CO_CANopenInit+0x4d8>)
 8008702:	185c      	adds	r4, r3, r1
                           (CO_TPDOMapPar_t *)&OD_TPDOMappingParameter[i],
 8008704:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8008708:	460b      	mov	r3, r1
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	440b      	add	r3, r1
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008714:	4931      	ldr	r1, [pc, #196]	; (80087dc <CO_CANopenInit+0x4d8>)
 8008716:	440b      	add	r3, r1
 8008718:	603b      	str	r3, [r7, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 800871a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800871c:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8008720:	b289      	uxth	r1, r1
 8008722:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 8008724:	f505 55d0 	add.w	r5, r5, #6656	; 0x1a00
 8008728:	b2ad      	uxth	r5, r5
                           OD_H1800_TXPDO_1_PARAM + i,
                           OD_H1A00_TXPDO_1_MAPPING + i,
                           CO->CANmodule[0],
 800872a:	4e2b      	ldr	r6, [pc, #172]	; (80087d8 <CO_CANopenInit+0x4d4>)
 800872c:	6836      	ldr	r6, [r6, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 800872e:	6836      	ldr	r6, [r6, #0]
 8008730:	f8b7 c02e 	ldrh.w	ip, [r7, #46]	; 0x2e
 8008734:	f10c 0c03 	add.w	ip, ip, #3
 8008738:	fa1f f38c 	uxth.w	r3, ip
 800873c:	9309      	str	r3, [sp, #36]	; 0x24
 800873e:	9608      	str	r6, [sp, #32]
 8008740:	9507      	str	r5, [sp, #28]
 8008742:	9106      	str	r1, [sp, #24]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	9305      	str	r3, [sp, #20]
 8008748:	9404      	str	r4, [sp, #16]
 800874a:	2300      	movs	r3, #0
 800874c:	9303      	str	r3, [sp, #12]
 800874e:	9202      	str	r2, [sp, #8]
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	9000      	str	r0, [sp, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	6938      	ldr	r0, [r7, #16]
 800875e:	f7fb fef9 	bl	8004554 <CO_TPDO_init>
 8008762:	4603      	mov	r3, r0
 8008764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                           CO_TXCAN_TPDO + i);

        if (err) return err;
 8008768:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <CO_CANopenInit+0x472>
 8008770:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008774:	e02c      	b.n	80087d0 <CO_CANopenInit+0x4cc>
    for (i = 0; i < CO_NO_TPDO; i++) {
 8008776:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800877a:	b29b      	uxth	r3, r3
 800877c:	3301      	adds	r3, #1
 800877e:	b29b      	uxth	r3, r3
 8008780:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008782:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008786:	2b03      	cmp	r3, #3
 8008788:	dd8c      	ble.n	80086a4 <CO_CANopenInit+0x3a0>
    }

    /* Heartbeat consumer */
    err = CO_HBconsumer_init(CO->HBcons,
 800878a:	4b13      	ldr	r3, [pc, #76]	; (80087d8 <CO_CANopenInit+0x4d4>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
                             CO->em,
 8008790:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <CO_CANopenInit+0x4d4>)
 8008792:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(CO->HBcons,
 8008794:	6899      	ldr	r1, [r3, #8]
                             CO->SDO[0],
 8008796:	4b10      	ldr	r3, [pc, #64]	; (80087d8 <CO_CANopenInit+0x4d4>)
 8008798:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(CO->HBcons,
 800879a:	685c      	ldr	r4, [r3, #4]
 800879c:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <CO_CANopenInit+0x4dc>)
 800879e:	681b      	ldr	r3, [r3, #0]
                             &OD_consumerHeartbeatTime[0],
                             CO_HBcons_monitoredNodes,
                             CO_NO_HB_CONS,
                             CO->CANmodule[0],
 80087a0:	4a0d      	ldr	r2, [pc, #52]	; (80087d8 <CO_CANopenInit+0x4d4>)
 80087a2:	6812      	ldr	r2, [r2, #0]
    err = CO_HBconsumer_init(CO->HBcons,
 80087a4:	6812      	ldr	r2, [r2, #0]
 80087a6:	2509      	movs	r5, #9
 80087a8:	9503      	str	r5, [sp, #12]
 80087aa:	9202      	str	r2, [sp, #8]
 80087ac:	2201      	movs	r2, #1
 80087ae:	9201      	str	r2, [sp, #4]
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <CO_CANopenInit+0x4e0>)
 80087b4:	4622      	mov	r2, r4
 80087b6:	f7fa fa39 	bl	8002c2c <CO_HBconsumer_init>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             CO_RXCAN_CONS_HB);

    if (err) return err;
 80087c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <CO_CANopenInit+0x4ca>
 80087c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80087cc:	e000      	b.n	80087d0 <CO_CANopenInit+0x4cc>
                      OD_INDEX_TRACE_CONFIG + i,
                      OD_INDEX_TRACE + i);
    }
#endif

    return CO_ERROR_NO;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3734      	adds	r7, #52	; 0x34
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d8:	20000b7c 	.word	0x20000b7c
 80087dc:	200001c4 	.word	0x200001c4
 80087e0:	20000b8c 	.word	0x20000b8c
 80087e4:	200001f8 	.word	0x200001f8

080087e8 <CO_process>:

/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 80087e8:	b590      	push	{r4, r7, lr}
 80087ea:	b08b      	sub	sp, #44	; 0x2c
 80087ec:	af04      	add	r7, sp, #16
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
    uint8_t i;
    bool_t NMTisPreOrOperational = false;
 80087f4:	2300      	movs	r3, #0
 80087f6:	75bb      	strb	r3, [r7, #22]
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80087f8:	2300      	movs	r3, #0
 80087fa:	757b      	strb	r3, [r7, #21]

    if (co->NMT->operatingState == CO_NMT_PRE_OPERATIONAL ||
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8008804:	2b7f      	cmp	r3, #127	; 0x7f
 8008806:	d005      	beq.n	8008814 <CO_process+0x2c>
        co->NMT->operatingState == CO_NMT_OPERATIONAL)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f993 300c 	ldrsb.w	r3, [r3, #12]
    if (co->NMT->operatingState == CO_NMT_PRE_OPERATIONAL ||
 8008810:	2b05      	cmp	r3, #5
 8008812:	d101      	bne.n	8008818 <CO_process+0x30>
        NMTisPreOrOperational = true;
 8008814:	2301      	movs	r3, #1
 8008816:	75bb      	strb	r3, [r7, #22]

    /* SDOserver */
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8008818:	2300      	movs	r3, #0
 800881a:	75fb      	strb	r3, [r7, #23]
 800881c:	e00c      	b.n	8008838 <CO_process+0x50>
        CO_SDO_process(co->SDO[i],
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	6858      	ldr	r0, [r3, #4]
 8008828:	7db9      	ldrb	r1, [r7, #22]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	f7fd f87b 	bl	8005928 <CO_SDO_process>
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	3301      	adds	r3, #1
 8008836:	75fb      	strb	r3, [r7, #23]
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0ef      	beq.n	800881e <CO_process+0x36>
                       timeDifference_us,
                       timerNext_us);
    }

    /* Emergency */
    CO_EM_process(co->emPr,
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	68d8      	ldr	r0, [r3, #12]
 8008842:	4b18      	ldr	r3, [pc, #96]	; (80088a4 <CO_process+0xbc>)
 8008844:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008846:	7db9      	ldrb	r1, [r7, #22]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	4613      	mov	r3, r2
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	f7f9 fef2 	bl	8002638 <CO_EM_process>
                  timeDifference_us,
                  OD_inhibitTimeEMCY,
                  timerNext_us);

    /* NMT_Heartbeat */
    reset = CO_NMT_process(co->NMT,
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6918      	ldr	r0, [r3, #16]
 8008858:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <CO_process+0xbc>)
 800885a:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 800885e:	4b11      	ldr	r3, [pc, #68]	; (80088a4 <CO_process+0xbc>)
 8008860:	f8d3 4210 	ldr.w	r4, [r3, #528]	; 0x210
 8008864:	4b10      	ldr	r3, [pc, #64]	; (80088a8 <CO_process+0xc0>)
 8008866:	791b      	ldrb	r3, [r3, #4]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	9202      	str	r2, [sp, #8]
 800886c:	4a0f      	ldr	r2, [pc, #60]	; (80088ac <CO_process+0xc4>)
 800886e:	9201      	str	r2, [sp, #4]
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	4623      	mov	r3, r4
 8008874:	460a      	mov	r2, r1
 8008876:	68b9      	ldr	r1, [r7, #8]
 8008878:	f7fa fd93 	bl	80033a2 <CO_NMT_process>
 800887c:	4603      	mov	r3, r0
 800887e:	757b      	strb	r3, [r7, #21]
                           OD_errorBehavior,
                           timerNext_us);

#if CO_NO_TIME == 1
    /* TIME */
    CO_TIME_process(co->TIME,
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fd74 	bl	8007374 <CO_TIME_process>
                    timeDifference_us);
#endif

    /* Heartbeat consumer */
    CO_HBconsumer_process(co->HBcons,
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008890:	7db9      	ldrb	r1, [r7, #22]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	f7fa fb4f 	bl	8002f38 <CO_HBconsumer_process>
                    CO_GTWA_ENABLE,
                    timeDifference_us,
                    timerNext_us);
#endif

    return reset;
 800889a:	7d7b      	ldrb	r3, [r7, #21]
}
 800889c:	4618      	mov	r0, r3
 800889e:	371c      	adds	r7, #28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd90      	pop	{r4, r7, pc}
 80088a4:	200001c4 	.word	0x200001c4
 80088a8:	20000068 	.word	0x20000068
 80088ac:	20000221 	.word	0x20000221

080088b0 <CO_process_SYNC>:
/******************************************************************************/
#if CO_NO_SYNC == 1
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
    const CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6958      	ldr	r0, [r3, #20]
 80088c0:	4b10      	ldr	r3, [pc, #64]	; (8008904 <CO_process_SYNC+0x54>)
 80088c2:	691a      	ldr	r2, [r3, #16]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	f7fe fbaa 	bl	8007020 <CO_SYNC_process>
 80088cc:	4603      	mov	r3, r0
 80088ce:	75bb      	strb	r3, [r7, #22]
                                   timeDifference_us,
                                   OD_synchronousWindowLength,
                                   timerNext_us);

    bool_t syncWas = false;
 80088d0:	2300      	movs	r3, #0
 80088d2:	75fb      	strb	r3, [r7, #23]

    switch (sync_process) {
 80088d4:	7dbb      	ldrb	r3, [r7, #22]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d008      	beq.n	80088ec <CO_process_SYNC+0x3c>
 80088da:	2b02      	cmp	r3, #2
 80088dc:	dc0d      	bgt.n	80088fa <CO_process_SYNC+0x4a>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <CO_process_SYNC+0x48>
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d109      	bne.n	80088fa <CO_process_SYNC+0x4a>
    case CO_SYNC_NONE:
        break;
    case CO_SYNC_RECEIVED:
        syncWas = true;
 80088e6:	2301      	movs	r3, #1
 80088e8:	75fb      	strb	r3, [r7, #23]
        break;
 80088ea:	e006      	b.n	80088fa <CO_process_SYNC+0x4a>
    case CO_SYNC_OUTSIDE_WINDOW:
        CO_CANclearPendingSyncPDOs(co->CANmodule[0]);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fea3 	bl	800963c <CO_CANclearPendingSyncPDOs>
        break;
 80088f6:	e000      	b.n	80088fa <CO_process_SYNC+0x4a>
        break;
 80088f8:	bf00      	nop
    }

    return syncWas;
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	200001c4 	.word	0x200001c4

08008908 <CO_process_RPDO>:


/******************************************************************************/
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
    int16_t i;

    for (i = 0; i < CO_NO_RPDO; i++) {
 8008914:	2300      	movs	r3, #0
 8008916:	81fb      	strh	r3, [r7, #14]
 8008918:	e011      	b.n	800893e <CO_process_RPDO+0x36>
        CO_RPDO_process(co->RPDO[i], syncWas);
 800891a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	3306      	adds	r3, #6
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	78fa      	ldrb	r2, [r7, #3]
 800892a:	4611      	mov	r1, r2
 800892c:	4618      	mov	r0, r3
 800892e:	f7fc f843 	bl	80049b8 <CO_RPDO_process>
    for (i = 0; i < CO_NO_RPDO; i++) {
 8008932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008936:	b29b      	uxth	r3, r3
 8008938:	3301      	adds	r3, #1
 800893a:	b29b      	uxth	r3, r3
 800893c:	81fb      	strh	r3, [r7, #14]
 800893e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008942:	2b03      	cmp	r3, #3
 8008944:	dde9      	ble.n	800891a <CO_process_RPDO+0x12>
    }
}
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <CO_process_TPDO>:
/******************************************************************************/
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8008950:	b590      	push	{r4, r7, lr}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	607a      	str	r2, [r7, #4]
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	460b      	mov	r3, r1
 800895e:	72fb      	strb	r3, [r7, #11]
    int16_t i;

    /* Verify PDO Change Of State and process PDOs */
    for (i = 0; i < CO_NO_TPDO; i++) {
 8008960:	2300      	movs	r3, #0
 8008962:	82fb      	strh	r3, [r7, #22]
 8008964:	e02e      	b.n	80089c4 <CO_process_TPDO+0x74>
        if (!co->TPDO[i]->sendRequest)
 8008966:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	330a      	adds	r3, #10
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	7edb      	ldrb	r3, [r3, #27]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d112      	bne.n	80089a0 <CO_process_TPDO+0x50>
            co->TPDO[i]->sendRequest = CO_TPDOisCOS(co->TPDO[i]);
 800897a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	330a      	adds	r3, #10
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	6859      	ldr	r1, [r3, #4]
 8008988:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	330a      	adds	r3, #10
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	685c      	ldr	r4, [r3, #4]
 8008996:	4608      	mov	r0, r1
 8008998:	f7fb fe74 	bl	8004684 <CO_TPDOisCOS>
 800899c:	4603      	mov	r3, r0
 800899e:	76e3      	strb	r3, [r4, #27]
        CO_TPDO_process(co->TPDO[i], syncWas, timeDifference_us, timerNext_us);
 80089a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	330a      	adds	r3, #10
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	6858      	ldr	r0, [r3, #4]
 80089ae:	7af9      	ldrb	r1, [r7, #11]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	f7fc f906 	bl	8004bc4 <CO_TPDO_process>
    for (i = 0; i < CO_NO_TPDO; i++) {
 80089b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	3301      	adds	r3, #1
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	82fb      	strh	r3, [r7, #22]
 80089c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	ddcc      	ble.n	8008966 <CO_process_TPDO+0x16>
    }
}
 80089cc:	bf00      	nop
 80089ce:	bf00      	nop
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd90      	pop	{r4, r7, pc}
	...

080089d8 <MCD_reset>:
	int16_t ret = (1 << 10) | (1 << 12);
	pmc->statusWord |= ret;
}

void MCD_reset(MotionCtrlDef_t* pmc)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	g_MotionType = MOTION_UNKNOWN_MODE;
 80089e0:	4b0f      	ldr	r3, [pc, #60]	; (8008a20 <MCD_reset+0x48>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	701a      	strb	r2, [r3, #0]

	pmc->statusWord = DS402_buildStatusWordByStatus(pmc->statusWord, DS402_Status_NotReadyToSwitchON);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	885b      	ldrh	r3, [r3, #2]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	2101      	movs	r1, #1
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff f902 	bl	8007bf8 <DS402_buildStatusWordByStatus>
 80089f4:	4603      	mov	r3, r0
 80089f6:	461a      	mov	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	805a      	strh	r2, [r3, #2]
	pmc->controlWord = 0;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	801a      	strh	r2, [r3, #0]

	pmc->mode = DS402_OperMode_NoMode;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	22ff      	movs	r2, #255	; 0xff
 8008a06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pmc->displayMode = DS402_OperMode_NoMode;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	22ff      	movs	r2, #255	; 0xff
 8008a0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	HOME_reset();
 8008a12:	f7ff fa47 	bl	8007ea4 <HOME_reset>
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000b90 	.word	0x20000b90

08008a24 <MCD_setSwtichOnDisabled>:

/*Called by node's operational routine*/
void MCD_setSwtichOnDisabled(MotionCtrlDef_t* pmc)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	pmc->statusWord = DS402_buildStatusWordByStatus(pmc->statusWord, DS402_Status_SwitchONDisabled);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	885b      	ldrh	r3, [r3, #2]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2102      	movs	r1, #2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff f8df 	bl	8007bf8 <DS402_buildStatusWordByStatus>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	805a      	strh	r2, [r3, #2]
}
 8008a42:	bf00      	nop
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <MCD_Init>:

void MCD_Init(MotionCtrlDef_t* pmc)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	MCD_reset(pmc);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff ffbf 	bl	80089d8 <MCD_reset>

	/*Initialize the home, pp, ip mode callback*/
	HOME_Init(g_NodeDriveProfile.home_offset, 17, g_NodeDriveProfile.home_speed, 4*g_NodeDriveProfile.home_speed);
 8008a5a:	4b0e      	ldr	r3, [pc, #56]	; (8008a94 <MCD_Init+0x48>)
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <MCD_Init+0x48>)
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	4b0b      	ldr	r3, [pc, #44]	; (8008a94 <MCD_Init+0x48>)
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	2111      	movs	r1, #17
 8008a6c:	f7ff fa46 	bl	8007efc <HOME_Init>

	/*Trajectory position blocks*/
	TPB_Init();
 8008a70:	f003 f816 	bl	800baa0 <TPB_Init>
	pmc->statusWord = DS402_buildStatusWordByStatus(pmc->statusWord, DS402_Status_NotReadyToSwitchON);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	885b      	ldrh	r3, [r3, #2]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff f8bb 	bl	8007bf8 <DS402_buildStatusWordByStatus>
 8008a82:	4603      	mov	r3, r0
 8008a84:	461a      	mov	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	805a      	strh	r2, [r3, #2]
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20000b94 	.word	0x20000b94

08008a98 <MCD_changeMode>:

/* Motor control driver, change mode
 * mode: received from host
 * displaymode: set right mode if initialize successfully */
void MCD_changeMode(MotionCtrlDef_t* pmc)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	pmc->displayMode = pmc->mode;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	MT_setMode(pmc->displayMode);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f001 fe60 	bl	800a778 <MT_setMode>
}
 8008ab8:	bf00      	nop
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <MCD_OnProfileUpdate>:

void MCD_OnProfileUpdate(Node_DriveProfile_t *profile)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
	/*Reset the home and pp*/
	HOME_setProfile(profile->home_offset, 17, profile->home_speed, 4*profile->home_speed);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	4618      	mov	r0, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	2111      	movs	r1, #17
 8008ada:	f7ff f9f3 	bl	8007ec4 <HOME_setProfile>
	MT_setProfile(profile);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 fe1c 	bl	800a71c <MT_setProfile>
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <MCD_changeStatus>:
{
	MT_exec(pmc->controlWord);
}

void MCD_changeStatus(MotionCtrlDef_t* pmc, DS402_Status_t status)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
	pmc->statusWord = DS402_buildStatusWordByStatus(pmc->statusWord, status);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	885b      	ldrh	r3, [r3, #2]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	78fa      	ldrb	r2, [r7, #3]
 8008b00:	4611      	mov	r1, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7ff f878 	bl	8007bf8 <DS402_buildStatusWordByStatus>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	805a      	strh	r2, [r3, #2]
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <MCD_OnControlWordUpdate>:

void MCD_OnControlWordUpdate(MotionCtrlDef_t* pmc)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
	DS402_Status_t curStatus = DS402_getStatus(pmc->statusWord);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	885b      	ldrh	r3, [r3, #2]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff f906 	bl	8007d38 <DS402_getStatus>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]

	DS402_Status_t newStatus = DS402_getNewStatusByControlWord(curStatus, pmc->controlWord);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff f93b 	bl	8007db6 <DS402_getNewStatusByControlWord>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73bb      	strb	r3, [r7, #14]
	if (newStatus != curStatus) {
 8008b44:	7bba      	ldrb	r2, [r7, #14]
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d004      	beq.n	8008b56 <MCD_OnControlWordUpdate+0x3e>
		/*Change current status*/
		MCD_changeStatus(pmc, newStatus);
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff ffcb 	bl	8008aec <MCD_changeStatus>
	}

	if (newStatus == DS402_Status_OperationEnable) {
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	2b05      	cmp	r3, #5
 8008b5a:	d110      	bne.n	8008b7e <MCD_OnControlWordUpdate+0x66>

		if (pmc->mode != pmc->displayMode) {
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d002      	beq.n	8008b72 <MCD_OnControlWordUpdate+0x5a>
			/*Change current mode*/
			MCD_changeMode(pmc);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff ff93 	bl	8008a98 <MCD_changeMode>
		}

		/*Motion drive execute the control word*/
		MT_exec(pmc->controlWord);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 fe13 	bl	800a7a4 <MT_exec>
	}
}
 8008b7e:	bf00      	nop
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <MCD_OnCommandSerialNumberUpdate>:

void MCD_OnCommandSerialNumberUpdate()
{
 8008b86:	b480      	push	{r7}
 8008b88:	af00      	add	r7, sp, #0
	//int32_t commandSerialNumber = g_MotorDriverData.commandSerialNumber;
	//TPB_commandSerialNumberUpdate(commandSerialNumber);
}
 8008b8a:	bf00      	nop
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <MCD_OnTargetUpdate>:

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"

void MCD_OnTargetUpdate()
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
	//printf("Received the target pos: %ld\n", g_MotionCtrl.targetPos);
	//float ftarget = *(float*)&g_MotorDriverData.targetPos;
	//TPB_positionUpdate(ftarget);
}
 8008b98:	bf00      	nop
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <MCD_OnVelocityUpdate>:

void MCD_OnVelocityUpdate()
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	af00      	add	r7, sp, #0
	//float fvelocity = *(float*)&g_MotorDriverData.profileVel;
	//TPB_velocityUpdate(fvelocity);
}
 8008ba6:	bf00      	nop
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <MCD_OnAccelerationUpdate>:

void MCD_OnAccelerationUpdate()
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
	//float facceleration = *(float*)&g_MotorDriverData.acce;
	//TPB_accelerationUpdate(facceleration);
}
 8008bb4:	bf00      	nop
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
	...

08008bc0 <NmtState2Str>:
Node_DriveProfile_t g_NodeDriveProfile;
extern MotionCtrlDef_t g_MotionCtrl;

/* return string description of NMT state. */
static char *NmtState2Str(CO_NMT_internalState_t state)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 8008bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bce:	2b7f      	cmp	r3, #127	; 0x7f
 8008bd0:	d00c      	beq.n	8008bec <NmtState2Str+0x2c>
 8008bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8008bd4:	dc10      	bgt.n	8008bf8 <NmtState2Str+0x38>
 8008bd6:	2b05      	cmp	r3, #5
 8008bd8:	d00a      	beq.n	8008bf0 <NmtState2Str+0x30>
 8008bda:	2b05      	cmp	r3, #5
 8008bdc:	dc0c      	bgt.n	8008bf8 <NmtState2Str+0x38>
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <NmtState2Str+0x28>
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d006      	beq.n	8008bf4 <NmtState2Str+0x34>
 8008be6:	e007      	b.n	8008bf8 <NmtState2Str+0x38>
        case CO_NMT_INITIALIZING:    return "initializing";
 8008be8:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <NmtState2Str+0x48>)
 8008bea:	e006      	b.n	8008bfa <NmtState2Str+0x3a>
        case CO_NMT_PRE_OPERATIONAL: return "pre-operational";
 8008bec:	4b07      	ldr	r3, [pc, #28]	; (8008c0c <NmtState2Str+0x4c>)
 8008bee:	e004      	b.n	8008bfa <NmtState2Str+0x3a>
        case CO_NMT_OPERATIONAL:     return "operational";
 8008bf0:	4b07      	ldr	r3, [pc, #28]	; (8008c10 <NmtState2Str+0x50>)
 8008bf2:	e002      	b.n	8008bfa <NmtState2Str+0x3a>
        case CO_NMT_STOPPED:         return "stopped";
 8008bf4:	4b07      	ldr	r3, [pc, #28]	; (8008c14 <NmtState2Str+0x54>)
 8008bf6:	e000      	b.n	8008bfa <NmtState2Str+0x3a>
        default:                     return "unknown";
 8008bf8:	4b07      	ldr	r3, [pc, #28]	; (8008c18 <NmtState2Str+0x58>)
    }
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	08017f34 	.word	0x08017f34
 8008c0c:	08017f44 	.word	0x08017f44
 8008c10:	08017f54 	.word	0x08017f54
 8008c14:	08017f60 	.word	0x08017f60
 8008c18:	08017f68 	.word	0x08017f68

08008c1c <NODE_NMTCallbackPre>:

void NODE_NMTCallbackPre(void* obj)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
	/*called by NMT received isr*/
	CO_NMT_StateChangingSignal = 1;
 8008c24:	4b04      	ldr	r3, [pc, #16]	; (8008c38 <NODE_NMTCallbackPre+0x1c>)
 8008c26:	2201      	movs	r2, #1
 8008c28:	701a      	strb	r2, [r3, #0]
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	20000b91 	.word	0x20000b91

08008c3c <NODE_NMTCallback>:

void NODE_NMTCallback(CO_NMT_internalState_t state)
{
 8008c3c:	b590      	push	{r4, r7, lr}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	71fb      	strb	r3, [r7, #7]
	printf("Node NM state(%d): %s\n", state, NmtState2Str(state));
 8008c46:	f997 4007 	ldrsb.w	r4, [r7, #7]
 8008c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7ff ffb6 	bl	8008bc0 <NmtState2Str>
 8008c54:	4603      	mov	r3, r0
 8008c56:	461a      	mov	r2, r3
 8008c58:	4621      	mov	r1, r4
 8008c5a:	4809      	ldr	r0, [pc, #36]	; (8008c80 <NODE_NMTCallback+0x44>)
 8008c5c:	f00e f8bc 	bl	8016dd8 <iprintf>
	if (state == CO_NMT_OPERATIONAL){
 8008c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c64:	2b05      	cmp	r3, #5
 8008c66:	d107      	bne.n	8008c78 <NODE_NMTCallback+0x3c>
		/*Reset motion*/
		MT_reset();
 8008c68:	f001 fd22 	bl	800a6b0 <MT_reset>

		/*Reset motion controller*/
		MCD_reset(&g_MotionCtrl);
 8008c6c:	4805      	ldr	r0, [pc, #20]	; (8008c84 <NODE_NMTCallback+0x48>)
 8008c6e:	f7ff feb3 	bl	80089d8 <MCD_reset>

		/*Push to switch on disabled the mc driver*/
		MCD_setSwtichOnDisabled(&g_MotionCtrl);
 8008c72:	4804      	ldr	r0, [pc, #16]	; (8008c84 <NODE_NMTCallback+0x48>)
 8008c74:	f7ff fed6 	bl	8008a24 <MCD_setSwtichOnDisabled>
	}
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd90      	pop	{r4, r7, pc}
 8008c80:	08017f70 	.word	0x08017f70
 8008c84:	20000a44 	.word	0x20000a44

08008c88 <NODE_OnMasterHBTimeoutCallback>:

void NODE_OnMasterHBTimeoutCallback(uint8_t nodeId, uint8_t idx, void *object)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	603a      	str	r2, [r7, #0]
 8008c92:	71fb      	strb	r3, [r7, #7]
 8008c94:	460b      	mov	r3, r1
 8008c96:	71bb      	strb	r3, [r7, #6]
	printf("Lost communication with master.\n");
 8008c98:	4808      	ldr	r0, [pc, #32]	; (8008cbc <NODE_OnMasterHBTimeoutCallback+0x34>)
 8008c9a:	f00e f923 	bl	8016ee4 <puts>
	MT_reset();
 8008c9e:	f001 fd07 	bl	800a6b0 <MT_reset>

	MCD_reset(&g_MotionCtrl);
 8008ca2:	4807      	ldr	r0, [pc, #28]	; (8008cc0 <NODE_OnMasterHBTimeoutCallback+0x38>)
 8008ca4:	f7ff fe98 	bl	80089d8 <MCD_reset>

	CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8008ca8:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <NODE_OnMasterHBTimeoutCallback+0x3c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	227f      	movs	r2, #127	; 0x7f
 8008cb0:	731a      	strb	r2, [r3, #12]
}
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	08017f88 	.word	0x08017f88
 8008cc0:	20000a44 	.word	0x20000a44
 8008cc4:	20000b7c 	.word	0x20000b7c

08008cc8 <NODE_OnMasterHBStartedCallback>:

void NODE_OnMasterHBStartedCallback(uint8_t nodeId, uint8_t idx, void *object)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	603a      	str	r2, [r7, #0]
 8008cd2:	71fb      	strb	r3, [r7, #7]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	71bb      	strb	r3, [r7, #6]
	printf("Master heartbeat started.\n");
 8008cd8:	4803      	ldr	r0, [pc, #12]	; (8008ce8 <NODE_OnMasterHBStartedCallback+0x20>)
 8008cda:	f00e f903 	bl	8016ee4 <puts>
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	08017fa8 	.word	0x08017fa8

08008cec <NODE_OnProfileUpdate>:

CO_SDO_abortCode_t NODE_OnProfileUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]

	if (ODF_arg != NULL && ODF_arg->index == 0xC120 && ODF_arg->subIndex == 4) {
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d03d      	beq.n	8008d7a <NODE_OnProfileUpdate+0x8e>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	8a9b      	ldrh	r3, [r3, #20]
 8008d02:	f24c 1220 	movw	r2, #49440	; 0xc120
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d137      	bne.n	8008d7a <NODE_OnProfileUpdate+0x8e>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	7d9b      	ldrb	r3, [r3, #22]
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	d133      	bne.n	8008d7a <NODE_OnProfileUpdate+0x8e>
		// ds402 profile
		// Update the version
		CO_OD_ROM.ds402Profile.version = (uint32_t)(*(uint32_t*)&ODF_arg->data[0]);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a1a      	ldr	r2, [pc, #104]	; (8008d84 <NODE_OnProfileUpdate+0x98>)
 8008d1a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c

		printf("Node profile update(%08lx)\n", CO_OD_ROM.ds402Profile.version);
 8008d1e:	4b19      	ldr	r3, [pc, #100]	; (8008d84 <NODE_OnProfileUpdate+0x98>)
 8008d20:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8008d24:	4619      	mov	r1, r3
 8008d26:	4818      	ldr	r0, [pc, #96]	; (8008d88 <NODE_OnProfileUpdate+0x9c>)
 8008d28:	f00e f856 	bl	8016dd8 <iprintf>

		// Update the driver profile
		memcpy(&g_NodeDriveProfile, (unsigned char*)&ODF_arg->data[4], sizeof(Node_DriveProfile_t));
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	3304      	adds	r3, #4
 8008d32:	2220      	movs	r2, #32
 8008d34:	4619      	mov	r1, r3
 8008d36:	4815      	ldr	r0, [pc, #84]	; (8008d8c <NODE_OnProfileUpdate+0xa0>)
 8008d38:	f00d ff42 	bl	8016bc0 <memcpy>

		g_MotionCtrl.profileVel = g_NodeDriveProfile.speed;
 8008d3c:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <NODE_OnProfileUpdate+0xa0>)
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	4a13      	ldr	r2, [pc, #76]	; (8008d90 <NODE_OnProfileUpdate+0xa4>)
 8008d42:	6153      	str	r3, [r2, #20]
		g_MotionCtrl.acce = g_NodeDriveProfile.acce_ratio * g_NodeDriveProfile.speed;
 8008d44:	4b11      	ldr	r3, [pc, #68]	; (8008d8c <NODE_OnProfileUpdate+0xa0>)
 8008d46:	ed93 7a06 	vldr	s14, [r3, #24]
 8008d4a:	4b10      	ldr	r3, [pc, #64]	; (8008d8c <NODE_OnProfileUpdate+0xa0>)
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	ee07 3a90 	vmov	s15, r3
 8008d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d5e:	ee17 2a90 	vmov	r2, s15
 8008d62:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <NODE_OnProfileUpdate+0xa4>)
 8008d64:	619a      	str	r2, [r3, #24]
		g_MotionCtrl.dece = g_MotionCtrl.acce;
 8008d66:	4b0a      	ldr	r3, [pc, #40]	; (8008d90 <NODE_OnProfileUpdate+0xa4>)
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <NODE_OnProfileUpdate+0xa4>)
 8008d6c:	61d3      	str	r3, [r2, #28]

		g_NodeDriveProfile.updatePositionDuration = 50; // 50ms report actual position
 8008d6e:	4b07      	ldr	r3, [pc, #28]	; (8008d8c <NODE_OnProfileUpdate+0xa0>)
 8008d70:	2232      	movs	r2, #50	; 0x32
 8008d72:	839a      	strh	r2, [r3, #28]
		MCD_OnProfileUpdate(&g_NodeDriveProfile);
 8008d74:	4805      	ldr	r0, [pc, #20]	; (8008d8c <NODE_OnProfileUpdate+0xa0>)
 8008d76:	f7ff fea3 	bl	8008ac0 <MCD_OnProfileUpdate>
	}

	return abort;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	200001c4 	.word	0x200001c4
 8008d88:	08017fc4 	.word	0x08017fc4
 8008d8c:	20000b94 	.word	0x20000b94
 8008d90:	20000a44 	.word	0x20000a44

08008d94 <NODE_OnControlWordUpdate>:

CO_SDO_abortCode_t NODE_OnControlWordUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	60fb      	str	r3, [r7, #12]
	MCD_OnControlWordUpdate(&g_MotionCtrl);
 8008da0:	4803      	ldr	r0, [pc, #12]	; (8008db0 <NODE_OnControlWordUpdate+0x1c>)
 8008da2:	f7ff feb9 	bl	8008b18 <MCD_OnControlWordUpdate>
	return abort;
 8008da6:	68fb      	ldr	r3, [r7, #12]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000a44 	.word	0x20000a44

08008db4 <NODE_OnTargetUpdate>:

CO_SDO_abortCode_t NODE_OnTargetUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60fb      	str	r3, [r7, #12]
	MCD_OnTargetUpdate();
 8008dc0:	f7ff fee8 	bl	8008b94 <MCD_OnTargetUpdate>
	return abort;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <NODE_OnCommandSerialNumberUpdate>:
	MCD_changeMode(&g_MotionCtrl);
	return abort;
}

CO_SDO_abortCode_t NODE_OnCommandSerialNumberUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]
	MCD_OnCommandSerialNumberUpdate();
 8008dda:	f7ff fed4 	bl	8008b86 <MCD_OnCommandSerialNumberUpdate>
	return abort;
 8008dde:	68fb      	ldr	r3, [r7, #12]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <NODE_OnVelocityUpdate>:

CO_SDO_abortCode_t NODE_OnVelocityUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	60fb      	str	r3, [r7, #12]
	MCD_OnVelocityUpdate();
 8008df4:	f7ff fed5 	bl	8008ba2 <MCD_OnVelocityUpdate>
	return abort;
 8008df8:	68fb      	ldr	r3, [r7, #12]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <NODE_OnAccelerationUpdate>:

CO_SDO_abortCode_t NODE_OnAccelerationUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60fb      	str	r3, [r7, #12]
	MCD_OnAccelerationUpdate();
 8008e0e:	f7ff fecf 	bl	8008bb0 <MCD_OnAccelerationUpdate>
	return abort;
 8008e12:	68fb      	ldr	r3, [r7, #12]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <NODE_new>:

uint8_t NODE_new()
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
	uint32_t COMem;
	CO_ReturnError_t ret = CO_new(&COMem);
 8008e22:	463b      	mov	r3, r7
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7ff f8cb 	bl	8007fc0 <CO_new>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	71fb      	strb	r3, [r7, #7]
	if (ret) {
 8008e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d008      	beq.n	8008e48 <NODE_new+0x2c>
		LOG_Print(2, "CO new failed: %ld\n", ret);
 8008e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	4905      	ldr	r1, [pc, #20]	; (8008e54 <NODE_new+0x38>)
 8008e3e:	2002      	movs	r0, #2
 8008e40:	f000 fe04 	bl	8009a4c <LOG_Print>
		return ret;
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	e000      	b.n	8008e4a <NODE_new+0x2e>
	}

	return CO_ERROR_NO;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	08017fe0 	.word	0x08017fe0

08008e58 <NODE_Init>:

uint8_t NODE_Init(void* canDevice, uint8_t nodeId)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
	CO_ReturnError_t ret;

    ret = CO_CANinit(canDevice, 250);
 8008e64:	21fa      	movs	r1, #250	; 0xfa
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7ff fa1e 	bl	80082a8 <CO_CANinit>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8008e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d008      	beq.n	8008e8a <NODE_Init+0x32>
		LOG_Print(2, "CO CAN module init failed: %ld\n", ret);
 8008e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	497d      	ldr	r1, [pc, #500]	; (8009074 <NODE_Init+0x21c>)
 8008e80:	2002      	movs	r0, #2
 8008e82:	f000 fde3 	bl	8009a4c <LOG_Print>
		return ret;
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
 8008e88:	e0ef      	b.n	800906a <NODE_Init+0x212>
	}

	ret = CO_CANopenInit(nodeId);
 8008e8a:	78fb      	ldrb	r3, [r7, #3]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff fa39 	bl	8008304 <CO_CANopenInit>
 8008e92:	4603      	mov	r3, r0
 8008e94:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8008e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d008      	beq.n	8008eb0 <NODE_Init+0x58>
		LOG_Print(2, "CO CAN node init failed: %ld\n", ret);
 8008e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	4974      	ldr	r1, [pc, #464]	; (8009078 <NODE_Init+0x220>)
 8008ea6:	2002      	movs	r0, #2
 8008ea8:	f000 fdd0 	bl	8009a4c <LOG_Print>
		return ret;
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	e0dc      	b.n	800906a <NODE_Init+0x212>
	}

	/*Motion control drive intialize*/
	MCD_Init();
 8008eb0:	f7ff fdcc 	bl	8008a4c <MCD_Init>

	/* CO node management*/
	/* Implement a simple node management*/
	CO_NMT_initCallbackChanged(CO->NMT, NODE_NMTCallback);
 8008eb4:	4b71      	ldr	r3, [pc, #452]	; (800907c <NODE_Init+0x224>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	4971      	ldr	r1, [pc, #452]	; (8009080 <NODE_Init+0x228>)
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fa fa56 	bl	800336e <CO_NMT_initCallbackChanged>
	CO_NMT_initCallbackPre(CO->NMT, NULL, NODE_NMTCallbackPre);
 8008ec2:	4b6e      	ldr	r3, [pc, #440]	; (800907c <NODE_Init+0x224>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	4a6e      	ldr	r2, [pc, #440]	; (8009084 <NODE_Init+0x22c>)
 8008eca:	2100      	movs	r1, #0
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fa fa39 	bl	8003344 <CO_NMT_initCallbackPre>

	/* Integrate master heartbeat timeout callback*/
	CO_HBconsumer_initCallbackTimeout(CO->HBcons, 0, NULL, NODE_OnMasterHBTimeoutCallback);
 8008ed2:	4b6a      	ldr	r3, [pc, #424]	; (800907c <NODE_Init+0x224>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008ed8:	4b6b      	ldr	r3, [pc, #428]	; (8009088 <NODE_Init+0x230>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	2100      	movs	r1, #0
 8008ede:	f7fa f806 	bl	8002eee <CO_HBconsumer_initCallbackTimeout>

	/* Integrate master heartbeat start callback*/
	CO_HBconsumer_initCallbackHeartbeatStarted(CO->HBcons, 0, NULL, NODE_OnMasterHBStartedCallback);
 8008ee2:	4b66      	ldr	r3, [pc, #408]	; (800907c <NODE_Init+0x224>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008ee8:	4b68      	ldr	r3, [pc, #416]	; (800908c <NODE_Init+0x234>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	2100      	movs	r1, #0
 8008eee:	f7f9 ffd9 	bl	8002ea4 <CO_HBconsumer_initCallbackHeartbeatStarted>

	/* Register 0xC120 od entry download callback*/
	uint16_t entryNo = CO_OD_find(CO->SDO[0], 0xC120);
 8008ef2:	4b62      	ldr	r3, [pc, #392]	; (800907c <NODE_Init+0x224>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f24c 1120 	movw	r1, #49440	; 0xc120
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fc f98d 	bl	800521c <CO_OD_find>
 8008f02:	4603      	mov	r3, r0
 8008f04:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF){
 8008f06:	89bb      	ldrh	r3, [r7, #12]
 8008f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d00c      	beq.n	8008f2a <NODE_Init+0xd2>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnProfileUpdate;
 8008f10:	4b5a      	ldr	r3, [pc, #360]	; (800907c <NODE_Init+0x224>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008f1a:	89ba      	ldrh	r2, [r7, #12]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	4413      	add	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	440b      	add	r3, r1
 8008f26:	4a5a      	ldr	r2, [pc, #360]	; (8009090 <NODE_Init+0x238>)
 8008f28:	601a      	str	r2, [r3, #0]
	}

	/* Register 0x6040 od entry control word update callback*/
	entryNo = CO_OD_find(CO->SDO[0], 0x6040);
 8008f2a:	4b54      	ldr	r3, [pc, #336]	; (800907c <NODE_Init+0x224>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f246 0140 	movw	r1, #24640	; 0x6040
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fc f971 	bl	800521c <CO_OD_find>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008f3e:	89bb      	ldrh	r3, [r7, #12]
 8008f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d00c      	beq.n	8008f62 <NODE_Init+0x10a>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnControlWordUpdate;
 8008f48:	4b4c      	ldr	r3, [pc, #304]	; (800907c <NODE_Init+0x224>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008f52:	89ba      	ldrh	r2, [r7, #12]
 8008f54:	4613      	mov	r3, r2
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	440b      	add	r3, r1
 8008f5e:	4a4d      	ldr	r2, [pc, #308]	; (8009094 <NODE_Init+0x23c>)
 8008f60:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0x607A);
 8008f62:	4b46      	ldr	r3, [pc, #280]	; (800907c <NODE_Init+0x224>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	f246 017a 	movw	r1, #24698	; 0x607a
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fc f955 	bl	800521c <CO_OD_find>
 8008f72:	4603      	mov	r3, r0
 8008f74:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008f76:	89bb      	ldrh	r3, [r7, #12]
 8008f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00c      	beq.n	8008f9a <NODE_Init+0x142>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnTargetUpdate;
 8008f80:	4b3e      	ldr	r3, [pc, #248]	; (800907c <NODE_Init+0x224>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008f8a:	89ba      	ldrh	r2, [r7, #12]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	4413      	add	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	440b      	add	r3, r1
 8008f96:	4a40      	ldr	r2, [pc, #256]	; (8009098 <NODE_Init+0x240>)
 8008f98:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0x6081);
 8008f9a:	4b38      	ldr	r3, [pc, #224]	; (800907c <NODE_Init+0x224>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f246 0181 	movw	r1, #24705	; 0x6081
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fc f939 	bl	800521c <CO_OD_find>
 8008faa:	4603      	mov	r3, r0
 8008fac:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008fae:	89bb      	ldrh	r3, [r7, #12]
 8008fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d00c      	beq.n	8008fd2 <NODE_Init+0x17a>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnVelocityUpdate;
 8008fb8:	4b30      	ldr	r3, [pc, #192]	; (800907c <NODE_Init+0x224>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008fc2:	89ba      	ldrh	r2, [r7, #12]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	005b      	lsls	r3, r3, #1
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	440b      	add	r3, r1
 8008fce:	4a33      	ldr	r2, [pc, #204]	; (800909c <NODE_Init+0x244>)
 8008fd0:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0x6083);
 8008fd2:	4b2a      	ldr	r3, [pc, #168]	; (800907c <NODE_Init+0x224>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f246 0183 	movw	r1, #24707	; 0x6083
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fc f91d 	bl	800521c <CO_OD_find>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008fe6:	89bb      	ldrh	r3, [r7, #12]
 8008fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d00c      	beq.n	800900a <NODE_Init+0x1b2>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnAccelerationUpdate;
 8008ff0:	4b22      	ldr	r3, [pc, #136]	; (800907c <NODE_Init+0x224>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008ffa:	89ba      	ldrh	r2, [r7, #12]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	440b      	add	r3, r1
 8009006:	4a26      	ldr	r2, [pc, #152]	; (80090a0 <NODE_Init+0x248>)
 8009008:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0xC101);
 800900a:	4b1c      	ldr	r3, [pc, #112]	; (800907c <NODE_Init+0x224>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f24c 1101 	movw	r1, #49409	; 0xc101
 8009014:	4618      	mov	r0, r3
 8009016:	f7fc f901 	bl	800521c <CO_OD_find>
 800901a:	4603      	mov	r3, r0
 800901c:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 800901e:	89bb      	ldrh	r3, [r7, #12]
 8009020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009024:	4293      	cmp	r3, r2
 8009026:	d00c      	beq.n	8009042 <NODE_Init+0x1ea>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnCommandSerialNumberUpdate;
 8009028:	4b14      	ldr	r3, [pc, #80]	; (800907c <NODE_Init+0x224>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8009032:	89ba      	ldrh	r2, [r7, #12]
 8009034:	4613      	mov	r3, r2
 8009036:	005b      	lsls	r3, r3, #1
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	440b      	add	r3, r1
 800903e:	4a19      	ldr	r2, [pc, #100]	; (80090a4 <NODE_Init+0x24c>)
 8009040:	601a      	str	r2, [r3, #0]
	}
	/* CO node start the CAN driver*/
	CO_CANsetNormalMode(CO->CANmodule[0]);
 8009042:	4b0e      	ldr	r3, [pc, #56]	; (800907c <NODE_Init+0x224>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f867 	bl	800911c <CO_CANsetNormalMode>
	if (!CO->CANmodule[0]->CANnormal){
 800904e:	4b0b      	ldr	r3, [pc, #44]	; (800907c <NODE_Init+0x224>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	7c9b      	ldrb	r3, [r3, #18]
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d105      	bne.n	8009068 <NODE_Init+0x210>
		LOG_Print(2, "CAN module initialize and start failed.\n");
 800905c:	4912      	ldr	r1, [pc, #72]	; (80090a8 <NODE_Init+0x250>)
 800905e:	2002      	movs	r0, #2
 8009060:	f000 fcf4 	bl	8009a4c <LOG_Print>
		return CO_ERROR_SYSCALL;
 8009064:	23ef      	movs	r3, #239	; 0xef
 8009066:	e000      	b.n	800906a <NODE_Init+0x212>
	}

	return CO_ERROR_NO;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	08017ff4 	.word	0x08017ff4
 8009078:	08018014 	.word	0x08018014
 800907c:	20000b7c 	.word	0x20000b7c
 8009080:	08008c3d 	.word	0x08008c3d
 8009084:	08008c1d 	.word	0x08008c1d
 8009088:	08008c89 	.word	0x08008c89
 800908c:	08008cc9 	.word	0x08008cc9
 8009090:	08008ced 	.word	0x08008ced
 8009094:	08008d95 	.word	0x08008d95
 8009098:	08008db5 	.word	0x08008db5
 800909c:	08008de9 	.word	0x08008de9
 80090a0:	08008e03 	.word	0x08008e03
 80090a4:	08008dcf 	.word	0x08008dcf
 80090a8:	08018034 	.word	0x08018034

080090ac <NODE_process>:

void NODE_process(uint16_t timeDifference_us, bool_t syncWas)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	460a      	mov	r2, r1
 80090b6:	80fb      	strh	r3, [r7, #6]
 80090b8:	4613      	mov	r3, r2
 80090ba:	717b      	strb	r3, [r7, #5]
	if (CO_NMT_StateChangingSignal){
 80090bc:	4b10      	ldr	r3, [pc, #64]	; (8009100 <NODE_process+0x54>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00a      	beq.n	80090da <NODE_process+0x2e>
		CO_NMT_StateChangingSignal = 0;
 80090c4:	4b0e      	ldr	r3, [pc, #56]	; (8009100 <NODE_process+0x54>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	701a      	strb	r2, [r3, #0]
		NODE_NMTCallback(CO->NMT->operatingState);
 80090ca:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <NODE_process+0x58>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff fdb1 	bl	8008c3c <NODE_NMTCallback>
	}

	CO_process_RPDO(CO, true);
 80090da:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <NODE_process+0x58>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2101      	movs	r1, #1
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff fc11 	bl	8008908 <CO_process_RPDO>

	/*Process TPDO*/
	uint32_t next_time;
	CO_process_TPDO(CO, syncWas, timeDifference_us, &next_time);
 80090e6:	4b07      	ldr	r3, [pc, #28]	; (8009104 <NODE_process+0x58>)
 80090e8:	6818      	ldr	r0, [r3, #0]
 80090ea:	88fa      	ldrh	r2, [r7, #6]
 80090ec:	f107 030c 	add.w	r3, r7, #12
 80090f0:	7979      	ldrb	r1, [r7, #5]
 80090f2:	f7ff fc2d 	bl	8008950 <CO_process_TPDO>
}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20000b91 	.word	0x20000b91
 8009104:	20000b7c 	.word	0x20000b7c

08009108 <CO_CANsetConfigurationMode>:
#include "CO_OD.h"

static CAN_TxHeaderTypeDef TxHeader;

/******************************************************************************/
void CO_CANsetConfigurationMode(void *CANptr){
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <CO_CANsetNormalMode>:


/******************************************************************************/
void CO_CANsetNormalMode(CO_CANmodule_t *CANmodule){
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */

  if (HAL_CAN_ActivateNotification(CANmodule->CANptr,
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2113      	movs	r1, #19
 800912a:	4618      	mov	r0, r3
 800912c:	f005 fd97 	bl	800ec5e <HAL_CAN_ActivateNotification>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <CO_CANsetNormalMode+0x20>
		  CAN_IT_RX_FIFO0_MSG_PENDING |
		  CAN_IT_RX_FIFO1_MSG_PENDING |
		  CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
    CANmodule->CANnormal = false;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	749a      	strb	r2, [r3, #18]
  }

  if (HAL_CAN_Start(CANmodule->CANptr) != HAL_OK){
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4618      	mov	r0, r3
 8009142:	f005 fab5 	bl	800e6b0 <HAL_CAN_Start>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <CO_CANsetNormalMode+0x38>
	CANmodule->CANnormal = false;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	749a      	strb	r2, [r3, #18]
  }else{
    CANmodule->CANnormal = true;
  }
}
 8009152:	e002      	b.n	800915a <CO_CANsetNormalMode+0x3e>
    CANmodule->CANnormal = true;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	749a      	strb	r2, [r3, #18]
}
 800915a:	bf00      	nop
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
	...

08009164 <CO_CANmodule_init>:
        CO_CANrx_t              rxArray[],
        uint16_t                rxSize,
        CO_CANtx_t              txArray[],
        uint16_t                txSize,
        uint16_t                CANbitRate)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b094      	sub	sp, #80	; 0x50
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	807b      	strh	r3, [r7, #2]
    uint16_t i;

    /* verify arguments */
    if(CANmodule==NULL || rxArray==NULL || txArray==NULL){
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <CO_CANmodule_init+0x20>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <CO_CANmodule_init+0x20>
 800917e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8009184:	f04f 33ff 	mov.w	r3, #4294967295
 8009188:	e145      	b.n	8009416 <CO_CANmodule_init+0x2b2>
    }

    /* Configure object variables */
    CANmodule->CANptr = CANptr;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	601a      	str	r2, [r3, #0]
    CANmodule->rxArray = rxArray;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	887a      	ldrh	r2, [r7, #2]
 800919a:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091a0:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80091a8:	821a      	strh	r2, [r3, #16]
    CANmodule->CANnormal = false;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	749a      	strb	r2, [r3, #18]

    CANmodule->useCANrxFilters = false; /* Use standard id, none id filter */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	74da      	strb	r2, [r3, #19]

    CANmodule->bufferInhibitFlag = false;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	751a      	strb	r2, [r3, #20]
    CANmodule->firstCANtxMessage = true;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2201      	movs	r2, #1
 80091c0:	755a      	strb	r2, [r3, #21]
    CANmodule->CANtxCount = 0U;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	82da      	strh	r2, [r3, #22]
    CANmodule->errOld = 0U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	619a      	str	r2, [r3, #24]
    CANmodule->em = NULL;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	61da      	str	r2, [r3, #28]

    for(i=0U; i<rxSize; i++){
 80091d4:	2300      	movs	r3, #0
 80091d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80091da:	e031      	b.n	8009240 <CO_CANmodule_init+0xdc>
        rxArray[i].ident = 0U;
 80091dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80091e0:	4613      	mov	r3, r2
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	461a      	mov	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4413      	add	r3, r2
 80091ee:	2200      	movs	r2, #0
 80091f0:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 80091f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80091f6:	4613      	mov	r3, r2
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	461a      	mov	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4413      	add	r3, r2
 8009204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009208:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 800920a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800920e:	4613      	mov	r3, r2
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	4413      	add	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	461a      	mov	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4413      	add	r3, r2
 800921c:	2200      	movs	r2, #0
 800921e:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8009220:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009224:	4613      	mov	r3, r2
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	461a      	mov	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4413      	add	r3, r2
 8009232:	2200      	movs	r2, #0
 8009234:	609a      	str	r2, [r3, #8]
    for(i=0U; i<rxSize; i++){
 8009236:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800923a:	3301      	adds	r3, #1
 800923c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009240:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009244:	887b      	ldrh	r3, [r7, #2]
 8009246:	429a      	cmp	r2, r3
 8009248:	d3c8      	bcc.n	80091dc <CO_CANmodule_init+0x78>
    }

    for(i=0U; i<txSize; i++){
 800924a:	2300      	movs	r3, #0
 800924c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009250:	e00b      	b.n	800926a <CO_CANmodule_init+0x106>
        txArray[i].bufferFull = false;
 8009252:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009256:	011b      	lsls	r3, r3, #4
 8009258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800925a:	4413      	add	r3, r2
 800925c:	2200      	movs	r2, #0
 800925e:	735a      	strb	r2, [r3, #13]
    for(i=0U; i<txSize; i++){
 8009260:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009264:	3301      	adds	r3, #1
 8009266:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800926a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800926e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009272:	429a      	cmp	r2, r3
 8009274:	d3ed      	bcc.n	8009252 <CO_CANmodule_init+0xee>
    }

    /*STM32 CAN initialize*/
    CO_CANmodule_disable(CANmodule);
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 f8d4 	bl	8009424 <CO_CANmodule_disable>
    HAL_CAN_MspDeInit(CANmodule->CANptr);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4618      	mov	r0, r3
 8009282:	f7f7 fe13 	bl	8000eac <HAL_CAN_MspDeInit>

    /*ReInitialize msp gpio and nvic*/
    HAL_CAN_MspInit(CANmodule->CANptr);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4618      	mov	r0, r3
 800928c:	f7f7 fda6 	bl	8000ddc <HAL_CAN_MspInit>

    /* Time rate calc with http://www.bittiming.can-wiki.info/
     * The base MCU F405, CAN system clock: 42M
     * */
    uint32_t Prescaler;
    uint32_t seg1 = CAN_BS1_10TQ;
 8009290:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8009294:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t seg2 = CAN_BS2_1TQ;
 8009296:	2300      	movs	r3, #0
 8009298:	643b      	str	r3, [r7, #64]	; 0x40

    switch(CANbitRate){
 800929a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800929e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092a2:	d01d      	beq.n	80092e0 <CO_CANmodule_init+0x17c>
 80092a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092a8:	dc5f      	bgt.n	800936a <CO_CANmodule_init+0x206>
 80092aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80092ae:	d020      	beq.n	80092f2 <CO_CANmodule_init+0x18e>
 80092b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80092b4:	dc59      	bgt.n	800936a <CO_CANmodule_init+0x206>
 80092b6:	2bfa      	cmp	r3, #250	; 0xfa
 80092b8:	d024      	beq.n	8009304 <CO_CANmodule_init+0x1a0>
 80092ba:	2bfa      	cmp	r3, #250	; 0xfa
 80092bc:	dc55      	bgt.n	800936a <CO_CANmodule_init+0x206>
 80092be:	2b7d      	cmp	r3, #125	; 0x7d
 80092c0:	d029      	beq.n	8009316 <CO_CANmodule_init+0x1b2>
 80092c2:	2b7d      	cmp	r3, #125	; 0x7d
 80092c4:	dc51      	bgt.n	800936a <CO_CANmodule_init+0x206>
 80092c6:	2b64      	cmp	r3, #100	; 0x64
 80092c8:	d02e      	beq.n	8009328 <CO_CANmodule_init+0x1c4>
 80092ca:	2b64      	cmp	r3, #100	; 0x64
 80092cc:	dc4d      	bgt.n	800936a <CO_CANmodule_init+0x206>
 80092ce:	2b32      	cmp	r3, #50	; 0x32
 80092d0:	d032      	beq.n	8009338 <CO_CANmodule_init+0x1d4>
 80092d2:	2b32      	cmp	r3, #50	; 0x32
 80092d4:	dc49      	bgt.n	800936a <CO_CANmodule_init+0x206>
 80092d6:	2b0a      	cmp	r3, #10
 80092d8:	d03e      	beq.n	8009358 <CO_CANmodule_init+0x1f4>
 80092da:	2b14      	cmp	r3, #20
 80092dc:	d034      	beq.n	8009348 <CO_CANmodule_init+0x1e4>
 80092de:	e044      	b.n	800936a <CO_CANmodule_init+0x206>
    case 1000: {
    	Prescaler = 3;
 80092e0:	2303      	movs	r3, #3
 80092e2:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_11TQ;
 80092e4:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80092e8:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_2TQ;
 80092ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80092ee:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 80092f0:	e042      	b.n	8009378 <CO_CANmodule_init+0x214>
    }
    case 500:  {
    	Prescaler = 5;
 80092f2:	2305      	movs	r3, #5
 80092f4:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_13TQ;
 80092f6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80092fa:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_2TQ;
 80092fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009300:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8009302:	e039      	b.n	8009378 <CO_CANmodule_init+0x214>
    }
    case 250:  {
    	Prescaler = 10;
 8009304:	230a      	movs	r3, #10
 8009306:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_13TQ;
 8009308:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800930c:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_2TQ;
 800930e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009312:	643b      	str	r3, [r7, #64]	; 0x40
    	break;   // default is 8
 8009314:	e030      	b.n	8009378 <CO_CANmodule_init+0x214>
    }
    case 125:  {
    	Prescaler = 20;
 8009316:	2314      	movs	r3, #20
 8009318:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_13TQ;
 800931a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800931e:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_2TQ;
 8009320:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009324:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8009326:	e027      	b.n	8009378 <CO_CANmodule_init+0x214>
    }
    case 100:  {
    	Prescaler = 35;
 8009328:	2323      	movs	r3, #35	; 0x23
 800932a:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 800932c:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8009330:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 8009332:	2300      	movs	r3, #0
 8009334:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8009336:	e01f      	b.n	8009378 <CO_CANmodule_init+0x214>
    }
    case 50:   {
    	Prescaler = 70;
 8009338:	2346      	movs	r3, #70	; 0x46
 800933a:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 800933c:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8009340:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 8009342:	2300      	movs	r3, #0
 8009344:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8009346:	e017      	b.n	8009378 <CO_CANmodule_init+0x214>
    }
    case 20:   {
    	Prescaler = 175;
 8009348:	23af      	movs	r3, #175	; 0xaf
 800934a:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 800934c:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8009350:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 8009352:	2300      	movs	r3, #0
 8009354:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8009356:	e00f      	b.n	8009378 <CO_CANmodule_init+0x214>
    }
    case 10:   {
    	Prescaler = 350;
 8009358:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800935c:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 800935e:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8009362:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 8009364:	2300      	movs	r3, #0
 8009366:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8009368:	e006      	b.n	8009378 <CO_CANmodule_init+0x214>
    }
    default: {// default setting
    	Prescaler = 7;
 800936a:	2307      	movs	r3, #7
 800936c:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 800936e:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8009372:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 8009374:	2300      	movs	r3, #0
 8009376:	643b      	str	r3, [r7, #64]	; 0x40
    }
    }

    /*Target baudrate 500K, now accept 250K compatible with FDCAN*/

    CAN_HandleTypeDef* canHandle = (CAN_HandleTypeDef*)CANmodule->CANptr;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
    canHandle->Instance = CAN1;
 800937e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009380:	4a27      	ldr	r2, [pc, #156]	; (8009420 <CO_CANmodule_init+0x2bc>)
 8009382:	601a      	str	r2, [r3, #0]
    canHandle->Init.Prescaler = Prescaler;
 8009384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009388:	605a      	str	r2, [r3, #4]
    canHandle->Init.Mode = CAN_MODE_NORMAL;
 800938a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938c:	2200      	movs	r2, #0
 800938e:	609a      	str	r2, [r3, #8]
    canHandle->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009392:	2200      	movs	r2, #0
 8009394:	60da      	str	r2, [r3, #12]
    canHandle->Init.TimeSeg1 = seg1;
 8009396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800939a:	611a      	str	r2, [r3, #16]
    canHandle->Init.TimeSeg2 = seg2;
 800939c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093a0:	615a      	str	r2, [r3, #20]
    canHandle->Init.TimeTriggeredMode = DISABLE;
 80093a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a4:	2200      	movs	r2, #0
 80093a6:	761a      	strb	r2, [r3, #24]
    canHandle->Init.AutoBusOff = ENABLE;
 80093a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093aa:	2201      	movs	r2, #1
 80093ac:	765a      	strb	r2, [r3, #25]
    canHandle->Init.AutoWakeUp = ENABLE;
 80093ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b0:	2201      	movs	r2, #1
 80093b2:	769a      	strb	r2, [r3, #26]
    canHandle->Init.AutoRetransmission = ENABLE;
 80093b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b6:	2201      	movs	r2, #1
 80093b8:	76da      	strb	r2, [r3, #27]
    canHandle->Init.ReceiveFifoLocked = DISABLE;
 80093ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093bc:	2200      	movs	r2, #0
 80093be:	771a      	strb	r2, [r3, #28]
    canHandle->Init.TransmitFifoPriority = DISABLE;
 80093c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c2:	2200      	movs	r2, #0
 80093c4:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(canHandle) != HAL_OK)
 80093c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093c8:	f004 ff96 	bl	800e2f8 <HAL_CAN_Init>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <CO_CANmodule_init+0x272>
    {
      Error_Handler();
 80093d2:	f7f8 f919 	bl	8001608 <Error_Handler>
    }

    CAN_FilterTypeDef filter;
    filter.FilterBank = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	62bb      	str	r3, [r7, #40]	; 0x28
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80093da:	2300      	movs	r3, #0
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
    filter.FilterIdHigh = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]
    filter.FilterIdLow = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	61bb      	str	r3, [r7, #24]
    filter.FilterMaskIdHigh = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	61fb      	str	r3, [r7, #28]
    filter.FilterMaskIdLow = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	623b      	str	r3, [r7, #32]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80093f2:	2301      	movs	r3, #1
 80093f4:	633b      	str	r3, [r7, #48]	; 0x30
    filter.FilterActivation = CAN_FILTER_ENABLE;
 80093f6:	2301      	movs	r3, #1
 80093f8:	637b      	str	r3, [r7, #52]	; 0x34
    filter.SlaveStartFilterBank = 14;
 80093fa:	230e      	movs	r3, #14
 80093fc:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(canHandle, &filter) != HAL_OK) {
 80093fe:	f107 0314 	add.w	r3, r7, #20
 8009402:	4619      	mov	r1, r3
 8009404:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009406:	f005 f873 	bl	800e4f0 <HAL_CAN_ConfigFilter>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <CO_CANmodule_init+0x2b0>
    	Error_Handler();
 8009410:	f7f8 f8fa 	bl	8001608 <Error_Handler>
    }

    return CO_ERROR_NO;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3750      	adds	r7, #80	; 0x50
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	40006400 	.word	0x40006400

08009424 <CO_CANmodule_disable>:


/******************************************************************************/
void CO_CANmodule_disable(CO_CANmodule_t *CANmodule){
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
    /* turn off the module */
  CANmodule->CANnormal = false;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	749a      	strb	r2, [r3, #18]
  HAL_CAN_DeactivateNotification(CANmodule->CANptr,
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2113      	movs	r1, #19
 8009438:	4618      	mov	r0, r3
 800943a:	f005 fc36 	bl	800ecaa <HAL_CAN_DeactivateNotification>
		  CAN_IT_RX_FIFO0_MSG_PENDING |
		  		  CAN_IT_RX_FIFO1_MSG_PENDING |
		  		  CAN_IT_TX_MAILBOX_EMPTY);
  HAL_CAN_Stop(CANmodule->CANptr);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4618      	mov	r0, r3
 8009444:	f005 f978 	bl	800e738 <HAL_CAN_Stop>
}
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <CO_CANrxBufferInit>:
        uint16_t                ident,
        uint16_t                mask,
        bool_t                  rtr,
        void                   *object,
        void                  (*CANrx_callback)(void *object, void *message))
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	4608      	mov	r0, r1
 800945a:	4611      	mov	r1, r2
 800945c:	461a      	mov	r2, r3
 800945e:	4603      	mov	r3, r0
 8009460:	817b      	strh	r3, [r7, #10]
 8009462:	460b      	mov	r3, r1
 8009464:	813b      	strh	r3, [r7, #8]
 8009466:	4613      	mov	r3, r2
 8009468:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800946a:	2300      	movs	r3, #0
 800946c:	75fb      	strb	r3, [r7, #23]

    if((CANmodule!=NULL) && (object!=NULL) && (CANrx_callback!=NULL) && (index < CANmodule->rxSize)){
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d039      	beq.n	80094e8 <CO_CANrxBufferInit+0x98>
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	2b00      	cmp	r3, #0
 8009478:	d036      	beq.n	80094e8 <CO_CANrxBufferInit+0x98>
 800947a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947c:	2b00      	cmp	r3, #0
 800947e:	d033      	beq.n	80094e8 <CO_CANrxBufferInit+0x98>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	891b      	ldrh	r3, [r3, #8]
 8009484:	897a      	ldrh	r2, [r7, #10]
 8009486:	429a      	cmp	r2, r3
 8009488:	d22e      	bcs.n	80094e8 <CO_CANrxBufferInit+0x98>
        /* buffer, which will be configured */
        CO_CANrx_t *buffer = &CANmodule->rxArray[index];
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6859      	ldr	r1, [r3, #4]
 800948e:	897a      	ldrh	r2, [r7, #10]
 8009490:	4613      	mov	r3, r2
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	440b      	add	r3, r1
 800949a:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a0:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094a6:	609a      	str	r2, [r3, #8]

        /* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
        buffer->ident = ident << 2;
 80094a8:	893b      	ldrh	r3, [r7, #8]
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	801a      	strh	r2, [r3, #0]
        if (rtr) buffer->ident |= 0x02;
 80094b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d006      	beq.n	80094c8 <CO_CANrxBufferInit+0x78>
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	f043 0302 	orr.w	r3, r3, #2
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	801a      	strh	r2, [r3, #0]
        buffer->mask = ((mask & 0x07FF) << 2) | 0x02;
 80094c8:	88fb      	ldrh	r3, [r7, #6]
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	b21a      	sxth	r2, r3
 80094ce:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 80094d2:	4013      	ands	r3, r2
 80094d4:	b21b      	sxth	r3, r3
 80094d6:	f043 0302 	orr.w	r3, r3, #2
 80094da:	b21b      	sxth	r3, r3
 80094dc:	b29a      	uxth	r2, r3
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if(CANmodule->useCANrxFilters){
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	7cdb      	ldrb	r3, [r3, #19]
    if((CANmodule!=NULL) && (object!=NULL) && (CANrx_callback!=NULL) && (index < CANmodule->rxSize)){
 80094e6:	e001      	b.n	80094ec <CO_CANrxBufferInit+0x9c>

        }
    }
    else{
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80094e8:	23ff      	movs	r3, #255	; 0xff
 80094ea:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 80094ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	371c      	adds	r7, #28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <CO_CANtxBufferInit>:
        uint16_t                index,
        uint16_t                ident,
        bool_t                  rtr,
        uint8_t                 noOfBytes,
        bool_t                  syncFlag)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	461a      	mov	r2, r3
 800950a:	4603      	mov	r3, r0
 800950c:	817b      	strh	r3, [r7, #10]
 800950e:	460b      	mov	r3, r1
 8009510:	813b      	strh	r3, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	71fb      	strb	r3, [r7, #7]
    CO_CANtx_t *buffer = NULL;
 8009516:	2300      	movs	r3, #0
 8009518:	617b      	str	r3, [r7, #20]

    if((CANmodule != NULL) && (index < CANmodule->txSize)){
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d026      	beq.n	800956e <CO_CANtxBufferInit+0x72>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8a1b      	ldrh	r3, [r3, #16]
 8009524:	897a      	ldrh	r2, [r7, #10]
 8009526:	429a      	cmp	r2, r3
 8009528:	d221      	bcs.n	800956e <CO_CANtxBufferInit+0x72>
        /* get specific buffer */
        buffer = &CANmodule->txArray[index];
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	897b      	ldrh	r3, [r7, #10]
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	4413      	add	r3, r2
 8009534:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.
         * Microcontroller specific. */
        buffer->ident = (ident & 0x07FF) << 2;
 8009536:	893b      	ldrh	r3, [r7, #8]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	461a      	mov	r2, r3
 800953c:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8009540:	4013      	ands	r3, r2
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	6013      	str	r3, [r2, #0]
        if (rtr) buffer->ident |= 0x02;
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d005      	beq.n	8009558 <CO_CANtxBufferInit+0x5c>
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f043 0202 	orr.w	r2, r3, #2
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	601a      	str	r2, [r3, #0]

        buffer->DLC = noOfBytes;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800955e:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	2200      	movs	r2, #0
 8009564:	735a      	strb	r2, [r3, #13]
        buffer->syncFlag = syncFlag;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800956c:	739a      	strb	r2, [r3, #14]
    }

    return buffer;
 800956e:	697b      	ldr	r3, [r7, #20]
}
 8009570:	4618      	mov	r0, r3
 8009572:	371c      	adds	r7, #28
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t CO_CANsend(CO_CANmodule_t *CANmodule, CO_CANtx_t *buffer)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8009586:	2300      	movs	r3, #0
 8009588:	73fb      	strb	r3, [r7, #15]
    }*/

    CO_LOCK_CAN_SEND();

    /* if CAN TX buffer is free, copy message to it */
    if(CANmodule->CANtxCount == 0 && (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0)){
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	8adb      	ldrh	r3, [r3, #22]
 800958e:	b29b      	uxth	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d13c      	bne.n	800960e <CO_CANsend+0x92>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4618      	mov	r0, r3
 800959a:	f005 f9f1 	bl	800e980 <HAL_CAN_GetTxMailboxesFreeLevel>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d034      	beq.n	800960e <CO_CANsend+0x92>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	7b9b      	ldrb	r3, [r3, #14]
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	751a      	strb	r2, [r3, #20]
        /* copy message and txRequest */

        TxHeader.StdId   = (buffer->ident >> 2) & 0x7FF;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	089b      	lsrs	r3, r3, #2
 80095b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095b8:	4a1f      	ldr	r2, [pc, #124]	; (8009638 <CO_CANsend+0xbc>)
 80095ba:	6013      	str	r3, [r2, #0]
        TxHeader.DLC     = buffer->DLC;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	791b      	ldrb	r3, [r3, #4]
 80095c0:	461a      	mov	r2, r3
 80095c2:	4b1d      	ldr	r3, [pc, #116]	; (8009638 <CO_CANsend+0xbc>)
 80095c4:	611a      	str	r2, [r3, #16]
        TxHeader.ExtId   = 0;
 80095c6:	4b1c      	ldr	r3, [pc, #112]	; (8009638 <CO_CANsend+0xbc>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	605a      	str	r2, [r3, #4]
        TxHeader.IDE     = CAN_ID_STD;
 80095cc:	4b1a      	ldr	r3, [pc, #104]	; (8009638 <CO_CANsend+0xbc>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	609a      	str	r2, [r3, #8]
        TxHeader.RTR     = buffer->ident & 0x02;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	4a17      	ldr	r2, [pc, #92]	; (8009638 <CO_CANsend+0xbc>)
 80095dc:	60d3      	str	r3, [r2, #12]

        uint32_t mailBox;
        if (HAL_CAN_AddTxMessage(CANmodule->CANptr, &TxHeader, &buffer->data[0], &mailBox) != HAL_OK){
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6818      	ldr	r0, [r3, #0]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	1d5a      	adds	r2, r3, #5
 80095e6:	f107 0308 	add.w	r3, r7, #8
 80095ea:	4913      	ldr	r1, [pc, #76]	; (8009638 <CO_CANsend+0xbc>)
 80095ec:	f005 f8ed 	bl	800e7ca <HAL_CAN_AddTxMessage>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d007      	beq.n	8009606 <CO_CANsend+0x8a>
          err = HAL_CAN_GetError(CANmodule->CANptr);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f005 fda1 	bl	800f142 <HAL_CAN_GetError>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]
    if(CANmodule->CANtxCount == 0 && (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0)){
 8009604:	e012      	b.n	800962c <CO_CANsend+0xb0>
        }else{
        	/* First CAN message (bootup) was sent successfully */
        	CANmodule->firstCANtxMessage = false;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	755a      	strb	r2, [r3, #21]
    if(CANmodule->CANtxCount == 0 && (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0)){
 800960c:	e00e      	b.n	800962c <CO_CANsend+0xb0>
        }

    }
    /* if no buffer is free, message will be sent by interrupt */
    else{
    	if (!buffer->bufferFull){
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	7b5b      	ldrb	r3, [r3, #13]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	d109      	bne.n	800962c <CO_CANsend+0xb0>
    		buffer->bufferFull = true;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2201      	movs	r2, #1
 800961c:	735a      	strb	r2, [r3, #13]
    		CANmodule->CANtxCount++;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	8adb      	ldrh	r3, [r3, #22]
 8009622:	b29b      	uxth	r3, r3
 8009624:	3301      	adds	r3, #1
 8009626:	b29a      	uxth	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	82da      	strh	r2, [r3, #22]
    	}
    }
    CO_UNLOCK_CAN_SEND();

    return err;
 800962c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20000bb4 	.word	0x20000bb4

0800963c <CO_CANclearPendingSyncPDOs>:


/******************************************************************************/
void CO_CANclearPendingSyncPDOs(CO_CANmodule_t *CANmodule){
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8009644:	2300      	movs	r3, #0
 8009646:	617b      	str	r3, [r7, #20]

    CO_LOCK_CAN_SEND();
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if(/*messageIsOnCanBuffer && */CANmodule->bufferInhibitFlag){
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	7d1b      	ldrb	r3, [r3, #20]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d004      	beq.n	800965c <CO_CANclearPendingSyncPDOs+0x20>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	751a      	strb	r2, [r3, #20]
        tpdoDeleted = 1U;
 8009658:	2301      	movs	r3, #1
 800965a:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if(CANmodule->CANtxCount != 0U){
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	8adb      	ldrh	r3, [r3, #22]
 8009660:	b29b      	uxth	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d025      	beq.n	80096b2 <CO_CANclearPendingSyncPDOs+0x76>
        uint16_t i;
        CO_CANtx_t *buffer = &CANmodule->txArray[0];
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	60fb      	str	r3, [r7, #12]
        for(i = CANmodule->txSize; i > 0U; i--){
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	8a1b      	ldrh	r3, [r3, #16]
 8009670:	827b      	strh	r3, [r7, #18]
 8009672:	e01b      	b.n	80096ac <CO_CANclearPendingSyncPDOs+0x70>
            if(buffer->bufferFull){
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	7b5b      	ldrb	r3, [r3, #13]
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	d010      	beq.n	80096a0 <CO_CANclearPendingSyncPDOs+0x64>
                if(buffer->syncFlag){
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	7b9b      	ldrb	r3, [r3, #14]
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <CO_CANclearPendingSyncPDOs+0x64>
                    buffer->bufferFull = false;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	735a      	strb	r2, [r3, #13]
                    CANmodule->CANtxCount--;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	8adb      	ldrh	r3, [r3, #22]
 8009692:	b29b      	uxth	r3, r3
 8009694:	3b01      	subs	r3, #1
 8009696:	b29a      	uxth	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	82da      	strh	r2, [r3, #22]
                    tpdoDeleted = 2U;
 800969c:	2302      	movs	r3, #2
 800969e:	617b      	str	r3, [r7, #20]
                }
            }
            buffer++;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	3310      	adds	r3, #16
 80096a4:	60fb      	str	r3, [r7, #12]
        for(i = CANmodule->txSize; i > 0U; i--){
 80096a6:	8a7b      	ldrh	r3, [r7, #18]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	827b      	strh	r3, [r7, #18]
 80096ac:	8a7b      	ldrh	r3, [r7, #18]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e0      	bne.n	8009674 <CO_CANclearPendingSyncPDOs+0x38>
        }
    }
    CO_UNLOCK_CAN_SEND();


    if(tpdoDeleted != 0U){
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d007      	beq.n	80096c8 <CO_CANclearPendingSyncPDOs+0x8c>
        CO_errorReport((CO_EM_t*)CANmodule->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	69d8      	ldr	r0, [r3, #28]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80096c2:	2115      	movs	r1, #21
 80096c4:	f7f9 f909 	bl	80028da <CO_errorReport>
    }
}
 80096c8:	bf00      	nop
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <CO_CANpolling_Tx>:


void CO_CANpolling_Tx(CO_CANmodule_t *CANmodule)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
	/*No pending tx msg*/
	if (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) == 0)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4618      	mov	r0, r3
 80096de:	f005 f94f 	bl	800e980 <HAL_CAN_GetTxMailboxesFreeLevel>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d05c      	beq.n	80097a2 <CO_CANpolling_Tx+0xd2>
		return;

	/* Clear flag from previous message */
	CANmodule->bufferInhibitFlag = false;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	751a      	strb	r2, [r3, #20]

	/* Are there any new messages waiting to be send */
	if(CANmodule->CANtxCount > 0U) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	8adb      	ldrh	r3, [r3, #22]
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d055      	beq.n	80097a4 <CO_CANpolling_Tx+0xd4>
		uint16_t i;             /* index of transmitting message */

		/* first buffer */
		CO_CANtx_t *buffer = &CANmodule->txArray[0];
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	613b      	str	r3, [r7, #16]

		/* search through whole array of pointers to transmit message buffers. */
		for(i = CANmodule->txSize; i > 0U; i--) {
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	8a1b      	ldrh	r3, [r3, #16]
 8009702:	82fb      	strh	r3, [r7, #22]
 8009704:	e041      	b.n	800978a <CO_CANpolling_Tx+0xba>
			/* if message buffer is full, send it. */
			if(buffer->bufferFull) {
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	7b5b      	ldrb	r3, [r3, #13]
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	d036      	beq.n	800977e <CO_CANpolling_Tx+0xae>

				/* Copy message to CAN buffer */
				CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	7b9b      	ldrb	r3, [r3, #14]
 8009714:	b2da      	uxtb	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	751a      	strb	r2, [r3, #20]

				uint32_t mailBox;

		        TxHeader.StdId   = (buffer->ident >> 2) & 0x7FF;
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	089b      	lsrs	r3, r3, #2
 8009720:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009724:	4a21      	ldr	r2, [pc, #132]	; (80097ac <CO_CANpolling_Tx+0xdc>)
 8009726:	6013      	str	r3, [r2, #0]
		        TxHeader.DLC     = buffer->DLC;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	791b      	ldrb	r3, [r3, #4]
 800972c:	461a      	mov	r2, r3
 800972e:	4b1f      	ldr	r3, [pc, #124]	; (80097ac <CO_CANpolling_Tx+0xdc>)
 8009730:	611a      	str	r2, [r3, #16]
		        TxHeader.ExtId   = 0;
 8009732:	4b1e      	ldr	r3, [pc, #120]	; (80097ac <CO_CANpolling_Tx+0xdc>)
 8009734:	2200      	movs	r2, #0
 8009736:	605a      	str	r2, [r3, #4]
		        TxHeader.IDE     = CAN_ID_STD;
 8009738:	4b1c      	ldr	r3, [pc, #112]	; (80097ac <CO_CANpolling_Tx+0xdc>)
 800973a:	2200      	movs	r2, #0
 800973c:	609a      	str	r2, [r3, #8]
		        TxHeader.RTR     = buffer->ident & 0x02;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0302 	and.w	r3, r3, #2
 8009746:	4a19      	ldr	r2, [pc, #100]	; (80097ac <CO_CANpolling_Tx+0xdc>)
 8009748:	60d3      	str	r3, [r2, #12]

		        if (HAL_CAN_AddTxMessage(CANmodule->CANptr, &TxHeader, &buffer->data[0], &mailBox) == HAL_OK){
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6818      	ldr	r0, [r3, #0]
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	1d5a      	adds	r2, r3, #5
 8009752:	f107 030c 	add.w	r3, r7, #12
 8009756:	4915      	ldr	r1, [pc, #84]	; (80097ac <CO_CANpolling_Tx+0xdc>)
 8009758:	f005 f837 	bl	800e7ca <HAL_CAN_AddTxMessage>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d117      	bne.n	8009792 <CO_CANpolling_Tx+0xc2>
		        	/* First CAN message (bootup) was sent successfully */
		        	CANmodule->firstCANtxMessage = false;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	755a      	strb	r2, [r3, #21]

		        	buffer->bufferFull = false;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	2200      	movs	r2, #0
 800976c:	735a      	strb	r2, [r3, #13]
                	CANmodule->CANtxCount--;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	8adb      	ldrh	r3, [r3, #22]
 8009772:	b29b      	uxth	r3, r3
 8009774:	3b01      	subs	r3, #1
 8009776:	b29a      	uxth	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	82da      	strh	r2, [r3, #22]
                }

				break;                      /* exit for loop */
 800977c:	e009      	b.n	8009792 <CO_CANpolling_Tx+0xc2>
			} else {
				/*do nothing*/;
			}
			buffer++;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	3310      	adds	r3, #16
 8009782:	613b      	str	r3, [r7, #16]
		for(i = CANmodule->txSize; i > 0U; i--) {
 8009784:	8afb      	ldrh	r3, [r7, #22]
 8009786:	3b01      	subs	r3, #1
 8009788:	82fb      	strh	r3, [r7, #22]
 800978a:	8afb      	ldrh	r3, [r7, #22]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1ba      	bne.n	8009706 <CO_CANpolling_Tx+0x36>
 8009790:	e000      	b.n	8009794 <CO_CANpolling_Tx+0xc4>
				break;                      /* exit for loop */
 8009792:	bf00      	nop
		}/* end of for loop */

		/* Clear counter if no more messages */
		if(i == 0U) {
 8009794:	8afb      	ldrh	r3, [r7, #22]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d104      	bne.n	80097a4 <CO_CANpolling_Tx+0xd4>
			CANmodule->CANtxCount = 0U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	82da      	strh	r2, [r3, #22]
 80097a0:	e000      	b.n	80097a4 <CO_CANpolling_Tx+0xd4>
		return;
 80097a2:	bf00      	nop
		}else {
			/*do nothing*/;
		}
	}
}
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20000bb4 	.word	0x20000bb4

080097b0 <CO_CANverifyErrors>:
/******************************************************************************/
void CO_CANverifyErrors(CO_CANmodule_t *CANmodule)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
    CO_EM_t* em = (CO_EM_t*)CANmodule->em;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	617b      	str	r3, [r7, #20]

    /* get error counters from module. Id possible, function may use different way to
     * determine errors. */
    uint32_t err = ((CAN_HandleTypeDef*)(CANmodule->CANptr))->ErrorCode;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	613b      	str	r3, [r7, #16]

    if(CANmodule->errOld != err){
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d070      	beq.n	80098b2 <CO_CANverifyErrors+0x102>
        CANmodule->errOld = err;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	619a      	str	r2, [r3, #24]

        if(err & HAL_CAN_ERROR_BOF){
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d007      	beq.n	80097f0 <CO_CANverifyErrors+0x40>
        	/* bus off, 离线状态 */
            CO_errorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, err);
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f248 1240 	movw	r2, #33088	; 0x8140
 80097e6:	2112      	movs	r1, #18
 80097e8:	6978      	ldr	r0, [r7, #20]
 80097ea:	f7f9 f876 	bl	80028da <CO_errorReport>
 80097ee:	e049      	b.n	8009884 <CO_CANverifyErrors+0xd4>
        }
        else{
        	/* not bus off, 在线恢复 */
            CO_errorReset(em, CO_EM_CAN_TX_BUS_OFF, err);
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	2112      	movs	r1, #18
 80097f4:	6978      	ldr	r0, [r7, #20]
 80097f6:	f7f9 f8f6 	bl	80029e6 <CO_errorReset>

            if(err & HAL_CAN_ERROR_EWG){
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	d006      	beq.n	8009812 <CO_CANverifyErrors+0x62>
            	/* bus warning */
                CO_errorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, err);
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	2200      	movs	r2, #0
 8009808:	2101      	movs	r1, #1
 800980a:	6978      	ldr	r0, [r7, #20]
 800980c:	f7f9 f865 	bl	80028da <CO_errorReport>
 8009810:	e030      	b.n	8009874 <CO_CANverifyErrors+0xc4>

            }else if(err & HAL_CAN_ERROR_EPV){
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d013      	beq.n	8009844 <CO_CANverifyErrors+0x94>
            	/* RX/TX bus passive, 被动错误 */
                CO_errorReport(em, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, err);
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f248 1220 	movw	r2, #33056	; 0x8120
 8009822:	2106      	movs	r1, #6
 8009824:	6978      	ldr	r0, [r7, #20]
 8009826:	f7f9 f858 	bl	80028da <CO_errorReport>

                if(!CANmodule->firstCANtxMessage){
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	7d5b      	ldrb	r3, [r3, #21]
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d11f      	bne.n	8009874 <CO_CANverifyErrors+0xc4>
                	CO_errorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, err);
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	f248 1220 	movw	r2, #33056	; 0x8120
 800983a:	2107      	movs	r1, #7
 800983c:	6978      	ldr	r0, [r7, #20]
 800983e:	f7f9 f84c 	bl	80028da <CO_errorReport>
 8009842:	e017      	b.n	8009874 <CO_CANverifyErrors+0xc4>
                }
            }
            else{
                CO_errorReset(em, CO_EM_CAN_RX_BUS_PASSIVE, err);
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	2106      	movs	r1, #6
 8009848:	6978      	ldr	r0, [r7, #20]
 800984a:	f7f9 f8cc 	bl	80029e6 <CO_errorReset>

                bool_t isError = CO_isError(em, CO_EM_CAN_TX_BUS_PASSIVE);
 800984e:	2107      	movs	r1, #7
 8009850:	6978      	ldr	r0, [r7, #20]
 8009852:	f7f9 f950 	bl	8002af6 <CO_isError>
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]
                if(isError){
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d009      	beq.n	8009874 <CO_CANverifyErrors+0xc4>
                    CO_errorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, err);
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	2107      	movs	r1, #7
 8009864:	6978      	ldr	r0, [r7, #20]
 8009866:	f7f9 f8be 	bl	80029e6 <CO_errorReset>
                    CO_errorReset(em, CO_EM_CAN_TX_OVERFLOW, err);
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	2114      	movs	r1, #20
 800986e:	6978      	ldr	r0, [r7, #20]
 8009870:	f7f9 f8b9 	bl	80029e6 <CO_errorReset>
                }
            }

            if(err == HAL_CAN_ERROR_NONE){       /* no error */
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d104      	bne.n	8009884 <CO_CANverifyErrors+0xd4>
                CO_errorReset(em, CO_EM_CAN_BUS_WARNING, err);
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	2101      	movs	r1, #1
 800987e:	6978      	ldr	r0, [r7, #20]
 8009880:	f7f9 f8b1 	bl	80029e6 <CO_errorReset>
            }
        }

        if((err & HAL_CAN_ERROR_RX_FOV0) || (err & HAL_CAN_ERROR_RX_FOV1)){
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800988a:	2b00      	cmp	r3, #0
 800988c:	d104      	bne.n	8009898 <CO_CANverifyErrors+0xe8>
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009894:	2b00      	cmp	r3, #0
 8009896:	d007      	beq.n	80098a8 <CO_CANverifyErrors+0xf8>
        	/* CAN RX bus overflow */
            CO_errorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, err);
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f248 1210 	movw	r2, #33040	; 0x8110
 800989e:	2113      	movs	r1, #19
 80098a0:	6978      	ldr	r0, [r7, #20]
 80098a2:	f7f9 f81a 	bl	80028da <CO_errorReport>
        }else{
        	CO_errorReset(em, CO_EM_CAN_RXB_OVERFLOW, err);
        }
    }
}
 80098a6:	e004      	b.n	80098b2 <CO_CANverifyErrors+0x102>
        	CO_errorReset(em, CO_EM_CAN_RXB_OVERFLOW, err);
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	2113      	movs	r1, #19
 80098ac:	6978      	ldr	r0, [r7, #20]
 80098ae:	f7f9 f89a 	bl	80029e6 <CO_errorReset>
}
 80098b2:	bf00      	nop
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <CO_CANinterrupt>:


/******************************************************************************/
void CO_CANinterrupt(CO_CANmodule_t *CANmodule, uint32_t RxFifo)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b090      	sub	sp, #64	; 0x40
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	6039      	str	r1, [r7, #0]
    /* receive interrupt */
    if(1){
        CO_CANrxMsg_t rcvMsg;      /* pointer to received message in CAN module */
        uint16_t index;             /* index of received message */

        CO_CANrx_t *buffer = NULL;  /* receive message buffer from CO_CANmodule_t object. */
 80098c4:	2300      	movs	r3, #0
 80098c6:	63bb      	str	r3, [r7, #56]	; 0x38
        bool_t msgMatched = false;
 80098c8:	2300      	movs	r3, #0
 80098ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        HAL_CAN_GetRxMessage(CANmodule->CANptr, RxFifo, &rcvMsg.header, &rcvMsg.data[0]);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6818      	ldr	r0, [r3, #0]
 80098d2:	f107 0308 	add.w	r3, r7, #8
 80098d6:	3321      	adds	r3, #33	; 0x21
 80098d8:	f107 0208 	add.w	r2, r7, #8
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	f005 f884 	bl	800e9ea <HAL_CAN_GetRxMessage>

        rcvMsg.DLC   = rcvMsg.header.DLC;
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        rcvMsg.ident = rcvMsg.header.StdId;
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24

        /*Expand with CANopen rx/tx buffer setting*/
        rcvMsg.ident <<= 2;
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
        rcvMsg.ident |= rcvMsg.header.RTR;
 80098f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
				cobId, nodeId,
				rcvMsg.header.DLC,
				rcvMsg.data[0]);
		*/

        if(CANmodule->useCANrxFilters){
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	7cdb      	ldrb	r3, [r3, #19]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d01c      	beq.n	8009940 <CO_CANinterrupt+0x86>
            /* CAN module filters are used. Message with known 11-bit identifier has */
            /* been received */
            index = 0;  /* get index of the received message here. Or something similar */
 8009906:	2300      	movs	r3, #0
 8009908:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(index < CANmodule->rxSize){
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	891b      	ldrh	r3, [r3, #8]
 800990e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009910:	429a      	cmp	r2, r3
 8009912:	d232      	bcs.n	800997a <CO_CANinterrupt+0xc0>
                buffer = &CANmodule->rxArray[index];
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6859      	ldr	r1, [r3, #4]
 8009918:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800991a:	4613      	mov	r3, r2
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	4413      	add	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	440b      	add	r3, r1
 8009924:	63bb      	str	r3, [r7, #56]	; 0x38
                /* verify also RTR */
                if(((rcvMsg.ident ^ buffer->ident) & buffer->mask) == 0U){
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800992a:	8812      	ldrh	r2, [r2, #0]
 800992c:	4053      	eors	r3, r2
 800992e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009930:	8852      	ldrh	r2, [r2, #2]
 8009932:	4013      	ands	r3, r2
 8009934:	2b00      	cmp	r3, #0
 8009936:	d120      	bne.n	800997a <CO_CANinterrupt+0xc0>
                    msgMatched = true;
 8009938:	2301      	movs	r3, #1
 800993a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800993e:	e01c      	b.n	800997a <CO_CANinterrupt+0xc0>
            }
        }
        else{
            /* CAN module filters are not used, message with any standard 11-bit identifier */
            /* has been received. Search rxArray form CANmodule for the same CAN-ID. */
            buffer = &CANmodule->rxArray[0];
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	63bb      	str	r3, [r7, #56]	; 0x38
            for(index = CANmodule->rxSize; index > 0U; index--){
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	891b      	ldrh	r3, [r3, #8]
 800994a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800994c:	e012      	b.n	8009974 <CO_CANinterrupt+0xba>
                if(((rcvMsg.ident ^ buffer->ident) & buffer->mask) == 0U){
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009952:	8812      	ldrh	r2, [r2, #0]
 8009954:	4053      	eors	r3, r2
 8009956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009958:	8852      	ldrh	r2, [r2, #2]
 800995a:	4013      	ands	r3, r2
 800995c:	2b00      	cmp	r3, #0
 800995e:	d103      	bne.n	8009968 <CO_CANinterrupt+0xae>
                    msgMatched = true;
 8009960:	2301      	movs	r3, #1
 8009962:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    break;
 8009966:	e008      	b.n	800997a <CO_CANinterrupt+0xc0>
                }
                buffer++;
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	330c      	adds	r3, #12
 800996c:	63bb      	str	r3, [r7, #56]	; 0x38
            for(index = CANmodule->rxSize; index > 0U; index--){
 800996e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009970:	3b01      	subs	r3, #1
 8009972:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009974:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e9      	bne.n	800994e <CO_CANinterrupt+0x94>
            }
        }

        /* Call specific function, which will process the message */
        if(msgMatched && (buffer != NULL) && (buffer->CANrx_callback != NULL)){
 800997a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00e      	beq.n	80099a0 <CO_CANinterrupt+0xe6>
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00b      	beq.n	80099a0 <CO_CANinterrupt+0xe6>
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d007      	beq.n	80099a0 <CO_CANinterrupt+0xe6>
            buffer->CANrx_callback(buffer->object, (void*) &rcvMsg);
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009996:	6852      	ldr	r2, [r2, #4]
 8009998:	f107 0108 	add.w	r1, r7, #8
 800999c:	4610      	mov	r0, r2
 800999e:	4798      	blx	r3
        }
    }
    else{
        /* some other interrupt reason */
    }
}
 80099a0:	bf00      	nop
 80099a2:	3740      	adds	r7, #64	; 0x40
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) > 0){
 80099b0:	e006      	b.n	80099c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		CO_CANinterrupt(CO->CANmodule[0], CAN_RX_FIFO0);
 80099b2:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff ff7d 	bl	80098ba <CO_CANinterrupt>
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) > 0){
 80099c0:	2100      	movs	r1, #0
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f005 f923 	bl	800ec0e <HAL_CAN_GetRxFifoFillLevel>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1f1      	bne.n	80099b2 <HAL_CAN_RxFifo0MsgPendingCallback+0xa>
	}
}
 80099ce:	bf00      	nop
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	20000b7c 	.word	0x20000b7c

080099dc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0){
 80099e4:	e006      	b.n	80099f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18>
		CO_CANinterrupt(CO->CANmodule[0], CAN_RX_FIFO1);
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2101      	movs	r1, #1
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7ff ff63 	bl	80098ba <CO_CANinterrupt>
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0){
 80099f4:	2101      	movs	r1, #1
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f005 f909 	bl	800ec0e <HAL_CAN_GetRxFifoFillLevel>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1f1      	bne.n	80099e6 <HAL_CAN_RxFifo1MsgPendingCallback+0xa>
	}
}
 8009a02:	bf00      	nop
 8009a04:	bf00      	nop
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000b7c 	.word	0x20000b7c

08009a10 <LOG_Init>:
uint8_t g_LogLevel;
uint8_t g_LogOn;
uint8_t g_LogOutput;

void LOG_Init(uint8_t level, uint8_t on, uint8_t output)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	71fb      	strb	r3, [r7, #7]
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	71bb      	strb	r3, [r7, #6]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	717b      	strb	r3, [r7, #5]
	g_LogLevel = level;
 8009a22:	4a07      	ldr	r2, [pc, #28]	; (8009a40 <LOG_Init+0x30>)
 8009a24:	79fb      	ldrb	r3, [r7, #7]
 8009a26:	7013      	strb	r3, [r2, #0]
	g_LogOn = on;
 8009a28:	4a06      	ldr	r2, [pc, #24]	; (8009a44 <LOG_Init+0x34>)
 8009a2a:	79bb      	ldrb	r3, [r7, #6]
 8009a2c:	7013      	strb	r3, [r2, #0]
	g_LogOutput = output;
 8009a2e:	4a06      	ldr	r2, [pc, #24]	; (8009a48 <LOG_Init+0x38>)
 8009a30:	797b      	ldrb	r3, [r7, #5]
 8009a32:	7013      	strb	r3, [r2, #0]
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	20000bcc 	.word	0x20000bcc
 8009a44:	20000bcd 	.word	0x20000bcd
 8009a48:	20000bce 	.word	0x20000bce

08009a4c <LOG_Print>:
	if (level > LOG_DbgLevel) return;
	g_LogLevel = level;
}

void LOG_Print(uint8_t level, const char* fmt, ...)
{
 8009a4c:	b40e      	push	{r1, r2, r3}
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b095      	sub	sp, #84	; 0x54
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	4603      	mov	r3, r0
 8009a56:	71fb      	strb	r3, [r7, #7]
	if (!g_LogOn) return;
 8009a58:	4b1e      	ldr	r3, [pc, #120]	; (8009ad4 <LOG_Print+0x88>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d030      	beq.n	8009ac2 <LOG_Print+0x76>
	if (level > g_LogLevel) return;
 8009a60:	4b1d      	ldr	r3, [pc, #116]	; (8009ad8 <LOG_Print+0x8c>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	79fa      	ldrb	r2, [r7, #7]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d82d      	bhi.n	8009ac6 <LOG_Print+0x7a>

	va_list v1;
	va_start(v1, fmt);
 8009a6a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009a6e:	64fb      	str	r3, [r7, #76]	; 0x4c

	char buffer[64];
	memset(buffer, 0, 64);
 8009a70:	f107 030c 	add.w	r3, r7, #12
 8009a74:	2240      	movs	r2, #64	; 0x40
 8009a76:	2100      	movs	r1, #0
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f00d f8af 	bl	8016bdc <memset>

	vsnprintf(buffer, 64, fmt, v1);
 8009a7e:	f107 000c 	add.w	r0, r7, #12
 8009a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a86:	2140      	movs	r1, #64	; 0x40
 8009a88:	f00d faf6 	bl	8017078 <vsniprintf>

	if (g_LogOutput == LOG_MonOut){
 8009a8c:	4b13      	ldr	r3, [pc, #76]	; (8009adc <LOG_Print+0x90>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d105      	bne.n	8009aa0 <LOG_Print+0x54>
		// print to rdi monito
		printf(buffer);
 8009a94:	f107 030c 	add.w	r3, r7, #12
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f00d f99d 	bl	8016dd8 <iprintf>
 8009a9e:	e013      	b.n	8009ac8 <LOG_Print+0x7c>
	}else if (g_LogOutput == LOG_USARTOut) {
 8009aa0:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <LOG_Print+0x90>)
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d10f      	bne.n	8009ac8 <LOG_Print+0x7c>
		// print to usart
		JNT_dbgOutput(buffer, strlen(buffer));
 8009aa8:	f107 030c 	add.w	r3, r7, #12
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7f6 fb8f 	bl	80001d0 <strlen>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	f107 030c 	add.w	r3, r7, #12
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fb1c 	bl	800a0f8 <JNT_dbgOutput>
 8009ac0:	e002      	b.n	8009ac8 <LOG_Print+0x7c>
	if (!g_LogOn) return;
 8009ac2:	bf00      	nop
 8009ac4:	e000      	b.n	8009ac8 <LOG_Print+0x7c>
	if (level > g_LogLevel) return;
 8009ac6:	bf00      	nop
	}
	va_end(v1);
}
 8009ac8:	3754      	adds	r7, #84	; 0x54
 8009aca:	46bd      	mov	sp, r7
 8009acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ad0:	b003      	add	sp, #12
 8009ad2:	4770      	bx	lr
 8009ad4:	20000bcd 	.word	0x20000bcd
 8009ad8:	20000bcc 	.word	0x20000bcc
 8009adc:	20000bce 	.word	0x20000bce

08009ae0 <AS5048A_Init>:

#define SPI_AS5048A_CS_LOW()   HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET)
#define SPI_AS5048A_CS_HIGH()  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET)

void AS5048A_Init()
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	af00      	add	r7, sp, #0

}
 8009ae4:	bf00      	nop
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
	...

08009af0 <AS5048A_SPI_WriteData>:

static uint16_t AS5048A_SPI_WriteData(uint16_t data, uint16_t *rx)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	4603      	mov	r3, r0
 8009af8:	6039      	str	r1, [r7, #0]
 8009afa:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	SPI_AS5048A_CS_LOW();
 8009afc:	2200      	movs	r2, #0
 8009afe:	2101      	movs	r1, #1
 8009b00:	480c      	ldr	r0, [pc, #48]	; (8009b34 <AS5048A_SPI_WriteData+0x44>)
 8009b02:	f006 fa81 	bl	8010008 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&data, (uint8_t*)rx, 1, HAL_MAX_DELAY);
 8009b06:	1db9      	adds	r1, r7, #6
 8009b08:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	2301      	movs	r3, #1
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	4809      	ldr	r0, [pc, #36]	; (8009b38 <AS5048A_SPI_WriteData+0x48>)
 8009b14:	f006 ffb4 	bl	8010a80 <HAL_SPI_TransmitReceive>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]
	SPI_AS5048A_CS_HIGH();
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	2101      	movs	r1, #1
 8009b20:	4804      	ldr	r0, [pc, #16]	; (8009b34 <AS5048A_SPI_WriteData+0x44>)
 8009b22:	f006 fa71 	bl	8010008 <HAL_GPIO_WritePin>

	return status;
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	b29b      	uxth	r3, r3
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	40020800 	.word	0x40020800
 8009b38:	20000760 	.word	0x20000760

08009b3c <parity_even>:

static uint8_t parity_even(uint16_t v)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	4603      	mov	r3, r0
 8009b44:	80fb      	strh	r3, [r7, #6]
	if (v == 0) return 0;
 8009b46:	88fb      	ldrh	r3, [r7, #6]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <parity_even+0x14>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e01c      	b.n	8009b8a <parity_even+0x4e>

    v ^= v >> 8;
 8009b50:	88fb      	ldrh	r3, [r7, #6]
 8009b52:	0a1b      	lsrs	r3, r3, #8
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	88fb      	ldrh	r3, [r7, #6]
 8009b58:	4053      	eors	r3, r2
 8009b5a:	80fb      	strh	r3, [r7, #6]
    v ^= v >> 4;
 8009b5c:	88fb      	ldrh	r3, [r7, #6]
 8009b5e:	091b      	lsrs	r3, r3, #4
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	88fb      	ldrh	r3, [r7, #6]
 8009b64:	4053      	eors	r3, r2
 8009b66:	80fb      	strh	r3, [r7, #6]
    v ^= v >> 2;
 8009b68:	88fb      	ldrh	r3, [r7, #6]
 8009b6a:	089b      	lsrs	r3, r3, #2
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	88fb      	ldrh	r3, [r7, #6]
 8009b70:	4053      	eors	r3, r2
 8009b72:	80fb      	strh	r3, [r7, #6]
    v ^= v >> 1;
 8009b74:	88fb      	ldrh	r3, [r7, #6]
 8009b76:	085b      	lsrs	r3, r3, #1
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	88fb      	ldrh	r3, [r7, #6]
 8009b7c:	4053      	eors	r3, r2
 8009b7e:	80fb      	strh	r3, [r7, #6]

    return v & 1;
 8009b80:	88fb      	ldrh	r3, [r7, #6]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	b2db      	uxtb	r3, r3
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <AS5048A_ClearAndNop>:

static void AS5048A_ClearAndNop()
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b082      	sub	sp, #8
 8009b9a:	af00      	add	r7, sp, #0
	uint16_t res = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	80bb      	strh	r3, [r7, #4]
	uint16_t command = CMD_CLEAR;
 8009ba0:	f244 0301 	movw	r3, #16385	; 0x4001
 8009ba4:	80fb      	strh	r3, [r7, #6]

	command |= ((uint16_t)parity_even(command) << 15);
 8009ba6:	88fb      	ldrh	r3, [r7, #6]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff ffc7 	bl	8009b3c <parity_even>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	03db      	lsls	r3, r3, #15
 8009bb2:	b21a      	sxth	r2, r3
 8009bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	b21b      	sxth	r3, r3
 8009bbc:	80fb      	strh	r3, [r7, #6]
	AS5048A_SPI_WriteData(command, &res);
 8009bbe:	1d3a      	adds	r2, r7, #4
 8009bc0:	88fb      	ldrh	r3, [r7, #6]
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7ff ff93 	bl	8009af0 <AS5048A_SPI_WriteData>

	res = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	80bb      	strh	r3, [r7, #4]
	AS5048A_SPI_WriteData(command, &res);
 8009bce:	1d3a      	adds	r2, r7, #4
 8009bd0:	88fb      	ldrh	r3, [r7, #6]
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7ff ff8b 	bl	8009af0 <AS5048A_SPI_WriteData>
}
 8009bda:	bf00      	nop
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <AS5048A_ReadReg>:

uint16_t AS5048A_ReadReg(uint16_t cmd, uint16_t *val)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	4603      	mov	r3, r0
 8009bea:	6039      	str	r1, [r7, #0]
 8009bec:	80fb      	strh	r3, [r7, #6]
	uint16_t status;

	uint16_t rx;
	uint16_t command = 0x4000;
 8009bee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009bf2:	81bb      	strh	r3, [r7, #12]

	command = command | cmd;
 8009bf4:	89ba      	ldrh	r2, [r7, #12]
 8009bf6:	88fb      	ldrh	r3, [r7, #6]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	81bb      	strh	r3, [r7, #12]
	command |= ((uint16_t)parity_even(command) << 15);
 8009bfc:	89bb      	ldrh	r3, [r7, #12]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7ff ff9c 	bl	8009b3c <parity_even>
 8009c04:	4603      	mov	r3, r0
 8009c06:	03db      	lsls	r3, r3, #15
 8009c08:	b21a      	sxth	r2, r3
 8009c0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	b21b      	sxth	r3, r3
 8009c12:	81bb      	strh	r3, [r7, #12]

	status = AS5048A_SPI_WriteData(command, &rx);
 8009c14:	f107 020a 	add.w	r2, r7, #10
 8009c18:	89bb      	ldrh	r3, [r7, #12]
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff ff67 	bl	8009af0 <AS5048A_SPI_WriteData>
 8009c22:	4603      	mov	r3, r0
 8009c24:	81fb      	strh	r3, [r7, #14]

	if (status != HAL_OK)
 8009c26:	89fb      	ldrh	r3, [r7, #14]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <AS5048A_ReadReg+0x50>
		return REG_ERROR;
 8009c2c:	f641 7301 	movw	r3, #7937	; 0x1f01
 8009c30:	e01b      	b.n	8009c6a <AS5048A_ReadReg+0x88>

	command = CMD_NOP;
 8009c32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009c36:	81bb      	strh	r3, [r7, #12]
	status = AS5048A_SPI_WriteData(command, val);
 8009c38:	89bb      	ldrh	r3, [r7, #12]
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7ff ff57 	bl	8009af0 <AS5048A_SPI_WriteData>
 8009c42:	4603      	mov	r3, r0
 8009c44:	81fb      	strh	r3, [r7, #14]
	if (status != HAL_OK)
 8009c46:	89fb      	ldrh	r3, [r7, #14]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <AS5048A_ReadReg+0x70>
		return REG_ERROR;
 8009c4c:	f641 7301 	movw	r3, #7937	; 0x1f01
 8009c50:	e00b      	b.n	8009c6a <AS5048A_ReadReg+0x88>

	if ((*val & 0x4000) != 0){
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d004      	beq.n	8009c68 <AS5048A_ReadReg+0x86>
		AS5048A_ClearAndNop();
 8009c5e:	f7ff ff9a 	bl	8009b96 <AS5048A_ClearAndNop>
		status = READ_ERROR;
 8009c62:	f641 7302 	movw	r3, #7938	; 0x1f02
 8009c66:	81fb      	strh	r3, [r7, #14]
	}

	return status;
 8009c68:	89fb      	ldrh	r3, [r7, #14]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <AS5048A_ReadValue>:

	return HAL_OK;
}

uint16_t AS5048A_ReadValue(uint16_t cmd, uint16_t *value)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	4603      	mov	r3, r0
 8009c7a:	6039      	str	r1, [r7, #0]
 8009c7c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t rx;

	status = AS5048A_ReadReg(cmd, &rx);
 8009c7e:	f107 0208 	add.w	r2, r7, #8
 8009c82:	88fb      	ldrh	r3, [r7, #6]
 8009c84:	4611      	mov	r1, r2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7ff ffab 	bl	8009be2 <AS5048A_ReadReg>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	73fb      	strb	r3, [r7, #15]

	uint16_t data = rx & 0x3fff;
 8009c90:	893b      	ldrh	r3, [r7, #8]
 8009c92:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009c96:	81bb      	strh	r3, [r7, #12]
	uint16_t error = parity_even(data) ^ (rx >> 15);
 8009c98:	89bb      	ldrh	r3, [r7, #12]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff ff4e 	bl	8009b3c <parity_even>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	893b      	ldrh	r3, [r7, #8]
 8009ca6:	0bdb      	lsrs	r3, r3, #15
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	4053      	eors	r3, r2
 8009cac:	817b      	strh	r3, [r7, #10]

	if (error){
 8009cae:	897b      	ldrh	r3, [r7, #10]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d005      	beq.n	8009cc0 <AS5048A_ReadValue+0x4e>
		*value = 0;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	801a      	strh	r2, [r3, #0]
		return EVEN_ERROR;
 8009cba:	f641 6301 	movw	r3, #7681	; 0x1e01
 8009cbe:	e004      	b.n	8009cca <AS5048A_ReadValue+0x58>
	}else{
		*value = data;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	89ba      	ldrh	r2, [r7, #12]
 8009cc4:	801a      	strh	r2, [r3, #0]
	}

	return status;
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	b29b      	uxth	r3, r3
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <AS5048A_ReadAngle>:

uint16_t AS5048A_ReadAngle(uint16_t *angle)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  uint16_t status;
  status = AS5048A_ReadValue(CMD_ANGLE, angle);
 8009cda:	6879      	ldr	r1, [r7, #4]
 8009cdc:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8009ce0:	f7ff ffc7 	bl	8009c72 <AS5048A_ReadValue>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	81fb      	strh	r3, [r7, #14]

  return status;
 8009ce8:	89fb      	ldrh	r3, [r7, #14]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <RND_Init>:
}Round_Inc_t;

Round_Inc_t      g_RoundRecord;

void RND_Init(uint16_t angle)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	80fb      	strh	r3, [r7, #6]
	// Set the home angle
	g_RoundRecord.homeAngle = angle;
 8009cfe:	4a21      	ldr	r2, [pc, #132]	; (8009d84 <RND_Init+0x90>)
 8009d00:	88fb      	ldrh	r3, [r7, #6]
 8009d02:	8153      	strh	r3, [r2, #10]

	g_RoundRecord.quat[0] = angle;
 8009d04:	4a1f      	ldr	r2, [pc, #124]	; (8009d84 <RND_Init+0x90>)
 8009d06:	88fb      	ldrh	r3, [r7, #6]
 8009d08:	8013      	strh	r3, [r2, #0]
	g_RoundRecord.quat[1] = (g_RoundRecord.quat[0] + RES_QUADRANT) % (ANGLE_RESOLUTION);
 8009d0a:	4b1e      	ldr	r3, [pc, #120]	; (8009d84 <RND_Init+0x90>)
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d12:	425a      	negs	r2, r3
 8009d14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009d18:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009d1c:	bf58      	it	pl
 8009d1e:	4253      	negpl	r3, r2
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	4b18      	ldr	r3, [pc, #96]	; (8009d84 <RND_Init+0x90>)
 8009d24:	805a      	strh	r2, [r3, #2]
	g_RoundRecord.quat[2] = (g_RoundRecord.quat[1] + RES_QUADRANT) % (ANGLE_RESOLUTION);
 8009d26:	4b17      	ldr	r3, [pc, #92]	; (8009d84 <RND_Init+0x90>)
 8009d28:	885b      	ldrh	r3, [r3, #2]
 8009d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2e:	425a      	negs	r2, r3
 8009d30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009d34:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009d38:	bf58      	it	pl
 8009d3a:	4253      	negpl	r3, r2
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	4b11      	ldr	r3, [pc, #68]	; (8009d84 <RND_Init+0x90>)
 8009d40:	809a      	strh	r2, [r3, #4]
	g_RoundRecord.quat[3] = (g_RoundRecord.quat[2] + RES_QUADRANT) % (ANGLE_RESOLUTION);
 8009d42:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <RND_Init+0x90>)
 8009d44:	889b      	ldrh	r3, [r3, #4]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4a:	425a      	negs	r2, r3
 8009d4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009d50:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009d54:	bf58      	it	pl
 8009d56:	4253      	negpl	r3, r2
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	4b0a      	ldr	r3, [pc, #40]	; (8009d84 <RND_Init+0x90>)
 8009d5c:	80da      	strh	r2, [r3, #6]
	g_RoundRecord.quat[4] = (angle) % (ANGLE_RESOLUTION);
 8009d5e:	88fb      	ldrh	r3, [r7, #6]
 8009d60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	4b07      	ldr	r3, [pc, #28]	; (8009d84 <RND_Init+0x90>)
 8009d68:	811a      	strh	r2, [r3, #8]

	// 4象限, homeAngle 设置为第0象限
	g_RoundRecord.quadRant = 0;
 8009d6a:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <RND_Init+0x90>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	81da      	strh	r2, [r3, #14]

	// 初始象限增加值为0
	g_RoundRecord.RantInc = 0;
 8009d70:	4b04      	ldr	r3, [pc, #16]	; (8009d84 <RND_Init+0x90>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	819a      	strh	r2, [r3, #12]
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	20000bd0 	.word	0x20000bd0

08009d88 <RND_Input>:

void RND_Input(uint16_t angle)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	80fb      	strh	r3, [r7, #6]
	// 当前在第几象限
	int16_t rant = -1;
 8009d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d96:	81fb      	strh	r3, [r7, #14]

	for (int16_t i = 0; i < 4; i++){
 8009d98:	2300      	movs	r3, #0
 8009d9a:	81bb      	strh	r3, [r7, #12]
 8009d9c:	e03e      	b.n	8009e1c <RND_Input+0x94>
		if (angle >= g_RoundRecord.quat[i] && angle < g_RoundRecord.quat[i+1]){
 8009d9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009da2:	4a56      	ldr	r2, [pc, #344]	; (8009efc <RND_Input+0x174>)
 8009da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009da8:	88fa      	ldrh	r2, [r7, #6]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d30b      	bcc.n	8009dc6 <RND_Input+0x3e>
 8009dae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009db2:	3301      	adds	r3, #1
 8009db4:	4a51      	ldr	r2, [pc, #324]	; (8009efc <RND_Input+0x174>)
 8009db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dba:	88fa      	ldrh	r2, [r7, #6]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d202      	bcs.n	8009dc6 <RND_Input+0x3e>
			rant = i;
 8009dc0:	89bb      	ldrh	r3, [r7, #12]
 8009dc2:	81fb      	strh	r3, [r7, #14]
			break;
 8009dc4:	e02e      	b.n	8009e24 <RND_Input+0x9c>
		}

		if (g_RoundRecord.quat[i] > g_RoundRecord.quat[i+1]){
 8009dc6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009dca:	4a4c      	ldr	r2, [pc, #304]	; (8009efc <RND_Input+0x174>)
 8009dcc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8009dd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	4949      	ldr	r1, [pc, #292]	; (8009efc <RND_Input+0x174>)
 8009dd8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d917      	bls.n	8009e10 <RND_Input+0x88>
			if ((angle >= g_RoundRecord.quat[i] && angle <= ANGLE_RESOLUTION) ||
 8009de0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009de4:	4a45      	ldr	r2, [pc, #276]	; (8009efc <RND_Input+0x174>)
 8009de6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dea:	88fa      	ldrh	r2, [r7, #6]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d303      	bcc.n	8009df8 <RND_Input+0x70>
 8009df0:	88fb      	ldrh	r3, [r7, #6]
 8009df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009df6:	d908      	bls.n	8009e0a <RND_Input+0x82>
				(angle >= 0 && angle < g_RoundRecord.quat[i+1])){
 8009df8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	4a3f      	ldr	r2, [pc, #252]	; (8009efc <RND_Input+0x174>)
 8009e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			if ((angle >= g_RoundRecord.quat[i] && angle <= ANGLE_RESOLUTION) ||
 8009e04:	88fa      	ldrh	r2, [r7, #6]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d202      	bcs.n	8009e10 <RND_Input+0x88>
				rant = i;
 8009e0a:	89bb      	ldrh	r3, [r7, #12]
 8009e0c:	81fb      	strh	r3, [r7, #14]
				break;
 8009e0e:	e009      	b.n	8009e24 <RND_Input+0x9c>
	for (int16_t i = 0; i < 4; i++){
 8009e10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	3301      	adds	r3, #1
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	81bb      	strh	r3, [r7, #12]
 8009e1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	ddbc      	ble.n	8009d9e <RND_Input+0x16>
			}
		}
	}

	if (abs(g_RoundRecord.quadRant - rant) == 2){
 8009e24:	4b35      	ldr	r3, [pc, #212]	; (8009efc <RND_Input+0x174>)
 8009e26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	bfb8      	it	lt
 8009e36:	425b      	neglt	r3, r3
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d103      	bne.n	8009e44 <RND_Input+0xbc>
		// 转速太快, 失步, 或角度数据读取不出
		printf("Lost steps too much.\n");
 8009e3c:	4830      	ldr	r0, [pc, #192]	; (8009f00 <RND_Input+0x178>)
 8009e3e:	f00d f851 	bl	8016ee4 <puts>
		return;
 8009e42:	e058      	b.n	8009ef6 <RND_Input+0x16e>
	}

	if (rant == -1) {
 8009e44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4c:	d107      	bne.n	8009e5e <RND_Input+0xd6>
		printf("Not an effective angle, %d, home: %d\n", angle, g_RoundRecord.homeAngle);
 8009e4e:	88fb      	ldrh	r3, [r7, #6]
 8009e50:	4a2a      	ldr	r2, [pc, #168]	; (8009efc <RND_Input+0x174>)
 8009e52:	8952      	ldrh	r2, [r2, #10]
 8009e54:	4619      	mov	r1, r3
 8009e56:	482b      	ldr	r0, [pc, #172]	; (8009f04 <RND_Input+0x17c>)
 8009e58:	f00c ffbe 	bl	8016dd8 <iprintf>
		return;
 8009e5c:	e04b      	b.n	8009ef6 <RND_Input+0x16e>
	}

	// 计算象限增加值
	if (rant == g_RoundRecord.quadRant - 1)
 8009e5e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009e62:	4b26      	ldr	r3, [pc, #152]	; (8009efc <RND_Input+0x174>)
 8009e64:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d109      	bne.n	8009e82 <RND_Input+0xfa>
		g_RoundRecord.RantInc --;
 8009e6e:	4b23      	ldr	r3, [pc, #140]	; (8009efc <RND_Input+0x174>)
 8009e70:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	3b01      	subs	r3, #1
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	b21a      	sxth	r2, r3
 8009e7c:	4b1f      	ldr	r3, [pc, #124]	; (8009efc <RND_Input+0x174>)
 8009e7e:	819a      	strh	r2, [r3, #12]
 8009e80:	e036      	b.n	8009ef0 <RND_Input+0x168>
	else if (rant == g_RoundRecord.quadRant + 1)
 8009e82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009e86:	4b1d      	ldr	r3, [pc, #116]	; (8009efc <RND_Input+0x174>)
 8009e88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d109      	bne.n	8009ea6 <RND_Input+0x11e>
		g_RoundRecord.RantInc ++;
 8009e92:	4b1a      	ldr	r3, [pc, #104]	; (8009efc <RND_Input+0x174>)
 8009e94:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	b21a      	sxth	r2, r3
 8009ea0:	4b16      	ldr	r3, [pc, #88]	; (8009efc <RND_Input+0x174>)
 8009ea2:	819a      	strh	r2, [r3, #12]
 8009ea4:	e024      	b.n	8009ef0 <RND_Input+0x168>
	else {
		if (g_RoundRecord.quadRant == 0 && rant == 3)
 8009ea6:	4b15      	ldr	r3, [pc, #84]	; (8009efc <RND_Input+0x174>)
 8009ea8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10d      	bne.n	8009ecc <RND_Input+0x144>
 8009eb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d109      	bne.n	8009ecc <RND_Input+0x144>
			g_RoundRecord.RantInc --;
 8009eb8:	4b10      	ldr	r3, [pc, #64]	; (8009efc <RND_Input+0x174>)
 8009eba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	b21a      	sxth	r2, r3
 8009ec6:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <RND_Input+0x174>)
 8009ec8:	819a      	strh	r2, [r3, #12]
 8009eca:	e011      	b.n	8009ef0 <RND_Input+0x168>
		else if (g_RoundRecord.quadRant == 3 && rant == 0)
 8009ecc:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <RND_Input+0x174>)
 8009ece:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d10c      	bne.n	8009ef0 <RND_Input+0x168>
 8009ed6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d108      	bne.n	8009ef0 <RND_Input+0x168>
			g_RoundRecord.RantInc ++;
 8009ede:	4b07      	ldr	r3, [pc, #28]	; (8009efc <RND_Input+0x174>)
 8009ee0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	b21a      	sxth	r2, r3
 8009eec:	4b03      	ldr	r3, [pc, #12]	; (8009efc <RND_Input+0x174>)
 8009eee:	819a      	strh	r2, [r3, #12]
	}

	// 象限设置
	g_RoundRecord.quadRant = rant;
 8009ef0:	4a02      	ldr	r2, [pc, #8]	; (8009efc <RND_Input+0x174>)
 8009ef2:	89fb      	ldrh	r3, [r7, #14]
 8009ef4:	81d3      	strh	r3, [r2, #14]
}
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	20000bd0 	.word	0x20000bd0
 8009f00:	08018060 	.word	0x08018060
 8009f04:	08018078 	.word	0x08018078

08009f08 <RND_GetCrossAngle>:

/*
 * 角度传感器，逆时针 角度增大
 * */
int32_t RND_GetCrossAngle(uint16_t angle)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b089      	sub	sp, #36	; 0x24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	80fb      	strh	r3, [r7, #6]
	int32_t delta;
	int32_t side;

	int32_t home   = g_RoundRecord.homeAngle;
 8009f12:	4b51      	ldr	r3, [pc, #324]	; (800a058 <RND_GetCrossAngle+0x150>)
 8009f14:	895b      	ldrh	r3, [r3, #10]
 8009f16:	613b      	str	r3, [r7, #16]
	int32_t homePi = (home + ANGLE_RESOLUTION / 2) % ANGLE_RESOLUTION;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009f1e:	425a      	negs	r2, r3
 8009f20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009f24:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009f28:	bf58      	it	pl
 8009f2a:	4253      	negpl	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]

	if (home > homePi) {
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	dd23      	ble.n	8009f7e <RND_GetCrossAngle+0x76>
		// home 在0点右边
		if ((angle >= 0 && angle < homePi) || (angle >= home && angle <= ANGLE_RESOLUTION)) {
 8009f36:	88fb      	ldrh	r3, [r7, #6]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	dc07      	bgt.n	8009f4e <RND_GetCrossAngle+0x46>
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	dc13      	bgt.n	8009f6e <RND_GetCrossAngle+0x66>
 8009f46:	88fb      	ldrh	r3, [r7, #6]
 8009f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f4c:	d80f      	bhi.n	8009f6e <RND_GetCrossAngle+0x66>
			// angle 在 home的左边
			delta = (angle + ANGLE_RESOLUTION - home) % ANGLE_RESOLUTION;
 8009f4e:	88fb      	ldrh	r3, [r7, #6]
 8009f50:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	425a      	negs	r2, r3
 8009f5a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009f5e:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009f62:	bf58      	it	pl
 8009f64:	4253      	negpl	r3, r2
 8009f66:	61fb      	str	r3, [r7, #28]
			side = 1;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	61bb      	str	r3, [r7, #24]
 8009f6c:	e026      	b.n	8009fbc <RND_GetCrossAngle+0xb4>
		}else {
			// angle 在 home的左边
			delta = home - angle;
 8009f6e:	88fb      	ldrh	r3, [r7, #6]
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	61fb      	str	r3, [r7, #28]
			side = -1;
 8009f76:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7a:	61bb      	str	r3, [r7, #24]
 8009f7c:	e01e      	b.n	8009fbc <RND_GetCrossAngle+0xb4>
		}
	}else {
		// home 在 0 点的左边
		if (angle >= home && angle < homePi) {
 8009f7e:	88fb      	ldrh	r3, [r7, #6]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	dc0a      	bgt.n	8009f9c <RND_GetCrossAngle+0x94>
 8009f86:	88fb      	ldrh	r3, [r7, #6]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	dd06      	ble.n	8009f9c <RND_GetCrossAngle+0x94>
			// angle 在 home的左边
			delta = angle - home;
 8009f8e:	88fa      	ldrh	r2, [r7, #6]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	61fb      	str	r3, [r7, #28]
			side = 1;
 8009f96:	2301      	movs	r3, #1
 8009f98:	61bb      	str	r3, [r7, #24]
 8009f9a:	e00f      	b.n	8009fbc <RND_GetCrossAngle+0xb4>
		}else {
			// angle 在 home的右边
			delta = (home - angle + ANGLE_RESOLUTION) % ANGLE_RESOLUTION;
 8009f9c:	88fb      	ldrh	r3, [r7, #6]
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8009fa6:	425a      	negs	r2, r3
 8009fa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009fac:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009fb0:	bf58      	it	pl
 8009fb2:	4253      	negpl	r3, r2
 8009fb4:	61fb      	str	r3, [r7, #28]
			side = -1;
 8009fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fba:	61bb      	str	r3, [r7, #24]
		}
	}

	delta *= side;
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	69ba      	ldr	r2, [r7, #24]
 8009fc0:	fb02 f303 	mul.w	r3, r2, r3
 8009fc4:	61fb      	str	r3, [r7, #28]

	int32_t round;
	if (g_RoundRecord.RantInc >= 0){
 8009fc6:	4b24      	ldr	r3, [pc, #144]	; (800a058 <RND_GetCrossAngle+0x150>)
 8009fc8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	db09      	blt.n	8009fe4 <RND_GetCrossAngle+0xdc>
		round = g_RoundRecord.RantInc / 4;
 8009fd0:	4b21      	ldr	r3, [pc, #132]	; (800a058 <RND_GetCrossAngle+0x150>)
 8009fd2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	da00      	bge.n	8009fdc <RND_GetCrossAngle+0xd4>
 8009fda:	3303      	adds	r3, #3
 8009fdc:	109b      	asrs	r3, r3, #2
 8009fde:	b21b      	sxth	r3, r3
 8009fe0:	617b      	str	r3, [r7, #20]
 8009fe2:	e008      	b.n	8009ff6 <RND_GetCrossAngle+0xee>
	}else{
		round = (g_RoundRecord.RantInc + 1) / 4;
 8009fe4:	4b1c      	ldr	r3, [pc, #112]	; (800a058 <RND_GetCrossAngle+0x150>)
 8009fe6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009fea:	3301      	adds	r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	da00      	bge.n	8009ff2 <RND_GetCrossAngle+0xea>
 8009ff0:	3303      	adds	r3, #3
 8009ff2:	109b      	asrs	r3, r3, #2
 8009ff4:	617b      	str	r3, [r7, #20]
	}

	if (g_RoundRecord.RantInc > 0) {
 8009ff6:	4b18      	ldr	r3, [pc, #96]	; (800a058 <RND_GetCrossAngle+0x150>)
 8009ff8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	dd0f      	ble.n	800a020 <RND_GetCrossAngle+0x118>
		if (delta >= 0) {
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	2b00      	cmp	r3, #0
 800a004:	db05      	blt.n	800a012 <RND_GetCrossAngle+0x10a>
			delta += round * ANGLE_RESOLUTION;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	039b      	lsls	r3, r3, #14
 800a00a:	69fa      	ldr	r2, [r7, #28]
 800a00c:	4413      	add	r3, r2
 800a00e:	61fb      	str	r3, [r7, #28]
 800a010:	e01b      	b.n	800a04a <RND_GetCrossAngle+0x142>
		}else {
			delta += (round + 1)* ANGLE_RESOLUTION;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	3301      	adds	r3, #1
 800a016:	039b      	lsls	r3, r3, #14
 800a018:	69fa      	ldr	r2, [r7, #28]
 800a01a:	4413      	add	r3, r2
 800a01c:	61fb      	str	r3, [r7, #28]
 800a01e:	e014      	b.n	800a04a <RND_GetCrossAngle+0x142>
		}
	}else if (g_RoundRecord.RantInc < -1) {
 800a020:	4b0d      	ldr	r3, [pc, #52]	; (800a058 <RND_GetCrossAngle+0x150>)
 800a022:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02a:	da0e      	bge.n	800a04a <RND_GetCrossAngle+0x142>
		if (delta < 0){
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	da05      	bge.n	800a03e <RND_GetCrossAngle+0x136>
			delta += round * ANGLE_RESOLUTION;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	039b      	lsls	r3, r3, #14
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	4413      	add	r3, r2
 800a03a:	61fb      	str	r3, [r7, #28]
 800a03c:	e005      	b.n	800a04a <RND_GetCrossAngle+0x142>
		}else {
			delta += (round - 1)* ANGLE_RESOLUTION;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	3b01      	subs	r3, #1
 800a042:	039b      	lsls	r3, r3, #14
 800a044:	69fa      	ldr	r2, [r7, #28]
 800a046:	4413      	add	r3, r2
 800a048:	61fb      	str	r3, [r7, #28]
		}
	}

	return delta;
 800a04a:	69fb      	ldr	r3, [r7, #28]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3724      	adds	r7, #36	; 0x24
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	20000bd0 	.word	0x20000bd0

0800a05c <RND_GetIncSteps>:

	return round;
}

int32_t RND_GetIncSteps(uint16_t angle, float ms)
{
 800a05c:	b5b0      	push	{r4, r5, r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	ed87 0a00 	vstr	s0, [r7]
 800a068:	80fb      	strh	r3, [r7, #6]
	float ca = (float)RND_GetCrossAngle(angle);
 800a06a:	88fb      	ldrh	r3, [r7, #6]
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7ff ff4b 	bl	8009f08 <RND_GetCrossAngle>
 800a072:	ee07 0a90 	vmov	s15, r0
 800a076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a07a:	edc7 7a03 	vstr	s15, [r7, #12]

	// 一圈 = 200 * 细分，
	int32_t steps = ca * (200.0 * ms) / (float)ANGLE_RESOLUTION;
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7f6 fa62 	bl	8000548 <__aeabi_f2d>
 800a084:	4604      	mov	r4, r0
 800a086:	460d      	mov	r5, r1
 800a088:	6838      	ldr	r0, [r7, #0]
 800a08a:	f7f6 fa5d 	bl	8000548 <__aeabi_f2d>
 800a08e:	f04f 0200 	mov.w	r2, #0
 800a092:	4b0f      	ldr	r3, [pc, #60]	; (800a0d0 <RND_GetIncSteps+0x74>)
 800a094:	f7f6 fab0 	bl	80005f8 <__aeabi_dmul>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4620      	mov	r0, r4
 800a09e:	4629      	mov	r1, r5
 800a0a0:	f7f6 faaa 	bl	80005f8 <__aeabi_dmul>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f04f 0200 	mov.w	r2, #0
 800a0b0:	4b08      	ldr	r3, [pc, #32]	; (800a0d4 <RND_GetIncSteps+0x78>)
 800a0b2:	f7f6 fbcb 	bl	800084c <__aeabi_ddiv>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4610      	mov	r0, r2
 800a0bc:	4619      	mov	r1, r3
 800a0be:	f7f6 fcad 	bl	8000a1c <__aeabi_d2iz>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	60bb      	str	r3, [r7, #8]
	return steps;
 800a0c6:	68bb      	ldr	r3, [r7, #8]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bdb0      	pop	{r4, r5, r7, pc}
 800a0d0:	40690000 	.word	0x40690000
 800a0d4:	40d00000 	.word	0x40d00000

0800a0d8 <_ZN14TMC5160Stepper11rms_currentEt>:
	public:
		TMC5160Stepper(uint16_t pinCS, float RS = default_RS, int8_t link_index = -1);
		TMC5160Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link_index = -1);
		TMC5160Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link_index = -1);

		void rms_current(uint16_t mA) { TMC2160Stepper::rms_current(mA); }
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	807b      	strh	r3, [r7, #2]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	887a      	ldrh	r2, [r7, #2]
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f002 fe02 	bl	800ccf4 <_ZN14TMC2160Stepper11rms_currentEt>
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <JNT_dbgOutput>:

	return paramsSz;
}

void JNT_dbgOutput(char* str, size_t cnt)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
	  msg.type = (uint8_t)'-'; //MSG_STRING_TYPE;
	  msg.code = (uint8_t)'-'; //JNT_LOGFEEDBACK;
	  msg.len  = (uint8_t)'-'; //cnt;
	  msg.crc  = (uint8_t)'-'; //msg.len ^ 0x1E;
      */
	  msg.type = MSG_STRING_TYPE;
 800a102:	2322      	movs	r3, #34	; 0x22
 800a104:	733b      	strb	r3, [r7, #12]
	  msg.code = JNT_LOGFEEDBACK;
 800a106:	23f1      	movs	r3, #241	; 0xf1
 800a108:	737b      	strb	r3, [r7, #13]
	  msg.len  = cnt;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	73bb      	strb	r3, [r7, #14]
	  msg.crc  = msg.len ^ 0x1E;
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	f083 031e 	eor.w	r3, r3, #30
 800a116:	b2db      	uxtb	r3, r3
 800a118:	73fb      	strb	r3, [r7, #15]

	  FUART_sendMsg(&msg, (uint8_t*)str, msg.len);
 800a11a:	7bbb      	ldrb	r3, [r7, #14]
 800a11c:	461a      	mov	r2, r3
 800a11e:	f107 030c 	add.w	r3, r7, #12
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	4618      	mov	r0, r3
 800a126:	f003 fe37 	bl	800dd98 <FUART_sendMsg>
	//}
}
 800a12a:	bf00      	nop
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
	...

0800a134 <PIDProfile_Step>:
/* External outputs (root outports fed by signals with default storage) */
PIDExtY rtPIDY;

/* Model step function */
void PIDProfile_Step(real32_T ts, real32_T curPos)
{
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	ed87 0a01 	vstr	s0, [r7, #4]
 800a13e:	edc7 0a00 	vstr	s1, [r7]

  /* Sum: '<Root>/Sum' incorporates:
   *  Inport: '<Root>/CurrentPos'
   *  Inport: '<Root>/TargetPos'
   */
  rtb_perr = rtPIDU.TargetPos - curPos;
 800a142:	4b40      	ldr	r3, [pc, #256]	; (800a244 <PIDProfile_Step+0x110>)
 800a144:	ed93 7a00 	vldr	s14, [r3]
 800a148:	edd7 7a00 	vldr	s15, [r7]
 800a14c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a150:	edc7 7a04 	vstr	s15, [r7, #16]
  /* Gain: '<S36>/Filter Coefficient' incorporates:
   *  DiscreteIntegrator: '<S28>/Filter'
   *  Gain: '<S27>/Derivative Gain'
   *  Sum: '<S28>/SumD'
   */
  rtb_FilterCoefficient = (rtPID.Kd * rtb_perr - rtPIDDW.Filter_DSTATE) * rtPID.DerFilter;
 800a154:	4b3c      	ldr	r3, [pc, #240]	; (800a248 <PIDProfile_Step+0x114>)
 800a156:	ed93 7a02 	vldr	s14, [r3, #8]
 800a15a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a15e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a162:	4b3a      	ldr	r3, [pc, #232]	; (800a24c <PIDProfile_Step+0x118>)
 800a164:	edd3 7a01 	vldr	s15, [r3, #4]
 800a168:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a16c:	4b36      	ldr	r3, [pc, #216]	; (800a248 <PIDProfile_Step+0x114>)
 800a16e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a176:	edc7 7a03 	vstr	s15, [r7, #12]
  /* Outport: '<Root>/CmdPos' incorporates:
   *  DiscreteIntegrator: '<S33>/Integrator'
   *  Gain: '<S38>/Proportional Gain'
   *  Sum: '<S42>/Sum'
   */
  rtPIDY.CmdPos = (rtPID.Kp * rtb_perr + rtPIDDW.Integrator_DSTATE) +
 800a17a:	4b33      	ldr	r3, [pc, #204]	; (800a248 <PIDProfile_Step+0x114>)
 800a17c:	ed93 7a00 	vldr	s14, [r3]
 800a180:	edd7 7a04 	vldr	s15, [r7, #16]
 800a184:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a188:	4b30      	ldr	r3, [pc, #192]	; (800a24c <PIDProfile_Step+0x118>)
 800a18a:	edd3 7a00 	vldr	s15, [r3]
 800a18e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a192:	edd7 7a03 	vldr	s15, [r7, #12]
 800a196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a19a:	4b2d      	ldr	r3, [pc, #180]	; (800a250 <PIDProfile_Step+0x11c>)
 800a19c:	edc3 7a00 	vstr	s15, [r3]
	rtb_FilterCoefficient;

  /* Update for DiscreteIntegrator: '<S33>/Integrator' incorporates:
   *  Gain: '<S30>/Integral Gain'
   */
  rtPIDDW.Integrator_DSTATE += rtPID.Ki * rtb_perr * ts;
 800a1a0:	4b2a      	ldr	r3, [pc, #168]	; (800a24c <PIDProfile_Step+0x118>)
 800a1a2:	ed93 7a00 	vldr	s14, [r3]
 800a1a6:	4b28      	ldr	r3, [pc, #160]	; (800a248 <PIDProfile_Step+0x114>)
 800a1a8:	edd3 6a01 	vldr	s13, [r3, #4]
 800a1ac:	edd7 7a04 	vldr	s15, [r7, #16]
 800a1b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a1b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1c0:	4b22      	ldr	r3, [pc, #136]	; (800a24c <PIDProfile_Step+0x118>)
 800a1c2:	edc3 7a00 	vstr	s15, [r3]

  /* Update for DiscreteIntegrator: '<S28>/Filter' */
  rtPIDDW.Filter_DSTATE += ts * rtb_FilterCoefficient;
 800a1c6:	4b21      	ldr	r3, [pc, #132]	; (800a24c <PIDProfile_Step+0x118>)
 800a1c8:	ed93 7a01 	vldr	s14, [r3, #4]
 800a1cc:	edd7 6a01 	vldr	s13, [r7, #4]
 800a1d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1dc:	4b1b      	ldr	r3, [pc, #108]	; (800a24c <PIDProfile_Step+0x118>)
 800a1de:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Calculate the cmd velocity*/
  real32_T cv = rtb_perr / ts;
 800a1e2:	edd7 6a04 	vldr	s13, [r7, #16]
 800a1e6:	ed97 7a01 	vldr	s14, [r7, #4]
 800a1ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ee:	edc7 7a05 	vstr	s15, [r7, #20]

  if (cv > rtPIDU.MaxVel)
 800a1f2:	4b14      	ldr	r3, [pc, #80]	; (800a244 <PIDProfile_Step+0x110>)
 800a1f4:	edd3 7a01 	vldr	s15, [r3, #4]
 800a1f8:	ed97 7a05 	vldr	s14, [r7, #20]
 800a1fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a204:	dd02      	ble.n	800a20c <PIDProfile_Step+0xd8>
	  cv = rtPIDU.MaxVel;
 800a206:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <PIDProfile_Step+0x110>)
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	617b      	str	r3, [r7, #20]

  if (cv < -rtPIDU.MaxVel)
 800a20c:	4b0d      	ldr	r3, [pc, #52]	; (800a244 <PIDProfile_Step+0x110>)
 800a20e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a212:	eef1 7a67 	vneg.f32	s15, s15
 800a216:	ed97 7a05 	vldr	s14, [r7, #20]
 800a21a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a222:	d506      	bpl.n	800a232 <PIDProfile_Step+0xfe>
	  cv = -rtPIDU.MaxVel;
 800a224:	4b07      	ldr	r3, [pc, #28]	; (800a244 <PIDProfile_Step+0x110>)
 800a226:	edd3 7a01 	vldr	s15, [r3, #4]
 800a22a:	eef1 7a67 	vneg.f32	s15, s15
 800a22e:	edc7 7a05 	vstr	s15, [r7, #20]

  rtPIDY.CmdVel = cv;
 800a232:	4a07      	ldr	r2, [pc, #28]	; (800a250 <PIDProfile_Step+0x11c>)
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	6053      	str	r3, [r2, #4]
}
 800a238:	bf00      	nop
 800a23a:	371c      	adds	r7, #28
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	20000bf8 	.word	0x20000bf8
 800a248:	20000be0 	.word	0x20000be0
 800a24c:	20000bf0 	.word	0x20000bf0
 800a250:	20000c08 	.word	0x20000c08

0800a254 <PIDProfile_Start>:

void PIDProfile_Start(real32_T targetPos, real32_T maxVel, real32_T maxAcce, real32_T maxJerk)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	ed87 0a03 	vstr	s0, [r7, #12]
 800a25e:	edc7 0a02 	vstr	s1, [r7, #8]
 800a262:	ed87 1a01 	vstr	s2, [r7, #4]
 800a266:	edc7 1a00 	vstr	s3, [r7]
	rtPIDU.TargetPos = targetPos;
 800a26a:	4a0f      	ldr	r2, [pc, #60]	; (800a2a8 <PIDProfile_Start+0x54>)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6013      	str	r3, [r2, #0]
	rtPIDU.MaxVel    = maxVel;
 800a270:	4a0d      	ldr	r2, [pc, #52]	; (800a2a8 <PIDProfile_Start+0x54>)
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6053      	str	r3, [r2, #4]
	rtPIDU.MaxAcce   = maxAcce;
 800a276:	4a0c      	ldr	r2, [pc, #48]	; (800a2a8 <PIDProfile_Start+0x54>)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6093      	str	r3, [r2, #8]
	rtPIDU.MaxJerk   = maxJerk;
 800a27c:	4a0a      	ldr	r2, [pc, #40]	; (800a2a8 <PIDProfile_Start+0x54>)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	60d3      	str	r3, [r2, #12]

	/* Initialize the output value*/
	rtPIDY.CmdPos = 0.0f;
 800a282:	4b0a      	ldr	r3, [pc, #40]	; (800a2ac <PIDProfile_Start+0x58>)
 800a284:	f04f 0200 	mov.w	r2, #0
 800a288:	601a      	str	r2, [r3, #0]
	rtPIDY.CmdVel = 0.0f;
 800a28a:	4b08      	ldr	r3, [pc, #32]	; (800a2ac <PIDProfile_Start+0x58>)
 800a28c:	f04f 0200 	mov.w	r2, #0
 800a290:	605a      	str	r2, [r3, #4]
	rtPIDY.CmdAcce = 0.0f;
 800a292:	4b06      	ldr	r3, [pc, #24]	; (800a2ac <PIDProfile_Start+0x58>)
 800a294:	f04f 0200 	mov.w	r2, #0
 800a298:	609a      	str	r2, [r3, #8]

}
 800a29a:	bf00      	nop
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	20000bf8 	.word	0x20000bf8
 800a2ac:	20000c08 	.word	0x20000c08

0800a2b0 <PIDProfile_Initialize>:

void PIDProfile_Initialize(real32_T Kp, real32_T Ki, real32_T Kd, real32_T dc)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	ed87 0a03 	vstr	s0, [r7, #12]
 800a2ba:	edc7 0a02 	vstr	s1, [r7, #8]
 800a2be:	ed87 1a01 	vstr	s2, [r7, #4]
 800a2c2:	edc7 1a00 	vstr	s3, [r7]
	rtPID.Kp = Kp;
 800a2c6:	4a09      	ldr	r2, [pc, #36]	; (800a2ec <PIDProfile_Initialize+0x3c>)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6013      	str	r3, [r2, #0]
	rtPID.Ki = Ki;
 800a2cc:	4a07      	ldr	r2, [pc, #28]	; (800a2ec <PIDProfile_Initialize+0x3c>)
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	6053      	str	r3, [r2, #4]
	rtPID.Kd = Kd;
 800a2d2:	4a06      	ldr	r2, [pc, #24]	; (800a2ec <PIDProfile_Initialize+0x3c>)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6093      	str	r3, [r2, #8]
	rtPID.DerFilter = dc;
 800a2d8:	4a04      	ldr	r2, [pc, #16]	; (800a2ec <PIDProfile_Initialize+0x3c>)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	60d3      	str	r3, [r2, #12]
}
 800a2de:	bf00      	nop
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	20000be0 	.word	0x20000be0

0800a2f0 <MOTOR_Init>:

MOTOR_Model_t MOTOR_Model;
extern int32_t g_IncSteps;

void MOTOR_Init()
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	af00      	add	r7, sp, #0
	MOTOR_Model.driver = NULL;
 800a2f4:	4b08      	ldr	r3, [pc, #32]	; (800a318 <MOTOR_Init+0x28>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	601a      	str	r2, [r3, #0]
	MOTOR_Model.target   = g_IncSteps;
 800a2fa:	4b08      	ldr	r3, [pc, #32]	; (800a31c <MOTOR_Init+0x2c>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a06      	ldr	r2, [pc, #24]	; (800a318 <MOTOR_Init+0x28>)
 800a300:	6053      	str	r3, [r2, #4]
	MOTOR_Model.speed    = 0;
 800a302:	4b05      	ldr	r3, [pc, #20]	; (800a318 <MOTOR_Init+0x28>)
 800a304:	2200      	movs	r2, #0
 800a306:	609a      	str	r2, [r3, #8]
	MOTOR_Model.polarity = 1;
 800a308:	4b03      	ldr	r3, [pc, #12]	; (800a318 <MOTOR_Init+0x28>)
 800a30a:	2201      	movs	r2, #1
 800a30c:	731a      	strb	r2, [r3, #12]
}
 800a30e:	bf00      	nop
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	20000c14 	.word	0x20000c14
 800a31c:	200006e4 	.word	0x200006e4

0800a320 <MOTOR_bindDriver>:

#if (USE_TMC5160 == 1)
void MOTOR_bindDriver(TMC5160Stepper* driver)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
	MOTOR_Model.driver = driver;
 800a328:	4a79      	ldr	r2, [pc, #484]	; (800a510 <MOTOR_bindDriver+0x1f0>)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6013      	str	r3, [r2, #0]

	/* Driver En pin*/
	HAL_GPIO_WritePin(GPIOC, DRV_ENN_Pin, GPIO_PIN_RESET);
 800a32e:	2200      	movs	r2, #0
 800a330:	2110      	movs	r1, #16
 800a332:	4878      	ldr	r0, [pc, #480]	; (800a514 <MOTOR_bindDriver+0x1f4>)
 800a334:	f005 fe68 	bl	8010008 <HAL_GPIO_WritePin>

	  /* Start TMC external CLK, 12M*/
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800a338:	2104      	movs	r1, #4
 800a33a:	4877      	ldr	r0, [pc, #476]	; (800a518 <MOTOR_bindDriver+0x1f8>)
 800a33c:	f006 fe9e 	bl	801107c <HAL_TIM_PWM_Start>

	/* Simple delay*/
	osDelay(10);
 800a340:	200a      	movs	r0, #10
 800a342:	f008 ffc9 	bl	80132d8 <osDelay>

	printf("Init Pos: %ld\n", g_IncSteps);
 800a346:	4b75      	ldr	r3, [pc, #468]	; (800a51c <MOTOR_bindDriver+0x1fc>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4619      	mov	r1, r3
 800a34c:	4874      	ldr	r0, [pc, #464]	; (800a520 <MOTOR_bindDriver+0x200>)
 800a34e:	f00c fd43 	bl	8016dd8 <iprintf>

	driver->GSTAT(0);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2100      	movs	r1, #0
 800a356:	4618      	mov	r0, r3
 800a358:	f003 fc05 	bl	800db66 <_ZN10TMCStepper5GSTATEh>

	int32_t chopconf = driver->CHOPCONF();
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 fd2a 	bl	800bdb8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800a364:	4603      	mov	r3, r0
 800a366:	617b      	str	r3, [r7, #20]
	printf("TMC5160 chop conf: 0x%08x\n", (unsigned int)chopconf);
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	4619      	mov	r1, r3
 800a36c:	486d      	ldr	r0, [pc, #436]	; (800a524 <MOTOR_bindDriver+0x204>)
 800a36e:	f00c fd33 	bl	8016dd8 <iprintf>

	/* Read vel actual*/
	int32_t va = driver->VACTUAL();
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	f002 ff05 	bl	800d184 <_ZN14TMC5130Stepper7VACTUALEv>
 800a37a:	6138      	str	r0, [r7, #16]
	printf("TMC5160 vactual: %ld\n", va);
 800a37c:	6939      	ldr	r1, [r7, #16]
 800a37e:	486a      	ldr	r0, [pc, #424]	; (800a528 <MOTOR_bindDriver+0x208>)
 800a380:	f00c fd2a 	bl	8016dd8 <iprintf>

	driver->defaults();
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f003 f8b1 	bl	800d4ec <_ZN14TMC5160Stepper8defaultsEv>
	driver->push();
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f003 f92a 	bl	800d5e4 <_ZN14TMC5160Stepper4pushEv>
    driver->begin();
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4618      	mov	r0, r3
 800a394:	f002 fdf6 	bl	800cf84 <_ZN14TMC5130Stepper5beginEv>

    uint8_t conn = driver->test_connection();
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f003 fa94 	bl	800d8c8 <_ZN10TMCStepper15test_connectionEv>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]
    if (conn != 0){
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d004      	beq.n	800a3b4 <MOTOR_bindDriver+0x94>
	  printf("TMC5160 not connected, ret: %d\n", conn);
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	485f      	ldr	r0, [pc, #380]	; (800a52c <MOTOR_bindDriver+0x20c>)
 800a3b0:	f00c fd12 	bl	8016dd8 <iprintf>
    }

    uint8_t version = driver->version();
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f002 fe5d 	bl	800d076 <_ZN14TMC5130Stepper7versionEv>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73bb      	strb	r3, [r7, #14]
    printf("TMC driver version: 0x%02x\n", version);
 800a3c0:	7bbb      	ldrb	r3, [r7, #14]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	485a      	ldr	r0, [pc, #360]	; (800a530 <MOTOR_bindDriver+0x210>)
 800a3c6:	f00c fd07 	bl	8016dd8 <iprintf>

    driver->chm(0); // Standard mode (spreadCycle)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f001 fd87 	bl	800bee2 <_ZN14TMC2130Stepper3chmEb>

    /* CHOPPER_DEFAULT_24V, (4,5,0), tuned to: 4,5,2*/
    driver->toff(4); // 0: shutdown, 1: only with tbl>=2, DcStep: no less than 3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2104      	movs	r1, #4
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f001 fd13 	bl	800be04 <_ZN14TMC2130Stepper4toffEh>
    driver->hend(5);
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3314      	adds	r3, #20
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2105      	movs	r1, #5
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	4798      	blx	r3
    driver->hstrt(2);
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	331c      	adds	r3, #28
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2102      	movs	r1, #2
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	4798      	blx	r3

    driver->tbl(2); // blank_time(36)
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	332c      	adds	r3, #44	; 0x2c
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2102      	movs	r1, #2
 800a40a:	4610      	mov	r0, r2
 800a40c:	4798      	blx	r3

    driver->pwm_freq(1);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2101      	movs	r1, #1
 800a412:	4618      	mov	r0, r3
 800a414:	f002 f80f 	bl	800c436 <_ZN14TMC2160Stepper8pwm_freqEh>
    driver->TPOWERDOWN(10);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	210a      	movs	r1, #10
 800a41c:	4618      	mov	r0, r3
 800a41e:	f003 fbb3 	bl	800db88 <_ZN10TMCStepper10TPOWERDOWNEh>
    //driver->pwm_autoscale(true);
    driver->TPWMTHRS(2000);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a428:	4618      	mov	r0, r3
 800a42a:	f003 fbc2 	bl	800dbb2 <_ZN10TMCStepper8TPWMTHRSEm>

    driver->blank_time(24);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2118      	movs	r1, #24
 800a432:	4618      	mov	r0, r3
 800a434:	f003 fb4e 	bl	800dad4 <_ZN10TMCStepper10blank_timeEh>

    /*Work current*/
    driver->rms_current(g_WorkCurrent); // mA
 800a438:	4b3e      	ldr	r3, [pc, #248]	; (800a534 <MOTOR_bindDriver+0x214>)
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7ff fe4a 	bl	800a0d8 <_ZN14TMC5160Stepper11rms_currentEt>
    driver->intpol(1);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2101      	movs	r1, #1
 800a448:	4618      	mov	r0, r3
 800a44a:	f001 fdd1 	bl	800bff0 <_ZN14TMC2130Stepper6intpolEb>

    driver->microsteps(MICRO_STEPS);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2120      	movs	r1, #32
 800a452:	4618      	mov	r0, r3
 800a454:	f003 fa54 	bl	800d900 <_ZN10TMCStepper10microstepsEt>
    driver->TCOOLTHRS(400000); // 20bit max
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4937      	ldr	r1, [pc, #220]	; (800a538 <MOTOR_bindDriver+0x218>)
 800a45c:	4618      	mov	r0, r3
 800a45e:	f002 fa89 	bl	800c974 <_ZN14TMC2130Stepper9TCOOLTHRSEm>
    driver->THIGH(1200);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800a468:	4618      	mov	r0, r3
 800a46a:	f002 faaa 	bl	800c9c2 <_ZN14TMC2130Stepper5THIGHEm>
    driver->semin(5);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2105      	movs	r1, #5
 800a472:	4618      	mov	r0, r3
 800a474:	f001 fe7b 	bl	800c16e <_ZN14TMC2130Stepper5seminEh>
    driver->semax(2);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2102      	movs	r1, #2
 800a47c:	4618      	mov	r0, r3
 800a47e:	f001 fe9b 	bl	800c1b8 <_ZN14TMC2130Stepper5semaxEh>
    driver->sedn(0b01);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2101      	movs	r1, #1
 800a486:	4618      	mov	r0, r3
 800a488:	f001 febb 	bl	800c202 <_ZN14TMC2130Stepper4sednEh>
    driver->sgt(STALL_VALUE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	213f      	movs	r1, #63	; 0x3f
 800a490:	4618      	mov	r0, r3
 800a492:	f001 fedb 	bl	800c24c <_ZN14TMC2130Stepper3sgtEa>
    driver->irun(30);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	211e      	movs	r1, #30
 800a49a:	4618      	mov	r0, r3
 800a49c:	f001 ff9a 	bl	800c3d4 <_ZN10TMCStepper4irunEh>
    driver->VDCMIN(800000);
    driver.dc_time(96);
    HAL_GPIO_WritePin(DCEN_GPIO_Port, DCEN_Pin, GPIO_PIN_SET);
   */

    bool enable = driver->isEnabled();
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f002 fa29 	bl	800c8fa <_ZN14TMC2130Stepper9isEnabledEv>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	737b      	strb	r3, [r7, #13]
    if (enable){
 800a4ac:	7b7b      	ldrb	r3, [r7, #13]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <MOTOR_bindDriver+0x198>
	    printf("driver enable\n");
 800a4b2:	4822      	ldr	r0, [pc, #136]	; (800a53c <MOTOR_bindDriver+0x21c>)
 800a4b4:	f00c fd16 	bl	8016ee4 <puts>
    }

    bool sdmode = driver->sd_mode();
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f002 fdc8 	bl	800d050 <_ZN14TMC5130Stepper7sd_modeEv>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	733b      	strb	r3, [r7, #12]
    if (sdmode){
 800a4c4:	7b3b      	ldrb	r3, [r7, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d002      	beq.n	800a4d0 <MOTOR_bindDriver+0x1b0>
	    printf("driver use sdmode\n");
 800a4ca:	481d      	ldr	r0, [pc, #116]	; (800a540 <MOTOR_bindDriver+0x220>)
 800a4cc:	f00c fd0a 	bl	8016ee4 <puts>
    }

    uint8_t state = driver->GSTAT();
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f003 fb36 	bl	800db44 <_ZN10TMCStepper5GSTATEv>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	72fb      	strb	r3, [r7, #11]
    printf("driver state: %d\n", state);
 800a4dc:	7afb      	ldrb	r3, [r7, #11]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4818      	ldr	r0, [pc, #96]	; (800a544 <MOTOR_bindDriver+0x224>)
 800a4e2:	f00c fc79 	bl	8016dd8 <iprintf>

    uint16_t ms = driver->microsteps();
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f003 fab9 	bl	800da60 <_ZN10TMCStepper10microstepsEv>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	813b      	strh	r3, [r7, #8]
    printf("motor micro steps: %d\n", ms);
 800a4f2:	893b      	ldrh	r3, [r7, #8]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	4814      	ldr	r0, [pc, #80]	; (800a548 <MOTOR_bindDriver+0x228>)
 800a4f8:	f00c fc6e 	bl	8016dd8 <iprintf>

	Stepper_Init(ms);
 800a4fc:	893b      	ldrh	r3, [r7, #8]
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	4618      	mov	r0, r3
 800a502:	f001 fb6d 	bl	800bbe0 <Stepper_Init>
}
 800a506:	bf00      	nop
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	20000c14 	.word	0x20000c14
 800a514:	40020800 	.word	0x40020800
 800a518:	200008bc 	.word	0x200008bc
 800a51c:	200006e4 	.word	0x200006e4
 800a520:	080180a0 	.word	0x080180a0
 800a524:	080180b0 	.word	0x080180b0
 800a528:	080180cc 	.word	0x080180cc
 800a52c:	080180e4 	.word	0x080180e4
 800a530:	08018104 	.word	0x08018104
 800a534:	200005a0 	.word	0x200005a0
 800a538:	00061a80 	.word	0x00061a80
 800a53c:	08018120 	.word	0x08018120
 800a540:	08018130 	.word	0x08018130
 800a544:	08018144 	.word	0x08018144
 800a548:	08018158 	.word	0x08018158

0800a54c <MOTOR_run>:
	}
}
#endif

void MOTOR_run()
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
	Stepper_Run();
 800a550:	f001 fbe8 	bl	800bd24 <Stepper_Run>
}
 800a554:	bf00      	nop
 800a556:	bd80      	pop	{r7, pc}

0800a558 <MOTOR_stop>:

void MOTOR_stop()
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	af00      	add	r7, sp, #0
	MOTOR_Model.speed = 0;
 800a55c:	4b03      	ldr	r3, [pc, #12]	; (800a56c <MOTOR_stop+0x14>)
 800a55e:	2200      	movs	r2, #0
 800a560:	609a      	str	r2, [r3, #8]
	Stepper_Stop();
 800a562:	f001 fbcd 	bl	800bd00 <Stepper_Stop>
}
 800a566:	bf00      	nop
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20000c14 	.word	0x20000c14

0800a570 <MOTOR_loop>:

void MOTOR_loop(uint32_t ticks)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
	/*Check the driver status*/
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <MOTOR_setPolarity>:

void MOTOR_setPolarity(int8_t polarity)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	4603      	mov	r3, r0
 800a58c:	71fb      	strb	r3, [r7, #7]
	MOTOR_Model.polarity = polarity;
 800a58e:	4a04      	ldr	r2, [pc, #16]	; (800a5a0 <MOTOR_setPolarity+0x1c>)
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	7313      	strb	r3, [r2, #12]
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	20000c14 	.word	0x20000c14

0800a5a4 <MOTOR_setSpeed>:

	return MOTOR_DIR_BACKWARD;
}

void MOTOR_setSpeed(int32_t speed)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
	if (MOTOR_Model.polarity == 1){
 800a5ac:	4b13      	ldr	r3, [pc, #76]	; (800a5fc <MOTOR_setSpeed+0x58>)
 800a5ae:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d10a      	bne.n	800a5cc <MOTOR_setSpeed+0x28>
		if (speed > 0)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	dd03      	ble.n	800a5c4 <MOTOR_setSpeed+0x20>
			Stepper_SetDir(STEPPER_Dir_CW);
 800a5bc:	2001      	movs	r0, #1
 800a5be:	f001 fb45 	bl	800bc4c <Stepper_SetDir>
 800a5c2:	e00d      	b.n	800a5e0 <MOTOR_setSpeed+0x3c>
		else
			Stepper_SetDir(STEPPER_Dir_CCW);
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	f001 fb41 	bl	800bc4c <Stepper_SetDir>
 800a5ca:	e009      	b.n	800a5e0 <MOTOR_setSpeed+0x3c>
	}else{
		if (speed > 0)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	dd03      	ble.n	800a5da <MOTOR_setSpeed+0x36>
			Stepper_SetDir(STEPPER_Dir_CW);
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	f001 fb3a 	bl	800bc4c <Stepper_SetDir>
 800a5d8:	e002      	b.n	800a5e0 <MOTOR_setSpeed+0x3c>
		else
			Stepper_SetDir(STEPPER_Dir_CCW);
 800a5da:	2000      	movs	r0, #0
 800a5dc:	f001 fb36 	bl	800bc4c <Stepper_SetDir>
	}

	MOTOR_Model.speed = speed;
 800a5e0:	4a06      	ldr	r2, [pc, #24]	; (800a5fc <MOTOR_setSpeed+0x58>)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6093      	str	r3, [r2, #8]
	Stepper_SetSpeed(abs(speed));
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7fc ff84 	bl	80074f4 <_ZSt3absl>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f001 fb5a 	bl	800bca8 <Stepper_SetSpeed>
}
 800a5f4:	bf00      	nop
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	20000c14 	.word	0x20000c14

0800a600 <MOTOR_getSpeed>:

int32_t MOTOR_getSpeed()
{
 800a600:	b480      	push	{r7}
 800a602:	af00      	add	r7, sp, #0
	return MOTOR_Model.speed;
 800a604:	4b03      	ldr	r3, [pc, #12]	; (800a614 <MOTOR_getSpeed+0x14>)
 800a606:	689b      	ldr	r3, [r3, #8]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	20000c14 	.word	0x20000c14

0800a618 <MOTOR_setRelTarget>:

void MOTOR_setRelTarget(int32_t target)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
	MOTOR_Model.target = g_IncSteps + MOTOR_Model.polarity * target;
 800a620:	4b08      	ldr	r3, [pc, #32]	; (800a644 <MOTOR_setRelTarget+0x2c>)
 800a622:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a626:	461a      	mov	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	fb03 f202 	mul.w	r2, r3, r2
 800a62e:	4b06      	ldr	r3, [pc, #24]	; (800a648 <MOTOR_setRelTarget+0x30>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4413      	add	r3, r2
 800a634:	4a03      	ldr	r2, [pc, #12]	; (800a644 <MOTOR_setRelTarget+0x2c>)
 800a636:	6053      	str	r3, [r2, #4]
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	20000c14 	.word	0x20000c14
 800a648:	200006e4 	.word	0x200006e4

0800a64c <MOTOR_setAbsTarget>:

void MOTOR_setAbsTarget(int32_t target)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
	MOTOR_Model.target = MOTOR_Model.polarity * target;
 800a654:	4b07      	ldr	r3, [pc, #28]	; (800a674 <MOTOR_setAbsTarget+0x28>)
 800a656:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a65a:	461a      	mov	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	fb02 f303 	mul.w	r3, r2, r3
 800a662:	4a04      	ldr	r2, [pc, #16]	; (800a674 <MOTOR_setAbsTarget+0x28>)
 800a664:	6053      	str	r3, [r2, #4]
}
 800a666:	bf00      	nop
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	20000c14 	.word	0x20000c14

0800a678 <MOTOR_getTarget>:

int32_t MOTOR_getTarget()
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
	return MOTOR_Model.target;
 800a67c:	4b03      	ldr	r3, [pc, #12]	; (800a68c <MOTOR_getTarget+0x14>)
 800a67e:	685b      	ldr	r3, [r3, #4]
}
 800a680:	4618      	mov	r0, r3
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	20000c14 	.word	0x20000c14

0800a690 <MOTOR_getPosDiff>:

int32_t MOTOR_getPosDiff()
{
 800a690:	b480      	push	{r7}
 800a692:	af00      	add	r7, sp, #0
	return /*MOTOR_Model.polarity * */ (MOTOR_Model.target - g_IncSteps);
 800a694:	4b04      	ldr	r3, [pc, #16]	; (800a6a8 <MOTOR_getPosDiff+0x18>)
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	4b04      	ldr	r3, [pc, #16]	; (800a6ac <MOTOR_getPosDiff+0x1c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	1ad3      	subs	r3, r2, r3
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	20000c14 	.word	0x20000c14
 800a6ac:	200006e4 	.word	0x200006e4

0800a6b0 <MT_reset>:
extern MotionCtrlDef_t     g_MotionCtrl;

MT_MotionDrive_t MotionDriveHandle;

void MT_reset()
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
	/*Initialize the profile parameters*/
	MT_setProfile(&g_NodeDriveProfile);
 800a6b4:	4805      	ldr	r0, [pc, #20]	; (800a6cc <MT_reset+0x1c>)
 800a6b6:	f000 f831 	bl	800a71c <MT_setProfile>

	MotionDriveHandle.prevControlword = 0;
 800a6ba:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <MT_reset+0x20>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	805a      	strh	r2, [r3, #2]
	MotionDriveHandle.mode = DS402_OperMode_NoMode;
 800a6c0:	4b03      	ldr	r3, [pc, #12]	; (800a6d0 <MT_reset+0x20>)
 800a6c2:	22ff      	movs	r2, #255	; 0xff
 800a6c4:	711a      	strb	r2, [r3, #4]
}
 800a6c6:	bf00      	nop
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	20000b94 	.word	0x20000b94
 800a6d0:	20000c24 	.word	0x20000c24

0800a6d4 <MT_begin>:

void MT_begin()
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	af00      	add	r7, sp, #0
	MT_reset();
 800a6d8:	f7ff ffea 	bl	800a6b0 <MT_reset>
	HAL_TIM_Base_Start_IT(&htim5);
 800a6dc:	4802      	ldr	r0, [pc, #8]	; (800a6e8 <MT_begin+0x14>)
 800a6de:	f006 fc52 	bl	8010f86 <HAL_TIM_Base_Start_IT>
}
 800a6e2:	bf00      	nop
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	2000087c 	.word	0x2000087c

0800a6ec <MT_loop>:

void MT_loop(uint32_t ticks)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	/*Synchronize the current steps*/
	g_MotionCtrl.currentPos = g_IncSteps;
 800a6f4:	4b07      	ldr	r3, [pc, #28]	; (800a714 <MT_loop+0x28>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a07      	ldr	r2, [pc, #28]	; (800a718 <MT_loop+0x2c>)
 800a6fa:	6053      	str	r3, [r2, #4]

	/*Synchronize the current velocity*/
	g_MotionCtrl.currentVel = MOTOR_getSpeed();
 800a6fc:	f7ff ff80 	bl	800a600 <MOTOR_getSpeed>
 800a700:	4603      	mov	r3, r0
 800a702:	4a05      	ldr	r2, [pc, #20]	; (800a718 <MT_loop+0x2c>)
 800a704:	6093      	str	r3, [r2, #8]

	/*Check motor status routine*/
	MOTOR_loop(ticks);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff ff32 	bl	800a570 <MOTOR_loop>
}
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	200006e4 	.word	0x200006e4
 800a718:	20000a44 	.word	0x20000a44

0800a71c <MT_setProfile>:

void MT_setProfile(Node_DriveProfile_t* profile)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
	MOTOR_setPolarity(-1);
 800a724:	f04f 30ff 	mov.w	r0, #4294967295
 800a728:	f7ff ff2c 	bl	800a584 <MOTOR_setPolarity>
	MOTOR_setAbsTarget(g_IncSteps);
 800a72c:	4b04      	ldr	r3, [pc, #16]	; (800a740 <MT_setProfile+0x24>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff ff8b 	bl	800a64c <MOTOR_setAbsTarget>
}
 800a736:	bf00      	nop
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	200006e4 	.word	0x200006e4

0800a744 <MT_init>:

void MT_init()
{
 800a744:	b580      	push	{r7, lr}
 800a746:	af00      	add	r7, sp, #0
	MT_reset();
 800a748:	f7ff ffb2 	bl	800a6b0 <MT_reset>

	/* Initialize position profile model*/
	PosProfile_Initialize();
 800a74c:	f001 f87a 	bl	800b844 <PosProfile_Initialize>

	/* Initialize pid profile*/
	PIDProfile_Initialize(0.49f, 1.21f, -0.28f, 1.76f);
 800a750:	eddf 1a05 	vldr	s3, [pc, #20]	; 800a768 <MT_init+0x24>
 800a754:	ed9f 1a05 	vldr	s2, [pc, #20]	; 800a76c <MT_init+0x28>
 800a758:	eddf 0a05 	vldr	s1, [pc, #20]	; 800a770 <MT_init+0x2c>
 800a75c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800a774 <MT_init+0x30>
 800a760:	f7ff fda6 	bl	800a2b0 <PIDProfile_Initialize>
}
 800a764:	bf00      	nop
 800a766:	bd80      	pop	{r7, pc}
 800a768:	3fe147ae 	.word	0x3fe147ae
 800a76c:	be8f5c29 	.word	0xbe8f5c29
 800a770:	3f9ae148 	.word	0x3f9ae148
 800a774:	3efae148 	.word	0x3efae148

0800a778 <MT_setMode>:
{
	return MotionDriveHandle.mode;
}

void MT_setMode(int8_t mode)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	4603      	mov	r3, r0
 800a780:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 800a782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d102      	bne.n	800a790 <MT_setMode+0x18>
	case DS402_OperMode_ProfilePosition:
		PP_active();
 800a78a:	f7fc fec1 	bl	8007510 <PP_active>
		break;
 800a78e:	bf00      	nop
	}
	MotionDriveHandle.mode = mode;
 800a790:	4a03      	ldr	r2, [pc, #12]	; (800a7a0 <MT_setMode+0x28>)
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	7113      	strb	r3, [r2, #4]
}
 800a796:	bf00      	nop
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20000c24 	.word	0x20000c24

0800a7a4 <MT_exec>:

void MT_exec(uint16_t controlword)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	80fb      	strh	r3, [r7, #6]
	switch(MotionDriveHandle.mode){
 800a7ae:	4b11      	ldr	r3, [pc, #68]	; (800a7f4 <MT_exec+0x50>)
 800a7b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d115      	bne.n	800a7e4 <MT_exec+0x40>
	case DS402_OperMode_ProfilePosition:{
		uint8_t setNewpoint = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73fb      	strb	r3, [r7, #15]
		if ((MotionDriveHandle.prevControlword & 0x10) == 0 && (controlword & 0x10))
 800a7bc:	4b0d      	ldr	r3, [pc, #52]	; (800a7f4 <MT_exec+0x50>)
 800a7be:	885b      	ldrh	r3, [r3, #2]
 800a7c0:	f003 0310 	and.w	r3, r3, #16
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d106      	bne.n	800a7d6 <MT_exec+0x32>
 800a7c8:	88fb      	ldrh	r3, [r7, #6]
 800a7ca:	f003 0310 	and.w	r3, r3, #16
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d001      	beq.n	800a7d6 <MT_exec+0x32>
			setNewpoint = 1;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	73fb      	strb	r3, [r7, #15]
		PP_exec(controlword, setNewpoint);
 800a7d6:	7bfa      	ldrb	r2, [r7, #15]
 800a7d8:	88fb      	ldrh	r3, [r7, #6]
 800a7da:	4611      	mov	r1, r2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fc ff4f 	bl	8007680 <PP_exec>
	}break;
 800a7e2:	bf00      	nop
	}
	MotionDriveHandle.prevControlword = controlword;
 800a7e4:	4a03      	ldr	r2, [pc, #12]	; (800a7f4 <MT_exec+0x50>)
 800a7e6:	88fb      	ldrh	r3, [r7, #6]
 800a7e8:	8053      	strh	r3, [r2, #2]
}
 800a7ea:	bf00      	nop
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000c24 	.word	0x20000c24

0800a7f8 <MT_process_v3>:

void MT_process_v3(uint32_t ticks)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
	switch(MotionDriveHandle.mode){
 800a800:	4b06      	ldr	r3, [pc, #24]	; (800a81c <MT_process_v3+0x24>)
 800a802:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d103      	bne.n	800a812 <MT_process_v3+0x1a>
	case DS402_OperMode_ProfilePosition:
		PP_process(ticks);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7fd f96c 	bl	8007ae8 <PP_process>
		break;
 800a810:	bf00      	nop
	}
}
 800a812:	bf00      	nop
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20000c24 	.word	0x20000c24

0800a820 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetInf(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800a826:	2340      	movs	r3, #64	; 0x40
 800a828:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800a82a:	f04f 0200 	mov.w	r2, #0
 800a82e:	f04f 0300 	mov.w	r3, #0
 800a832:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b20      	cmp	r3, #32
 800a83a:	d10b      	bne.n	800a854 <rtGetInf+0x34>
    inf = rtGetInfF();
 800a83c:	f000 f820 	bl	800a880 <rtGetInfF>
 800a840:	ee10 3a10 	vmov	r3, s0
 800a844:	4618      	mov	r0, r3
 800a846:	f7f5 fe7f 	bl	8000548 <__aeabi_f2d>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800a852:	e007      	b.n	800a864 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800a854:	4b09      	ldr	r3, [pc, #36]	; (800a87c <rtGetInf+0x5c>)
 800a856:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800a858:	2300      	movs	r3, #0
 800a85a:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800a85c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a860:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800a864:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a868:	ec43 2b17 	vmov	d7, r2, r3
}
 800a86c:	eeb0 0a47 	vmov.f32	s0, s14
 800a870:	eef0 0a67 	vmov.f32	s1, s15
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	7ff00000 	.word	0x7ff00000

0800a880 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetInfF(void)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800a886:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800a88a:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	ee07 3a90 	vmov	s15, r3
}
 800a892:	eeb0 0a67 	vmov.f32	s0, s15
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetMinusInf(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800a8a6:	2340      	movs	r3, #64	; 0x40
 800a8a8:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800a8aa:	f04f 0200 	mov.w	r2, #0
 800a8ae:	f04f 0300 	mov.w	r3, #0
 800a8b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	d10b      	bne.n	800a8d4 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800a8bc:	f000 f820 	bl	800a900 <rtGetMinusInfF>
 800a8c0:	ee10 3a10 	vmov	r3, s0
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7f5 fe3f 	bl	8000548 <__aeabi_f2d>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800a8d2:	e007      	b.n	800a8e4 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800a8d4:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <rtGetMinusInf+0x5c>)
 800a8d6:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800a8dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800a8e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a8e8:	ec43 2b17 	vmov	d7, r2, r3
}
 800a8ec:	eeb0 0a47 	vmov.f32	s0, s14
 800a8f0:	eef0 0a67 	vmov.f32	s1, s15
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	fff00000 	.word	0xfff00000

0800a900 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetMinusInfF(void)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800a906:	4b06      	ldr	r3, [pc, #24]	; (800a920 <rtGetMinusInfF+0x20>)
 800a908:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	ee07 3a90 	vmov	s15, r3
}
 800a910:	eeb0 0a67 	vmov.f32	s0, s15
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	ff800000 	.word	0xff800000

0800a924 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetNaN(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800a92a:	2340      	movs	r3, #64	; 0x40
 800a92c:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800a92e:	f04f 0200 	mov.w	r2, #0
 800a932:	f04f 0300 	mov.w	r3, #0
 800a936:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2b20      	cmp	r3, #32
 800a93e:	d10b      	bne.n	800a958 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800a940:	f000 f820 	bl	800a984 <rtGetNaNF>
 800a944:	ee10 3a10 	vmov	r3, s0
 800a948:	4618      	mov	r0, r3
 800a94a:	f7f5 fdfd 	bl	8000548 <__aeabi_f2d>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800a956:	e007      	b.n	800a968 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800a958:	4b09      	ldr	r3, [pc, #36]	; (800a980 <rtGetNaN+0x5c>)
 800a95a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800a95c:	2300      	movs	r3, #0
 800a95e:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800a960:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a964:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800a968:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a96c:	ec43 2b17 	vmov	d7, r2, r3
}
 800a970:	eeb0 0a47 	vmov.f32	s0, s14
 800a974:	eef0 0a67 	vmov.f32	s1, s15
 800a978:	3718      	adds	r7, #24
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	fff80000 	.word	0xfff80000

0800a984 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetNaNF(void)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800a98a:	f04f 0300 	mov.w	r3, #0
 800a98e:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800a990:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <rtGetNaNF+0x24>)
 800a992:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	ee07 3a90 	vmov	s15, r3
}
 800a99a:	eeb0 0a67 	vmov.f32	s0, s15
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	ffc00000 	.word	0xffc00000

0800a9ac <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
static void rt_InitInfAndNaN(size_t realSize)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800a9b4:	f7ff ffb6 	bl	800a924 <rtGetNaN>
 800a9b8:	eeb0 7a40 	vmov.f32	s14, s0
 800a9bc:	eef0 7a60 	vmov.f32	s15, s1
 800a9c0:	4b16      	ldr	r3, [pc, #88]	; (800aa1c <rt_InitInfAndNaN+0x70>)
 800a9c2:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800a9c6:	f7ff ffdd 	bl	800a984 <rtGetNaNF>
 800a9ca:	eef0 7a40 	vmov.f32	s15, s0
 800a9ce:	4b14      	ldr	r3, [pc, #80]	; (800aa20 <rt_InitInfAndNaN+0x74>)
 800a9d0:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800a9d4:	f7ff ff24 	bl	800a820 <rtGetInf>
 800a9d8:	eeb0 7a40 	vmov.f32	s14, s0
 800a9dc:	eef0 7a60 	vmov.f32	s15, s1
 800a9e0:	4b10      	ldr	r3, [pc, #64]	; (800aa24 <rt_InitInfAndNaN+0x78>)
 800a9e2:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800a9e6:	f7ff ff4b 	bl	800a880 <rtGetInfF>
 800a9ea:	eef0 7a40 	vmov.f32	s15, s0
 800a9ee:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <rt_InitInfAndNaN+0x7c>)
 800a9f0:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800a9f4:	f7ff ff54 	bl	800a8a0 <rtGetMinusInf>
 800a9f8:	eeb0 7a40 	vmov.f32	s14, s0
 800a9fc:	eef0 7a60 	vmov.f32	s15, s1
 800aa00:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <rt_InitInfAndNaN+0x80>)
 800aa02:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800aa06:	f7ff ff7b 	bl	800a900 <rtGetMinusInfF>
 800aa0a:	eef0 7a40 	vmov.f32	s15, s0
 800aa0e:	4b08      	ldr	r3, [pc, #32]	; (800aa30 <rt_InitInfAndNaN+0x84>)
 800aa10:	edc3 7a00 	vstr	s15, [r3]
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000cc8 	.word	0x20000cc8
 800aa20:	20000cd8 	.word	0x20000cd8
 800aa24:	20000cb8 	.word	0x20000cb8
 800aa28:	20000cd0 	.word	0x20000cd0
 800aa2c:	20000cc0 	.word	0x20000cc0
 800aa30:	20000cd4 	.word	0x20000cd4

0800aa34 <PosProfile_Step>:
  return y;
}

/* Model step function */
void PosProfile_Step(real32_T curPos)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T jerk = 0.0f;
 800aa3e:	f04f 0300 	mov.w	r3, #0
 800aa42:	60fb      	str	r3, [r7, #12]

  /* DiscreteIntegrator: '<S1>/Pos Integrator' incorporates:
   *  Inport: '<Root>/InitPos'
   */
  if (rtDW.PosIntegrator_IC_LOADING != 0) {
 800aa44:	4ba2      	ldr	r3, [pc, #648]	; (800acd0 <PosProfile_Step+0x29c>)
 800aa46:	7d1b      	ldrb	r3, [r3, #20]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d003      	beq.n	800aa54 <PosProfile_Step+0x20>
    rtDW.PosIntegrator_DSTATE = rtU.InitPos;
 800aa4c:	4ba1      	ldr	r3, [pc, #644]	; (800acd4 <PosProfile_Step+0x2a0>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a9f      	ldr	r2, [pc, #636]	; (800acd0 <PosProfile_Step+0x29c>)
 800aa52:	6013      	str	r3, [r2, #0]
  }

  /* Outport: '<Root>/CmdPos' incorporates:
   *  DiscreteIntegrator: '<S1>/Pos Integrator'
   */
  rtY.CmdPos = rtDW.PosIntegrator_DSTATE;
 800aa54:	4b9e      	ldr	r3, [pc, #632]	; (800acd0 <PosProfile_Step+0x29c>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a9f      	ldr	r2, [pc, #636]	; (800acd8 <PosProfile_Step+0x2a4>)
 800aa5a:	6013      	str	r3, [r2, #0]

  /* DiscreteIntegrator: '<S1>/Vel Integrator' incorporates:
   *  Inport: '<Root>/InitVel'
   */
  if (rtDW.VelIntegrator_IC_LOADING != 0) {
 800aa5c:	4b9c      	ldr	r3, [pc, #624]	; (800acd0 <PosProfile_Step+0x29c>)
 800aa5e:	7d5b      	ldrb	r3, [r3, #21]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <PosProfile_Step+0x38>
    rtDW.VelIntegrator_DSTATE = rtU.InitVel;
 800aa64:	4b9b      	ldr	r3, [pc, #620]	; (800acd4 <PosProfile_Step+0x2a0>)
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	4a99      	ldr	r2, [pc, #612]	; (800acd0 <PosProfile_Step+0x29c>)
 800aa6a:	6053      	str	r3, [r2, #4]
  }

  /* Outport: '<Root>/CmdVel' incorporates:
   *  DiscreteIntegrator: '<S1>/Vel Integrator'
   */
  rtY.CmdVel = rtDW.VelIntegrator_DSTATE;
 800aa6c:	4b98      	ldr	r3, [pc, #608]	; (800acd0 <PosProfile_Step+0x29c>)
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	4a99      	ldr	r2, [pc, #612]	; (800acd8 <PosProfile_Step+0x2a4>)
 800aa72:	6053      	str	r3, [r2, #4]

  /* Update for DiscreteIntegrator: '<S1>/Pos Integrator' incorporates:
   *  DiscreteIntegrator: '<S1>/Vel Integrator'
   */
  rtDW.PosIntegrator_IC_LOADING = 0U;
 800aa74:	4b96      	ldr	r3, [pc, #600]	; (800acd0 <PosProfile_Step+0x29c>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	751a      	strb	r2, [r3, #20]
  rtDW.PosIntegrator_DSTATE += rtU.Ts * rtDW.VelIntegrator_DSTATE;
 800aa7a:	4b95      	ldr	r3, [pc, #596]	; (800acd0 <PosProfile_Step+0x29c>)
 800aa7c:	ed93 7a00 	vldr	s14, [r3]
 800aa80:	4b94      	ldr	r3, [pc, #592]	; (800acd4 <PosProfile_Step+0x2a0>)
 800aa82:	edd3 6a07 	vldr	s13, [r3, #28]
 800aa86:	4b92      	ldr	r3, [pc, #584]	; (800acd0 <PosProfile_Step+0x29c>)
 800aa88:	edd3 7a01 	vldr	s15, [r3, #4]
 800aa8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa94:	4b8e      	ldr	r3, [pc, #568]	; (800acd0 <PosProfile_Step+0x29c>)
 800aa96:	edc3 7a00 	vstr	s15, [r3]

  /* Update for DiscreteIntegrator: '<S1>/Vel Integrator' incorporates:
   *  DiscreteIntegrator: '<S1>/Acce Integrator'
   */
  rtDW.VelIntegrator_IC_LOADING = 0U;
 800aa9a:	4b8d      	ldr	r3, [pc, #564]	; (800acd0 <PosProfile_Step+0x29c>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	755a      	strb	r2, [r3, #21]
  rtDW.VelIntegrator_DSTATE += rtU.Ts * rtDW.AcceIntegrator_DSTATE;
 800aaa0:	4b8b      	ldr	r3, [pc, #556]	; (800acd0 <PosProfile_Step+0x29c>)
 800aaa2:	ed93 7a01 	vldr	s14, [r3, #4]
 800aaa6:	4b8b      	ldr	r3, [pc, #556]	; (800acd4 <PosProfile_Step+0x2a0>)
 800aaa8:	edd3 6a07 	vldr	s13, [r3, #28]
 800aaac:	4b88      	ldr	r3, [pc, #544]	; (800acd0 <PosProfile_Step+0x29c>)
 800aaae:	edd3 7a02 	vldr	s15, [r3, #8]
 800aab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaba:	4b85      	ldr	r3, [pc, #532]	; (800acd0 <PosProfile_Step+0x29c>)
 800aabc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Correct velocity*/

  if (!rtDW.t_not_empty) {
 800aac0:	4b83      	ldr	r3, [pc, #524]	; (800acd0 <PosProfile_Step+0x29c>)
 800aac2:	7d9b      	ldrb	r3, [r3, #22]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10d      	bne.n	800aae4 <PosProfile_Step+0xb0>
      rtDW.t = rtU.Ts / 2.0F;
 800aac8:	4b82      	ldr	r3, [pc, #520]	; (800acd4 <PosProfile_Step+0x2a0>)
 800aaca:	ed93 7a07 	vldr	s14, [r3, #28]
 800aace:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800aad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aad6:	4b7e      	ldr	r3, [pc, #504]	; (800acd0 <PosProfile_Step+0x29c>)
 800aad8:	edc3 7a03 	vstr	s15, [r3, #12]
      rtDW.t_not_empty = true;
 800aadc:	4b7c      	ldr	r3, [pc, #496]	; (800acd0 <PosProfile_Step+0x29c>)
 800aade:	2201      	movs	r2, #1
 800aae0:	759a      	strb	r2, [r3, #22]
 800aae2:	e00a      	b.n	800aafa <PosProfile_Step+0xc6>
  } else {
      rtDW.t += rtU.Ts;
 800aae4:	4b7a      	ldr	r3, [pc, #488]	; (800acd0 <PosProfile_Step+0x29c>)
 800aae6:	ed93 7a03 	vldr	s14, [r3, #12]
 800aaea:	4b7a      	ldr	r3, [pc, #488]	; (800acd4 <PosProfile_Step+0x2a0>)
 800aaec:	edd3 7a07 	vldr	s15, [r3, #28]
 800aaf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaf4:	4b76      	ldr	r3, [pc, #472]	; (800acd0 <PosProfile_Step+0x29c>)
 800aaf6:	edc3 7a03 	vstr	s15, [r3, #12]

  /* MATLAB Function: '<S1>/ppmode' incorporates:
   *  Inport: '<Root>/MaxJerk'
   */

  if (rtDW.t >= 0.0F && rtDW.t < PosPPhase[0].timing.Tj1){
 800aafa:	4b75      	ldr	r3, [pc, #468]	; (800acd0 <PosProfile_Step+0x29c>)
 800aafc:	edd3 7a03 	vldr	s15, [r3, #12]
 800ab00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ab04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab08:	db17      	blt.n	800ab3a <PosProfile_Step+0x106>
 800ab0a:	4b71      	ldr	r3, [pc, #452]	; (800acd0 <PosProfile_Step+0x29c>)
 800ab0c:	ed93 7a03 	vldr	s14, [r3, #12]
 800ab10:	4b72      	ldr	r3, [pc, #456]	; (800acdc <PosProfile_Step+0x2a8>)
 800ab12:	edd3 7a03 	vldr	s15, [r3, #12]
 800ab16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1e:	d50c      	bpl.n	800ab3a <PosProfile_Step+0x106>
	  /* Phase 0 - 1*/
	  jerk = -1.0f * PosPPhase[0].dir * rtU.MaxJerk;
 800ab20:	4b6e      	ldr	r3, [pc, #440]	; (800acdc <PosProfile_Step+0x2a8>)
 800ab22:	edd3 7a08 	vldr	s15, [r3, #32]
 800ab26:	eeb1 7a67 	vneg.f32	s14, s15
 800ab2a:	4b6a      	ldr	r3, [pc, #424]	; (800acd4 <PosProfile_Step+0x2a0>)
 800ab2c:	edd3 7a06 	vldr	s15, [r3, #24]
 800ab30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab34:	edc7 7a03 	vstr	s15, [r7, #12]
 800ab38:	e174      	b.n	800ae24 <PosProfile_Step+0x3f0>
  } else if (rtDW.t >= PosPPhase[0].timing.Tj1 && rtDW.t < PosPPhase[0].timing.Ta){
 800ab3a:	4b65      	ldr	r3, [pc, #404]	; (800acd0 <PosProfile_Step+0x29c>)
 800ab3c:	ed93 7a03 	vldr	s14, [r3, #12]
 800ab40:	4b66      	ldr	r3, [pc, #408]	; (800acdc <PosProfile_Step+0x2a8>)
 800ab42:	edd3 7a03 	vldr	s15, [r3, #12]
 800ab46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4e:	db15      	blt.n	800ab7c <PosProfile_Step+0x148>
 800ab50:	4b5f      	ldr	r3, [pc, #380]	; (800acd0 <PosProfile_Step+0x29c>)
 800ab52:	ed93 7a03 	vldr	s14, [r3, #12]
 800ab56:	4b61      	ldr	r3, [pc, #388]	; (800acdc <PosProfile_Step+0x2a8>)
 800ab58:	edd3 7a02 	vldr	s15, [r3, #8]
 800ab5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab64:	d50a      	bpl.n	800ab7c <PosProfile_Step+0x148>
	  /* Phase 0 - 2*/
	  jerk = PosPPhase[0].dir * rtU.MaxJerk;
 800ab66:	4b5d      	ldr	r3, [pc, #372]	; (800acdc <PosProfile_Step+0x2a8>)
 800ab68:	ed93 7a08 	vldr	s14, [r3, #32]
 800ab6c:	4b59      	ldr	r3, [pc, #356]	; (800acd4 <PosProfile_Step+0x2a0>)
 800ab6e:	edd3 7a06 	vldr	s15, [r3, #24]
 800ab72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab76:	edc7 7a03 	vstr	s15, [r7, #12]
 800ab7a:	e153      	b.n	800ae24 <PosProfile_Step+0x3f0>
  } else if ((rtDW.t >= PosPPhase[0].timing.Ta) && (rtDW.t < PosPPhase[0].timing.T + PosPPhase[1].timing.Tj1)) {
 800ab7c:	4b54      	ldr	r3, [pc, #336]	; (800acd0 <PosProfile_Step+0x29c>)
 800ab7e:	ed93 7a03 	vldr	s14, [r3, #12]
 800ab82:	4b56      	ldr	r3, [pc, #344]	; (800acdc <PosProfile_Step+0x2a8>)
 800ab84:	edd3 7a02 	vldr	s15, [r3, #8]
 800ab88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab90:	db1a      	blt.n	800abc8 <PosProfile_Step+0x194>
 800ab92:	4b4f      	ldr	r3, [pc, #316]	; (800acd0 <PosProfile_Step+0x29c>)
 800ab94:	ed93 7a03 	vldr	s14, [r3, #12]
 800ab98:	4b50      	ldr	r3, [pc, #320]	; (800acdc <PosProfile_Step+0x2a8>)
 800ab9a:	edd3 6a00 	vldr	s13, [r3]
 800ab9e:	4b4f      	ldr	r3, [pc, #316]	; (800acdc <PosProfile_Step+0x2a8>)
 800aba0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800aba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb0:	d50a      	bpl.n	800abc8 <PosProfile_Step+0x194>
	  /*Phase 1 - 1*/
	  jerk = PosPPhase[1].dir * rtU.MaxJerk;
 800abb2:	4b4a      	ldr	r3, [pc, #296]	; (800acdc <PosProfile_Step+0x2a8>)
 800abb4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800abb8:	4b46      	ldr	r3, [pc, #280]	; (800acd4 <PosProfile_Step+0x2a0>)
 800abba:	edd3 7a06 	vldr	s15, [r3, #24]
 800abbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc2:	edc7 7a03 	vstr	s15, [r7, #12]
 800abc6:	e12d      	b.n	800ae24 <PosProfile_Step+0x3f0>
  } else if ((rtDW.t >= PosPPhase[0].timing.T + PosPPhase[1].timing.Tj1) && (rtDW.t < (PosPPhase[0].timing.T + PosPPhase[1].timing.Ta - PosPPhase[1].timing.Tj1))) {
 800abc8:	4b41      	ldr	r3, [pc, #260]	; (800acd0 <PosProfile_Step+0x29c>)
 800abca:	ed93 7a03 	vldr	s14, [r3, #12]
 800abce:	4b43      	ldr	r3, [pc, #268]	; (800acdc <PosProfile_Step+0x2a8>)
 800abd0:	edd3 6a00 	vldr	s13, [r3]
 800abd4:	4b41      	ldr	r3, [pc, #260]	; (800acdc <PosProfile_Step+0x2a8>)
 800abd6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800abda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe6:	db18      	blt.n	800ac1a <PosProfile_Step+0x1e6>
 800abe8:	4b39      	ldr	r3, [pc, #228]	; (800acd0 <PosProfile_Step+0x29c>)
 800abea:	ed93 7a03 	vldr	s14, [r3, #12]
 800abee:	4b3b      	ldr	r3, [pc, #236]	; (800acdc <PosProfile_Step+0x2a8>)
 800abf0:	edd3 6a00 	vldr	s13, [r3]
 800abf4:	4b39      	ldr	r3, [pc, #228]	; (800acdc <PosProfile_Step+0x2a8>)
 800abf6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800abfa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800abfe:	4b37      	ldr	r3, [pc, #220]	; (800acdc <PosProfile_Step+0x2a8>)
 800ac00:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ac04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ac08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac10:	d503      	bpl.n	800ac1a <PosProfile_Step+0x1e6>
	  /*Phase 1 - 2*/
	  jerk = 0.0F;
 800ac12:	f04f 0300 	mov.w	r3, #0
 800ac16:	60fb      	str	r3, [r7, #12]
 800ac18:	e104      	b.n	800ae24 <PosProfile_Step+0x3f0>
  } else if ((rtDW.t >= (PosPPhase[0].timing.T + PosPPhase[1].timing.Ta - PosPPhase[1].timing.Tj1)) && (rtDW.t < PosPPhase[0].timing.T + PosPPhase[1].timing.Ta)) {
 800ac1a:	4b2d      	ldr	r3, [pc, #180]	; (800acd0 <PosProfile_Step+0x29c>)
 800ac1c:	ed93 7a03 	vldr	s14, [r3, #12]
 800ac20:	4b2e      	ldr	r3, [pc, #184]	; (800acdc <PosProfile_Step+0x2a8>)
 800ac22:	edd3 6a00 	vldr	s13, [r3]
 800ac26:	4b2d      	ldr	r3, [pc, #180]	; (800acdc <PosProfile_Step+0x2a8>)
 800ac28:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800ac2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ac30:	4b2a      	ldr	r3, [pc, #168]	; (800acdc <PosProfile_Step+0x2a8>)
 800ac32:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ac36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ac3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac42:	db1c      	blt.n	800ac7e <PosProfile_Step+0x24a>
 800ac44:	4b22      	ldr	r3, [pc, #136]	; (800acd0 <PosProfile_Step+0x29c>)
 800ac46:	ed93 7a03 	vldr	s14, [r3, #12]
 800ac4a:	4b24      	ldr	r3, [pc, #144]	; (800acdc <PosProfile_Step+0x2a8>)
 800ac4c:	edd3 6a00 	vldr	s13, [r3]
 800ac50:	4b22      	ldr	r3, [pc, #136]	; (800acdc <PosProfile_Step+0x2a8>)
 800ac52:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800ac56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac62:	d50c      	bpl.n	800ac7e <PosProfile_Step+0x24a>
	  /*Phase 1 - 3*/
	  jerk = -1.0F * PosPPhase[1].dir * rtU.MaxJerk;
 800ac64:	4b1d      	ldr	r3, [pc, #116]	; (800acdc <PosProfile_Step+0x2a8>)
 800ac66:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800ac6a:	eeb1 7a67 	vneg.f32	s14, s15
 800ac6e:	4b19      	ldr	r3, [pc, #100]	; (800acd4 <PosProfile_Step+0x2a0>)
 800ac70:	edd3 7a06 	vldr	s15, [r3, #24]
 800ac74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac78:	edc7 7a03 	vstr	s15, [r7, #12]
 800ac7c:	e0d2      	b.n	800ae24 <PosProfile_Step+0x3f0>
  } else if ((rtDW.t >= PosPPhase[0].timing.T + PosPPhase[1].timing.Ta) && (rtDW.t < PosPPhase[0].timing.T + PosPPhase[1].timing.Ta + PosPPhase[1].timing.Tv)) {
 800ac7e:	4b14      	ldr	r3, [pc, #80]	; (800acd0 <PosProfile_Step+0x29c>)
 800ac80:	ed93 7a03 	vldr	s14, [r3, #12]
 800ac84:	4b15      	ldr	r3, [pc, #84]	; (800acdc <PosProfile_Step+0x2a8>)
 800ac86:	edd3 6a00 	vldr	s13, [r3]
 800ac8a:	4b14      	ldr	r3, [pc, #80]	; (800acdc <PosProfile_Step+0x2a8>)
 800ac8c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800ac90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9c:	db20      	blt.n	800ace0 <PosProfile_Step+0x2ac>
 800ac9e:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <PosProfile_Step+0x29c>)
 800aca0:	ed93 7a03 	vldr	s14, [r3, #12]
 800aca4:	4b0d      	ldr	r3, [pc, #52]	; (800acdc <PosProfile_Step+0x2a8>)
 800aca6:	edd3 6a00 	vldr	s13, [r3]
 800acaa:	4b0c      	ldr	r3, [pc, #48]	; (800acdc <PosProfile_Step+0x2a8>)
 800acac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800acb0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800acb4:	4b09      	ldr	r3, [pc, #36]	; (800acdc <PosProfile_Step+0x2a8>)
 800acb6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800acba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800acc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc6:	d50b      	bpl.n	800ace0 <PosProfile_Step+0x2ac>
	  /*Phase 1 - 4*/
	  jerk = 0.0F;
 800acc8:	f04f 0300 	mov.w	r3, #0
 800accc:	60fb      	str	r3, [r7, #12]
 800acce:	e0a9      	b.n	800ae24 <PosProfile_Step+0x3f0>
 800acd0:	20000c2c 	.word	0x20000c2c
 800acd4:	20000c44 	.word	0x20000c44
 800acd8:	20000c64 	.word	0x20000c64
 800acdc:	20000c6c 	.word	0x20000c6c
  } else if ((rtDW.t >= (PosPPhase[0].timing.T + PosPPhase[1].timing.T - PosPPhase[1].timing.Td)) && (rtDW.t < (PosPPhase[0].timing.T + PosPPhase[1].timing.T - PosPPhase[1].timing.Td + PosPPhase[1].timing.Tj2))){
 800ace0:	4b5b      	ldr	r3, [pc, #364]	; (800ae50 <PosProfile_Step+0x41c>)
 800ace2:	ed93 7a03 	vldr	s14, [r3, #12]
 800ace6:	4b5b      	ldr	r3, [pc, #364]	; (800ae54 <PosProfile_Step+0x420>)
 800ace8:	edd3 6a00 	vldr	s13, [r3]
 800acec:	4b59      	ldr	r3, [pc, #356]	; (800ae54 <PosProfile_Step+0x420>)
 800acee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800acf2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800acf6:	4b57      	ldr	r3, [pc, #348]	; (800ae54 <PosProfile_Step+0x420>)
 800acf8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800acfc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ad00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad08:	db26      	blt.n	800ad58 <PosProfile_Step+0x324>
 800ad0a:	4b51      	ldr	r3, [pc, #324]	; (800ae50 <PosProfile_Step+0x41c>)
 800ad0c:	ed93 7a03 	vldr	s14, [r3, #12]
 800ad10:	4b50      	ldr	r3, [pc, #320]	; (800ae54 <PosProfile_Step+0x420>)
 800ad12:	edd3 6a00 	vldr	s13, [r3]
 800ad16:	4b4f      	ldr	r3, [pc, #316]	; (800ae54 <PosProfile_Step+0x420>)
 800ad18:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ad1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ad20:	4b4c      	ldr	r3, [pc, #304]	; (800ae54 <PosProfile_Step+0x420>)
 800ad22:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ad26:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ad2a:	4b4a      	ldr	r3, [pc, #296]	; (800ae54 <PosProfile_Step+0x420>)
 800ad2c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ad30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad3c:	d50c      	bpl.n	800ad58 <PosProfile_Step+0x324>
	  /*Phase 1 - 5*/
	  jerk = -1.0F * PosPPhase[1].dir * rtU.MaxJerk;
 800ad3e:	4b45      	ldr	r3, [pc, #276]	; (800ae54 <PosProfile_Step+0x420>)
 800ad40:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800ad44:	eeb1 7a67 	vneg.f32	s14, s15
 800ad48:	4b43      	ldr	r3, [pc, #268]	; (800ae58 <PosProfile_Step+0x424>)
 800ad4a:	edd3 7a06 	vldr	s15, [r3, #24]
 800ad4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad52:	edc7 7a03 	vstr	s15, [r7, #12]
 800ad56:	e065      	b.n	800ae24 <PosProfile_Step+0x3f0>
  } else if ((rtDW.t >= (PosPPhase[0].timing.T + PosPPhase[1].timing.T - PosPPhase[1].timing.Td + PosPPhase[1].timing.Tj2)) && (rtDW.t < (PosPPhase[0].timing.T + PosPPhase[1].timing.T - PosPPhase[1].timing.Tj2))) {
 800ad58:	4b3d      	ldr	r3, [pc, #244]	; (800ae50 <PosProfile_Step+0x41c>)
 800ad5a:	ed93 7a03 	vldr	s14, [r3, #12]
 800ad5e:	4b3d      	ldr	r3, [pc, #244]	; (800ae54 <PosProfile_Step+0x420>)
 800ad60:	edd3 6a00 	vldr	s13, [r3]
 800ad64:	4b3b      	ldr	r3, [pc, #236]	; (800ae54 <PosProfile_Step+0x420>)
 800ad66:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ad6a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ad6e:	4b39      	ldr	r3, [pc, #228]	; (800ae54 <PosProfile_Step+0x420>)
 800ad70:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ad74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ad78:	4b36      	ldr	r3, [pc, #216]	; (800ae54 <PosProfile_Step+0x420>)
 800ad7a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ad7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad8a:	db18      	blt.n	800adbe <PosProfile_Step+0x38a>
 800ad8c:	4b30      	ldr	r3, [pc, #192]	; (800ae50 <PosProfile_Step+0x41c>)
 800ad8e:	ed93 7a03 	vldr	s14, [r3, #12]
 800ad92:	4b30      	ldr	r3, [pc, #192]	; (800ae54 <PosProfile_Step+0x420>)
 800ad94:	edd3 6a00 	vldr	s13, [r3]
 800ad98:	4b2e      	ldr	r3, [pc, #184]	; (800ae54 <PosProfile_Step+0x420>)
 800ad9a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ad9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ada2:	4b2c      	ldr	r3, [pc, #176]	; (800ae54 <PosProfile_Step+0x420>)
 800ada4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ada8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800adac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb4:	d503      	bpl.n	800adbe <PosProfile_Step+0x38a>
	  /*Phase 1 - 6*/
	  jerk = 0.0F;
 800adb6:	f04f 0300 	mov.w	r3, #0
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	e032      	b.n	800ae24 <PosProfile_Step+0x3f0>
  } else if (rtDW.t >= (PosPPhase[0].timing.T + PosPPhase[1].timing.T - PosPPhase[1].timing.Tj2) && rtDW.t < PosPPhase[0].timing.T + PosPPhase[1].timing.T) {
 800adbe:	4b24      	ldr	r3, [pc, #144]	; (800ae50 <PosProfile_Step+0x41c>)
 800adc0:	ed93 7a03 	vldr	s14, [r3, #12]
 800adc4:	4b23      	ldr	r3, [pc, #140]	; (800ae54 <PosProfile_Step+0x420>)
 800adc6:	edd3 6a00 	vldr	s13, [r3]
 800adca:	4b22      	ldr	r3, [pc, #136]	; (800ae54 <PosProfile_Step+0x420>)
 800adcc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800add0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800add4:	4b1f      	ldr	r3, [pc, #124]	; (800ae54 <PosProfile_Step+0x420>)
 800add6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800adda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800adde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ade2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade6:	db1a      	blt.n	800ae1e <PosProfile_Step+0x3ea>
 800ade8:	4b19      	ldr	r3, [pc, #100]	; (800ae50 <PosProfile_Step+0x41c>)
 800adea:	ed93 7a03 	vldr	s14, [r3, #12]
 800adee:	4b19      	ldr	r3, [pc, #100]	; (800ae54 <PosProfile_Step+0x420>)
 800adf0:	edd3 6a00 	vldr	s13, [r3]
 800adf4:	4b17      	ldr	r3, [pc, #92]	; (800ae54 <PosProfile_Step+0x420>)
 800adf6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800adfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae06:	d50a      	bpl.n	800ae1e <PosProfile_Step+0x3ea>
	  /*Phase 1 - 7*/
	  jerk = PosPPhase[1].dir * rtU.MaxJerk;
 800ae08:	4b12      	ldr	r3, [pc, #72]	; (800ae54 <PosProfile_Step+0x420>)
 800ae0a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800ae0e:	4b12      	ldr	r3, [pc, #72]	; (800ae58 <PosProfile_Step+0x424>)
 800ae10:	edd3 7a06 	vldr	s15, [r3, #24]
 800ae14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae18:	edc7 7a03 	vstr	s15, [r7, #12]
 800ae1c:	e002      	b.n	800ae24 <PosProfile_Step+0x3f0>
  } else {
	  /*Phase end*/
	  jerk = 0.0F;
 800ae1e:	f04f 0300 	mov.w	r3, #0
 800ae22:	60fb      	str	r3, [r7, #12]
  }

  /* Update for DiscreteIntegrator: '<S1>/Acce Integrator' */
  rtDW.AcceIntegrator_DSTATE += rtU.Ts * jerk;
 800ae24:	4b0a      	ldr	r3, [pc, #40]	; (800ae50 <PosProfile_Step+0x41c>)
 800ae26:	ed93 7a02 	vldr	s14, [r3, #8]
 800ae2a:	4b0b      	ldr	r3, [pc, #44]	; (800ae58 <PosProfile_Step+0x424>)
 800ae2c:	edd3 6a07 	vldr	s13, [r3, #28]
 800ae30:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae3c:	4b04      	ldr	r3, [pc, #16]	; (800ae50 <PosProfile_Step+0x41c>)
 800ae3e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800ae42:	bf00      	nop
 800ae44:	3714      	adds	r7, #20
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	20000c2c 	.word	0x20000c2c
 800ae54:	20000c6c 	.word	0x20000c6c
 800ae58:	20000c44 	.word	0x20000c44

0800ae5c <PosProfile_CalcPhase1Timing>:

void PosProfile_CalcPhase1Timing(real32_T distance, real32_T curVel, real32_T targetVel, real32_T maxVel, real32_T maxAcce, real32_T jerk)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	ed2d 8b02 	vpush	{d8}
 800ae62:	b094      	sub	sp, #80	; 0x50
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	ed87 0a05 	vstr	s0, [r7, #20]
 800ae6a:	edc7 0a04 	vstr	s1, [r7, #16]
 800ae6e:	ed87 1a03 	vstr	s2, [r7, #12]
 800ae72:	edc7 1a02 	vstr	s3, [r7, #8]
 800ae76:	ed87 2a01 	vstr	s4, [r7, #4]
 800ae7a:	edc7 2a00 	vstr	s5, [r7]
   *  Inport: '<Root>/MaxVel'
   *  Inport: '<Root>/TargetPos'
   *  Inport: '<Root>/TargetVel'
   *  Inport: '<Root>/Ts'
   */
  amax = maxAcce;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	64fb      	str	r3, [r7, #76]	; 0x4c

  velminus = maxVel - curVel;
 800ae82:	ed97 7a02 	vldr	s14, [r7, #8]
 800ae86:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae8e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  Ta_tmp = maxAcce * maxAcce;
 800ae92:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ae9a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (velminus * jerk < Ta_tmp) {
 800ae9e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800aea2:	edd7 7a00 	vldr	s15, [r7]
 800aea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeaa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800aeae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb6:	dd29      	ble.n	800af0c <PosProfile_CalcPhase1Timing+0xb0>
	if (curVel > maxVel) {
 800aeb8:	ed97 7a04 	vldr	s14, [r7, #16]
 800aebc:	edd7 7a02 	vldr	s15, [r7, #8]
 800aec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec8:	dd08      	ble.n	800aedc <PosProfile_CalcPhase1Timing+0x80>
	  PosPPhase[1].timing.Tj1 = 0.0f;
 800aeca:	4bd8      	ldr	r3, [pc, #864]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800aecc:	f04f 0200 	mov.w	r2, #0
 800aed0:	631a      	str	r2, [r3, #48]	; 0x30
	  PosPPhase[1].timing.Ta = 0.0F;
 800aed2:	4bd6      	ldr	r3, [pc, #856]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800aed4:	f04f 0200 	mov.w	r2, #0
 800aed8:	62da      	str	r2, [r3, #44]	; 0x2c
 800aeda:	e02e      	b.n	800af3a <PosProfile_CalcPhase1Timing+0xde>
	} else {
	  PosPPhase[1].timing.Tj1 = sqrtf(velminus / jerk);
 800aedc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800aee0:	edd7 7a00 	vldr	s15, [r7]
 800aee4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800aee8:	eeb0 0a66 	vmov.f32	s0, s13
 800aeec:	f00b fd0c 	bl	8016908 <sqrtf>
 800aef0:	eef0 7a40 	vmov.f32	s15, s0
 800aef4:	4bcd      	ldr	r3, [pc, #820]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800aef6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	  PosPPhase[1].timing.Ta = 2.0F * PosPPhase[1].timing.Tj1;
 800aefa:	4bcc      	ldr	r3, [pc, #816]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800aefc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800af00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af04:	4bc9      	ldr	r3, [pc, #804]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800af06:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 800af0a:	e016      	b.n	800af3a <PosProfile_CalcPhase1Timing+0xde>
	}
  } else {
	  PosPPhase[1].timing.Tj1 = maxAcce / jerk;
 800af0c:	edd7 6a01 	vldr	s13, [r7, #4]
 800af10:	ed97 7a00 	vldr	s14, [r7]
 800af14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af18:	4bc4      	ldr	r3, [pc, #784]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800af1a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	  PosPPhase[1].timing.Ta = velminus / maxAcce + PosPPhase[1].timing.Tj1;
 800af1e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800af22:	edd7 7a01 	vldr	s15, [r7, #4]
 800af26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2a:	4bc0      	ldr	r3, [pc, #768]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800af2c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800af30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af34:	4bbd      	ldr	r3, [pc, #756]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800af36:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  }

  velminus = maxVel - targetVel;
 800af3a:	ed97 7a02 	vldr	s14, [r7, #8]
 800af3e:	edd7 7a03 	vldr	s15, [r7, #12]
 800af42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af46:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  if (velminus * jerk < Ta_tmp) {
 800af4a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800af4e:	edd7 7a00 	vldr	s15, [r7]
 800af52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af56:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800af5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af62:	dd17      	ble.n	800af94 <PosProfile_CalcPhase1Timing+0x138>
	  PosPPhase[1].timing.Tj2 = sqrtf(velminus / jerk);
 800af64:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800af68:	edd7 7a00 	vldr	s15, [r7]
 800af6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800af70:	eeb0 0a66 	vmov.f32	s0, s13
 800af74:	f00b fcc8 	bl	8016908 <sqrtf>
 800af78:	eef0 7a40 	vmov.f32	s15, s0
 800af7c:	4bab      	ldr	r3, [pc, #684]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800af7e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	  PosPPhase[1].timing.Td = 2.0F * PosPPhase[1].timing.Tj2;
 800af82:	4baa      	ldr	r3, [pc, #680]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800af84:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800af88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af8c:	4ba7      	ldr	r3, [pc, #668]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800af8e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 800af92:	e016      	b.n	800afc2 <PosProfile_CalcPhase1Timing+0x166>
  } else {
	  PosPPhase[1].timing.Tj2 = maxAcce / jerk;
 800af94:	edd7 6a01 	vldr	s13, [r7, #4]
 800af98:	ed97 7a00 	vldr	s14, [r7]
 800af9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afa0:	4ba2      	ldr	r3, [pc, #648]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800afa2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	  PosPPhase[1].timing.Td = velminus / maxAcce + PosPPhase[1].timing.Tj2;
 800afa6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800afaa:	edd7 7a01 	vldr	s15, [r7, #4]
 800afae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb2:	4b9e      	ldr	r3, [pc, #632]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800afb4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800afb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afbc:	4b9b      	ldr	r3, [pc, #620]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800afbe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  /* T = Tv + Ta + Td */
  /* Make sure the targetPos great than initPos
   * assert(rtU.TargetPos > rtU.InitPos);*/

  PosPPhase[1].timing.Tv = (distance / maxVel - (curVel / maxVel + 1.0F) * (PosPPhase[1].timing.Ta / 2.0F))
 800afc2:	edd7 6a05 	vldr	s13, [r7, #20]
 800afc6:	edd7 7a02 	vldr	s15, [r7, #8]
 800afca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afce:	ed97 6a04 	vldr	s12, [r7, #16]
 800afd2:	edd7 6a02 	vldr	s13, [r7, #8]
 800afd6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800afda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afde:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800afe2:	4b92      	ldr	r3, [pc, #584]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800afe4:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 800afe8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800afec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aff4:	ee37 7a67 	vsub.f32	s14, s14, s15
	- (targetVel / maxVel + 1.0F) * (PosPPhase[1].timing.Td / 2.0F);
 800aff8:	ed97 6a03 	vldr	s12, [r7, #12]
 800affc:	edd7 6a02 	vldr	s13, [r7, #8]
 800b000:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b008:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800b00c:	4b87      	ldr	r3, [pc, #540]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800b00e:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 800b012:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b01a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b01e:	ee77 7a67 	vsub.f32	s15, s14, s15
  PosPPhase[1].timing.Tv = (distance / maxVel - (curVel / maxVel + 1.0F) * (PosPPhase[1].timing.Ta / 2.0F))
 800b022:	4b82      	ldr	r3, [pc, #520]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800b024:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  if (PosPPhase[1].timing.Tv <= 0.0F) {
 800b028:	4b80      	ldr	r3, [pc, #512]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800b02a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b02e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b036:	f200 8247 	bhi.w	800b4c8 <PosProfile_CalcPhase1Timing+0x66c>

	  /*Cannot acceed the max velocity*/
	  PosPPhase[1].timing.Tv = 0.0F;
 800b03a:	4b7c      	ldr	r3, [pc, #496]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800b03c:	f04f 0200 	mov.w	r2, #0
 800b040:	629a      	str	r2, [r3, #40]	; 0x28

	  /* Recalc timing*/
	  jerkp2 = jerk * jerk;
 800b042:	edd7 7a00 	vldr	s15, [r7]
 800b046:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b04a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	  real32_T curVelp2 = curVel * curVel;
 800b04e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b052:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b056:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  real32_T targetVelp2 = targetVel * targetVel;
 800b05a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b05e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b062:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	  velsum = curVel + targetVel;
 800b066:	ed97 7a04 	vldr	s14, [r7, #16]
 800b06a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b06e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b072:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	  accep2 = maxAcce * maxAcce;
 800b076:	edd7 7a01 	vldr	s15, [r7, #4]
 800b07a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b07e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  accep4 = accep2 * accep2;
 800b082:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b086:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b08a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	  delta = (distance * 4.0F - 2.0F * maxAcce / jerk * velsum) *
 800b08e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b092:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b096:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b09a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b09e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800b0a2:	edd7 7a00 	vldr	s15, [r7]
 800b0a6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800b0aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b0ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b0b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b0b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800b0ba:	ee27 7a27 	vmul.f32	s14, s14, s15
			  maxAcce + ((curVelp2 + targetVelp2) * 2.0F + accep4 / jerkp2);
 800b0be:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b0c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b0ce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b0d2:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 800b0d6:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800b0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
	  delta = (distance * 4.0F - 2.0F * maxAcce / jerk * velsum) *
 800b0de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0e2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	  PosPPhase[1].timing.Tj1 = maxAcce / jerk;
 800b0e6:	edd7 6a01 	vldr	s13, [r7, #4]
 800b0ea:	ed97 7a00 	vldr	s14, [r7]
 800b0ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f2:	4b4e      	ldr	r3, [pc, #312]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800b0f4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	  PosPPhase[1].timing.Td = sqrtf(delta);
 800b0f8:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 800b0fc:	f00b fc04 	bl	8016908 <sqrtf>
 800b100:	eef0 7a40 	vmov.f32	s15, s0
 800b104:	4b49      	ldr	r3, [pc, #292]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800b106:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	  Ta_tmp /= jerk;
 800b10a:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800b10e:	ed97 7a00 	vldr	s14, [r7]
 800b112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b116:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	  PosPPhase[1].timing.Ta = ((Ta_tmp - 2.0F * curVel) + PosPPhase[1].timing.Td) / 2.0F / maxAcce;
 800b11a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b11e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b122:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b126:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b12a:	4b40      	ldr	r3, [pc, #256]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800b12c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b130:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b134:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b138:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b13c:	ed97 7a01 	vldr	s14, [r7, #4]
 800b140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b144:	4b39      	ldr	r3, [pc, #228]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800b146:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	  PosPPhase[1].timing.Tj2 = maxAcce / jerk;
 800b14a:	edd7 6a01 	vldr	s13, [r7, #4]
 800b14e:	ed97 7a00 	vldr	s14, [r7]
 800b152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b156:	4b35      	ldr	r3, [pc, #212]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800b158:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	  PosPPhase[1].timing.Td = ((Ta_tmp - 2.0F * targetVel) + PosPPhase[1].timing.Td) / 2.0F / maxAcce;
 800b15c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b160:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b164:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b168:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b16c:	4b2f      	ldr	r3, [pc, #188]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800b16e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b172:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b176:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b17a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b17e:	ed97 7a01 	vldr	s14, [r7, #4]
 800b182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b186:	4b29      	ldr	r3, [pc, #164]	; (800b22c <PosProfile_CalcPhase1Timing+0x3d0>)
 800b188:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	  real32_T amaxp2 = amax * amax;
 800b18c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b190:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b194:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  while ((PosPPhase[1].timing.Ta < 2.0F * PosPPhase[1].timing.Tj1) || (PosPPhase[1].timing.Td < 2.0F * PosPPhase[1].timing.Tj2)) {
 800b198:	e0c8      	b.n	800b32c <PosProfile_CalcPhase1Timing+0x4d0>
		  amax -= maxAcce * 0.1F;
 800b19a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b19e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800b230 <PosProfile_CalcPhase1Timing+0x3d4>
 800b1a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b1a6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b1aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1ae:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		  amaxp2 = amax * amax;
 800b1b2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b1b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b1ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		  if (amax > 0.0F) {
 800b1be:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b1c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ca:	dd33      	ble.n	800b234 <PosProfile_CalcPhase1Timing+0x3d8>
			  delta = ((curVelp2 + targetVelp2) * 2.0F + amaxp2*amaxp2 / jerkp2) +
 800b1cc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b1d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b1d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b1dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b1e0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b1e4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800b1e8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b1ec:	ee37 7a27 	vadd.f32	s14, s14, s15
					   (distance * 4.0F - 2.0F * amax / jerk * velsum) * amax;
 800b1f0:	edd7 7a05 	vldr	s15, [r7, #20]
 800b1f4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800b1f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b1fc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b200:	ee77 5aa7 	vadd.f32	s11, s15, s15
 800b204:	edd7 7a00 	vldr	s15, [r7]
 800b208:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b20c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b210:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b214:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b218:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b21c:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  delta = ((curVelp2 + targetVelp2) * 2.0F + amaxp2*amaxp2 / jerkp2) +
 800b220:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b224:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 800b228:	e032      	b.n	800b290 <PosProfile_CalcPhase1Timing+0x434>
 800b22a:	bf00      	nop
 800b22c:	20000c6c 	.word	0x20000c6c
 800b230:	3dcccccd 	.word	0x3dcccccd
		  } else {
			  delta = ((curVelp2 + targetVelp2) * 2.0F + amaxp2*amaxp2 / jerkp2) -
 800b234:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b238:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b23c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b240:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b244:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b248:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b24c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800b250:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b254:	ee37 7a27 	vadd.f32	s14, s14, s15
					   (distance * 4.0F - 2.0F * amax / jerk * velsum) * amax;
 800b258:	edd7 7a05 	vldr	s15, [r7, #20]
 800b25c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800b260:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b264:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b268:	ee77 5aa7 	vadd.f32	s11, s15, s15
 800b26c:	edd7 7a00 	vldr	s15, [r7]
 800b270:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b274:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b278:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b27c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b280:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b284:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  delta = ((curVelp2 + targetVelp2) * 2.0F + amaxp2*amaxp2 / jerkp2) -
 800b288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b28c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		  }

		  real32_T sqrtdelta = sqrtf(delta);
 800b290:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 800b294:	f00b fb38 	bl	8016908 <sqrtf>
 800b298:	ed87 0a07 	vstr	s0, [r7, #28]
		  PosPPhase[1].timing.Tj1 = amax / jerk;
 800b29c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800b2a0:	ed97 7a00 	vldr	s14, [r7]
 800b2a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2a8:	4b9a      	ldr	r3, [pc, #616]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b2aa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  PosPPhase[1].timing.Ta = ((amaxp2 / jerk - 2.0F * curVel) + sqrtdelta) / 2.0F / amax;
 800b2ae:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b2b2:	edd7 7a00 	vldr	s15, [r7]
 800b2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ba:	edd7 7a04 	vldr	s15, [r7, #16]
 800b2be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b2c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b2c6:	edd7 7a07 	vldr	s15, [r7, #28]
 800b2ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2ce:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b2d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b2d6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b2da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2de:	4b8d      	ldr	r3, [pc, #564]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b2e0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  PosPPhase[1].timing.Tj2 = amax / jerk;
 800b2e4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800b2e8:	ed97 7a00 	vldr	s14, [r7]
 800b2ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f0:	4b88      	ldr	r3, [pc, #544]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b2f2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		  PosPPhase[1].timing.Td = ((amaxp2 / jerk - 2.0F * targetVel) + sqrtdelta) / 2.0F / amax;
 800b2f6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b2fa:	edd7 7a00 	vldr	s15, [r7]
 800b2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b302:	edd7 7a03 	vldr	s15, [r7, #12]
 800b306:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b30a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b30e:	edd7 7a07 	vldr	s15, [r7, #28]
 800b312:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b316:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b31a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b31e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b326:	4b7b      	ldr	r3, [pc, #492]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b328:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	  while ((PosPPhase[1].timing.Ta < 2.0F * PosPPhase[1].timing.Tj1) || (PosPPhase[1].timing.Td < 2.0F * PosPPhase[1].timing.Tj2)) {
 800b32c:	4b79      	ldr	r3, [pc, #484]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b32e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b332:	4b78      	ldr	r3, [pc, #480]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b334:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b338:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b33c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b344:	f53f af29 	bmi.w	800b19a <PosProfile_CalcPhase1Timing+0x33e>
 800b348:	4b72      	ldr	r3, [pc, #456]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b34a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800b34e:	4b71      	ldr	r3, [pc, #452]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b350:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b354:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b360:	f53f af1b 	bmi.w	800b19a <PosProfile_CalcPhase1Timing+0x33e>
	  }

	  if ((PosPPhase[1].timing.Ta < 0.0F) || (PosPPhase[1].timing.Td < 0.0F)) {
 800b364:	4b6b      	ldr	r3, [pc, #428]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b366:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b36a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b372:	d408      	bmi.n	800b386 <PosProfile_CalcPhase1Timing+0x52a>
 800b374:	4b67      	ldr	r3, [pc, #412]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b376:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b37a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b382:	f140 80a1 	bpl.w	800b4c8 <PosProfile_CalcPhase1Timing+0x66c>

		  velminus = targetVel - curVel;
 800b386:	ed97 7a03 	vldr	s14, [r7, #12]
 800b38a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b38e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b392:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		  real32_T decelgap = 0.0;
 800b396:	f04f 0300 	mov.w	r3, #0
 800b39a:	623b      	str	r3, [r7, #32]

		  if (curVel > targetVel) {
 800b39c:	ed97 7a04 	vldr	s14, [r7, #16]
 800b3a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ac:	dd46      	ble.n	800b43c <PosProfile_CalcPhase1Timing+0x5e0>
			  /*仅包含减速段*/
			  PosPPhase[1].timing.Ta = 0.0F;
 800b3ae:	4b59      	ldr	r3, [pc, #356]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b3b0:	f04f 0200 	mov.w	r2, #0
 800b3b4:	62da      	str	r2, [r3, #44]	; 0x2c
			  PosPPhase[1].timing.Tj1 = 0.0F;
 800b3b6:	4b57      	ldr	r3, [pc, #348]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b3b8:	f04f 0200 	mov.w	r2, #0
 800b3bc:	631a      	str	r2, [r3, #48]	; 0x30
			  PosPPhase[1].timing.Td = distance * 2.0F / velsum;
 800b3be:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3c2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b3c6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b3ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3ce:	4b51      	ldr	r3, [pc, #324]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b3d0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			  decelgap = jerk*(jerk*distance*distance + velsum*velsum*velminus);
 800b3d4:	ed97 7a00 	vldr	s14, [r7]
 800b3d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3e0:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b3ec:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b3f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b3f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b3f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3fc:	ed97 7a00 	vldr	s14, [r7]
 800b400:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b404:	edc7 7a08 	vstr	s15, [r7, #32]
			  PosPPhase[1].timing.Tj2 = (distance * jerk - sqrtf(decelgap)) / jerk / velsum;
 800b408:	ed97 7a05 	vldr	s14, [r7, #20]
 800b40c:	edd7 7a00 	vldr	s15, [r7]
 800b410:	ee27 8a27 	vmul.f32	s16, s14, s15
 800b414:	ed97 0a08 	vldr	s0, [r7, #32]
 800b418:	f00b fa76 	bl	8016908 <sqrtf>
 800b41c:	eef0 7a40 	vmov.f32	s15, s0
 800b420:	ee38 7a67 	vsub.f32	s14, s16, s15
 800b424:	edd7 7a00 	vldr	s15, [r7]
 800b428:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b42c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b434:	4b37      	ldr	r3, [pc, #220]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b436:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 800b43a:	e045      	b.n	800b4c8 <PosProfile_CalcPhase1Timing+0x66c>
		  } else {
			  PosPPhase[1].timing.Td = 0.0F;
 800b43c:	4b35      	ldr	r3, [pc, #212]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b43e:	f04f 0200 	mov.w	r2, #0
 800b442:	635a      	str	r2, [r3, #52]	; 0x34
			  PosPPhase[1].timing.Tj2 = 0.0F;
 800b444:	4b33      	ldr	r3, [pc, #204]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b446:	f04f 0200 	mov.w	r2, #0
 800b44a:	639a      	str	r2, [r3, #56]	; 0x38
			  PosPPhase[1].timing.Ta = distance * 2.0F / velsum;
 800b44c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b450:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b454:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b45c:	4b2d      	ldr	r3, [pc, #180]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b45e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			  decelgap = jerk*(jerk*distance*distance - velsum*velsum*velminus);
 800b462:	ed97 7a00 	vldr	s14, [r7]
 800b466:	edd7 7a05 	vldr	s15, [r7, #20]
 800b46a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b46e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b472:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b476:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b47a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b47e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b48a:	ed97 7a00 	vldr	s14, [r7]
 800b48e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b492:	edc7 7a08 	vstr	s15, [r7, #32]
			  PosPPhase[1].timing.Tj1 = (distance * jerk - sqrtf(decelgap)) / jerk / velsum;
 800b496:	ed97 7a05 	vldr	s14, [r7, #20]
 800b49a:	edd7 7a00 	vldr	s15, [r7]
 800b49e:	ee27 8a27 	vmul.f32	s16, s14, s15
 800b4a2:	ed97 0a08 	vldr	s0, [r7, #32]
 800b4a6:	f00b fa2f 	bl	8016908 <sqrtf>
 800b4aa:	eef0 7a40 	vmov.f32	s15, s0
 800b4ae:	ee38 7a67 	vsub.f32	s14, s16, s15
 800b4b2:	edd7 7a00 	vldr	s15, [r7]
 800b4b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b4ba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b4be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c2:	4b14      	ldr	r3, [pc, #80]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b4c4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  /* All time phase calculate end
   * T = Tv + Ta + Td
   * Ta >= 2*Tj1
   * Td >= 2*Tj2
   * */
  PosPPhase[1].timing.T = PosPPhase[1].timing.Tv + PosPPhase[1].timing.Ta + PosPPhase[1].timing.Td;
 800b4c8:	4b12      	ldr	r3, [pc, #72]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b4ca:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800b4ce:	4b11      	ldr	r3, [pc, #68]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b4d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b4d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4d8:	4b0e      	ldr	r3, [pc, #56]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b4da:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b4de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4e2:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b4e4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  PosPPhase[1].tms = (PosPPhase[1].timing.T * 1000.0F);
 800b4e8:	4b0a      	ldr	r3, [pc, #40]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b4ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b4ee:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800b518 <PosProfile_CalcPhase1Timing+0x6bc>
 800b4f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4fa:	ee17 2a90 	vmov	r2, s15
 800b4fe:	4b05      	ldr	r3, [pc, #20]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b500:	63da      	str	r2, [r3, #60]	; 0x3c
  PosPPhase[1].dist = distance;
 800b502:	4a04      	ldr	r2, [pc, #16]	; (800b514 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	6413      	str	r3, [r2, #64]	; 0x40
}
 800b508:	bf00      	nop
 800b50a:	3750      	adds	r7, #80	; 0x50
 800b50c:	46bd      	mov	sp, r7
 800b50e:	ecbd 8b02 	vpop	{d8}
 800b512:	bd80      	pop	{r7, pc}
 800b514:	20000c6c 	.word	0x20000c6c
 800b518:	447a0000 	.word	0x447a0000

0800b51c <PosProfile_CalcPhase0Timing>:

void PosProfile_CalcPhase0Timing(real32_T curVel, real32_T jerk)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	ed87 0a01 	vstr	s0, [r7, #4]
 800b526:	edc7 0a00 	vstr	s1, [r7]
	/*assert curVel < 0*/
	PosPPhase[0].timing.Tj1 = sqrtf( curVel / jerk );
 800b52a:	ed97 7a01 	vldr	s14, [r7, #4]
 800b52e:	edd7 7a00 	vldr	s15, [r7]
 800b532:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b536:	eeb0 0a66 	vmov.f32	s0, s13
 800b53a:	f00b f9e5 	bl	8016908 <sqrtf>
 800b53e:	eef0 7a40 	vmov.f32	s15, s0
 800b542:	4b22      	ldr	r3, [pc, #136]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b544:	edc3 7a03 	vstr	s15, [r3, #12]
	PosPPhase[0].timing.Ta  = 2.0f * PosPPhase[0].timing.Tj1;
 800b548:	4b20      	ldr	r3, [pc, #128]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b54a:	edd3 7a03 	vldr	s15, [r3, #12]
 800b54e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b552:	4b1e      	ldr	r3, [pc, #120]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b554:	edc3 7a02 	vstr	s15, [r3, #8]
	PosPPhase[0].timing.T   = PosPPhase[0].timing.Ta;
 800b558:	4b1c      	ldr	r3, [pc, #112]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	4a1b      	ldr	r2, [pc, #108]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b55e:	6013      	str	r3, [r2, #0]

	PosPPhase[0].dist       = 1.5f * curVel * PosPPhase[0].timing.Tj1 -
 800b560:	edd7 7a01 	vldr	s15, [r7, #4]
 800b564:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800b568:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b56c:	4b17      	ldr	r3, [pc, #92]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b56e:	edd3 7a03 	vldr	s15, [r3, #12]
 800b572:	ee27 7a27 	vmul.f32	s14, s14, s15
			                  0.5f * jerk * PosPPhase[0].timing.Tj1 * PosPPhase[0].timing.Tj1 * PosPPhase[0].timing.Tj1;
 800b576:	edd7 7a00 	vldr	s15, [r7]
 800b57a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b57e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b582:	4b12      	ldr	r3, [pc, #72]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b584:	edd3 7a03 	vldr	s15, [r3, #12]
 800b588:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b58c:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b58e:	edd3 7a03 	vldr	s15, [r3, #12]
 800b592:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b596:	4b0d      	ldr	r3, [pc, #52]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b598:	edd3 7a03 	vldr	s15, [r3, #12]
 800b59c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	PosPPhase[0].dist       = 1.5f * curVel * PosPPhase[0].timing.Tj1 -
 800b5a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5a4:	4b09      	ldr	r3, [pc, #36]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b5a6:	edc3 7a07 	vstr	s15, [r3, #28]
	PosPPhase[0].tms        = PosPPhase[0].timing.T * 1000;
 800b5aa:	4b08      	ldr	r3, [pc, #32]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b5ac:	edd3 7a00 	vldr	s15, [r3]
 800b5b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800b5d0 <PosProfile_CalcPhase0Timing+0xb4>
 800b5b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5bc:	ee17 2a90 	vmov	r2, s15
 800b5c0:	4b02      	ldr	r3, [pc, #8]	; (800b5cc <PosProfile_CalcPhase0Timing+0xb0>)
 800b5c2:	619a      	str	r2, [r3, #24]
}
 800b5c4:	bf00      	nop
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	20000c6c 	.word	0x20000c6c
 800b5d0:	447a0000 	.word	0x447a0000

0800b5d4 <PosProfile_Prepare>:

void PosProfile_Prepare(real32_T distance, real32_T curVel, real32_T targetVel, real32_T maxVel, real32_T maxAcce, real32_T maxJerk)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08a      	sub	sp, #40	; 0x28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	ed87 0a05 	vstr	s0, [r7, #20]
 800b5de:	edc7 0a04 	vstr	s1, [r7, #16]
 800b5e2:	ed87 1a03 	vstr	s2, [r7, #12]
 800b5e6:	edc7 1a02 	vstr	s3, [r7, #8]
 800b5ea:	ed87 2a01 	vstr	s4, [r7, #4]
 800b5ee:	edc7 2a00 	vstr	s5, [r7]
	/* calc two profile phase
	 * set the direction of profile*/
	if ((curVel < 0 && targetVel > 0) || (curVel > 0 && targetVel < 0)){
 800b5f2:	edd7 7a04 	vldr	s15, [r7, #16]
 800b5f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5fe:	d507      	bpl.n	800b610 <PosProfile_Prepare+0x3c>
 800b600:	edd7 7a03 	vldr	s15, [r7, #12]
 800b604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b60c:	f300 8110 	bgt.w	800b830 <PosProfile_Prepare+0x25c>
 800b610:	edd7 7a04 	vldr	s15, [r7, #16]
 800b614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61c:	dd07      	ble.n	800b62e <PosProfile_Prepare+0x5a>
 800b61e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62a:	f100 8101 	bmi.w	800b830 <PosProfile_Prepare+0x25c>
	/*           - distance                               + distance    */
	/* reverse target pos ------ origin pos ------- positive target pos */
	/*             dir -1                                 dir +1        */
	/*          velocity < 0                            velocity > 0    */

	int8_T hasTurn = 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (distance > 0 && curVel < 0){
 800b634:	edd7 7a05 	vldr	s15, [r7, #20]
 800b638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b640:	dd10      	ble.n	800b664 <PosProfile_Prepare+0x90>
 800b642:	edd7 7a04 	vldr	s15, [r7, #16]
 800b646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b64e:	d509      	bpl.n	800b664 <PosProfile_Prepare+0x90>
		hasTurn = 1;
 800b650:	2301      	movs	r3, #1
 800b652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		PosPPhase[0].dir = -1.0f;
 800b656:	4b78      	ldr	r3, [pc, #480]	; (800b838 <PosProfile_Prepare+0x264>)
 800b658:	4a78      	ldr	r2, [pc, #480]	; (800b83c <PosProfile_Prepare+0x268>)
 800b65a:	621a      	str	r2, [r3, #32]
		PosPPhase[1].dir = 1.0f;
 800b65c:	4b76      	ldr	r3, [pc, #472]	; (800b838 <PosProfile_Prepare+0x264>)
 800b65e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b662:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (distance < 0 && curVel > 0){
 800b664:	edd7 7a05 	vldr	s15, [r7, #20]
 800b668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b670:	d510      	bpl.n	800b694 <PosProfile_Prepare+0xc0>
 800b672:	edd7 7a04 	vldr	s15, [r7, #16]
 800b676:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b67e:	dd09      	ble.n	800b694 <PosProfile_Prepare+0xc0>
		hasTurn = 1;
 800b680:	2301      	movs	r3, #1
 800b682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		PosPPhase[0].dir = 1.0f;
 800b686:	4b6c      	ldr	r3, [pc, #432]	; (800b838 <PosProfile_Prepare+0x264>)
 800b688:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b68c:	621a      	str	r2, [r3, #32]
		PosPPhase[1].dir = -1.0f;
 800b68e:	4b6a      	ldr	r3, [pc, #424]	; (800b838 <PosProfile_Prepare+0x264>)
 800b690:	4a6a      	ldr	r2, [pc, #424]	; (800b83c <PosProfile_Prepare+0x268>)
 800b692:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (!hasTurn){
 800b694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d157      	bne.n	800b74c <PosProfile_Prepare+0x178>
		real32_T velerr = velerr = (targetVel > curVel)? (curVel - targetVel):(targetVel - curVel);
 800b69c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b6a0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b6a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ac:	dd06      	ble.n	800b6bc <PosProfile_Prepare+0xe8>
 800b6ae:	ed97 7a04 	vldr	s14, [r7, #16]
 800b6b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6ba:	e005      	b.n	800b6c8 <PosProfile_Prepare+0xf4>
 800b6bc:	ed97 7a03 	vldr	s14, [r7, #12]
 800b6c0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b6c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6c8:	edc7 7a08 	vstr	s15, [r7, #32]

		/*jmax * (jmax*abs(q1 - q0)^2 + (v1 + v0)^2*(v1 - v0));*/
		/*means the distance too short to plan caused of cur velocity*/
		real32_T cond = ( maxJerk * distance * distance + (curVel+targetVel) * (curVel+targetVel) * velerr);
 800b6cc:	ed97 7a00 	vldr	s14, [r7]
 800b6d0:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6e0:	edd7 6a04 	vldr	s13, [r7, #16]
 800b6e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b6ec:	ed97 6a04 	vldr	s12, [r7, #16]
 800b6f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6f4:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b6f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b6fc:	edd7 7a08 	vldr	s15, [r7, #32]
 800b700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b704:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b708:	edc7 7a07 	vstr	s15, [r7, #28]
		if (cond < 0){
 800b70c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b718:	d518      	bpl.n	800b74c <PosProfile_Prepare+0x178>
			hasTurn = 1;
 800b71a:	2301      	movs	r3, #1
 800b71c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (curVel < 0){
 800b720:	edd7 7a04 	vldr	s15, [r7, #16]
 800b724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b72c:	d507      	bpl.n	800b73e <PosProfile_Prepare+0x16a>
				PosPPhase[0].dir = -1.0f;
 800b72e:	4b42      	ldr	r3, [pc, #264]	; (800b838 <PosProfile_Prepare+0x264>)
 800b730:	4a42      	ldr	r2, [pc, #264]	; (800b83c <PosProfile_Prepare+0x268>)
 800b732:	621a      	str	r2, [r3, #32]
				PosPPhase[1].dir = 1.0f;
 800b734:	4b40      	ldr	r3, [pc, #256]	; (800b838 <PosProfile_Prepare+0x264>)
 800b736:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b73a:	645a      	str	r2, [r3, #68]	; 0x44
 800b73c:	e006      	b.n	800b74c <PosProfile_Prepare+0x178>
			}else{
				PosPPhase[0].dir = 1.0f;
 800b73e:	4b3e      	ldr	r3, [pc, #248]	; (800b838 <PosProfile_Prepare+0x264>)
 800b740:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b744:	621a      	str	r2, [r3, #32]
				PosPPhase[1].dir = -1.0f;
 800b746:	4b3c      	ldr	r3, [pc, #240]	; (800b838 <PosProfile_Prepare+0x264>)
 800b748:	4a3c      	ldr	r2, [pc, #240]	; (800b83c <PosProfile_Prepare+0x268>)
 800b74a:	645a      	str	r2, [r3, #68]	; 0x44
			}
		}
	}

	if (hasTurn){
 800b74c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b750:	2b00      	cmp	r3, #0
 800b752:	d030      	beq.n	800b7b6 <PosProfile_Prepare+0x1e2>
		PosProfile_CalcPhase0Timing(abs(curVel), maxJerk);
 800b754:	edd7 7a04 	vldr	s15, [r7, #16]
 800b758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b75c:	ee17 3a90 	vmov	r3, s15
 800b760:	2b00      	cmp	r3, #0
 800b762:	bfb8      	it	lt
 800b764:	425b      	neglt	r3, r3
 800b766:	ee07 3a90 	vmov	s15, r3
 800b76a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b76e:	edd7 0a00 	vldr	s1, [r7]
 800b772:	eeb0 0a67 	vmov.f32	s0, s15
 800b776:	f7ff fed1 	bl	800b51c <PosProfile_CalcPhase0Timing>

		/*the next phase calc slice timing, and all parameters are positive*/
		distance = fabsf(distance) + PosPPhase[0].dist;
 800b77a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b77e:	eeb0 7ae7 	vabs.f32	s14, s15
 800b782:	4b2d      	ldr	r3, [pc, #180]	; (800b838 <PosProfile_Prepare+0x264>)
 800b784:	edd3 7a07 	vldr	s15, [r3, #28]
 800b788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b78c:	edc7 7a05 	vstr	s15, [r7, #20]
		PosProfile_CalcPhase1Timing(distance,
 800b790:	edd7 7a03 	vldr	s15, [r7, #12]
 800b794:	eef0 7ae7 	vabs.f32	s15, s15
 800b798:	edd7 2a00 	vldr	s5, [r7]
 800b79c:	ed97 2a01 	vldr	s4, [r7, #4]
 800b7a0:	edd7 1a02 	vldr	s3, [r7, #8]
 800b7a4:	eeb0 1a67 	vmov.f32	s2, s15
 800b7a8:	eddf 0a25 	vldr	s1, [pc, #148]	; 800b840 <PosProfile_Prepare+0x26c>
 800b7ac:	ed97 0a05 	vldr	s0, [r7, #20]
 800b7b0:	f7ff fb54 	bl	800ae5c <PosProfile_CalcPhase1Timing>
 800b7b4:	e03d      	b.n	800b832 <PosProfile_Prepare+0x25e>
									0.0f,
									fabsf(targetVel),
									maxVel, maxAcce, maxJerk);
	}else{
		if (distance > 0)
 800b7b6:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c2:	dd0d      	ble.n	800b7e0 <PosProfile_Prepare+0x20c>
			PosPPhase[1].dir = (curVel >= 0.0f) ? 1.0f : -1.0f;
 800b7c4:	edd7 7a04 	vldr	s15, [r7, #16]
 800b7c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d0:	db02      	blt.n	800b7d8 <PosProfile_Prepare+0x204>
 800b7d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b7d6:	e000      	b.n	800b7da <PosProfile_Prepare+0x206>
 800b7d8:	4b18      	ldr	r3, [pc, #96]	; (800b83c <PosProfile_Prepare+0x268>)
 800b7da:	4a17      	ldr	r2, [pc, #92]	; (800b838 <PosProfile_Prepare+0x264>)
 800b7dc:	6453      	str	r3, [r2, #68]	; 0x44
 800b7de:	e00c      	b.n	800b7fa <PosProfile_Prepare+0x226>
		else
			PosPPhase[1].dir = (curVel <= 0.0f) ? -1.0f : 1.0f;
 800b7e0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b7e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ec:	d801      	bhi.n	800b7f2 <PosProfile_Prepare+0x21e>
 800b7ee:	4b13      	ldr	r3, [pc, #76]	; (800b83c <PosProfile_Prepare+0x268>)
 800b7f0:	e001      	b.n	800b7f6 <PosProfile_Prepare+0x222>
 800b7f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b7f6:	4a10      	ldr	r2, [pc, #64]	; (800b838 <PosProfile_Prepare+0x264>)
 800b7f8:	6453      	str	r3, [r2, #68]	; 0x44

		PosProfile_CalcPhase1Timing(fabsf(distance),
 800b7fa:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7fe:	eeb0 7ae7 	vabs.f32	s14, s15
 800b802:	edd7 7a04 	vldr	s15, [r7, #16]
 800b806:	eef0 6ae7 	vabs.f32	s13, s15
 800b80a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b80e:	eef0 7ae7 	vabs.f32	s15, s15
 800b812:	edd7 2a00 	vldr	s5, [r7]
 800b816:	ed97 2a01 	vldr	s4, [r7, #4]
 800b81a:	edd7 1a02 	vldr	s3, [r7, #8]
 800b81e:	eeb0 1a67 	vmov.f32	s2, s15
 800b822:	eef0 0a66 	vmov.f32	s1, s13
 800b826:	eeb0 0a47 	vmov.f32	s0, s14
 800b82a:	f7ff fb17 	bl	800ae5c <PosProfile_CalcPhase1Timing>
 800b82e:	e000      	b.n	800b832 <PosProfile_Prepare+0x25e>
		return;
 800b830:	bf00      	nop
									fabsf(curVel),
									fabsf(targetVel),
									maxVel, maxAcce, maxJerk);
	}
}
 800b832:	3728      	adds	r7, #40	; 0x28
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	20000c6c 	.word	0x20000c6c
 800b83c:	bf800000 	.word	0xbf800000
 800b840:	00000000 	.word	0x00000000

0800b844 <PosProfile_Initialize>:

/* Model initialize function */
void PosProfile_Initialize(void)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 800b848:	2008      	movs	r0, #8
 800b84a:	f7ff f8af 	bl	800a9ac <rt_InitInfAndNaN>

  /* InitializeConditions for DiscreteIntegrator: '<S1>/Pos Integrator' */
  rtDW.PosIntegrator_IC_LOADING = 1U;
 800b84e:	4b05      	ldr	r3, [pc, #20]	; (800b864 <PosProfile_Initialize+0x20>)
 800b850:	2201      	movs	r2, #1
 800b852:	751a      	strb	r2, [r3, #20]

  /* InitializeConditions for DiscreteIntegrator: '<S1>/Vel Integrator' */
  rtDW.VelIntegrator_IC_LOADING = 1U;
 800b854:	4b03      	ldr	r3, [pc, #12]	; (800b864 <PosProfile_Initialize+0x20>)
 800b856:	2201      	movs	r2, #1
 800b858:	755a      	strb	r2, [r3, #21]

  /* Initialize the ts counter*/
  rtDW.t_not_empty = false;
 800b85a:	4b02      	ldr	r3, [pc, #8]	; (800b864 <PosProfile_Initialize+0x20>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	759a      	strb	r2, [r3, #22]
}
 800b860:	bf00      	nop
 800b862:	bd80      	pop	{r7, pc}
 800b864:	20000c2c 	.word	0x20000c2c

0800b868 <PosProfile_Start>:
 * maxAcce:   max acceleration
 * maxJerk:   max jerk
 * ts:        profile per step time stamp
 * */
void PosProfile_Start(real32_T distance, real32_T curVel, real32_T targetVel, real32_T maxVel, real32_T maxAcce, real32_T maxJerk, real32_T ts)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b088      	sub	sp, #32
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	ed87 0a07 	vstr	s0, [r7, #28]
 800b872:	edc7 0a06 	vstr	s1, [r7, #24]
 800b876:	ed87 1a05 	vstr	s2, [r7, #20]
 800b87a:	edc7 1a04 	vstr	s3, [r7, #16]
 800b87e:	ed87 2a03 	vstr	s4, [r7, #12]
 800b882:	edc7 2a02 	vstr	s5, [r7, #8]
 800b886:	ed87 3a01 	vstr	s6, [r7, #4]
	rtU.InitPos   = 0.0F;
 800b88a:	4b27      	ldr	r3, [pc, #156]	; (800b928 <PosProfile_Start+0xc0>)
 800b88c:	f04f 0200 	mov.w	r2, #0
 800b890:	601a      	str	r2, [r3, #0]
	rtU.TargetPos = distance;
 800b892:	4a25      	ldr	r2, [pc, #148]	; (800b928 <PosProfile_Start+0xc0>)
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	6053      	str	r3, [r2, #4]

	rtU.InitVel   = curVel;
 800b898:	4a23      	ldr	r2, [pc, #140]	; (800b928 <PosProfile_Start+0xc0>)
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	60d3      	str	r3, [r2, #12]
	rtU.TargetVel = targetVel;
 800b89e:	4a22      	ldr	r2, [pc, #136]	; (800b928 <PosProfile_Start+0xc0>)
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	6113      	str	r3, [r2, #16]

	rtU.MaxVel  = maxVel;
 800b8a4:	4a20      	ldr	r2, [pc, #128]	; (800b928 <PosProfile_Start+0xc0>)
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	6093      	str	r3, [r2, #8]
	rtU.MaxAcce = maxAcce;
 800b8aa:	4a1f      	ldr	r2, [pc, #124]	; (800b928 <PosProfile_Start+0xc0>)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6153      	str	r3, [r2, #20]
	rtU.MaxJerk = maxJerk;
 800b8b0:	4a1d      	ldr	r2, [pc, #116]	; (800b928 <PosProfile_Start+0xc0>)
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	6193      	str	r3, [r2, #24]

	/*Time space per profile discrete step*/
	rtU.Ts = ts;
 800b8b6:	4a1c      	ldr	r2, [pc, #112]	; (800b928 <PosProfile_Start+0xc0>)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	61d3      	str	r3, [r2, #28]

	/* InitializeConditions for DiscreteIntegrator: '<S1>/Pos Integrator' */
	rtDW.PosIntegrator_IC_LOADING = 1U;
 800b8bc:	4b1b      	ldr	r3, [pc, #108]	; (800b92c <PosProfile_Start+0xc4>)
 800b8be:	2201      	movs	r2, #1
 800b8c0:	751a      	strb	r2, [r3, #20]
    rtDW.PosIntegrator_DSTATE = rtU.InitPos;
 800b8c2:	4b19      	ldr	r3, [pc, #100]	; (800b928 <PosProfile_Start+0xc0>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a19      	ldr	r2, [pc, #100]	; (800b92c <PosProfile_Start+0xc4>)
 800b8c8:	6013      	str	r3, [r2, #0]

	/* InitializeConditions for DiscreteIntegrator: '<S1>/Vel Integrator' */
	rtDW.VelIntegrator_IC_LOADING = 1U;
 800b8ca:	4b18      	ldr	r3, [pc, #96]	; (800b92c <PosProfile_Start+0xc4>)
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	755a      	strb	r2, [r3, #21]
    rtDW.VelIntegrator_DSTATE = rtU.InitVel;
 800b8d0:	4b15      	ldr	r3, [pc, #84]	; (800b928 <PosProfile_Start+0xc0>)
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	4a15      	ldr	r2, [pc, #84]	; (800b92c <PosProfile_Start+0xc4>)
 800b8d6:	6053      	str	r3, [r2, #4]

    /* InitializeConditions for acceleration*/
    rtDW.AcceIntegrator_DSTATE = 0.0F;
 800b8d8:	4b14      	ldr	r3, [pc, #80]	; (800b92c <PosProfile_Start+0xc4>)
 800b8da:	f04f 0200 	mov.w	r2, #0
 800b8de:	609a      	str	r2, [r3, #8]

    /* Reset the ts counter*/
    rtDW.t_not_empty = false;
 800b8e0:	4b12      	ldr	r3, [pc, #72]	; (800b92c <PosProfile_Start+0xc4>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	759a      	strb	r2, [r3, #22]

    /* Velocity tranc error*/
    rtDW.VelTrancErr = 0.0F;
 800b8e6:	4b11      	ldr	r3, [pc, #68]	; (800b92c <PosProfile_Start+0xc4>)
 800b8e8:	f04f 0200 	mov.w	r2, #0
 800b8ec:	611a      	str	r2, [r3, #16]

    memset(&PosPPhase[0], 0 ,sizeof(PosPPhase_T));
 800b8ee:	2224      	movs	r2, #36	; 0x24
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	480f      	ldr	r0, [pc, #60]	; (800b930 <PosProfile_Start+0xc8>)
 800b8f4:	f00b f972 	bl	8016bdc <memset>
    memset(&PosPPhase[1], 0 ,sizeof(PosPPhase_T));
 800b8f8:	2224      	movs	r2, #36	; 0x24
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	480d      	ldr	r0, [pc, #52]	; (800b934 <PosProfile_Start+0xcc>)
 800b8fe:	f00b f96d 	bl	8016bdc <memset>

    PosProfile_Prepare(distance, curVel, targetVel, maxVel, maxAcce, maxJerk);
 800b902:	edd7 2a02 	vldr	s5, [r7, #8]
 800b906:	ed97 2a03 	vldr	s4, [r7, #12]
 800b90a:	edd7 1a04 	vldr	s3, [r7, #16]
 800b90e:	ed97 1a05 	vldr	s2, [r7, #20]
 800b912:	edd7 0a06 	vldr	s1, [r7, #24]
 800b916:	ed97 0a07 	vldr	s0, [r7, #28]
 800b91a:	f7ff fe5b 	bl	800b5d4 <PosProfile_Prepare>
}
 800b91e:	bf00      	nop
 800b920:	3720      	adds	r7, #32
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	20000c44 	.word	0x20000c44
 800b92c:	20000c2c 	.word	0x20000c2c
 800b930:	20000c6c 	.word	0x20000c6c
 800b934:	20000c90 	.word	0x20000c90

0800b938 <PosProfile_StartHalt>:

void PosProfile_StartHalt(real32_T curVel, real32_T maxJerk, real32_T ts)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	ed87 0a03 	vstr	s0, [r7, #12]
 800b942:	edc7 0a02 	vstr	s1, [r7, #8]
 800b946:	ed87 1a01 	vstr	s2, [r7, #4]
	rtU.InitPos   = 0.0F;
 800b94a:	4b36      	ldr	r3, [pc, #216]	; (800ba24 <PosProfile_StartHalt+0xec>)
 800b94c:	f04f 0200 	mov.w	r2, #0
 800b950:	601a      	str	r2, [r3, #0]
	rtU.TargetPos = 0.0F;
 800b952:	4b34      	ldr	r3, [pc, #208]	; (800ba24 <PosProfile_StartHalt+0xec>)
 800b954:	f04f 0200 	mov.w	r2, #0
 800b958:	605a      	str	r2, [r3, #4]

	rtU.InitVel   = curVel;
 800b95a:	4a32      	ldr	r2, [pc, #200]	; (800ba24 <PosProfile_StartHalt+0xec>)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	60d3      	str	r3, [r2, #12]
	rtU.TargetVel = 0.0F;
 800b960:	4b30      	ldr	r3, [pc, #192]	; (800ba24 <PosProfile_StartHalt+0xec>)
 800b962:	f04f 0200 	mov.w	r2, #0
 800b966:	611a      	str	r2, [r3, #16]

	rtU.MaxVel  = curVel;
 800b968:	4a2e      	ldr	r2, [pc, #184]	; (800ba24 <PosProfile_StartHalt+0xec>)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6093      	str	r3, [r2, #8]
	rtU.MaxAcce = maxJerk;
 800b96e:	4a2d      	ldr	r2, [pc, #180]	; (800ba24 <PosProfile_StartHalt+0xec>)
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	6153      	str	r3, [r2, #20]
	rtU.MaxJerk = maxJerk;
 800b974:	4a2b      	ldr	r2, [pc, #172]	; (800ba24 <PosProfile_StartHalt+0xec>)
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	6193      	str	r3, [r2, #24]

	/*Time space per profile discrete step*/
	rtU.Ts = ts;
 800b97a:	4a2a      	ldr	r2, [pc, #168]	; (800ba24 <PosProfile_StartHalt+0xec>)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	61d3      	str	r3, [r2, #28]

	/* InitializeConditions for DiscreteIntegrator: '<S1>/Pos Integrator' */
	rtDW.PosIntegrator_IC_LOADING = 1U;
 800b980:	4b29      	ldr	r3, [pc, #164]	; (800ba28 <PosProfile_StartHalt+0xf0>)
 800b982:	2201      	movs	r2, #1
 800b984:	751a      	strb	r2, [r3, #20]
    rtDW.PosIntegrator_DSTATE = rtU.InitPos;
 800b986:	4b27      	ldr	r3, [pc, #156]	; (800ba24 <PosProfile_StartHalt+0xec>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a27      	ldr	r2, [pc, #156]	; (800ba28 <PosProfile_StartHalt+0xf0>)
 800b98c:	6013      	str	r3, [r2, #0]

	/* InitializeConditions for DiscreteIntegrator: '<S1>/Vel Integrator' */
	rtDW.VelIntegrator_IC_LOADING = 1U;
 800b98e:	4b26      	ldr	r3, [pc, #152]	; (800ba28 <PosProfile_StartHalt+0xf0>)
 800b990:	2201      	movs	r2, #1
 800b992:	755a      	strb	r2, [r3, #21]
    rtDW.VelIntegrator_DSTATE = rtU.InitVel;
 800b994:	4b23      	ldr	r3, [pc, #140]	; (800ba24 <PosProfile_StartHalt+0xec>)
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	4a23      	ldr	r2, [pc, #140]	; (800ba28 <PosProfile_StartHalt+0xf0>)
 800b99a:	6053      	str	r3, [r2, #4]

    /* InitializeConditions for acceleration*/
    rtDW.AcceIntegrator_DSTATE = 0.0F;
 800b99c:	4b22      	ldr	r3, [pc, #136]	; (800ba28 <PosProfile_StartHalt+0xf0>)
 800b99e:	f04f 0200 	mov.w	r2, #0
 800b9a2:	609a      	str	r2, [r3, #8]

    /* Reset the ts counter*/
    rtDW.t_not_empty = false;
 800b9a4:	4b20      	ldr	r3, [pc, #128]	; (800ba28 <PosProfile_StartHalt+0xf0>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	759a      	strb	r2, [r3, #22]

    /* Velocity tranc error*/
    rtDW.VelTrancErr = 0.0F;
 800b9aa:	4b1f      	ldr	r3, [pc, #124]	; (800ba28 <PosProfile_StartHalt+0xf0>)
 800b9ac:	f04f 0200 	mov.w	r2, #0
 800b9b0:	611a      	str	r2, [r3, #16]

    memset(&PosPPhase[0], 0 ,sizeof(PosPPhase_T));
 800b9b2:	2224      	movs	r2, #36	; 0x24
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	481d      	ldr	r0, [pc, #116]	; (800ba2c <PosProfile_StartHalt+0xf4>)
 800b9b8:	f00b f910 	bl	8016bdc <memset>
    memset(&PosPPhase[1], 0 ,sizeof(PosPPhase_T));
 800b9bc:	2224      	movs	r2, #36	; 0x24
 800b9be:	2100      	movs	r1, #0
 800b9c0:	481b      	ldr	r0, [pc, #108]	; (800ba30 <PosProfile_StartHalt+0xf8>)
 800b9c2:	f00b f90b 	bl	8016bdc <memset>

    PosPPhase[0].dir = (curVel < 0.0F) ? -1.0F : 1.0F;
 800b9c6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d2:	d501      	bpl.n	800b9d8 <PosProfile_StartHalt+0xa0>
 800b9d4:	4b17      	ldr	r3, [pc, #92]	; (800ba34 <PosProfile_StartHalt+0xfc>)
 800b9d6:	e001      	b.n	800b9dc <PosProfile_StartHalt+0xa4>
 800b9d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b9dc:	4a13      	ldr	r2, [pc, #76]	; (800ba2c <PosProfile_StartHalt+0xf4>)
 800b9de:	6213      	str	r3, [r2, #32]
    PosProfile_CalcPhase0Timing(abs(curVel), maxJerk);
 800b9e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9e8:	ee17 3a90 	vmov	r3, s15
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	bfb8      	it	lt
 800b9f0:	425b      	neglt	r3, r3
 800b9f2:	ee07 3a90 	vmov	s15, r3
 800b9f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9fa:	edd7 0a02 	vldr	s1, [r7, #8]
 800b9fe:	eeb0 0a67 	vmov.f32	s0, s15
 800ba02:	f7ff fd8b 	bl	800b51c <PosProfile_CalcPhase0Timing>

    rtU.TargetPos = PosPPhase[0].dir * PosPPhase[0].dist;
 800ba06:	4b09      	ldr	r3, [pc, #36]	; (800ba2c <PosProfile_StartHalt+0xf4>)
 800ba08:	ed93 7a08 	vldr	s14, [r3, #32]
 800ba0c:	4b07      	ldr	r3, [pc, #28]	; (800ba2c <PosProfile_StartHalt+0xf4>)
 800ba0e:	edd3 7a07 	vldr	s15, [r3, #28]
 800ba12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba16:	4b03      	ldr	r3, [pc, #12]	; (800ba24 <PosProfile_StartHalt+0xec>)
 800ba18:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800ba1c:	bf00      	nop
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	20000c44 	.word	0x20000c44
 800ba28:	20000c2c 	.word	0x20000c2c
 800ba2c:	20000c6c 	.word	0x20000c6c
 800ba30:	20000c90 	.word	0x20000c90
 800ba34:	bf800000 	.word	0xbf800000

0800ba38 <PosProfile_GetTargetPos>:

real32_T PosProfile_GetTargetPos()
{
 800ba38:	b480      	push	{r7}
 800ba3a:	af00      	add	r7, sp, #0
	return PosPPhase[0].dist * PosPPhase[0].dir + PosPPhase[1].dist * PosPPhase[1].dir;
 800ba3c:	4b0b      	ldr	r3, [pc, #44]	; (800ba6c <PosProfile_GetTargetPos+0x34>)
 800ba3e:	ed93 7a07 	vldr	s14, [r3, #28]
 800ba42:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <PosProfile_GetTargetPos+0x34>)
 800ba44:	edd3 7a08 	vldr	s15, [r3, #32]
 800ba48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba4c:	4b07      	ldr	r3, [pc, #28]	; (800ba6c <PosProfile_GetTargetPos+0x34>)
 800ba4e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800ba52:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <PosProfile_GetTargetPos+0x34>)
 800ba54:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800ba58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba5c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800ba60:	eeb0 0a67 	vmov.f32	s0, s15
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr
 800ba6c:	20000c6c 	.word	0x20000c6c

0800ba70 <PosProfile_StepOver>:

boolean_T PosProfile_StepOver(uint32_T ticks)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
	if (ticks >= (PosPPhase[0].tms + PosPPhase[1].tms)){
 800ba78:	4b08      	ldr	r3, [pc, #32]	; (800ba9c <PosProfile_StepOver+0x2c>)
 800ba7a:	699a      	ldr	r2, [r3, #24]
 800ba7c:	4b07      	ldr	r3, [pc, #28]	; (800ba9c <PosProfile_StepOver+0x2c>)
 800ba7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba80:	4413      	add	r3, r2
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d301      	bcc.n	800ba8c <PosProfile_StepOver+0x1c>
		return true;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e000      	b.n	800ba8e <PosProfile_StepOver+0x1e>
	}
	return false;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	20000c6c 	.word	0x20000c6c

0800baa0 <TPB_Init>:

extern MT_MotionDrive_t g_MotionDriveHandle;
extern Node_DriveProfile_t g_NodeDriveProfile;

void TPB_Init()
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	af00      	add	r7, sp, #0
	g_BlocksChain.pair = 0;
 800baa4:	4b09      	ldr	r3, [pc, #36]	; (800bacc <TPB_Init+0x2c>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	g_BlocksChain.tickcount = 0;
 800baac:	4b07      	ldr	r3, [pc, #28]	; (800bacc <TPB_Init+0x2c>)
 800baae:	2200      	movs	r2, #0
 800bab0:	629a      	str	r2, [r3, #40]	; 0x28
	memset(&g_BlocksChain.curBlock, 0, sizeof(TPBlock));
 800bab2:	2214      	movs	r2, #20
 800bab4:	2100      	movs	r1, #0
 800bab6:	4805      	ldr	r0, [pc, #20]	; (800bacc <TPB_Init+0x2c>)
 800bab8:	f00b f890 	bl	8016bdc <memset>
	memset(&g_BlocksChain.lastBlock, 0, sizeof(TPBlock));
 800babc:	2214      	movs	r2, #20
 800babe:	2100      	movs	r1, #0
 800bac0:	4803      	ldr	r0, [pc, #12]	; (800bad0 <TPB_Init+0x30>)
 800bac2:	f00b f88b 	bl	8016bdc <memset>
}
 800bac6:	bf00      	nop
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	20000cdc 	.word	0x20000cdc
 800bad0:	20000cf0 	.word	0x20000cf0

0800bad4 <_ZN11SW_SPIClassC1Ettt>:
#include "spi.h"

#define SPI_TMC5160_CS_LOW()   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET)
#define SPI_TMC5160_CS_HIGH()  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET)

SW_SPIClass::SW_SPIClass(uint16_t mosi, uint16_t miso, uint16_t sck) :
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	4608      	mov	r0, r1
 800bade:	4611      	mov	r1, r2
 800bae0:	461a      	mov	r2, r3
 800bae2:	4603      	mov	r3, r0
 800bae4:	817b      	strh	r3, [r7, #10]
 800bae6:	460b      	mov	r3, r1
 800bae8:	813b      	strh	r3, [r7, #8]
 800baea:	4613      	mov	r3, r2
 800baec:	80fb      	strh	r3, [r7, #6]
  mosi_pin(mosi),
  miso_pin(miso),
  sck_pin(sck)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	897a      	ldrh	r2, [r7, #10]
 800baf2:	801a      	strh	r2, [r3, #0]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	893a      	ldrh	r2, [r7, #8]
 800baf8:	805a      	strh	r2, [r3, #2]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	88fa      	ldrh	r2, [r7, #6]
 800bafe:	809a      	strh	r2, [r3, #4]
  {}
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	4618      	mov	r0, r3
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <_ZN11SW_SPIClass4initEv>:

void SW_SPIClass::init() {
 800bb0e:	b480      	push	{r7}
 800bb10:	b083      	sub	sp, #12
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
}
 800bb16:	bf00      	nop
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
	...

0800bb24 <_ZN11SW_SPIClass11switchCSpinEb>:

void SW_SPIClass::switchCSpin(bool state)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	70fb      	strb	r3, [r7, #3]
	if (state){
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d008      	beq.n	800bb48 <_ZN11SW_SPIClass11switchCSpinEb+0x24>
		SPI_TMC5160_CS_HIGH();
 800bb36:	2201      	movs	r2, #1
 800bb38:	2102      	movs	r1, #2
 800bb3a:	4809      	ldr	r0, [pc, #36]	; (800bb60 <_ZN11SW_SPIClass11switchCSpinEb+0x3c>)
 800bb3c:	f004 fa64 	bl	8010008 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800bb40:	2002      	movs	r0, #2
 800bb42:	f002 fbb5 	bl	800e2b0 <HAL_Delay>
	}else{
		SPI_TMC5160_CS_LOW();
		HAL_Delay(2);
	}
}
 800bb46:	e007      	b.n	800bb58 <_ZN11SW_SPIClass11switchCSpinEb+0x34>
		SPI_TMC5160_CS_LOW();
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2102      	movs	r1, #2
 800bb4c:	4804      	ldr	r0, [pc, #16]	; (800bb60 <_ZN11SW_SPIClass11switchCSpinEb+0x3c>)
 800bb4e:	f004 fa5b 	bl	8010008 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800bb52:	2002      	movs	r0, #2
 800bb54:	f002 fbac 	bl	800e2b0 <HAL_Delay>
}
 800bb58:	bf00      	nop
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	40020000 	.word	0x40020000

0800bb64 <_ZN11SW_SPIClass8transferEh>:

uint8_t SW_SPIClass::transfer(uint8_t ulVal)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af02      	add	r7, sp, #8
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	70fb      	strb	r3, [r7, #3]
  uint8_t rx;

  HAL_StatusTypeDef status;
  //SPI_TMC5160_CS_LOW();
  status = HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&ulVal, (uint8_t*)&rx, 1, HAL_MAX_DELAY);
 800bb70:	f107 020e 	add.w	r2, r7, #14
 800bb74:	1cf9      	adds	r1, r7, #3
 800bb76:	f04f 33ff 	mov.w	r3, #4294967295
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	4807      	ldr	r0, [pc, #28]	; (800bb9c <_ZN11SW_SPIClass8transferEh+0x38>)
 800bb80:	f004 ff7e 	bl	8010a80 <HAL_SPI_TransmitReceive>
 800bb84:	4603      	mov	r3, r0
 800bb86:	73fb      	strb	r3, [r7, #15]
  //SPI_TMC5160_CS_HIGH();

  if (status != HAL_OK)
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <_ZN11SW_SPIClass8transferEh+0x2e>
	  return 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e000      	b.n	800bb94 <_ZN11SW_SPIClass8transferEh+0x30>

  return rx;
 800bb92:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	20000708 	.word	0x20000708

0800bba0 <discard_current_block>:
}Stepper_Run_Data_t;

Stepper_Run_Data_t  g_StepperData;

/*完成当前block*/
static void discard_current_block() {
 800bba0:	b580      	push	{r7, lr}
 800bba2:	af00      	add	r7, sp, #0
  current_block = NULL;
 800bba4:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <discard_current_block+0x30>)
 800bba6:	2200      	movs	r2, #0
 800bba8:	601a      	str	r2, [r3, #0]

  acceleration_time = 0;
 800bbaa:	4b0a      	ldr	r3, [pc, #40]	; (800bbd4 <discard_current_block+0x34>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	601a      	str	r2, [r3, #0]
  deceleration_time = 0;
 800bbb0:	4b09      	ldr	r3, [pc, #36]	; (800bbd8 <discard_current_block+0x38>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]

  if (g_StepperData.motionFinishedCB != NULL){
 800bbb6:	4b09      	ldr	r3, [pc, #36]	; (800bbdc <discard_current_block+0x3c>)
 800bbb8:	69db      	ldr	r3, [r3, #28]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d006      	beq.n	800bbcc <discard_current_block+0x2c>
	// Interpolation motion finished
	g_StepperData.motionFinishedCB(SCURVE_MOTION_TYPE);
 800bbbe:	4b07      	ldr	r3, [pc, #28]	; (800bbdc <discard_current_block+0x3c>)
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	4798      	blx	r3
	g_StepperData.motionFinishedCB = NULL;
 800bbc6:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <discard_current_block+0x3c>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	61da      	str	r2, [r3, #28]
  }
}
 800bbcc:	bf00      	nop
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20000d18 	.word	0x20000d18
 800bbd4:	20000d0c 	.word	0x20000d0c
 800bbd8:	20000d10 	.word	0x20000d10
 800bbdc:	20000d1c 	.word	0x20000d1c

0800bbe0 <Stepper_Init>:
/*
 * Stepper motor Initialize
 * microsteps
 */
void Stepper_Init(uint8_t microsteps)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	71fb      	strb	r3, [r7, #7]
	g_StepperData.micros = microsteps;
 800bbea:	4a17      	ldr	r2, [pc, #92]	; (800bc48 <Stepper_Init+0x68>)
 800bbec:	79fb      	ldrb	r3, [r7, #7]
 800bbee:	7313      	strb	r3, [r2, #12]
	g_StepperData.dir    = STEPPER_Dir_CW;  // clockwise
 800bbf0:	4b15      	ldr	r3, [pc, #84]	; (800bc48 <Stepper_Init+0x68>)
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	735a      	strb	r2, [r3, #13]

	g_StepperData.mode = RUN_Mode_Normal;
 800bbf6:	4b14      	ldr	r3, [pc, #80]	; (800bc48 <Stepper_Init+0x68>)
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	821a      	strh	r2, [r3, #16]
	g_StepperData.state = STEPPER_State_Stop;
 800bbfc:	4b12      	ldr	r3, [pc, #72]	; (800bc48 <Stepper_Init+0x68>)
 800bbfe:	2202      	movs	r2, #2
 800bc00:	81da      	strh	r2, [r3, #14]

	g_StepperData.currentPos = 0;
 800bc02:	4b11      	ldr	r3, [pc, #68]	; (800bc48 <Stepper_Init+0x68>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	605a      	str	r2, [r3, #4]
	g_StepperData.targetPos = 0;
 800bc08:	4b0f      	ldr	r3, [pc, #60]	; (800bc48 <Stepper_Init+0x68>)
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	601a      	str	r2, [r3, #0]

	g_StepperData.currentAngle = 0;
 800bc0e:	4b0e      	ldr	r3, [pc, #56]	; (800bc48 <Stepper_Init+0x68>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	829a      	strh	r2, [r3, #20]
	g_StepperData.targetAngle = 0;
 800bc14:	4b0c      	ldr	r3, [pc, #48]	; (800bc48 <Stepper_Init+0x68>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	825a      	strh	r2, [r3, #18]

	g_StepperData.steps = 0;
 800bc1a:	4b0b      	ldr	r3, [pc, #44]	; (800bc48 <Stepper_Init+0x68>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	609a      	str	r2, [r3, #8]

	g_StepperData.motion = NULL;
 800bc20:	4b09      	ldr	r3, [pc, #36]	; (800bc48 <Stepper_Init+0x68>)
 800bc22:	2200      	movs	r2, #0
 800bc24:	619a      	str	r2, [r3, #24]
	g_StepperData.motionFinishedCB = NULL;
 800bc26:	4b08      	ldr	r3, [pc, #32]	; (800bc48 <Stepper_Init+0x68>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	61da      	str	r2, [r3, #28]

	Stepper_SetSpeed(0);
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	f000 f83b 	bl	800bca8 <Stepper_SetSpeed>
	Stepper_SetDir(g_StepperData.dir);
 800bc32:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <Stepper_Init+0x68>)
 800bc34:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 f807 	bl	800bc4c <Stepper_SetDir>
}
 800bc3e:	bf00      	nop
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20000d1c 	.word	0x20000d1c

0800bc4c <Stepper_SetDir>:

/*
 *  Set stepper motor direction
 */
void Stepper_SetDir(uint32_t dir)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
	if (dir == STEPPER_Dir_CW) {
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d10a      	bne.n	800bc70 <Stepper_SetDir+0x24>
		g_StepperData.dir = dir;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	b25a      	sxtb	r2, r3
 800bc5e:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <Stepper_SetDir+0x50>)
 800bc60:	735a      	strb	r2, [r3, #13]
		HAL_GPIO_WritePin(Stepper_Dir_GPIO_Port, Stepper_Dir_Pin, GPIO_PIN_SET);
 800bc62:	2201      	movs	r2, #1
 800bc64:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bc68:	480d      	ldr	r0, [pc, #52]	; (800bca0 <Stepper_SetDir+0x54>)
 800bc6a:	f004 f9cd 	bl	8010008 <HAL_GPIO_WritePin>
 800bc6e:	e00c      	b.n	800bc8a <Stepper_SetDir+0x3e>
	}else if (dir == STEPPER_Dir_CCW) {
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d109      	bne.n	800bc8a <Stepper_SetDir+0x3e>
		g_StepperData.dir = dir;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	b25a      	sxtb	r2, r3
 800bc7a:	4b08      	ldr	r3, [pc, #32]	; (800bc9c <Stepper_SetDir+0x50>)
 800bc7c:	735a      	strb	r2, [r3, #13]
		HAL_GPIO_WritePin(Stepper_Dir_GPIO_Port, Stepper_Dir_Pin, GPIO_PIN_RESET);
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bc84:	4806      	ldr	r0, [pc, #24]	; (800bca0 <Stepper_SetDir+0x54>)
 800bc86:	f004 f9bf 	bl	8010008 <HAL_GPIO_WritePin>
	}

    last_direction_bits = dir;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	4b05      	ldr	r3, [pc, #20]	; (800bca4 <Stepper_SetDir+0x58>)
 800bc90:	701a      	strb	r2, [r3, #0]
}
 800bc92:	bf00      	nop
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	20000d1c 	.word	0x20000d1c
 800bca0:	40020800 	.word	0x40020800
 800bca4:	20000d14 	.word	0x20000d14

0800bca8 <Stepper_SetSpeed>:

/*
 *  Set stepper motor speed
 */
void Stepper_SetSpeed(uint32_t speed)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
	if (speed >= 120000) return;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a10      	ldr	r2, [pc, #64]	; (800bcf4 <Stepper_SetSpeed+0x4c>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d816      	bhi.n	800bce6 <Stepper_SetSpeed+0x3e>

	/* Maximum 16bit speed, 120000*/
	/*Speed calc, steps(speed) per 1 second
	 * 2M tim1 frequency, 160MHz/80Prescaler */
	uint32_t prescaler = 2000000;
 800bcb8:	4b0f      	ldr	r3, [pc, #60]	; (800bcf8 <Stepper_SetSpeed+0x50>)
 800bcba:	60bb      	str	r3, [r7, #8]
	uint32_t period = prescaler;
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	60fb      	str	r3, [r7, #12]

	if (speed != 0)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d005      	beq.n	800bcd2 <Stepper_SetSpeed+0x2a>
		period = (prescaler / speed) - 1;
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	60fb      	str	r3, [r7, #12]

	htim1.Instance->ARR = period;
 800bcd2:	4b0a      	ldr	r3, [pc, #40]	; (800bcfc <Stepper_SetSpeed+0x54>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR1 = period >> 1;  // pulse width
 800bcda:	4b08      	ldr	r3, [pc, #32]	; (800bcfc <Stepper_SetSpeed+0x54>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	0852      	lsrs	r2, r2, #1
 800bce2:	635a      	str	r2, [r3, #52]	; 0x34
 800bce4:	e000      	b.n	800bce8 <Stepper_SetSpeed+0x40>
	if (speed >= 120000) return;
 800bce6:	bf00      	nop
}
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	0001d4bf 	.word	0x0001d4bf
 800bcf8:	001e8480 	.word	0x001e8480
 800bcfc:	200007fc 	.word	0x200007fc

0800bd00 <Stepper_Stop>:
	Stepper_RunSteps(steps);
}

/* Stepper motor stop*/
void Stepper_Stop()
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	af00      	add	r7, sp, #0
	g_StepperData.state = STEPPER_State_Stop;
 800bd04:	4b05      	ldr	r3, [pc, #20]	; (800bd1c <Stepper_Stop+0x1c>)
 800bd06:	2202      	movs	r2, #2
 800bd08:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	4804      	ldr	r0, [pc, #16]	; (800bd20 <Stepper_Stop+0x20>)
 800bd0e:	f005 fa77 	bl	8011200 <HAL_TIM_PWM_Stop_IT>

	//Clear all of blocks
	discard_current_block();
 800bd12:	f7ff ff45 	bl	800bba0 <discard_current_block>
}
 800bd16:	bf00      	nop
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	20000d1c 	.word	0x20000d1c
 800bd20:	200007fc 	.word	0x200007fc

0800bd24 <Stepper_Run>:
	return g_StepperData.state;
}

/* Stepper motor run*/
void Stepper_Run()
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	af00      	add	r7, sp, #0
	g_StepperData.mode  = RUN_Mode_Normal;
 800bd28:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <Stepper_Run+0x1c>)
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	821a      	strh	r2, [r3, #16]
	g_StepperData.state = STEPPER_State_Running;
 800bd2e:	4b04      	ldr	r3, [pc, #16]	; (800bd40 <Stepper_Run+0x1c>)
 800bd30:	2201      	movs	r2, #1
 800bd32:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800bd34:	2100      	movs	r1, #0
 800bd36:	4803      	ldr	r0, [pc, #12]	; (800bd44 <Stepper_Run+0x20>)
 800bd38:	f005 f9de 	bl	80110f8 <HAL_TIM_PWM_Start_IT>
}
 800bd3c:	bf00      	nop
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	20000d1c 	.word	0x20000d1c
 800bd44:	200007fc 	.word	0x200007fc

0800bd48 <Stepper_StepsISR>:
}


/* Per step interrupt service routine*/
void Stepper_StepsISR()
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	af00      	add	r7, sp, #0
	// record the count
	if (g_StepperData.dir == STEPPER_Dir_CW){
 800bd4c:	4b0b      	ldr	r3, [pc, #44]	; (800bd7c <Stepper_StepsISR+0x34>)
 800bd4e:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d105      	bne.n	800bd62 <Stepper_StepsISR+0x1a>
		g_StepperData.steps --;
 800bd56:	4b09      	ldr	r3, [pc, #36]	; (800bd7c <Stepper_StepsISR+0x34>)
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	4a07      	ldr	r2, [pc, #28]	; (800bd7c <Stepper_StepsISR+0x34>)
 800bd5e:	6093      	str	r3, [r2, #8]
 800bd60:	e004      	b.n	800bd6c <Stepper_StepsISR+0x24>
	}else{
		g_StepperData.steps ++;
 800bd62:	4b06      	ldr	r3, [pc, #24]	; (800bd7c <Stepper_StepsISR+0x34>)
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	3301      	adds	r3, #1
 800bd68:	4a04      	ldr	r2, [pc, #16]	; (800bd7c <Stepper_StepsISR+0x34>)
 800bd6a:	6093      	str	r3, [r2, #8]
	}

	if (g_StepperData.steps == 0){
 800bd6c:	4b03      	ldr	r3, [pc, #12]	; (800bd7c <Stepper_StepsISR+0x34>)
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d101      	bne.n	800bd78 <Stepper_StepsISR+0x30>
		Stepper_Stop();
 800bd74:	f7ff ffc4 	bl	800bd00 <Stepper_Stop>
	}
}
 800bd78:	bf00      	nop
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	20000d1c 	.word	0x20000d1c

0800bd80 <HAL_TIM_PWM_PulseFinishedCallback>:

/*
 * User defined cb, Stepper Tim channel:
 **/
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a08      	ldr	r2, [pc, #32]	; (800bdb0 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d10a      	bne.n	800bda8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		// check the channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	7f1b      	ldrb	r3, [r3, #28]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d106      	bne.n	800bda8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>

			/*Per step call back stepsisr*/
			if (g_StepperData.mode == RUN_Mode_StepsControl){
 800bd9a:	4b06      	ldr	r3, [pc, #24]	; (800bdb4 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 800bd9c:	8a1b      	ldrh	r3, [r3, #16]
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d102      	bne.n	800bda8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
				Stepper_StepsISR();
 800bda2:	f7ff ffd1 	bl	800bd48 <Stepper_StepsISR>
				return;
 800bda6:	bf00      	nop
			}

			/**/
		}
	}
}
 800bda8:	3708      	adds	r7, #8
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	40010000 	.word	0x40010000
 800bdb4:	20000d1c 	.word	0x20000d1c

0800bdb8 <_ZN14TMC2130Stepper8CHOPCONFEv>:
#include "TMC_MACROS.h"

#define SET_REG(SETTING) CHOPCONF_register.SETTING = B; write(CHOPCONF_register.address, CHOPCONF_register.sr)

// CHOPCONF
uint32_t TMC2130Stepper::CHOPCONF() {
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
	return read(CHOPCONF_register.address);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	3304      	adds	r3, #4
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	216c      	movs	r1, #108	; 0x6c
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	4798      	blx	r3
 800bdce:	4603      	mov	r3, r0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <_ZN14TMC2130Stepper8CHOPCONFEm>:
void TMC2130Stepper::CHOPCONF(uint32_t input) {
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
	CHOPCONF_register.sr = input;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	f8c3 2025 	str.w	r2, [r3, #37]	; 0x25
	write(CHOPCONF_register.address, CHOPCONF_register.sr);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800bdf6:	216c      	movs	r1, #108	; 0x6c
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	4798      	blx	r3
}
 800bdfc:	bf00      	nop
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <_ZN14TMC2130Stepper4toffEh>:

void TMC2130Stepper::toff(		uint8_t B )	{ SET_REG(toff);	}
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	70fb      	strb	r3, [r7, #3]
 800be10:	78fb      	ldrb	r3, [r7, #3]
 800be12:	f003 030f 	and.w	r3, r3, #15
 800be16:	b2d9      	uxtb	r1, r3
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800be1e:	f361 0303 	bfi	r3, r1, #0, #4
 800be22:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800be32:	216c      	movs	r1, #108	; 0x6c
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	4798      	blx	r3
 800be38:	bf00      	nop
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <_ZN14TMC2130Stepper5hstrtEh>:
void TMC2130Stepper::hstrt(		uint8_t B )	{ SET_REG(hstrt);	}
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	70fb      	strb	r3, [r7, #3]
 800be4c:	78fb      	ldrb	r3, [r7, #3]
 800be4e:	f003 0307 	and.w	r3, r3, #7
 800be52:	b2d9      	uxtb	r1, r3
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800be5a:	f361 1306 	bfi	r3, r1, #4, #3
 800be5e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800be6e:	216c      	movs	r1, #108	; 0x6c
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	4798      	blx	r3
 800be74:	bf00      	nop
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <_ZN14TMC2130Stepper4hendEh>:
void TMC2130Stepper::hend(		uint8_t B )	{ SET_REG(hend);	}
 800be7c:	b590      	push	{r4, r7, lr}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	460b      	mov	r3, r1
 800be86:	70fb      	strb	r3, [r7, #3]
 800be88:	78fb      	ldrb	r3, [r7, #3]
 800be8a:	f003 030f 	and.w	r3, r3, #15
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f002 0101 	and.w	r1, r2, #1
 800be96:	01cc      	lsls	r4, r1, #7
 800be98:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 800be9c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800bea0:	4608      	mov	r0, r1
 800bea2:	4621      	mov	r1, r4
 800bea4:	4301      	orrs	r1, r0
 800bea6:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
 800beaa:	0852      	lsrs	r2, r2, #1
 800beac:	b2d2      	uxtb	r2, r2
 800beae:	f002 0207 	and.w	r2, r2, #7
 800beb2:	f002 0007 	and.w	r0, r2, #7
 800beb6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800beba:	f022 0207 	bic.w	r2, r2, #7
 800bebe:	4611      	mov	r1, r2
 800bec0:	4602      	mov	r2, r0
 800bec2:	430a      	orrs	r2, r1
 800bec4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800bed4:	216c      	movs	r1, #108	; 0x6c
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	4798      	blx	r3
 800beda:	bf00      	nop
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd90      	pop	{r4, r7, pc}

0800bee2 <_ZN14TMC2130Stepper3chmEb>:
//void TMC2130Stepper::fd(		uint8_t B )	{ SET_REG(fd);		}
void TMC2130Stepper::disfdcc(	bool 	B )	{ SET_REG(disfdcc);	}
void TMC2130Stepper::rndtf(		bool 	B )	{ SET_REG(rndtf);	}
void TMC2130Stepper::chm(		bool 	B )	{ SET_REG(chm);		}
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b082      	sub	sp, #8
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	460b      	mov	r3, r1
 800beec:	70fb      	strb	r3, [r7, #3]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800bef4:	78f9      	ldrb	r1, [r7, #3]
 800bef6:	f361 1386 	bfi	r3, r1, #6, #1
 800befa:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800bf0a:	216c      	movs	r1, #108	; 0x6c
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	4798      	blx	r3
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <_ZN14TMC2130Stepper3tblEh>:
void TMC2130Stepper::tbl(		uint8_t B )	{ SET_REG(tbl);		}
 800bf18:	b590      	push	{r4, r7, lr}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	460b      	mov	r3, r1
 800bf22:	70fb      	strb	r3, [r7, #3]
 800bf24:	78fb      	ldrb	r3, [r7, #3]
 800bf26:	f003 0303 	and.w	r3, r3, #3
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f002 0101 	and.w	r1, r2, #1
 800bf32:	01cc      	lsls	r4, r1, #7
 800bf34:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 800bf38:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	4621      	mov	r1, r4
 800bf40:	4301      	orrs	r1, r0
 800bf42:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
 800bf46:	0852      	lsrs	r2, r2, #1
 800bf48:	b2d2      	uxtb	r2, r2
 800bf4a:	f002 0201 	and.w	r2, r2, #1
 800bf4e:	f002 0001 	and.w	r0, r2, #1
 800bf52:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800bf56:	f022 0201 	bic.w	r2, r2, #1
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	430a      	orrs	r2, r1
 800bf60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800bf70:	216c      	movs	r1, #108	; 0x6c
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	4798      	blx	r3
 800bf76:	bf00      	nop
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd90      	pop	{r4, r7, pc}

0800bf7e <_ZN14TMC2130Stepper6vsenseEb>:
void TMC2130Stepper::vsense(	bool 	B )	{ SET_REG(vsense);	}
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b082      	sub	sp, #8
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	460b      	mov	r3, r1
 800bf88:	70fb      	strb	r3, [r7, #3]
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
 800bf90:	78f9      	ldrb	r1, [r7, #3]
 800bf92:	f361 0341 	bfi	r3, r1, #1, #1
 800bf96:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800bfa6:	216c      	movs	r1, #108	; 0x6c
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	4798      	blx	r3
 800bfac:	bf00      	nop
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <_ZN14TMC2130Stepper4mresEh>:
void TMC2130Stepper::vhighfs(	bool 	B )	{ SET_REG(vhighfs);	}
void TMC2130Stepper::vhighchm(	bool 	B )	{ SET_REG(vhighchm);}
void TMC2130Stepper::sync(		uint8_t B )	{ SET_REG(sync);	}
void TMC2130Stepper::mres(		uint8_t B )	{ SET_REG(mres);	}
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
 800bfc0:	78fb      	ldrb	r3, [r7, #3]
 800bfc2:	f003 030f 	and.w	r3, r3, #15
 800bfc6:	b2d9      	uxtb	r1, r3
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800bfce:	f361 0303 	bfi	r3, r1, #0, #4
 800bfd2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800bfe2:	216c      	movs	r1, #108	; 0x6c
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	4798      	blx	r3
 800bfe8:	bf00      	nop
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <_ZN14TMC2130Stepper6intpolEb>:
void TMC2130Stepper::intpol(	bool 	B )	{ SET_REG(intpol);	}
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70fb      	strb	r3, [r7, #3]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800c002:	78f9      	ldrb	r1, [r7, #3]
 800c004:	f361 1304 	bfi	r3, r1, #4, #1
 800c008:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c018:	216c      	movs	r1, #108	; 0x6c
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	4798      	blx	r3
 800c01e:	bf00      	nop
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <_ZN14TMC2130Stepper4toffEv>:
void TMC2130Stepper::dedge(		bool 	B )	{ SET_REG(dedge);	}
void TMC2130Stepper::diss2g(	bool 	B )	{ SET_REG(diss2g);	}

uint8_t TMC2130Stepper::toff()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;	}
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	2300      	movs	r3, #0
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f7ff fec0 	bl	800bdb8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c038:	4603      	mov	r3, r0
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	7b3b      	ldrb	r3, [r7, #12]
 800c03e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c042:	b2db      	uxtb	r3, r3
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <_ZN14TMC2130Stepper5hstrtEv>:
uint8_t TMC2130Stepper::hstrt()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;	}
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	2300      	movs	r3, #0
 800c056:	60fb      	str	r3, [r7, #12]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7ff fead 	bl	800bdb8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c05e:	4603      	mov	r3, r0
 800c060:	60fb      	str	r3, [r7, #12]
 800c062:	7b3b      	ldrb	r3, [r7, #12]
 800c064:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <_ZN14TMC2130Stepper4hendEv>:
uint8_t TMC2130Stepper::hend()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;	}
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	2300      	movs	r3, #0
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff fe9a 	bl	800bdb8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c084:	4603      	mov	r3, r0
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	89bb      	ldrh	r3, [r7, #12]
 800c08a:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <_ZN14TMC2130Stepper3tblEv>:
//uint8_t TMC2130Stepper::fd()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.fd;		}
bool 	TMC2130Stepper::disfdcc()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.disfdcc;	}
bool 	TMC2130Stepper::rndtf()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.rndtf;	}
bool 	TMC2130Stepper::chm()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.chm;		}
uint8_t TMC2130Stepper::tbl()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;		}
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7ff fe87 	bl	800bdb8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <_ZN14TMC2130Stepper6vsenseEv>:
bool 	TMC2130Stepper::vsense()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;	}
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b084      	sub	sp, #16
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	60fb      	str	r3, [r7, #12]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff fe74 	bl	800bdb8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
 800c0d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <_ZN14TMC2130Stepper4mresEv>:
bool 	TMC2130Stepper::vhighfs()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighfs;	}
bool 	TMC2130Stepper::vhighchm()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighchm;}
uint8_t TMC2130Stepper::sync()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.sync;	}
uint8_t TMC2130Stepper::mres()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;	}
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	60fb      	str	r3, [r7, #12]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f7ff fe61 	bl	800bdb8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	7bfb      	ldrb	r3, [r7, #15]
 800c0fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c100:	b2db      	uxtb	r3, r3
 800c102:	4618      	mov	r0, r3
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <_ZN14TMC2130Stepper8COOLCONFEm>:
#define SET_REG(SETTING) COOLCONF_register.SETTING = B; write(COOLCONF_register.address, COOLCONF_register.sr);
#define GET_REG(SETTING) return COOLCONF_register.SETTING;

// COOLCONF
uint32_t TMC2130Stepper::COOLCONF() { return COOLCONF_register.sr; }
void TMC2130Stepper::COOLCONF(uint32_t input) {
 800c10a:	b590      	push	{r4, r7, lr}
 800c10c:	b083      	sub	sp, #12
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	6039      	str	r1, [r7, #0]
	COOLCONF_register.sr = input;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
 800c120:	0209      	lsls	r1, r1, #8
 800c122:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c124:	b2c0      	uxtb	r0, r0
 800c126:	4301      	orrs	r1, r0
 800c128:	6299      	str	r1, [r3, #40]	; 0x28
 800c12a:	0e12      	lsrs	r2, r2, #24
 800c12c:	f002 0201 	and.w	r2, r2, #1
 800c130:	f002 0001 	and.w	r0, r2, #1
 800c134:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c138:	f022 0201 	bic.w	r2, r2, #1
 800c13c:	4611      	mov	r1, r2
 800c13e:	4602      	mov	r2, r0
 800c140:	430a      	orrs	r2, r1
 800c142:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	write(COOLCONF_register.address, COOLCONF_register.sr);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	681c      	ldr	r4, [r3, #0]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c150:	0a12      	lsrs	r2, r2, #8
 800c152:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	061b      	lsls	r3, r3, #24
 800c15c:	4313      	orrs	r3, r2
 800c15e:	461a      	mov	r2, r3
 800c160:	216d      	movs	r1, #109	; 0x6d
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	47a0      	blx	r4
}
 800c166:	bf00      	nop
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd90      	pop	{r4, r7, pc}

0800c16e <_ZN14TMC2130Stepper5seminEh>:

void TMC2130Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 800c16e:	b590      	push	{r4, r7, lr}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	460b      	mov	r3, r1
 800c178:	70fb      	strb	r3, [r7, #3]
 800c17a:	78fb      	ldrb	r3, [r7, #3]
 800c17c:	f003 030f 	and.w	r3, r3, #15
 800c180:	b2d9      	uxtb	r1, r3
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 800c188:	f361 0303 	bfi	r3, r1, #0, #4
 800c18c:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	681c      	ldr	r4, [r3, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c19a:	0a12      	lsrs	r2, r2, #8
 800c19c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c1a0:	f003 0301 	and.w	r3, r3, #1
 800c1a4:	061b      	lsls	r3, r3, #24
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	216d      	movs	r1, #109	; 0x6d
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	47a0      	blx	r4
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd90      	pop	{r4, r7, pc}

0800c1b8 <_ZN14TMC2130Stepper5semaxEh>:
void TMC2130Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2130Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 800c1b8:	b590      	push	{r4, r7, lr}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	70fb      	strb	r3, [r7, #3]
 800c1c4:	78fb      	ldrb	r3, [r7, #3]
 800c1c6:	f003 030f 	and.w	r3, r3, #15
 800c1ca:	b2d9      	uxtb	r1, r3
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800c1d2:	f361 0303 	bfi	r3, r1, #0, #4
 800c1d6:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	681c      	ldr	r4, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1e4:	0a12      	lsrs	r2, r2, #8
 800c1e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c1ea:	f003 0301 	and.w	r3, r3, #1
 800c1ee:	061b      	lsls	r3, r3, #24
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	216d      	movs	r1, #109	; 0x6d
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	47a0      	blx	r4
 800c1fa:	bf00      	nop
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd90      	pop	{r4, r7, pc}

0800c202 <_ZN14TMC2130Stepper4sednEh>:
void TMC2130Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 800c202:	b590      	push	{r4, r7, lr}
 800c204:	b083      	sub	sp, #12
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	460b      	mov	r3, r1
 800c20c:	70fb      	strb	r3, [r7, #3]
 800c20e:	78fb      	ldrb	r3, [r7, #3]
 800c210:	f003 0303 	and.w	r3, r3, #3
 800c214:	b2d9      	uxtb	r1, r3
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800c21c:	f361 1346 	bfi	r3, r1, #5, #2
 800c220:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681c      	ldr	r4, [r3, #0]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c22e:	0a12      	lsrs	r2, r2, #8
 800c230:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c234:	f003 0301 	and.w	r3, r3, #1
 800c238:	061b      	lsls	r3, r3, #24
 800c23a:	4313      	orrs	r3, r2
 800c23c:	461a      	mov	r2, r3
 800c23e:	216d      	movs	r1, #109	; 0x6d
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	47a0      	blx	r4
 800c244:	bf00      	nop
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd90      	pop	{r4, r7, pc}

0800c24c <_ZN14TMC2130Stepper3sgtEa>:
void TMC2130Stepper::seimin(bool 	B )	{ SET_REG(seimin);	}
void TMC2130Stepper::sgt(	int8_t  B )	{ SET_REG(sgt);		}
 800c24c:	b590      	push	{r4, r7, lr}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	70fb      	strb	r3, [r7, #3]
 800c258:	78fb      	ldrb	r3, [r7, #3]
 800c25a:	005b      	lsls	r3, r3, #1
 800c25c:	b25b      	sxtb	r3, r3
 800c25e:	105b      	asrs	r3, r3, #1
 800c260:	b259      	sxtb	r1, r3
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 800c268:	f361 0306 	bfi	r3, r1, #0, #7
 800c26c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681c      	ldr	r4, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c27a:	0a12      	lsrs	r2, r2, #8
 800c27c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	061b      	lsls	r3, r3, #24
 800c286:	4313      	orrs	r3, r2
 800c288:	461a      	mov	r2, r3
 800c28a:	216d      	movs	r1, #109	; 0x6d
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	47a0      	blx	r4
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	bd90      	pop	{r4, r7, pc}

0800c298 <_ZN14TMC2160Stepper8DRV_CONFEm>:
#define SET_REG(SETTING) DRV_CONF_register.SETTING = B; write(DRV_CONF_register.address, DRV_CONF_register.sr);
#define GET_REG(SETTING) return DRV_CONF_register.SETTING;

// W: DRV_CONF
uint32_t TMC2160Stepper::DRV_CONF() { return DRV_CONF_register.sr; }
void TMC2160Stepper::DRV_CONF(uint32_t input) {
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
	DRV_CONF_register.sr = input;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	f3c3 0115 	ubfx	r1, r3, #0, #22
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c2ac:	f361 0315 	bfi	r3, r1, #0, #22
 800c2b0:	6413      	str	r3, [r2, #64]	; 0x40
	write(DRV_CONF_register.address, DRV_CONF_register.sr);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c2be:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800c2c2:	210a      	movs	r1, #10
 800c2c4:	4798      	blx	r3
}
 800c2c6:	bf00      	nop
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <_ZN14TMC2130Stepper10DRV_STATUSEv>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

#define GET_REG(NS, SETTING) NS::DRV_STATUS_t r{0}; r.sr = DRV_STATUS(); return r.SETTING

uint32_t TMC2130Stepper::DRV_STATUS() { return read(DRV_STATUS_t::address); }
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b082      	sub	sp, #8
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	3304      	adds	r3, #4
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	216f      	movs	r1, #111	; 0x6f
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	4798      	blx	r3
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3708      	adds	r7, #8
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <_ZN14TMC5130Stepper7ENCMODEEm>:

// ENCMODE
uint32_t TMC5130Stepper::ENCMODE() {
	return read(ENCMODE_register.address);
}
void TMC5130Stepper::ENCMODE(uint32_t input) {
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b082      	sub	sp, #8
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	6039      	str	r1, [r7, #0]
	ENCMODE_register.sr = input;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c2fe:	b299      	uxth	r1, r3
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	f8b2 306c 	ldrh.w	r3, [r2, #108]	; 0x6c
 800c306:	f361 030a 	bfi	r3, r1, #0, #11
 800c30a:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
	write(ENCMODE_register.address, ENCMODE_register.sr);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 800c31c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800c320:	b292      	uxth	r2, r2
 800c322:	2138      	movs	r1, #56	; 0x38
 800c324:	4798      	blx	r3
}
 800c326:	bf00      	nop
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <_ZN14TMC2130Stepper5GCONFEm>:

// GCONF
uint32_t TMC2130Stepper::GCONF() {
	return read(GCONF_register.address);
}
void TMC2130Stepper::GCONF(uint32_t input) {
 800c32e:	b580      	push	{r7, lr}
 800c330:	b082      	sub	sp, #8
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	6039      	str	r1, [r7, #0]
	GCONF_register.sr = input;
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	6953      	ldr	r3, [r2, #20]
 800c342:	f361 2319 	bfi	r3, r1, #8, #18
 800c346:	6153      	str	r3, [r2, #20]
	write(GCONF_register.address, GCONF_register.sr);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	6952      	ldr	r2, [r2, #20]
 800c352:	f3c2 2211 	ubfx	r2, r2, #8, #18
 800c356:	2100      	movs	r1, #0
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	4798      	blx	r3
}
 800c35c:	bf00      	nop
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <_ZN10TMCStepper10IHOLD_IRUNEm>:
#define SET_REG(SETTING) IHOLD_IRUN_register.SETTING = B; write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
#define GET_REG(SETTING) return IHOLD_IRUN_register.SETTING;

// IHOLD_IRUN
uint32_t TMCStepper::IHOLD_IRUN() { return IHOLD_IRUN_register.sr; }
void TMCStepper::IHOLD_IRUN(uint32_t input) {
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
	IHOLD_IRUN_register.sr = input;
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	6853      	ldr	r3, [r2, #4]
 800c378:	f361 0313 	bfi	r3, r1, #0, #20
 800c37c:	6053      	str	r3, [r2, #4]
	write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	6852      	ldr	r2, [r2, #4]
 800c388:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c38c:	2110      	movs	r1, #16
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	4798      	blx	r3
}
 800c392:	bf00      	nop
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <_ZN10TMCStepper5iholdEh>:

void 	TMCStepper::ihold(uint8_t B) 		{ SET_REG(ihold);		}
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b082      	sub	sp, #8
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	70fb      	strb	r3, [r7, #3]
 800c3a6:	78fb      	ldrb	r3, [r7, #3]
 800c3a8:	f003 031f 	and.w	r3, r3, #31
 800c3ac:	b2d9      	uxtb	r1, r3
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	7913      	ldrb	r3, [r2, #4]
 800c3b2:	f361 0304 	bfi	r3, r1, #0, #5
 800c3b6:	7113      	strb	r3, [r2, #4]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	6852      	ldr	r2, [r2, #4]
 800c3c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c3c6:	2110      	movs	r1, #16
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	4798      	blx	r3
 800c3cc:	bf00      	nop
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <_ZN10TMCStepper4irunEh>:
void 	TMCStepper::irun(uint8_t B)  		{ SET_REG(irun); 		}
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	70fb      	strb	r3, [r7, #3]
 800c3e0:	78fb      	ldrb	r3, [r7, #3]
 800c3e2:	f003 031f 	and.w	r3, r3, #31
 800c3e6:	b2d9      	uxtb	r1, r3
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	7953      	ldrb	r3, [r2, #5]
 800c3ec:	f361 0304 	bfi	r3, r1, #0, #5
 800c3f0:	7153      	strb	r3, [r2, #5]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	6852      	ldr	r2, [r2, #4]
 800c3fc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c400:	2110      	movs	r1, #16
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	4798      	blx	r3
 800c406:	bf00      	nop
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <_ZN14TMC2160Stepper7PWMCONFEm>:
uint8_t TMC2130Stepper::freewheel()		{ GET_REG(freewheel);		}

uint32_t TMC2160Stepper::PWMCONF() {
	return PWMCONF_register.sr;
}
void TMC2160Stepper::PWMCONF(uint32_t input) {
 800c40e:	b580      	push	{r7, lr}
 800c410:	b082      	sub	sp, #8
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	6039      	str	r1, [r7, #0]
	PWMCONF_register.sr = input;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	645a      	str	r2, [r3, #68]	; 0x44
	write(PWMCONF_register.address, PWMCONF_register.sr);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c42a:	2170      	movs	r1, #112	; 0x70
 800c42c:	4798      	blx	r3
}
 800c42e:	bf00      	nop
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <_ZN14TMC2160Stepper8pwm_freqEh>:

void TMC2160Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
 800c436:	b580      	push	{r7, lr}
 800c438:	b082      	sub	sp, #8
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	460b      	mov	r3, r1
 800c440:	70fb      	strb	r3, [r7, #3]
 800c442:	78fb      	ldrb	r3, [r7, #3]
 800c444:	f003 0303 	and.w	r3, r3, #3
 800c448:	b2d9      	uxtb	r1, r3
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 800c450:	f361 0301 	bfi	r3, r1, #0, #2
 800c454:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c464:	2170      	movs	r1, #112	; 0x70
 800c466:	4798      	blx	r3
 800c468:	bf00      	nop
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <_ZN14TMC2160Stepper10SHORT_CONFEm>:

#define SET_REG(SETTING) SHORT_CONF_register.SETTING = B; write(SHORT_CONF_register.address, SHORT_CONF_register.sr)
#define GET_REG(SETTING) return SHORT_CONF_register.SETTING

uint32_t TMC2160Stepper::SHORT_CONF() { return SHORT_CONF_register.sr; }
void TMC2160Stepper::SHORT_CONF(uint32_t input) {
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
	SHORT_CONF_register.sr = input;
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	f3c3 0112 	ubfx	r1, r3, #0, #19
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800c484:	f361 231a 	bfi	r3, r1, #8, #19
 800c488:	63d3      	str	r3, [r2, #60]	; 0x3c
	write(SHORT_CONF_register.address, SHORT_CONF_register.sr);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c496:	f3c2 2212 	ubfx	r2, r2, #8, #19
 800c49a:	2109      	movs	r1, #9
 800c49c:	4798      	blx	r3
}
 800c49e:	bf00      	nop
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <_ZN14TMC5130Stepper7SW_MODEEm>:

// SW_MODE
uint32_t TMC5130Stepper::SW_MODE() {
	return read(SW_MODE_register.address);
}
void TMC5130Stepper::SW_MODE(uint32_t input) {
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b082      	sub	sp, #8
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	6039      	str	r1, [r7, #0]
	SW_MODE_register.sr = input;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4b6:	b299      	uxth	r1, r3
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	f8b2 306a 	ldrh.w	r3, [r2, #106]	; 0x6a
 800c4be:	f361 030b 	bfi	r3, r1, #0, #12
 800c4c2:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
	write(SW_MODE_register.address, SW_MODE_register.sr);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 800c4d4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800c4d8:	b292      	uxth	r2, r2
 800c4da:	2134      	movs	r1, #52	; 0x34
 800c4dc:	4798      	blx	r3
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
	...

0800c4e8 <_ZN10TMCStepperC1Ef>:
		uint32_t MSCURACT();
		int16_t cur_a();
		int16_t cur_b();

	protected:
		TMCStepper(float RS) : Rsense(RS) {};
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	ed87 0a00 	vstr	s0, [r7]
 800c4f4:	4a10      	ldr	r2, [pc, #64]	; (800c538 <_ZN10TMCStepperC1Ef+0x50>)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	601a      	str	r2, [r3, #0]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	2100      	movs	r1, #0
 800c500:	460a      	mov	r2, r1
 800c502:	801a      	strh	r2, [r3, #0]
 800c504:	460a      	mov	r2, r1
 800c506:	709a      	strb	r2, [r3, #2]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	71da      	strb	r2, [r3, #7]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	811a      	strh	r2, [r3, #8]
 800c514:	7a9a      	ldrb	r2, [r3, #10]
 800c516:	f022 020f 	bic.w	r2, r2, #15
 800c51a:	729a      	strb	r2, [r3, #10]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	60da      	str	r2, [r3, #12]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800c528:	611a      	str	r2, [r3, #16]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	08018c18 	.word	0x08018c18

0800c53c <_ZN14TMC2130StepperC1Etfttta>:

    if (link > chain_length)
      chain_length = link;
  }

TMC2130Stepper::TMC2130Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
 800c53c:	b590      	push	{r4, r7, lr}
 800c53e:	b087      	sub	sp, #28
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	4608      	mov	r0, r1
 800c546:	ed87 0a01 	vstr	s0, [r7, #4]
 800c54a:	4611      	mov	r1, r2
 800c54c:	461a      	mov	r2, r3
 800c54e:	4603      	mov	r3, r0
 800c550:	817b      	strh	r3, [r7, #10]
 800c552:	460b      	mov	r3, r1
 800c554:	813b      	strh	r3, [r7, #8]
 800c556:	4613      	mov	r3, r2
 800c558:	807b      	strh	r3, [r7, #2]
  TMCStepper(RS),
  _pinCS(pinCS),
  link_index(link)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	ed97 0a01 	vldr	s0, [r7, #4]
 800c560:	4618      	mov	r0, r3
 800c562:	f7ff ffc1 	bl	800c4e8 <_ZN10TMCStepperC1Ef>
 800c566:	4a3d      	ldr	r2, [pc, #244]	; (800c65c <_ZN14TMC2130StepperC1Etfttta+0x120>)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	601a      	str	r2, [r3, #0]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3315      	adds	r3, #21
 800c570:	2200      	movs	r2, #0
 800c572:	801a      	strh	r2, [r3, #0]
 800c574:	709a      	strb	r2, [r3, #2]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2200      	movs	r2, #0
 800c57a:	831a      	strh	r2, [r3, #24]
 800c57c:	7e9a      	ldrb	r2, [r3, #26]
 800c57e:	f022 020f 	bic.w	r2, r2, #15
 800c582:	769a      	strb	r2, [r3, #26]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	76da      	strb	r2, [r3, #27]
 800c58a:	2200      	movs	r2, #0
 800c58c:	771a      	strb	r2, [r3, #28]
 800c58e:	7f5a      	ldrb	r2, [r3, #29]
 800c590:	f022 020f 	bic.w	r2, r2, #15
 800c594:	775a      	strb	r2, [r3, #29]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	83da      	strh	r2, [r3, #30]
 800c59c:	8c1a      	ldrh	r2, [r3, #32]
 800c59e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800c5a2:	f022 0201 	bic.w	r2, r2, #1
 800c5a6:	841a      	strh	r2, [r3, #32]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	845a      	strh	r2, [r3, #34]	; 0x22
 800c5ae:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c5b2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800c5b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5be:	b2d2      	uxtb	r2, r2
 800c5c0:	625a      	str	r2, [r3, #36]	; 0x24
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5cc:	b2d2      	uxtb	r2, r2
 800c5ce:	629a      	str	r2, [r3, #40]	; 0x28
 800c5d0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c5d4:	f022 0201 	bic.w	r2, r2, #1
 800c5d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	332d      	adds	r3, #45	; 0x2d
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	801a      	strh	r2, [r3, #0]
 800c5e4:	709a      	strb	r2, [r3, #2]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	3330      	adds	r3, #48	; 0x30
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	460a      	mov	r2, r1
 800c5ee:	801a      	strh	r2, [r3, #0]
 800c5f0:	460a      	mov	r2, r1
 800c5f2:	709a      	strb	r2, [r3, #2]
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 800c5fa:	f36f 0301 	bfc	r3, #0, #2
 800c5fe:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	897a      	ldrh	r2, [r7, #10]
 800c606:	869a      	strh	r2, [r3, #52]	; 0x34
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2200      	movs	r2, #0
 800c60c:	639a      	str	r2, [r3, #56]	; 0x38
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  {
    SW_SPIClass *SW_SPI_Obj = new SW_SPIClass(pinMOSI, pinMISO, pinSCK);
 800c618:	2006      	movs	r0, #6
 800c61a:	f00a f923 	bl	8016864 <_Znwj>
 800c61e:	4603      	mov	r3, r0
 800c620:	461c      	mov	r4, r3
 800c622:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c624:	887a      	ldrh	r2, [r7, #2]
 800c626:	8939      	ldrh	r1, [r7, #8]
 800c628:	4620      	mov	r0, r4
 800c62a:	f7ff fa53 	bl	800bad4 <_ZN11SW_SPIClassC1Ettt>
 800c62e:	617c      	str	r4, [r7, #20]
    TMC_SW_SPI = SW_SPI_Obj;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	639a      	str	r2, [r3, #56]	; 0x38
    defaults();
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f000 f814 	bl	800c664 <_ZN14TMC2130Stepper8defaultsEv>

    if (link > chain_length)
 800c63c:	4b08      	ldr	r3, [pc, #32]	; (800c660 <_ZN14TMC2130StepperC1Etfttta+0x124>)
 800c63e:	f993 3000 	ldrsb.w	r3, [r3]
 800c642:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 800c646:	429a      	cmp	r2, r3
 800c648:	dd03      	ble.n	800c652 <_ZN14TMC2130StepperC1Etfttta+0x116>
      chain_length = link;
 800c64a:	4a05      	ldr	r2, [pc, #20]	; (800c660 <_ZN14TMC2130StepperC1Etfttta+0x124>)
 800c64c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c650:	7013      	strb	r3, [r2, #0]
  }
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	4618      	mov	r0, r3
 800c656:	371c      	adds	r7, #28
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd90      	pop	{r4, r7, pc}
 800c65c:	08018bdc 	.word	0x08018bdc
 800c660:	20000d3c 	.word	0x20000d3c

0800c664 <_ZN14TMC2130Stepper8defaultsEv>:

void TMC2130Stepper::defaults() {
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c670:	4904      	ldr	r1, [pc, #16]	; (800c684 <_ZN14TMC2130Stepper8defaultsEv+0x20>)
 800c672:	f361 0315 	bfi	r3, r1, #0, #22
 800c676:	6313      	str	r3, [r2, #48]	; 0x30
}
 800c678:	bf00      	nop
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr
 800c684:	00050480 	.word	0x00050480

0800c688 <_ZN14TMC2130Stepper11switchCSpinEb>:
void TMC2130Stepper::setSPISpeed(uint32_t speed) {
  spi_speed = speed;
}

__attribute__((weak))
void TMC2130Stepper::switchCSpin(bool state) {
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	70fb      	strb	r3, [r7, #3]
// gpio write CS
  if (TMC_SW_SPI != nullptr){
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d006      	beq.n	800c6aa <_ZN14TMC2130Stepper11switchCSpinEb+0x22>
	  TMC_SW_SPI->switchCSpin(state);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a0:	78fa      	ldrb	r2, [r7, #3]
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff fa3d 	bl	800bb24 <_ZN11SW_SPIClass11switchCSpinEb>
  }
}
 800c6aa:	bf00      	nop
 800c6ac:	3708      	adds	r7, #8
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <_ZN14TMC2130Stepper16beginTransactionEv>:

__attribute__((weak))
void TMC2130Stepper::beginTransaction() {
 800c6b2:	b480      	push	{r7}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
  }
}
 800c6ba:	bf00      	nop
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <_ZN14TMC2130Stepper14endTransactionEv>:
__attribute__((weak))
void TMC2130Stepper::endTransaction() {
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.endTransaction();
  }
}
 800c6ce:	bf00      	nop
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <_ZN14TMC2130Stepper8transferEh>:

__attribute__((weak))
uint8_t TMC2130Stepper::transfer(const uint8_t data) {
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	70fb      	strb	r3, [r7, #3]
  uint8_t out = 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	73fb      	strb	r3, [r7, #15]
  if (TMC_SW_SPI != nullptr) {
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d008      	beq.n	800c704 <_ZN14TMC2130Stepper8transferEh+0x2a>
    out = TMC_SW_SPI->transfer(data);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f6:	78fa      	ldrb	r2, [r7, #3]
 800c6f8:	4611      	mov	r1, r2
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7ff fa32 	bl	800bb64 <_ZN11SW_SPIClass8transferEh>
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]
  }
  else {
    //out = SPI.transfer(data);
  }
  return out;
 800c704:	7bfb      	ldrb	r3, [r7, #15]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <_ZN14TMC2130Stepper18transferEmptyBytesEh>:

void TMC2130Stepper::transferEmptyBytes(const uint8_t n) {
 800c70e:	b580      	push	{r7, lr}
 800c710:	b084      	sub	sp, #16
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	460b      	mov	r3, r1
 800c718:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i = 0; i < n; i++) {
 800c71a:	2300      	movs	r3, #0
 800c71c:	73fb      	strb	r3, [r7, #15]
 800c71e:	7bfa      	ldrb	r2, [r7, #15]
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	429a      	cmp	r2, r3
 800c724:	d207      	bcs.n	800c736 <_ZN14TMC2130Stepper18transferEmptyBytesEh+0x28>
    transfer(0x00);
 800c726:	2100      	movs	r1, #0
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff ffd6 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>
  for (uint8_t i = 0; i < n; i++) {
 800c72e:	7bfb      	ldrb	r3, [r7, #15]
 800c730:	3301      	adds	r3, #1
 800c732:	73fb      	strb	r3, [r7, #15]
 800c734:	e7f3      	b.n	800c71e <_ZN14TMC2130Stepper18transferEmptyBytesEh+0x10>
  }
}
 800c736:	bf00      	nop
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
	...

0800c740 <_ZN14TMC2130Stepper4readEh>:

__attribute__((weak))
uint32_t TMC2130Stepper::read(uint8_t addressByte) {
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	460b      	mov	r3, r1
 800c74a:	70fb      	strb	r3, [r7, #3]
  uint32_t out = 0UL;
 800c74c:	2300      	movs	r3, #0
 800c74e:	60bb      	str	r3, [r7, #8]
  int8_t i = 1;
 800c750:	2301      	movs	r3, #1
 800c752:	73fb      	strb	r3, [r7, #15]

  beginTransaction();
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f7ff ffac 	bl	800c6b2 <_ZN14TMC2130Stepper16beginTransactionEv>
  switchCSpin(LOW);
 800c75a:	2100      	movs	r1, #0
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7ff ff93 	bl	800c688 <_ZN14TMC2130Stepper11switchCSpinEb>
  transfer(addressByte);
 800c762:	78fb      	ldrb	r3, [r7, #3]
 800c764:	4619      	mov	r1, r3
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f7ff ffb7 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>
  // Clear SPI
  transferEmptyBytes(4);
 800c76c:	2104      	movs	r1, #4
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7ff ffcd 	bl	800c70e <_ZN14TMC2130Stepper18transferEmptyBytesEh>

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 800c77a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800c77e:	429a      	cmp	r2, r3
 800c780:	da0a      	bge.n	800c798 <_ZN14TMC2130Stepper4readEh+0x58>
    transferEmptyBytes(5);
 800c782:	2105      	movs	r1, #5
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff ffc2 	bl	800c70e <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 800c78a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	3301      	adds	r3, #1
 800c792:	b2db      	uxtb	r3, r3
 800c794:	73fb      	strb	r3, [r7, #15]
  while(i < link_index) {
 800c796:	e7ed      	b.n	800c774 <_ZN14TMC2130Stepper4readEh+0x34>
  }

  switchCSpin(HIGH);
 800c798:	2101      	movs	r1, #1
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7ff ff74 	bl	800c688 <_ZN14TMC2130Stepper11switchCSpinEb>
  switchCSpin(LOW);
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f7ff ff70 	bl	800c688 <_ZN14TMC2130Stepper11switchCSpinEb>

  // Shift data from target link into the last one...
  while(i < chain_length) {
 800c7a8:	4b28      	ldr	r3, [pc, #160]	; (800c84c <_ZN14TMC2130Stepper4readEh+0x10c>)
 800c7aa:	f993 3000 	ldrsb.w	r3, [r3]
 800c7ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	da0a      	bge.n	800c7cc <_ZN14TMC2130Stepper4readEh+0x8c>
    transferEmptyBytes(5);
 800c7b6:	2105      	movs	r1, #5
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ffa8 	bl	800c70e <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 800c7be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	73fb      	strb	r3, [r7, #15]
  while(i < chain_length) {
 800c7ca:	e7ed      	b.n	800c7a8 <_ZN14TMC2130Stepper4readEh+0x68>
  }

  // ...and once more to MCU
  status_response = transfer(addressByte); // Send the address byte again
 800c7cc:	78fb      	ldrb	r3, [r7, #3]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff ff82 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	461a      	mov	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	751a      	strb	r2, [r3, #20]
  out  = transfer(0x00);
 800c7de:	2100      	movs	r1, #0
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7ff ff7a 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	021b      	lsls	r3, r3, #8
 800c7ee:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7ff ff71 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	021b      	lsls	r3, r3, #8
 800c806:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 800c808:	2100      	movs	r1, #0
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff ff65 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>
 800c810:	4603      	mov	r3, r0
 800c812:	461a      	mov	r2, r3
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	4313      	orrs	r3, r2
 800c818:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	021b      	lsls	r3, r3, #8
 800c81e:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 800c820:	2100      	movs	r1, #0
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7ff ff59 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>
 800c828:	4603      	mov	r3, r0
 800c82a:	461a      	mov	r2, r3
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	4313      	orrs	r3, r2
 800c830:	60bb      	str	r3, [r7, #8]

  endTransaction();
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f7ff ff47 	bl	800c6c6 <_ZN14TMC2130Stepper14endTransactionEv>
  switchCSpin(HIGH);
 800c838:	2101      	movs	r1, #1
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7ff ff24 	bl	800c688 <_ZN14TMC2130Stepper11switchCSpinEb>
  return out;
 800c840:	68bb      	ldr	r3, [r7, #8]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	20000d3c 	.word	0x20000d3c

0800c850 <_ZN14TMC2130Stepper5writeEhm>:

__attribute__((weak))
void TMC2130Stepper::write(uint8_t addressByte, uint32_t config) {
 800c850:	b580      	push	{r7, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	460b      	mov	r3, r1
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	72fb      	strb	r3, [r7, #11]
  addressByte |= TMC_WRITE;
 800c85e:	7afb      	ldrb	r3, [r7, #11]
 800c860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c864:	72fb      	strb	r3, [r7, #11]
  int8_t i = 1;
 800c866:	2301      	movs	r3, #1
 800c868:	75fb      	strb	r3, [r7, #23]

  beginTransaction();
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f7ff ff21 	bl	800c6b2 <_ZN14TMC2130Stepper16beginTransactionEv>
  switchCSpin(LOW);
 800c870:	2100      	movs	r1, #0
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f7ff ff08 	bl	800c688 <_ZN14TMC2130Stepper11switchCSpinEb>
  status_response = transfer(addressByte);
 800c878:	7afb      	ldrb	r3, [r7, #11]
 800c87a:	4619      	mov	r1, r3
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f7ff ff2c 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>
 800c882:	4603      	mov	r3, r0
 800c884:	461a      	mov	r2, r3
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	751a      	strb	r2, [r3, #20]
  transfer(config>>24);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	0e1b      	lsrs	r3, r3, #24
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	4619      	mov	r1, r3
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f7ff ff21 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>
  transfer(config>>16);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	0c1b      	lsrs	r3, r3, #16
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	4619      	mov	r1, r3
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	f7ff ff1a 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>
  transfer(config>>8);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	0a1b      	lsrs	r3, r3, #8
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f7ff ff13 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>
  transfer(config);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f7ff ff0d 	bl	800c6da <_ZN14TMC2130Stepper8transferEh>

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 800c8c6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	da0a      	bge.n	800c8e4 <_ZN14TMC2130Stepper5writeEhm+0x94>
    transferEmptyBytes(5);
 800c8ce:	2105      	movs	r1, #5
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f7ff ff1c 	bl	800c70e <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 800c8d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	3301      	adds	r3, #1
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	75fb      	strb	r3, [r7, #23]
  while(i < link_index) {
 800c8e2:	e7ed      	b.n	800c8c0 <_ZN14TMC2130Stepper5writeEhm+0x70>
  }

  endTransaction();
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f7ff feee 	bl	800c6c6 <_ZN14TMC2130Stepper14endTransactionEv>
  switchCSpin(HIGH);
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f7ff fecb 	bl	800c688 <_ZN14TMC2130Stepper11switchCSpinEb>
}
 800c8f2:	bf00      	nop
 800c8f4:	3718      	adds	r7, #24
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <_ZN14TMC2130Stepper9isEnabledEv>:

/**
 *  Helper functions
 */

bool TMC2130Stepper::isEnabled() { return !drv_enn_cfg6() && toff(); }
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b082      	sub	sp, #8
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f823 	bl	800c94e <_ZN14TMC2130Stepper12drv_enn_cfg6Ev>
 800c908:	4603      	mov	r3, r0
 800c90a:	f083 0301 	eor.w	r3, r3, #1
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d007      	beq.n	800c924 <_ZN14TMC2130Stepper9isEnabledEv+0x2a>
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff fb86 	bl	800c026 <_ZN14TMC2130Stepper4toffEv>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d001      	beq.n	800c924 <_ZN14TMC2130Stepper9isEnabledEv+0x2a>
 800c920:	2301      	movs	r3, #1
 800c922:	e000      	b.n	800c926 <_ZN14TMC2130Stepper9isEnabledEv+0x2c>
 800c924:	2300      	movs	r3, #0
 800c926:	4618      	mov	r0, r3
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <_ZN14TMC2130Stepper4IOINEv>:
  ENCM_CTRL(ENCM_CTRL_register.sr);
}

///////////////////////////////////////////////////////////////////////////////////////
// R: IOIN
uint32_t  TMC2130Stepper::IOIN()    { return read(IOIN_t::address); }
 800c92e:	b580      	push	{r7, lr}
 800c930:	b082      	sub	sp, #8
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	3304      	adds	r3, #4
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2104      	movs	r1, #4
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	4798      	blx	r3
 800c944:	4603      	mov	r3, r0
 800c946:	4618      	mov	r0, r3
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <_ZN14TMC2130Stepper12drv_enn_cfg6Ev>:
bool TMC2130Stepper::step()         { IOIN_t r{0}; r.sr = IOIN(); return r.step; }
bool TMC2130Stepper::dir()          { IOIN_t r{0}; r.sr = IOIN(); return r.dir; }
bool TMC2130Stepper::dcen_cfg4()    { IOIN_t r{0}; r.sr = IOIN(); return r.dcen_cfg4; }
bool TMC2130Stepper::dcin_cfg5()    { IOIN_t r{0}; r.sr = IOIN(); return r.dcin_cfg5; }
bool TMC2130Stepper::drv_enn_cfg6() { IOIN_t r{0}; r.sr = IOIN(); return r.drv_enn_cfg6; }
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	2300      	movs	r3, #0
 800c958:	60fb      	str	r3, [r7, #12]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7ff ffe7 	bl	800c92e <_ZN14TMC2130Stepper4IOINEv>
 800c960:	4603      	mov	r3, r0
 800c962:	60fb      	str	r3, [r7, #12]
 800c964:	7b3b      	ldrb	r3, [r7, #12]
 800c966:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	4618      	mov	r0, r3
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <_ZN14TMC2130Stepper9TCOOLTHRSEm>:
bool TMC2130Stepper::dco()          { IOIN_t r{0}; r.sr = IOIN(); return r.dco; }
uint8_t TMC2130Stepper::version()   { IOIN_t r{0}; r.sr = IOIN(); return r.version; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TCOOLTHRS
uint32_t TMC2130Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2130Stepper::TCOOLTHRS(uint32_t input) {
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	b291      	uxth	r1, r2
 800c988:	2000      	movs	r0, #0
 800c98a:	4301      	orrs	r1, r0
 800c98c:	8319      	strh	r1, [r3, #24]
 800c98e:	0c12      	lsrs	r2, r2, #16
 800c990:	f002 020f 	and.w	r2, r2, #15
 800c994:	f002 000f 	and.w	r0, r2, #15
 800c998:	7e9a      	ldrb	r2, [r3, #26]
 800c99a:	f022 020f 	bic.w	r2, r2, #15
 800c99e:	4611      	mov	r1, r2
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	430a      	orrs	r2, r1
 800c9a4:	769a      	strb	r2, [r3, #26]
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	6992      	ldr	r2, [r2, #24]
 800c9b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c9b4:	2114      	movs	r1, #20
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	4798      	blx	r3
}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <_ZN14TMC2130Stepper5THIGHEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: THIGH
uint32_t TMC2130Stepper::THIGH() { return THIGH_register.sr; }
void TMC2130Stepper::THIGH(uint32_t input) {
 800c9c2:	b590      	push	{r4, r7, lr}
 800c9c4:	b083      	sub	sp, #12
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	6039      	str	r1, [r7, #0]
  THIGH_register.sr = input;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	b2d1      	uxtb	r1, r2
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	4301      	orrs	r1, r0
 800c9da:	76d9      	strb	r1, [r3, #27]
 800c9dc:	0a11      	lsrs	r1, r2, #8
 800c9de:	b2c9      	uxtb	r1, r1
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	4301      	orrs	r1, r0
 800c9e4:	7719      	strb	r1, [r3, #28]
 800c9e6:	0c12      	lsrs	r2, r2, #16
 800c9e8:	f002 020f 	and.w	r2, r2, #15
 800c9ec:	f002 000f 	and.w	r0, r2, #15
 800c9f0:	7f5a      	ldrb	r2, [r3, #29]
 800c9f2:	f022 020f 	bic.w	r2, r2, #15
 800c9f6:	4611      	mov	r1, r2
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	775a      	strb	r2, [r3, #29]
  write(THIGH_register.address, THIGH_register.sr);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	681c      	ldr	r4, [r3, #0]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	7eda      	ldrb	r2, [r3, #27]
 800ca08:	8b9b      	ldrh	r3, [r3, #28]
 800ca0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca0e:	021b      	lsls	r3, r3, #8
 800ca10:	4313      	orrs	r3, r2
 800ca12:	461a      	mov	r2, r3
 800ca14:	2115      	movs	r1, #21
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	47a0      	blx	r4
}
 800ca1a:	bf00      	nop
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd90      	pop	{r4, r7, pc}

0800ca22 <_ZN14TMC2130Stepper7XDIRECTEm>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: XDIRECT
uint32_t TMC2130Stepper::XDIRECT() {
  return read(XDIRECT_register.address);
}
void TMC2130Stepper::XDIRECT(uint32_t input) {
 800ca22:	b590      	push	{r4, r7, lr}
 800ca24:	b083      	sub	sp, #12
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	6039      	str	r1, [r7, #0]
  XDIRECT_register.sr = input;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	b291      	uxth	r1, r2
 800ca36:	2000      	movs	r0, #0
 800ca38:	4301      	orrs	r1, r0
 800ca3a:	83d9      	strh	r1, [r3, #30]
 800ca3c:	0c12      	lsrs	r2, r2, #16
 800ca3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca42:	f3c2 0008 	ubfx	r0, r2, #0, #9
 800ca46:	8c1a      	ldrh	r2, [r3, #32]
 800ca48:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800ca4c:	f022 0201 	bic.w	r2, r2, #1
 800ca50:	4611      	mov	r1, r2
 800ca52:	4602      	mov	r2, r0
 800ca54:	430a      	orrs	r2, r1
 800ca56:	841a      	strh	r2, [r3, #32]
  write(XDIRECT_register.address, XDIRECT_register.sr);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	681c      	ldr	r4, [r3, #0]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	8bda      	ldrh	r2, [r3, #30]
 800ca62:	8c1b      	ldrh	r3, [r3, #32]
 800ca64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca68:	041b      	lsls	r3, r3, #16
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	212d      	movs	r1, #45	; 0x2d
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	47a0      	blx	r4
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd90      	pop	{r4, r7, pc}

0800ca7c <_ZN14TMC2130Stepper6VDCMINEm>:
int16_t TMC2130Stepper::coil_A()        { XDIRECT_t r{0}; r.sr = XDIRECT(); return r.coil_A; }
int16_t TMC2130Stepper::coil_B()        { XDIRECT_t r{0}; r.sr = XDIRECT(); return r.coil_B; }
///////////////////////////////////////////////////////////////////////////////////////
// W: VDCMIN
uint32_t TMC2130Stepper::VDCMIN() { return VDCMIN_register.sr; }
void TMC2130Stepper::VDCMIN(uint32_t input) {
 800ca7c:	b590      	push	{r4, r7, lr}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  VDCMIN_register.sr = input;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	b291      	uxth	r1, r2
 800ca90:	2000      	movs	r0, #0
 800ca92:	4301      	orrs	r1, r0
 800ca94:	8459      	strh	r1, [r3, #34]	; 0x22
 800ca96:	0c12      	lsrs	r2, r2, #16
 800ca98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ca9c:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 800caa0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800caa4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800caa8:	4611      	mov	r1, r2
 800caaa:	4602      	mov	r2, r0
 800caac:	430a      	orrs	r2, r1
 800caae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  write(VDCMIN_register.address, VDCMIN_register.sr);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681c      	ldr	r4, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800cabc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cac4:	041b      	lsls	r3, r3, #16
 800cac6:	4313      	orrs	r3, r2
 800cac8:	461a      	mov	r2, r3
 800caca:	2133      	movs	r1, #51	; 0x33
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	47a0      	blx	r4
}
 800cad0:	bf00      	nop
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd90      	pop	{r4, r7, pc}

0800cad8 <_ZN14TMC2130Stepper6DCCTRLEm>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: DCCTRL
void TMC2130Stepper::DCCTRL(uint32_t input) {
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
	DCCTRL_register.sr = input;
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800caec:	f361 231f 	bfi	r3, r1, #8, #24
 800caf0:	62d3      	str	r3, [r2, #44]	; 0x2c
	write(DCCTRL_register.address, DCCTRL_register.sr);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cafc:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800cb00:	216e      	movs	r1, #110	; 0x6e
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	4798      	blx	r3
}
 800cb06:	bf00      	nop
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <_ZN14TMC2160StepperC1Etfttta>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2130Stepper(pinCS, RS, link)
  { defaults(); }
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
 800cb10:	b590      	push	{r4, r7, lr}
 800cb12:	b087      	sub	sp, #28
 800cb14:	af02      	add	r7, sp, #8
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	4608      	mov	r0, r1
 800cb1a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb1e:	4611      	mov	r1, r2
 800cb20:	461a      	mov	r2, r3
 800cb22:	4603      	mov	r3, r0
 800cb24:	817b      	strh	r3, [r7, #10]
 800cb26:	460b      	mov	r3, r1
 800cb28:	813b      	strh	r3, [r7, #8]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	807b      	strh	r3, [r7, #2]
  TMC2130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	887c      	ldrh	r4, [r7, #2]
 800cb32:	893a      	ldrh	r2, [r7, #8]
 800cb34:	8979      	ldrh	r1, [r7, #10]
 800cb36:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800cb3a:	9301      	str	r3, [sp, #4]
 800cb3c:	8c3b      	ldrh	r3, [r7, #32]
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	4623      	mov	r3, r4
 800cb42:	ed97 0a01 	vldr	s0, [r7, #4]
 800cb46:	f7ff fcf9 	bl	800c53c <_ZN14TMC2130StepperC1Etfttta>
 800cb4a:	4a0f      	ldr	r2, [pc, #60]	; (800cb88 <_ZN14TMC2160StepperC1Etfttta+0x78>)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	333d      	adds	r3, #61	; 0x3d
 800cb54:	2200      	movs	r2, #0
 800cb56:	801a      	strh	r2, [r3, #0]
 800cb58:	709a      	strb	r2, [r3, #2]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	3340      	adds	r3, #64	; 0x40
 800cb5e:	2100      	movs	r1, #0
 800cb60:	460a      	mov	r2, r1
 800cb62:	801a      	strh	r2, [r3, #0]
 800cb64:	460a      	mov	r2, r1
 800cb66:	709a      	strb	r2, [r3, #2]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2200      	movs	r2, #0
 800cb74:	645a      	str	r2, [r3, #68]	; 0x44
  { defaults(); }
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	f000 f858 	bl	800cc2c <_ZN14TMC2160Stepper8defaultsEv>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd90      	pop	{r4, r7, pc}
 800cb86:	bf00      	nop
 800cb88:	08018c54 	.word	0x08018c54

0800cb8c <_ZN14TMC2160Stepper5beginEv>:
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
  TMC2130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC2160Stepper::begin() {
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  //set pins
  //pinMode(_pinCS, OUTPUT);
  switchCSpin(HIGH);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2101      	movs	r1, #1
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7ff fd75 	bl	800c688 <_ZN14TMC2130Stepper11switchCSpinEb>

  if (TMC_SW_SPI != nullptr) TMC_SW_SPI->init();
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d004      	beq.n	800cbb0 <_ZN14TMC2160Stepper5beginEv+0x24>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fe ffaf 	bl	800bb0e <_ZN11SW_SPIClass4initEv>

  GCONF(GCONF_register.sr);
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	f3c3 2311 	ubfx	r3, r3, #8, #18
 800cbba:	4619      	mov	r1, r3
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	f7ff fbb6 	bl	800c32e <_ZN14TMC2130Stepper5GCONFEm>
  CHOPCONF(CHOPCONF_register.sr);
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4610      	mov	r0, r2
 800cbce:	f7ff f903 	bl	800bdd8 <_ZN14TMC2130Stepper8CHOPCONFEm>
  COOLCONF(COOLCONF_register.sr);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbd8:	0a12      	lsrs	r2, r2, #8
 800cbda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cbde:	f003 0301 	and.w	r3, r3, #1
 800cbe2:	061b      	lsls	r3, r3, #24
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	f7ff fa8f 	bl	800c10a <_ZN14TMC2130Stepper8COOLCONFEm>
  PWMCONF(PWMCONF_register.sr);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7ff fc0b 	bl	800c40e <_ZN14TMC2160Stepper7PWMCONFEm>
  IHOLD_IRUN(IHOLD_IRUN_register.sr);
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc02:	4619      	mov	r1, r3
 800cc04:	4610      	mov	r0, r2
 800cc06:	f7ff fbad 	bl	800c364 <_ZN10TMCStepper10IHOLD_IRUNEm>

  toff(8); //off_time(8);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2108      	movs	r1, #8
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7ff f8f8 	bl	800be04 <_ZN14TMC2130Stepper4toffEh>
  tbl(1); //blank_time(24);
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	332c      	adds	r3, #44	; 0x2c
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2101      	movs	r1, #1
 800cc20:	4610      	mov	r0, r2
 800cc22:	4798      	blx	r3
}
 800cc24:	bf00      	nop
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <_ZN14TMC2160Stepper8defaultsEv>:

void TMC2160Stepper::defaults() {
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
 800cc3a:	2106      	movs	r1, #6
 800cc3c:	f361 0303 	bfi	r3, r1, #0, #4
 800cc40:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  SHORT_CONF_register.s2g_level = 6;
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800cc4a:	2106      	movs	r1, #6
 800cc4c:	f361 0303 	bfi	r3, r1, #0, #4
 800cc50:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
  SHORT_CONF_register.shortfilter = 0b01;
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800cc5a:	2101      	movs	r1, #1
 800cc5c:	f361 0301 	bfi	r3, r1, #0, #2
 800cc60:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  SHORT_CONF_register.shortdelay = 0;
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800cc6a:	f36f 0382 	bfc	r3, #2, #1
 800cc6e:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  DRV_CONF_register.bbmtime = 0;
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cc78:	f36f 0304 	bfc	r3, #0, #5
 800cc7c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
  DRV_CONF_register.bbmclks = 4;
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cc86:	2104      	movs	r1, #4
 800cc88:	f361 0303 	bfi	r3, r1, #0, #4
 800cc8c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  DRV_CONF_register.otselect = 0b00;
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800cc96:	f36f 0301 	bfc	r3, #0, #2
 800cc9a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.drvstrength = 0b10;
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800cca4:	2102      	movs	r1, #2
 800cca6:	f361 0383 	bfi	r3, r1, #2, #2
 800ccaa:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.filt_isense = 0b00;
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800ccb4:	f36f 1305 	bfc	r3, #4, #2
 800ccb8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  TPOWERDOWN_register.sr = 10;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	220a      	movs	r2, #10
 800ccc0:	71da      	strb	r2, [r3, #7]
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccc6:	b2d2      	uxtb	r2, r2
 800ccc8:	f042 4282 	orr.w	r2, r2, #1090519040	; 0x41000000
 800cccc:	f442 32a8 	orr.w	r2, r2, #86016	; 0x15000
 800ccd0:	625a      	str	r2, [r3, #36]	; 0x24
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f042 0210 	orr.w	r2, r2, #16
 800ccd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  PWMCONF_register.sr = 0xC40C001E;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a04      	ldr	r2, [pc, #16]	; (800ccf0 <_ZN14TMC2160Stepper8defaultsEv+0xc4>)
 800cce0:	645a      	str	r2, [r3, #68]	; 0x44
}
 800cce2:	bf00      	nop
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	c40c001e 	.word	0xc40c001e

0800ccf4 <_ZN14TMC2160Stepper11rms_currentEt>:
                 32 * 256 * sqrt(2) * I_rms * R_sense    |
  GLOBALSCALER = ------------------------------------    |
                           (CS + 1) * V_fs               | V_fs = 0.325

*/
void TMC2160Stepper::rms_current(uint16_t mA) {
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b08a      	sub	sp, #40	; 0x28
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	817b      	strh	r3, [r7, #10]
  constexpr uint32_t V_fs = 325; // 0.325 * 1000
 800cd00:	f240 1345 	movw	r3, #325	; 0x145
 800cd04:	61fb      	str	r3, [r7, #28]
  uint8_t CS = 31;
 800cd06:	231f      	movs	r3, #31
 800cd08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t scaler = 0; // = 256
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	623b      	str	r3, [r7, #32]

  const uint16_t RS_scaled = Rsense * 0xFFFF; // Scale to 16b
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	edd3 7a03 	vldr	s15, [r3, #12]
 800cd16:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800cdec <_ZN14TMC2160Stepper11rms_currentEt+0xf8>
 800cd1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd22:	ee17 3a90 	vmov	r3, s15
 800cd26:	837b      	strh	r3, [r7, #26]
  uint32_t numerator = 11585; // 32 * 256 * sqrt(2)
 800cd28:	f642 5341 	movw	r3, #11585	; 0x2d41
 800cd2c:	617b      	str	r3, [r7, #20]
  numerator *= RS_scaled;
 800cd2e:	8b7a      	ldrh	r2, [r7, #26]
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	fb02 f303 	mul.w	r3, r2, r3
 800cd36:	617b      	str	r3, [r7, #20]
  numerator >>= 8;
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	0a1b      	lsrs	r3, r3, #8
 800cd3c:	617b      	str	r3, [r7, #20]
  numerator *= mA;
 800cd3e:	897a      	ldrh	r2, [r7, #10]
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	fb02 f303 	mul.w	r3, r2, r3
 800cd46:	617b      	str	r3, [r7, #20]

  do {
    uint32_t denominator = V_fs * 0xFFFF >> 8;
 800cd48:	4b29      	ldr	r3, [pc, #164]	; (800cdf0 <_ZN14TMC2160Stepper11rms_currentEt+0xfc>)
 800cd4a:	613b      	str	r3, [r7, #16]
    denominator *= CS+1;
 800cd4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd50:	3301      	adds	r3, #1
 800cd52:	461a      	mov	r2, r3
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	fb02 f303 	mul.w	r3, r2, r3
 800cd5a:	613b      	str	r3, [r7, #16]
    scaler = numerator / denominator;
 800cd5c:	697a      	ldr	r2, [r7, #20]
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd64:	623b      	str	r3, [r7, #32]

    if (scaler > 255) scaler = 0; // Maximum
 800cd66:	6a3b      	ldr	r3, [r7, #32]
 800cd68:	2bff      	cmp	r3, #255	; 0xff
 800cd6a:	d902      	bls.n	800cd72 <_ZN14TMC2160Stepper11rms_currentEt+0x7e>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	623b      	str	r3, [r7, #32]
 800cd70:	e007      	b.n	800cd82 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
    else if (scaler < 128) CS--;  // Try again with smaller CS
 800cd72:	6a3b      	ldr	r3, [r7, #32]
 800cd74:	2b7f      	cmp	r3, #127	; 0x7f
 800cd76:	d804      	bhi.n	800cd82 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
 800cd78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while(0 < scaler && scaler < 128);
 800cd82:	6a3b      	ldr	r3, [r7, #32]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d003      	beq.n	800cd90 <_ZN14TMC2160Stepper11rms_currentEt+0x9c>
 800cd88:	6a3b      	ldr	r3, [r7, #32]
 800cd8a:	2b7f      	cmp	r3, #127	; 0x7f
 800cd8c:	d800      	bhi.n	800cd90 <_ZN14TMC2160Stepper11rms_currentEt+0x9c>
  do {
 800cd8e:	e7db      	b.n	800cd48 <_ZN14TMC2160Stepper11rms_currentEt+0x54>


  if (CS > 31)
 800cd90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd94:	2b1f      	cmp	r3, #31
 800cd96:	d902      	bls.n	800cd9e <_ZN14TMC2160Stepper11rms_currentEt+0xaa>
    CS = 31;
 800cd98:	231f      	movs	r3, #31
 800cd9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  GLOBAL_SCALER(scaler);
 800cd9e:	6a3b      	ldr	r3, [r7, #32]
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	4619      	mov	r1, r3
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f000 f825 	bl	800cdf4 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>
  irun(CS);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cdb0:	4611      	mov	r1, r2
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7ff fb0e 	bl	800c3d4 <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdbe:	ee07 3a90 	vmov	s15, r3
 800cdc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	edd3 7a04 	vldr	s15, [r3, #16]
 800cdcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdd4:	edc7 7a01 	vstr	s15, [r7, #4]
 800cdd8:	793b      	ldrb	r3, [r7, #4]
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	4619      	mov	r1, r3
 800cdde:	4610      	mov	r0, r2
 800cde0:	f7ff fadb 	bl	800c39a <_ZN10TMCStepper5iholdEh>
}
 800cde4:	bf00      	nop
 800cde6:	3728      	adds	r7, #40	; 0x28
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	477fff00 	.word	0x477fff00
 800cdf0:	000144fe 	.word	0x000144fe

0800cdf4 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>:
bool    TMC2160Stepper::dco_cfg6()       { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.dco_cfg6; }
uint8_t TMC2160Stepper::version()        { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.version; }

// W: GLOBAL_SCALER
uint8_t TMC2160Stepper::GLOBAL_SCALER() { return GLOBAL_SCALER_register.sr; }
void TMC2160Stepper::GLOBAL_SCALER(uint8_t input) {
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	70fb      	strb	r3, [r7, #3]
  GLOBAL_SCALER_register.sr = input;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	78fa      	ldrb	r2, [r7, #3]
 800ce04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  write(GLOBAL_SCALER_register.address, GLOBAL_SCALER_register.sr);
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800ce16:	210b      	movs	r1, #11
 800ce18:	4798      	blx	r3
}
 800ce1a:	bf00      	nop
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
	...

0800ce24 <_ZN14TMC5130StepperC1Etfttta>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2160Stepper(pinCS, RS, link)
  { defaults(); }
TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link):
 800ce24:	b590      	push	{r4, r7, lr}
 800ce26:	b087      	sub	sp, #28
 800ce28:	af02      	add	r7, sp, #8
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	4608      	mov	r0, r1
 800ce2e:	ed87 0a01 	vstr	s0, [r7, #4]
 800ce32:	4611      	mov	r1, r2
 800ce34:	461a      	mov	r2, r3
 800ce36:	4603      	mov	r3, r0
 800ce38:	817b      	strh	r3, [r7, #10]
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	813b      	strh	r3, [r7, #8]
 800ce3e:	4613      	mov	r3, r2
 800ce40:	807b      	strh	r3, [r7, #2]
  TMC2160Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	887c      	ldrh	r4, [r7, #2]
 800ce46:	893a      	ldrh	r2, [r7, #8]
 800ce48:	8979      	ldrh	r1, [r7, #10]
 800ce4a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800ce4e:	9301      	str	r3, [sp, #4]
 800ce50:	8c3b      	ldrh	r3, [r7, #32]
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	4623      	mov	r3, r4
 800ce56:	ed97 0a01 	vldr	s0, [r7, #4]
 800ce5a:	f7ff fe59 	bl	800cb10 <_ZN14TMC2160StepperC1Etfttta>
 800ce5e:	4a48      	ldr	r2, [pc, #288]	; (800cf80 <_ZN14TMC5130StepperC1Etfttta+0x15c>)
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 800ce6a:	f36f 030b 	bfc	r3, #0, #12
 800ce6e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 800ce78:	f36f 0300 	bfc	r3, #0, #1
 800ce7c:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	f892 304f 	ldrb.w	r3, [r2, #79]	; 0x4f
 800cea0:	f36f 0301 	bfc	r3, #0, #2
 800cea4:	f882 304f 	strb.w	r3, [r2, #79]	; 0x4f
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	651a      	str	r2, [r3, #80]	; 0x50
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800ceb6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800ceba:	f022 0203 	bic.w	r2, r2, #3
 800cebe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800ceca:	2200      	movs	r2, #0
 800cecc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800ced8:	2200      	movs	r2, #0
 800ceda:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800cede:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800cee2:	f022 020f 	bic.w	r2, r2, #15
 800cee6:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800cefa:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800cefe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800cf02:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800cf30:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800cf34:	f022 0203 	bic.w	r2, r2, #3
 800cf38:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	f8b2 306a 	ldrh.w	r3, [r2, #106]	; 0x6a
 800cf4a:	f36f 030b 	bfc	r3, #0, #12
 800cf4e:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	f8b2 306c 	ldrh.w	r3, [r2, #108]	; 0x6c
 800cf58:	f36f 030a 	bfc	r3, #0, #11
 800cf5c:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  { defaults(); }
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f000 f81c 	bl	800cfac <_ZN14TMC5130Stepper8defaultsEv>
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	4618      	mov	r0, r3
 800cf78:	3714      	adds	r7, #20
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd90      	pop	{r4, r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	08018c90 	.word	0x08018c90

0800cf84 <_ZN14TMC5130Stepper5beginEv>:
TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
  TMC2160Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5130Stepper::begin() {
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  TMC2160Stepper::begin();
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7ff fdfc 	bl	800cb8c <_ZN14TMC2160Stepper5beginEv>

  XTARGET(0);
 800cf94:	2100      	movs	r1, #0
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 fa4e 	bl	800d438 <_ZN14TMC5130Stepper7XTARGETEl>
  XACTUAL(0);
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 f8e0 	bl	800d164 <_ZN14TMC5130Stepper7XACTUALEl>
  //while (( RAMP_STAT() & cfg.VZERO_bm) != cfg.VZERO_bm) {}
}
 800cfa4:	bf00      	nop
 800cfa6:	3708      	adds	r7, #8
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <_ZN14TMC5130Stepper8defaultsEv>:

void TMC5130Stepper::defaults() {
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  OUTPUT_register.sr = 1;
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 800cfba:	f043 0301 	orr.w	r3, r3, #1
 800cfbe:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
  ENC_CONST_register.sr = 65536;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f042 0201 	orr.w	r2, r2, #1
 800cfd0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	4a04      	ldr	r2, [pc, #16]	; (800cfe8 <_ZN14TMC5130Stepper8defaultsEv+0x3c>)
 800cfd8:	645a      	str	r2, [r3, #68]	; 0x44
}
 800cfda:	bf00      	nop
 800cfdc:	370c      	adds	r7, #12
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	00050480 	.word	0x00050480

0800cfec <_ZN14TMC5130Stepper9SLAVECONFEt>:
// R: IFCNT
uint8_t TMC5130Stepper::IFCNT() { return read(IFCNT_t::address); }
///////////////////////////////////////////////////////////////////////////////////////
// W: SLAVECONF
uint16_t TMC5130Stepper::SLAVECONF() { return SLAVECONF_register.sr; }
void TMC5130Stepper::SLAVECONF(uint16_t input) {
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	807b      	strh	r3, [r7, #2]
  SLAVECONF_register.sr = input;
 800cff8:	887b      	ldrh	r3, [r7, #2]
 800cffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cffe:	b299      	uxth	r1, r3
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 800d006:	f361 030b 	bfi	r3, r1, #0, #12
 800d00a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
  write(SLAVECONF_register.address, SLAVECONF_register.sr);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800d01c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800d020:	b292      	uxth	r2, r2
 800d022:	2103      	movs	r1, #3
 800d024:	4798      	blx	r3
}
 800d026:	bf00      	nop
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <_ZN14TMC5130Stepper4IOINEv>:
///////////////////////////////////////////////////////////////////////////////////////
// R: IOIN
uint32_t  TMC5130Stepper::IOIN() {
 800d02e:	b580      	push	{r7, lr}
 800d030:	b082      	sub	sp, #8
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
  return read(TMC5130_n::IOIN_t::address);
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	3304      	adds	r3, #4
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2104      	movs	r1, #4
 800d042:	4610      	mov	r0, r2
 800d044:	4798      	blx	r3
 800d046:	4603      	mov	r3, r0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <_ZN14TMC5130Stepper7sd_modeEv>:
bool    TMC5130Stepper::refr_dir()       { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.refr_dir; }
bool    TMC5130Stepper::encb_dcen_cfg4() { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.encb_dcen_cfg4; }
bool    TMC5130Stepper::enca_dcin_cfg5() { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.enca_dcin_cfg5; }
bool    TMC5130Stepper::drv_enn_cfg6()   { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.drv_enn_cfg6; }
bool    TMC5130Stepper::enc_n_dco()      { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.enc_n_dco; }
bool    TMC5130Stepper::sd_mode()        { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.sd_mode; }
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	2300      	movs	r3, #0
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f7ff ffe6 	bl	800d02e <_ZN14TMC5130Stepper4IOINEv>
 800d062:	4603      	mov	r3, r0
 800d064:	60fb      	str	r3, [r7, #12]
 800d066:	7b3b      	ldrb	r3, [r7, #12]
 800d068:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <_ZN14TMC5130Stepper7versionEv>:
bool    TMC5130Stepper::swcomp_in()      { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.swcomp_in; }
uint8_t   TMC5130Stepper::version()      { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.version; }
 800d076:	b580      	push	{r7, lr}
 800d078:	b084      	sub	sp, #16
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
 800d07e:	2300      	movs	r3, #0
 800d080:	60fb      	str	r3, [r7, #12]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7ff ffd3 	bl	800d02e <_ZN14TMC5130Stepper4IOINEv>
 800d088:	4603      	mov	r3, r0
 800d08a:	60fb      	str	r3, [r7, #12]
 800d08c:	7bfb      	ldrb	r3, [r7, #15]
 800d08e:	4618      	mov	r0, r3
 800d090:	3710      	adds	r7, #16
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <_ZN14TMC5130Stepper10TMC_OUTPUTEb>:
///////////////////////////////////////////////////////////////////////////////////////
// W: OUTPUT
bool TMC5130Stepper::TMC_OUTPUT() { return OUTPUT_register.sr; }
void TMC5130Stepper::TMC_OUTPUT(bool input) {
 800d096:	b580      	push	{r7, lr}
 800d098:	b082      	sub	sp, #8
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
 800d09e:	460b      	mov	r3, r1
 800d0a0:	70fb      	strb	r3, [r7, #3]
  OUTPUT_register.sr = input;
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 800d0a8:	78f9      	ldrb	r1, [r7, #3]
 800d0aa:	f361 0300 	bfi	r3, r1, #0, #1
 800d0ae:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
  write(OUTPUT_register.address, OUTPUT_register.sr);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 800d0c0:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800d0c4:	b2d2      	uxtb	r2, r2
 800d0c6:	2104      	movs	r1, #4
 800d0c8:	4798      	blx	r3
}
 800d0ca:	bf00      	nop
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <_ZN14TMC5130Stepper9X_COMPAREEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: X_COMPARE
uint32_t TMC5130Stepper::X_COMPARE() { return X_COMPARE_register.sr; }
void TMC5130Stepper::X_COMPARE(uint32_t input) {
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b082      	sub	sp, #8
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	6039      	str	r1, [r7, #0]
  X_COMPARE_register.sr = input;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	f8c3 204b 	str.w	r2, [r3, #75]	; 0x4b
  write(X_COMPARE_register.address, X_COMPARE_register.sr);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	f8d2 204b 	ldr.w	r2, [r2, #75]	; 0x4b
 800d0f2:	2105      	movs	r1, #5
 800d0f4:	4798      	blx	r3
}
 800d0f6:	bf00      	nop
 800d0f8:	3708      	adds	r7, #8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}

0800d0fe <_ZN14TMC5130Stepper8RAMPMODEEv>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: RAMPMODE
uint8_t TMC5130Stepper::RAMPMODE() { return read(RAMPMODE_register.address); }
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b082      	sub	sp, #8
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	3304      	adds	r3, #4
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2120      	movs	r1, #32
 800d112:	4610      	mov	r0, r2
 800d114:	4798      	blx	r3
 800d116:	4603      	mov	r3, r0
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	4618      	mov	r0, r3
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <_ZN14TMC5130Stepper8RAMPMODEEh>:
void TMC5130Stepper::RAMPMODE(uint8_t input) {
 800d122:	b580      	push	{r7, lr}
 800d124:	b082      	sub	sp, #8
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
 800d12a:	460b      	mov	r3, r1
 800d12c:	70fb      	strb	r3, [r7, #3]
  RAMPMODE_register.sr = input;
 800d12e:	78fb      	ldrb	r3, [r7, #3]
 800d130:	f003 0303 	and.w	r3, r3, #3
 800d134:	b2d9      	uxtb	r1, r3
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	f892 304f 	ldrb.w	r3, [r2, #79]	; 0x4f
 800d13c:	f361 0301 	bfi	r3, r1, #0, #2
 800d140:	f882 304f 	strb.w	r3, [r2, #79]	; 0x4f
  write(RAMPMODE_register.address, RAMPMODE_register.sr);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
 800d152:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800d156:	b2d2      	uxtb	r2, r2
 800d158:	2120      	movs	r1, #32
 800d15a:	4798      	blx	r3
}
 800d15c:	bf00      	nop
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <_ZN14TMC5130Stepper7XACTUALEl>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: XACTUAL
int32_t TMC5130Stepper::XACTUAL() { return read(XACTUAL_register.address); }
void TMC5130Stepper::XACTUAL(int32_t input) {
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  write(XACTUAL_register.address, input);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	683a      	ldr	r2, [r7, #0]
 800d178:	2121      	movs	r1, #33	; 0x21
 800d17a:	4798      	blx	r3
}
 800d17c:	bf00      	nop
 800d17e:	3708      	adds	r7, #8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <_ZN14TMC5130Stepper7VACTUALEv>:
///////////////////////////////////////////////////////////////////////////////////////
// R: VACTUAL
int32_t TMC5130Stepper::VACTUAL() {
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  uint32_t int24 = read(VACTUAL_t::address);
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3304      	adds	r3, #4
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2122      	movs	r1, #34	; 0x22
 800d198:	4610      	mov	r0, r2
 800d19a:	4798      	blx	r3
 800d19c:	60f8      	str	r0, [r7, #12]
  if((int24 >> 23) & 0x01) {
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d003      	beq.n	800d1b0 <_ZN14TMC5130Stepper7VACTUALEv+0x2c>
    int24 |= 0xFF000000;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1ae:	60fb      	str	r3, [r7, #12]
  }
  return int24;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <_ZN14TMC5130Stepper6VSTARTEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: VSTART
uint32_t TMC5130Stepper::VSTART() { return VSTART_register.sr; }
void TMC5130Stepper::VSTART(uint32_t input) {
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b082      	sub	sp, #8
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	6039      	str	r1, [r7, #0]
  VSTART_register.sr = input;
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	b291      	uxth	r1, r2
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	4301      	orrs	r1, r0
 800d1d2:	f8a3 1054 	strh.w	r1, [r3, #84]	; 0x54
 800d1d6:	0c12      	lsrs	r2, r2, #16
 800d1d8:	f002 0203 	and.w	r2, r2, #3
 800d1dc:	f002 0003 	and.w	r0, r2, #3
 800d1e0:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800d1e4:	f022 0203 	bic.w	r2, r2, #3
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	430a      	orrs	r2, r1
 800d1ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  write(VSTART_register.address, VSTART_register.sr);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d1fe:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800d202:	2123      	movs	r1, #35	; 0x23
 800d204:	4798      	blx	r3
}
 800d206:	bf00      	nop
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <_ZN14TMC5130Stepper2A1Et>:
///////////////////////////////////////////////////////////////////////////////////////
// W: A1
uint16_t TMC5130Stepper::A1() { return A1_register.sr; }
void TMC5130Stepper::A1(uint16_t input) {
 800d20e:	b580      	push	{r7, lr}
 800d210:	b082      	sub	sp, #8
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	460b      	mov	r3, r1
 800d218:	807b      	strh	r3, [r7, #2]
  A1_register.sr = input;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	887a      	ldrh	r2, [r7, #2]
 800d21e:	f8a3 2057 	strh.w	r2, [r3, #87]	; 0x57
  write(A1_register.address, A1_register.sr);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	f8b2 2057 	ldrh.w	r2, [r2, #87]	; 0x57
 800d230:	b292      	uxth	r2, r2
 800d232:	2124      	movs	r1, #36	; 0x24
 800d234:	4798      	blx	r3
}
 800d236:	bf00      	nop
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <_ZN14TMC5130Stepper2V1Em>:
///////////////////////////////////////////////////////////////////////////////////////
// W: V1
uint32_t TMC5130Stepper::V1() { return V1_register.sr; }
void TMC5130Stepper::V1(uint32_t input) {
 800d23e:	b580      	push	{r7, lr}
 800d240:	b082      	sub	sp, #8
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	6039      	str	r1, [r7, #0]
  V1_register.sr = input;
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	b2d1      	uxtb	r1, r2
 800d252:	2000      	movs	r0, #0
 800d254:	4301      	orrs	r1, r0
 800d256:	f883 1059 	strb.w	r1, [r3, #89]	; 0x59
 800d25a:	0a11      	lsrs	r1, r2, #8
 800d25c:	b2c9      	uxtb	r1, r1
 800d25e:	2000      	movs	r0, #0
 800d260:	4301      	orrs	r1, r0
 800d262:	f883 105a 	strb.w	r1, [r3, #90]	; 0x5a
 800d266:	0c12      	lsrs	r2, r2, #16
 800d268:	f002 020f 	and.w	r2, r2, #15
 800d26c:	f002 000f 	and.w	r0, r2, #15
 800d270:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800d274:	f022 020f 	bic.w	r2, r2, #15
 800d278:	4611      	mov	r1, r2
 800d27a:	4602      	mov	r2, r0
 800d27c:	430a      	orrs	r2, r1
 800d27e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  write(V1_register.address, V1_register.sr);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d28e:	f3c2 2213 	ubfx	r2, r2, #8, #20
 800d292:	2125      	movs	r1, #37	; 0x25
 800d294:	4798      	blx	r3
}
 800d296:	bf00      	nop
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <_ZN14TMC5130Stepper4AMAXEt>:
///////////////////////////////////////////////////////////////////////////////////////
// W: AMAX
uint16_t TMC5130Stepper::AMAX() { return AMAX_register.sr; }
void TMC5130Stepper::AMAX(uint16_t input) {
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b082      	sub	sp, #8
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	807b      	strh	r3, [r7, #2]
  AMAX_register.sr = input;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	887a      	ldrh	r2, [r7, #2]
 800d2ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  write(AMAX_register.address, AMAX_register.sr);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800d2c0:	2126      	movs	r1, #38	; 0x26
 800d2c2:	4798      	blx	r3
}
 800d2c4:	bf00      	nop
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <_ZN14TMC5130Stepper4VMAXEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: VMAX
uint32_t TMC5130Stepper::VMAX() { return VMAX_register.sr; }
void TMC5130Stepper::VMAX(uint32_t input) {
 800d2cc:	b590      	push	{r4, r7, lr}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  VMAX_register.sr = input;
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	b291      	uxth	r1, r2
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	4301      	orrs	r1, r0
 800d2e4:	f8a3 105e 	strh.w	r1, [r3, #94]	; 0x5e
 800d2e8:	0c12      	lsrs	r2, r2, #16
 800d2ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d2ee:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 800d2f2:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800d2f6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800d2fa:	4611      	mov	r1, r2
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	430a      	orrs	r2, r1
 800d300:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  write(VMAX_register.address, VMAX_register.sr);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	681c      	ldr	r4, [r3, #0]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800d312:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d31a:	041b      	lsls	r3, r3, #16
 800d31c:	4313      	orrs	r3, r2
 800d31e:	461a      	mov	r2, r3
 800d320:	2127      	movs	r1, #39	; 0x27
 800d322:	47a0      	blx	r4
}
 800d324:	bf00      	nop
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd90      	pop	{r4, r7, pc}

0800d32c <_ZN14TMC5130Stepper4DMAXEt>:
///////////////////////////////////////////////////////////////////////////////////////
// W: DMAX
uint16_t TMC5130Stepper::DMAX() { return DMAX_register.sr; }
void TMC5130Stepper::DMAX(uint16_t input) {
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	460b      	mov	r3, r1
 800d336:	807b      	strh	r3, [r7, #2]
  DMAX_register.sr = input;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	887a      	ldrh	r2, [r7, #2]
 800d33c:	f8a3 2061 	strh.w	r2, [r3, #97]	; 0x61
  write(DMAX_register.address, DMAX_register.sr);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	f8b2 2061 	ldrh.w	r2, [r2, #97]	; 0x61
 800d34e:	b292      	uxth	r2, r2
 800d350:	2128      	movs	r1, #40	; 0x28
 800d352:	4798      	blx	r3
}
 800d354:	bf00      	nop
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <_ZN14TMC5130Stepper2D1Et>:
///////////////////////////////////////////////////////////////////////////////////////
// W: D1
uint16_t TMC5130Stepper::D1() { return D1_register.sr; }
void TMC5130Stepper::D1(uint16_t input) {
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	807b      	strh	r3, [r7, #2]
  D1_register.sr = input;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	887a      	ldrh	r2, [r7, #2]
 800d36c:	f8a3 2063 	strh.w	r2, [r3, #99]	; 0x63
  write(D1_register.address, D1_register.sr);
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	f8b2 2063 	ldrh.w	r2, [r2, #99]	; 0x63
 800d37e:	b292      	uxth	r2, r2
 800d380:	212a      	movs	r1, #42	; 0x2a
 800d382:	4798      	blx	r3
}
 800d384:	bf00      	nop
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <_ZN14TMC5130Stepper5VSTOPEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: VSTOP
uint32_t TMC5130Stepper::VSTOP() { return VSTOP_register.sr; }
void TMC5130Stepper::VSTOP(uint32_t input) {
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  if (input == 0 && RAMPMODE() == 0) return;
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d107      	bne.n	800d3ac <_ZN14TMC5130Stepper5VSTOPEm+0x20>
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f7ff feae 	bl	800d0fe <_ZN14TMC5130Stepper8RAMPMODEEv>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d101      	bne.n	800d3ac <_ZN14TMC5130Stepper5VSTOPEm+0x20>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e000      	b.n	800d3ae <_ZN14TMC5130Stepper5VSTOPEm+0x22>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d127      	bne.n	800d402 <_ZN14TMC5130Stepper5VSTOPEm+0x76>
  VSTOP_register.sr = input;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	b2d1      	uxtb	r1, r2
 800d3bc:	2000      	movs	r0, #0
 800d3be:	4301      	orrs	r1, r0
 800d3c0:	f883 1065 	strb.w	r1, [r3, #101]	; 0x65
 800d3c4:	0a11      	lsrs	r1, r2, #8
 800d3c6:	b2c9      	uxtb	r1, r1
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	4301      	orrs	r1, r0
 800d3cc:	f883 1066 	strb.w	r1, [r3, #102]	; 0x66
 800d3d0:	0c12      	lsrs	r2, r2, #16
 800d3d2:	f002 0203 	and.w	r2, r2, #3
 800d3d6:	f002 0003 	and.w	r0, r2, #3
 800d3da:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800d3de:	f022 0203 	bic.w	r2, r2, #3
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	430a      	orrs	r2, r1
 800d3e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
  write(VSTOP_register.address, VSTOP_register.sr);
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d3f8:	f3c2 2211 	ubfx	r2, r2, #8, #18
 800d3fc:	212b      	movs	r1, #43	; 0x2b
 800d3fe:	4798      	blx	r3
 800d400:	e000      	b.n	800d404 <_ZN14TMC5130Stepper5VSTOPEm+0x78>
  if (input == 0 && RAMPMODE() == 0) return;
 800d402:	bf00      	nop
}
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <_ZN14TMC5130Stepper9TZEROWAITEt>:
///////////////////////////////////////////////////////////////////////////////////////
// W: TZEROWAIT
uint16_t TMC5130Stepper::TZEROWAIT() { return TZEROWAIT_register.sr; }
void TMC5130Stepper::TZEROWAIT(uint16_t input) {
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b082      	sub	sp, #8
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	460b      	mov	r3, r1
 800d414:	807b      	strh	r3, [r7, #2]
  TZEROWAIT_register.sr = input;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	887a      	ldrh	r2, [r7, #2]
 800d41a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  write(TZEROWAIT_register.address, TZEROWAIT_register.sr);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800d42c:	212c      	movs	r1, #44	; 0x2c
 800d42e:	4798      	blx	r3
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <_ZN14TMC5130Stepper7XTARGETEl>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: XTARGET
int32_t TMC5130Stepper::XTARGET() { return read(XTARGET_t::address); }
void TMC5130Stepper::XTARGET(int32_t input) {
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  write(XTARGET_t::address, input);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	683a      	ldr	r2, [r7, #0]
 800d44c:	212d      	movs	r1, #45	; 0x2d
 800d44e:	4798      	blx	r3
}
 800d450:	bf00      	nop
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <_ZN14TMC5130Stepper9ENC_CONSTEm>:
  write(X_ENC_t::address, input);
}
///////////////////////////////////////////////////////////////////////////////////////
// W: ENC_CONST
uint32_t TMC5130Stepper::ENC_CONST() { return ENC_CONST_register.sr; }
void TMC5130Stepper::ENC_CONST(uint32_t input) {
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  ENC_CONST_register.sr = input;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	683a      	ldr	r2, [r7, #0]
 800d466:	f8c3 206e 	str.w	r2, [r3, #110]	; 0x6e
  write(ENC_CONST_register.address, ENC_CONST_register.sr);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	f8d2 206e 	ldr.w	r2, [r2, #110]	; 0x6e
 800d478:	213a      	movs	r1, #58	; 0x3a
 800d47a:	4798      	blx	r3
}
 800d47c:	bf00      	nop
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <_ZN14TMC5160StepperC1Etfttta>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC5130Stepper(pinCS, RS, link)
  { defaults(); }
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
 800d484:	b590      	push	{r4, r7, lr}
 800d486:	b087      	sub	sp, #28
 800d488:	af02      	add	r7, sp, #8
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	4608      	mov	r0, r1
 800d48e:	ed87 0a01 	vstr	s0, [r7, #4]
 800d492:	4611      	mov	r1, r2
 800d494:	461a      	mov	r2, r3
 800d496:	4603      	mov	r3, r0
 800d498:	817b      	strh	r3, [r7, #10]
 800d49a:	460b      	mov	r3, r1
 800d49c:	813b      	strh	r3, [r7, #8]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	807b      	strh	r3, [r7, #2]
  TMC5130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	887c      	ldrh	r4, [r7, #2]
 800d4a6:	893a      	ldrh	r2, [r7, #8]
 800d4a8:	8979      	ldrh	r1, [r7, #10]
 800d4aa:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	8c3b      	ldrh	r3, [r7, #32]
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	4623      	mov	r3, r4
 800d4b6:	ed97 0a01 	vldr	s0, [r7, #4]
 800d4ba:	f7ff fcb3 	bl	800ce24 <_ZN14TMC5130StepperC1Etfttta>
 800d4be:	4a0a      	ldr	r2, [pc, #40]	; (800d4e8 <_ZN14TMC5160StepperC1Etfttta+0x64>)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	601a      	str	r2, [r3, #0]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800d4cc:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800d4d0:	f022 020f 	bic.w	r2, r2, #15
 800d4d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  { defaults(); }
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f000 f807 	bl	800d4ec <_ZN14TMC5160Stepper8defaultsEv>
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3714      	adds	r7, #20
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd90      	pop	{r4, r7, pc}
 800d4e8:	08018ccc 	.word	0x08018ccc

0800d4ec <_ZN14TMC5160Stepper8defaultsEv>:
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
  TMC5130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5160Stepper::defaults() {
 800d4ec:	b480      	push	{r7}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
 800d4fa:	2106      	movs	r1, #6
 800d4fc:	f361 0303 	bfi	r3, r1, #0, #4
 800d500:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  SHORT_CONF_register.s2g_level = 6;
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800d50a:	2106      	movs	r1, #6
 800d50c:	f361 0303 	bfi	r3, r1, #0, #4
 800d510:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
  SHORT_CONF_register.shortfilter = 0b01;
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800d51a:	2101      	movs	r1, #1
 800d51c:	f361 0301 	bfi	r3, r1, #0, #2
 800d520:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  SHORT_CONF_register.shortdelay = 0;
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800d52a:	f36f 0382 	bfc	r3, #2, #1
 800d52e:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  DRV_CONF_register.bbmtime = 0;
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d538:	f36f 0304 	bfc	r3, #0, #5
 800d53c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
  DRV_CONF_register.bbmclks = 4;
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d546:	2104      	movs	r1, #4
 800d548:	f361 0303 	bfi	r3, r1, #0, #4
 800d54c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  DRV_CONF_register.otselect = 0b00;
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d556:	f36f 0301 	bfc	r3, #0, #2
 800d55a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.drvstrength = 0b10;
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d564:	2102      	movs	r1, #2
 800d566:	f361 0383 	bfi	r3, r1, #2, #2
 800d56a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.filt_isense = 0b00;
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d574:	f36f 1305 	bfc	r3, #4, #2
 800d578:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  TPOWERDOWN_register.sr = 10;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	220a      	movs	r2, #10
 800d580:	71da      	strb	r2, [r3, #7]
  VSTOP_register.sr = 1;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2200      	movs	r2, #0
 800d586:	f042 0201 	orr.w	r2, r2, #1
 800d58a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800d58e:	2200      	movs	r2, #0
 800d590:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800d594:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800d598:	f022 0203 	bic.w	r2, r2, #3
 800d59c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
  ENC_CONST_register.sr = 65536;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f042 0201 	orr.w	r2, r2, #1
 800d5ae:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5b6:	b2d2      	uxtb	r2, r2
 800d5b8:	f042 4282 	orr.w	r2, r2, #1090519040	; 0x41000000
 800d5bc:	f442 32a8 	orr.w	r2, r2, #86016	; 0x15000
 800d5c0:	625a      	str	r2, [r3, #36]	; 0x24
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f042 0210 	orr.w	r2, r2, #16
 800d5c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  PWMCONF_register.sr = 0xC40C001E;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	4a04      	ldr	r2, [pc, #16]	; (800d5e0 <_ZN14TMC5160Stepper8defaultsEv+0xf4>)
 800d5d0:	645a      	str	r2, [r3, #68]	; 0x44
}
 800d5d2:	bf00      	nop
 800d5d4:	370c      	adds	r7, #12
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	c40c001e 	.word	0xc40c001e

0800d5e4 <_ZN14TMC5160Stepper4pushEv>:

void TMC5160Stepper::push() {
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
    IHOLD_IRUN(IHOLD_IRUN_register.sr);
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	f7fe feb3 	bl	800c364 <_ZN10TMCStepper10IHOLD_IRUNEm>
    TPOWERDOWN(TPOWERDOWN_register.sr);
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	79db      	ldrb	r3, [r3, #7]
 800d604:	4619      	mov	r1, r3
 800d606:	4610      	mov	r0, r2
 800d608:	f000 fabe 	bl	800db88 <_ZN10TMCStepper10TPOWERDOWNEh>
    TPWMTHRS(TPWMTHRS_register.sr);
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d616:	4619      	mov	r1, r3
 800d618:	4610      	mov	r0, r2
 800d61a:	f000 faca 	bl	800dbb2 <_ZN10TMCStepper8TPWMTHRSEm>
    GCONF(GCONF_register.sr);
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	f3c3 2311 	ubfx	r3, r3, #8, #18
 800d628:	4619      	mov	r1, r3
 800d62a:	4610      	mov	r0, r2
 800d62c:	f7fe fe7f 	bl	800c32e <_ZN14TMC2130Stepper5GCONFEm>
    TCOOLTHRS(TCOOLTHRS_register.sr);
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	699b      	ldr	r3, [r3, #24]
 800d636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d63a:	4619      	mov	r1, r3
 800d63c:	4610      	mov	r0, r2
 800d63e:	f7ff f999 	bl	800c974 <_ZN14TMC2130Stepper9TCOOLTHRSEm>
    THIGH(THIGH_register.sr);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	7eda      	ldrb	r2, [r3, #27]
 800d648:	8b9b      	ldrh	r3, [r3, #28]
 800d64a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d64e:	021b      	lsls	r3, r3, #8
 800d650:	4313      	orrs	r3, r2
 800d652:	4619      	mov	r1, r3
 800d654:	f7ff f9b5 	bl	800c9c2 <_ZN14TMC2130Stepper5THIGHEm>
    XDIRECT(XDIRECT_register.sr);
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	8bda      	ldrh	r2, [r3, #30]
 800d65e:	8c1b      	ldrh	r3, [r3, #32]
 800d660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d664:	041b      	lsls	r3, r3, #16
 800d666:	4313      	orrs	r3, r2
 800d668:	4619      	mov	r1, r3
 800d66a:	f7ff f9da 	bl	800ca22 <_ZN14TMC2130Stepper7XDIRECTEm>
    VDCMIN(VDCMIN_register.sr);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800d674:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d67c:	041b      	lsls	r3, r3, #16
 800d67e:	4313      	orrs	r3, r2
 800d680:	4619      	mov	r1, r3
 800d682:	f7ff f9fb 	bl	800ca7c <_ZN14TMC2130Stepper6VDCMINEm>
    CHOPCONF(CHOPCONF_register.sr);
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 800d68e:	4619      	mov	r1, r3
 800d690:	4610      	mov	r0, r2
 800d692:	f7fe fba1 	bl	800bdd8 <_ZN14TMC2130Stepper8CHOPCONFEm>
    COOLCONF(COOLCONF_register.sr);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d69c:	0a12      	lsrs	r2, r2, #8
 800d69e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6a2:	f003 0301 	and.w	r3, r3, #1
 800d6a6:	061b      	lsls	r3, r3, #24
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	f7fe fd2d 	bl	800c10a <_ZN14TMC2130Stepper8COOLCONFEm>
    DCCTRL(DCCTRL_register.sr);
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	4610      	mov	r0, r2
 800d6be:	f7ff fa0b 	bl	800cad8 <_ZN14TMC2130Stepper6DCCTRLEm>
    PWMCONF(PWMCONF_register.sr);
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	4610      	mov	r0, r2
 800d6cc:	f7fe fe9f 	bl	800c40e <_ZN14TMC2160Stepper7PWMCONFEm>
    SHORT_CONF(SHORT_CONF_register.sr);
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6d6:	f3c3 2312 	ubfx	r3, r3, #8, #19
 800d6da:	4619      	mov	r1, r3
 800d6dc:	4610      	mov	r0, r2
 800d6de:	f7fe fec7 	bl	800c470 <_ZN14TMC2160Stepper10SHORT_CONFEm>
    DRV_CONF(DRV_CONF_register.sr);
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	4610      	mov	r0, r2
 800d6f0:	f7fe fdd2 	bl	800c298 <_ZN14TMC2160Stepper8DRV_CONFEm>
    GLOBAL_SCALER(GLOBAL_SCALER_register.sr);
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	4610      	mov	r0, r2
 800d700:	f7ff fb78 	bl	800cdf4 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>
    SLAVECONF(SLAVECONF_register.sr);
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d70c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d710:	b29b      	uxth	r3, r3
 800d712:	4619      	mov	r1, r3
 800d714:	4610      	mov	r0, r2
 800d716:	f7ff fc69 	bl	800cfec <_ZN14TMC5130Stepper9SLAVECONFEt>
    TMC_OUTPUT(OUTPUT_register.sr);
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d722:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d726:	b2db      	uxtb	r3, r3
 800d728:	4619      	mov	r1, r3
 800d72a:	4610      	mov	r0, r2
 800d72c:	f7ff fcb3 	bl	800d096 <_ZN14TMC5130Stepper10TMC_OUTPUTEb>
    X_COMPARE(X_COMPARE_register.sr);
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8d3 304b 	ldr.w	r3, [r3, #75]	; 0x4b
 800d738:	4619      	mov	r1, r3
 800d73a:	4610      	mov	r0, r2
 800d73c:	f7ff fcc9 	bl	800d0d2 <_ZN14TMC5130Stepper9X_COMPAREEm>
    RAMPMODE(RAMPMODE_register.sr);
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800d748:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	4619      	mov	r1, r3
 800d750:	4610      	mov	r0, r2
 800d752:	f7ff fce6 	bl	800d122 <_ZN14TMC5130Stepper8RAMPMODEEh>
    XACTUAL(XACTUAL_register.sr);
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d75c:	4619      	mov	r1, r3
 800d75e:	4610      	mov	r0, r2
 800d760:	f7ff fd00 	bl	800d164 <_ZN14TMC5130Stepper7XACTUALEl>
    VSTART(VSTART_register.sr);
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d76a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d76e:	4619      	mov	r1, r3
 800d770:	4610      	mov	r0, r2
 800d772:	f7ff fd22 	bl	800d1ba <_ZN14TMC5130Stepper6VSTARTEm>
    A1(A1_register.sr);
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8b3 3057 	ldrh.w	r3, [r3, #87]	; 0x57
 800d77e:	b29b      	uxth	r3, r3
 800d780:	4619      	mov	r1, r3
 800d782:	4610      	mov	r0, r2
 800d784:	f7ff fd43 	bl	800d20e <_ZN14TMC5130Stepper2A1Et>
    V1(V1_register.sr);
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d78e:	f3c3 2313 	ubfx	r3, r3, #8, #20
 800d792:	4619      	mov	r1, r3
 800d794:	4610      	mov	r0, r2
 800d796:	f7ff fd52 	bl	800d23e <_ZN14TMC5130Stepper2V1Em>
    AMAX(AMAX_register.sr);
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	4610      	mov	r0, r2
 800d7a6:	f7ff fd7a 	bl	800d29e <_ZN14TMC5130Stepper4AMAXEt>
    VMAX(VMAX_register.sr);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800d7b2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ba:	041b      	lsls	r3, r3, #16
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	4619      	mov	r1, r3
 800d7c0:	f7ff fd84 	bl	800d2cc <_ZN14TMC5130Stepper4VMAXEm>
    DMAX(DMAX_register.sr);
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8b3 3061 	ldrh.w	r3, [r3, #97]	; 0x61
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	f7ff fdab 	bl	800d32c <_ZN14TMC5130Stepper4DMAXEt>
    D1(D1_register.sr);
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8b3 3063 	ldrh.w	r3, [r3, #99]	; 0x63
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	4610      	mov	r0, r2
 800d7e4:	f7ff fdba 	bl	800d35c <_ZN14TMC5130Stepper2D1Et>
    VSTOP(VSTOP_register.sr);
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7ee:	f3c3 2311 	ubfx	r3, r3, #8, #18
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4610      	mov	r0, r2
 800d7f6:	f7ff fdc9 	bl	800d38c <_ZN14TMC5130Stepper5VSTOPEm>
    TZEROWAIT(TZEROWAIT_register.sr);
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d802:	4619      	mov	r1, r3
 800d804:	4610      	mov	r0, r2
 800d806:	f7ff fe00 	bl	800d40a <_ZN14TMC5130Stepper9TZEROWAITEt>
    SW_MODE(SW_MODE_register.sr);
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d816:	b29b      	uxth	r3, r3
 800d818:	4619      	mov	r1, r3
 800d81a:	4610      	mov	r0, r2
 800d81c:	f7fe fe43 	bl	800c4a6 <_ZN14TMC5130Stepper7SW_MODEEm>
    ENCMODE(ENCMODE_register.sr);
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	4619      	mov	r1, r3
 800d830:	4610      	mov	r0, r2
 800d832:	f7fe fd5c 	bl	800c2ee <_ZN14TMC5130Stepper7ENCMODEEm>
    ENC_CONST(ENC_CONST_register.sr);
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 306e 	ldr.w	r3, [r3, #110]	; 0x6e
 800d83e:	4619      	mov	r1, r3
 800d840:	4610      	mov	r0, r2
 800d842:	f7ff fe09 	bl	800d458 <_ZN14TMC5130Stepper9ENC_CONSTEm>
	ENC_DEVIATION(ENC_DEVIATION_register.sr);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 800d84c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d850:	f003 030f 	and.w	r3, r3, #15
 800d854:	041b      	lsls	r3, r3, #16
 800d856:	4313      	orrs	r3, r2
 800d858:	4619      	mov	r1, r3
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f804 	bl	800d868 <_ZN14TMC5160Stepper13ENC_DEVIATIONEm>
}
 800d860:	bf00      	nop
 800d862:	3708      	adds	r7, #8
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <_ZN14TMC5160Stepper13ENC_DEVIATIONEm>:
	write(ENC_STATUS_t::address, input & 0x3);
}

// W: ENC_DEVIATION
uint32_t TMC5160Stepper::ENC_DEVIATION() { return ENC_DEVIATION_register.sr; }
void TMC5160Stepper::ENC_DEVIATION(uint32_t input) {
 800d868:	b590      	push	{r4, r7, lr}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
	ENC_DEVIATION_register.sr = input;
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	b291      	uxth	r1, r2
 800d87c:	2000      	movs	r0, #0
 800d87e:	4301      	orrs	r1, r0
 800d880:	f8a3 1072 	strh.w	r1, [r3, #114]	; 0x72
 800d884:	0c12      	lsrs	r2, r2, #16
 800d886:	f002 020f 	and.w	r2, r2, #15
 800d88a:	f002 000f 	and.w	r0, r2, #15
 800d88e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800d892:	f022 020f 	bic.w	r2, r2, #15
 800d896:	4611      	mov	r1, r2
 800d898:	4602      	mov	r2, r0
 800d89a:	430a      	orrs	r2, r1
 800d89c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	write(ENC_DEVIATION_register.address, ENC_DEVIATION_register.sr);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	681c      	ldr	r4, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 800d8ae:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d8b2:	f003 030f 	and.w	r3, r3, #15
 800d8b6:	041b      	lsls	r3, r3, #16
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	213d      	movs	r1, #61	; 0x3d
 800d8be:	47a0      	blx	r4
}
 800d8c0:	bf00      	nop
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd90      	pop	{r4, r7, pc}

0800d8c8 <_ZN10TMCStepper15test_connectionEv>:

uint16_t TMCStepper::rms_current() {
  return cs2rms(irun());
}

uint8_t TMCStepper::test_connection() {
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  uint32_t drv_status = DRV_STATUS();
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	3310      	adds	r3, #16
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	4798      	blx	r3
 800d8dc:	60f8      	str	r0, [r7, #12]
  switch (drv_status) {
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d005      	beq.n	800d8f0 <_ZN10TMCStepper15test_connectionEv+0x28>
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ea:	d103      	bne.n	800d8f4 <_ZN10TMCStepper15test_connectionEv+0x2c>
      case 0xFFFFFFFF: return 1;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e002      	b.n	800d8f6 <_ZN10TMCStepper15test_connectionEv+0x2e>
      case 0: return 2;
 800d8f0:	2302      	movs	r3, #2
 800d8f2:	e000      	b.n	800d8f6 <_ZN10TMCStepper15test_connectionEv+0x2e>
      default: return 0;
 800d8f4:	2300      	movs	r3, #0
  }
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
	...

0800d900 <_ZN10TMCStepper10microstepsEt>:
int8_t TMCStepper::hysteresis_end() { return hend()-3; };

void TMCStepper::hysteresis_start(uint8_t value) { hstrt(value-1); }
uint8_t TMCStepper::hysteresis_start() { return hstrt()+1; }

void TMCStepper::microsteps(uint16_t ms) {
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	460b      	mov	r3, r1
 800d90a:	807b      	strh	r3, [r7, #2]
  switch(ms) {
 800d90c:	887b      	ldrh	r3, [r7, #2]
 800d90e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d912:	d058      	beq.n	800d9c6 <_ZN10TMCStepper10microstepsEt+0xc6>
 800d914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d918:	f300 809d 	bgt.w	800da56 <_ZN10TMCStepper10microstepsEt+0x156>
 800d91c:	2b80      	cmp	r3, #128	; 0x80
 800d91e:	d05a      	beq.n	800d9d6 <_ZN10TMCStepper10microstepsEt+0xd6>
 800d920:	2b80      	cmp	r3, #128	; 0x80
 800d922:	f300 8098 	bgt.w	800da56 <_ZN10TMCStepper10microstepsEt+0x156>
 800d926:	2b20      	cmp	r3, #32
 800d928:	dc4a      	bgt.n	800d9c0 <_ZN10TMCStepper10microstepsEt+0xc0>
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f2c0 8093 	blt.w	800da56 <_ZN10TMCStepper10microstepsEt+0x156>
 800d930:	2b20      	cmp	r3, #32
 800d932:	f200 8090 	bhi.w	800da56 <_ZN10TMCStepper10microstepsEt+0x156>
 800d936:	a201      	add	r2, pc, #4	; (adr r2, 800d93c <_ZN10TMCStepper10microstepsEt+0x3c>)
 800d938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93c:	0800da47 	.word	0x0800da47
 800d940:	0800da57 	.word	0x0800da57
 800d944:	0800da37 	.word	0x0800da37
 800d948:	0800da57 	.word	0x0800da57
 800d94c:	0800da27 	.word	0x0800da27
 800d950:	0800da57 	.word	0x0800da57
 800d954:	0800da57 	.word	0x0800da57
 800d958:	0800da57 	.word	0x0800da57
 800d95c:	0800da17 	.word	0x0800da17
 800d960:	0800da57 	.word	0x0800da57
 800d964:	0800da57 	.word	0x0800da57
 800d968:	0800da57 	.word	0x0800da57
 800d96c:	0800da57 	.word	0x0800da57
 800d970:	0800da57 	.word	0x0800da57
 800d974:	0800da57 	.word	0x0800da57
 800d978:	0800da57 	.word	0x0800da57
 800d97c:	0800da07 	.word	0x0800da07
 800d980:	0800da57 	.word	0x0800da57
 800d984:	0800da57 	.word	0x0800da57
 800d988:	0800da57 	.word	0x0800da57
 800d98c:	0800da57 	.word	0x0800da57
 800d990:	0800da57 	.word	0x0800da57
 800d994:	0800da57 	.word	0x0800da57
 800d998:	0800da57 	.word	0x0800da57
 800d99c:	0800da57 	.word	0x0800da57
 800d9a0:	0800da57 	.word	0x0800da57
 800d9a4:	0800da57 	.word	0x0800da57
 800d9a8:	0800da57 	.word	0x0800da57
 800d9ac:	0800da57 	.word	0x0800da57
 800d9b0:	0800da57 	.word	0x0800da57
 800d9b4:	0800da57 	.word	0x0800da57
 800d9b8:	0800da57 	.word	0x0800da57
 800d9bc:	0800d9f7 	.word	0x0800d9f7
 800d9c0:	2b40      	cmp	r3, #64	; 0x40
 800d9c2:	d010      	beq.n	800d9e6 <_ZN10TMCStepper10microstepsEt+0xe6>
    case  16: mres(4); break;
    case   8: mres(5); break;
    case   4: mres(6); break;
    case   2: mres(7); break;
    case   0: mres(8); break;
    default: break;
 800d9c4:	e047      	b.n	800da56 <_ZN10TMCStepper10microstepsEt+0x156>
    case 256: mres(0); break;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	3324      	adds	r3, #36	; 0x24
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	4798      	blx	r3
 800d9d4:	e040      	b.n	800da58 <_ZN10TMCStepper10microstepsEt+0x158>
    case 128: mres(1); break;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3324      	adds	r3, #36	; 0x24
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2101      	movs	r1, #1
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	4798      	blx	r3
 800d9e4:	e038      	b.n	800da58 <_ZN10TMCStepper10microstepsEt+0x158>
    case  64: mres(2); break;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3324      	adds	r3, #36	; 0x24
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2102      	movs	r1, #2
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	4798      	blx	r3
 800d9f4:	e030      	b.n	800da58 <_ZN10TMCStepper10microstepsEt+0x158>
    case  32: mres(3); break;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	3324      	adds	r3, #36	; 0x24
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2103      	movs	r1, #3
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	4798      	blx	r3
 800da04:	e028      	b.n	800da58 <_ZN10TMCStepper10microstepsEt+0x158>
    case  16: mres(4); break;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	3324      	adds	r3, #36	; 0x24
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2104      	movs	r1, #4
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	4798      	blx	r3
 800da14:	e020      	b.n	800da58 <_ZN10TMCStepper10microstepsEt+0x158>
    case   8: mres(5); break;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	3324      	adds	r3, #36	; 0x24
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2105      	movs	r1, #5
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	4798      	blx	r3
 800da24:	e018      	b.n	800da58 <_ZN10TMCStepper10microstepsEt+0x158>
    case   4: mres(6); break;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	3324      	adds	r3, #36	; 0x24
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	2106      	movs	r1, #6
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	4798      	blx	r3
 800da34:	e010      	b.n	800da58 <_ZN10TMCStepper10microstepsEt+0x158>
    case   2: mres(7); break;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	3324      	adds	r3, #36	; 0x24
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2107      	movs	r1, #7
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	4798      	blx	r3
 800da44:	e008      	b.n	800da58 <_ZN10TMCStepper10microstepsEt+0x158>
    case   0: mres(8); break;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	3324      	adds	r3, #36	; 0x24
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2108      	movs	r1, #8
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	4798      	blx	r3
 800da54:	e000      	b.n	800da58 <_ZN10TMCStepper10microstepsEt+0x158>
    default: break;
 800da56:	bf00      	nop
  }
}
 800da58:	bf00      	nop
 800da5a:	3708      	adds	r7, #8
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <_ZN10TMCStepper10microstepsEv>:

uint16_t TMCStepper::microsteps() {
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  switch(mres()) {
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	3328      	adds	r3, #40	; 0x28
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	4798      	blx	r3
 800da74:	4603      	mov	r3, r0
 800da76:	2b08      	cmp	r3, #8
 800da78:	d827      	bhi.n	800daca <_ZN10TMCStepper10microstepsEv+0x6a>
 800da7a:	a201      	add	r2, pc, #4	; (adr r2, 800da80 <_ZN10TMCStepper10microstepsEv+0x20>)
 800da7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da80:	0800daa5 	.word	0x0800daa5
 800da84:	0800daab 	.word	0x0800daab
 800da88:	0800daaf 	.word	0x0800daaf
 800da8c:	0800dab3 	.word	0x0800dab3
 800da90:	0800dab7 	.word	0x0800dab7
 800da94:	0800dabb 	.word	0x0800dabb
 800da98:	0800dabf 	.word	0x0800dabf
 800da9c:	0800dac3 	.word	0x0800dac3
 800daa0:	0800dac7 	.word	0x0800dac7
    case 0: return 256;
 800daa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800daa8:	e010      	b.n	800dacc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 1: return 128;
 800daaa:	2380      	movs	r3, #128	; 0x80
 800daac:	e00e      	b.n	800dacc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 2: return  64;
 800daae:	2340      	movs	r3, #64	; 0x40
 800dab0:	e00c      	b.n	800dacc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 3: return  32;
 800dab2:	2320      	movs	r3, #32
 800dab4:	e00a      	b.n	800dacc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 4: return  16;
 800dab6:	2310      	movs	r3, #16
 800dab8:	e008      	b.n	800dacc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 5: return   8;
 800daba:	2308      	movs	r3, #8
 800dabc:	e006      	b.n	800dacc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 6: return   4;
 800dabe:	2304      	movs	r3, #4
 800dac0:	e004      	b.n	800dacc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 7: return   2;
 800dac2:	2302      	movs	r3, #2
 800dac4:	e002      	b.n	800dacc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 8: return   0;
 800dac6:	2300      	movs	r3, #0
 800dac8:	e000      	b.n	800dacc <_ZN10TMCStepper10microstepsEv+0x6c>
  }
  return 0;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <_ZN10TMCStepper10blank_timeEh>:

void TMCStepper::blank_time(uint8_t value) {
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	460b      	mov	r3, r1
 800dade:	70fb      	strb	r3, [r7, #3]
  switch (value) {
 800dae0:	78fb      	ldrb	r3, [r7, #3]
 800dae2:	2b36      	cmp	r3, #54	; 0x36
 800dae4:	d022      	beq.n	800db2c <_ZN10TMCStepper10blank_timeEh+0x58>
 800dae6:	2b36      	cmp	r3, #54	; 0x36
 800dae8:	dc28      	bgt.n	800db3c <_ZN10TMCStepper10blank_timeEh+0x68>
 800daea:	2b24      	cmp	r3, #36	; 0x24
 800daec:	d016      	beq.n	800db1c <_ZN10TMCStepper10blank_timeEh+0x48>
 800daee:	2b24      	cmp	r3, #36	; 0x24
 800daf0:	dc24      	bgt.n	800db3c <_ZN10TMCStepper10blank_timeEh+0x68>
 800daf2:	2b10      	cmp	r3, #16
 800daf4:	d002      	beq.n	800dafc <_ZN10TMCStepper10blank_timeEh+0x28>
 800daf6:	2b18      	cmp	r3, #24
 800daf8:	d008      	beq.n	800db0c <_ZN10TMCStepper10blank_timeEh+0x38>
    case 16: tbl(0b00); break;
    case 24: tbl(0b01); break;
    case 36: tbl(0b10); break;
    case 54: tbl(0b11); break;
  }
}
 800dafa:	e01f      	b.n	800db3c <_ZN10TMCStepper10blank_timeEh+0x68>
    case 16: tbl(0b00); break;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	332c      	adds	r3, #44	; 0x2c
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2100      	movs	r1, #0
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	4798      	blx	r3
 800db0a:	e017      	b.n	800db3c <_ZN10TMCStepper10blank_timeEh+0x68>
    case 24: tbl(0b01); break;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	332c      	adds	r3, #44	; 0x2c
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2101      	movs	r1, #1
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	4798      	blx	r3
 800db1a:	e00f      	b.n	800db3c <_ZN10TMCStepper10blank_timeEh+0x68>
    case 36: tbl(0b10); break;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	332c      	adds	r3, #44	; 0x2c
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2102      	movs	r1, #2
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	4798      	blx	r3
 800db2a:	e007      	b.n	800db3c <_ZN10TMCStepper10blank_timeEh+0x68>
    case 54: tbl(0b11); break;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	332c      	adds	r3, #44	; 0x2c
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2103      	movs	r1, #3
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	4798      	blx	r3
 800db3a:	bf00      	nop
}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <_ZN10TMCStepper5GSTATEv>:
  return 0;
}

///////////////////////////////////////////////////////////////////////////////////////
// R+C: GSTAT
uint8_t TMCStepper::GSTAT()  { return read(GSTAT_t::address); }
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	3304      	adds	r3, #4
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2101      	movs	r1, #1
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	4798      	blx	r3
 800db5a:	4603      	mov	r3, r0
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	4618      	mov	r0, r3
 800db60:	3708      	adds	r7, #8
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <_ZN10TMCStepper5GSTATEh>:
void  TMCStepper::GSTAT(uint8_t){ write(GSTAT_t::address, 0b111); }
 800db66:	b580      	push	{r7, lr}
 800db68:	b082      	sub	sp, #8
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	460b      	mov	r3, r1
 800db70:	70fb      	strb	r3, [r7, #3]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2207      	movs	r2, #7
 800db7a:	2101      	movs	r1, #1
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	4798      	blx	r3
 800db80:	bf00      	nop
 800db82:	3708      	adds	r7, #8
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <_ZN10TMCStepper10TPOWERDOWNEh>:
bool  TMCStepper::drv_err()  { GSTAT_t r; r.sr = GSTAT(); return r.drv_err; }
bool  TMCStepper::uv_cp()    { GSTAT_t r; r.sr = GSTAT(); return r.uv_cp; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPOWERDOWN
uint8_t TMCStepper::TPOWERDOWN() { return TPOWERDOWN_register.sr; }
void TMCStepper::TPOWERDOWN(uint8_t input) {
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	460b      	mov	r3, r1
 800db92:	70fb      	strb	r3, [r7, #3]
  TPOWERDOWN_register.sr = input;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	78fa      	ldrb	r2, [r7, #3]
 800db98:	71da      	strb	r2, [r3, #7]
  write(TPOWERDOWN_register.address, TPOWERDOWN_register.sr);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	79d2      	ldrb	r2, [r2, #7]
 800dba4:	2111      	movs	r1, #17
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	4798      	blx	r3
}
 800dbaa:	bf00      	nop
 800dbac:	3708      	adds	r7, #8
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <_ZN10TMCStepper8TPWMTHRSEm>:
// R: TSTEP
uint32_t TMCStepper::TSTEP() { return read(TSTEP_t::address); }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPWMTHRS
uint32_t TMCStepper::TPWMTHRS() { return TPWMTHRS_register.sr; }
void TMCStepper::TPWMTHRS(uint32_t input) {
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b082      	sub	sp, #8
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
 800dbba:	6039      	str	r1, [r7, #0]
  TPWMTHRS_register.sr = input;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	b291      	uxth	r1, r2
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	4301      	orrs	r1, r0
 800dbca:	8119      	strh	r1, [r3, #8]
 800dbcc:	0c12      	lsrs	r2, r2, #16
 800dbce:	f002 020f 	and.w	r2, r2, #15
 800dbd2:	f002 000f 	and.w	r0, r2, #15
 800dbd6:	7a9a      	ldrb	r2, [r3, #10]
 800dbd8:	f022 020f 	bic.w	r2, r2, #15
 800dbdc:	4611      	mov	r1, r2
 800dbde:	4602      	mov	r2, r0
 800dbe0:	430a      	orrs	r2, r1
 800dbe2:	729a      	strb	r2, [r3, #10]
  write(TPWMTHRS_register.address, TPWMTHRS_register.sr);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	6892      	ldr	r2, [r2, #8]
 800dbee:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dbf2:	2113      	movs	r1, #19
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	4798      	blx	r3
}
 800dbf8:	bf00      	nop
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <CO_fifo_getOccupied>:
 *
 * @param fifo This object
 *
 * @return number of occupied bytes
 */
static inline size_t CO_fifo_getOccupied(CO_fifo_t *fifo) {
 800dc00:	b480      	push	{r7}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - fifo->readPtr;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	689a      	ldr	r2, [r3, #8]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	1ad3      	subs	r3, r2, r3
 800dc12:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	da04      	bge.n	800dc24 <CO_fifo_getOccupied+0x24>
        sizeOccupied += fifo->bufSize;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685a      	ldr	r2, [r3, #4]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	4413      	add	r3, r2
 800dc22:	60fb      	str	r3, [r7, #12]
    }

    return (size_t) sizeOccupied;
 800dc24:	68fb      	ldr	r3, [r7, #12]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3714      	adds	r7, #20
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
	...

0800dc34 <FUART_Init>:
CO_fifo_t g_txFifo;
SemaphoreHandle_t g_txMutex = NULL;
SemaphoreHandle_t g_rxMutex = NULL;

void FUART_Init()
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	af00      	add	r7, sp, #0
	CO_fifo_init(&g_rxFifo, g_RxFifoBuf, RXFIFO_BUFSIZE);
 800dc38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc3c:	490b      	ldr	r1, [pc, #44]	; (800dc6c <FUART_Init+0x38>)
 800dc3e:	480c      	ldr	r0, [pc, #48]	; (800dc70 <FUART_Init+0x3c>)
 800dc40:	f000 f9a2 	bl	800df88 <CO_fifo_init>
	CO_fifo_init(&g_txFifo, g_TxFifoBuf, TXFIFO_BUFSIZE);
 800dc44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc48:	490a      	ldr	r1, [pc, #40]	; (800dc74 <FUART_Init+0x40>)
 800dc4a:	480b      	ldr	r0, [pc, #44]	; (800dc78 <FUART_Init+0x44>)
 800dc4c:	f000 f99c 	bl	800df88 <CO_fifo_init>

	g_txMutex = xSemaphoreCreateMutex();
 800dc50:	2001      	movs	r0, #1
 800dc52:	f005 fdb4 	bl	80137be <xQueueCreateMutex>
 800dc56:	4603      	mov	r3, r0
 800dc58:	4a08      	ldr	r2, [pc, #32]	; (800dc7c <FUART_Init+0x48>)
 800dc5a:	6013      	str	r3, [r2, #0]
	g_rxMutex = xSemaphoreCreateMutex();
 800dc5c:	2001      	movs	r0, #1
 800dc5e:	f005 fdae 	bl	80137be <xQueueCreateMutex>
 800dc62:	4603      	mov	r3, r0
 800dc64:	4a06      	ldr	r2, [pc, #24]	; (800dc80 <FUART_Init+0x4c>)
 800dc66:	6013      	str	r3, [r2, #0]
}
 800dc68:	bf00      	nop
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	20000d40 	.word	0x20000d40
 800dc70:	20002540 	.word	0x20002540
 800dc74:	20001540 	.word	0x20001540
 800dc78:	20002554 	.word	0x20002554
 800dc7c:	20002568 	.word	0x20002568
 800dc80:	2000256c 	.word	0x2000256c

0800dc84 <FUART_beginReceive>:

void FUART_beginReceive(UART_HandleTypeDef* uart)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart, (uint8_t*)g_UARTRxDMABuf, UART_RXDMA_BUFSIZE);
 800dc8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dc90:	4903      	ldr	r1, [pc, #12]	; (800dca0 <FUART_beginReceive+0x1c>)
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f004 f9ac 	bl	8011ff0 <HAL_UART_Receive_DMA>
}
 800dc98:	bf00      	nop
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	20002140 	.word	0x20002140

0800dca4 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t>:

void FUART_pushMsgToFifo(Joint_Msg_t *msg, uint8_t *data, size_t datalen, CO_fifo_t* fifo)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
 800dcb0:	603b      	str	r3, [r7, #0]
	// Enter critical section
	if (xSemaphoreTake(g_txMutex,  (TickType_t) 0)) {
 800dcb2:	4b14      	ldr	r3, [pc, #80]	; (800dd04 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x60>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f006 f89d 	bl	8013df8 <xQueueSemaphoreTake>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	bf14      	ite	ne
 800dcc4:	2301      	movne	r3, #1
 800dcc6:	2300      	moveq	r3, #0
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d016      	beq.n	800dcfc <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x58>
		CO_fifo_write(fifo, (const char *)msg, JOINT_MSG_LEN, NULL);
 800dcce:	2300      	movs	r3, #0
 800dcd0:	2204      	movs	r2, #4
 800dcd2:	68f9      	ldr	r1, [r7, #12]
 800dcd4:	6838      	ldr	r0, [r7, #0]
 800dcd6:	f000 f979 	bl	800dfcc <CO_fifo_write>
		if (msg->len > 0){
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	789b      	ldrb	r3, [r3, #2]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d005      	beq.n	800dcee <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x4a>
			CO_fifo_write(fifo, (const char *)data, datalen, NULL);
 800dce2:	2300      	movs	r3, #0
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	68b9      	ldr	r1, [r7, #8]
 800dce8:	6838      	ldr	r0, [r7, #0]
 800dcea:	f000 f96f 	bl	800dfcc <CO_fifo_write>
		}
		xSemaphoreGive(g_txMutex);
 800dcee:	4b05      	ldr	r3, [pc, #20]	; (800dd04 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x60>)
 800dcf0:	6818      	ldr	r0, [r3, #0]
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	f005 fd7a 	bl	80137f0 <xQueueGenericSend>
	}
	// Exit critical
}
 800dcfc:	bf00      	nop
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	20002568 	.word	0x20002568

0800dd08 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh>:

static size_t internalPeekMsgFromFifo(CO_fifo_t* fifo, uint8_t *buf)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
	size_t len = CO_fifo_getOccupied(fifo);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f7ff ff74 	bl	800dc00 <CO_fifo_getOccupied>
 800dd18:	60f8      	str	r0, [r7, #12]
	if (len < JOINT_MSG_LEN){
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2b03      	cmp	r3, #3
 800dd1e:	d801      	bhi.n	800dd24 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x1c>
		return 0;
 800dd20:	2300      	movs	r3, #0
 800dd22:	e035      	b.n	800dd90 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x88>
	}

	// read message hdr
	CO_fifo_altBegin(fifo, 0);
 800dd24:	2100      	movs	r1, #0
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 f9a4 	bl	800e074 <CO_fifo_altBegin>
	CO_fifo_altRead(fifo, (char*)buf, JOINT_MSG_LEN);
 800dd2c:	2204      	movs	r2, #4
 800dd2e:	6839      	ldr	r1, [r7, #0]
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 fa0e 	bl	800e152 <CO_fifo_altRead>
	Joint_Msg_t* msg = (Joint_Msg_t*)buf;
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	60bb      	str	r3, [r7, #8]
	if (msg->len > 0){
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	789b      	ldrb	r3, [r3, #2]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d01f      	beq.n	800dd82 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x7a>
		if (len < (uint16_t)(msg->len + JOINT_MSG_LEN)){
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	789b      	ldrb	r3, [r3, #2]
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	3304      	adds	r3, #4
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d201      	bcs.n	800dd58 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x50>
			// message not ready yet
			return 0;
 800dd54:	2300      	movs	r3, #0
 800dd56:	e01b      	b.n	800dd90 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x88>
		}

		// read message params from fifo
		CO_fifo_altBegin(fifo, JOINT_MSG_LEN);
 800dd58:	2104      	movs	r1, #4
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f98a 	bl	800e074 <CO_fifo_altBegin>
		CO_fifo_altRead(fifo, (char*)(buf + JOINT_MSG_LEN), msg->len);
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	1d19      	adds	r1, r3, #4
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	789b      	ldrb	r3, [r3, #2]
 800dd68:	461a      	mov	r2, r3
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f9f1 	bl	800e152 <CO_fifo_altRead>
		CO_fifo_altFinish(fifo, NULL);
 800dd70:	2100      	movs	r1, #0
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 f9b4 	bl	800e0e0 <CO_fifo_altFinish>
		len = msg->len + JOINT_MSG_LEN;
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	789b      	ldrb	r3, [r3, #2]
 800dd7c:	3304      	adds	r3, #4
 800dd7e:	60fb      	str	r3, [r7, #12]
 800dd80:	e005      	b.n	800dd8e <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x86>
	}else {
		CO_fifo_altFinish(fifo, NULL);
 800dd82:	2100      	movs	r1, #0
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 f9ab 	bl	800e0e0 <CO_fifo_altFinish>
		len = JOINT_MSG_LEN;
 800dd8a:	2304      	movs	r3, #4
 800dd8c:	60fb      	str	r3, [r7, #12]
	}

	return len;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <FUART_sendMsg>:

void FUART_sendMsg(Joint_Msg_t *msg, uint8_t *data, size_t len)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
	// Check UART transmit busy
	if (huart1.gState != HAL_UART_STATE_READY || (huart1.Instance->CR3 & USART_CR3_DMAT)){
 800dda4:	4b23      	ldr	r3, [pc, #140]	; (800de34 <FUART_sendMsg+0x9c>)
 800dda6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	2b20      	cmp	r3, #32
 800ddae:	d106      	bne.n	800ddbe <FUART_sendMsg+0x26>
 800ddb0:	4b20      	ldr	r3, [pc, #128]	; (800de34 <FUART_sendMsg+0x9c>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <FUART_sendMsg+0x2a>
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e000      	b.n	800ddc4 <FUART_sendMsg+0x2c>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d006      	beq.n	800ddd6 <FUART_sendMsg+0x3e>
		FUART_pushMsgToFifo(msg, data, len, &g_txFifo);
 800ddc8:	4b1b      	ldr	r3, [pc, #108]	; (800de38 <FUART_sendMsg+0xa0>)
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	68b9      	ldr	r1, [r7, #8]
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	f7ff ff68 	bl	800dca4 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t>
		return;
 800ddd4:	e02b      	b.n	800de2e <FUART_sendMsg+0x96>
	}

	// UART Transmit
	if (xSemaphoreTake(g_txMutex, (TickType_t)0)){
 800ddd6:	4b19      	ldr	r3, [pc, #100]	; (800de3c <FUART_sendMsg+0xa4>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2100      	movs	r1, #0
 800dddc:	4618      	mov	r0, r3
 800ddde:	f006 f80b 	bl	8013df8 <xQueueSemaphoreTake>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	bf14      	ite	ne
 800dde8:	2301      	movne	r3, #1
 800ddea:	2300      	moveq	r3, #0
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d01d      	beq.n	800de2e <FUART_sendMsg+0x96>
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	461a      	mov	r2, r3
		memcpy(g_UARTTxDMABuf, msg, JOINT_MSG_LEN);
 800ddf8:	4b11      	ldr	r3, [pc, #68]	; (800de40 <FUART_sendMsg+0xa8>)
 800ddfa:	601a      	str	r2, [r3, #0]
		if (msg->len > 0){
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	789b      	ldrb	r3, [r3, #2]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d004      	beq.n	800de0e <FUART_sendMsg+0x76>
			memcpy(&g_UARTTxDMABuf[JOINT_MSG_LEN], data, len);
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	68b9      	ldr	r1, [r7, #8]
 800de08:	480e      	ldr	r0, [pc, #56]	; (800de44 <FUART_sendMsg+0xac>)
 800de0a:	f008 fed9 	bl	8016bc0 <memcpy>
		}
		HAL_UART_Transmit_DMA(&huart1, g_UARTTxDMABuf, len + JOINT_MSG_LEN);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	b29b      	uxth	r3, r3
 800de12:	3304      	adds	r3, #4
 800de14:	b29b      	uxth	r3, r3
 800de16:	461a      	mov	r2, r3
 800de18:	4909      	ldr	r1, [pc, #36]	; (800de40 <FUART_sendMsg+0xa8>)
 800de1a:	4806      	ldr	r0, [pc, #24]	; (800de34 <FUART_sendMsg+0x9c>)
 800de1c:	f004 f87c 	bl	8011f18 <HAL_UART_Transmit_DMA>
		xSemaphoreGive(g_txMutex);
 800de20:	4b06      	ldr	r3, [pc, #24]	; (800de3c <FUART_sendMsg+0xa4>)
 800de22:	6818      	ldr	r0, [r3, #0]
 800de24:	2300      	movs	r3, #0
 800de26:	2200      	movs	r2, #0
 800de28:	2100      	movs	r1, #0
 800de2a:	f005 fce1 	bl	80137f0 <xQueueGenericSend>
	}
}
 800de2e:	3710      	adds	r7, #16
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	2000093c 	.word	0x2000093c
 800de38:	20002554 	.word	0x20002554
 800de3c:	20002568 	.word	0x20002568
 800de40:	20001d40 	.word	0x20001d40
 800de44:	20001d44 	.word	0x20001d44

0800de48 <HAL_UART_TxCpltCallback>:
//
// UART callback functions
//

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a1e      	ldr	r2, [pc, #120]	; (800ded0 <HAL_UART_TxCpltCallback+0x88>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d136      	bne.n	800dec8 <HAL_UART_TxCpltCallback+0x80>

		// Move to next message
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800de5a:	2300      	movs	r3, #0
 800de5c:	60bb      	str	r3, [r7, #8]
		if (xSemaphoreTakeFromISR(g_txMutex, &xHigherPriorityTaskWoken)){
 800de5e:	4b1d      	ldr	r3, [pc, #116]	; (800ded4 <HAL_UART_TxCpltCallback+0x8c>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f107 0208 	add.w	r2, r7, #8
 800de66:	2100      	movs	r1, #0
 800de68:	4618      	mov	r0, r3
 800de6a:	f006 f8d1 	bl	8014010 <xQueueReceiveFromISR>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	bf14      	ite	ne
 800de74:	2301      	movne	r3, #1
 800de76:	2300      	moveq	r3, #0
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d016      	beq.n	800deac <HAL_UART_TxCpltCallback+0x64>
			size_t len = internalPeekMsgFromFifo(&g_txFifo, g_UARTTxDMABuf);
 800de7e:	4916      	ldr	r1, [pc, #88]	; (800ded8 <HAL_UART_TxCpltCallback+0x90>)
 800de80:	4816      	ldr	r0, [pc, #88]	; (800dedc <HAL_UART_TxCpltCallback+0x94>)
 800de82:	f7ff ff41 	bl	800dd08 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh>
 800de86:	60f8      	str	r0, [r7, #12]
			if (len > 0) {
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d006      	beq.n	800de9c <HAL_UART_TxCpltCallback+0x54>
				HAL_UART_Transmit_DMA(&huart1, g_UARTTxDMABuf, len);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	b29b      	uxth	r3, r3
 800de92:	461a      	mov	r2, r3
 800de94:	4910      	ldr	r1, [pc, #64]	; (800ded8 <HAL_UART_TxCpltCallback+0x90>)
 800de96:	4812      	ldr	r0, [pc, #72]	; (800dee0 <HAL_UART_TxCpltCallback+0x98>)
 800de98:	f004 f83e 	bl	8011f18 <HAL_UART_Transmit_DMA>
			}
			xSemaphoreGiveFromISR(g_txMutex, &xHigherPriorityTaskWoken);
 800de9c:	4b0d      	ldr	r3, [pc, #52]	; (800ded4 <HAL_UART_TxCpltCallback+0x8c>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f107 0208 	add.w	r2, r7, #8
 800dea4:	4611      	mov	r1, r2
 800dea6:	4618      	mov	r0, r3
 800dea8:	f005 fe38 	bl	8013b1c <xQueueGiveFromISR>
		}

		if (xHigherPriorityTaskWoken == pdTRUE){
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d10a      	bne.n	800dec8 <HAL_UART_TxCpltCallback+0x80>
			portYIELD_FROM_ISR (xHigherPriorityTaskWoken);
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d007      	beq.n	800dec8 <HAL_UART_TxCpltCallback+0x80>
 800deb8:	4b0a      	ldr	r3, [pc, #40]	; (800dee4 <HAL_UART_TxCpltCallback+0x9c>)
 800deba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800debe:	601a      	str	r2, [r3, #0]
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	f3bf 8f6f 	isb	sy
		}

	}
}
 800dec8:	bf00      	nop
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	40011000 	.word	0x40011000
 800ded4:	20002568 	.word	0x20002568
 800ded8:	20001d40 	.word	0x20001d40
 800dedc:	20002554 	.word	0x20002554
 800dee0:	2000093c 	.word	0x2000093c
 800dee4:	e000ed04 	.word	0xe000ed04

0800dee8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
		// Do nothing
	}
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b086      	sub	sp, #24
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a1d      	ldr	r2, [pc, #116]	; (800df80 <HAL_UART_ErrorCallback+0x84>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d134      	bne.n	800df78 <HAL_UART_ErrorCallback+0x7c>
		uint32_t tmp1 = 0U, tmp2 = 0U;
 800df0e:	2300      	movs	r3, #0
 800df10:	617b      	str	r3, [r7, #20]
 800df12:	2300      	movs	r3, #0
 800df14:	613b      	str	r3, [r7, #16]
		tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f003 0308 	and.w	r3, r3, #8
 800df20:	2b08      	cmp	r3, #8
 800df22:	bf0c      	ite	eq
 800df24:	2301      	moveq	r3, #1
 800df26:	2300      	movne	r3, #0
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	617b      	str	r3, [r7, #20]
		tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	695b      	ldr	r3, [r3, #20]
 800df32:	f003 0301 	and.w	r3, r3, #1
 800df36:	613b      	str	r3, [r7, #16]

		if (tmp1 != RESET && tmp2 != RESET) {
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d01c      	beq.n	800df78 <HAL_UART_ErrorCallback+0x7c>
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d019      	beq.n	800df78 <HAL_UART_ErrorCallback+0x7c>
			printf("Usart1 happens over run error.\n");
 800df44:	480f      	ldr	r0, [pc, #60]	; (800df84 <HAL_UART_ErrorCallback+0x88>)
 800df46:	f008 ffcd 	bl	8016ee4 <puts>

		    volatile uint8_t sysRxChar; // clear the regular interrupt
	        sysRxChar = (uint8_t) huart->Instance->DR; // not sure whether it is correct, but it does not work
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	b2db      	uxtb	r3, r3
 800df52:	73fb      	strb	r3, [r7, #15]
	        (void) sysRxChar;
 800df54:	7bfb      	ldrb	r3, [r7, #15]

	        __HAL_UART_CLEAR_OREFLAG(huart);
 800df56:	2300      	movs	r3, #0
 800df58:	60bb      	str	r3, [r7, #8]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	60bb      	str	r3, [r7, #8]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	60bb      	str	r3, [r7, #8]
 800df6a:	68bb      	ldr	r3, [r7, #8]
	        huart->ErrorCode &= ~HAL_UART_ERROR_ORE;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df70:	f023 0208 	bic.w	r2, r3, #8
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
}
 800df78:	bf00      	nop
 800df7a:	3718      	adds	r7, #24
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	40011000 	.word	0x40011000
 800df84:	08018170 	.word	0x08018170

0800df88 <CO_fifo_init>:
#define DELIM_COMMENT '#'
#endif /* CO_CONFIG_FIFO_ASCII_COMMANDS == 1 */


/******************************************************************************/
void CO_fifo_init(CO_fifo_t *fifo, char *buf, size_t bufSize) {
 800df88:	b480      	push	{r7}
 800df8a:	b085      	sub	sp, #20
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]

    if (fifo == NULL || buf == NULL || bufSize < 2) {
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d012      	beq.n	800dfc0 <CO_fifo_init+0x38>
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00f      	beq.n	800dfc0 <CO_fifo_init+0x38>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d90c      	bls.n	800dfc0 <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	605a      	str	r2, [r3, #4]

    return;
 800dfbe:	e000      	b.n	800dfc2 <CO_fifo_init+0x3a>
        return;
 800dfc0:	bf00      	nop
}
 800dfc2:	3714      	adds	r7, #20
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <CO_fifo_write>:
 ******************************************************************************/
size_t CO_fifo_write(CO_fifo_t *fifo,
                     const char *buf,
                     size_t count,
                     uint16_t *crc)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b089      	sub	sp, #36	; 0x24
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	607a      	str	r2, [r7, #4]
 800dfd8:	603b      	str	r3, [r7, #0]
    size_t i;
    char *bufDest;

    if (fifo == NULL || buf == NULL) {
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d002      	beq.n	800dfe6 <CO_fifo_write+0x1a>
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d101      	bne.n	800dfea <CO_fifo_write+0x1e>
        return 0;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	e03e      	b.n	800e068 <CO_fifo_write+0x9c>
    }

    bufDest = &fifo->buf[fifo->writePtr];
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	4413      	add	r3, r2
 800dff4:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	61fb      	str	r3, [r7, #28]
 800dffa:	e02f      	b.n	800e05c <CO_fifo_write+0x90>
        size_t writePtrNext = fifo->writePtr + 1;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	3301      	adds	r3, #1
 800e002:	617b      	str	r3, [r7, #20]

        /* is circular buffer full */
        if (writePtrNext == fifo->readPtr ||
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	697a      	ldr	r2, [r7, #20]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d029      	beq.n	800e062 <CO_fifo_write+0x96>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	685b      	ldr	r3, [r3, #4]
        if (writePtrNext == fifo->readPtr ||
 800e012:	697a      	ldr	r2, [r7, #20]
 800e014:	429a      	cmp	r2, r3
 800e016:	d103      	bne.n	800e020 <CO_fifo_write+0x54>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d020      	beq.n	800e062 <CO_fifo_write+0x96>
            break;
        }

        *bufDest = *buf;
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	781a      	ldrb	r2, [r3, #0]
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	701a      	strb	r2, [r3, #0]
            CO_fifo_crc16_ccitt(crc, *buf);
        }
#endif

        /* increment variables */
        if (writePtrNext == fifo->bufSize) {
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	697a      	ldr	r2, [r7, #20]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d106      	bne.n	800e040 <CO_fifo_write+0x74>
            fifo->writePtr = 0;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2200      	movs	r2, #0
 800e036:	609a      	str	r2, [r3, #8]
            bufDest = &fifo->buf[0];
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	61bb      	str	r3, [r7, #24]
 800e03e:	e007      	b.n	800e050 <CO_fifo_write+0x84>
        }
        else {
            fifo->writePtr++;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	1c5a      	adds	r2, r3, #1
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	609a      	str	r2, [r3, #8]
            bufDest++;
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	3301      	adds	r3, #1
 800e04e:	61bb      	str	r3, [r7, #24]
        }
        buf++;
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	3301      	adds	r3, #1
 800e054:	60bb      	str	r3, [r7, #8]
    for (i = count; i > 0; i--) {
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	3b01      	subs	r3, #1
 800e05a:	61fb      	str	r3, [r7, #28]
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1cc      	bne.n	800dffc <CO_fifo_write+0x30>
    }

    return count - i;
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	1ad3      	subs	r3, r2, r3
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3724      	adds	r7, #36	; 0x24
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <CO_fifo_altBegin>:
}


#if CO_CONFIG_FIFO_ALT_READ == 1
/******************************************************************************/
size_t CO_fifo_altBegin(CO_fifo_t *fifo, size_t offset) {
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
    size_t i;

    if (fifo == NULL) {
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d101      	bne.n	800e088 <CO_fifo_altBegin+0x14>
        return 0;
 800e084:	2300      	movs	r3, #0
 800e086:	e025      	b.n	800e0d4 <CO_fifo_altBegin+0x60>
    }

    fifo->altReadPtr = fifo->readPtr;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	68da      	ldr	r2, [r3, #12]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	611a      	str	r2, [r3, #16]
    for (i = offset; i > 0; i--) {
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	60fb      	str	r3, [r7, #12]
 800e094:	e016      	b.n	800e0c4 <CO_fifo_altBegin+0x50>
        /* is circular buffer empty */
        if (fifo->altReadPtr == fifo->writePtr) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	691a      	ldr	r2, [r3, #16]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d014      	beq.n	800e0cc <CO_fifo_altBegin+0x58>
            break;
        }

        /* increment variable */
        if (++fifo->altReadPtr == fifo->bufSize) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	1c5a      	adds	r2, r3, #1
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	611a      	str	r2, [r3, #16]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	691a      	ldr	r2, [r3, #16]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d102      	bne.n	800e0be <CO_fifo_altBegin+0x4a>
            fifo->altReadPtr = 0;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	611a      	str	r2, [r3, #16]
    for (i = offset; i > 0; i--) {
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	60fb      	str	r3, [r7, #12]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1e5      	bne.n	800e096 <CO_fifo_altBegin+0x22>
 800e0ca:	e000      	b.n	800e0ce <CO_fifo_altBegin+0x5a>
            break;
 800e0cc:	bf00      	nop
        }
    }

    return offset - i;
 800e0ce:	683a      	ldr	r2, [r7, #0]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	1ad3      	subs	r3, r2, r3
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3714      	adds	r7, #20
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr

0800e0e0 <CO_fifo_altFinish>:

void CO_fifo_altFinish(CO_fifo_t *fifo, uint16_t *crc) {
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]

    if (fifo == NULL) {
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d02a      	beq.n	800e146 <CO_fifo_altFinish+0x66>
        return;
    }

    if (crc == NULL) {
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d104      	bne.n	800e100 <CO_fifo_altFinish+0x20>
        fifo->readPtr = fifo->altReadPtr;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	691a      	ldr	r2, [r3, #16]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	60da      	str	r2, [r3, #12]
 800e0fe:	e023      	b.n	800e148 <CO_fifo_altFinish+0x68>
    }
    else {
        const char *bufSrc = &fifo->buf[fifo->readPtr];
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	4413      	add	r3, r2
 800e10a:	60fb      	str	r3, [r7, #12]
        while (fifo->readPtr != fifo->altReadPtr) {
 800e10c:	e014      	b.n	800e138 <CO_fifo_altFinish+0x58>
#if CO_CONFIG_FIFO_CRC16_CCITT > 0
            CO_fifo_crc16_ccitt(crc, *bufSrc);
#endif
            /* increment variable */
            if (++fifo->readPtr == fifo->bufSize) {
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	1c5a      	adds	r2, r3, #1
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	60da      	str	r2, [r3, #12]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	68da      	ldr	r2, [r3, #12]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	429a      	cmp	r2, r3
 800e122:	d106      	bne.n	800e132 <CO_fifo_altFinish+0x52>
                fifo->readPtr = 0;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	60da      	str	r2, [r3, #12]
                bufSrc = &fifo->buf[0];
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	60fb      	str	r3, [r7, #12]
 800e130:	e002      	b.n	800e138 <CO_fifo_altFinish+0x58>
            }
            else {
                bufSrc++;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	3301      	adds	r3, #1
 800e136:	60fb      	str	r3, [r7, #12]
        while (fifo->readPtr != fifo->altReadPtr) {
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68da      	ldr	r2, [r3, #12]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	691b      	ldr	r3, [r3, #16]
 800e140:	429a      	cmp	r2, r3
 800e142:	d1e4      	bne.n	800e10e <CO_fifo_altFinish+0x2e>
 800e144:	e000      	b.n	800e148 <CO_fifo_altFinish+0x68>
        return;
 800e146:	bf00      	nop
            }
        }
    }
}
 800e148:	3714      	adds	r7, #20
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr

0800e152 <CO_fifo_altRead>:

size_t CO_fifo_altRead(CO_fifo_t *fifo, char *buf, size_t count) {
 800e152:	b480      	push	{r7}
 800e154:	b089      	sub	sp, #36	; 0x24
 800e156:	af00      	add	r7, sp, #0
 800e158:	60f8      	str	r0, [r7, #12]
 800e15a:	60b9      	str	r1, [r7, #8]
 800e15c:	607a      	str	r2, [r7, #4]
    size_t i;
    const char *bufSrc;

    bufSrc = &fifo->buf[fifo->altReadPtr];
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	691b      	ldr	r3, [r3, #16]
 800e166:	4413      	add	r3, r2
 800e168:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	61fb      	str	r3, [r7, #28]
 800e16e:	e025      	b.n	800e1bc <CO_fifo_altRead+0x6a>
        const char c = *bufSrc;
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	75fb      	strb	r3, [r7, #23]

        /* is there no more data */
        if (fifo->altReadPtr == fifo->writePtr) {
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	691a      	ldr	r2, [r3, #16]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	689b      	ldr	r3, [r3, #8]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d020      	beq.n	800e1c4 <CO_fifo_altRead+0x72>
            break;
        }

        *(buf++) = c;
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	1c5a      	adds	r2, r3, #1
 800e186:	60ba      	str	r2, [r7, #8]
 800e188:	7dfa      	ldrb	r2, [r7, #23]
 800e18a:	701a      	strb	r2, [r3, #0]

        /* increment variables */
        if (++fifo->altReadPtr == fifo->bufSize) {
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	611a      	str	r2, [r3, #16]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	691a      	ldr	r2, [r3, #16]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d106      	bne.n	800e1b0 <CO_fifo_altRead+0x5e>
            fifo->altReadPtr = 0;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	611a      	str	r2, [r3, #16]
            bufSrc = &fifo->buf[0];
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	61bb      	str	r3, [r7, #24]
 800e1ae:	e002      	b.n	800e1b6 <CO_fifo_altRead+0x64>
        }
        else {
            bufSrc++;
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	61fb      	str	r3, [r7, #28]
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1d6      	bne.n	800e170 <CO_fifo_altRead+0x1e>
 800e1c2:	e000      	b.n	800e1c6 <CO_fifo_altRead+0x74>
            break;
 800e1c4:	bf00      	nop
        }
    }

    return count - i;
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	1ad3      	subs	r3, r2, r3
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3724      	adds	r7, #36	; 0x24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e1d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e210 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e1dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e1de:	e003      	b.n	800e1e8 <LoopCopyDataInit>

0800e1e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e1e0:	4b0c      	ldr	r3, [pc, #48]	; (800e214 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e1e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e1e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e1e6:	3104      	adds	r1, #4

0800e1e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e1e8:	480b      	ldr	r0, [pc, #44]	; (800e218 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e1ea:	4b0c      	ldr	r3, [pc, #48]	; (800e21c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e1ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e1ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e1f0:	d3f6      	bcc.n	800e1e0 <CopyDataInit>
  ldr  r2, =_sbss
 800e1f2:	4a0b      	ldr	r2, [pc, #44]	; (800e220 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e1f4:	e002      	b.n	800e1fc <LoopFillZerobss>

0800e1f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e1f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e1f8:	f842 3b04 	str.w	r3, [r2], #4

0800e1fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e1fc:	4b09      	ldr	r3, [pc, #36]	; (800e224 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e1fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e200:	d3f9      	bcc.n	800e1f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e202:	f7f3 fc81 	bl	8001b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e206:	f008 fcab 	bl	8016b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e20a:	f7f3 f94b 	bl	80014a4 <main>
  bx  lr    
 800e20e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e210:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e214:	08018dd0 	.word	0x08018dd0
  ldr  r0, =_sdata
 800e218:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e21c:	20000620 	.word	0x20000620
  ldr  r2, =_sbss
 800e220:	20000620 	.word	0x20000620
  ldr  r3, = _ebss
 800e224:	20006f7c 	.word	0x20006f7c

0800e228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e228:	e7fe      	b.n	800e228 <ADC_IRQHandler>
	...

0800e22c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e230:	4b0e      	ldr	r3, [pc, #56]	; (800e26c <HAL_Init+0x40>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a0d      	ldr	r2, [pc, #52]	; (800e26c <HAL_Init+0x40>)
 800e236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e23a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e23c:	4b0b      	ldr	r3, [pc, #44]	; (800e26c <HAL_Init+0x40>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a0a      	ldr	r2, [pc, #40]	; (800e26c <HAL_Init+0x40>)
 800e242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e246:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e248:	4b08      	ldr	r3, [pc, #32]	; (800e26c <HAL_Init+0x40>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a07      	ldr	r2, [pc, #28]	; (800e26c <HAL_Init+0x40>)
 800e24e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e254:	2003      	movs	r0, #3
 800e256:	f001 f852 	bl	800f2fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e25a:	2000      	movs	r0, #0
 800e25c:	f7f3 fb10 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e260:	f7f3 fae6 	bl	8001830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	40023c00 	.word	0x40023c00

0800e270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e270:	b480      	push	{r7}
 800e272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e274:	4b06      	ldr	r3, [pc, #24]	; (800e290 <HAL_IncTick+0x20>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	461a      	mov	r2, r3
 800e27a:	4b06      	ldr	r3, [pc, #24]	; (800e294 <HAL_IncTick+0x24>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4413      	add	r3, r2
 800e280:	4a04      	ldr	r2, [pc, #16]	; (800e294 <HAL_IncTick+0x24>)
 800e282:	6013      	str	r3, [r2, #0]
}
 800e284:	bf00      	nop
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	200005a8 	.word	0x200005a8
 800e294:	20002570 	.word	0x20002570

0800e298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e298:	b480      	push	{r7}
 800e29a:	af00      	add	r7, sp, #0
  return uwTick;
 800e29c:	4b03      	ldr	r3, [pc, #12]	; (800e2ac <HAL_GetTick+0x14>)
 800e29e:	681b      	ldr	r3, [r3, #0]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	20002570 	.word	0x20002570

0800e2b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e2b8:	f7ff ffee 	bl	800e298 <HAL_GetTick>
 800e2bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c8:	d005      	beq.n	800e2d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e2ca:	4b0a      	ldr	r3, [pc, #40]	; (800e2f4 <HAL_Delay+0x44>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e2d6:	bf00      	nop
 800e2d8:	f7ff ffde 	bl	800e298 <HAL_GetTick>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	68fa      	ldr	r2, [r7, #12]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d8f7      	bhi.n	800e2d8 <HAL_Delay+0x28>
  {
  }
}
 800e2e8:	bf00      	nop
 800e2ea:	bf00      	nop
 800e2ec:	3710      	adds	r7, #16
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	200005a8 	.word	0x200005a8

0800e2f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d101      	bne.n	800e30a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800e306:	2301      	movs	r3, #1
 800e308:	e0ed      	b.n	800e4e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d102      	bne.n	800e31c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f7f2 fd60 	bl	8000ddc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f022 0202 	bic.w	r2, r2, #2
 800e32a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e32c:	f7ff ffb4 	bl	800e298 <HAL_GetTick>
 800e330:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e332:	e012      	b.n	800e35a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e334:	f7ff ffb0 	bl	800e298 <HAL_GetTick>
 800e338:	4602      	mov	r2, r0
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	1ad3      	subs	r3, r2, r3
 800e33e:	2b0a      	cmp	r3, #10
 800e340:	d90b      	bls.n	800e35a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e346:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2205      	movs	r2, #5
 800e352:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e356:	2301      	movs	r3, #1
 800e358:	e0c5      	b.n	800e4e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	f003 0302 	and.w	r3, r3, #2
 800e364:	2b00      	cmp	r3, #0
 800e366:	d1e5      	bne.n	800e334 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f042 0201 	orr.w	r2, r2, #1
 800e376:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e378:	f7ff ff8e 	bl	800e298 <HAL_GetTick>
 800e37c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e37e:	e012      	b.n	800e3a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e380:	f7ff ff8a 	bl	800e298 <HAL_GetTick>
 800e384:	4602      	mov	r2, r0
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	2b0a      	cmp	r3, #10
 800e38c:	d90b      	bls.n	800e3a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e392:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2205      	movs	r2, #5
 800e39e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e09f      	b.n	800e4e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	f003 0301 	and.w	r3, r3, #1
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d0e5      	beq.n	800e380 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	7e1b      	ldrb	r3, [r3, #24]
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d108      	bne.n	800e3ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e3ca:	601a      	str	r2, [r3, #0]
 800e3cc:	e007      	b.n	800e3de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e3dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	7e5b      	ldrb	r3, [r3, #25]
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d108      	bne.n	800e3f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3f4:	601a      	str	r2, [r3, #0]
 800e3f6:	e007      	b.n	800e408 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e406:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	7e9b      	ldrb	r3, [r3, #26]
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d108      	bne.n	800e422 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f042 0220 	orr.w	r2, r2, #32
 800e41e:	601a      	str	r2, [r3, #0]
 800e420:	e007      	b.n	800e432 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f022 0220 	bic.w	r2, r2, #32
 800e430:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	7edb      	ldrb	r3, [r3, #27]
 800e436:	2b01      	cmp	r3, #1
 800e438:	d108      	bne.n	800e44c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f022 0210 	bic.w	r2, r2, #16
 800e448:	601a      	str	r2, [r3, #0]
 800e44a:	e007      	b.n	800e45c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f042 0210 	orr.w	r2, r2, #16
 800e45a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	7f1b      	ldrb	r3, [r3, #28]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d108      	bne.n	800e476 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f042 0208 	orr.w	r2, r2, #8
 800e472:	601a      	str	r2, [r3, #0]
 800e474:	e007      	b.n	800e486 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f022 0208 	bic.w	r2, r2, #8
 800e484:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	7f5b      	ldrb	r3, [r3, #29]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d108      	bne.n	800e4a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f042 0204 	orr.w	r2, r2, #4
 800e49c:	601a      	str	r2, [r3, #0]
 800e49e:	e007      	b.n	800e4b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f022 0204 	bic.w	r2, r2, #4
 800e4ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	689a      	ldr	r2, [r3, #8]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	431a      	orrs	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	691b      	ldr	r3, [r3, #16]
 800e4be:	431a      	orrs	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	695b      	ldr	r3, [r3, #20]
 800e4c4:	ea42 0103 	orr.w	r1, r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	1e5a      	subs	r2, r3, #1
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	430a      	orrs	r2, r1
 800e4d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800e4e4:	2300      	movs	r3, #0
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
	...

0800e4f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b087      	sub	sp, #28
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e506:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800e508:	7cfb      	ldrb	r3, [r7, #19]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d003      	beq.n	800e516 <HAL_CAN_ConfigFilter+0x26>
 800e50e:	7cfb      	ldrb	r3, [r7, #19]
 800e510:	2b02      	cmp	r3, #2
 800e512:	f040 80be 	bne.w	800e692 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800e516:	4b65      	ldr	r3, [pc, #404]	; (800e6ac <HAL_CAN_ConfigFilter+0x1bc>)
 800e518:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e520:	f043 0201 	orr.w	r2, r3, #1
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e530:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e544:	021b      	lsls	r3, r3, #8
 800e546:	431a      	orrs	r2, r3
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	695b      	ldr	r3, [r3, #20]
 800e552:	f003 031f 	and.w	r3, r3, #31
 800e556:	2201      	movs	r2, #1
 800e558:	fa02 f303 	lsl.w	r3, r2, r3
 800e55c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	43db      	mvns	r3, r3
 800e568:	401a      	ands	r2, r3
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	69db      	ldr	r3, [r3, #28]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d123      	bne.n	800e5c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	43db      	mvns	r3, r3
 800e582:	401a      	ands	r2, r3
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e596:	683a      	ldr	r2, [r7, #0]
 800e598:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800e59a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	3248      	adds	r2, #72	; 0x48
 800e5a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e5b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e5b6:	6979      	ldr	r1, [r7, #20]
 800e5b8:	3348      	adds	r3, #72	; 0x48
 800e5ba:	00db      	lsls	r3, r3, #3
 800e5bc:	440b      	add	r3, r1
 800e5be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	69db      	ldr	r3, [r3, #28]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d122      	bne.n	800e60e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	431a      	orrs	r2, r3
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e5e4:	683a      	ldr	r2, [r7, #0]
 800e5e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800e5e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	3248      	adds	r2, #72	; 0x48
 800e5ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e602:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e604:	6979      	ldr	r1, [r7, #20]
 800e606:	3348      	adds	r3, #72	; 0x48
 800e608:	00db      	lsls	r3, r3, #3
 800e60a:	440b      	add	r3, r1
 800e60c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	699b      	ldr	r3, [r3, #24]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d109      	bne.n	800e62a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	43db      	mvns	r3, r3
 800e620:	401a      	ands	r2, r3
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e628:	e007      	b.n	800e63a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	431a      	orrs	r2, r3
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	691b      	ldr	r3, [r3, #16]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d109      	bne.n	800e656 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	43db      	mvns	r3, r3
 800e64c:	401a      	ands	r2, r3
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800e654:	e007      	b.n	800e666 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	431a      	orrs	r2, r3
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	6a1b      	ldr	r3, [r3, #32]
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d107      	bne.n	800e67e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	431a      	orrs	r2, r3
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e684:	f023 0201 	bic.w	r2, r3, #1
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800e68e:	2300      	movs	r3, #0
 800e690:	e006      	b.n	800e6a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e696:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e69e:	2301      	movs	r3, #1
  }
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	371c      	adds	r7, #28
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr
 800e6ac:	40006400 	.word	0x40006400

0800e6b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d12e      	bne.n	800e722 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2202      	movs	r2, #2
 800e6c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f022 0201 	bic.w	r2, r2, #1
 800e6da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e6dc:	f7ff fddc 	bl	800e298 <HAL_GetTick>
 800e6e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800e6e2:	e012      	b.n	800e70a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e6e4:	f7ff fdd8 	bl	800e298 <HAL_GetTick>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	1ad3      	subs	r3, r2, r3
 800e6ee:	2b0a      	cmp	r3, #10
 800e6f0:	d90b      	bls.n	800e70a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2205      	movs	r2, #5
 800e702:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800e706:	2301      	movs	r3, #1
 800e708:	e012      	b.n	800e730 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	f003 0301 	and.w	r3, r3, #1
 800e714:	2b00      	cmp	r3, #0
 800e716:	d1e5      	bne.n	800e6e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800e71e:	2300      	movs	r3, #0
 800e720:	e006      	b.n	800e730 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e726:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e72e:	2301      	movs	r3, #1
  }
}
 800e730:	4618      	mov	r0, r3
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e746:	b2db      	uxtb	r3, r3
 800e748:	2b02      	cmp	r3, #2
 800e74a:	d133      	bne.n	800e7b4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f042 0201 	orr.w	r2, r2, #1
 800e75a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e75c:	f7ff fd9c 	bl	800e298 <HAL_GetTick>
 800e760:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e762:	e012      	b.n	800e78a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e764:	f7ff fd98 	bl	800e298 <HAL_GetTick>
 800e768:	4602      	mov	r2, r0
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	1ad3      	subs	r3, r2, r3
 800e76e:	2b0a      	cmp	r3, #10
 800e770:	d90b      	bls.n	800e78a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e776:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2205      	movs	r2, #5
 800e782:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800e786:	2301      	movs	r3, #1
 800e788:	e01b      	b.n	800e7c2 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	f003 0301 	and.w	r3, r3, #1
 800e794:	2b00      	cmp	r3, #0
 800e796:	d0e5      	beq.n	800e764 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f022 0202 	bic.w	r2, r2, #2
 800e7a6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	e006      	b.n	800e7c2 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e7c0:	2301      	movs	r3, #1
  }
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800e7ca:	b480      	push	{r7}
 800e7cc:	b089      	sub	sp, #36	; 0x24
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	60f8      	str	r0, [r7, #12]
 800e7d2:	60b9      	str	r1, [r7, #8]
 800e7d4:	607a      	str	r2, [r7, #4]
 800e7d6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e7de:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800e7e8:	7ffb      	ldrb	r3, [r7, #31]
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d003      	beq.n	800e7f6 <HAL_CAN_AddTxMessage+0x2c>
 800e7ee:	7ffb      	ldrb	r3, [r7, #31]
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	f040 80b8 	bne.w	800e966 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10a      	bne.n	800e816 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800e806:	2b00      	cmp	r3, #0
 800e808:	d105      	bne.n	800e816 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800e810:	2b00      	cmp	r3, #0
 800e812:	f000 80a0 	beq.w	800e956 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	0e1b      	lsrs	r3, r3, #24
 800e81a:	f003 0303 	and.w	r3, r3, #3
 800e81e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	2b02      	cmp	r3, #2
 800e824:	d907      	bls.n	800e836 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e832:	2301      	movs	r3, #1
 800e834:	e09e      	b.n	800e974 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800e836:	2201      	movs	r2, #1
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	409a      	lsls	r2, r3
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	689b      	ldr	r3, [r3, #8]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d10d      	bne.n	800e864 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800e852:	68f9      	ldr	r1, [r7, #12]
 800e854:	6809      	ldr	r1, [r1, #0]
 800e856:	431a      	orrs	r2, r3
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	3318      	adds	r3, #24
 800e85c:	011b      	lsls	r3, r3, #4
 800e85e:	440b      	add	r3, r1
 800e860:	601a      	str	r2, [r3, #0]
 800e862:	e00f      	b.n	800e884 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e86e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e874:	68f9      	ldr	r1, [r7, #12]
 800e876:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800e878:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	3318      	adds	r3, #24
 800e87e:	011b      	lsls	r3, r3, #4
 800e880:	440b      	add	r3, r1
 800e882:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	6819      	ldr	r1, [r3, #0]
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	691a      	ldr	r2, [r3, #16]
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	3318      	adds	r3, #24
 800e890:	011b      	lsls	r3, r3, #4
 800e892:	440b      	add	r3, r1
 800e894:	3304      	adds	r3, #4
 800e896:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	7d1b      	ldrb	r3, [r3, #20]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d111      	bne.n	800e8c4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	3318      	adds	r3, #24
 800e8a8:	011b      	lsls	r3, r3, #4
 800e8aa:	4413      	add	r3, r2
 800e8ac:	3304      	adds	r3, #4
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	68fa      	ldr	r2, [r7, #12]
 800e8b2:	6811      	ldr	r1, [r2, #0]
 800e8b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	3318      	adds	r3, #24
 800e8bc:	011b      	lsls	r3, r3, #4
 800e8be:	440b      	add	r3, r1
 800e8c0:	3304      	adds	r3, #4
 800e8c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	3307      	adds	r3, #7
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	061a      	lsls	r2, r3, #24
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3306      	adds	r3, #6
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	041b      	lsls	r3, r3, #16
 800e8d4:	431a      	orrs	r2, r3
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	3305      	adds	r3, #5
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	021b      	lsls	r3, r3, #8
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	3204      	adds	r2, #4
 800e8e4:	7812      	ldrb	r2, [r2, #0]
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	6811      	ldr	r1, [r2, #0]
 800e8ec:	ea43 0200 	orr.w	r2, r3, r0
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	011b      	lsls	r3, r3, #4
 800e8f4:	440b      	add	r3, r1
 800e8f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800e8fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	3303      	adds	r3, #3
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	061a      	lsls	r2, r3, #24
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	3302      	adds	r3, #2
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	041b      	lsls	r3, r3, #16
 800e90c:	431a      	orrs	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	3301      	adds	r3, #1
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	021b      	lsls	r3, r3, #8
 800e916:	4313      	orrs	r3, r2
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	7812      	ldrb	r2, [r2, #0]
 800e91c:	4610      	mov	r0, r2
 800e91e:	68fa      	ldr	r2, [r7, #12]
 800e920:	6811      	ldr	r1, [r2, #0]
 800e922:	ea43 0200 	orr.w	r2, r3, r0
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	011b      	lsls	r3, r3, #4
 800e92a:	440b      	add	r3, r1
 800e92c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800e930:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	3318      	adds	r3, #24
 800e93a:	011b      	lsls	r3, r3, #4
 800e93c:	4413      	add	r3, r2
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	68fa      	ldr	r2, [r7, #12]
 800e942:	6811      	ldr	r1, [r2, #0]
 800e944:	f043 0201 	orr.w	r2, r3, #1
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	3318      	adds	r3, #24
 800e94c:	011b      	lsls	r3, r3, #4
 800e94e:	440b      	add	r3, r1
 800e950:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800e952:	2300      	movs	r3, #0
 800e954:	e00e      	b.n	800e974 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	e006      	b.n	800e974 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e972:	2301      	movs	r3, #1
  }
}
 800e974:	4618      	mov	r0, r3
 800e976:	3724      	adds	r7, #36	; 0x24
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr

0800e980 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800e980:	b480      	push	{r7}
 800e982:	b085      	sub	sp, #20
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800e988:	2300      	movs	r3, #0
 800e98a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e992:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800e994:	7afb      	ldrb	r3, [r7, #11]
 800e996:	2b01      	cmp	r3, #1
 800e998:	d002      	beq.n	800e9a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800e99a:	7afb      	ldrb	r3, [r7, #11]
 800e99c:	2b02      	cmp	r3, #2
 800e99e:	d11d      	bne.n	800e9dc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d002      	beq.n	800e9b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d002      	beq.n	800e9c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d002      	beq.n	800e9dc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	3301      	adds	r3, #1
 800e9da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3714      	adds	r7, #20
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr

0800e9ea <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800e9ea:	b480      	push	{r7}
 800e9ec:	b087      	sub	sp, #28
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	60f8      	str	r0, [r7, #12]
 800e9f2:	60b9      	str	r1, [r7, #8]
 800e9f4:	607a      	str	r2, [r7, #4]
 800e9f6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e9fe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800ea00:	7dfb      	ldrb	r3, [r7, #23]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d003      	beq.n	800ea0e <HAL_CAN_GetRxMessage+0x24>
 800ea06:	7dfb      	ldrb	r3, [r7, #23]
 800ea08:	2b02      	cmp	r3, #2
 800ea0a:	f040 80f3 	bne.w	800ebf4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10e      	bne.n	800ea32 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	f003 0303 	and.w	r3, r3, #3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d116      	bne.n	800ea50 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ea2e:	2301      	movs	r3, #1
 800ea30:	e0e7      	b.n	800ec02 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	691b      	ldr	r3, [r3, #16]
 800ea38:	f003 0303 	and.w	r3, r3, #3
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d107      	bne.n	800ea50 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	e0d8      	b.n	800ec02 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	331b      	adds	r3, #27
 800ea58:	011b      	lsls	r3, r3, #4
 800ea5a:	4413      	add	r3, r2
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f003 0204 	and.w	r2, r3, #4
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d10c      	bne.n	800ea88 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	331b      	adds	r3, #27
 800ea76:	011b      	lsls	r3, r3, #4
 800ea78:	4413      	add	r3, r2
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	0d5b      	lsrs	r3, r3, #21
 800ea7e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	601a      	str	r2, [r3, #0]
 800ea86:	e00b      	b.n	800eaa0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	331b      	adds	r3, #27
 800ea90:	011b      	lsls	r3, r3, #4
 800ea92:	4413      	add	r3, r2
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	08db      	lsrs	r3, r3, #3
 800ea98:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	331b      	adds	r3, #27
 800eaa8:	011b      	lsls	r3, r3, #4
 800eaaa:	4413      	add	r3, r2
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f003 0202 	and.w	r2, r3, #2
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	331b      	adds	r3, #27
 800eabe:	011b      	lsls	r3, r3, #4
 800eac0:	4413      	add	r3, r2
 800eac2:	3304      	adds	r3, #4
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f003 020f 	and.w	r2, r3, #15
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	331b      	adds	r3, #27
 800ead6:	011b      	lsls	r3, r3, #4
 800ead8:	4413      	add	r3, r2
 800eada:	3304      	adds	r3, #4
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	0a1b      	lsrs	r3, r3, #8
 800eae0:	b2da      	uxtb	r2, r3
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	331b      	adds	r3, #27
 800eaee:	011b      	lsls	r3, r3, #4
 800eaf0:	4413      	add	r3, r2
 800eaf2:	3304      	adds	r3, #4
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	0c1b      	lsrs	r3, r3, #16
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	011b      	lsls	r3, r3, #4
 800eb06:	4413      	add	r3, r2
 800eb08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	b2da      	uxtb	r2, r3
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	011b      	lsls	r3, r3, #4
 800eb1c:	4413      	add	r3, r2
 800eb1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	0a1a      	lsrs	r2, r3, #8
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	b2d2      	uxtb	r2, r2
 800eb2c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	011b      	lsls	r3, r3, #4
 800eb36:	4413      	add	r3, r2
 800eb38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	0c1a      	lsrs	r2, r3, #16
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	3302      	adds	r3, #2
 800eb44:	b2d2      	uxtb	r2, r2
 800eb46:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	011b      	lsls	r3, r3, #4
 800eb50:	4413      	add	r3, r2
 800eb52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	0e1a      	lsrs	r2, r3, #24
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	3303      	adds	r3, #3
 800eb5e:	b2d2      	uxtb	r2, r2
 800eb60:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681a      	ldr	r2, [r3, #0]
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	011b      	lsls	r3, r3, #4
 800eb6a:	4413      	add	r3, r2
 800eb6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	3304      	adds	r3, #4
 800eb76:	b2d2      	uxtb	r2, r2
 800eb78:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	011b      	lsls	r3, r3, #4
 800eb82:	4413      	add	r3, r2
 800eb84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	0a1a      	lsrs	r2, r3, #8
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	3305      	adds	r3, #5
 800eb90:	b2d2      	uxtb	r2, r2
 800eb92:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	011b      	lsls	r3, r3, #4
 800eb9c:	4413      	add	r3, r2
 800eb9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	0c1a      	lsrs	r2, r3, #16
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	3306      	adds	r3, #6
 800ebaa:	b2d2      	uxtb	r2, r2
 800ebac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	011b      	lsls	r3, r3, #4
 800ebb6:	4413      	add	r3, r2
 800ebb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	0e1a      	lsrs	r2, r3, #24
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	3307      	adds	r3, #7
 800ebc4:	b2d2      	uxtb	r2, r2
 800ebc6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d108      	bne.n	800ebe0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68da      	ldr	r2, [r3, #12]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f042 0220 	orr.w	r2, r2, #32
 800ebdc:	60da      	str	r2, [r3, #12]
 800ebde:	e007      	b.n	800ebf0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	691a      	ldr	r2, [r3, #16]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f042 0220 	orr.w	r2, r2, #32
 800ebee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	e006      	b.n	800ec02 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ec00:	2301      	movs	r3, #1
  }
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	371c      	adds	r7, #28
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr

0800ec0e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800ec0e:	b480      	push	{r7}
 800ec10:	b085      	sub	sp, #20
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ec22:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800ec24:	7afb      	ldrb	r3, [r7, #11]
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d002      	beq.n	800ec30 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800ec2a:	7afb      	ldrb	r3, [r7, #11]
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d10f      	bne.n	800ec50 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d106      	bne.n	800ec44 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	f003 0303 	and.w	r3, r3, #3
 800ec40:	60fb      	str	r3, [r7, #12]
 800ec42:	e005      	b.n	800ec50 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	691b      	ldr	r3, [r3, #16]
 800ec4a:	f003 0303 	and.w	r3, r3, #3
 800ec4e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800ec50:	68fb      	ldr	r3, [r7, #12]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3714      	adds	r7, #20
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800ec5e:	b480      	push	{r7}
 800ec60:	b085      	sub	sp, #20
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
 800ec66:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ec6e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800ec70:	7bfb      	ldrb	r3, [r7, #15]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d002      	beq.n	800ec7c <HAL_CAN_ActivateNotification+0x1e>
 800ec76:	7bfb      	ldrb	r3, [r7, #15]
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	d109      	bne.n	800ec90 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6959      	ldr	r1, [r3, #20]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	683a      	ldr	r2, [r7, #0]
 800ec88:	430a      	orrs	r2, r1
 800ec8a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	e006      	b.n	800ec9e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ec9c:	2301      	movs	r3, #1
  }
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3714      	adds	r7, #20
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr

0800ecaa <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800ecaa:	b480      	push	{r7}
 800ecac:	b085      	sub	sp, #20
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
 800ecb2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ecba:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800ecbc:	7bfb      	ldrb	r3, [r7, #15]
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d002      	beq.n	800ecc8 <HAL_CAN_DeactivateNotification+0x1e>
 800ecc2:	7bfb      	ldrb	r3, [r7, #15]
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	d10a      	bne.n	800ecde <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	6959      	ldr	r1, [r3, #20]
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	43da      	mvns	r2, r3
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	400a      	ands	r2, r1
 800ecd8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	e006      	b.n	800ecec <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ecea:	2301      	movs	r3, #1
  }
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3714      	adds	r7, #20
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b08a      	sub	sp, #40	; 0x28
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800ed00:	2300      	movs	r3, #0
 800ed02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	689b      	ldr	r3, [r3, #8]
 800ed1a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	699b      	ldr	r3, [r3, #24]
 800ed32:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	f003 0301 	and.w	r3, r3, #1
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d07c      	beq.n	800ee38 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	f003 0301 	and.w	r3, r3, #1
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d023      	beq.n	800ed90 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	f003 0302 	and.w	r3, r3, #2
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d003      	beq.n	800ed62 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 f983 	bl	800f066 <HAL_CAN_TxMailbox0CompleteCallback>
 800ed60:	e016      	b.n	800ed90 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800ed62:	69bb      	ldr	r3, [r7, #24]
 800ed64:	f003 0304 	and.w	r3, r3, #4
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d004      	beq.n	800ed76 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ed6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ed72:	627b      	str	r3, [r7, #36]	; 0x24
 800ed74:	e00c      	b.n	800ed90 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	f003 0308 	and.w	r3, r3, #8
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d004      	beq.n	800ed8a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ed86:	627b      	str	r3, [r7, #36]	; 0x24
 800ed88:	e002      	b.n	800ed90 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f000 f989 	bl	800f0a2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d024      	beq.n	800ede4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eda2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d003      	beq.n	800edb6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 f963 	bl	800f07a <HAL_CAN_TxMailbox1CompleteCallback>
 800edb4:	e016      	b.n	800ede4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d004      	beq.n	800edca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800edc6:	627b      	str	r3, [r7, #36]	; 0x24
 800edc8:	e00c      	b.n	800ede4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d004      	beq.n	800edde <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800edd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800edda:	627b      	str	r3, [r7, #36]	; 0x24
 800eddc:	e002      	b.n	800ede4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 f969 	bl	800f0b6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800edea:	2b00      	cmp	r3, #0
 800edec:	d024      	beq.n	800ee38 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800edf6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800edf8:	69bb      	ldr	r3, [r7, #24]
 800edfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 f943 	bl	800f08e <HAL_CAN_TxMailbox2CompleteCallback>
 800ee08:	e016      	b.n	800ee38 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d004      	beq.n	800ee1e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800ee14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee1c:	e00c      	b.n	800ee38 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800ee1e:	69bb      	ldr	r3, [r7, #24]
 800ee20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d004      	beq.n	800ee32 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800ee28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee30:	e002      	b.n	800ee38 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f000 f949 	bl	800f0ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800ee38:	6a3b      	ldr	r3, [r7, #32]
 800ee3a:	f003 0308 	and.w	r3, r3, #8
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d00c      	beq.n	800ee5c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	f003 0310 	and.w	r3, r3, #16
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d007      	beq.n	800ee5c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800ee4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ee52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2210      	movs	r2, #16
 800ee5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800ee5c:	6a3b      	ldr	r3, [r7, #32]
 800ee5e:	f003 0304 	and.w	r3, r3, #4
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00b      	beq.n	800ee7e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	f003 0308 	and.w	r3, r3, #8
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d006      	beq.n	800ee7e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	2208      	movs	r2, #8
 800ee76:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 f930 	bl	800f0de <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800ee7e:	6a3b      	ldr	r3, [r7, #32]
 800ee80:	f003 0302 	and.w	r3, r3, #2
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d009      	beq.n	800ee9c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	f003 0303 	and.w	r3, r3, #3
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d002      	beq.n	800ee9c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7fa fd86 	bl	80099a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800ee9c:	6a3b      	ldr	r3, [r7, #32]
 800ee9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00c      	beq.n	800eec0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	f003 0310 	and.w	r3, r3, #16
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d007      	beq.n	800eec0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eeb6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2210      	movs	r2, #16
 800eebe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800eec0:	6a3b      	ldr	r3, [r7, #32]
 800eec2:	f003 0320 	and.w	r3, r3, #32
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d00b      	beq.n	800eee2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	f003 0308 	and.w	r3, r3, #8
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d006      	beq.n	800eee2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2208      	movs	r2, #8
 800eeda:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 f908 	bl	800f0f2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800eee2:	6a3b      	ldr	r3, [r7, #32]
 800eee4:	f003 0310 	and.w	r3, r3, #16
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d009      	beq.n	800ef00 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	691b      	ldr	r3, [r3, #16]
 800eef2:	f003 0303 	and.w	r3, r3, #3
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d002      	beq.n	800ef00 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f7fa fd6e 	bl	80099dc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800ef00:	6a3b      	ldr	r3, [r7, #32]
 800ef02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00b      	beq.n	800ef22 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800ef0a:	69fb      	ldr	r3, [r7, #28]
 800ef0c:	f003 0310 	and.w	r3, r3, #16
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d006      	beq.n	800ef22 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2210      	movs	r2, #16
 800ef1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f000 f8f2 	bl	800f106 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800ef22:	6a3b      	ldr	r3, [r7, #32]
 800ef24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00b      	beq.n	800ef44 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	f003 0308 	and.w	r3, r3, #8
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d006      	beq.n	800ef44 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	2208      	movs	r2, #8
 800ef3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 f8eb 	bl	800f11a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800ef44:	6a3b      	ldr	r3, [r7, #32]
 800ef46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d07b      	beq.n	800f046 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800ef4e:	69fb      	ldr	r3, [r7, #28]
 800ef50:	f003 0304 	and.w	r3, r3, #4
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d072      	beq.n	800f03e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ef58:	6a3b      	ldr	r3, [r7, #32]
 800ef5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d008      	beq.n	800ef74 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d003      	beq.n	800ef74 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	f043 0301 	orr.w	r3, r3, #1
 800ef72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800ef74:	6a3b      	ldr	r3, [r7, #32]
 800ef76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d008      	beq.n	800ef90 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d003      	beq.n	800ef90 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800ef88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8a:	f043 0302 	orr.w	r3, r3, #2
 800ef8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800ef90:	6a3b      	ldr	r3, [r7, #32]
 800ef92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d008      	beq.n	800efac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d003      	beq.n	800efac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	f043 0304 	orr.w	r3, r3, #4
 800efaa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800efac:	6a3b      	ldr	r3, [r7, #32]
 800efae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d043      	beq.n	800f03e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d03e      	beq.n	800f03e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800efc6:	2b60      	cmp	r3, #96	; 0x60
 800efc8:	d02b      	beq.n	800f022 <HAL_CAN_IRQHandler+0x32a>
 800efca:	2b60      	cmp	r3, #96	; 0x60
 800efcc:	d82e      	bhi.n	800f02c <HAL_CAN_IRQHandler+0x334>
 800efce:	2b50      	cmp	r3, #80	; 0x50
 800efd0:	d022      	beq.n	800f018 <HAL_CAN_IRQHandler+0x320>
 800efd2:	2b50      	cmp	r3, #80	; 0x50
 800efd4:	d82a      	bhi.n	800f02c <HAL_CAN_IRQHandler+0x334>
 800efd6:	2b40      	cmp	r3, #64	; 0x40
 800efd8:	d019      	beq.n	800f00e <HAL_CAN_IRQHandler+0x316>
 800efda:	2b40      	cmp	r3, #64	; 0x40
 800efdc:	d826      	bhi.n	800f02c <HAL_CAN_IRQHandler+0x334>
 800efde:	2b30      	cmp	r3, #48	; 0x30
 800efe0:	d010      	beq.n	800f004 <HAL_CAN_IRQHandler+0x30c>
 800efe2:	2b30      	cmp	r3, #48	; 0x30
 800efe4:	d822      	bhi.n	800f02c <HAL_CAN_IRQHandler+0x334>
 800efe6:	2b10      	cmp	r3, #16
 800efe8:	d002      	beq.n	800eff0 <HAL_CAN_IRQHandler+0x2f8>
 800efea:	2b20      	cmp	r3, #32
 800efec:	d005      	beq.n	800effa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800efee:	e01d      	b.n	800f02c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800eff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff2:	f043 0308 	orr.w	r3, r3, #8
 800eff6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800eff8:	e019      	b.n	800f02e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800effa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effc:	f043 0310 	orr.w	r3, r3, #16
 800f000:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f002:	e014      	b.n	800f02e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800f004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f006:	f043 0320 	orr.w	r3, r3, #32
 800f00a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f00c:	e00f      	b.n	800f02e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800f00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f014:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f016:	e00a      	b.n	800f02e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f01e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f020:	e005      	b.n	800f02e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800f022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f028:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f02a:	e000      	b.n	800f02e <HAL_CAN_IRQHandler+0x336>
            break;
 800f02c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	699a      	ldr	r2, [r3, #24]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f03c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	2204      	movs	r2, #4
 800f044:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800f046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d008      	beq.n	800f05e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f052:	431a      	orrs	r2, r3
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 f868 	bl	800f12e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800f05e:	bf00      	nop
 800f060:	3728      	adds	r7, #40	; 0x28
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f066:	b480      	push	{r7}
 800f068:	b083      	sub	sp, #12
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800f06e:	bf00      	nop
 800f070:	370c      	adds	r7, #12
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f07a:	b480      	push	{r7}
 800f07c:	b083      	sub	sp, #12
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800f082:	bf00      	nop
 800f084:	370c      	adds	r7, #12
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f08e:	b480      	push	{r7}
 800f090:	b083      	sub	sp, #12
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800f096:	bf00      	nop
 800f098:	370c      	adds	r7, #12
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr

0800f0a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f0a2:	b480      	push	{r7}
 800f0a4:	b083      	sub	sp, #12
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800f0aa:	bf00      	nop
 800f0ac:	370c      	adds	r7, #12
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr

0800f0b6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f0b6:	b480      	push	{r7}
 800f0b8:	b083      	sub	sp, #12
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800f0be:	bf00      	nop
 800f0c0:	370c      	adds	r7, #12
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr

0800f0ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f0ca:	b480      	push	{r7}
 800f0cc:	b083      	sub	sp, #12
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800f0d2:	bf00      	nop
 800f0d4:	370c      	adds	r7, #12
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr

0800f0de <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800f0de:	b480      	push	{r7}
 800f0e0:	b083      	sub	sp, #12
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800f0e6:	bf00      	nop
 800f0e8:	370c      	adds	r7, #12
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr

0800f0f2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800f0f2:	b480      	push	{r7}
 800f0f4:	b083      	sub	sp, #12
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800f0fa:	bf00      	nop
 800f0fc:	370c      	adds	r7, #12
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr

0800f106 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800f106:	b480      	push	{r7}
 800f108:	b083      	sub	sp, #12
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800f10e:	bf00      	nop
 800f110:	370c      	adds	r7, #12
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr

0800f11a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800f11a:	b480      	push	{r7}
 800f11c:	b083      	sub	sp, #12
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800f122:	bf00      	nop
 800f124:	370c      	adds	r7, #12
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr

0800f12e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800f12e:	b480      	push	{r7}
 800f130:	b083      	sub	sp, #12
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800f136:	bf00      	nop
 800f138:	370c      	adds	r7, #12
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr

0800f142 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 800f142:	b480      	push	{r7}
 800f144:	b083      	sub	sp, #12
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800f14e:	4618      	mov	r0, r3
 800f150:	370c      	adds	r7, #12
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr
	...

0800f15c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b085      	sub	sp, #20
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f003 0307 	and.w	r3, r3, #7
 800f16a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f16c:	4b0c      	ldr	r3, [pc, #48]	; (800f1a0 <__NVIC_SetPriorityGrouping+0x44>)
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f172:	68ba      	ldr	r2, [r7, #8]
 800f174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f178:	4013      	ands	r3, r2
 800f17a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f18c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f18e:	4a04      	ldr	r2, [pc, #16]	; (800f1a0 <__NVIC_SetPriorityGrouping+0x44>)
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	60d3      	str	r3, [r2, #12]
}
 800f194:	bf00      	nop
 800f196:	3714      	adds	r7, #20
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr
 800f1a0:	e000ed00 	.word	0xe000ed00

0800f1a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f1a8:	4b04      	ldr	r3, [pc, #16]	; (800f1bc <__NVIC_GetPriorityGrouping+0x18>)
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	0a1b      	lsrs	r3, r3, #8
 800f1ae:	f003 0307 	and.w	r3, r3, #7
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr
 800f1bc:	e000ed00 	.word	0xe000ed00

0800f1c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f1ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	db0b      	blt.n	800f1ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	f003 021f 	and.w	r2, r3, #31
 800f1d8:	4907      	ldr	r1, [pc, #28]	; (800f1f8 <__NVIC_EnableIRQ+0x38>)
 800f1da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1de:	095b      	lsrs	r3, r3, #5
 800f1e0:	2001      	movs	r0, #1
 800f1e2:	fa00 f202 	lsl.w	r2, r0, r2
 800f1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f1ea:	bf00      	nop
 800f1ec:	370c      	adds	r7, #12
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	e000e100 	.word	0xe000e100

0800f1fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b083      	sub	sp, #12
 800f200:	af00      	add	r7, sp, #0
 800f202:	4603      	mov	r3, r0
 800f204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	db12      	blt.n	800f234 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f20e:	79fb      	ldrb	r3, [r7, #7]
 800f210:	f003 021f 	and.w	r2, r3, #31
 800f214:	490a      	ldr	r1, [pc, #40]	; (800f240 <__NVIC_DisableIRQ+0x44>)
 800f216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f21a:	095b      	lsrs	r3, r3, #5
 800f21c:	2001      	movs	r0, #1
 800f21e:	fa00 f202 	lsl.w	r2, r0, r2
 800f222:	3320      	adds	r3, #32
 800f224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800f228:	f3bf 8f4f 	dsb	sy
}
 800f22c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f22e:	f3bf 8f6f 	isb	sy
}
 800f232:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800f234:	bf00      	nop
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	e000e100 	.word	0xe000e100

0800f244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	4603      	mov	r3, r0
 800f24c:	6039      	str	r1, [r7, #0]
 800f24e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f254:	2b00      	cmp	r3, #0
 800f256:	db0a      	blt.n	800f26e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	b2da      	uxtb	r2, r3
 800f25c:	490c      	ldr	r1, [pc, #48]	; (800f290 <__NVIC_SetPriority+0x4c>)
 800f25e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f262:	0112      	lsls	r2, r2, #4
 800f264:	b2d2      	uxtb	r2, r2
 800f266:	440b      	add	r3, r1
 800f268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f26c:	e00a      	b.n	800f284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	b2da      	uxtb	r2, r3
 800f272:	4908      	ldr	r1, [pc, #32]	; (800f294 <__NVIC_SetPriority+0x50>)
 800f274:	79fb      	ldrb	r3, [r7, #7]
 800f276:	f003 030f 	and.w	r3, r3, #15
 800f27a:	3b04      	subs	r3, #4
 800f27c:	0112      	lsls	r2, r2, #4
 800f27e:	b2d2      	uxtb	r2, r2
 800f280:	440b      	add	r3, r1
 800f282:	761a      	strb	r2, [r3, #24]
}
 800f284:	bf00      	nop
 800f286:	370c      	adds	r7, #12
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr
 800f290:	e000e100 	.word	0xe000e100
 800f294:	e000ed00 	.word	0xe000ed00

0800f298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f298:	b480      	push	{r7}
 800f29a:	b089      	sub	sp, #36	; 0x24
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	60b9      	str	r1, [r7, #8]
 800f2a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f003 0307 	and.w	r3, r3, #7
 800f2aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	f1c3 0307 	rsb	r3, r3, #7
 800f2b2:	2b04      	cmp	r3, #4
 800f2b4:	bf28      	it	cs
 800f2b6:	2304      	movcs	r3, #4
 800f2b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f2ba:	69fb      	ldr	r3, [r7, #28]
 800f2bc:	3304      	adds	r3, #4
 800f2be:	2b06      	cmp	r3, #6
 800f2c0:	d902      	bls.n	800f2c8 <NVIC_EncodePriority+0x30>
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	3b03      	subs	r3, #3
 800f2c6:	e000      	b.n	800f2ca <NVIC_EncodePriority+0x32>
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f2d6:	43da      	mvns	r2, r3
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	401a      	ands	r2, r3
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f2e0:	f04f 31ff 	mov.w	r1, #4294967295
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	fa01 f303 	lsl.w	r3, r1, r3
 800f2ea:	43d9      	mvns	r1, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f2f0:	4313      	orrs	r3, r2
         );
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3724      	adds	r7, #36	; 0x24
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr

0800f2fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b082      	sub	sp, #8
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f7ff ff28 	bl	800f15c <__NVIC_SetPriorityGrouping>
}
 800f30c:	bf00      	nop
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f314:	b580      	push	{r7, lr}
 800f316:	b086      	sub	sp, #24
 800f318:	af00      	add	r7, sp, #0
 800f31a:	4603      	mov	r3, r0
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	607a      	str	r2, [r7, #4]
 800f320:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f322:	2300      	movs	r3, #0
 800f324:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f326:	f7ff ff3d 	bl	800f1a4 <__NVIC_GetPriorityGrouping>
 800f32a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	68b9      	ldr	r1, [r7, #8]
 800f330:	6978      	ldr	r0, [r7, #20]
 800f332:	f7ff ffb1 	bl	800f298 <NVIC_EncodePriority>
 800f336:	4602      	mov	r2, r0
 800f338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f33c:	4611      	mov	r1, r2
 800f33e:	4618      	mov	r0, r3
 800f340:	f7ff ff80 	bl	800f244 <__NVIC_SetPriority>
}
 800f344:	bf00      	nop
 800f346:	3718      	adds	r7, #24
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	4603      	mov	r3, r0
 800f354:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7ff ff30 	bl	800f1c0 <__NVIC_EnableIRQ>
}
 800f360:	bf00      	nop
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800f372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f376:	4618      	mov	r0, r3
 800f378:	f7ff ff40 	bl	800f1fc <__NVIC_DisableIRQ>
}
 800f37c:	bf00      	nop
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b086      	sub	sp, #24
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f38c:	2300      	movs	r3, #0
 800f38e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f390:	f7fe ff82 	bl	800e298 <HAL_GetTick>
 800f394:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d101      	bne.n	800f3a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f39c:	2301      	movs	r3, #1
 800f39e:	e099      	b.n	800f4d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2202      	movs	r2, #2
 800f3ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f022 0201 	bic.w	r2, r2, #1
 800f3be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f3c0:	e00f      	b.n	800f3e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f3c2:	f7fe ff69 	bl	800e298 <HAL_GetTick>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	1ad3      	subs	r3, r2, r3
 800f3cc:	2b05      	cmp	r3, #5
 800f3ce:	d908      	bls.n	800f3e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2220      	movs	r2, #32
 800f3d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2203      	movs	r2, #3
 800f3da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f3de:	2303      	movs	r3, #3
 800f3e0:	e078      	b.n	800f4d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f003 0301 	and.w	r3, r3, #1
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d1e8      	bne.n	800f3c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f3f8:	697a      	ldr	r2, [r7, #20]
 800f3fa:	4b38      	ldr	r3, [pc, #224]	; (800f4dc <HAL_DMA_Init+0x158>)
 800f3fc:	4013      	ands	r3, r2
 800f3fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	685a      	ldr	r2, [r3, #4]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f40e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	691b      	ldr	r3, [r3, #16]
 800f414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f41a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	699b      	ldr	r3, [r3, #24]
 800f420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6a1b      	ldr	r3, [r3, #32]
 800f42c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f42e:	697a      	ldr	r2, [r7, #20]
 800f430:	4313      	orrs	r3, r2
 800f432:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f438:	2b04      	cmp	r3, #4
 800f43a:	d107      	bne.n	800f44c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f444:	4313      	orrs	r3, r2
 800f446:	697a      	ldr	r2, [r7, #20]
 800f448:	4313      	orrs	r3, r2
 800f44a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	697a      	ldr	r2, [r7, #20]
 800f452:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	695b      	ldr	r3, [r3, #20]
 800f45a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	f023 0307 	bic.w	r3, r3, #7
 800f462:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f468:	697a      	ldr	r2, [r7, #20]
 800f46a:	4313      	orrs	r3, r2
 800f46c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f472:	2b04      	cmp	r3, #4
 800f474:	d117      	bne.n	800f4a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f47a:	697a      	ldr	r2, [r7, #20]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f484:	2b00      	cmp	r3, #0
 800f486:	d00e      	beq.n	800f4a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 fa91 	bl	800f9b0 <DMA_CheckFifoParam>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d008      	beq.n	800f4a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2240      	movs	r2, #64	; 0x40
 800f498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2201      	movs	r2, #1
 800f49e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e016      	b.n	800f4d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	697a      	ldr	r2, [r7, #20]
 800f4ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fa48 	bl	800f944 <DMA_CalcBaseAndBitshift>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4bc:	223f      	movs	r2, #63	; 0x3f
 800f4be:	409a      	lsls	r2, r3
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f4d2:	2300      	movs	r3, #0
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3718      	adds	r7, #24
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	f010803f 	.word	0xf010803f

0800f4e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b086      	sub	sp, #24
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
 800f4ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d101      	bne.n	800f506 <HAL_DMA_Start_IT+0x26>
 800f502:	2302      	movs	r3, #2
 800f504:	e040      	b.n	800f588 <HAL_DMA_Start_IT+0xa8>
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2201      	movs	r2, #1
 800f50a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f514:	b2db      	uxtb	r3, r3
 800f516:	2b01      	cmp	r3, #1
 800f518:	d12f      	bne.n	800f57a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2202      	movs	r2, #2
 800f51e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2200      	movs	r2, #0
 800f526:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	68b9      	ldr	r1, [r7, #8]
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f000 f9da 	bl	800f8e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f538:	223f      	movs	r2, #63	; 0x3f
 800f53a:	409a      	lsls	r2, r3
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f042 0216 	orr.w	r2, r2, #22
 800f54e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f554:	2b00      	cmp	r3, #0
 800f556:	d007      	beq.n	800f568 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f042 0208 	orr.w	r2, r2, #8
 800f566:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f042 0201 	orr.w	r2, r2, #1
 800f576:	601a      	str	r2, [r3, #0]
 800f578:	e005      	b.n	800f586 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2200      	movs	r2, #0
 800f57e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f582:	2302      	movs	r3, #2
 800f584:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f586:	7dfb      	ldrb	r3, [r7, #23]
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3718      	adds	r7, #24
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	2b02      	cmp	r3, #2
 800f5a2:	d004      	beq.n	800f5ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2280      	movs	r2, #128	; 0x80
 800f5a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e00c      	b.n	800f5c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2205      	movs	r2, #5
 800f5b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f022 0201 	bic.w	r2, r2, #1
 800f5c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f5c6:	2300      	movs	r3, #0
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	370c      	adds	r7, #12
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr

0800f5d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f5e0:	4b8e      	ldr	r3, [pc, #568]	; (800f81c <HAL_DMA_IRQHandler+0x248>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a8e      	ldr	r2, [pc, #568]	; (800f820 <HAL_DMA_IRQHandler+0x24c>)
 800f5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800f5ea:	0a9b      	lsrs	r3, r3, #10
 800f5ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5fe:	2208      	movs	r2, #8
 800f600:	409a      	lsls	r2, r3
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	4013      	ands	r3, r2
 800f606:	2b00      	cmp	r3, #0
 800f608:	d01a      	beq.n	800f640 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f003 0304 	and.w	r3, r3, #4
 800f614:	2b00      	cmp	r3, #0
 800f616:	d013      	beq.n	800f640 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f022 0204 	bic.w	r2, r2, #4
 800f626:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f62c:	2208      	movs	r2, #8
 800f62e:	409a      	lsls	r2, r3
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f638:	f043 0201 	orr.w	r2, r3, #1
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f644:	2201      	movs	r2, #1
 800f646:	409a      	lsls	r2, r3
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	4013      	ands	r3, r2
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d012      	beq.n	800f676 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	695b      	ldr	r3, [r3, #20]
 800f656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00b      	beq.n	800f676 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f662:	2201      	movs	r2, #1
 800f664:	409a      	lsls	r2, r3
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f66e:	f043 0202 	orr.w	r2, r3, #2
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f67a:	2204      	movs	r2, #4
 800f67c:	409a      	lsls	r2, r3
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	4013      	ands	r3, r2
 800f682:	2b00      	cmp	r3, #0
 800f684:	d012      	beq.n	800f6ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f003 0302 	and.w	r3, r3, #2
 800f690:	2b00      	cmp	r3, #0
 800f692:	d00b      	beq.n	800f6ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f698:	2204      	movs	r2, #4
 800f69a:	409a      	lsls	r2, r3
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6a4:	f043 0204 	orr.w	r2, r3, #4
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6b0:	2210      	movs	r2, #16
 800f6b2:	409a      	lsls	r2, r3
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	4013      	ands	r3, r2
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d043      	beq.n	800f744 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f003 0308 	and.w	r3, r3, #8
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d03c      	beq.n	800f744 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6ce:	2210      	movs	r2, #16
 800f6d0:	409a      	lsls	r2, r3
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d018      	beq.n	800f716 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d108      	bne.n	800f704 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d024      	beq.n	800f744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	4798      	blx	r3
 800f702:	e01f      	b.n	800f744 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d01b      	beq.n	800f744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	4798      	blx	r3
 800f714:	e016      	b.n	800f744 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f720:	2b00      	cmp	r3, #0
 800f722:	d107      	bne.n	800f734 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f022 0208 	bic.w	r2, r2, #8
 800f732:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d003      	beq.n	800f744 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f748:	2220      	movs	r2, #32
 800f74a:	409a      	lsls	r2, r3
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	4013      	ands	r3, r2
 800f750:	2b00      	cmp	r3, #0
 800f752:	f000 808f 	beq.w	800f874 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f003 0310 	and.w	r3, r3, #16
 800f760:	2b00      	cmp	r3, #0
 800f762:	f000 8087 	beq.w	800f874 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f76a:	2220      	movs	r2, #32
 800f76c:	409a      	lsls	r2, r3
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	2b05      	cmp	r3, #5
 800f77c:	d136      	bne.n	800f7ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f022 0216 	bic.w	r2, r2, #22
 800f78c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	695a      	ldr	r2, [r3, #20]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f79c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d103      	bne.n	800f7ae <HAL_DMA_IRQHandler+0x1da>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d007      	beq.n	800f7be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f022 0208 	bic.w	r2, r2, #8
 800f7bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7c2:	223f      	movs	r2, #63	; 0x3f
 800f7c4:	409a      	lsls	r2, r3
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d07e      	beq.n	800f8e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	4798      	blx	r3
        }
        return;
 800f7ea:	e079      	b.n	800f8e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d01d      	beq.n	800f836 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f804:	2b00      	cmp	r3, #0
 800f806:	d10d      	bne.n	800f824 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d031      	beq.n	800f874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	4798      	blx	r3
 800f818:	e02c      	b.n	800f874 <HAL_DMA_IRQHandler+0x2a0>
 800f81a:	bf00      	nop
 800f81c:	2000000c 	.word	0x2000000c
 800f820:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d023      	beq.n	800f874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	4798      	blx	r3
 800f834:	e01e      	b.n	800f874 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f840:	2b00      	cmp	r3, #0
 800f842:	d10f      	bne.n	800f864 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f022 0210 	bic.w	r2, r2, #16
 800f852:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d003      	beq.n	800f874 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d032      	beq.n	800f8e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f880:	f003 0301 	and.w	r3, r3, #1
 800f884:	2b00      	cmp	r3, #0
 800f886:	d022      	beq.n	800f8ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2205      	movs	r2, #5
 800f88c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	f022 0201 	bic.w	r2, r2, #1
 800f89e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	60bb      	str	r3, [r7, #8]
 800f8a6:	697a      	ldr	r2, [r7, #20]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d307      	bcc.n	800f8bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f003 0301 	and.w	r3, r3, #1
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d1f2      	bne.n	800f8a0 <HAL_DMA_IRQHandler+0x2cc>
 800f8ba:	e000      	b.n	800f8be <HAL_DMA_IRQHandler+0x2ea>
          break;
 800f8bc:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d005      	beq.n	800f8e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	4798      	blx	r3
 800f8de:	e000      	b.n	800f8e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 800f8e0:	bf00      	nop
    }
  }
}
 800f8e2:	3718      	adds	r7, #24
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]
 800f8f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f904:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	683a      	ldr	r2, [r7, #0]
 800f90c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	2b40      	cmp	r3, #64	; 0x40
 800f914:	d108      	bne.n	800f928 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	68ba      	ldr	r2, [r7, #8]
 800f924:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f926:	e007      	b.n	800f938 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	68ba      	ldr	r2, [r7, #8]
 800f92e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	60da      	str	r2, [r3, #12]
}
 800f938:	bf00      	nop
 800f93a:	3714      	adds	r7, #20
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr

0800f944 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f944:	b480      	push	{r7}
 800f946:	b085      	sub	sp, #20
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	b2db      	uxtb	r3, r3
 800f952:	3b10      	subs	r3, #16
 800f954:	4a14      	ldr	r2, [pc, #80]	; (800f9a8 <DMA_CalcBaseAndBitshift+0x64>)
 800f956:	fba2 2303 	umull	r2, r3, r2, r3
 800f95a:	091b      	lsrs	r3, r3, #4
 800f95c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f95e:	4a13      	ldr	r2, [pc, #76]	; (800f9ac <DMA_CalcBaseAndBitshift+0x68>)
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	4413      	add	r3, r2
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	461a      	mov	r2, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2b03      	cmp	r3, #3
 800f970:	d909      	bls.n	800f986 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f97a:	f023 0303 	bic.w	r3, r3, #3
 800f97e:	1d1a      	adds	r2, r3, #4
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	659a      	str	r2, [r3, #88]	; 0x58
 800f984:	e007      	b.n	800f996 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f98e:	f023 0303 	bic.w	r3, r3, #3
 800f992:	687a      	ldr	r2, [r7, #4]
 800f994:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3714      	adds	r7, #20
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr
 800f9a6:	bf00      	nop
 800f9a8:	aaaaaaab 	.word	0xaaaaaaab
 800f9ac:	08018d00 	.word	0x08018d00

0800f9b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	699b      	ldr	r3, [r3, #24]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d11f      	bne.n	800fa0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	2b03      	cmp	r3, #3
 800f9ce:	d856      	bhi.n	800fa7e <DMA_CheckFifoParam+0xce>
 800f9d0:	a201      	add	r2, pc, #4	; (adr r2, 800f9d8 <DMA_CheckFifoParam+0x28>)
 800f9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d6:	bf00      	nop
 800f9d8:	0800f9e9 	.word	0x0800f9e9
 800f9dc:	0800f9fb 	.word	0x0800f9fb
 800f9e0:	0800f9e9 	.word	0x0800f9e9
 800f9e4:	0800fa7f 	.word	0x0800fa7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d046      	beq.n	800fa82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f9f8:	e043      	b.n	800fa82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fa02:	d140      	bne.n	800fa86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800fa04:	2301      	movs	r3, #1
 800fa06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fa08:	e03d      	b.n	800fa86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	699b      	ldr	r3, [r3, #24]
 800fa0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa12:	d121      	bne.n	800fa58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	2b03      	cmp	r3, #3
 800fa18:	d837      	bhi.n	800fa8a <DMA_CheckFifoParam+0xda>
 800fa1a:	a201      	add	r2, pc, #4	; (adr r2, 800fa20 <DMA_CheckFifoParam+0x70>)
 800fa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa20:	0800fa31 	.word	0x0800fa31
 800fa24:	0800fa37 	.word	0x0800fa37
 800fa28:	0800fa31 	.word	0x0800fa31
 800fa2c:	0800fa49 	.word	0x0800fa49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fa30:	2301      	movs	r3, #1
 800fa32:	73fb      	strb	r3, [r7, #15]
      break;
 800fa34:	e030      	b.n	800fa98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d025      	beq.n	800fa8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800fa42:	2301      	movs	r3, #1
 800fa44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fa46:	e022      	b.n	800fa8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fa50:	d11f      	bne.n	800fa92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800fa52:	2301      	movs	r3, #1
 800fa54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800fa56:	e01c      	b.n	800fa92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	2b02      	cmp	r3, #2
 800fa5c:	d903      	bls.n	800fa66 <DMA_CheckFifoParam+0xb6>
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	2b03      	cmp	r3, #3
 800fa62:	d003      	beq.n	800fa6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fa64:	e018      	b.n	800fa98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800fa66:	2301      	movs	r3, #1
 800fa68:	73fb      	strb	r3, [r7, #15]
      break;
 800fa6a:	e015      	b.n	800fa98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00e      	beq.n	800fa96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800fa78:	2301      	movs	r3, #1
 800fa7a:	73fb      	strb	r3, [r7, #15]
      break;
 800fa7c:	e00b      	b.n	800fa96 <DMA_CheckFifoParam+0xe6>
      break;
 800fa7e:	bf00      	nop
 800fa80:	e00a      	b.n	800fa98 <DMA_CheckFifoParam+0xe8>
      break;
 800fa82:	bf00      	nop
 800fa84:	e008      	b.n	800fa98 <DMA_CheckFifoParam+0xe8>
      break;
 800fa86:	bf00      	nop
 800fa88:	e006      	b.n	800fa98 <DMA_CheckFifoParam+0xe8>
      break;
 800fa8a:	bf00      	nop
 800fa8c:	e004      	b.n	800fa98 <DMA_CheckFifoParam+0xe8>
      break;
 800fa8e:	bf00      	nop
 800fa90:	e002      	b.n	800fa98 <DMA_CheckFifoParam+0xe8>
      break;   
 800fa92:	bf00      	nop
 800fa94:	e000      	b.n	800fa98 <DMA_CheckFifoParam+0xe8>
      break;
 800fa96:	bf00      	nop
    }
  } 
  
  return status; 
 800fa98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3714      	adds	r7, #20
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr
 800faa6:	bf00      	nop

0800faa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b089      	sub	sp, #36	; 0x24
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fab2:	2300      	movs	r3, #0
 800fab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fab6:	2300      	movs	r3, #0
 800fab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800faba:	2300      	movs	r3, #0
 800fabc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fabe:	2300      	movs	r3, #0
 800fac0:	61fb      	str	r3, [r7, #28]
 800fac2:	e16b      	b.n	800fd9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fac4:	2201      	movs	r2, #1
 800fac6:	69fb      	ldr	r3, [r7, #28]
 800fac8:	fa02 f303 	lsl.w	r3, r2, r3
 800facc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	697a      	ldr	r2, [r7, #20]
 800fad4:	4013      	ands	r3, r2
 800fad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fad8:	693a      	ldr	r2, [r7, #16]
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	429a      	cmp	r2, r3
 800fade:	f040 815a 	bne.w	800fd96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	2b01      	cmp	r3, #1
 800fae8:	d00b      	beq.n	800fb02 <HAL_GPIO_Init+0x5a>
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	2b02      	cmp	r3, #2
 800faf0:	d007      	beq.n	800fb02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800faf6:	2b11      	cmp	r3, #17
 800faf8:	d003      	beq.n	800fb02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	2b12      	cmp	r3, #18
 800fb00:	d130      	bne.n	800fb64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	005b      	lsls	r3, r3, #1
 800fb0c:	2203      	movs	r2, #3
 800fb0e:	fa02 f303 	lsl.w	r3, r2, r3
 800fb12:	43db      	mvns	r3, r3
 800fb14:	69ba      	ldr	r2, [r7, #24]
 800fb16:	4013      	ands	r3, r2
 800fb18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	68da      	ldr	r2, [r3, #12]
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	005b      	lsls	r3, r3, #1
 800fb22:	fa02 f303 	lsl.w	r3, r2, r3
 800fb26:	69ba      	ldr	r2, [r7, #24]
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	69ba      	ldr	r2, [r7, #24]
 800fb30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fb38:	2201      	movs	r2, #1
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb40:	43db      	mvns	r3, r3
 800fb42:	69ba      	ldr	r2, [r7, #24]
 800fb44:	4013      	ands	r3, r2
 800fb46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	091b      	lsrs	r3, r3, #4
 800fb4e:	f003 0201 	and.w	r2, r3, #1
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	fa02 f303 	lsl.w	r3, r2, r3
 800fb58:	69ba      	ldr	r2, [r7, #24]
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	69ba      	ldr	r2, [r7, #24]
 800fb62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	005b      	lsls	r3, r3, #1
 800fb6e:	2203      	movs	r2, #3
 800fb70:	fa02 f303 	lsl.w	r3, r2, r3
 800fb74:	43db      	mvns	r3, r3
 800fb76:	69ba      	ldr	r2, [r7, #24]
 800fb78:	4013      	ands	r3, r2
 800fb7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	689a      	ldr	r2, [r3, #8]
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	005b      	lsls	r3, r3, #1
 800fb84:	fa02 f303 	lsl.w	r3, r2, r3
 800fb88:	69ba      	ldr	r2, [r7, #24]
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	69ba      	ldr	r2, [r7, #24]
 800fb92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	d003      	beq.n	800fba4 <HAL_GPIO_Init+0xfc>
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	2b12      	cmp	r3, #18
 800fba2:	d123      	bne.n	800fbec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	08da      	lsrs	r2, r3, #3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	3208      	adds	r2, #8
 800fbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fbb2:	69fb      	ldr	r3, [r7, #28]
 800fbb4:	f003 0307 	and.w	r3, r3, #7
 800fbb8:	009b      	lsls	r3, r3, #2
 800fbba:	220f      	movs	r2, #15
 800fbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800fbc0:	43db      	mvns	r3, r3
 800fbc2:	69ba      	ldr	r2, [r7, #24]
 800fbc4:	4013      	ands	r3, r2
 800fbc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	691a      	ldr	r2, [r3, #16]
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	f003 0307 	and.w	r3, r3, #7
 800fbd2:	009b      	lsls	r3, r3, #2
 800fbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800fbd8:	69ba      	ldr	r2, [r7, #24]
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	08da      	lsrs	r2, r3, #3
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	3208      	adds	r2, #8
 800fbe6:	69b9      	ldr	r1, [r7, #24]
 800fbe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	005b      	lsls	r3, r3, #1
 800fbf6:	2203      	movs	r2, #3
 800fbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800fbfc:	43db      	mvns	r3, r3
 800fbfe:	69ba      	ldr	r2, [r7, #24]
 800fc00:	4013      	ands	r3, r2
 800fc02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	f003 0203 	and.w	r2, r3, #3
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	005b      	lsls	r3, r3, #1
 800fc10:	fa02 f303 	lsl.w	r3, r2, r3
 800fc14:	69ba      	ldr	r2, [r7, #24]
 800fc16:	4313      	orrs	r3, r2
 800fc18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	69ba      	ldr	r2, [r7, #24]
 800fc1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	f000 80b4 	beq.w	800fd96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fc2e:	2300      	movs	r3, #0
 800fc30:	60fb      	str	r3, [r7, #12]
 800fc32:	4b60      	ldr	r3, [pc, #384]	; (800fdb4 <HAL_GPIO_Init+0x30c>)
 800fc34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc36:	4a5f      	ldr	r2, [pc, #380]	; (800fdb4 <HAL_GPIO_Init+0x30c>)
 800fc38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fc3c:	6453      	str	r3, [r2, #68]	; 0x44
 800fc3e:	4b5d      	ldr	r3, [pc, #372]	; (800fdb4 <HAL_GPIO_Init+0x30c>)
 800fc40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc46:	60fb      	str	r3, [r7, #12]
 800fc48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800fc4a:	4a5b      	ldr	r2, [pc, #364]	; (800fdb8 <HAL_GPIO_Init+0x310>)
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	089b      	lsrs	r3, r3, #2
 800fc50:	3302      	adds	r3, #2
 800fc52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	f003 0303 	and.w	r3, r3, #3
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	220f      	movs	r2, #15
 800fc62:	fa02 f303 	lsl.w	r3, r2, r3
 800fc66:	43db      	mvns	r3, r3
 800fc68:	69ba      	ldr	r2, [r7, #24]
 800fc6a:	4013      	ands	r3, r2
 800fc6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4a52      	ldr	r2, [pc, #328]	; (800fdbc <HAL_GPIO_Init+0x314>)
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d02b      	beq.n	800fcce <HAL_GPIO_Init+0x226>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4a51      	ldr	r2, [pc, #324]	; (800fdc0 <HAL_GPIO_Init+0x318>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d025      	beq.n	800fcca <HAL_GPIO_Init+0x222>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	4a50      	ldr	r2, [pc, #320]	; (800fdc4 <HAL_GPIO_Init+0x31c>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d01f      	beq.n	800fcc6 <HAL_GPIO_Init+0x21e>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4a4f      	ldr	r2, [pc, #316]	; (800fdc8 <HAL_GPIO_Init+0x320>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d019      	beq.n	800fcc2 <HAL_GPIO_Init+0x21a>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4a4e      	ldr	r2, [pc, #312]	; (800fdcc <HAL_GPIO_Init+0x324>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d013      	beq.n	800fcbe <HAL_GPIO_Init+0x216>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4a4d      	ldr	r2, [pc, #308]	; (800fdd0 <HAL_GPIO_Init+0x328>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d00d      	beq.n	800fcba <HAL_GPIO_Init+0x212>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4a4c      	ldr	r2, [pc, #304]	; (800fdd4 <HAL_GPIO_Init+0x32c>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d007      	beq.n	800fcb6 <HAL_GPIO_Init+0x20e>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	4a4b      	ldr	r2, [pc, #300]	; (800fdd8 <HAL_GPIO_Init+0x330>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d101      	bne.n	800fcb2 <HAL_GPIO_Init+0x20a>
 800fcae:	2307      	movs	r3, #7
 800fcb0:	e00e      	b.n	800fcd0 <HAL_GPIO_Init+0x228>
 800fcb2:	2308      	movs	r3, #8
 800fcb4:	e00c      	b.n	800fcd0 <HAL_GPIO_Init+0x228>
 800fcb6:	2306      	movs	r3, #6
 800fcb8:	e00a      	b.n	800fcd0 <HAL_GPIO_Init+0x228>
 800fcba:	2305      	movs	r3, #5
 800fcbc:	e008      	b.n	800fcd0 <HAL_GPIO_Init+0x228>
 800fcbe:	2304      	movs	r3, #4
 800fcc0:	e006      	b.n	800fcd0 <HAL_GPIO_Init+0x228>
 800fcc2:	2303      	movs	r3, #3
 800fcc4:	e004      	b.n	800fcd0 <HAL_GPIO_Init+0x228>
 800fcc6:	2302      	movs	r3, #2
 800fcc8:	e002      	b.n	800fcd0 <HAL_GPIO_Init+0x228>
 800fcca:	2301      	movs	r3, #1
 800fccc:	e000      	b.n	800fcd0 <HAL_GPIO_Init+0x228>
 800fcce:	2300      	movs	r3, #0
 800fcd0:	69fa      	ldr	r2, [r7, #28]
 800fcd2:	f002 0203 	and.w	r2, r2, #3
 800fcd6:	0092      	lsls	r2, r2, #2
 800fcd8:	4093      	lsls	r3, r2
 800fcda:	69ba      	ldr	r2, [r7, #24]
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fce0:	4935      	ldr	r1, [pc, #212]	; (800fdb8 <HAL_GPIO_Init+0x310>)
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	089b      	lsrs	r3, r3, #2
 800fce6:	3302      	adds	r3, #2
 800fce8:	69ba      	ldr	r2, [r7, #24]
 800fcea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fcee:	4b3b      	ldr	r3, [pc, #236]	; (800fddc <HAL_GPIO_Init+0x334>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	43db      	mvns	r3, r3
 800fcf8:	69ba      	ldr	r2, [r7, #24]
 800fcfa:	4013      	ands	r3, r2
 800fcfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d003      	beq.n	800fd12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800fd0a:	69ba      	ldr	r2, [r7, #24]
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800fd12:	4a32      	ldr	r2, [pc, #200]	; (800fddc <HAL_GPIO_Init+0x334>)
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800fd18:	4b30      	ldr	r3, [pc, #192]	; (800fddc <HAL_GPIO_Init+0x334>)
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	43db      	mvns	r3, r3
 800fd22:	69ba      	ldr	r2, [r7, #24]
 800fd24:	4013      	ands	r3, r2
 800fd26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d003      	beq.n	800fd3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800fd34:	69ba      	ldr	r2, [r7, #24]
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800fd3c:	4a27      	ldr	r2, [pc, #156]	; (800fddc <HAL_GPIO_Init+0x334>)
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fd42:	4b26      	ldr	r3, [pc, #152]	; (800fddc <HAL_GPIO_Init+0x334>)
 800fd44:	689b      	ldr	r3, [r3, #8]
 800fd46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	43db      	mvns	r3, r3
 800fd4c:	69ba      	ldr	r2, [r7, #24]
 800fd4e:	4013      	ands	r3, r2
 800fd50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d003      	beq.n	800fd66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800fd5e:	69ba      	ldr	r2, [r7, #24]
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	4313      	orrs	r3, r2
 800fd64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800fd66:	4a1d      	ldr	r2, [pc, #116]	; (800fddc <HAL_GPIO_Init+0x334>)
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800fd6c:	4b1b      	ldr	r3, [pc, #108]	; (800fddc <HAL_GPIO_Init+0x334>)
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	43db      	mvns	r3, r3
 800fd76:	69ba      	ldr	r2, [r7, #24]
 800fd78:	4013      	ands	r3, r2
 800fd7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d003      	beq.n	800fd90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800fd88:	69ba      	ldr	r2, [r7, #24]
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800fd90:	4a12      	ldr	r2, [pc, #72]	; (800fddc <HAL_GPIO_Init+0x334>)
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	3301      	adds	r3, #1
 800fd9a:	61fb      	str	r3, [r7, #28]
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	2b0f      	cmp	r3, #15
 800fda0:	f67f ae90 	bls.w	800fac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800fda4:	bf00      	nop
 800fda6:	bf00      	nop
 800fda8:	3724      	adds	r7, #36	; 0x24
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop
 800fdb4:	40023800 	.word	0x40023800
 800fdb8:	40013800 	.word	0x40013800
 800fdbc:	40020000 	.word	0x40020000
 800fdc0:	40020400 	.word	0x40020400
 800fdc4:	40020800 	.word	0x40020800
 800fdc8:	40020c00 	.word	0x40020c00
 800fdcc:	40021000 	.word	0x40021000
 800fdd0:	40021400 	.word	0x40021400
 800fdd4:	40021800 	.word	0x40021800
 800fdd8:	40021c00 	.word	0x40021c00
 800fddc:	40013c00 	.word	0x40013c00

0800fde0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b087      	sub	sp, #28
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fdea:	2300      	movs	r3, #0
 800fdec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	617b      	str	r3, [r7, #20]
 800fdfa:	e0cd      	b.n	800ff98 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	fa02 f303 	lsl.w	r3, r2, r3
 800fe04:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800fe06:	683a      	ldr	r2, [r7, #0]
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	4013      	ands	r3, r2
 800fe0c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800fe0e:	68fa      	ldr	r2, [r7, #12]
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	f040 80bd 	bne.w	800ff92 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800fe18:	4a65      	ldr	r2, [pc, #404]	; (800ffb0 <HAL_GPIO_DeInit+0x1d0>)
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	089b      	lsrs	r3, r3, #2
 800fe1e:	3302      	adds	r3, #2
 800fe20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe24:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	f003 0303 	and.w	r3, r3, #3
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	220f      	movs	r2, #15
 800fe30:	fa02 f303 	lsl.w	r3, r2, r3
 800fe34:	68ba      	ldr	r2, [r7, #8]
 800fe36:	4013      	ands	r3, r2
 800fe38:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4a5d      	ldr	r2, [pc, #372]	; (800ffb4 <HAL_GPIO_DeInit+0x1d4>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d02b      	beq.n	800fe9a <HAL_GPIO_DeInit+0xba>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	4a5c      	ldr	r2, [pc, #368]	; (800ffb8 <HAL_GPIO_DeInit+0x1d8>)
 800fe46:	4293      	cmp	r3, r2
 800fe48:	d025      	beq.n	800fe96 <HAL_GPIO_DeInit+0xb6>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4a5b      	ldr	r2, [pc, #364]	; (800ffbc <HAL_GPIO_DeInit+0x1dc>)
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d01f      	beq.n	800fe92 <HAL_GPIO_DeInit+0xb2>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4a5a      	ldr	r2, [pc, #360]	; (800ffc0 <HAL_GPIO_DeInit+0x1e0>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d019      	beq.n	800fe8e <HAL_GPIO_DeInit+0xae>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4a59      	ldr	r2, [pc, #356]	; (800ffc4 <HAL_GPIO_DeInit+0x1e4>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d013      	beq.n	800fe8a <HAL_GPIO_DeInit+0xaa>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4a58      	ldr	r2, [pc, #352]	; (800ffc8 <HAL_GPIO_DeInit+0x1e8>)
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d00d      	beq.n	800fe86 <HAL_GPIO_DeInit+0xa6>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4a57      	ldr	r2, [pc, #348]	; (800ffcc <HAL_GPIO_DeInit+0x1ec>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d007      	beq.n	800fe82 <HAL_GPIO_DeInit+0xa2>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4a56      	ldr	r2, [pc, #344]	; (800ffd0 <HAL_GPIO_DeInit+0x1f0>)
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d101      	bne.n	800fe7e <HAL_GPIO_DeInit+0x9e>
 800fe7a:	2307      	movs	r3, #7
 800fe7c:	e00e      	b.n	800fe9c <HAL_GPIO_DeInit+0xbc>
 800fe7e:	2308      	movs	r3, #8
 800fe80:	e00c      	b.n	800fe9c <HAL_GPIO_DeInit+0xbc>
 800fe82:	2306      	movs	r3, #6
 800fe84:	e00a      	b.n	800fe9c <HAL_GPIO_DeInit+0xbc>
 800fe86:	2305      	movs	r3, #5
 800fe88:	e008      	b.n	800fe9c <HAL_GPIO_DeInit+0xbc>
 800fe8a:	2304      	movs	r3, #4
 800fe8c:	e006      	b.n	800fe9c <HAL_GPIO_DeInit+0xbc>
 800fe8e:	2303      	movs	r3, #3
 800fe90:	e004      	b.n	800fe9c <HAL_GPIO_DeInit+0xbc>
 800fe92:	2302      	movs	r3, #2
 800fe94:	e002      	b.n	800fe9c <HAL_GPIO_DeInit+0xbc>
 800fe96:	2301      	movs	r3, #1
 800fe98:	e000      	b.n	800fe9c <HAL_GPIO_DeInit+0xbc>
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	697a      	ldr	r2, [r7, #20]
 800fe9e:	f002 0203 	and.w	r2, r2, #3
 800fea2:	0092      	lsls	r2, r2, #2
 800fea4:	4093      	lsls	r3, r2
 800fea6:	68ba      	ldr	r2, [r7, #8]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d132      	bne.n	800ff12 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800feac:	4b49      	ldr	r3, [pc, #292]	; (800ffd4 <HAL_GPIO_DeInit+0x1f4>)
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	43db      	mvns	r3, r3
 800feb4:	4947      	ldr	r1, [pc, #284]	; (800ffd4 <HAL_GPIO_DeInit+0x1f4>)
 800feb6:	4013      	ands	r3, r2
 800feb8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800feba:	4b46      	ldr	r3, [pc, #280]	; (800ffd4 <HAL_GPIO_DeInit+0x1f4>)
 800febc:	685a      	ldr	r2, [r3, #4]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	43db      	mvns	r3, r3
 800fec2:	4944      	ldr	r1, [pc, #272]	; (800ffd4 <HAL_GPIO_DeInit+0x1f4>)
 800fec4:	4013      	ands	r3, r2
 800fec6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800fec8:	4b42      	ldr	r3, [pc, #264]	; (800ffd4 <HAL_GPIO_DeInit+0x1f4>)
 800feca:	689a      	ldr	r2, [r3, #8]
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	43db      	mvns	r3, r3
 800fed0:	4940      	ldr	r1, [pc, #256]	; (800ffd4 <HAL_GPIO_DeInit+0x1f4>)
 800fed2:	4013      	ands	r3, r2
 800fed4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800fed6:	4b3f      	ldr	r3, [pc, #252]	; (800ffd4 <HAL_GPIO_DeInit+0x1f4>)
 800fed8:	68da      	ldr	r2, [r3, #12]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	43db      	mvns	r3, r3
 800fede:	493d      	ldr	r1, [pc, #244]	; (800ffd4 <HAL_GPIO_DeInit+0x1f4>)
 800fee0:	4013      	ands	r3, r2
 800fee2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	f003 0303 	and.w	r3, r3, #3
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	220f      	movs	r2, #15
 800feee:	fa02 f303 	lsl.w	r3, r2, r3
 800fef2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800fef4:	4a2e      	ldr	r2, [pc, #184]	; (800ffb0 <HAL_GPIO_DeInit+0x1d0>)
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	089b      	lsrs	r3, r3, #2
 800fefa:	3302      	adds	r3, #2
 800fefc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	43da      	mvns	r2, r3
 800ff04:	482a      	ldr	r0, [pc, #168]	; (800ffb0 <HAL_GPIO_DeInit+0x1d0>)
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	089b      	lsrs	r3, r3, #2
 800ff0a:	400a      	ands	r2, r1
 800ff0c:	3302      	adds	r3, #2
 800ff0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	005b      	lsls	r3, r3, #1
 800ff1a:	2103      	movs	r1, #3
 800ff1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ff20:	43db      	mvns	r3, r3
 800ff22:	401a      	ands	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	08da      	lsrs	r2, r3, #3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	3208      	adds	r2, #8
 800ff30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	f003 0307 	and.w	r3, r3, #7
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	220f      	movs	r2, #15
 800ff3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ff42:	43db      	mvns	r3, r3
 800ff44:	697a      	ldr	r2, [r7, #20]
 800ff46:	08d2      	lsrs	r2, r2, #3
 800ff48:	4019      	ands	r1, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	3208      	adds	r2, #8
 800ff4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	68da      	ldr	r2, [r3, #12]
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	005b      	lsls	r3, r3, #1
 800ff5a:	2103      	movs	r1, #3
 800ff5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ff60:	43db      	mvns	r3, r3
 800ff62:	401a      	ands	r2, r3
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	685a      	ldr	r2, [r3, #4]
 800ff6c:	2101      	movs	r1, #1
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	fa01 f303 	lsl.w	r3, r1, r3
 800ff74:	43db      	mvns	r3, r3
 800ff76:	401a      	ands	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	689a      	ldr	r2, [r3, #8]
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	005b      	lsls	r3, r3, #1
 800ff84:	2103      	movs	r1, #3
 800ff86:	fa01 f303 	lsl.w	r3, r1, r3
 800ff8a:	43db      	mvns	r3, r3
 800ff8c:	401a      	ands	r2, r3
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	3301      	adds	r3, #1
 800ff96:	617b      	str	r3, [r7, #20]
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	2b0f      	cmp	r3, #15
 800ff9c:	f67f af2e 	bls.w	800fdfc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800ffa0:	bf00      	nop
 800ffa2:	bf00      	nop
 800ffa4:	371c      	adds	r7, #28
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop
 800ffb0:	40013800 	.word	0x40013800
 800ffb4:	40020000 	.word	0x40020000
 800ffb8:	40020400 	.word	0x40020400
 800ffbc:	40020800 	.word	0x40020800
 800ffc0:	40020c00 	.word	0x40020c00
 800ffc4:	40021000 	.word	0x40021000
 800ffc8:	40021400 	.word	0x40021400
 800ffcc:	40021800 	.word	0x40021800
 800ffd0:	40021c00 	.word	0x40021c00
 800ffd4:	40013c00 	.word	0x40013c00

0800ffd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b085      	sub	sp, #20
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	691a      	ldr	r2, [r3, #16]
 800ffe8:	887b      	ldrh	r3, [r7, #2]
 800ffea:	4013      	ands	r3, r2
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d002      	beq.n	800fff6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800fff0:	2301      	movs	r3, #1
 800fff2:	73fb      	strb	r3, [r7, #15]
 800fff4:	e001      	b.n	800fffa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800fff6:	2300      	movs	r3, #0
 800fff8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800fffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3714      	adds	r7, #20
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	460b      	mov	r3, r1
 8010012:	807b      	strh	r3, [r7, #2]
 8010014:	4613      	mov	r3, r2
 8010016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010018:	787b      	ldrb	r3, [r7, #1]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d003      	beq.n	8010026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801001e:	887a      	ldrh	r2, [r7, #2]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010024:	e003      	b.n	801002e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010026:	887b      	ldrh	r3, [r7, #2]
 8010028:	041a      	lsls	r2, r3, #16
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	619a      	str	r2, [r3, #24]
}
 801002e:	bf00      	nop
 8010030:	370c      	adds	r7, #12
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr

0801003a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801003a:	b480      	push	{r7}
 801003c:	b083      	sub	sp, #12
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
 8010042:	460b      	mov	r3, r1
 8010044:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	695a      	ldr	r2, [r3, #20]
 801004a:	887b      	ldrh	r3, [r7, #2]
 801004c:	401a      	ands	r2, r3
 801004e:	887b      	ldrh	r3, [r7, #2]
 8010050:	429a      	cmp	r2, r3
 8010052:	d104      	bne.n	801005e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8010054:	887b      	ldrh	r3, [r7, #2]
 8010056:	041a      	lsls	r2, r3, #16
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 801005c:	e002      	b.n	8010064 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 801005e:	887a      	ldrh	r2, [r7, #2]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	619a      	str	r2, [r3, #24]
}
 8010064:	bf00      	nop
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	4603      	mov	r3, r0
 8010078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801007a:	4b08      	ldr	r3, [pc, #32]	; (801009c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801007c:	695a      	ldr	r2, [r3, #20]
 801007e:	88fb      	ldrh	r3, [r7, #6]
 8010080:	4013      	ands	r3, r2
 8010082:	2b00      	cmp	r3, #0
 8010084:	d006      	beq.n	8010094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010086:	4a05      	ldr	r2, [pc, #20]	; (801009c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010088:	88fb      	ldrh	r3, [r7, #6]
 801008a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801008c:	88fb      	ldrh	r3, [r7, #6]
 801008e:	4618      	mov	r0, r3
 8010090:	f000 f806 	bl	80100a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8010094:	bf00      	nop
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	40013c00 	.word	0x40013c00

080100a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	4603      	mov	r3, r0
 80100a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80100aa:	bf00      	nop
 80100ac:	370c      	adds	r7, #12
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
	...

080100b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b086      	sub	sp, #24
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d101      	bne.n	80100ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80100c6:	2301      	movs	r3, #1
 80100c8:	e25e      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d075      	beq.n	80101c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80100d6:	4b88      	ldr	r3, [pc, #544]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 80100d8:	689b      	ldr	r3, [r3, #8]
 80100da:	f003 030c 	and.w	r3, r3, #12
 80100de:	2b04      	cmp	r3, #4
 80100e0:	d00c      	beq.n	80100fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80100e2:	4b85      	ldr	r3, [pc, #532]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 80100e4:	689b      	ldr	r3, [r3, #8]
 80100e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80100ea:	2b08      	cmp	r3, #8
 80100ec:	d112      	bne.n	8010114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80100ee:	4b82      	ldr	r3, [pc, #520]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80100f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80100fa:	d10b      	bne.n	8010114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80100fc:	4b7e      	ldr	r3, [pc, #504]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010104:	2b00      	cmp	r3, #0
 8010106:	d05b      	beq.n	80101c0 <HAL_RCC_OscConfig+0x108>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d157      	bne.n	80101c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010110:	2301      	movs	r3, #1
 8010112:	e239      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801011c:	d106      	bne.n	801012c <HAL_RCC_OscConfig+0x74>
 801011e:	4b76      	ldr	r3, [pc, #472]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a75      	ldr	r2, [pc, #468]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 8010124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010128:	6013      	str	r3, [r2, #0]
 801012a:	e01d      	b.n	8010168 <HAL_RCC_OscConfig+0xb0>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010134:	d10c      	bne.n	8010150 <HAL_RCC_OscConfig+0x98>
 8010136:	4b70      	ldr	r3, [pc, #448]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4a6f      	ldr	r2, [pc, #444]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 801013c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010140:	6013      	str	r3, [r2, #0]
 8010142:	4b6d      	ldr	r3, [pc, #436]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4a6c      	ldr	r2, [pc, #432]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 8010148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801014c:	6013      	str	r3, [r2, #0]
 801014e:	e00b      	b.n	8010168 <HAL_RCC_OscConfig+0xb0>
 8010150:	4b69      	ldr	r3, [pc, #420]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a68      	ldr	r2, [pc, #416]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 8010156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801015a:	6013      	str	r3, [r2, #0]
 801015c:	4b66      	ldr	r3, [pc, #408]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4a65      	ldr	r2, [pc, #404]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 8010162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d013      	beq.n	8010198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010170:	f7fe f892 	bl	800e298 <HAL_GetTick>
 8010174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010176:	e008      	b.n	801018a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010178:	f7fe f88e 	bl	800e298 <HAL_GetTick>
 801017c:	4602      	mov	r2, r0
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	1ad3      	subs	r3, r2, r3
 8010182:	2b64      	cmp	r3, #100	; 0x64
 8010184:	d901      	bls.n	801018a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8010186:	2303      	movs	r3, #3
 8010188:	e1fe      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801018a:	4b5b      	ldr	r3, [pc, #364]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010192:	2b00      	cmp	r3, #0
 8010194:	d0f0      	beq.n	8010178 <HAL_RCC_OscConfig+0xc0>
 8010196:	e014      	b.n	80101c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010198:	f7fe f87e 	bl	800e298 <HAL_GetTick>
 801019c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801019e:	e008      	b.n	80101b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80101a0:	f7fe f87a 	bl	800e298 <HAL_GetTick>
 80101a4:	4602      	mov	r2, r0
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	1ad3      	subs	r3, r2, r3
 80101aa:	2b64      	cmp	r3, #100	; 0x64
 80101ac:	d901      	bls.n	80101b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80101ae:	2303      	movs	r3, #3
 80101b0:	e1ea      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80101b2:	4b51      	ldr	r3, [pc, #324]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d1f0      	bne.n	80101a0 <HAL_RCC_OscConfig+0xe8>
 80101be:	e000      	b.n	80101c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80101c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f003 0302 	and.w	r3, r3, #2
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d063      	beq.n	8010296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80101ce:	4b4a      	ldr	r3, [pc, #296]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 80101d0:	689b      	ldr	r3, [r3, #8]
 80101d2:	f003 030c 	and.w	r3, r3, #12
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d00b      	beq.n	80101f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80101da:	4b47      	ldr	r3, [pc, #284]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 80101dc:	689b      	ldr	r3, [r3, #8]
 80101de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80101e2:	2b08      	cmp	r3, #8
 80101e4:	d11c      	bne.n	8010220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80101e6:	4b44      	ldr	r3, [pc, #272]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d116      	bne.n	8010220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80101f2:	4b41      	ldr	r3, [pc, #260]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f003 0302 	and.w	r3, r3, #2
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d005      	beq.n	801020a <HAL_RCC_OscConfig+0x152>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	2b01      	cmp	r3, #1
 8010204:	d001      	beq.n	801020a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8010206:	2301      	movs	r3, #1
 8010208:	e1be      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801020a:	4b3b      	ldr	r3, [pc, #236]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	691b      	ldr	r3, [r3, #16]
 8010216:	00db      	lsls	r3, r3, #3
 8010218:	4937      	ldr	r1, [pc, #220]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 801021a:	4313      	orrs	r3, r2
 801021c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801021e:	e03a      	b.n	8010296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d020      	beq.n	801026a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010228:	4b34      	ldr	r3, [pc, #208]	; (80102fc <HAL_RCC_OscConfig+0x244>)
 801022a:	2201      	movs	r2, #1
 801022c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801022e:	f7fe f833 	bl	800e298 <HAL_GetTick>
 8010232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010234:	e008      	b.n	8010248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010236:	f7fe f82f 	bl	800e298 <HAL_GetTick>
 801023a:	4602      	mov	r2, r0
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	1ad3      	subs	r3, r2, r3
 8010240:	2b02      	cmp	r3, #2
 8010242:	d901      	bls.n	8010248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010244:	2303      	movs	r3, #3
 8010246:	e19f      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010248:	4b2b      	ldr	r3, [pc, #172]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f003 0302 	and.w	r3, r3, #2
 8010250:	2b00      	cmp	r3, #0
 8010252:	d0f0      	beq.n	8010236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010254:	4b28      	ldr	r3, [pc, #160]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	691b      	ldr	r3, [r3, #16]
 8010260:	00db      	lsls	r3, r3, #3
 8010262:	4925      	ldr	r1, [pc, #148]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 8010264:	4313      	orrs	r3, r2
 8010266:	600b      	str	r3, [r1, #0]
 8010268:	e015      	b.n	8010296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801026a:	4b24      	ldr	r3, [pc, #144]	; (80102fc <HAL_RCC_OscConfig+0x244>)
 801026c:	2200      	movs	r2, #0
 801026e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010270:	f7fe f812 	bl	800e298 <HAL_GetTick>
 8010274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010276:	e008      	b.n	801028a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010278:	f7fe f80e 	bl	800e298 <HAL_GetTick>
 801027c:	4602      	mov	r2, r0
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	1ad3      	subs	r3, r2, r3
 8010282:	2b02      	cmp	r3, #2
 8010284:	d901      	bls.n	801028a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8010286:	2303      	movs	r3, #3
 8010288:	e17e      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801028a:	4b1b      	ldr	r3, [pc, #108]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f003 0302 	and.w	r3, r3, #2
 8010292:	2b00      	cmp	r3, #0
 8010294:	d1f0      	bne.n	8010278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f003 0308 	and.w	r3, r3, #8
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d036      	beq.n	8010310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	695b      	ldr	r3, [r3, #20]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d016      	beq.n	80102d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80102aa:	4b15      	ldr	r3, [pc, #84]	; (8010300 <HAL_RCC_OscConfig+0x248>)
 80102ac:	2201      	movs	r2, #1
 80102ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80102b0:	f7fd fff2 	bl	800e298 <HAL_GetTick>
 80102b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80102b6:	e008      	b.n	80102ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80102b8:	f7fd ffee 	bl	800e298 <HAL_GetTick>
 80102bc:	4602      	mov	r2, r0
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	2b02      	cmp	r3, #2
 80102c4:	d901      	bls.n	80102ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80102c6:	2303      	movs	r3, #3
 80102c8:	e15e      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80102ca:	4b0b      	ldr	r3, [pc, #44]	; (80102f8 <HAL_RCC_OscConfig+0x240>)
 80102cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102ce:	f003 0302 	and.w	r3, r3, #2
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d0f0      	beq.n	80102b8 <HAL_RCC_OscConfig+0x200>
 80102d6:	e01b      	b.n	8010310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80102d8:	4b09      	ldr	r3, [pc, #36]	; (8010300 <HAL_RCC_OscConfig+0x248>)
 80102da:	2200      	movs	r2, #0
 80102dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80102de:	f7fd ffdb 	bl	800e298 <HAL_GetTick>
 80102e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80102e4:	e00e      	b.n	8010304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80102e6:	f7fd ffd7 	bl	800e298 <HAL_GetTick>
 80102ea:	4602      	mov	r2, r0
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	1ad3      	subs	r3, r2, r3
 80102f0:	2b02      	cmp	r3, #2
 80102f2:	d907      	bls.n	8010304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80102f4:	2303      	movs	r3, #3
 80102f6:	e147      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
 80102f8:	40023800 	.word	0x40023800
 80102fc:	42470000 	.word	0x42470000
 8010300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010304:	4b88      	ldr	r3, [pc, #544]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010308:	f003 0302 	and.w	r3, r3, #2
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1ea      	bne.n	80102e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f003 0304 	and.w	r3, r3, #4
 8010318:	2b00      	cmp	r3, #0
 801031a:	f000 8097 	beq.w	801044c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801031e:	2300      	movs	r3, #0
 8010320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010322:	4b81      	ldr	r3, [pc, #516]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801032a:	2b00      	cmp	r3, #0
 801032c:	d10f      	bne.n	801034e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801032e:	2300      	movs	r3, #0
 8010330:	60bb      	str	r3, [r7, #8]
 8010332:	4b7d      	ldr	r3, [pc, #500]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010336:	4a7c      	ldr	r2, [pc, #496]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801033c:	6413      	str	r3, [r2, #64]	; 0x40
 801033e:	4b7a      	ldr	r3, [pc, #488]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010346:	60bb      	str	r3, [r7, #8]
 8010348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801034a:	2301      	movs	r3, #1
 801034c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801034e:	4b77      	ldr	r3, [pc, #476]	; (801052c <HAL_RCC_OscConfig+0x474>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010356:	2b00      	cmp	r3, #0
 8010358:	d118      	bne.n	801038c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801035a:	4b74      	ldr	r3, [pc, #464]	; (801052c <HAL_RCC_OscConfig+0x474>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4a73      	ldr	r2, [pc, #460]	; (801052c <HAL_RCC_OscConfig+0x474>)
 8010360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010366:	f7fd ff97 	bl	800e298 <HAL_GetTick>
 801036a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801036c:	e008      	b.n	8010380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801036e:	f7fd ff93 	bl	800e298 <HAL_GetTick>
 8010372:	4602      	mov	r2, r0
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	1ad3      	subs	r3, r2, r3
 8010378:	2b02      	cmp	r3, #2
 801037a:	d901      	bls.n	8010380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801037c:	2303      	movs	r3, #3
 801037e:	e103      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010380:	4b6a      	ldr	r3, [pc, #424]	; (801052c <HAL_RCC_OscConfig+0x474>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010388:	2b00      	cmp	r3, #0
 801038a:	d0f0      	beq.n	801036e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	2b01      	cmp	r3, #1
 8010392:	d106      	bne.n	80103a2 <HAL_RCC_OscConfig+0x2ea>
 8010394:	4b64      	ldr	r3, [pc, #400]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010398:	4a63      	ldr	r2, [pc, #396]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 801039a:	f043 0301 	orr.w	r3, r3, #1
 801039e:	6713      	str	r3, [r2, #112]	; 0x70
 80103a0:	e01c      	b.n	80103dc <HAL_RCC_OscConfig+0x324>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	2b05      	cmp	r3, #5
 80103a8:	d10c      	bne.n	80103c4 <HAL_RCC_OscConfig+0x30c>
 80103aa:	4b5f      	ldr	r3, [pc, #380]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 80103ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103ae:	4a5e      	ldr	r2, [pc, #376]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 80103b0:	f043 0304 	orr.w	r3, r3, #4
 80103b4:	6713      	str	r3, [r2, #112]	; 0x70
 80103b6:	4b5c      	ldr	r3, [pc, #368]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 80103b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103ba:	4a5b      	ldr	r2, [pc, #364]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 80103bc:	f043 0301 	orr.w	r3, r3, #1
 80103c0:	6713      	str	r3, [r2, #112]	; 0x70
 80103c2:	e00b      	b.n	80103dc <HAL_RCC_OscConfig+0x324>
 80103c4:	4b58      	ldr	r3, [pc, #352]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 80103c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103c8:	4a57      	ldr	r2, [pc, #348]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 80103ca:	f023 0301 	bic.w	r3, r3, #1
 80103ce:	6713      	str	r3, [r2, #112]	; 0x70
 80103d0:	4b55      	ldr	r3, [pc, #340]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 80103d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103d4:	4a54      	ldr	r2, [pc, #336]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 80103d6:	f023 0304 	bic.w	r3, r3, #4
 80103da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	689b      	ldr	r3, [r3, #8]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d015      	beq.n	8010410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80103e4:	f7fd ff58 	bl	800e298 <HAL_GetTick>
 80103e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80103ea:	e00a      	b.n	8010402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80103ec:	f7fd ff54 	bl	800e298 <HAL_GetTick>
 80103f0:	4602      	mov	r2, r0
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	1ad3      	subs	r3, r2, r3
 80103f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d901      	bls.n	8010402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80103fe:	2303      	movs	r3, #3
 8010400:	e0c2      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010402:	4b49      	ldr	r3, [pc, #292]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010406:	f003 0302 	and.w	r3, r3, #2
 801040a:	2b00      	cmp	r3, #0
 801040c:	d0ee      	beq.n	80103ec <HAL_RCC_OscConfig+0x334>
 801040e:	e014      	b.n	801043a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010410:	f7fd ff42 	bl	800e298 <HAL_GetTick>
 8010414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010416:	e00a      	b.n	801042e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010418:	f7fd ff3e 	bl	800e298 <HAL_GetTick>
 801041c:	4602      	mov	r2, r0
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	f241 3288 	movw	r2, #5000	; 0x1388
 8010426:	4293      	cmp	r3, r2
 8010428:	d901      	bls.n	801042e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801042a:	2303      	movs	r3, #3
 801042c:	e0ac      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801042e:	4b3e      	ldr	r3, [pc, #248]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010432:	f003 0302 	and.w	r3, r3, #2
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1ee      	bne.n	8010418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801043a:	7dfb      	ldrb	r3, [r7, #23]
 801043c:	2b01      	cmp	r3, #1
 801043e:	d105      	bne.n	801044c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010440:	4b39      	ldr	r3, [pc, #228]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010444:	4a38      	ldr	r2, [pc, #224]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801044a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	699b      	ldr	r3, [r3, #24]
 8010450:	2b00      	cmp	r3, #0
 8010452:	f000 8098 	beq.w	8010586 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010456:	4b34      	ldr	r3, [pc, #208]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	f003 030c 	and.w	r3, r3, #12
 801045e:	2b08      	cmp	r3, #8
 8010460:	d05c      	beq.n	801051c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	2b02      	cmp	r3, #2
 8010468:	d141      	bne.n	80104ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801046a:	4b31      	ldr	r3, [pc, #196]	; (8010530 <HAL_RCC_OscConfig+0x478>)
 801046c:	2200      	movs	r2, #0
 801046e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010470:	f7fd ff12 	bl	800e298 <HAL_GetTick>
 8010474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010476:	e008      	b.n	801048a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010478:	f7fd ff0e 	bl	800e298 <HAL_GetTick>
 801047c:	4602      	mov	r2, r0
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	1ad3      	subs	r3, r2, r3
 8010482:	2b02      	cmp	r3, #2
 8010484:	d901      	bls.n	801048a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8010486:	2303      	movs	r3, #3
 8010488:	e07e      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801048a:	4b27      	ldr	r3, [pc, #156]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010492:	2b00      	cmp	r3, #0
 8010494:	d1f0      	bne.n	8010478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	69da      	ldr	r2, [r3, #28]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6a1b      	ldr	r3, [r3, #32]
 801049e:	431a      	orrs	r2, r3
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a4:	019b      	lsls	r3, r3, #6
 80104a6:	431a      	orrs	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104ac:	085b      	lsrs	r3, r3, #1
 80104ae:	3b01      	subs	r3, #1
 80104b0:	041b      	lsls	r3, r3, #16
 80104b2:	431a      	orrs	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b8:	061b      	lsls	r3, r3, #24
 80104ba:	491b      	ldr	r1, [pc, #108]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 80104bc:	4313      	orrs	r3, r2
 80104be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80104c0:	4b1b      	ldr	r3, [pc, #108]	; (8010530 <HAL_RCC_OscConfig+0x478>)
 80104c2:	2201      	movs	r2, #1
 80104c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104c6:	f7fd fee7 	bl	800e298 <HAL_GetTick>
 80104ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80104cc:	e008      	b.n	80104e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80104ce:	f7fd fee3 	bl	800e298 <HAL_GetTick>
 80104d2:	4602      	mov	r2, r0
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	1ad3      	subs	r3, r2, r3
 80104d8:	2b02      	cmp	r3, #2
 80104da:	d901      	bls.n	80104e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80104dc:	2303      	movs	r3, #3
 80104de:	e053      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80104e0:	4b11      	ldr	r3, [pc, #68]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d0f0      	beq.n	80104ce <HAL_RCC_OscConfig+0x416>
 80104ec:	e04b      	b.n	8010586 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80104ee:	4b10      	ldr	r3, [pc, #64]	; (8010530 <HAL_RCC_OscConfig+0x478>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104f4:	f7fd fed0 	bl	800e298 <HAL_GetTick>
 80104f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80104fa:	e008      	b.n	801050e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80104fc:	f7fd fecc 	bl	800e298 <HAL_GetTick>
 8010500:	4602      	mov	r2, r0
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	1ad3      	subs	r3, r2, r3
 8010506:	2b02      	cmp	r3, #2
 8010508:	d901      	bls.n	801050e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801050a:	2303      	movs	r3, #3
 801050c:	e03c      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801050e:	4b06      	ldr	r3, [pc, #24]	; (8010528 <HAL_RCC_OscConfig+0x470>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010516:	2b00      	cmp	r3, #0
 8010518:	d1f0      	bne.n	80104fc <HAL_RCC_OscConfig+0x444>
 801051a:	e034      	b.n	8010586 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	699b      	ldr	r3, [r3, #24]
 8010520:	2b01      	cmp	r3, #1
 8010522:	d107      	bne.n	8010534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8010524:	2301      	movs	r3, #1
 8010526:	e02f      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
 8010528:	40023800 	.word	0x40023800
 801052c:	40007000 	.word	0x40007000
 8010530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010534:	4b16      	ldr	r3, [pc, #88]	; (8010590 <HAL_RCC_OscConfig+0x4d8>)
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	69db      	ldr	r3, [r3, #28]
 8010544:	429a      	cmp	r2, r3
 8010546:	d11c      	bne.n	8010582 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010552:	429a      	cmp	r2, r3
 8010554:	d115      	bne.n	8010582 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010556:	68fa      	ldr	r2, [r7, #12]
 8010558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801055c:	4013      	ands	r3, r2
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010562:	4293      	cmp	r3, r2
 8010564:	d10d      	bne.n	8010582 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010570:	429a      	cmp	r2, r3
 8010572:	d106      	bne.n	8010582 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801057e:	429a      	cmp	r2, r3
 8010580:	d001      	beq.n	8010586 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8010582:	2301      	movs	r3, #1
 8010584:	e000      	b.n	8010588 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8010586:	2300      	movs	r3, #0
}
 8010588:	4618      	mov	r0, r3
 801058a:	3718      	adds	r7, #24
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	40023800 	.word	0x40023800

08010594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d101      	bne.n	80105a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80105a4:	2301      	movs	r3, #1
 80105a6:	e0cc      	b.n	8010742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80105a8:	4b68      	ldr	r3, [pc, #416]	; (801074c <HAL_RCC_ClockConfig+0x1b8>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f003 030f 	and.w	r3, r3, #15
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d90c      	bls.n	80105d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80105b6:	4b65      	ldr	r3, [pc, #404]	; (801074c <HAL_RCC_ClockConfig+0x1b8>)
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	b2d2      	uxtb	r2, r2
 80105bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80105be:	4b63      	ldr	r3, [pc, #396]	; (801074c <HAL_RCC_ClockConfig+0x1b8>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f003 030f 	and.w	r3, r3, #15
 80105c6:	683a      	ldr	r2, [r7, #0]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d001      	beq.n	80105d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80105cc:	2301      	movs	r3, #1
 80105ce:	e0b8      	b.n	8010742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f003 0302 	and.w	r3, r3, #2
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d020      	beq.n	801061e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f003 0304 	and.w	r3, r3, #4
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d005      	beq.n	80105f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80105e8:	4b59      	ldr	r3, [pc, #356]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 80105ea:	689b      	ldr	r3, [r3, #8]
 80105ec:	4a58      	ldr	r2, [pc, #352]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 80105ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80105f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f003 0308 	and.w	r3, r3, #8
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d005      	beq.n	801060c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010600:	4b53      	ldr	r3, [pc, #332]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	4a52      	ldr	r2, [pc, #328]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 8010606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801060a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801060c:	4b50      	ldr	r3, [pc, #320]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 801060e:	689b      	ldr	r3, [r3, #8]
 8010610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	689b      	ldr	r3, [r3, #8]
 8010618:	494d      	ldr	r1, [pc, #308]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 801061a:	4313      	orrs	r3, r2
 801061c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f003 0301 	and.w	r3, r3, #1
 8010626:	2b00      	cmp	r3, #0
 8010628:	d044      	beq.n	80106b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	2b01      	cmp	r3, #1
 8010630:	d107      	bne.n	8010642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010632:	4b47      	ldr	r3, [pc, #284]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801063a:	2b00      	cmp	r3, #0
 801063c:	d119      	bne.n	8010672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801063e:	2301      	movs	r3, #1
 8010640:	e07f      	b.n	8010742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	2b02      	cmp	r3, #2
 8010648:	d003      	beq.n	8010652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801064e:	2b03      	cmp	r3, #3
 8010650:	d107      	bne.n	8010662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010652:	4b3f      	ldr	r3, [pc, #252]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801065a:	2b00      	cmp	r3, #0
 801065c:	d109      	bne.n	8010672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801065e:	2301      	movs	r3, #1
 8010660:	e06f      	b.n	8010742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010662:	4b3b      	ldr	r3, [pc, #236]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f003 0302 	and.w	r3, r3, #2
 801066a:	2b00      	cmp	r3, #0
 801066c:	d101      	bne.n	8010672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801066e:	2301      	movs	r3, #1
 8010670:	e067      	b.n	8010742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010672:	4b37      	ldr	r3, [pc, #220]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 8010674:	689b      	ldr	r3, [r3, #8]
 8010676:	f023 0203 	bic.w	r2, r3, #3
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	4934      	ldr	r1, [pc, #208]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 8010680:	4313      	orrs	r3, r2
 8010682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010684:	f7fd fe08 	bl	800e298 <HAL_GetTick>
 8010688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801068a:	e00a      	b.n	80106a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801068c:	f7fd fe04 	bl	800e298 <HAL_GetTick>
 8010690:	4602      	mov	r2, r0
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	1ad3      	subs	r3, r2, r3
 8010696:	f241 3288 	movw	r2, #5000	; 0x1388
 801069a:	4293      	cmp	r3, r2
 801069c:	d901      	bls.n	80106a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801069e:	2303      	movs	r3, #3
 80106a0:	e04f      	b.n	8010742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80106a2:	4b2b      	ldr	r3, [pc, #172]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 80106a4:	689b      	ldr	r3, [r3, #8]
 80106a6:	f003 020c 	and.w	r2, r3, #12
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	009b      	lsls	r3, r3, #2
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d1eb      	bne.n	801068c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80106b4:	4b25      	ldr	r3, [pc, #148]	; (801074c <HAL_RCC_ClockConfig+0x1b8>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f003 030f 	and.w	r3, r3, #15
 80106bc:	683a      	ldr	r2, [r7, #0]
 80106be:	429a      	cmp	r2, r3
 80106c0:	d20c      	bcs.n	80106dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80106c2:	4b22      	ldr	r3, [pc, #136]	; (801074c <HAL_RCC_ClockConfig+0x1b8>)
 80106c4:	683a      	ldr	r2, [r7, #0]
 80106c6:	b2d2      	uxtb	r2, r2
 80106c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80106ca:	4b20      	ldr	r3, [pc, #128]	; (801074c <HAL_RCC_ClockConfig+0x1b8>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	f003 030f 	and.w	r3, r3, #15
 80106d2:	683a      	ldr	r2, [r7, #0]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d001      	beq.n	80106dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80106d8:	2301      	movs	r3, #1
 80106da:	e032      	b.n	8010742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	f003 0304 	and.w	r3, r3, #4
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d008      	beq.n	80106fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80106e8:	4b19      	ldr	r3, [pc, #100]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 80106ea:	689b      	ldr	r3, [r3, #8]
 80106ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	68db      	ldr	r3, [r3, #12]
 80106f4:	4916      	ldr	r1, [pc, #88]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 80106f6:	4313      	orrs	r3, r2
 80106f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f003 0308 	and.w	r3, r3, #8
 8010702:	2b00      	cmp	r3, #0
 8010704:	d009      	beq.n	801071a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010706:	4b12      	ldr	r3, [pc, #72]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 8010708:	689b      	ldr	r3, [r3, #8]
 801070a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	691b      	ldr	r3, [r3, #16]
 8010712:	00db      	lsls	r3, r3, #3
 8010714:	490e      	ldr	r1, [pc, #56]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 8010716:	4313      	orrs	r3, r2
 8010718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801071a:	f000 f821 	bl	8010760 <HAL_RCC_GetSysClockFreq>
 801071e:	4602      	mov	r2, r0
 8010720:	4b0b      	ldr	r3, [pc, #44]	; (8010750 <HAL_RCC_ClockConfig+0x1bc>)
 8010722:	689b      	ldr	r3, [r3, #8]
 8010724:	091b      	lsrs	r3, r3, #4
 8010726:	f003 030f 	and.w	r3, r3, #15
 801072a:	490a      	ldr	r1, [pc, #40]	; (8010754 <HAL_RCC_ClockConfig+0x1c0>)
 801072c:	5ccb      	ldrb	r3, [r1, r3]
 801072e:	fa22 f303 	lsr.w	r3, r2, r3
 8010732:	4a09      	ldr	r2, [pc, #36]	; (8010758 <HAL_RCC_ClockConfig+0x1c4>)
 8010734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010736:	4b09      	ldr	r3, [pc, #36]	; (801075c <HAL_RCC_ClockConfig+0x1c8>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4618      	mov	r0, r3
 801073c:	f7f1 f8a0 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	40023c00 	.word	0x40023c00
 8010750:	40023800 	.word	0x40023800
 8010754:	0801825c 	.word	0x0801825c
 8010758:	2000000c 	.word	0x2000000c
 801075c:	200005a4 	.word	0x200005a4

08010760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010764:	b090      	sub	sp, #64	; 0x40
 8010766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010768:	2300      	movs	r3, #0
 801076a:	637b      	str	r3, [r7, #52]	; 0x34
 801076c:	2300      	movs	r3, #0
 801076e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010770:	2300      	movs	r3, #0
 8010772:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8010774:	2300      	movs	r3, #0
 8010776:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010778:	4b59      	ldr	r3, [pc, #356]	; (80108e0 <HAL_RCC_GetSysClockFreq+0x180>)
 801077a:	689b      	ldr	r3, [r3, #8]
 801077c:	f003 030c 	and.w	r3, r3, #12
 8010780:	2b08      	cmp	r3, #8
 8010782:	d00d      	beq.n	80107a0 <HAL_RCC_GetSysClockFreq+0x40>
 8010784:	2b08      	cmp	r3, #8
 8010786:	f200 80a1 	bhi.w	80108cc <HAL_RCC_GetSysClockFreq+0x16c>
 801078a:	2b00      	cmp	r3, #0
 801078c:	d002      	beq.n	8010794 <HAL_RCC_GetSysClockFreq+0x34>
 801078e:	2b04      	cmp	r3, #4
 8010790:	d003      	beq.n	801079a <HAL_RCC_GetSysClockFreq+0x3a>
 8010792:	e09b      	b.n	80108cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010794:	4b53      	ldr	r3, [pc, #332]	; (80108e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8010796:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8010798:	e09b      	b.n	80108d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801079a:	4b53      	ldr	r3, [pc, #332]	; (80108e8 <HAL_RCC_GetSysClockFreq+0x188>)
 801079c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801079e:	e098      	b.n	80108d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80107a0:	4b4f      	ldr	r3, [pc, #316]	; (80108e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80107a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80107aa:	4b4d      	ldr	r3, [pc, #308]	; (80108e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d028      	beq.n	8010808 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80107b6:	4b4a      	ldr	r3, [pc, #296]	; (80108e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	099b      	lsrs	r3, r3, #6
 80107bc:	2200      	movs	r2, #0
 80107be:	623b      	str	r3, [r7, #32]
 80107c0:	627a      	str	r2, [r7, #36]	; 0x24
 80107c2:	6a3b      	ldr	r3, [r7, #32]
 80107c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80107c8:	2100      	movs	r1, #0
 80107ca:	4b47      	ldr	r3, [pc, #284]	; (80108e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80107cc:	fb03 f201 	mul.w	r2, r3, r1
 80107d0:	2300      	movs	r3, #0
 80107d2:	fb00 f303 	mul.w	r3, r0, r3
 80107d6:	4413      	add	r3, r2
 80107d8:	4a43      	ldr	r2, [pc, #268]	; (80108e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80107da:	fba0 1202 	umull	r1, r2, r0, r2
 80107de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80107e0:	460a      	mov	r2, r1
 80107e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80107e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107e6:	4413      	add	r3, r2
 80107e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ec:	2200      	movs	r2, #0
 80107ee:	61bb      	str	r3, [r7, #24]
 80107f0:	61fa      	str	r2, [r7, #28]
 80107f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80107f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80107fa:	f7f0 f937 	bl	8000a6c <__aeabi_uldivmod>
 80107fe:	4602      	mov	r2, r0
 8010800:	460b      	mov	r3, r1
 8010802:	4613      	mov	r3, r2
 8010804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010806:	e053      	b.n	80108b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010808:	4b35      	ldr	r3, [pc, #212]	; (80108e0 <HAL_RCC_GetSysClockFreq+0x180>)
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	099b      	lsrs	r3, r3, #6
 801080e:	2200      	movs	r2, #0
 8010810:	613b      	str	r3, [r7, #16]
 8010812:	617a      	str	r2, [r7, #20]
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801081a:	f04f 0b00 	mov.w	fp, #0
 801081e:	4652      	mov	r2, sl
 8010820:	465b      	mov	r3, fp
 8010822:	f04f 0000 	mov.w	r0, #0
 8010826:	f04f 0100 	mov.w	r1, #0
 801082a:	0159      	lsls	r1, r3, #5
 801082c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010830:	0150      	lsls	r0, r2, #5
 8010832:	4602      	mov	r2, r0
 8010834:	460b      	mov	r3, r1
 8010836:	ebb2 080a 	subs.w	r8, r2, sl
 801083a:	eb63 090b 	sbc.w	r9, r3, fp
 801083e:	f04f 0200 	mov.w	r2, #0
 8010842:	f04f 0300 	mov.w	r3, #0
 8010846:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801084a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801084e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8010852:	ebb2 0408 	subs.w	r4, r2, r8
 8010856:	eb63 0509 	sbc.w	r5, r3, r9
 801085a:	f04f 0200 	mov.w	r2, #0
 801085e:	f04f 0300 	mov.w	r3, #0
 8010862:	00eb      	lsls	r3, r5, #3
 8010864:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010868:	00e2      	lsls	r2, r4, #3
 801086a:	4614      	mov	r4, r2
 801086c:	461d      	mov	r5, r3
 801086e:	eb14 030a 	adds.w	r3, r4, sl
 8010872:	603b      	str	r3, [r7, #0]
 8010874:	eb45 030b 	adc.w	r3, r5, fp
 8010878:	607b      	str	r3, [r7, #4]
 801087a:	f04f 0200 	mov.w	r2, #0
 801087e:	f04f 0300 	mov.w	r3, #0
 8010882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010886:	4629      	mov	r1, r5
 8010888:	028b      	lsls	r3, r1, #10
 801088a:	4621      	mov	r1, r4
 801088c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010890:	4621      	mov	r1, r4
 8010892:	028a      	lsls	r2, r1, #10
 8010894:	4610      	mov	r0, r2
 8010896:	4619      	mov	r1, r3
 8010898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801089a:	2200      	movs	r2, #0
 801089c:	60bb      	str	r3, [r7, #8]
 801089e:	60fa      	str	r2, [r7, #12]
 80108a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80108a4:	f7f0 f8e2 	bl	8000a6c <__aeabi_uldivmod>
 80108a8:	4602      	mov	r2, r0
 80108aa:	460b      	mov	r3, r1
 80108ac:	4613      	mov	r3, r2
 80108ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80108b0:	4b0b      	ldr	r3, [pc, #44]	; (80108e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	0c1b      	lsrs	r3, r3, #16
 80108b6:	f003 0303 	and.w	r3, r3, #3
 80108ba:	3301      	adds	r3, #1
 80108bc:	005b      	lsls	r3, r3, #1
 80108be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80108c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80108c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80108ca:	e002      	b.n	80108d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80108cc:	4b05      	ldr	r3, [pc, #20]	; (80108e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80108ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80108d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80108d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3740      	adds	r7, #64	; 0x40
 80108d8:	46bd      	mov	sp, r7
 80108da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80108de:	bf00      	nop
 80108e0:	40023800 	.word	0x40023800
 80108e4:	00f42400 	.word	0x00f42400
 80108e8:	017d7840 	.word	0x017d7840

080108ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80108ec:	b480      	push	{r7}
 80108ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80108f0:	4b03      	ldr	r3, [pc, #12]	; (8010900 <HAL_RCC_GetHCLKFreq+0x14>)
 80108f2:	681b      	ldr	r3, [r3, #0]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop
 8010900:	2000000c 	.word	0x2000000c

08010904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010908:	f7ff fff0 	bl	80108ec <HAL_RCC_GetHCLKFreq>
 801090c:	4602      	mov	r2, r0
 801090e:	4b05      	ldr	r3, [pc, #20]	; (8010924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010910:	689b      	ldr	r3, [r3, #8]
 8010912:	0a9b      	lsrs	r3, r3, #10
 8010914:	f003 0307 	and.w	r3, r3, #7
 8010918:	4903      	ldr	r1, [pc, #12]	; (8010928 <HAL_RCC_GetPCLK1Freq+0x24>)
 801091a:	5ccb      	ldrb	r3, [r1, r3]
 801091c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010920:	4618      	mov	r0, r3
 8010922:	bd80      	pop	{r7, pc}
 8010924:	40023800 	.word	0x40023800
 8010928:	0801826c 	.word	0x0801826c

0801092c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010930:	f7ff ffdc 	bl	80108ec <HAL_RCC_GetHCLKFreq>
 8010934:	4602      	mov	r2, r0
 8010936:	4b05      	ldr	r3, [pc, #20]	; (801094c <HAL_RCC_GetPCLK2Freq+0x20>)
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	0b5b      	lsrs	r3, r3, #13
 801093c:	f003 0307 	and.w	r3, r3, #7
 8010940:	4903      	ldr	r1, [pc, #12]	; (8010950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010942:	5ccb      	ldrb	r3, [r1, r3]
 8010944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010948:	4618      	mov	r0, r3
 801094a:	bd80      	pop	{r7, pc}
 801094c:	40023800 	.word	0x40023800
 8010950:	0801826c 	.word	0x0801826c

08010954 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010954:	b480      	push	{r7}
 8010956:	b083      	sub	sp, #12
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	220f      	movs	r2, #15
 8010962:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010964:	4b12      	ldr	r3, [pc, #72]	; (80109b0 <HAL_RCC_GetClockConfig+0x5c>)
 8010966:	689b      	ldr	r3, [r3, #8]
 8010968:	f003 0203 	and.w	r2, r3, #3
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010970:	4b0f      	ldr	r3, [pc, #60]	; (80109b0 <HAL_RCC_GetClockConfig+0x5c>)
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801097c:	4b0c      	ldr	r3, [pc, #48]	; (80109b0 <HAL_RCC_GetClockConfig+0x5c>)
 801097e:	689b      	ldr	r3, [r3, #8]
 8010980:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010988:	4b09      	ldr	r3, [pc, #36]	; (80109b0 <HAL_RCC_GetClockConfig+0x5c>)
 801098a:	689b      	ldr	r3, [r3, #8]
 801098c:	08db      	lsrs	r3, r3, #3
 801098e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010996:	4b07      	ldr	r3, [pc, #28]	; (80109b4 <HAL_RCC_GetClockConfig+0x60>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f003 020f 	and.w	r2, r3, #15
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	601a      	str	r2, [r3, #0]
}
 80109a2:	bf00      	nop
 80109a4:	370c      	adds	r7, #12
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	40023800 	.word	0x40023800
 80109b4:	40023c00 	.word	0x40023c00

080109b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d101      	bne.n	80109ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80109c6:	2301      	movs	r3, #1
 80109c8:	e056      	b.n	8010a78 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2200      	movs	r2, #0
 80109ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d106      	bne.n	80109ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f7f0 fe85 	bl	80016f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2202      	movs	r2, #2
 80109ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	681a      	ldr	r2, [r3, #0]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a00:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	685a      	ldr	r2, [r3, #4]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	689b      	ldr	r3, [r3, #8]
 8010a0a:	431a      	orrs	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	431a      	orrs	r2, r3
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	691b      	ldr	r3, [r3, #16]
 8010a16:	431a      	orrs	r2, r3
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	695b      	ldr	r3, [r3, #20]
 8010a1c:	431a      	orrs	r2, r3
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	699b      	ldr	r3, [r3, #24]
 8010a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010a26:	431a      	orrs	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	69db      	ldr	r3, [r3, #28]
 8010a2c:	431a      	orrs	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6a1b      	ldr	r3, [r3, #32]
 8010a32:	ea42 0103 	orr.w	r1, r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	430a      	orrs	r2, r1
 8010a40:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	699b      	ldr	r3, [r3, #24]
 8010a46:	0c1b      	lsrs	r3, r3, #16
 8010a48:	f003 0104 	and.w	r1, r3, #4
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	430a      	orrs	r2, r1
 8010a56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	69da      	ldr	r2, [r3, #28]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010a66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2201      	movs	r2, #1
 8010a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010a76:	2300      	movs	r3, #0
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b08c      	sub	sp, #48	; 0x30
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	607a      	str	r2, [r7, #4]
 8010a8c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010a8e:	2301      	movs	r3, #1
 8010a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010a92:	2300      	movs	r3, #0
 8010a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d101      	bne.n	8010aa6 <HAL_SPI_TransmitReceive+0x26>
 8010aa2:	2302      	movs	r3, #2
 8010aa4:	e18a      	b.n	8010dbc <HAL_SPI_TransmitReceive+0x33c>
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010aae:	f7fd fbf3 	bl	800e298 <HAL_GetTick>
 8010ab2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	685b      	ldr	r3, [r3, #4]
 8010ac2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010ac4:	887b      	ldrh	r3, [r7, #2]
 8010ac6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d00f      	beq.n	8010af0 <HAL_SPI_TransmitReceive+0x70>
 8010ad0:	69fb      	ldr	r3, [r7, #28]
 8010ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010ad6:	d107      	bne.n	8010ae8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d103      	bne.n	8010ae8 <HAL_SPI_TransmitReceive+0x68>
 8010ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010ae4:	2b04      	cmp	r3, #4
 8010ae6:	d003      	beq.n	8010af0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010ae8:	2302      	movs	r3, #2
 8010aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010aee:	e15b      	b.n	8010da8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d005      	beq.n	8010b02 <HAL_SPI_TransmitReceive+0x82>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d002      	beq.n	8010b02 <HAL_SPI_TransmitReceive+0x82>
 8010afc:	887b      	ldrh	r3, [r7, #2]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d103      	bne.n	8010b0a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8010b02:	2301      	movs	r3, #1
 8010b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010b08:	e14e      	b.n	8010da8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	2b04      	cmp	r3, #4
 8010b14:	d003      	beq.n	8010b1e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	2205      	movs	r2, #5
 8010b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	2200      	movs	r2, #0
 8010b22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	687a      	ldr	r2, [r7, #4]
 8010b28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	887a      	ldrh	r2, [r7, #2]
 8010b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	887a      	ldrh	r2, [r7, #2]
 8010b34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	68ba      	ldr	r2, [r7, #8]
 8010b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	887a      	ldrh	r2, [r7, #2]
 8010b40:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	887a      	ldrh	r2, [r7, #2]
 8010b46:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2200      	movs	r2, #0
 8010b52:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b5e:	2b40      	cmp	r3, #64	; 0x40
 8010b60:	d007      	beq.n	8010b72 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010b70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	68db      	ldr	r3, [r3, #12]
 8010b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b7a:	d178      	bne.n	8010c6e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d002      	beq.n	8010b8a <HAL_SPI_TransmitReceive+0x10a>
 8010b84:	8b7b      	ldrh	r3, [r7, #26]
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d166      	bne.n	8010c58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b8e:	881a      	ldrh	r2, [r3, #0]
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b9a:	1c9a      	adds	r2, r3, #2
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010ba4:	b29b      	uxth	r3, r3
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	b29a      	uxth	r2, r3
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010bae:	e053      	b.n	8010c58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	f003 0302 	and.w	r3, r3, #2
 8010bba:	2b02      	cmp	r3, #2
 8010bbc:	d11b      	bne.n	8010bf6 <HAL_SPI_TransmitReceive+0x176>
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d016      	beq.n	8010bf6 <HAL_SPI_TransmitReceive+0x176>
 8010bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d113      	bne.n	8010bf6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bd2:	881a      	ldrh	r2, [r3, #0]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bde:	1c9a      	adds	r2, r3, #2
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010be8:	b29b      	uxth	r3, r3
 8010bea:	3b01      	subs	r3, #1
 8010bec:	b29a      	uxth	r2, r3
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	689b      	ldr	r3, [r3, #8]
 8010bfc:	f003 0301 	and.w	r3, r3, #1
 8010c00:	2b01      	cmp	r3, #1
 8010c02:	d119      	bne.n	8010c38 <HAL_SPI_TransmitReceive+0x1b8>
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d014      	beq.n	8010c38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	68da      	ldr	r2, [r3, #12]
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c18:	b292      	uxth	r2, r2
 8010c1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c20:	1c9a      	adds	r2, r3, #2
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	b29a      	uxth	r2, r3
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010c34:	2301      	movs	r3, #1
 8010c36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010c38:	f7fd fb2e 	bl	800e298 <HAL_GetTick>
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c40:	1ad3      	subs	r3, r2, r3
 8010c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d807      	bhi.n	8010c58 <HAL_SPI_TransmitReceive+0x1d8>
 8010c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c4e:	d003      	beq.n	8010c58 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8010c50:	2303      	movs	r3, #3
 8010c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010c56:	e0a7      	b.n	8010da8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d1a6      	bne.n	8010bb0 <HAL_SPI_TransmitReceive+0x130>
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d1a1      	bne.n	8010bb0 <HAL_SPI_TransmitReceive+0x130>
 8010c6c:	e07c      	b.n	8010d68 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	685b      	ldr	r3, [r3, #4]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d002      	beq.n	8010c7c <HAL_SPI_TransmitReceive+0x1fc>
 8010c76:	8b7b      	ldrh	r3, [r7, #26]
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d16b      	bne.n	8010d54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	330c      	adds	r3, #12
 8010c86:	7812      	ldrb	r2, [r2, #0]
 8010c88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c8e:	1c5a      	adds	r2, r3, #1
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	3b01      	subs	r3, #1
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010ca2:	e057      	b.n	8010d54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	689b      	ldr	r3, [r3, #8]
 8010caa:	f003 0302 	and.w	r3, r3, #2
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	d11c      	bne.n	8010cec <HAL_SPI_TransmitReceive+0x26c>
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010cb6:	b29b      	uxth	r3, r3
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d017      	beq.n	8010cec <HAL_SPI_TransmitReceive+0x26c>
 8010cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cbe:	2b01      	cmp	r3, #1
 8010cc0:	d114      	bne.n	8010cec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	330c      	adds	r3, #12
 8010ccc:	7812      	ldrb	r2, [r2, #0]
 8010cce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cd4:	1c5a      	adds	r2, r3, #1
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	3b01      	subs	r3, #1
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	689b      	ldr	r3, [r3, #8]
 8010cf2:	f003 0301 	and.w	r3, r3, #1
 8010cf6:	2b01      	cmp	r3, #1
 8010cf8:	d119      	bne.n	8010d2e <HAL_SPI_TransmitReceive+0x2ae>
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010cfe:	b29b      	uxth	r3, r3
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d014      	beq.n	8010d2e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	68da      	ldr	r2, [r3, #12]
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d0e:	b2d2      	uxtb	r2, r2
 8010d10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d16:	1c5a      	adds	r2, r3, #1
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	3b01      	subs	r3, #1
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010d2e:	f7fd fab3 	bl	800e298 <HAL_GetTick>
 8010d32:	4602      	mov	r2, r0
 8010d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d36:	1ad3      	subs	r3, r2, r3
 8010d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d803      	bhi.n	8010d46 <HAL_SPI_TransmitReceive+0x2c6>
 8010d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d44:	d102      	bne.n	8010d4c <HAL_SPI_TransmitReceive+0x2cc>
 8010d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d103      	bne.n	8010d54 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8010d4c:	2303      	movs	r3, #3
 8010d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010d52:	e029      	b.n	8010da8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d1a2      	bne.n	8010ca4 <HAL_SPI_TransmitReceive+0x224>
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d19d      	bne.n	8010ca4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d6c:	68f8      	ldr	r0, [r7, #12]
 8010d6e:	f000 f893 	bl	8010e98 <SPI_EndRxTxTransaction>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d006      	beq.n	8010d86 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8010d78:	2301      	movs	r3, #1
 8010d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2220      	movs	r2, #32
 8010d82:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010d84:	e010      	b.n	8010da8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	689b      	ldr	r3, [r3, #8]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d10b      	bne.n	8010da6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010d8e:	2300      	movs	r3, #0
 8010d90:	617b      	str	r3, [r7, #20]
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	68db      	ldr	r3, [r3, #12]
 8010d98:	617b      	str	r3, [r7, #20]
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	689b      	ldr	r3, [r3, #8]
 8010da0:	617b      	str	r3, [r7, #20]
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	e000      	b.n	8010da8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010da6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2201      	movs	r2, #1
 8010dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2200      	movs	r2, #0
 8010db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010db8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3730      	adds	r7, #48	; 0x30
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	603b      	str	r3, [r7, #0]
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010dd4:	e04c      	b.n	8010e70 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ddc:	d048      	beq.n	8010e70 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010dde:	f7fd fa5b 	bl	800e298 <HAL_GetTick>
 8010de2:	4602      	mov	r2, r0
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	1ad3      	subs	r3, r2, r3
 8010de8:	683a      	ldr	r2, [r7, #0]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d902      	bls.n	8010df4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d13d      	bne.n	8010e70 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	685a      	ldr	r2, [r3, #4]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010e02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010e0c:	d111      	bne.n	8010e32 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e16:	d004      	beq.n	8010e22 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	689b      	ldr	r3, [r3, #8]
 8010e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e20:	d107      	bne.n	8010e32 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	681a      	ldr	r2, [r3, #0]
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e3a:	d10f      	bne.n	8010e5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010e4a:	601a      	str	r2, [r3, #0]
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	681a      	ldr	r2, [r3, #0]
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010e5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2201      	movs	r2, #1
 8010e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8010e6c:	2303      	movs	r3, #3
 8010e6e:	e00f      	b.n	8010e90 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	689a      	ldr	r2, [r3, #8]
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	4013      	ands	r3, r2
 8010e7a:	68ba      	ldr	r2, [r7, #8]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	bf0c      	ite	eq
 8010e80:	2301      	moveq	r3, #1
 8010e82:	2300      	movne	r3, #0
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	461a      	mov	r2, r3
 8010e88:	79fb      	ldrb	r3, [r7, #7]
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d1a3      	bne.n	8010dd6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8010e8e:	2300      	movs	r3, #0
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	3710      	adds	r7, #16
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b088      	sub	sp, #32
 8010e9c:	af02      	add	r7, sp, #8
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010ea4:	4b1b      	ldr	r3, [pc, #108]	; (8010f14 <SPI_EndRxTxTransaction+0x7c>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	4a1b      	ldr	r2, [pc, #108]	; (8010f18 <SPI_EndRxTxTransaction+0x80>)
 8010eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8010eae:	0d5b      	lsrs	r3, r3, #21
 8010eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010eb4:	fb02 f303 	mul.w	r3, r2, r3
 8010eb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010ec2:	d112      	bne.n	8010eea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	9300      	str	r3, [sp, #0]
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	2180      	movs	r1, #128	; 0x80
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f7ff ff78 	bl	8010dc4 <SPI_WaitFlagStateUntilTimeout>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d016      	beq.n	8010f08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ede:	f043 0220 	orr.w	r2, r3, #32
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010ee6:	2303      	movs	r3, #3
 8010ee8:	e00f      	b.n	8010f0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d00a      	beq.n	8010f06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	3b01      	subs	r3, #1
 8010ef4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	689b      	ldr	r3, [r3, #8]
 8010efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f00:	2b80      	cmp	r3, #128	; 0x80
 8010f02:	d0f2      	beq.n	8010eea <SPI_EndRxTxTransaction+0x52>
 8010f04:	e000      	b.n	8010f08 <SPI_EndRxTxTransaction+0x70>
        break;
 8010f06:	bf00      	nop
  }

  return HAL_OK;
 8010f08:	2300      	movs	r3, #0
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3718      	adds	r7, #24
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	2000000c 	.word	0x2000000c
 8010f18:	165e9f81 	.word	0x165e9f81

08010f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d101      	bne.n	8010f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	e01d      	b.n	8010f6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d106      	bne.n	8010f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f000 f815 	bl	8010f72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2202      	movs	r2, #2
 8010f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	3304      	adds	r3, #4
 8010f58:	4619      	mov	r1, r3
 8010f5a:	4610      	mov	r0, r2
 8010f5c:	f000 fc36 	bl	80117cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2201      	movs	r2, #1
 8010f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010f68:	2300      	movs	r3, #0
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3708      	adds	r7, #8
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}

08010f72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8010f72:	b480      	push	{r7}
 8010f74:	b083      	sub	sp, #12
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8010f7a:	bf00      	nop
 8010f7c:	370c      	adds	r7, #12
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010f86:	b480      	push	{r7}
 8010f88:	b085      	sub	sp, #20
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	68da      	ldr	r2, [r3, #12]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	f042 0201 	orr.w	r2, r2, #1
 8010f9c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	689b      	ldr	r3, [r3, #8]
 8010fa4:	f003 0307 	and.w	r3, r3, #7
 8010fa8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2b06      	cmp	r3, #6
 8010fae:	d007      	beq.n	8010fc0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	681a      	ldr	r2, [r3, #0]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f042 0201 	orr.w	r2, r2, #1
 8010fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010fc0:	2300      	movs	r3, #0
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3714      	adds	r7, #20
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr

08010fce <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b082      	sub	sp, #8
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d101      	bne.n	8010fe0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	e01d      	b.n	801101c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d106      	bne.n	8010ffa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7f0 fff7 	bl	8001fe8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2202      	movs	r2, #2
 8010ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681a      	ldr	r2, [r3, #0]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	3304      	adds	r3, #4
 801100a:	4619      	mov	r1, r3
 801100c:	4610      	mov	r0, r2
 801100e:	f000 fbdd 	bl	80117cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2201      	movs	r2, #1
 8011016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801101a:	2300      	movs	r3, #0
}
 801101c:	4618      	mov	r0, r3
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b082      	sub	sp, #8
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d101      	bne.n	8011036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011032:	2301      	movs	r3, #1
 8011034:	e01d      	b.n	8011072 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801103c:	b2db      	uxtb	r3, r3
 801103e:	2b00      	cmp	r3, #0
 8011040:	d106      	bne.n	8011050 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f7f0 ff68 	bl	8001f20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2202      	movs	r2, #2
 8011054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	3304      	adds	r3, #4
 8011060:	4619      	mov	r1, r3
 8011062:	4610      	mov	r0, r2
 8011064:	f000 fbb2 	bl	80117cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2201      	movs	r2, #1
 801106c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011070:	2300      	movs	r3, #0
}
 8011072:	4618      	mov	r0, r3
 8011074:	3708      	adds	r7, #8
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
	...

0801107c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2201      	movs	r2, #1
 801108c:	6839      	ldr	r1, [r7, #0]
 801108e:	4618      	mov	r0, r3
 8011090:	f000 fdec 	bl	8011c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	4a15      	ldr	r2, [pc, #84]	; (80110f0 <HAL_TIM_PWM_Start+0x74>)
 801109a:	4293      	cmp	r3, r2
 801109c:	d004      	beq.n	80110a8 <HAL_TIM_PWM_Start+0x2c>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	4a14      	ldr	r2, [pc, #80]	; (80110f4 <HAL_TIM_PWM_Start+0x78>)
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d101      	bne.n	80110ac <HAL_TIM_PWM_Start+0x30>
 80110a8:	2301      	movs	r3, #1
 80110aa:	e000      	b.n	80110ae <HAL_TIM_PWM_Start+0x32>
 80110ac:	2300      	movs	r3, #0
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d007      	beq.n	80110c2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80110c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	689b      	ldr	r3, [r3, #8]
 80110c8:	f003 0307 	and.w	r3, r3, #7
 80110cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2b06      	cmp	r3, #6
 80110d2:	d007      	beq.n	80110e4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	f042 0201 	orr.w	r2, r2, #1
 80110e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80110e4:	2300      	movs	r3, #0
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3710      	adds	r7, #16
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop
 80110f0:	40010000 	.word	0x40010000
 80110f4:	40010400 	.word	0x40010400

080110f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	2b0c      	cmp	r3, #12
 8011106:	d841      	bhi.n	801118c <HAL_TIM_PWM_Start_IT+0x94>
 8011108:	a201      	add	r2, pc, #4	; (adr r2, 8011110 <HAL_TIM_PWM_Start_IT+0x18>)
 801110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801110e:	bf00      	nop
 8011110:	08011145 	.word	0x08011145
 8011114:	0801118d 	.word	0x0801118d
 8011118:	0801118d 	.word	0x0801118d
 801111c:	0801118d 	.word	0x0801118d
 8011120:	08011157 	.word	0x08011157
 8011124:	0801118d 	.word	0x0801118d
 8011128:	0801118d 	.word	0x0801118d
 801112c:	0801118d 	.word	0x0801118d
 8011130:	08011169 	.word	0x08011169
 8011134:	0801118d 	.word	0x0801118d
 8011138:	0801118d 	.word	0x0801118d
 801113c:	0801118d 	.word	0x0801118d
 8011140:	0801117b 	.word	0x0801117b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	68da      	ldr	r2, [r3, #12]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	f042 0202 	orr.w	r2, r2, #2
 8011152:	60da      	str	r2, [r3, #12]
      break;
 8011154:	e01b      	b.n	801118e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	68da      	ldr	r2, [r3, #12]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f042 0204 	orr.w	r2, r2, #4
 8011164:	60da      	str	r2, [r3, #12]
      break;
 8011166:	e012      	b.n	801118e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	68da      	ldr	r2, [r3, #12]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f042 0208 	orr.w	r2, r2, #8
 8011176:	60da      	str	r2, [r3, #12]
      break;
 8011178:	e009      	b.n	801118e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	68da      	ldr	r2, [r3, #12]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	f042 0210 	orr.w	r2, r2, #16
 8011188:	60da      	str	r2, [r3, #12]
      break;
 801118a:	e000      	b.n	801118e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 801118c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2201      	movs	r2, #1
 8011194:	6839      	ldr	r1, [r7, #0]
 8011196:	4618      	mov	r0, r3
 8011198:	f000 fd68 	bl	8011c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	4a15      	ldr	r2, [pc, #84]	; (80111f8 <HAL_TIM_PWM_Start_IT+0x100>)
 80111a2:	4293      	cmp	r3, r2
 80111a4:	d004      	beq.n	80111b0 <HAL_TIM_PWM_Start_IT+0xb8>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	4a14      	ldr	r2, [pc, #80]	; (80111fc <HAL_TIM_PWM_Start_IT+0x104>)
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d101      	bne.n	80111b4 <HAL_TIM_PWM_Start_IT+0xbc>
 80111b0:	2301      	movs	r3, #1
 80111b2:	e000      	b.n	80111b6 <HAL_TIM_PWM_Start_IT+0xbe>
 80111b4:	2300      	movs	r3, #0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d007      	beq.n	80111ca <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80111c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	689b      	ldr	r3, [r3, #8]
 80111d0:	f003 0307 	and.w	r3, r3, #7
 80111d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2b06      	cmp	r3, #6
 80111da:	d007      	beq.n	80111ec <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	681a      	ldr	r2, [r3, #0]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f042 0201 	orr.w	r2, r2, #1
 80111ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80111ec:	2300      	movs	r3, #0
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3710      	adds	r7, #16
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	40010000 	.word	0x40010000
 80111fc:	40010400 	.word	0x40010400

08011200 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	2b0c      	cmp	r3, #12
 801120e:	d841      	bhi.n	8011294 <HAL_TIM_PWM_Stop_IT+0x94>
 8011210:	a201      	add	r2, pc, #4	; (adr r2, 8011218 <HAL_TIM_PWM_Stop_IT+0x18>)
 8011212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011216:	bf00      	nop
 8011218:	0801124d 	.word	0x0801124d
 801121c:	08011295 	.word	0x08011295
 8011220:	08011295 	.word	0x08011295
 8011224:	08011295 	.word	0x08011295
 8011228:	0801125f 	.word	0x0801125f
 801122c:	08011295 	.word	0x08011295
 8011230:	08011295 	.word	0x08011295
 8011234:	08011295 	.word	0x08011295
 8011238:	08011271 	.word	0x08011271
 801123c:	08011295 	.word	0x08011295
 8011240:	08011295 	.word	0x08011295
 8011244:	08011295 	.word	0x08011295
 8011248:	08011283 	.word	0x08011283
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	68da      	ldr	r2, [r3, #12]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	f022 0202 	bic.w	r2, r2, #2
 801125a:	60da      	str	r2, [r3, #12]
      break;
 801125c:	e01b      	b.n	8011296 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	68da      	ldr	r2, [r3, #12]
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f022 0204 	bic.w	r2, r2, #4
 801126c:	60da      	str	r2, [r3, #12]
      break;
 801126e:	e012      	b.n	8011296 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	68da      	ldr	r2, [r3, #12]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f022 0208 	bic.w	r2, r2, #8
 801127e:	60da      	str	r2, [r3, #12]
      break;
 8011280:	e009      	b.n	8011296 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	68da      	ldr	r2, [r3, #12]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f022 0210 	bic.w	r2, r2, #16
 8011290:	60da      	str	r2, [r3, #12]
      break;
 8011292:	e000      	b.n	8011296 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8011294:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	2200      	movs	r2, #0
 801129c:	6839      	ldr	r1, [r7, #0]
 801129e:	4618      	mov	r0, r3
 80112a0:	f000 fce4 	bl	8011c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	4a20      	ldr	r2, [pc, #128]	; (801132c <HAL_TIM_PWM_Stop_IT+0x12c>)
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d004      	beq.n	80112b8 <HAL_TIM_PWM_Stop_IT+0xb8>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	4a1f      	ldr	r2, [pc, #124]	; (8011330 <HAL_TIM_PWM_Stop_IT+0x130>)
 80112b4:	4293      	cmp	r3, r2
 80112b6:	d101      	bne.n	80112bc <HAL_TIM_PWM_Stop_IT+0xbc>
 80112b8:	2301      	movs	r3, #1
 80112ba:	e000      	b.n	80112be <HAL_TIM_PWM_Stop_IT+0xbe>
 80112bc:	2300      	movs	r3, #0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d017      	beq.n	80112f2 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	6a1a      	ldr	r2, [r3, #32]
 80112c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80112cc:	4013      	ands	r3, r2
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d10f      	bne.n	80112f2 <HAL_TIM_PWM_Stop_IT+0xf2>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	6a1a      	ldr	r2, [r3, #32]
 80112d8:	f240 4344 	movw	r3, #1092	; 0x444
 80112dc:	4013      	ands	r3, r2
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d107      	bne.n	80112f2 <HAL_TIM_PWM_Stop_IT+0xf2>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80112f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	6a1a      	ldr	r2, [r3, #32]
 80112f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80112fc:	4013      	ands	r3, r2
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d10f      	bne.n	8011322 <HAL_TIM_PWM_Stop_IT+0x122>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	6a1a      	ldr	r2, [r3, #32]
 8011308:	f240 4344 	movw	r3, #1092	; 0x444
 801130c:	4013      	ands	r3, r2
 801130e:	2b00      	cmp	r3, #0
 8011310:	d107      	bne.n	8011322 <HAL_TIM_PWM_Stop_IT+0x122>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	681a      	ldr	r2, [r3, #0]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	f022 0201 	bic.w	r2, r2, #1
 8011320:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011322:	2300      	movs	r3, #0
}
 8011324:	4618      	mov	r0, r3
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	40010000 	.word	0x40010000
 8011330:	40010400 	.word	0x40010400

08011334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	691b      	ldr	r3, [r3, #16]
 8011342:	f003 0302 	and.w	r3, r3, #2
 8011346:	2b02      	cmp	r3, #2
 8011348:	d122      	bne.n	8011390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	f003 0302 	and.w	r3, r3, #2
 8011354:	2b02      	cmp	r3, #2
 8011356:	d11b      	bne.n	8011390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	f06f 0202 	mvn.w	r2, #2
 8011360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2201      	movs	r2, #1
 8011366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	699b      	ldr	r3, [r3, #24]
 801136e:	f003 0303 	and.w	r3, r3, #3
 8011372:	2b00      	cmp	r3, #0
 8011374:	d003      	beq.n	801137e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 fa14 	bl	80117a4 <HAL_TIM_IC_CaptureCallback>
 801137c:	e005      	b.n	801138a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f000 fa06 	bl	8011790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7fa fcfb 	bl	800bd80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2200      	movs	r2, #0
 801138e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	691b      	ldr	r3, [r3, #16]
 8011396:	f003 0304 	and.w	r3, r3, #4
 801139a:	2b04      	cmp	r3, #4
 801139c:	d122      	bne.n	80113e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	f003 0304 	and.w	r3, r3, #4
 80113a8:	2b04      	cmp	r3, #4
 80113aa:	d11b      	bne.n	80113e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f06f 0204 	mvn.w	r2, #4
 80113b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2202      	movs	r2, #2
 80113ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	699b      	ldr	r3, [r3, #24]
 80113c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d003      	beq.n	80113d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f000 f9ea 	bl	80117a4 <HAL_TIM_IC_CaptureCallback>
 80113d0:	e005      	b.n	80113de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 f9dc 	bl	8011790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f7fa fcd1 	bl	800bd80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	2200      	movs	r2, #0
 80113e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	691b      	ldr	r3, [r3, #16]
 80113ea:	f003 0308 	and.w	r3, r3, #8
 80113ee:	2b08      	cmp	r3, #8
 80113f0:	d122      	bne.n	8011438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	f003 0308 	and.w	r3, r3, #8
 80113fc:	2b08      	cmp	r3, #8
 80113fe:	d11b      	bne.n	8011438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f06f 0208 	mvn.w	r2, #8
 8011408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2204      	movs	r2, #4
 801140e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	69db      	ldr	r3, [r3, #28]
 8011416:	f003 0303 	and.w	r3, r3, #3
 801141a:	2b00      	cmp	r3, #0
 801141c:	d003      	beq.n	8011426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f000 f9c0 	bl	80117a4 <HAL_TIM_IC_CaptureCallback>
 8011424:	e005      	b.n	8011432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 f9b2 	bl	8011790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f7fa fca7 	bl	800bd80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2200      	movs	r2, #0
 8011436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	691b      	ldr	r3, [r3, #16]
 801143e:	f003 0310 	and.w	r3, r3, #16
 8011442:	2b10      	cmp	r3, #16
 8011444:	d122      	bne.n	801148c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	f003 0310 	and.w	r3, r3, #16
 8011450:	2b10      	cmp	r3, #16
 8011452:	d11b      	bne.n	801148c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f06f 0210 	mvn.w	r2, #16
 801145c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2208      	movs	r2, #8
 8011462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	69db      	ldr	r3, [r3, #28]
 801146a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801146e:	2b00      	cmp	r3, #0
 8011470:	d003      	beq.n	801147a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f000 f996 	bl	80117a4 <HAL_TIM_IC_CaptureCallback>
 8011478:	e005      	b.n	8011486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f000 f988 	bl	8011790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7fa fc7d 	bl	800bd80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2200      	movs	r2, #0
 801148a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	691b      	ldr	r3, [r3, #16]
 8011492:	f003 0301 	and.w	r3, r3, #1
 8011496:	2b01      	cmp	r3, #1
 8011498:	d10e      	bne.n	80114b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	68db      	ldr	r3, [r3, #12]
 80114a0:	f003 0301 	and.w	r3, r3, #1
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d107      	bne.n	80114b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f06f 0201 	mvn.w	r2, #1
 80114b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7f0 f88c 	bl	80015d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	691b      	ldr	r3, [r3, #16]
 80114be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114c2:	2b80      	cmp	r3, #128	; 0x80
 80114c4:	d10e      	bne.n	80114e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114d0:	2b80      	cmp	r3, #128	; 0x80
 80114d2:	d107      	bne.n	80114e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80114dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f000 fcc2 	bl	8011e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	691b      	ldr	r3, [r3, #16]
 80114ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114ee:	2b40      	cmp	r3, #64	; 0x40
 80114f0:	d10e      	bne.n	8011510 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114fc:	2b40      	cmp	r3, #64	; 0x40
 80114fe:	d107      	bne.n	8011510 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f000 f954 	bl	80117b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	691b      	ldr	r3, [r3, #16]
 8011516:	f003 0320 	and.w	r3, r3, #32
 801151a:	2b20      	cmp	r3, #32
 801151c:	d10e      	bne.n	801153c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	f003 0320 	and.w	r3, r3, #32
 8011528:	2b20      	cmp	r3, #32
 801152a:	d107      	bne.n	801153c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	f06f 0220 	mvn.w	r2, #32
 8011534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f000 fc8c 	bl	8011e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801153c:	bf00      	nop
 801153e:	3708      	adds	r7, #8
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b084      	sub	sp, #16
 8011548:	af00      	add	r7, sp, #0
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011556:	2b01      	cmp	r3, #1
 8011558:	d101      	bne.n	801155e <HAL_TIM_OC_ConfigChannel+0x1a>
 801155a:	2302      	movs	r3, #2
 801155c:	e04e      	b.n	80115fc <HAL_TIM_OC_ConfigChannel+0xb8>
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2201      	movs	r2, #1
 8011562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2202      	movs	r2, #2
 801156a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2b0c      	cmp	r3, #12
 8011572:	d839      	bhi.n	80115e8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8011574:	a201      	add	r2, pc, #4	; (adr r2, 801157c <HAL_TIM_OC_ConfigChannel+0x38>)
 8011576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801157a:	bf00      	nop
 801157c:	080115b1 	.word	0x080115b1
 8011580:	080115e9 	.word	0x080115e9
 8011584:	080115e9 	.word	0x080115e9
 8011588:	080115e9 	.word	0x080115e9
 801158c:	080115bf 	.word	0x080115bf
 8011590:	080115e9 	.word	0x080115e9
 8011594:	080115e9 	.word	0x080115e9
 8011598:	080115e9 	.word	0x080115e9
 801159c:	080115cd 	.word	0x080115cd
 80115a0:	080115e9 	.word	0x080115e9
 80115a4:	080115e9 	.word	0x080115e9
 80115a8:	080115e9 	.word	0x080115e9
 80115ac:	080115db 	.word	0x080115db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	68b9      	ldr	r1, [r7, #8]
 80115b6:	4618      	mov	r0, r3
 80115b8:	f000 f9a8 	bl	801190c <TIM_OC1_SetConfig>
      break;
 80115bc:	e015      	b.n	80115ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	68b9      	ldr	r1, [r7, #8]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f000 fa11 	bl	80119ec <TIM_OC2_SetConfig>
      break;
 80115ca:	e00e      	b.n	80115ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	68b9      	ldr	r1, [r7, #8]
 80115d2:	4618      	mov	r0, r3
 80115d4:	f000 fa80 	bl	8011ad8 <TIM_OC3_SetConfig>
      break;
 80115d8:	e007      	b.n	80115ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	68b9      	ldr	r1, [r7, #8]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f000 faed 	bl	8011bc0 <TIM_OC4_SetConfig>
      break;
 80115e6:	e000      	b.n	80115ea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80115e8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	2201      	movs	r2, #1
 80115ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2200      	movs	r2, #0
 80115f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80115fa:	2300      	movs	r3, #0
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3710      	adds	r7, #16
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}

08011604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b084      	sub	sp, #16
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011616:	2b01      	cmp	r3, #1
 8011618:	d101      	bne.n	801161e <HAL_TIM_PWM_ConfigChannel+0x1a>
 801161a:	2302      	movs	r3, #2
 801161c:	e0b4      	b.n	8011788 <HAL_TIM_PWM_ConfigChannel+0x184>
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2201      	movs	r2, #1
 8011622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2202      	movs	r2, #2
 801162a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2b0c      	cmp	r3, #12
 8011632:	f200 809f 	bhi.w	8011774 <HAL_TIM_PWM_ConfigChannel+0x170>
 8011636:	a201      	add	r2, pc, #4	; (adr r2, 801163c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8011638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801163c:	08011671 	.word	0x08011671
 8011640:	08011775 	.word	0x08011775
 8011644:	08011775 	.word	0x08011775
 8011648:	08011775 	.word	0x08011775
 801164c:	080116b1 	.word	0x080116b1
 8011650:	08011775 	.word	0x08011775
 8011654:	08011775 	.word	0x08011775
 8011658:	08011775 	.word	0x08011775
 801165c:	080116f3 	.word	0x080116f3
 8011660:	08011775 	.word	0x08011775
 8011664:	08011775 	.word	0x08011775
 8011668:	08011775 	.word	0x08011775
 801166c:	08011733 	.word	0x08011733
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	68b9      	ldr	r1, [r7, #8]
 8011676:	4618      	mov	r0, r3
 8011678:	f000 f948 	bl	801190c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	699a      	ldr	r2, [r3, #24]
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	f042 0208 	orr.w	r2, r2, #8
 801168a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	699a      	ldr	r2, [r3, #24]
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	f022 0204 	bic.w	r2, r2, #4
 801169a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	6999      	ldr	r1, [r3, #24]
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	691a      	ldr	r2, [r3, #16]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	430a      	orrs	r2, r1
 80116ac:	619a      	str	r2, [r3, #24]
      break;
 80116ae:	e062      	b.n	8011776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	68b9      	ldr	r1, [r7, #8]
 80116b6:	4618      	mov	r0, r3
 80116b8:	f000 f998 	bl	80119ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	699a      	ldr	r2, [r3, #24]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80116ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	699a      	ldr	r2, [r3, #24]
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80116da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	6999      	ldr	r1, [r3, #24]
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	691b      	ldr	r3, [r3, #16]
 80116e6:	021a      	lsls	r2, r3, #8
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	430a      	orrs	r2, r1
 80116ee:	619a      	str	r2, [r3, #24]
      break;
 80116f0:	e041      	b.n	8011776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	68b9      	ldr	r1, [r7, #8]
 80116f8:	4618      	mov	r0, r3
 80116fa:	f000 f9ed 	bl	8011ad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	69da      	ldr	r2, [r3, #28]
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	f042 0208 	orr.w	r2, r2, #8
 801170c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	69da      	ldr	r2, [r3, #28]
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	f022 0204 	bic.w	r2, r2, #4
 801171c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	69d9      	ldr	r1, [r3, #28]
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	691a      	ldr	r2, [r3, #16]
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	430a      	orrs	r2, r1
 801172e:	61da      	str	r2, [r3, #28]
      break;
 8011730:	e021      	b.n	8011776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	68b9      	ldr	r1, [r7, #8]
 8011738:	4618      	mov	r0, r3
 801173a:	f000 fa41 	bl	8011bc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	69da      	ldr	r2, [r3, #28]
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801174c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	69da      	ldr	r2, [r3, #28]
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801175c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	69d9      	ldr	r1, [r3, #28]
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	691b      	ldr	r3, [r3, #16]
 8011768:	021a      	lsls	r2, r3, #8
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	430a      	orrs	r2, r1
 8011770:	61da      	str	r2, [r3, #28]
      break;
 8011772:	e000      	b.n	8011776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8011774:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	2201      	movs	r2, #1
 801177a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	2200      	movs	r2, #0
 8011782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011786:	2300      	movs	r3, #0
}
 8011788:	4618      	mov	r0, r3
 801178a:	3710      	adds	r7, #16
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011790:	b480      	push	{r7}
 8011792:	b083      	sub	sp, #12
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011798:	bf00      	nop
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr

080117a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b083      	sub	sp, #12
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80117ac:	bf00      	nop
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80117c0:	bf00      	nop
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr

080117cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80117cc:	b480      	push	{r7}
 80117ce:	b085      	sub	sp, #20
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	4a40      	ldr	r2, [pc, #256]	; (80118e0 <TIM_Base_SetConfig+0x114>)
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d013      	beq.n	801180c <TIM_Base_SetConfig+0x40>
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117ea:	d00f      	beq.n	801180c <TIM_Base_SetConfig+0x40>
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	4a3d      	ldr	r2, [pc, #244]	; (80118e4 <TIM_Base_SetConfig+0x118>)
 80117f0:	4293      	cmp	r3, r2
 80117f2:	d00b      	beq.n	801180c <TIM_Base_SetConfig+0x40>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	4a3c      	ldr	r2, [pc, #240]	; (80118e8 <TIM_Base_SetConfig+0x11c>)
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d007      	beq.n	801180c <TIM_Base_SetConfig+0x40>
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	4a3b      	ldr	r2, [pc, #236]	; (80118ec <TIM_Base_SetConfig+0x120>)
 8011800:	4293      	cmp	r3, r2
 8011802:	d003      	beq.n	801180c <TIM_Base_SetConfig+0x40>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	4a3a      	ldr	r2, [pc, #232]	; (80118f0 <TIM_Base_SetConfig+0x124>)
 8011808:	4293      	cmp	r3, r2
 801180a:	d108      	bne.n	801181e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	4313      	orrs	r3, r2
 801181c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	4a2f      	ldr	r2, [pc, #188]	; (80118e0 <TIM_Base_SetConfig+0x114>)
 8011822:	4293      	cmp	r3, r2
 8011824:	d02b      	beq.n	801187e <TIM_Base_SetConfig+0xb2>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801182c:	d027      	beq.n	801187e <TIM_Base_SetConfig+0xb2>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	4a2c      	ldr	r2, [pc, #176]	; (80118e4 <TIM_Base_SetConfig+0x118>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d023      	beq.n	801187e <TIM_Base_SetConfig+0xb2>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4a2b      	ldr	r2, [pc, #172]	; (80118e8 <TIM_Base_SetConfig+0x11c>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d01f      	beq.n	801187e <TIM_Base_SetConfig+0xb2>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4a2a      	ldr	r2, [pc, #168]	; (80118ec <TIM_Base_SetConfig+0x120>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d01b      	beq.n	801187e <TIM_Base_SetConfig+0xb2>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	4a29      	ldr	r2, [pc, #164]	; (80118f0 <TIM_Base_SetConfig+0x124>)
 801184a:	4293      	cmp	r3, r2
 801184c:	d017      	beq.n	801187e <TIM_Base_SetConfig+0xb2>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	4a28      	ldr	r2, [pc, #160]	; (80118f4 <TIM_Base_SetConfig+0x128>)
 8011852:	4293      	cmp	r3, r2
 8011854:	d013      	beq.n	801187e <TIM_Base_SetConfig+0xb2>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	4a27      	ldr	r2, [pc, #156]	; (80118f8 <TIM_Base_SetConfig+0x12c>)
 801185a:	4293      	cmp	r3, r2
 801185c:	d00f      	beq.n	801187e <TIM_Base_SetConfig+0xb2>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	4a26      	ldr	r2, [pc, #152]	; (80118fc <TIM_Base_SetConfig+0x130>)
 8011862:	4293      	cmp	r3, r2
 8011864:	d00b      	beq.n	801187e <TIM_Base_SetConfig+0xb2>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	4a25      	ldr	r2, [pc, #148]	; (8011900 <TIM_Base_SetConfig+0x134>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d007      	beq.n	801187e <TIM_Base_SetConfig+0xb2>
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	4a24      	ldr	r2, [pc, #144]	; (8011904 <TIM_Base_SetConfig+0x138>)
 8011872:	4293      	cmp	r3, r2
 8011874:	d003      	beq.n	801187e <TIM_Base_SetConfig+0xb2>
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	4a23      	ldr	r2, [pc, #140]	; (8011908 <TIM_Base_SetConfig+0x13c>)
 801187a:	4293      	cmp	r3, r2
 801187c:	d108      	bne.n	8011890 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	68db      	ldr	r3, [r3, #12]
 801188a:	68fa      	ldr	r2, [r7, #12]
 801188c:	4313      	orrs	r3, r2
 801188e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	695b      	ldr	r3, [r3, #20]
 801189a:	4313      	orrs	r3, r2
 801189c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	68fa      	ldr	r2, [r7, #12]
 80118a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	689a      	ldr	r2, [r3, #8]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	4a0a      	ldr	r2, [pc, #40]	; (80118e0 <TIM_Base_SetConfig+0x114>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d003      	beq.n	80118c4 <TIM_Base_SetConfig+0xf8>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	4a0c      	ldr	r2, [pc, #48]	; (80118f0 <TIM_Base_SetConfig+0x124>)
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d103      	bne.n	80118cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	691a      	ldr	r2, [r3, #16]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2201      	movs	r2, #1
 80118d0:	615a      	str	r2, [r3, #20]
}
 80118d2:	bf00      	nop
 80118d4:	3714      	adds	r7, #20
 80118d6:	46bd      	mov	sp, r7
 80118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop
 80118e0:	40010000 	.word	0x40010000
 80118e4:	40000400 	.word	0x40000400
 80118e8:	40000800 	.word	0x40000800
 80118ec:	40000c00 	.word	0x40000c00
 80118f0:	40010400 	.word	0x40010400
 80118f4:	40014000 	.word	0x40014000
 80118f8:	40014400 	.word	0x40014400
 80118fc:	40014800 	.word	0x40014800
 8011900:	40001800 	.word	0x40001800
 8011904:	40001c00 	.word	0x40001c00
 8011908:	40002000 	.word	0x40002000

0801190c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801190c:	b480      	push	{r7}
 801190e:	b087      	sub	sp, #28
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6a1b      	ldr	r3, [r3, #32]
 801191a:	f023 0201 	bic.w	r2, r3, #1
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6a1b      	ldr	r3, [r3, #32]
 8011926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	699b      	ldr	r3, [r3, #24]
 8011932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801193a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	f023 0303 	bic.w	r3, r3, #3
 8011942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	68fa      	ldr	r2, [r7, #12]
 801194a:	4313      	orrs	r3, r2
 801194c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	f023 0302 	bic.w	r3, r3, #2
 8011954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	689b      	ldr	r3, [r3, #8]
 801195a:	697a      	ldr	r2, [r7, #20]
 801195c:	4313      	orrs	r3, r2
 801195e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	4a20      	ldr	r2, [pc, #128]	; (80119e4 <TIM_OC1_SetConfig+0xd8>)
 8011964:	4293      	cmp	r3, r2
 8011966:	d003      	beq.n	8011970 <TIM_OC1_SetConfig+0x64>
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	4a1f      	ldr	r2, [pc, #124]	; (80119e8 <TIM_OC1_SetConfig+0xdc>)
 801196c:	4293      	cmp	r3, r2
 801196e:	d10c      	bne.n	801198a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	f023 0308 	bic.w	r3, r3, #8
 8011976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	68db      	ldr	r3, [r3, #12]
 801197c:	697a      	ldr	r2, [r7, #20]
 801197e:	4313      	orrs	r3, r2
 8011980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	f023 0304 	bic.w	r3, r3, #4
 8011988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	4a15      	ldr	r2, [pc, #84]	; (80119e4 <TIM_OC1_SetConfig+0xd8>)
 801198e:	4293      	cmp	r3, r2
 8011990:	d003      	beq.n	801199a <TIM_OC1_SetConfig+0x8e>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	4a14      	ldr	r2, [pc, #80]	; (80119e8 <TIM_OC1_SetConfig+0xdc>)
 8011996:	4293      	cmp	r3, r2
 8011998:	d111      	bne.n	80119be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80119a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80119a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	695b      	ldr	r3, [r3, #20]
 80119ae:	693a      	ldr	r2, [r7, #16]
 80119b0:	4313      	orrs	r3, r2
 80119b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	699b      	ldr	r3, [r3, #24]
 80119b8:	693a      	ldr	r2, [r7, #16]
 80119ba:	4313      	orrs	r3, r2
 80119bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	693a      	ldr	r2, [r7, #16]
 80119c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	68fa      	ldr	r2, [r7, #12]
 80119c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	685a      	ldr	r2, [r3, #4]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	697a      	ldr	r2, [r7, #20]
 80119d6:	621a      	str	r2, [r3, #32]
}
 80119d8:	bf00      	nop
 80119da:	371c      	adds	r7, #28
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr
 80119e4:	40010000 	.word	0x40010000
 80119e8:	40010400 	.word	0x40010400

080119ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b087      	sub	sp, #28
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6a1b      	ldr	r3, [r3, #32]
 80119fa:	f023 0210 	bic.w	r2, r3, #16
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6a1b      	ldr	r3, [r3, #32]
 8011a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	699b      	ldr	r3, [r3, #24]
 8011a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	021b      	lsls	r3, r3, #8
 8011a2a:	68fa      	ldr	r2, [r7, #12]
 8011a2c:	4313      	orrs	r3, r2
 8011a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	f023 0320 	bic.w	r3, r3, #32
 8011a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	689b      	ldr	r3, [r3, #8]
 8011a3c:	011b      	lsls	r3, r3, #4
 8011a3e:	697a      	ldr	r2, [r7, #20]
 8011a40:	4313      	orrs	r3, r2
 8011a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	4a22      	ldr	r2, [pc, #136]	; (8011ad0 <TIM_OC2_SetConfig+0xe4>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d003      	beq.n	8011a54 <TIM_OC2_SetConfig+0x68>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	4a21      	ldr	r2, [pc, #132]	; (8011ad4 <TIM_OC2_SetConfig+0xe8>)
 8011a50:	4293      	cmp	r3, r2
 8011a52:	d10d      	bne.n	8011a70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	68db      	ldr	r3, [r3, #12]
 8011a60:	011b      	lsls	r3, r3, #4
 8011a62:	697a      	ldr	r2, [r7, #20]
 8011a64:	4313      	orrs	r3, r2
 8011a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	4a17      	ldr	r2, [pc, #92]	; (8011ad0 <TIM_OC2_SetConfig+0xe4>)
 8011a74:	4293      	cmp	r3, r2
 8011a76:	d003      	beq.n	8011a80 <TIM_OC2_SetConfig+0x94>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	4a16      	ldr	r2, [pc, #88]	; (8011ad4 <TIM_OC2_SetConfig+0xe8>)
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	d113      	bne.n	8011aa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	695b      	ldr	r3, [r3, #20]
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	693a      	ldr	r2, [r7, #16]
 8011a98:	4313      	orrs	r3, r2
 8011a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	699b      	ldr	r3, [r3, #24]
 8011aa0:	009b      	lsls	r3, r3, #2
 8011aa2:	693a      	ldr	r2, [r7, #16]
 8011aa4:	4313      	orrs	r3, r2
 8011aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	693a      	ldr	r2, [r7, #16]
 8011aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	68fa      	ldr	r2, [r7, #12]
 8011ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	685a      	ldr	r2, [r3, #4]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	697a      	ldr	r2, [r7, #20]
 8011ac0:	621a      	str	r2, [r3, #32]
}
 8011ac2:	bf00      	nop
 8011ac4:	371c      	adds	r7, #28
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011acc:	4770      	bx	lr
 8011ace:	bf00      	nop
 8011ad0:	40010000 	.word	0x40010000
 8011ad4:	40010400 	.word	0x40010400

08011ad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011ad8:	b480      	push	{r7}
 8011ada:	b087      	sub	sp, #28
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6a1b      	ldr	r3, [r3, #32]
 8011ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a1b      	ldr	r3, [r3, #32]
 8011af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	685b      	ldr	r3, [r3, #4]
 8011af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	69db      	ldr	r3, [r3, #28]
 8011afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	f023 0303 	bic.w	r3, r3, #3
 8011b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	68fa      	ldr	r2, [r7, #12]
 8011b16:	4313      	orrs	r3, r2
 8011b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	689b      	ldr	r3, [r3, #8]
 8011b26:	021b      	lsls	r3, r3, #8
 8011b28:	697a      	ldr	r2, [r7, #20]
 8011b2a:	4313      	orrs	r3, r2
 8011b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	4a21      	ldr	r2, [pc, #132]	; (8011bb8 <TIM_OC3_SetConfig+0xe0>)
 8011b32:	4293      	cmp	r3, r2
 8011b34:	d003      	beq.n	8011b3e <TIM_OC3_SetConfig+0x66>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	4a20      	ldr	r2, [pc, #128]	; (8011bbc <TIM_OC3_SetConfig+0xe4>)
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	d10d      	bne.n	8011b5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	68db      	ldr	r3, [r3, #12]
 8011b4a:	021b      	lsls	r3, r3, #8
 8011b4c:	697a      	ldr	r2, [r7, #20]
 8011b4e:	4313      	orrs	r3, r2
 8011b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4a16      	ldr	r2, [pc, #88]	; (8011bb8 <TIM_OC3_SetConfig+0xe0>)
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d003      	beq.n	8011b6a <TIM_OC3_SetConfig+0x92>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	4a15      	ldr	r2, [pc, #84]	; (8011bbc <TIM_OC3_SetConfig+0xe4>)
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d113      	bne.n	8011b92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	695b      	ldr	r3, [r3, #20]
 8011b7e:	011b      	lsls	r3, r3, #4
 8011b80:	693a      	ldr	r2, [r7, #16]
 8011b82:	4313      	orrs	r3, r2
 8011b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	699b      	ldr	r3, [r3, #24]
 8011b8a:	011b      	lsls	r3, r3, #4
 8011b8c:	693a      	ldr	r2, [r7, #16]
 8011b8e:	4313      	orrs	r3, r2
 8011b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	693a      	ldr	r2, [r7, #16]
 8011b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	68fa      	ldr	r2, [r7, #12]
 8011b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	685a      	ldr	r2, [r3, #4]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	697a      	ldr	r2, [r7, #20]
 8011baa:	621a      	str	r2, [r3, #32]
}
 8011bac:	bf00      	nop
 8011bae:	371c      	adds	r7, #28
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr
 8011bb8:	40010000 	.word	0x40010000
 8011bbc:	40010400 	.word	0x40010400

08011bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b087      	sub	sp, #28
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6a1b      	ldr	r3, [r3, #32]
 8011bce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6a1b      	ldr	r3, [r3, #32]
 8011bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	69db      	ldr	r3, [r3, #28]
 8011be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	021b      	lsls	r3, r3, #8
 8011bfe:	68fa      	ldr	r2, [r7, #12]
 8011c00:	4313      	orrs	r3, r2
 8011c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	689b      	ldr	r3, [r3, #8]
 8011c10:	031b      	lsls	r3, r3, #12
 8011c12:	693a      	ldr	r2, [r7, #16]
 8011c14:	4313      	orrs	r3, r2
 8011c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	4a12      	ldr	r2, [pc, #72]	; (8011c64 <TIM_OC4_SetConfig+0xa4>)
 8011c1c:	4293      	cmp	r3, r2
 8011c1e:	d003      	beq.n	8011c28 <TIM_OC4_SetConfig+0x68>
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	4a11      	ldr	r2, [pc, #68]	; (8011c68 <TIM_OC4_SetConfig+0xa8>)
 8011c24:	4293      	cmp	r3, r2
 8011c26:	d109      	bne.n	8011c3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	695b      	ldr	r3, [r3, #20]
 8011c34:	019b      	lsls	r3, r3, #6
 8011c36:	697a      	ldr	r2, [r7, #20]
 8011c38:	4313      	orrs	r3, r2
 8011c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	697a      	ldr	r2, [r7, #20]
 8011c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	68fa      	ldr	r2, [r7, #12]
 8011c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	685a      	ldr	r2, [r3, #4]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	693a      	ldr	r2, [r7, #16]
 8011c54:	621a      	str	r2, [r3, #32]
}
 8011c56:	bf00      	nop
 8011c58:	371c      	adds	r7, #28
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c60:	4770      	bx	lr
 8011c62:	bf00      	nop
 8011c64:	40010000 	.word	0x40010000
 8011c68:	40010400 	.word	0x40010400

08011c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b087      	sub	sp, #28
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	f003 031f 	and.w	r3, r3, #31
 8011c7e:	2201      	movs	r2, #1
 8011c80:	fa02 f303 	lsl.w	r3, r2, r3
 8011c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	6a1a      	ldr	r2, [r3, #32]
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	43db      	mvns	r3, r3
 8011c8e:	401a      	ands	r2, r3
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	6a1a      	ldr	r2, [r3, #32]
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	f003 031f 	and.w	r3, r3, #31
 8011c9e:	6879      	ldr	r1, [r7, #4]
 8011ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8011ca4:	431a      	orrs	r2, r3
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	621a      	str	r2, [r3, #32]
}
 8011caa:	bf00      	nop
 8011cac:	371c      	adds	r7, #28
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb4:	4770      	bx	lr
	...

08011cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b085      	sub	sp, #20
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011cc8:	2b01      	cmp	r3, #1
 8011cca:	d101      	bne.n	8011cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011ccc:	2302      	movs	r3, #2
 8011cce:	e05a      	b.n	8011d86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2201      	movs	r2, #1
 8011cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2202      	movs	r2, #2
 8011cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	689b      	ldr	r3, [r3, #8]
 8011cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	68fa      	ldr	r2, [r7, #12]
 8011cfe:	4313      	orrs	r3, r2
 8011d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	68fa      	ldr	r2, [r7, #12]
 8011d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	4a21      	ldr	r2, [pc, #132]	; (8011d94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011d10:	4293      	cmp	r3, r2
 8011d12:	d022      	beq.n	8011d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d1c:	d01d      	beq.n	8011d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	4a1d      	ldr	r2, [pc, #116]	; (8011d98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011d24:	4293      	cmp	r3, r2
 8011d26:	d018      	beq.n	8011d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4a1b      	ldr	r2, [pc, #108]	; (8011d9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d013      	beq.n	8011d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	4a1a      	ldr	r2, [pc, #104]	; (8011da0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011d38:	4293      	cmp	r3, r2
 8011d3a:	d00e      	beq.n	8011d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	4a18      	ldr	r2, [pc, #96]	; (8011da4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011d42:	4293      	cmp	r3, r2
 8011d44:	d009      	beq.n	8011d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	4a17      	ldr	r2, [pc, #92]	; (8011da8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	d004      	beq.n	8011d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	4a15      	ldr	r2, [pc, #84]	; (8011dac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011d56:	4293      	cmp	r3, r2
 8011d58:	d10c      	bne.n	8011d74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	68ba      	ldr	r2, [r7, #8]
 8011d68:	4313      	orrs	r3, r2
 8011d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	68ba      	ldr	r2, [r7, #8]
 8011d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2201      	movs	r2, #1
 8011d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011d84:	2300      	movs	r3, #0
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3714      	adds	r7, #20
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d90:	4770      	bx	lr
 8011d92:	bf00      	nop
 8011d94:	40010000 	.word	0x40010000
 8011d98:	40000400 	.word	0x40000400
 8011d9c:	40000800 	.word	0x40000800
 8011da0:	40000c00 	.word	0x40000c00
 8011da4:	40010400 	.word	0x40010400
 8011da8:	40014000 	.word	0x40014000
 8011dac:	40001800 	.word	0x40001800

08011db0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011db0:	b480      	push	{r7}
 8011db2:	b085      	sub	sp, #20
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d101      	bne.n	8011dcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011dc8:	2302      	movs	r3, #2
 8011dca:	e03d      	b.n	8011e48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2201      	movs	r2, #1
 8011dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	4313      	orrs	r3, r2
 8011de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	689b      	ldr	r3, [r3, #8]
 8011dec:	4313      	orrs	r3, r2
 8011dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	4313      	orrs	r3, r2
 8011dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	4313      	orrs	r3, r2
 8011e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	691b      	ldr	r3, [r3, #16]
 8011e16:	4313      	orrs	r3, r2
 8011e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	695b      	ldr	r3, [r3, #20]
 8011e24:	4313      	orrs	r3, r2
 8011e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	69db      	ldr	r3, [r3, #28]
 8011e32:	4313      	orrs	r3, r2
 8011e34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	68fa      	ldr	r2, [r7, #12]
 8011e3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2200      	movs	r2, #0
 8011e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011e46:	2300      	movs	r3, #0
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3714      	adds	r7, #20
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e52:	4770      	bx	lr

08011e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011e54:	b480      	push	{r7}
 8011e56:	b083      	sub	sp, #12
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011e5c:	bf00      	nop
 8011e5e:	370c      	adds	r7, #12
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr

08011e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b083      	sub	sp, #12
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011e70:	bf00      	nop
 8011e72:	370c      	adds	r7, #12
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr

08011e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d101      	bne.n	8011e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	e03f      	b.n	8011f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d106      	bne.n	8011ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f7f0 f99a 	bl	80021dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2224      	movs	r2, #36	; 0x24
 8011eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	68da      	ldr	r2, [r3, #12]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f000 fc23 	bl	801270c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	691a      	ldr	r2, [r3, #16]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	695a      	ldr	r2, [r3, #20]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	68da      	ldr	r2, [r3, #12]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2220      	movs	r2, #32
 8011f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2220      	movs	r2, #32
 8011f08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8011f0c:	2300      	movs	r3, #0
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3708      	adds	r7, #8
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
	...

08011f18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b086      	sub	sp, #24
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	60f8      	str	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	4613      	mov	r3, r2
 8011f24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	2b20      	cmp	r3, #32
 8011f30:	d153      	bne.n	8011fda <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d002      	beq.n	8011f3e <HAL_UART_Transmit_DMA+0x26>
 8011f38:	88fb      	ldrh	r3, [r7, #6]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d101      	bne.n	8011f42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8011f3e:	2301      	movs	r3, #1
 8011f40:	e04c      	b.n	8011fdc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011f48:	2b01      	cmp	r3, #1
 8011f4a:	d101      	bne.n	8011f50 <HAL_UART_Transmit_DMA+0x38>
 8011f4c:	2302      	movs	r3, #2
 8011f4e:	e045      	b.n	8011fdc <HAL_UART_Transmit_DMA+0xc4>
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2201      	movs	r2, #1
 8011f54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8011f58:	68ba      	ldr	r2, [r7, #8]
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	88fa      	ldrh	r2, [r7, #6]
 8011f62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	88fa      	ldrh	r2, [r7, #6]
 8011f68:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2221      	movs	r2, #33	; 0x21
 8011f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f7c:	4a19      	ldr	r2, [pc, #100]	; (8011fe4 <HAL_UART_Transmit_DMA+0xcc>)
 8011f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f84:	4a18      	ldr	r2, [pc, #96]	; (8011fe8 <HAL_UART_Transmit_DMA+0xd0>)
 8011f86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f8c:	4a17      	ldr	r2, [pc, #92]	; (8011fec <HAL_UART_Transmit_DMA+0xd4>)
 8011f8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f94:	2200      	movs	r2, #0
 8011f96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8011f98:	f107 0308 	add.w	r3, r7, #8
 8011f9c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	6819      	ldr	r1, [r3, #0]
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	3304      	adds	r3, #4
 8011fac:	461a      	mov	r2, r3
 8011fae:	88fb      	ldrh	r3, [r7, #6]
 8011fb0:	f7fd fa96 	bl	800f4e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011fbc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	695a      	ldr	r2, [r3, #20]
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011fd4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	e000      	b.n	8011fdc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8011fda:	2302      	movs	r3, #2
  }
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3718      	adds	r7, #24
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	08012319 	.word	0x08012319
 8011fe8:	0801236b 	.word	0x0801236b
 8011fec:	0801240b 	.word	0x0801240b

08011ff0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b086      	sub	sp, #24
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	4613      	mov	r3, r2
 8011ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012004:	b2db      	uxtb	r3, r3
 8012006:	2b20      	cmp	r3, #32
 8012008:	d166      	bne.n	80120d8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d002      	beq.n	8012016 <HAL_UART_Receive_DMA+0x26>
 8012010:	88fb      	ldrh	r3, [r7, #6]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8012016:	2301      	movs	r3, #1
 8012018:	e05f      	b.n	80120da <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012020:	2b01      	cmp	r3, #1
 8012022:	d101      	bne.n	8012028 <HAL_UART_Receive_DMA+0x38>
 8012024:	2302      	movs	r3, #2
 8012026:	e058      	b.n	80120da <HAL_UART_Receive_DMA+0xea>
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	2201      	movs	r2, #1
 801202c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8012030:	68ba      	ldr	r2, [r7, #8]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	88fa      	ldrh	r2, [r7, #6]
 801203a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	2200      	movs	r2, #0
 8012040:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	2222      	movs	r2, #34	; 0x22
 8012046:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801204e:	4a25      	ldr	r2, [pc, #148]	; (80120e4 <HAL_UART_Receive_DMA+0xf4>)
 8012050:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012056:	4a24      	ldr	r2, [pc, #144]	; (80120e8 <HAL_UART_Receive_DMA+0xf8>)
 8012058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801205e:	4a23      	ldr	r2, [pc, #140]	; (80120ec <HAL_UART_Receive_DMA+0xfc>)
 8012060:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012066:	2200      	movs	r2, #0
 8012068:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 801206a:	f107 0308 	add.w	r3, r7, #8
 801206e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	3304      	adds	r3, #4
 801207a:	4619      	mov	r1, r3
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	88fb      	ldrh	r3, [r7, #6]
 8012082:	f7fd fa2d 	bl	800f4e0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8012086:	2300      	movs	r3, #0
 8012088:	613b      	str	r3, [r7, #16]
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	613b      	str	r3, [r7, #16]
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	613b      	str	r3, [r7, #16]
 801209a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2200      	movs	r2, #0
 80120a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	68da      	ldr	r2, [r3, #12]
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80120b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	695a      	ldr	r2, [r3, #20]
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f042 0201 	orr.w	r2, r2, #1
 80120c2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	695a      	ldr	r2, [r3, #20]
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80120d2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80120d4:	2300      	movs	r3, #0
 80120d6:	e000      	b.n	80120da <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80120d8:	2302      	movs	r3, #2
  }
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3718      	adds	r7, #24
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
 80120e2:	bf00      	nop
 80120e4:	08012387 	.word	0x08012387
 80120e8:	080123ef 	.word	0x080123ef
 80120ec:	0801240b 	.word	0x0801240b

080120f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b088      	sub	sp, #32
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	68db      	ldr	r3, [r3, #12]
 8012106:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	695b      	ldr	r3, [r3, #20]
 801210e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8012110:	2300      	movs	r3, #0
 8012112:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8012114:	2300      	movs	r3, #0
 8012116:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	f003 030f 	and.w	r3, r3, #15
 801211e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d10d      	bne.n	8012142 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012126:	69fb      	ldr	r3, [r7, #28]
 8012128:	f003 0320 	and.w	r3, r3, #32
 801212c:	2b00      	cmp	r3, #0
 801212e:	d008      	beq.n	8012142 <HAL_UART_IRQHandler+0x52>
 8012130:	69bb      	ldr	r3, [r7, #24]
 8012132:	f003 0320 	and.w	r3, r3, #32
 8012136:	2b00      	cmp	r3, #0
 8012138:	d003      	beq.n	8012142 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f000 fa65 	bl	801260a <UART_Receive_IT>
      return;
 8012140:	e0d0      	b.n	80122e4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	2b00      	cmp	r3, #0
 8012146:	f000 80b0 	beq.w	80122aa <HAL_UART_IRQHandler+0x1ba>
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	f003 0301 	and.w	r3, r3, #1
 8012150:	2b00      	cmp	r3, #0
 8012152:	d105      	bne.n	8012160 <HAL_UART_IRQHandler+0x70>
 8012154:	69bb      	ldr	r3, [r7, #24]
 8012156:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801215a:	2b00      	cmp	r3, #0
 801215c:	f000 80a5 	beq.w	80122aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012160:	69fb      	ldr	r3, [r7, #28]
 8012162:	f003 0301 	and.w	r3, r3, #1
 8012166:	2b00      	cmp	r3, #0
 8012168:	d00a      	beq.n	8012180 <HAL_UART_IRQHandler+0x90>
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012170:	2b00      	cmp	r3, #0
 8012172:	d005      	beq.n	8012180 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012178:	f043 0201 	orr.w	r2, r3, #1
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	f003 0304 	and.w	r3, r3, #4
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00a      	beq.n	80121a0 <HAL_UART_IRQHandler+0xb0>
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	f003 0301 	and.w	r3, r3, #1
 8012190:	2b00      	cmp	r3, #0
 8012192:	d005      	beq.n	80121a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012198:	f043 0202 	orr.w	r2, r3, #2
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80121a0:	69fb      	ldr	r3, [r7, #28]
 80121a2:	f003 0302 	and.w	r3, r3, #2
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d00a      	beq.n	80121c0 <HAL_UART_IRQHandler+0xd0>
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	f003 0301 	and.w	r3, r3, #1
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d005      	beq.n	80121c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121b8:	f043 0204 	orr.w	r2, r3, #4
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80121c0:	69fb      	ldr	r3, [r7, #28]
 80121c2:	f003 0308 	and.w	r3, r3, #8
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d00f      	beq.n	80121ea <HAL_UART_IRQHandler+0xfa>
 80121ca:	69bb      	ldr	r3, [r7, #24]
 80121cc:	f003 0320 	and.w	r3, r3, #32
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d104      	bne.n	80121de <HAL_UART_IRQHandler+0xee>
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	f003 0301 	and.w	r3, r3, #1
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d005      	beq.n	80121ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121e2:	f043 0208 	orr.w	r2, r3, #8
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d077      	beq.n	80122e2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80121f2:	69fb      	ldr	r3, [r7, #28]
 80121f4:	f003 0320 	and.w	r3, r3, #32
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d007      	beq.n	801220c <HAL_UART_IRQHandler+0x11c>
 80121fc:	69bb      	ldr	r3, [r7, #24]
 80121fe:	f003 0320 	and.w	r3, r3, #32
 8012202:	2b00      	cmp	r3, #0
 8012204:	d002      	beq.n	801220c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f000 f9ff 	bl	801260a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	695b      	ldr	r3, [r3, #20]
 8012212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012216:	2b40      	cmp	r3, #64	; 0x40
 8012218:	bf0c      	ite	eq
 801221a:	2301      	moveq	r3, #1
 801221c:	2300      	movne	r3, #0
 801221e:	b2db      	uxtb	r3, r3
 8012220:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012226:	f003 0308 	and.w	r3, r3, #8
 801222a:	2b00      	cmp	r3, #0
 801222c:	d102      	bne.n	8012234 <HAL_UART_IRQHandler+0x144>
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d031      	beq.n	8012298 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f000 f948 	bl	80124ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	695b      	ldr	r3, [r3, #20]
 8012240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012244:	2b40      	cmp	r3, #64	; 0x40
 8012246:	d123      	bne.n	8012290 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	695a      	ldr	r2, [r3, #20]
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012256:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801225c:	2b00      	cmp	r3, #0
 801225e:	d013      	beq.n	8012288 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012264:	4a21      	ldr	r2, [pc, #132]	; (80122ec <HAL_UART_IRQHandler+0x1fc>)
 8012266:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801226c:	4618      	mov	r0, r3
 801226e:	f7fd f98f 	bl	800f590 <HAL_DMA_Abort_IT>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d016      	beq.n	80122a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801227c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012282:	4610      	mov	r0, r2
 8012284:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012286:	e00e      	b.n	80122a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f7fb fe37 	bl	800defc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801228e:	e00a      	b.n	80122a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7fb fe33 	bl	800defc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012296:	e006      	b.n	80122a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f7fb fe2f 	bl	800defc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2200      	movs	r2, #0
 80122a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80122a4:	e01d      	b.n	80122e2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80122a6:	bf00      	nop
    return;
 80122a8:	e01b      	b.n	80122e2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d008      	beq.n	80122c6 <HAL_UART_IRQHandler+0x1d6>
 80122b4:	69bb      	ldr	r3, [r7, #24]
 80122b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d003      	beq.n	80122c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 f935 	bl	801252e <UART_Transmit_IT>
    return;
 80122c4:	e00e      	b.n	80122e4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d009      	beq.n	80122e4 <HAL_UART_IRQHandler+0x1f4>
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d004      	beq.n	80122e4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f000 f97d 	bl	80125da <UART_EndTransmit_IT>
    return;
 80122e0:	e000      	b.n	80122e4 <HAL_UART_IRQHandler+0x1f4>
    return;
 80122e2:	bf00      	nop
  }
}
 80122e4:	3720      	adds	r7, #32
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop
 80122ec:	08012507 	.word	0x08012507

080122f0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80122f0:	b480      	push	{r7}
 80122f2:	b083      	sub	sp, #12
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80122f8:	bf00      	nop
 80122fa:	370c      	adds	r7, #12
 80122fc:	46bd      	mov	sp, r7
 80122fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012302:	4770      	bx	lr

08012304 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012304:	b480      	push	{r7}
 8012306:	b083      	sub	sp, #12
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801230c:	bf00      	nop
 801230e:	370c      	adds	r7, #12
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr

08012318 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012324:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012330:	2b00      	cmp	r3, #0
 8012332:	d113      	bne.n	801235c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2200      	movs	r2, #0
 8012338:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	695a      	ldr	r2, [r3, #20]
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012348:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	68da      	ldr	r2, [r3, #12]
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012358:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801235a:	e002      	b.n	8012362 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 801235c:	68f8      	ldr	r0, [r7, #12]
 801235e:	f7fb fd73 	bl	800de48 <HAL_UART_TxCpltCallback>
}
 8012362:	bf00      	nop
 8012364:	3710      	adds	r7, #16
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}

0801236a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801236a:	b580      	push	{r7, lr}
 801236c:	b084      	sub	sp, #16
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012376:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012378:	68f8      	ldr	r0, [r7, #12]
 801237a:	f7ff ffb9 	bl	80122f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801237e:	bf00      	nop
 8012380:	3710      	adds	r7, #16
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}

08012386 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012386:	b580      	push	{r7, lr}
 8012388:	b084      	sub	sp, #16
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012392:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d11e      	bne.n	80123e0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2200      	movs	r2, #0
 80123a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	68da      	ldr	r2, [r3, #12]
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80123b6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	695a      	ldr	r2, [r3, #20]
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	f022 0201 	bic.w	r2, r2, #1
 80123c6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	695a      	ldr	r2, [r3, #20]
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80123d6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	2220      	movs	r2, #32
 80123dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80123e0:	68f8      	ldr	r0, [r7, #12]
 80123e2:	f7fb fd81 	bl	800dee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80123e6:	bf00      	nop
 80123e8:	3710      	adds	r7, #16
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}

080123ee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80123ee:	b580      	push	{r7, lr}
 80123f0:	b084      	sub	sp, #16
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80123fc:	68f8      	ldr	r0, [r7, #12]
 80123fe:	f7ff ff81 	bl	8012304 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012402:	bf00      	nop
 8012404:	3710      	adds	r7, #16
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}

0801240a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801240a:	b580      	push	{r7, lr}
 801240c:	b084      	sub	sp, #16
 801240e:	af00      	add	r7, sp, #0
 8012410:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8012412:	2300      	movs	r3, #0
 8012414:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801241a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	695b      	ldr	r3, [r3, #20]
 8012422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012426:	2b80      	cmp	r3, #128	; 0x80
 8012428:	bf0c      	ite	eq
 801242a:	2301      	moveq	r3, #1
 801242c:	2300      	movne	r3, #0
 801242e:	b2db      	uxtb	r3, r3
 8012430:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012438:	b2db      	uxtb	r3, r3
 801243a:	2b21      	cmp	r3, #33	; 0x21
 801243c:	d108      	bne.n	8012450 <UART_DMAError+0x46>
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d005      	beq.n	8012450 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	2200      	movs	r2, #0
 8012448:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801244a:	68b8      	ldr	r0, [r7, #8]
 801244c:	f000 f827 	bl	801249e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	695b      	ldr	r3, [r3, #20]
 8012456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801245a:	2b40      	cmp	r3, #64	; 0x40
 801245c:	bf0c      	ite	eq
 801245e:	2301      	moveq	r3, #1
 8012460:	2300      	movne	r3, #0
 8012462:	b2db      	uxtb	r3, r3
 8012464:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801246c:	b2db      	uxtb	r3, r3
 801246e:	2b22      	cmp	r3, #34	; 0x22
 8012470:	d108      	bne.n	8012484 <UART_DMAError+0x7a>
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d005      	beq.n	8012484 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	2200      	movs	r2, #0
 801247c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801247e:	68b8      	ldr	r0, [r7, #8]
 8012480:	f000 f823 	bl	80124ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012488:	f043 0210 	orr.w	r2, r3, #16
 801248c:	68bb      	ldr	r3, [r7, #8]
 801248e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012490:	68b8      	ldr	r0, [r7, #8]
 8012492:	f7fb fd33 	bl	800defc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012496:	bf00      	nop
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801249e:	b480      	push	{r7}
 80124a0:	b083      	sub	sp, #12
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	68da      	ldr	r2, [r3, #12]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80124b4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2220      	movs	r2, #32
 80124ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80124be:	bf00      	nop
 80124c0:	370c      	adds	r7, #12
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr

080124ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80124ca:	b480      	push	{r7}
 80124cc:	b083      	sub	sp, #12
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	68da      	ldr	r2, [r3, #12]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80124e0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	695a      	ldr	r2, [r3, #20]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f022 0201 	bic.w	r2, r2, #1
 80124f0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2220      	movs	r2, #32
 80124f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80124fa:	bf00      	nop
 80124fc:	370c      	adds	r7, #12
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr

08012506 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012506:	b580      	push	{r7, lr}
 8012508:	b084      	sub	sp, #16
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012512:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2200      	movs	r2, #0
 8012518:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	2200      	movs	r2, #0
 801251e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012520:	68f8      	ldr	r0, [r7, #12]
 8012522:	f7fb fceb 	bl	800defc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012526:	bf00      	nop
 8012528:	3710      	adds	r7, #16
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}

0801252e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801252e:	b480      	push	{r7}
 8012530:	b085      	sub	sp, #20
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801253c:	b2db      	uxtb	r3, r3
 801253e:	2b21      	cmp	r3, #33	; 0x21
 8012540:	d144      	bne.n	80125cc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	689b      	ldr	r3, [r3, #8]
 8012546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801254a:	d11a      	bne.n	8012582 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	6a1b      	ldr	r3, [r3, #32]
 8012550:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	881b      	ldrh	r3, [r3, #0]
 8012556:	461a      	mov	r2, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012560:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	691b      	ldr	r3, [r3, #16]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d105      	bne.n	8012576 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6a1b      	ldr	r3, [r3, #32]
 801256e:	1c9a      	adds	r2, r3, #2
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	621a      	str	r2, [r3, #32]
 8012574:	e00e      	b.n	8012594 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6a1b      	ldr	r3, [r3, #32]
 801257a:	1c5a      	adds	r2, r3, #1
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	621a      	str	r2, [r3, #32]
 8012580:	e008      	b.n	8012594 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6a1b      	ldr	r3, [r3, #32]
 8012586:	1c59      	adds	r1, r3, #1
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	6211      	str	r1, [r2, #32]
 801258c:	781a      	ldrb	r2, [r3, #0]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012598:	b29b      	uxth	r3, r3
 801259a:	3b01      	subs	r3, #1
 801259c:	b29b      	uxth	r3, r3
 801259e:	687a      	ldr	r2, [r7, #4]
 80125a0:	4619      	mov	r1, r3
 80125a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d10f      	bne.n	80125c8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	68da      	ldr	r2, [r3, #12]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80125b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	68da      	ldr	r2, [r3, #12]
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80125c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80125c8:	2300      	movs	r3, #0
 80125ca:	e000      	b.n	80125ce <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80125cc:	2302      	movs	r3, #2
  }
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3714      	adds	r7, #20
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr

080125da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80125da:	b580      	push	{r7, lr}
 80125dc:	b082      	sub	sp, #8
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	68da      	ldr	r2, [r3, #12]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80125f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2220      	movs	r2, #32
 80125f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7fb fc24 	bl	800de48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8012600:	2300      	movs	r3, #0
}
 8012602:	4618      	mov	r0, r3
 8012604:	3708      	adds	r7, #8
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}

0801260a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801260a:	b580      	push	{r7, lr}
 801260c:	b084      	sub	sp, #16
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012618:	b2db      	uxtb	r3, r3
 801261a:	2b22      	cmp	r3, #34	; 0x22
 801261c:	d171      	bne.n	8012702 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	689b      	ldr	r3, [r3, #8]
 8012622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012626:	d123      	bne.n	8012670 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801262c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	691b      	ldr	r3, [r3, #16]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d10e      	bne.n	8012654 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	685b      	ldr	r3, [r3, #4]
 801263c:	b29b      	uxth	r3, r3
 801263e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012642:	b29a      	uxth	r2, r3
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801264c:	1c9a      	adds	r2, r3, #2
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	629a      	str	r2, [r3, #40]	; 0x28
 8012652:	e029      	b.n	80126a8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	b29b      	uxth	r3, r3
 801265c:	b2db      	uxtb	r3, r3
 801265e:	b29a      	uxth	r2, r3
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012668:	1c5a      	adds	r2, r3, #1
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	629a      	str	r2, [r3, #40]	; 0x28
 801266e:	e01b      	b.n	80126a8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	691b      	ldr	r3, [r3, #16]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d10a      	bne.n	801268e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	6858      	ldr	r0, [r3, #4]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012682:	1c59      	adds	r1, r3, #1
 8012684:	687a      	ldr	r2, [r7, #4]
 8012686:	6291      	str	r1, [r2, #40]	; 0x28
 8012688:	b2c2      	uxtb	r2, r0
 801268a:	701a      	strb	r2, [r3, #0]
 801268c:	e00c      	b.n	80126a8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	685b      	ldr	r3, [r3, #4]
 8012694:	b2da      	uxtb	r2, r3
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801269a:	1c58      	adds	r0, r3, #1
 801269c:	6879      	ldr	r1, [r7, #4]
 801269e:	6288      	str	r0, [r1, #40]	; 0x28
 80126a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80126a4:	b2d2      	uxtb	r2, r2
 80126a6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	3b01      	subs	r3, #1
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	687a      	ldr	r2, [r7, #4]
 80126b4:	4619      	mov	r1, r3
 80126b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d120      	bne.n	80126fe <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	68da      	ldr	r2, [r3, #12]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	f022 0220 	bic.w	r2, r2, #32
 80126ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	68da      	ldr	r2, [r3, #12]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80126da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	695a      	ldr	r2, [r3, #20]
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	f022 0201 	bic.w	r2, r2, #1
 80126ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2220      	movs	r2, #32
 80126f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7fb fbf7 	bl	800dee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80126fa:	2300      	movs	r3, #0
 80126fc:	e002      	b.n	8012704 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80126fe:	2300      	movs	r3, #0
 8012700:	e000      	b.n	8012704 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8012702:	2302      	movs	r3, #2
  }
}
 8012704:	4618      	mov	r0, r3
 8012706:	3710      	adds	r7, #16
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801270c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012710:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8012714:	af00      	add	r7, sp, #0
 8012716:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801271a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	691b      	ldr	r3, [r3, #16]
 8012722:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012726:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801272a:	68d9      	ldr	r1, [r3, #12]
 801272c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012730:	681a      	ldr	r2, [r3, #0]
 8012732:	ea40 0301 	orr.w	r3, r0, r1
 8012736:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012738:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801273c:	689a      	ldr	r2, [r3, #8]
 801273e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012742:	691b      	ldr	r3, [r3, #16]
 8012744:	431a      	orrs	r2, r3
 8012746:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801274a:	695b      	ldr	r3, [r3, #20]
 801274c:	431a      	orrs	r2, r3
 801274e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012752:	69db      	ldr	r3, [r3, #28]
 8012754:	4313      	orrs	r3, r2
 8012756:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 801275a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	68db      	ldr	r3, [r3, #12]
 8012762:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012766:	f021 010c 	bic.w	r1, r1, #12
 801276a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801276e:	681a      	ldr	r2, [r3, #0]
 8012770:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8012774:	430b      	orrs	r3, r1
 8012776:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012778:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	695b      	ldr	r3, [r3, #20]
 8012780:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012784:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012788:	6999      	ldr	r1, [r3, #24]
 801278a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801278e:	681a      	ldr	r2, [r3, #0]
 8012790:	ea40 0301 	orr.w	r3, r0, r1
 8012794:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012796:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801279a:	69db      	ldr	r3, [r3, #28]
 801279c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80127a0:	f040 824a 	bne.w	8012c38 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80127a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80127a8:	681a      	ldr	r2, [r3, #0]
 80127aa:	4b96      	ldr	r3, [pc, #600]	; (8012a04 <UART_SetConfig+0x2f8>)
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d006      	beq.n	80127be <UART_SetConfig+0xb2>
 80127b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80127b4:	681a      	ldr	r2, [r3, #0]
 80127b6:	4b94      	ldr	r3, [pc, #592]	; (8012a08 <UART_SetConfig+0x2fc>)
 80127b8:	429a      	cmp	r2, r3
 80127ba:	f040 8129 	bne.w	8012a10 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80127be:	f7fe f8b5 	bl	801092c <HAL_RCC_GetPCLK2Freq>
 80127c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80127c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80127ca:	2200      	movs	r2, #0
 80127cc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80127d0:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80127d4:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80127d8:	4622      	mov	r2, r4
 80127da:	462b      	mov	r3, r5
 80127dc:	1891      	adds	r1, r2, r2
 80127de:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80127e2:	415b      	adcs	r3, r3
 80127e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80127e8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80127ec:	4621      	mov	r1, r4
 80127ee:	1851      	adds	r1, r2, r1
 80127f0:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80127f4:	4629      	mov	r1, r5
 80127f6:	414b      	adcs	r3, r1
 80127f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80127fc:	f04f 0200 	mov.w	r2, #0
 8012800:	f04f 0300 	mov.w	r3, #0
 8012804:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8012808:	4649      	mov	r1, r9
 801280a:	00cb      	lsls	r3, r1, #3
 801280c:	4641      	mov	r1, r8
 801280e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012812:	4641      	mov	r1, r8
 8012814:	00ca      	lsls	r2, r1, #3
 8012816:	4610      	mov	r0, r2
 8012818:	4619      	mov	r1, r3
 801281a:	4603      	mov	r3, r0
 801281c:	4622      	mov	r2, r4
 801281e:	189b      	adds	r3, r3, r2
 8012820:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8012824:	462b      	mov	r3, r5
 8012826:	460a      	mov	r2, r1
 8012828:	eb42 0303 	adc.w	r3, r2, r3
 801282c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8012830:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	2200      	movs	r2, #0
 8012838:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 801283c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8012840:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8012844:	460b      	mov	r3, r1
 8012846:	18db      	adds	r3, r3, r3
 8012848:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801284c:	4613      	mov	r3, r2
 801284e:	eb42 0303 	adc.w	r3, r2, r3
 8012852:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012856:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801285a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 801285e:	f7ee f905 	bl	8000a6c <__aeabi_uldivmod>
 8012862:	4602      	mov	r2, r0
 8012864:	460b      	mov	r3, r1
 8012866:	4b69      	ldr	r3, [pc, #420]	; (8012a0c <UART_SetConfig+0x300>)
 8012868:	fba3 2302 	umull	r2, r3, r3, r2
 801286c:	095b      	lsrs	r3, r3, #5
 801286e:	011c      	lsls	r4, r3, #4
 8012870:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012874:	2200      	movs	r2, #0
 8012876:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 801287a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 801287e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8012882:	4642      	mov	r2, r8
 8012884:	464b      	mov	r3, r9
 8012886:	1891      	adds	r1, r2, r2
 8012888:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801288c:	415b      	adcs	r3, r3
 801288e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012892:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8012896:	4641      	mov	r1, r8
 8012898:	1851      	adds	r1, r2, r1
 801289a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801289e:	4649      	mov	r1, r9
 80128a0:	414b      	adcs	r3, r1
 80128a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80128a6:	f04f 0200 	mov.w	r2, #0
 80128aa:	f04f 0300 	mov.w	r3, #0
 80128ae:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80128b2:	4659      	mov	r1, fp
 80128b4:	00cb      	lsls	r3, r1, #3
 80128b6:	4651      	mov	r1, sl
 80128b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80128bc:	4651      	mov	r1, sl
 80128be:	00ca      	lsls	r2, r1, #3
 80128c0:	4610      	mov	r0, r2
 80128c2:	4619      	mov	r1, r3
 80128c4:	4603      	mov	r3, r0
 80128c6:	4642      	mov	r2, r8
 80128c8:	189b      	adds	r3, r3, r2
 80128ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80128ce:	464b      	mov	r3, r9
 80128d0:	460a      	mov	r2, r1
 80128d2:	eb42 0303 	adc.w	r3, r2, r3
 80128d6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80128da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	2200      	movs	r2, #0
 80128e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80128e6:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80128ea:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80128ee:	460b      	mov	r3, r1
 80128f0:	18db      	adds	r3, r3, r3
 80128f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80128f6:	4613      	mov	r3, r2
 80128f8:	eb42 0303 	adc.w	r3, r2, r3
 80128fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012900:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8012904:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8012908:	f7ee f8b0 	bl	8000a6c <__aeabi_uldivmod>
 801290c:	4602      	mov	r2, r0
 801290e:	460b      	mov	r3, r1
 8012910:	4611      	mov	r1, r2
 8012912:	4b3e      	ldr	r3, [pc, #248]	; (8012a0c <UART_SetConfig+0x300>)
 8012914:	fba3 2301 	umull	r2, r3, r3, r1
 8012918:	095b      	lsrs	r3, r3, #5
 801291a:	2264      	movs	r2, #100	; 0x64
 801291c:	fb02 f303 	mul.w	r3, r2, r3
 8012920:	1acb      	subs	r3, r1, r3
 8012922:	00db      	lsls	r3, r3, #3
 8012924:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8012928:	4b38      	ldr	r3, [pc, #224]	; (8012a0c <UART_SetConfig+0x300>)
 801292a:	fba3 2302 	umull	r2, r3, r3, r2
 801292e:	095b      	lsrs	r3, r3, #5
 8012930:	005b      	lsls	r3, r3, #1
 8012932:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012936:	441c      	add	r4, r3
 8012938:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801293c:	2200      	movs	r2, #0
 801293e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8012942:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8012946:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 801294a:	4642      	mov	r2, r8
 801294c:	464b      	mov	r3, r9
 801294e:	1891      	adds	r1, r2, r2
 8012950:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8012954:	415b      	adcs	r3, r3
 8012956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801295a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 801295e:	4641      	mov	r1, r8
 8012960:	1851      	adds	r1, r2, r1
 8012962:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8012966:	4649      	mov	r1, r9
 8012968:	414b      	adcs	r3, r1
 801296a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801296e:	f04f 0200 	mov.w	r2, #0
 8012972:	f04f 0300 	mov.w	r3, #0
 8012976:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 801297a:	4659      	mov	r1, fp
 801297c:	00cb      	lsls	r3, r1, #3
 801297e:	4651      	mov	r1, sl
 8012980:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012984:	4651      	mov	r1, sl
 8012986:	00ca      	lsls	r2, r1, #3
 8012988:	4610      	mov	r0, r2
 801298a:	4619      	mov	r1, r3
 801298c:	4603      	mov	r3, r0
 801298e:	4642      	mov	r2, r8
 8012990:	189b      	adds	r3, r3, r2
 8012992:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8012996:	464b      	mov	r3, r9
 8012998:	460a      	mov	r2, r1
 801299a:	eb42 0303 	adc.w	r3, r2, r3
 801299e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80129a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	2200      	movs	r2, #0
 80129aa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80129ae:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80129b2:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80129b6:	460b      	mov	r3, r1
 80129b8:	18db      	adds	r3, r3, r3
 80129ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80129be:	4613      	mov	r3, r2
 80129c0:	eb42 0303 	adc.w	r3, r2, r3
 80129c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80129c8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80129cc:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80129d0:	f7ee f84c 	bl	8000a6c <__aeabi_uldivmod>
 80129d4:	4602      	mov	r2, r0
 80129d6:	460b      	mov	r3, r1
 80129d8:	4b0c      	ldr	r3, [pc, #48]	; (8012a0c <UART_SetConfig+0x300>)
 80129da:	fba3 1302 	umull	r1, r3, r3, r2
 80129de:	095b      	lsrs	r3, r3, #5
 80129e0:	2164      	movs	r1, #100	; 0x64
 80129e2:	fb01 f303 	mul.w	r3, r1, r3
 80129e6:	1ad3      	subs	r3, r2, r3
 80129e8:	00db      	lsls	r3, r3, #3
 80129ea:	3332      	adds	r3, #50	; 0x32
 80129ec:	4a07      	ldr	r2, [pc, #28]	; (8012a0c <UART_SetConfig+0x300>)
 80129ee:	fba2 2303 	umull	r2, r3, r2, r3
 80129f2:	095b      	lsrs	r3, r3, #5
 80129f4:	f003 0207 	and.w	r2, r3, #7
 80129f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	4422      	add	r2, r4
 8012a00:	609a      	str	r2, [r3, #8]
 8012a02:	e349      	b.n	8013098 <UART_SetConfig+0x98c>
 8012a04:	40011000 	.word	0x40011000
 8012a08:	40011400 	.word	0x40011400
 8012a0c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012a10:	f7fd ff78 	bl	8010904 <HAL_RCC_GetPCLK1Freq>
 8012a14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012a18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8012a22:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8012a26:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8012a2a:	4622      	mov	r2, r4
 8012a2c:	462b      	mov	r3, r5
 8012a2e:	1891      	adds	r1, r2, r2
 8012a30:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8012a34:	415b      	adcs	r3, r3
 8012a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012a3a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8012a3e:	4621      	mov	r1, r4
 8012a40:	eb12 0a01 	adds.w	sl, r2, r1
 8012a44:	4629      	mov	r1, r5
 8012a46:	eb43 0b01 	adc.w	fp, r3, r1
 8012a4a:	f04f 0200 	mov.w	r2, #0
 8012a4e:	f04f 0300 	mov.w	r3, #0
 8012a52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012a56:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012a5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012a5e:	4692      	mov	sl, r2
 8012a60:	469b      	mov	fp, r3
 8012a62:	4623      	mov	r3, r4
 8012a64:	eb1a 0303 	adds.w	r3, sl, r3
 8012a68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8012a6c:	462b      	mov	r3, r5
 8012a6e:	eb4b 0303 	adc.w	r3, fp, r3
 8012a72:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8012a76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a7a:	685b      	ldr	r3, [r3, #4]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8012a82:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8012a86:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8012a8a:	460b      	mov	r3, r1
 8012a8c:	18db      	adds	r3, r3, r3
 8012a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012a92:	4613      	mov	r3, r2
 8012a94:	eb42 0303 	adc.w	r3, r2, r3
 8012a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012a9c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8012aa0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8012aa4:	f7ed ffe2 	bl	8000a6c <__aeabi_uldivmod>
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	460b      	mov	r3, r1
 8012aac:	4b61      	ldr	r3, [pc, #388]	; (8012c34 <UART_SetConfig+0x528>)
 8012aae:	fba3 2302 	umull	r2, r3, r3, r2
 8012ab2:	095b      	lsrs	r3, r3, #5
 8012ab4:	011c      	lsls	r4, r3, #4
 8012ab6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012aba:	2200      	movs	r2, #0
 8012abc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8012ac0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8012ac4:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8012ac8:	4642      	mov	r2, r8
 8012aca:	464b      	mov	r3, r9
 8012acc:	1891      	adds	r1, r2, r2
 8012ace:	67b9      	str	r1, [r7, #120]	; 0x78
 8012ad0:	415b      	adcs	r3, r3
 8012ad2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012ad4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8012ad8:	4641      	mov	r1, r8
 8012ada:	1851      	adds	r1, r2, r1
 8012adc:	6739      	str	r1, [r7, #112]	; 0x70
 8012ade:	4649      	mov	r1, r9
 8012ae0:	414b      	adcs	r3, r1
 8012ae2:	677b      	str	r3, [r7, #116]	; 0x74
 8012ae4:	f04f 0200 	mov.w	r2, #0
 8012ae8:	f04f 0300 	mov.w	r3, #0
 8012aec:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8012af0:	4659      	mov	r1, fp
 8012af2:	00cb      	lsls	r3, r1, #3
 8012af4:	4651      	mov	r1, sl
 8012af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012afa:	4651      	mov	r1, sl
 8012afc:	00ca      	lsls	r2, r1, #3
 8012afe:	4610      	mov	r0, r2
 8012b00:	4619      	mov	r1, r3
 8012b02:	4603      	mov	r3, r0
 8012b04:	4642      	mov	r2, r8
 8012b06:	189b      	adds	r3, r3, r2
 8012b08:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8012b0c:	464b      	mov	r3, r9
 8012b0e:	460a      	mov	r2, r1
 8012b10:	eb42 0303 	adc.w	r3, r2, r3
 8012b14:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8012b18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8012b24:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8012b28:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	18db      	adds	r3, r3, r3
 8012b30:	66bb      	str	r3, [r7, #104]	; 0x68
 8012b32:	4613      	mov	r3, r2
 8012b34:	eb42 0303 	adc.w	r3, r2, r3
 8012b38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012b3a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8012b3e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8012b42:	f7ed ff93 	bl	8000a6c <__aeabi_uldivmod>
 8012b46:	4602      	mov	r2, r0
 8012b48:	460b      	mov	r3, r1
 8012b4a:	4611      	mov	r1, r2
 8012b4c:	4b39      	ldr	r3, [pc, #228]	; (8012c34 <UART_SetConfig+0x528>)
 8012b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8012b52:	095b      	lsrs	r3, r3, #5
 8012b54:	2264      	movs	r2, #100	; 0x64
 8012b56:	fb02 f303 	mul.w	r3, r2, r3
 8012b5a:	1acb      	subs	r3, r1, r3
 8012b5c:	00db      	lsls	r3, r3, #3
 8012b5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8012b62:	4b34      	ldr	r3, [pc, #208]	; (8012c34 <UART_SetConfig+0x528>)
 8012b64:	fba3 2302 	umull	r2, r3, r3, r2
 8012b68:	095b      	lsrs	r3, r3, #5
 8012b6a:	005b      	lsls	r3, r3, #1
 8012b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012b70:	441c      	add	r4, r3
 8012b72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012b76:	2200      	movs	r2, #0
 8012b78:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8012b7c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8012b80:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8012b84:	4642      	mov	r2, r8
 8012b86:	464b      	mov	r3, r9
 8012b88:	1891      	adds	r1, r2, r2
 8012b8a:	6639      	str	r1, [r7, #96]	; 0x60
 8012b8c:	415b      	adcs	r3, r3
 8012b8e:	667b      	str	r3, [r7, #100]	; 0x64
 8012b90:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012b94:	4641      	mov	r1, r8
 8012b96:	1851      	adds	r1, r2, r1
 8012b98:	65b9      	str	r1, [r7, #88]	; 0x58
 8012b9a:	4649      	mov	r1, r9
 8012b9c:	414b      	adcs	r3, r1
 8012b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012ba0:	f04f 0200 	mov.w	r2, #0
 8012ba4:	f04f 0300 	mov.w	r3, #0
 8012ba8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8012bac:	4659      	mov	r1, fp
 8012bae:	00cb      	lsls	r3, r1, #3
 8012bb0:	4651      	mov	r1, sl
 8012bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012bb6:	4651      	mov	r1, sl
 8012bb8:	00ca      	lsls	r2, r1, #3
 8012bba:	4610      	mov	r0, r2
 8012bbc:	4619      	mov	r1, r3
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	4642      	mov	r2, r8
 8012bc2:	189b      	adds	r3, r3, r2
 8012bc4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8012bc8:	464b      	mov	r3, r9
 8012bca:	460a      	mov	r2, r1
 8012bcc:	eb42 0303 	adc.w	r3, r2, r3
 8012bd0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8012bd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8012be0:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8012be4:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8012be8:	460b      	mov	r3, r1
 8012bea:	18db      	adds	r3, r3, r3
 8012bec:	653b      	str	r3, [r7, #80]	; 0x50
 8012bee:	4613      	mov	r3, r2
 8012bf0:	eb42 0303 	adc.w	r3, r2, r3
 8012bf4:	657b      	str	r3, [r7, #84]	; 0x54
 8012bf6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012bfa:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8012bfe:	f7ed ff35 	bl	8000a6c <__aeabi_uldivmod>
 8012c02:	4602      	mov	r2, r0
 8012c04:	460b      	mov	r3, r1
 8012c06:	4b0b      	ldr	r3, [pc, #44]	; (8012c34 <UART_SetConfig+0x528>)
 8012c08:	fba3 1302 	umull	r1, r3, r3, r2
 8012c0c:	095b      	lsrs	r3, r3, #5
 8012c0e:	2164      	movs	r1, #100	; 0x64
 8012c10:	fb01 f303 	mul.w	r3, r1, r3
 8012c14:	1ad3      	subs	r3, r2, r3
 8012c16:	00db      	lsls	r3, r3, #3
 8012c18:	3332      	adds	r3, #50	; 0x32
 8012c1a:	4a06      	ldr	r2, [pc, #24]	; (8012c34 <UART_SetConfig+0x528>)
 8012c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8012c20:	095b      	lsrs	r3, r3, #5
 8012c22:	f003 0207 	and.w	r2, r3, #7
 8012c26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	4422      	add	r2, r4
 8012c2e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8012c30:	e232      	b.n	8013098 <UART_SetConfig+0x98c>
 8012c32:	bf00      	nop
 8012c34:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012c38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012c3c:	681a      	ldr	r2, [r3, #0]
 8012c3e:	4b8d      	ldr	r3, [pc, #564]	; (8012e74 <UART_SetConfig+0x768>)
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d006      	beq.n	8012c52 <UART_SetConfig+0x546>
 8012c44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012c48:	681a      	ldr	r2, [r3, #0]
 8012c4a:	4b8b      	ldr	r3, [pc, #556]	; (8012e78 <UART_SetConfig+0x76c>)
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	f040 8117 	bne.w	8012e80 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8012c52:	f7fd fe6b 	bl	801092c <HAL_RCC_GetPCLK2Freq>
 8012c56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012c5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012c5e:	2200      	movs	r2, #0
 8012c60:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8012c64:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8012c68:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8012c6c:	4622      	mov	r2, r4
 8012c6e:	462b      	mov	r3, r5
 8012c70:	1891      	adds	r1, r2, r2
 8012c72:	64b9      	str	r1, [r7, #72]	; 0x48
 8012c74:	415b      	adcs	r3, r3
 8012c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012c7c:	4621      	mov	r1, r4
 8012c7e:	eb12 0801 	adds.w	r8, r2, r1
 8012c82:	4629      	mov	r1, r5
 8012c84:	eb43 0901 	adc.w	r9, r3, r1
 8012c88:	f04f 0200 	mov.w	r2, #0
 8012c8c:	f04f 0300 	mov.w	r3, #0
 8012c90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012c94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012c98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012c9c:	4690      	mov	r8, r2
 8012c9e:	4699      	mov	r9, r3
 8012ca0:	4623      	mov	r3, r4
 8012ca2:	eb18 0303 	adds.w	r3, r8, r3
 8012ca6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8012caa:	462b      	mov	r3, r5
 8012cac:	eb49 0303 	adc.w	r3, r9, r3
 8012cb0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8012cb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012cb8:	685b      	ldr	r3, [r3, #4]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8012cc0:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8012cc4:	f04f 0200 	mov.w	r2, #0
 8012cc8:	f04f 0300 	mov.w	r3, #0
 8012ccc:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8012cd0:	4629      	mov	r1, r5
 8012cd2:	008b      	lsls	r3, r1, #2
 8012cd4:	4621      	mov	r1, r4
 8012cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012cda:	4621      	mov	r1, r4
 8012cdc:	008a      	lsls	r2, r1, #2
 8012cde:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8012ce2:	f7ed fec3 	bl	8000a6c <__aeabi_uldivmod>
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	460b      	mov	r3, r1
 8012cea:	4b64      	ldr	r3, [pc, #400]	; (8012e7c <UART_SetConfig+0x770>)
 8012cec:	fba3 2302 	umull	r2, r3, r3, r2
 8012cf0:	095b      	lsrs	r3, r3, #5
 8012cf2:	011c      	lsls	r4, r3, #4
 8012cf4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8012cfe:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8012d02:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8012d06:	4642      	mov	r2, r8
 8012d08:	464b      	mov	r3, r9
 8012d0a:	1891      	adds	r1, r2, r2
 8012d0c:	6439      	str	r1, [r7, #64]	; 0x40
 8012d0e:	415b      	adcs	r3, r3
 8012d10:	647b      	str	r3, [r7, #68]	; 0x44
 8012d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012d16:	4641      	mov	r1, r8
 8012d18:	1851      	adds	r1, r2, r1
 8012d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8012d1c:	4649      	mov	r1, r9
 8012d1e:	414b      	adcs	r3, r1
 8012d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012d22:	f04f 0200 	mov.w	r2, #0
 8012d26:	f04f 0300 	mov.w	r3, #0
 8012d2a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8012d2e:	4659      	mov	r1, fp
 8012d30:	00cb      	lsls	r3, r1, #3
 8012d32:	4651      	mov	r1, sl
 8012d34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012d38:	4651      	mov	r1, sl
 8012d3a:	00ca      	lsls	r2, r1, #3
 8012d3c:	4610      	mov	r0, r2
 8012d3e:	4619      	mov	r1, r3
 8012d40:	4603      	mov	r3, r0
 8012d42:	4642      	mov	r2, r8
 8012d44:	189b      	adds	r3, r3, r2
 8012d46:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8012d4a:	464b      	mov	r3, r9
 8012d4c:	460a      	mov	r2, r1
 8012d4e:	eb42 0303 	adc.w	r3, r2, r3
 8012d52:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8012d56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8012d62:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8012d66:	f04f 0200 	mov.w	r2, #0
 8012d6a:	f04f 0300 	mov.w	r3, #0
 8012d6e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8012d72:	4649      	mov	r1, r9
 8012d74:	008b      	lsls	r3, r1, #2
 8012d76:	4641      	mov	r1, r8
 8012d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012d7c:	4641      	mov	r1, r8
 8012d7e:	008a      	lsls	r2, r1, #2
 8012d80:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8012d84:	f7ed fe72 	bl	8000a6c <__aeabi_uldivmod>
 8012d88:	4602      	mov	r2, r0
 8012d8a:	460b      	mov	r3, r1
 8012d8c:	4b3b      	ldr	r3, [pc, #236]	; (8012e7c <UART_SetConfig+0x770>)
 8012d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8012d92:	095b      	lsrs	r3, r3, #5
 8012d94:	2164      	movs	r1, #100	; 0x64
 8012d96:	fb01 f303 	mul.w	r3, r1, r3
 8012d9a:	1ad3      	subs	r3, r2, r3
 8012d9c:	011b      	lsls	r3, r3, #4
 8012d9e:	3332      	adds	r3, #50	; 0x32
 8012da0:	4a36      	ldr	r2, [pc, #216]	; (8012e7c <UART_SetConfig+0x770>)
 8012da2:	fba2 2303 	umull	r2, r3, r2, r3
 8012da6:	095b      	lsrs	r3, r3, #5
 8012da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012dac:	441c      	add	r4, r3
 8012dae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012db2:	2200      	movs	r2, #0
 8012db4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012db8:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8012dbc:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8012dc0:	4642      	mov	r2, r8
 8012dc2:	464b      	mov	r3, r9
 8012dc4:	1891      	adds	r1, r2, r2
 8012dc6:	6339      	str	r1, [r7, #48]	; 0x30
 8012dc8:	415b      	adcs	r3, r3
 8012dca:	637b      	str	r3, [r7, #52]	; 0x34
 8012dcc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8012dd0:	4641      	mov	r1, r8
 8012dd2:	1851      	adds	r1, r2, r1
 8012dd4:	62b9      	str	r1, [r7, #40]	; 0x28
 8012dd6:	4649      	mov	r1, r9
 8012dd8:	414b      	adcs	r3, r1
 8012dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ddc:	f04f 0200 	mov.w	r2, #0
 8012de0:	f04f 0300 	mov.w	r3, #0
 8012de4:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8012de8:	4659      	mov	r1, fp
 8012dea:	00cb      	lsls	r3, r1, #3
 8012dec:	4651      	mov	r1, sl
 8012dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012df2:	4651      	mov	r1, sl
 8012df4:	00ca      	lsls	r2, r1, #3
 8012df6:	4610      	mov	r0, r2
 8012df8:	4619      	mov	r1, r3
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	4642      	mov	r2, r8
 8012dfe:	189b      	adds	r3, r3, r2
 8012e00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8012e04:	464b      	mov	r3, r9
 8012e06:	460a      	mov	r2, r1
 8012e08:	eb42 0303 	adc.w	r3, r2, r3
 8012e0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012e10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012e14:	685b      	ldr	r3, [r3, #4]
 8012e16:	2200      	movs	r2, #0
 8012e18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8012e1c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8012e20:	f04f 0200 	mov.w	r2, #0
 8012e24:	f04f 0300 	mov.w	r3, #0
 8012e28:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8012e2c:	4649      	mov	r1, r9
 8012e2e:	008b      	lsls	r3, r1, #2
 8012e30:	4641      	mov	r1, r8
 8012e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012e36:	4641      	mov	r1, r8
 8012e38:	008a      	lsls	r2, r1, #2
 8012e3a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8012e3e:	f7ed fe15 	bl	8000a6c <__aeabi_uldivmod>
 8012e42:	4602      	mov	r2, r0
 8012e44:	460b      	mov	r3, r1
 8012e46:	4b0d      	ldr	r3, [pc, #52]	; (8012e7c <UART_SetConfig+0x770>)
 8012e48:	fba3 1302 	umull	r1, r3, r3, r2
 8012e4c:	095b      	lsrs	r3, r3, #5
 8012e4e:	2164      	movs	r1, #100	; 0x64
 8012e50:	fb01 f303 	mul.w	r3, r1, r3
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	011b      	lsls	r3, r3, #4
 8012e58:	3332      	adds	r3, #50	; 0x32
 8012e5a:	4a08      	ldr	r2, [pc, #32]	; (8012e7c <UART_SetConfig+0x770>)
 8012e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8012e60:	095b      	lsrs	r3, r3, #5
 8012e62:	f003 020f 	and.w	r2, r3, #15
 8012e66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	4422      	add	r2, r4
 8012e6e:	609a      	str	r2, [r3, #8]
 8012e70:	e112      	b.n	8013098 <UART_SetConfig+0x98c>
 8012e72:	bf00      	nop
 8012e74:	40011000 	.word	0x40011000
 8012e78:	40011400 	.word	0x40011400
 8012e7c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8012e80:	f7fd fd40 	bl	8010904 <HAL_RCC_GetPCLK1Freq>
 8012e84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012e88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8012e92:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8012e96:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8012e9a:	4642      	mov	r2, r8
 8012e9c:	464b      	mov	r3, r9
 8012e9e:	1891      	adds	r1, r2, r2
 8012ea0:	6239      	str	r1, [r7, #32]
 8012ea2:	415b      	adcs	r3, r3
 8012ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8012ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012eaa:	4641      	mov	r1, r8
 8012eac:	1854      	adds	r4, r2, r1
 8012eae:	4649      	mov	r1, r9
 8012eb0:	eb43 0501 	adc.w	r5, r3, r1
 8012eb4:	f04f 0200 	mov.w	r2, #0
 8012eb8:	f04f 0300 	mov.w	r3, #0
 8012ebc:	00eb      	lsls	r3, r5, #3
 8012ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012ec2:	00e2      	lsls	r2, r4, #3
 8012ec4:	4614      	mov	r4, r2
 8012ec6:	461d      	mov	r5, r3
 8012ec8:	4643      	mov	r3, r8
 8012eca:	18e3      	adds	r3, r4, r3
 8012ecc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8012ed0:	464b      	mov	r3, r9
 8012ed2:	eb45 0303 	adc.w	r3, r5, r3
 8012ed6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8012eda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8012ee6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8012eea:	f04f 0200 	mov.w	r2, #0
 8012eee:	f04f 0300 	mov.w	r3, #0
 8012ef2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8012ef6:	4629      	mov	r1, r5
 8012ef8:	008b      	lsls	r3, r1, #2
 8012efa:	4621      	mov	r1, r4
 8012efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012f00:	4621      	mov	r1, r4
 8012f02:	008a      	lsls	r2, r1, #2
 8012f04:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8012f08:	f7ed fdb0 	bl	8000a6c <__aeabi_uldivmod>
 8012f0c:	4602      	mov	r2, r0
 8012f0e:	460b      	mov	r3, r1
 8012f10:	4b64      	ldr	r3, [pc, #400]	; (80130a4 <UART_SetConfig+0x998>)
 8012f12:	fba3 2302 	umull	r2, r3, r3, r2
 8012f16:	095b      	lsrs	r3, r3, #5
 8012f18:	011c      	lsls	r4, r3, #4
 8012f1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012f1e:	2200      	movs	r2, #0
 8012f20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012f24:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8012f28:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8012f2c:	4642      	mov	r2, r8
 8012f2e:	464b      	mov	r3, r9
 8012f30:	1891      	adds	r1, r2, r2
 8012f32:	61b9      	str	r1, [r7, #24]
 8012f34:	415b      	adcs	r3, r3
 8012f36:	61fb      	str	r3, [r7, #28]
 8012f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012f3c:	4641      	mov	r1, r8
 8012f3e:	1851      	adds	r1, r2, r1
 8012f40:	6139      	str	r1, [r7, #16]
 8012f42:	4649      	mov	r1, r9
 8012f44:	414b      	adcs	r3, r1
 8012f46:	617b      	str	r3, [r7, #20]
 8012f48:	f04f 0200 	mov.w	r2, #0
 8012f4c:	f04f 0300 	mov.w	r3, #0
 8012f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012f54:	4659      	mov	r1, fp
 8012f56:	00cb      	lsls	r3, r1, #3
 8012f58:	4651      	mov	r1, sl
 8012f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012f5e:	4651      	mov	r1, sl
 8012f60:	00ca      	lsls	r2, r1, #3
 8012f62:	4610      	mov	r0, r2
 8012f64:	4619      	mov	r1, r3
 8012f66:	4603      	mov	r3, r0
 8012f68:	4642      	mov	r2, r8
 8012f6a:	189b      	adds	r3, r3, r2
 8012f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012f70:	464b      	mov	r3, r9
 8012f72:	460a      	mov	r2, r1
 8012f74:	eb42 0303 	adc.w	r3, r2, r3
 8012f78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8012f7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012f80:	685b      	ldr	r3, [r3, #4]
 8012f82:	2200      	movs	r2, #0
 8012f84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012f88:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8012f8c:	f04f 0200 	mov.w	r2, #0
 8012f90:	f04f 0300 	mov.w	r3, #0
 8012f94:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8012f98:	4649      	mov	r1, r9
 8012f9a:	008b      	lsls	r3, r1, #2
 8012f9c:	4641      	mov	r1, r8
 8012f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012fa2:	4641      	mov	r1, r8
 8012fa4:	008a      	lsls	r2, r1, #2
 8012fa6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8012faa:	f7ed fd5f 	bl	8000a6c <__aeabi_uldivmod>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	4b3c      	ldr	r3, [pc, #240]	; (80130a4 <UART_SetConfig+0x998>)
 8012fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8012fb8:	095b      	lsrs	r3, r3, #5
 8012fba:	2164      	movs	r1, #100	; 0x64
 8012fbc:	fb01 f303 	mul.w	r3, r1, r3
 8012fc0:	1ad3      	subs	r3, r2, r3
 8012fc2:	011b      	lsls	r3, r3, #4
 8012fc4:	3332      	adds	r3, #50	; 0x32
 8012fc6:	4a37      	ldr	r2, [pc, #220]	; (80130a4 <UART_SetConfig+0x998>)
 8012fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8012fcc:	095b      	lsrs	r3, r3, #5
 8012fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012fd2:	441c      	add	r4, r3
 8012fd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012fd8:	2200      	movs	r2, #0
 8012fda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012fde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8012fe2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8012fe6:	4642      	mov	r2, r8
 8012fe8:	464b      	mov	r3, r9
 8012fea:	1891      	adds	r1, r2, r2
 8012fec:	60b9      	str	r1, [r7, #8]
 8012fee:	415b      	adcs	r3, r3
 8012ff0:	60fb      	str	r3, [r7, #12]
 8012ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012ff6:	4641      	mov	r1, r8
 8012ff8:	1851      	adds	r1, r2, r1
 8012ffa:	6039      	str	r1, [r7, #0]
 8012ffc:	4649      	mov	r1, r9
 8012ffe:	414b      	adcs	r3, r1
 8013000:	607b      	str	r3, [r7, #4]
 8013002:	f04f 0200 	mov.w	r2, #0
 8013006:	f04f 0300 	mov.w	r3, #0
 801300a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801300e:	4659      	mov	r1, fp
 8013010:	00cb      	lsls	r3, r1, #3
 8013012:	4651      	mov	r1, sl
 8013014:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013018:	4651      	mov	r1, sl
 801301a:	00ca      	lsls	r2, r1, #3
 801301c:	4610      	mov	r0, r2
 801301e:	4619      	mov	r1, r3
 8013020:	4603      	mov	r3, r0
 8013022:	4642      	mov	r2, r8
 8013024:	189b      	adds	r3, r3, r2
 8013026:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801302a:	464b      	mov	r3, r9
 801302c:	460a      	mov	r2, r1
 801302e:	eb42 0303 	adc.w	r3, r2, r3
 8013032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013036:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	2200      	movs	r2, #0
 801303e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013042:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8013046:	f04f 0200 	mov.w	r2, #0
 801304a:	f04f 0300 	mov.w	r3, #0
 801304e:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8013052:	4649      	mov	r1, r9
 8013054:	008b      	lsls	r3, r1, #2
 8013056:	4641      	mov	r1, r8
 8013058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801305c:	4641      	mov	r1, r8
 801305e:	008a      	lsls	r2, r1, #2
 8013060:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8013064:	f7ed fd02 	bl	8000a6c <__aeabi_uldivmod>
 8013068:	4602      	mov	r2, r0
 801306a:	460b      	mov	r3, r1
 801306c:	4b0d      	ldr	r3, [pc, #52]	; (80130a4 <UART_SetConfig+0x998>)
 801306e:	fba3 1302 	umull	r1, r3, r3, r2
 8013072:	095b      	lsrs	r3, r3, #5
 8013074:	2164      	movs	r1, #100	; 0x64
 8013076:	fb01 f303 	mul.w	r3, r1, r3
 801307a:	1ad3      	subs	r3, r2, r3
 801307c:	011b      	lsls	r3, r3, #4
 801307e:	3332      	adds	r3, #50	; 0x32
 8013080:	4a08      	ldr	r2, [pc, #32]	; (80130a4 <UART_SetConfig+0x998>)
 8013082:	fba2 2303 	umull	r2, r3, r2, r3
 8013086:	095b      	lsrs	r3, r3, #5
 8013088:	f003 020f 	and.w	r2, r3, #15
 801308c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	4422      	add	r2, r4
 8013094:	609a      	str	r2, [r3, #8]
}
 8013096:	e7ff      	b.n	8013098 <UART_SetConfig+0x98c>
 8013098:	bf00      	nop
 801309a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 801309e:	46bd      	mov	sp, r7
 80130a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80130a4:	51eb851f 	.word	0x51eb851f

080130a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80130a8:	b480      	push	{r7}
 80130aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80130ac:	bf00      	nop
 80130ae:	46bd      	mov	sp, r7
 80130b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b4:	4770      	bx	lr
	...

080130b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80130b8:	b480      	push	{r7}
 80130ba:	b085      	sub	sp, #20
 80130bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130be:	f3ef 8305 	mrs	r3, IPSR
 80130c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80130c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d10f      	bne.n	80130ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130ca:	f3ef 8310 	mrs	r3, PRIMASK
 80130ce:	607b      	str	r3, [r7, #4]
  return(result);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d105      	bne.n	80130e2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80130d6:	f3ef 8311 	mrs	r3, BASEPRI
 80130da:	603b      	str	r3, [r7, #0]
  return(result);
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d007      	beq.n	80130f2 <osKernelInitialize+0x3a>
 80130e2:	4b0e      	ldr	r3, [pc, #56]	; (801311c <osKernelInitialize+0x64>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	2b02      	cmp	r3, #2
 80130e8:	d103      	bne.n	80130f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80130ea:	f06f 0305 	mvn.w	r3, #5
 80130ee:	60fb      	str	r3, [r7, #12]
 80130f0:	e00c      	b.n	801310c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80130f2:	4b0a      	ldr	r3, [pc, #40]	; (801311c <osKernelInitialize+0x64>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d105      	bne.n	8013106 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80130fa:	4b08      	ldr	r3, [pc, #32]	; (801311c <osKernelInitialize+0x64>)
 80130fc:	2201      	movs	r2, #1
 80130fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013100:	2300      	movs	r3, #0
 8013102:	60fb      	str	r3, [r7, #12]
 8013104:	e002      	b.n	801310c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8013106:	f04f 33ff 	mov.w	r3, #4294967295
 801310a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801310c:	68fb      	ldr	r3, [r7, #12]
}
 801310e:	4618      	mov	r0, r3
 8013110:	3714      	adds	r7, #20
 8013112:	46bd      	mov	sp, r7
 8013114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013118:	4770      	bx	lr
 801311a:	bf00      	nop
 801311c:	20002574 	.word	0x20002574

08013120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013120:	b580      	push	{r7, lr}
 8013122:	b084      	sub	sp, #16
 8013124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013126:	f3ef 8305 	mrs	r3, IPSR
 801312a:	60bb      	str	r3, [r7, #8]
  return(result);
 801312c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801312e:	2b00      	cmp	r3, #0
 8013130:	d10f      	bne.n	8013152 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013132:	f3ef 8310 	mrs	r3, PRIMASK
 8013136:	607b      	str	r3, [r7, #4]
  return(result);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d105      	bne.n	801314a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801313e:	f3ef 8311 	mrs	r3, BASEPRI
 8013142:	603b      	str	r3, [r7, #0]
  return(result);
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d007      	beq.n	801315a <osKernelStart+0x3a>
 801314a:	4b0f      	ldr	r3, [pc, #60]	; (8013188 <osKernelStart+0x68>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	2b02      	cmp	r3, #2
 8013150:	d103      	bne.n	801315a <osKernelStart+0x3a>
    stat = osErrorISR;
 8013152:	f06f 0305 	mvn.w	r3, #5
 8013156:	60fb      	str	r3, [r7, #12]
 8013158:	e010      	b.n	801317c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801315a:	4b0b      	ldr	r3, [pc, #44]	; (8013188 <osKernelStart+0x68>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	2b01      	cmp	r3, #1
 8013160:	d109      	bne.n	8013176 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013162:	f7ff ffa1 	bl	80130a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013166:	4b08      	ldr	r3, [pc, #32]	; (8013188 <osKernelStart+0x68>)
 8013168:	2202      	movs	r2, #2
 801316a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801316c:	f001 fb38 	bl	80147e0 <vTaskStartScheduler>
      stat = osOK;
 8013170:	2300      	movs	r3, #0
 8013172:	60fb      	str	r3, [r7, #12]
 8013174:	e002      	b.n	801317c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8013176:	f04f 33ff 	mov.w	r3, #4294967295
 801317a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801317c:	68fb      	ldr	r3, [r7, #12]
}
 801317e:	4618      	mov	r0, r3
 8013180:	3710      	adds	r7, #16
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	20002574 	.word	0x20002574

0801318c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801318c:	b580      	push	{r7, lr}
 801318e:	b090      	sub	sp, #64	; 0x40
 8013190:	af04      	add	r7, sp, #16
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013198:	2300      	movs	r3, #0
 801319a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801319c:	f3ef 8305 	mrs	r3, IPSR
 80131a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80131a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	f040 808f 	bne.w	80132c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131aa:	f3ef 8310 	mrs	r3, PRIMASK
 80131ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80131b0:	69bb      	ldr	r3, [r7, #24]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d105      	bne.n	80131c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80131b6:	f3ef 8311 	mrs	r3, BASEPRI
 80131ba:	617b      	str	r3, [r7, #20]
  return(result);
 80131bc:	697b      	ldr	r3, [r7, #20]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d003      	beq.n	80131ca <osThreadNew+0x3e>
 80131c2:	4b44      	ldr	r3, [pc, #272]	; (80132d4 <osThreadNew+0x148>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	2b02      	cmp	r3, #2
 80131c8:	d07e      	beq.n	80132c8 <osThreadNew+0x13c>
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d07b      	beq.n	80132c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80131d0:	2380      	movs	r3, #128	; 0x80
 80131d2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80131d4:	2318      	movs	r3, #24
 80131d6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80131d8:	2300      	movs	r3, #0
 80131da:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80131dc:	f04f 33ff 	mov.w	r3, #4294967295
 80131e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d045      	beq.n	8013274 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d002      	beq.n	80131f6 <osThreadNew+0x6a>
        name = attr->name;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	699b      	ldr	r3, [r3, #24]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d002      	beq.n	8013204 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	699b      	ldr	r3, [r3, #24]
 8013202:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013206:	2b00      	cmp	r3, #0
 8013208:	d008      	beq.n	801321c <osThreadNew+0x90>
 801320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801320c:	2b38      	cmp	r3, #56	; 0x38
 801320e:	d805      	bhi.n	801321c <osThreadNew+0x90>
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	f003 0301 	and.w	r3, r3, #1
 8013218:	2b00      	cmp	r3, #0
 801321a:	d001      	beq.n	8013220 <osThreadNew+0x94>
        return (NULL);
 801321c:	2300      	movs	r3, #0
 801321e:	e054      	b.n	80132ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	695b      	ldr	r3, [r3, #20]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d003      	beq.n	8013230 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	695b      	ldr	r3, [r3, #20]
 801322c:	089b      	lsrs	r3, r3, #2
 801322e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	689b      	ldr	r3, [r3, #8]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d00e      	beq.n	8013256 <osThreadNew+0xca>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	2b5b      	cmp	r3, #91	; 0x5b
 801323e:	d90a      	bls.n	8013256 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013244:	2b00      	cmp	r3, #0
 8013246:	d006      	beq.n	8013256 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	695b      	ldr	r3, [r3, #20]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d002      	beq.n	8013256 <osThreadNew+0xca>
        mem = 1;
 8013250:	2301      	movs	r3, #1
 8013252:	623b      	str	r3, [r7, #32]
 8013254:	e010      	b.n	8013278 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	689b      	ldr	r3, [r3, #8]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d10c      	bne.n	8013278 <osThreadNew+0xec>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	68db      	ldr	r3, [r3, #12]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d108      	bne.n	8013278 <osThreadNew+0xec>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	691b      	ldr	r3, [r3, #16]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d104      	bne.n	8013278 <osThreadNew+0xec>
          mem = 0;
 801326e:	2300      	movs	r3, #0
 8013270:	623b      	str	r3, [r7, #32]
 8013272:	e001      	b.n	8013278 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8013274:	2300      	movs	r3, #0
 8013276:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013278:	6a3b      	ldr	r3, [r7, #32]
 801327a:	2b01      	cmp	r3, #1
 801327c:	d110      	bne.n	80132a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8013282:	687a      	ldr	r2, [r7, #4]
 8013284:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013286:	9202      	str	r2, [sp, #8]
 8013288:	9301      	str	r3, [sp, #4]
 801328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328c:	9300      	str	r3, [sp, #0]
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013294:	68f8      	ldr	r0, [r7, #12]
 8013296:	f001 f8cd 	bl	8014434 <xTaskCreateStatic>
 801329a:	4603      	mov	r3, r0
 801329c:	613b      	str	r3, [r7, #16]
 801329e:	e013      	b.n	80132c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80132a0:	6a3b      	ldr	r3, [r7, #32]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d110      	bne.n	80132c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80132a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a8:	b29a      	uxth	r2, r3
 80132aa:	f107 0310 	add.w	r3, r7, #16
 80132ae:	9301      	str	r3, [sp, #4]
 80132b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b2:	9300      	str	r3, [sp, #0]
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80132b8:	68f8      	ldr	r0, [r7, #12]
 80132ba:	f001 f918 	bl	80144ee <xTaskCreate>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d001      	beq.n	80132c8 <osThreadNew+0x13c>
          hTask = NULL;
 80132c4:	2300      	movs	r3, #0
 80132c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80132c8:	693b      	ldr	r3, [r7, #16]
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3730      	adds	r7, #48	; 0x30
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}
 80132d2:	bf00      	nop
 80132d4:	20002574 	.word	0x20002574

080132d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80132d8:	b580      	push	{r7, lr}
 80132da:	b086      	sub	sp, #24
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132e0:	f3ef 8305 	mrs	r3, IPSR
 80132e4:	613b      	str	r3, [r7, #16]
  return(result);
 80132e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d10f      	bne.n	801330c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80132ec:	f3ef 8310 	mrs	r3, PRIMASK
 80132f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d105      	bne.n	8013304 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80132f8:	f3ef 8311 	mrs	r3, BASEPRI
 80132fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d007      	beq.n	8013314 <osDelay+0x3c>
 8013304:	4b0a      	ldr	r3, [pc, #40]	; (8013330 <osDelay+0x58>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	2b02      	cmp	r3, #2
 801330a:	d103      	bne.n	8013314 <osDelay+0x3c>
    stat = osErrorISR;
 801330c:	f06f 0305 	mvn.w	r3, #5
 8013310:	617b      	str	r3, [r7, #20]
 8013312:	e007      	b.n	8013324 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8013314:	2300      	movs	r3, #0
 8013316:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d002      	beq.n	8013324 <osDelay+0x4c>
      vTaskDelay(ticks);
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f001 fa2a 	bl	8014778 <vTaskDelay>
    }
  }

  return (stat);
 8013324:	697b      	ldr	r3, [r7, #20]
}
 8013326:	4618      	mov	r0, r3
 8013328:	3718      	adds	r7, #24
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
 801332e:	bf00      	nop
 8013330:	20002574 	.word	0x20002574

08013334 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013334:	b480      	push	{r7}
 8013336:	b085      	sub	sp, #20
 8013338:	af00      	add	r7, sp, #0
 801333a:	60f8      	str	r0, [r7, #12]
 801333c:	60b9      	str	r1, [r7, #8]
 801333e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	4a07      	ldr	r2, [pc, #28]	; (8013360 <vApplicationGetIdleTaskMemory+0x2c>)
 8013344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	4a06      	ldr	r2, [pc, #24]	; (8013364 <vApplicationGetIdleTaskMemory+0x30>)
 801334a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2280      	movs	r2, #128	; 0x80
 8013350:	601a      	str	r2, [r3, #0]
}
 8013352:	bf00      	nop
 8013354:	3714      	adds	r7, #20
 8013356:	46bd      	mov	sp, r7
 8013358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop
 8013360:	20002578 	.word	0x20002578
 8013364:	200025d4 	.word	0x200025d4

08013368 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013368:	b480      	push	{r7}
 801336a:	b085      	sub	sp, #20
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	4a07      	ldr	r2, [pc, #28]	; (8013394 <vApplicationGetTimerTaskMemory+0x2c>)
 8013378:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	4a06      	ldr	r2, [pc, #24]	; (8013398 <vApplicationGetTimerTaskMemory+0x30>)
 801337e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013386:	601a      	str	r2, [r3, #0]
}
 8013388:	bf00      	nop
 801338a:	3714      	adds	r7, #20
 801338c:	46bd      	mov	sp, r7
 801338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013392:	4770      	bx	lr
 8013394:	200027d4 	.word	0x200027d4
 8013398:	20002830 	.word	0x20002830

0801339c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f103 0208 	add.w	r2, r3, #8
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f04f 32ff 	mov.w	r2, #4294967295
 80133b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	f103 0208 	add.w	r2, r3, #8
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f103 0208 	add.w	r2, r3, #8
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2200      	movs	r2, #0
 80133ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80133d0:	bf00      	nop
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80133dc:	b480      	push	{r7}
 80133de:	b083      	sub	sp, #12
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2200      	movs	r2, #0
 80133e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80133ea:	bf00      	nop
 80133ec:	370c      	adds	r7, #12
 80133ee:	46bd      	mov	sp, r7
 80133f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f4:	4770      	bx	lr

080133f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80133f6:	b480      	push	{r7}
 80133f8:	b085      	sub	sp, #20
 80133fa:	af00      	add	r7, sp, #0
 80133fc:	6078      	str	r0, [r7, #4]
 80133fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	68fa      	ldr	r2, [r7, #12]
 801340a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	689a      	ldr	r2, [r3, #8]
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	689b      	ldr	r3, [r3, #8]
 8013418:	683a      	ldr	r2, [r7, #0]
 801341a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	683a      	ldr	r2, [r7, #0]
 8013420:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	687a      	ldr	r2, [r7, #4]
 8013426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	1c5a      	adds	r2, r3, #1
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	601a      	str	r2, [r3, #0]
}
 8013432:	bf00      	nop
 8013434:	3714      	adds	r7, #20
 8013436:	46bd      	mov	sp, r7
 8013438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343c:	4770      	bx	lr

0801343e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801343e:	b480      	push	{r7}
 8013440:	b085      	sub	sp, #20
 8013442:	af00      	add	r7, sp, #0
 8013444:	6078      	str	r0, [r7, #4]
 8013446:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013454:	d103      	bne.n	801345e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	691b      	ldr	r3, [r3, #16]
 801345a:	60fb      	str	r3, [r7, #12]
 801345c:	e00c      	b.n	8013478 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	3308      	adds	r3, #8
 8013462:	60fb      	str	r3, [r7, #12]
 8013464:	e002      	b.n	801346c <vListInsert+0x2e>
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	685b      	ldr	r3, [r3, #4]
 801346a:	60fb      	str	r3, [r7, #12]
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	685b      	ldr	r3, [r3, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	68ba      	ldr	r2, [r7, #8]
 8013474:	429a      	cmp	r2, r3
 8013476:	d2f6      	bcs.n	8013466 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	685a      	ldr	r2, [r3, #4]
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	685b      	ldr	r3, [r3, #4]
 8013484:	683a      	ldr	r2, [r7, #0]
 8013486:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	68fa      	ldr	r2, [r7, #12]
 801348c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	683a      	ldr	r2, [r7, #0]
 8013492:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	1c5a      	adds	r2, r3, #1
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	601a      	str	r2, [r3, #0]
}
 80134a4:	bf00      	nop
 80134a6:	3714      	adds	r7, #20
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr

080134b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80134b0:	b480      	push	{r7}
 80134b2:	b085      	sub	sp, #20
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	691b      	ldr	r3, [r3, #16]
 80134bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	685b      	ldr	r3, [r3, #4]
 80134c2:	687a      	ldr	r2, [r7, #4]
 80134c4:	6892      	ldr	r2, [r2, #8]
 80134c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	689b      	ldr	r3, [r3, #8]
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	6852      	ldr	r2, [r2, #4]
 80134d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	685b      	ldr	r3, [r3, #4]
 80134d6:	687a      	ldr	r2, [r7, #4]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d103      	bne.n	80134e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	689a      	ldr	r2, [r3, #8]
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2200      	movs	r2, #0
 80134e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	1e5a      	subs	r2, r3, #1
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	681b      	ldr	r3, [r3, #0]
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	3714      	adds	r7, #20
 80134fc:	46bd      	mov	sp, r7
 80134fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013502:	4770      	bx	lr

08013504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b084      	sub	sp, #16
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d10a      	bne.n	801352e <xQueueGenericReset+0x2a>
	__asm volatile
 8013518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801351c:	f383 8811 	msr	BASEPRI, r3
 8013520:	f3bf 8f6f 	isb	sy
 8013524:	f3bf 8f4f 	dsb	sy
 8013528:	60bb      	str	r3, [r7, #8]
}
 801352a:	bf00      	nop
 801352c:	e7fe      	b.n	801352c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801352e:	f002 fbf9 	bl	8015d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	681a      	ldr	r2, [r3, #0]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801353a:	68f9      	ldr	r1, [r7, #12]
 801353c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801353e:	fb01 f303 	mul.w	r3, r1, r3
 8013542:	441a      	add	r2, r3
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2200      	movs	r2, #0
 801354c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	681a      	ldr	r2, [r3, #0]
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801355e:	3b01      	subs	r3, #1
 8013560:	68f9      	ldr	r1, [r7, #12]
 8013562:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013564:	fb01 f303 	mul.w	r3, r1, r3
 8013568:	441a      	add	r2, r3
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	22ff      	movs	r2, #255	; 0xff
 8013572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	22ff      	movs	r2, #255	; 0xff
 801357a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d114      	bne.n	80135ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	691b      	ldr	r3, [r3, #16]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d01a      	beq.n	80135c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	3310      	adds	r3, #16
 8013590:	4618      	mov	r0, r3
 8013592:	f001 fbaf 	bl	8014cf4 <xTaskRemoveFromEventList>
 8013596:	4603      	mov	r3, r0
 8013598:	2b00      	cmp	r3, #0
 801359a:	d012      	beq.n	80135c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801359c:	4b0c      	ldr	r3, [pc, #48]	; (80135d0 <xQueueGenericReset+0xcc>)
 801359e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135a2:	601a      	str	r2, [r3, #0]
 80135a4:	f3bf 8f4f 	dsb	sy
 80135a8:	f3bf 8f6f 	isb	sy
 80135ac:	e009      	b.n	80135c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	3310      	adds	r3, #16
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7ff fef2 	bl	801339c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	3324      	adds	r3, #36	; 0x24
 80135bc:	4618      	mov	r0, r3
 80135be:	f7ff feed 	bl	801339c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80135c2:	f002 fbdf 	bl	8015d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80135c6:	2301      	movs	r3, #1
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3710      	adds	r7, #16
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}
 80135d0:	e000ed04 	.word	0xe000ed04

080135d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b08e      	sub	sp, #56	; 0x38
 80135d8:	af02      	add	r7, sp, #8
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	60b9      	str	r1, [r7, #8]
 80135de:	607a      	str	r2, [r7, #4]
 80135e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10a      	bne.n	80135fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80135e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ec:	f383 8811 	msr	BASEPRI, r3
 80135f0:	f3bf 8f6f 	isb	sy
 80135f4:	f3bf 8f4f 	dsb	sy
 80135f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80135fa:	bf00      	nop
 80135fc:	e7fe      	b.n	80135fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d10a      	bne.n	801361a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013608:	f383 8811 	msr	BASEPRI, r3
 801360c:	f3bf 8f6f 	isb	sy
 8013610:	f3bf 8f4f 	dsb	sy
 8013614:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013616:	bf00      	nop
 8013618:	e7fe      	b.n	8013618 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d002      	beq.n	8013626 <xQueueGenericCreateStatic+0x52>
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d001      	beq.n	801362a <xQueueGenericCreateStatic+0x56>
 8013626:	2301      	movs	r3, #1
 8013628:	e000      	b.n	801362c <xQueueGenericCreateStatic+0x58>
 801362a:	2300      	movs	r3, #0
 801362c:	2b00      	cmp	r3, #0
 801362e:	d10a      	bne.n	8013646 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013634:	f383 8811 	msr	BASEPRI, r3
 8013638:	f3bf 8f6f 	isb	sy
 801363c:	f3bf 8f4f 	dsb	sy
 8013640:	623b      	str	r3, [r7, #32]
}
 8013642:	bf00      	nop
 8013644:	e7fe      	b.n	8013644 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d102      	bne.n	8013652 <xQueueGenericCreateStatic+0x7e>
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d101      	bne.n	8013656 <xQueueGenericCreateStatic+0x82>
 8013652:	2301      	movs	r3, #1
 8013654:	e000      	b.n	8013658 <xQueueGenericCreateStatic+0x84>
 8013656:	2300      	movs	r3, #0
 8013658:	2b00      	cmp	r3, #0
 801365a:	d10a      	bne.n	8013672 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013660:	f383 8811 	msr	BASEPRI, r3
 8013664:	f3bf 8f6f 	isb	sy
 8013668:	f3bf 8f4f 	dsb	sy
 801366c:	61fb      	str	r3, [r7, #28]
}
 801366e:	bf00      	nop
 8013670:	e7fe      	b.n	8013670 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013672:	2350      	movs	r3, #80	; 0x50
 8013674:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013676:	697b      	ldr	r3, [r7, #20]
 8013678:	2b50      	cmp	r3, #80	; 0x50
 801367a:	d00a      	beq.n	8013692 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013680:	f383 8811 	msr	BASEPRI, r3
 8013684:	f3bf 8f6f 	isb	sy
 8013688:	f3bf 8f4f 	dsb	sy
 801368c:	61bb      	str	r3, [r7, #24]
}
 801368e:	bf00      	nop
 8013690:	e7fe      	b.n	8013690 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013692:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369a:	2b00      	cmp	r3, #0
 801369c:	d00d      	beq.n	80136ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a0:	2201      	movs	r2, #1
 80136a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80136a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80136aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ac:	9300      	str	r3, [sp, #0]
 80136ae:	4613      	mov	r3, r2
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	68b9      	ldr	r1, [r7, #8]
 80136b4:	68f8      	ldr	r0, [r7, #12]
 80136b6:	f000 f845 	bl	8013744 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80136ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80136bc:	4618      	mov	r0, r3
 80136be:	3730      	adds	r7, #48	; 0x30
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}

080136c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b08a      	sub	sp, #40	; 0x28
 80136c8:	af02      	add	r7, sp, #8
 80136ca:	60f8      	str	r0, [r7, #12]
 80136cc:	60b9      	str	r1, [r7, #8]
 80136ce:	4613      	mov	r3, r2
 80136d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d10a      	bne.n	80136ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80136d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136dc:	f383 8811 	msr	BASEPRI, r3
 80136e0:	f3bf 8f6f 	isb	sy
 80136e4:	f3bf 8f4f 	dsb	sy
 80136e8:	613b      	str	r3, [r7, #16]
}
 80136ea:	bf00      	nop
 80136ec:	e7fe      	b.n	80136ec <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d102      	bne.n	80136fa <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80136f4:	2300      	movs	r3, #0
 80136f6:	61fb      	str	r3, [r7, #28]
 80136f8:	e004      	b.n	8013704 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	68ba      	ldr	r2, [r7, #8]
 80136fe:	fb02 f303 	mul.w	r3, r2, r3
 8013702:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	3350      	adds	r3, #80	; 0x50
 8013708:	4618      	mov	r0, r3
 801370a:	f002 fc2d 	bl	8015f68 <pvPortMalloc>
 801370e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013710:	69bb      	ldr	r3, [r7, #24]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d011      	beq.n	801373a <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013716:	69bb      	ldr	r3, [r7, #24]
 8013718:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	3350      	adds	r3, #80	; 0x50
 801371e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	2200      	movs	r2, #0
 8013724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013728:	79fa      	ldrb	r2, [r7, #7]
 801372a:	69bb      	ldr	r3, [r7, #24]
 801372c:	9300      	str	r3, [sp, #0]
 801372e:	4613      	mov	r3, r2
 8013730:	697a      	ldr	r2, [r7, #20]
 8013732:	68b9      	ldr	r1, [r7, #8]
 8013734:	68f8      	ldr	r0, [r7, #12]
 8013736:	f000 f805 	bl	8013744 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801373a:	69bb      	ldr	r3, [r7, #24]
	}
 801373c:	4618      	mov	r0, r3
 801373e:	3720      	adds	r7, #32
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}

08013744 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b084      	sub	sp, #16
 8013748:	af00      	add	r7, sp, #0
 801374a:	60f8      	str	r0, [r7, #12]
 801374c:	60b9      	str	r1, [r7, #8]
 801374e:	607a      	str	r2, [r7, #4]
 8013750:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d103      	bne.n	8013760 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013758:	69bb      	ldr	r3, [r7, #24]
 801375a:	69ba      	ldr	r2, [r7, #24]
 801375c:	601a      	str	r2, [r3, #0]
 801375e:	e002      	b.n	8013766 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013766:	69bb      	ldr	r3, [r7, #24]
 8013768:	68fa      	ldr	r2, [r7, #12]
 801376a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	68ba      	ldr	r2, [r7, #8]
 8013770:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013772:	2101      	movs	r1, #1
 8013774:	69b8      	ldr	r0, [r7, #24]
 8013776:	f7ff fec5 	bl	8013504 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	78fa      	ldrb	r2, [r7, #3]
 801377e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013782:	bf00      	nop
 8013784:	3710      	adds	r7, #16
 8013786:	46bd      	mov	sp, r7
 8013788:	bd80      	pop	{r7, pc}

0801378a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801378a:	b580      	push	{r7, lr}
 801378c:	b082      	sub	sp, #8
 801378e:	af00      	add	r7, sp, #0
 8013790:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d00e      	beq.n	80137b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2200      	movs	r2, #0
 801379c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2200      	movs	r2, #0
 80137a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	2200      	movs	r2, #0
 80137a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80137aa:	2300      	movs	r3, #0
 80137ac:	2200      	movs	r2, #0
 80137ae:	2100      	movs	r1, #0
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f000 f81d 	bl	80137f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80137b6:	bf00      	nop
 80137b8:	3708      	adds	r7, #8
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}

080137be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80137be:	b580      	push	{r7, lr}
 80137c0:	b086      	sub	sp, #24
 80137c2:	af00      	add	r7, sp, #0
 80137c4:	4603      	mov	r3, r0
 80137c6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80137c8:	2301      	movs	r3, #1
 80137ca:	617b      	str	r3, [r7, #20]
 80137cc:	2300      	movs	r3, #0
 80137ce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80137d0:	79fb      	ldrb	r3, [r7, #7]
 80137d2:	461a      	mov	r2, r3
 80137d4:	6939      	ldr	r1, [r7, #16]
 80137d6:	6978      	ldr	r0, [r7, #20]
 80137d8:	f7ff ff74 	bl	80136c4 <xQueueGenericCreate>
 80137dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80137de:	68f8      	ldr	r0, [r7, #12]
 80137e0:	f7ff ffd3 	bl	801378a <prvInitialiseMutex>

		return xNewQueue;
 80137e4:	68fb      	ldr	r3, [r7, #12]
	}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3718      	adds	r7, #24
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
	...

080137f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b08e      	sub	sp, #56	; 0x38
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	607a      	str	r2, [r7, #4]
 80137fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80137fe:	2300      	movs	r3, #0
 8013800:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013808:	2b00      	cmp	r3, #0
 801380a:	d10a      	bne.n	8013822 <xQueueGenericSend+0x32>
	__asm volatile
 801380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013810:	f383 8811 	msr	BASEPRI, r3
 8013814:	f3bf 8f6f 	isb	sy
 8013818:	f3bf 8f4f 	dsb	sy
 801381c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801381e:	bf00      	nop
 8013820:	e7fe      	b.n	8013820 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d103      	bne.n	8013830 <xQueueGenericSend+0x40>
 8013828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801382c:	2b00      	cmp	r3, #0
 801382e:	d101      	bne.n	8013834 <xQueueGenericSend+0x44>
 8013830:	2301      	movs	r3, #1
 8013832:	e000      	b.n	8013836 <xQueueGenericSend+0x46>
 8013834:	2300      	movs	r3, #0
 8013836:	2b00      	cmp	r3, #0
 8013838:	d10a      	bne.n	8013850 <xQueueGenericSend+0x60>
	__asm volatile
 801383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801383e:	f383 8811 	msr	BASEPRI, r3
 8013842:	f3bf 8f6f 	isb	sy
 8013846:	f3bf 8f4f 	dsb	sy
 801384a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801384c:	bf00      	nop
 801384e:	e7fe      	b.n	801384e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	2b02      	cmp	r3, #2
 8013854:	d103      	bne.n	801385e <xQueueGenericSend+0x6e>
 8013856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801385a:	2b01      	cmp	r3, #1
 801385c:	d101      	bne.n	8013862 <xQueueGenericSend+0x72>
 801385e:	2301      	movs	r3, #1
 8013860:	e000      	b.n	8013864 <xQueueGenericSend+0x74>
 8013862:	2300      	movs	r3, #0
 8013864:	2b00      	cmp	r3, #0
 8013866:	d10a      	bne.n	801387e <xQueueGenericSend+0x8e>
	__asm volatile
 8013868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801386c:	f383 8811 	msr	BASEPRI, r3
 8013870:	f3bf 8f6f 	isb	sy
 8013874:	f3bf 8f4f 	dsb	sy
 8013878:	623b      	str	r3, [r7, #32]
}
 801387a:	bf00      	nop
 801387c:	e7fe      	b.n	801387c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801387e:	f001 fbf7 	bl	8015070 <xTaskGetSchedulerState>
 8013882:	4603      	mov	r3, r0
 8013884:	2b00      	cmp	r3, #0
 8013886:	d102      	bne.n	801388e <xQueueGenericSend+0x9e>
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d101      	bne.n	8013892 <xQueueGenericSend+0xa2>
 801388e:	2301      	movs	r3, #1
 8013890:	e000      	b.n	8013894 <xQueueGenericSend+0xa4>
 8013892:	2300      	movs	r3, #0
 8013894:	2b00      	cmp	r3, #0
 8013896:	d10a      	bne.n	80138ae <xQueueGenericSend+0xbe>
	__asm volatile
 8013898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801389c:	f383 8811 	msr	BASEPRI, r3
 80138a0:	f3bf 8f6f 	isb	sy
 80138a4:	f3bf 8f4f 	dsb	sy
 80138a8:	61fb      	str	r3, [r7, #28]
}
 80138aa:	bf00      	nop
 80138ac:	e7fe      	b.n	80138ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80138ae:	f002 fa39 	bl	8015d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80138b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d302      	bcc.n	80138c4 <xQueueGenericSend+0xd4>
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	2b02      	cmp	r3, #2
 80138c2:	d129      	bne.n	8013918 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80138c4:	683a      	ldr	r2, [r7, #0]
 80138c6:	68b9      	ldr	r1, [r7, #8]
 80138c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138ca:	f000 fc45 	bl	8014158 <prvCopyDataToQueue>
 80138ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d010      	beq.n	80138fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138da:	3324      	adds	r3, #36	; 0x24
 80138dc:	4618      	mov	r0, r3
 80138de:	f001 fa09 	bl	8014cf4 <xTaskRemoveFromEventList>
 80138e2:	4603      	mov	r3, r0
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d013      	beq.n	8013910 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80138e8:	4b3f      	ldr	r3, [pc, #252]	; (80139e8 <xQueueGenericSend+0x1f8>)
 80138ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138ee:	601a      	str	r2, [r3, #0]
 80138f0:	f3bf 8f4f 	dsb	sy
 80138f4:	f3bf 8f6f 	isb	sy
 80138f8:	e00a      	b.n	8013910 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80138fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d007      	beq.n	8013910 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013900:	4b39      	ldr	r3, [pc, #228]	; (80139e8 <xQueueGenericSend+0x1f8>)
 8013902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013906:	601a      	str	r2, [r3, #0]
 8013908:	f3bf 8f4f 	dsb	sy
 801390c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013910:	f002 fa38 	bl	8015d84 <vPortExitCritical>
				return pdPASS;
 8013914:	2301      	movs	r3, #1
 8013916:	e063      	b.n	80139e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d103      	bne.n	8013926 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801391e:	f002 fa31 	bl	8015d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013922:	2300      	movs	r3, #0
 8013924:	e05c      	b.n	80139e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013928:	2b00      	cmp	r3, #0
 801392a:	d106      	bne.n	801393a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801392c:	f107 0314 	add.w	r3, r7, #20
 8013930:	4618      	mov	r0, r3
 8013932:	f001 fa43 	bl	8014dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013936:	2301      	movs	r3, #1
 8013938:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801393a:	f002 fa23 	bl	8015d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801393e:	f000 ffb5 	bl	80148ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013942:	f002 f9ef 	bl	8015d24 <vPortEnterCritical>
 8013946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801394c:	b25b      	sxtb	r3, r3
 801394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013952:	d103      	bne.n	801395c <xQueueGenericSend+0x16c>
 8013954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013956:	2200      	movs	r2, #0
 8013958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801395e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013962:	b25b      	sxtb	r3, r3
 8013964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013968:	d103      	bne.n	8013972 <xQueueGenericSend+0x182>
 801396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396c:	2200      	movs	r2, #0
 801396e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013972:	f002 fa07 	bl	8015d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013976:	1d3a      	adds	r2, r7, #4
 8013978:	f107 0314 	add.w	r3, r7, #20
 801397c:	4611      	mov	r1, r2
 801397e:	4618      	mov	r0, r3
 8013980:	f001 fa32 	bl	8014de8 <xTaskCheckForTimeOut>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d124      	bne.n	80139d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801398a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801398c:	f000 fcdc 	bl	8014348 <prvIsQueueFull>
 8013990:	4603      	mov	r3, r0
 8013992:	2b00      	cmp	r3, #0
 8013994:	d018      	beq.n	80139c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013998:	3310      	adds	r3, #16
 801399a:	687a      	ldr	r2, [r7, #4]
 801399c:	4611      	mov	r1, r2
 801399e:	4618      	mov	r0, r3
 80139a0:	f001 f958 	bl	8014c54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80139a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139a6:	f000 fc67 	bl	8014278 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80139aa:	f000 ff8d 	bl	80148c8 <xTaskResumeAll>
 80139ae:	4603      	mov	r3, r0
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	f47f af7c 	bne.w	80138ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80139b6:	4b0c      	ldr	r3, [pc, #48]	; (80139e8 <xQueueGenericSend+0x1f8>)
 80139b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139bc:	601a      	str	r2, [r3, #0]
 80139be:	f3bf 8f4f 	dsb	sy
 80139c2:	f3bf 8f6f 	isb	sy
 80139c6:	e772      	b.n	80138ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80139c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ca:	f000 fc55 	bl	8014278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80139ce:	f000 ff7b 	bl	80148c8 <xTaskResumeAll>
 80139d2:	e76c      	b.n	80138ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80139d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139d6:	f000 fc4f 	bl	8014278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80139da:	f000 ff75 	bl	80148c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80139de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3738      	adds	r7, #56	; 0x38
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	e000ed04 	.word	0xe000ed04

080139ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b08e      	sub	sp, #56	; 0x38
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	60f8      	str	r0, [r7, #12]
 80139f4:	60b9      	str	r1, [r7, #8]
 80139f6:	607a      	str	r2, [r7, #4]
 80139f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80139fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d10a      	bne.n	8013a1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a08:	f383 8811 	msr	BASEPRI, r3
 8013a0c:	f3bf 8f6f 	isb	sy
 8013a10:	f3bf 8f4f 	dsb	sy
 8013a14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013a16:	bf00      	nop
 8013a18:	e7fe      	b.n	8013a18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d103      	bne.n	8013a28 <xQueueGenericSendFromISR+0x3c>
 8013a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d101      	bne.n	8013a2c <xQueueGenericSendFromISR+0x40>
 8013a28:	2301      	movs	r3, #1
 8013a2a:	e000      	b.n	8013a2e <xQueueGenericSendFromISR+0x42>
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d10a      	bne.n	8013a48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a36:	f383 8811 	msr	BASEPRI, r3
 8013a3a:	f3bf 8f6f 	isb	sy
 8013a3e:	f3bf 8f4f 	dsb	sy
 8013a42:	623b      	str	r3, [r7, #32]
}
 8013a44:	bf00      	nop
 8013a46:	e7fe      	b.n	8013a46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	2b02      	cmp	r3, #2
 8013a4c:	d103      	bne.n	8013a56 <xQueueGenericSendFromISR+0x6a>
 8013a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d101      	bne.n	8013a5a <xQueueGenericSendFromISR+0x6e>
 8013a56:	2301      	movs	r3, #1
 8013a58:	e000      	b.n	8013a5c <xQueueGenericSendFromISR+0x70>
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d10a      	bne.n	8013a76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a64:	f383 8811 	msr	BASEPRI, r3
 8013a68:	f3bf 8f6f 	isb	sy
 8013a6c:	f3bf 8f4f 	dsb	sy
 8013a70:	61fb      	str	r3, [r7, #28]
}
 8013a72:	bf00      	nop
 8013a74:	e7fe      	b.n	8013a74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a76:	f002 fa37 	bl	8015ee8 <vPortValidateInterruptPriority>
	__asm volatile
 8013a7a:	f3ef 8211 	mrs	r2, BASEPRI
 8013a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a82:	f383 8811 	msr	BASEPRI, r3
 8013a86:	f3bf 8f6f 	isb	sy
 8013a8a:	f3bf 8f4f 	dsb	sy
 8013a8e:	61ba      	str	r2, [r7, #24]
 8013a90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013a92:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d302      	bcc.n	8013aa8 <xQueueGenericSendFromISR+0xbc>
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	2b02      	cmp	r3, #2
 8013aa6:	d12c      	bne.n	8013b02 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ab2:	683a      	ldr	r2, [r7, #0]
 8013ab4:	68b9      	ldr	r1, [r7, #8]
 8013ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ab8:	f000 fb4e 	bl	8014158 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013abc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ac4:	d112      	bne.n	8013aec <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d016      	beq.n	8013afc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad0:	3324      	adds	r3, #36	; 0x24
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f001 f90e 	bl	8014cf4 <xTaskRemoveFromEventList>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d00e      	beq.n	8013afc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d00b      	beq.n	8013afc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2201      	movs	r2, #1
 8013ae8:	601a      	str	r2, [r3, #0]
 8013aea:	e007      	b.n	8013afc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013aec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013af0:	3301      	adds	r3, #1
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	b25a      	sxtb	r2, r3
 8013af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013afc:	2301      	movs	r3, #1
 8013afe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013b00:	e001      	b.n	8013b06 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013b02:	2300      	movs	r3, #0
 8013b04:	637b      	str	r3, [r7, #52]	; 0x34
 8013b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b08:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	f383 8811 	msr	BASEPRI, r3
}
 8013b10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	3738      	adds	r7, #56	; 0x38
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd80      	pop	{r7, pc}

08013b1c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b08e      	sub	sp, #56	; 0x38
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10a      	bne.n	8013b46 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8013b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b34:	f383 8811 	msr	BASEPRI, r3
 8013b38:	f3bf 8f6f 	isb	sy
 8013b3c:	f3bf 8f4f 	dsb	sy
 8013b40:	623b      	str	r3, [r7, #32]
}
 8013b42:	bf00      	nop
 8013b44:	e7fe      	b.n	8013b44 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d00a      	beq.n	8013b64 <xQueueGiveFromISR+0x48>
	__asm volatile
 8013b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b52:	f383 8811 	msr	BASEPRI, r3
 8013b56:	f3bf 8f6f 	isb	sy
 8013b5a:	f3bf 8f4f 	dsb	sy
 8013b5e:	61fb      	str	r3, [r7, #28]
}
 8013b60:	bf00      	nop
 8013b62:	e7fe      	b.n	8013b62 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d103      	bne.n	8013b74 <xQueueGiveFromISR+0x58>
 8013b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b6e:	689b      	ldr	r3, [r3, #8]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d101      	bne.n	8013b78 <xQueueGiveFromISR+0x5c>
 8013b74:	2301      	movs	r3, #1
 8013b76:	e000      	b.n	8013b7a <xQueueGiveFromISR+0x5e>
 8013b78:	2300      	movs	r3, #0
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d10a      	bne.n	8013b94 <xQueueGiveFromISR+0x78>
	__asm volatile
 8013b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b82:	f383 8811 	msr	BASEPRI, r3
 8013b86:	f3bf 8f6f 	isb	sy
 8013b8a:	f3bf 8f4f 	dsb	sy
 8013b8e:	61bb      	str	r3, [r7, #24]
}
 8013b90:	bf00      	nop
 8013b92:	e7fe      	b.n	8013b92 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b94:	f002 f9a8 	bl	8015ee8 <vPortValidateInterruptPriority>
	__asm volatile
 8013b98:	f3ef 8211 	mrs	r2, BASEPRI
 8013b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba0:	f383 8811 	msr	BASEPRI, r3
 8013ba4:	f3bf 8f6f 	isb	sy
 8013ba8:	f3bf 8f4f 	dsb	sy
 8013bac:	617a      	str	r2, [r7, #20]
 8013bae:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013bb0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bb8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d22b      	bcs.n	8013c1c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd0:	1c5a      	adds	r2, r3, #1
 8013bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013bd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bde:	d112      	bne.n	8013c06 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d016      	beq.n	8013c16 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bea:	3324      	adds	r3, #36	; 0x24
 8013bec:	4618      	mov	r0, r3
 8013bee:	f001 f881 	bl	8014cf4 <xTaskRemoveFromEventList>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d00e      	beq.n	8013c16 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d00b      	beq.n	8013c16 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	2201      	movs	r2, #1
 8013c02:	601a      	str	r2, [r3, #0]
 8013c04:	e007      	b.n	8013c16 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	b25a      	sxtb	r2, r3
 8013c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013c16:	2301      	movs	r3, #1
 8013c18:	637b      	str	r3, [r7, #52]	; 0x34
 8013c1a:	e001      	b.n	8013c20 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8013c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c22:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	f383 8811 	msr	BASEPRI, r3
}
 8013c2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	3738      	adds	r7, #56	; 0x38
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}
	...

08013c38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b08c      	sub	sp, #48	; 0x30
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	60f8      	str	r0, [r7, #12]
 8013c40:	60b9      	str	r1, [r7, #8]
 8013c42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013c44:	2300      	movs	r3, #0
 8013c46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d10a      	bne.n	8013c68 <xQueueReceive+0x30>
	__asm volatile
 8013c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c56:	f383 8811 	msr	BASEPRI, r3
 8013c5a:	f3bf 8f6f 	isb	sy
 8013c5e:	f3bf 8f4f 	dsb	sy
 8013c62:	623b      	str	r3, [r7, #32]
}
 8013c64:	bf00      	nop
 8013c66:	e7fe      	b.n	8013c66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d103      	bne.n	8013c76 <xQueueReceive+0x3e>
 8013c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d101      	bne.n	8013c7a <xQueueReceive+0x42>
 8013c76:	2301      	movs	r3, #1
 8013c78:	e000      	b.n	8013c7c <xQueueReceive+0x44>
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d10a      	bne.n	8013c96 <xQueueReceive+0x5e>
	__asm volatile
 8013c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c84:	f383 8811 	msr	BASEPRI, r3
 8013c88:	f3bf 8f6f 	isb	sy
 8013c8c:	f3bf 8f4f 	dsb	sy
 8013c90:	61fb      	str	r3, [r7, #28]
}
 8013c92:	bf00      	nop
 8013c94:	e7fe      	b.n	8013c94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c96:	f001 f9eb 	bl	8015070 <xTaskGetSchedulerState>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d102      	bne.n	8013ca6 <xQueueReceive+0x6e>
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d101      	bne.n	8013caa <xQueueReceive+0x72>
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	e000      	b.n	8013cac <xQueueReceive+0x74>
 8013caa:	2300      	movs	r3, #0
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d10a      	bne.n	8013cc6 <xQueueReceive+0x8e>
	__asm volatile
 8013cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb4:	f383 8811 	msr	BASEPRI, r3
 8013cb8:	f3bf 8f6f 	isb	sy
 8013cbc:	f3bf 8f4f 	dsb	sy
 8013cc0:	61bb      	str	r3, [r7, #24]
}
 8013cc2:	bf00      	nop
 8013cc4:	e7fe      	b.n	8013cc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013cc6:	f002 f82d 	bl	8015d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d01f      	beq.n	8013d16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013cd6:	68b9      	ldr	r1, [r7, #8]
 8013cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cda:	f000 faa7 	bl	801422c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce0:	1e5a      	subs	r2, r3, #1
 8013ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce8:	691b      	ldr	r3, [r3, #16]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d00f      	beq.n	8013d0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf0:	3310      	adds	r3, #16
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f000 fffe 	bl	8014cf4 <xTaskRemoveFromEventList>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d007      	beq.n	8013d0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013cfe:	4b3d      	ldr	r3, [pc, #244]	; (8013df4 <xQueueReceive+0x1bc>)
 8013d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d04:	601a      	str	r2, [r3, #0]
 8013d06:	f3bf 8f4f 	dsb	sy
 8013d0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013d0e:	f002 f839 	bl	8015d84 <vPortExitCritical>
				return pdPASS;
 8013d12:	2301      	movs	r3, #1
 8013d14:	e069      	b.n	8013dea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d103      	bne.n	8013d24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013d1c:	f002 f832 	bl	8015d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013d20:	2300      	movs	r3, #0
 8013d22:	e062      	b.n	8013dea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d106      	bne.n	8013d38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013d2a:	f107 0310 	add.w	r3, r7, #16
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f001 f844 	bl	8014dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013d34:	2301      	movs	r3, #1
 8013d36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013d38:	f002 f824 	bl	8015d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013d3c:	f000 fdb6 	bl	80148ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013d40:	f001 fff0 	bl	8015d24 <vPortEnterCritical>
 8013d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d4a:	b25b      	sxtb	r3, r3
 8013d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d50:	d103      	bne.n	8013d5a <xQueueReceive+0x122>
 8013d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d54:	2200      	movs	r2, #0
 8013d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d60:	b25b      	sxtb	r3, r3
 8013d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d66:	d103      	bne.n	8013d70 <xQueueReceive+0x138>
 8013d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d70:	f002 f808 	bl	8015d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d74:	1d3a      	adds	r2, r7, #4
 8013d76:	f107 0310 	add.w	r3, r7, #16
 8013d7a:	4611      	mov	r1, r2
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f001 f833 	bl	8014de8 <xTaskCheckForTimeOut>
 8013d82:	4603      	mov	r3, r0
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d123      	bne.n	8013dd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d8a:	f000 fac7 	bl	801431c <prvIsQueueEmpty>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d017      	beq.n	8013dc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d96:	3324      	adds	r3, #36	; 0x24
 8013d98:	687a      	ldr	r2, [r7, #4]
 8013d9a:	4611      	mov	r1, r2
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f000 ff59 	bl	8014c54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013da4:	f000 fa68 	bl	8014278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013da8:	f000 fd8e 	bl	80148c8 <xTaskResumeAll>
 8013dac:	4603      	mov	r3, r0
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d189      	bne.n	8013cc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013db2:	4b10      	ldr	r3, [pc, #64]	; (8013df4 <xQueueReceive+0x1bc>)
 8013db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013db8:	601a      	str	r2, [r3, #0]
 8013dba:	f3bf 8f4f 	dsb	sy
 8013dbe:	f3bf 8f6f 	isb	sy
 8013dc2:	e780      	b.n	8013cc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dc6:	f000 fa57 	bl	8014278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013dca:	f000 fd7d 	bl	80148c8 <xTaskResumeAll>
 8013dce:	e77a      	b.n	8013cc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dd2:	f000 fa51 	bl	8014278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013dd6:	f000 fd77 	bl	80148c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ddc:	f000 fa9e 	bl	801431c <prvIsQueueEmpty>
 8013de0:	4603      	mov	r3, r0
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	f43f af6f 	beq.w	8013cc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013de8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3730      	adds	r7, #48	; 0x30
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	e000ed04 	.word	0xe000ed04

08013df8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b08e      	sub	sp, #56	; 0x38
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013e02:	2300      	movs	r3, #0
 8013e04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d10a      	bne.n	8013e2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8013e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e18:	f383 8811 	msr	BASEPRI, r3
 8013e1c:	f3bf 8f6f 	isb	sy
 8013e20:	f3bf 8f4f 	dsb	sy
 8013e24:	623b      	str	r3, [r7, #32]
}
 8013e26:	bf00      	nop
 8013e28:	e7fe      	b.n	8013e28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d00a      	beq.n	8013e48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8013e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e36:	f383 8811 	msr	BASEPRI, r3
 8013e3a:	f3bf 8f6f 	isb	sy
 8013e3e:	f3bf 8f4f 	dsb	sy
 8013e42:	61fb      	str	r3, [r7, #28]
}
 8013e44:	bf00      	nop
 8013e46:	e7fe      	b.n	8013e46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013e48:	f001 f912 	bl	8015070 <xTaskGetSchedulerState>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d102      	bne.n	8013e58 <xQueueSemaphoreTake+0x60>
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d101      	bne.n	8013e5c <xQueueSemaphoreTake+0x64>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	e000      	b.n	8013e5e <xQueueSemaphoreTake+0x66>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d10a      	bne.n	8013e78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8013e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e66:	f383 8811 	msr	BASEPRI, r3
 8013e6a:	f3bf 8f6f 	isb	sy
 8013e6e:	f3bf 8f4f 	dsb	sy
 8013e72:	61bb      	str	r3, [r7, #24]
}
 8013e74:	bf00      	nop
 8013e76:	e7fe      	b.n	8013e76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013e78:	f001 ff54 	bl	8015d24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d024      	beq.n	8013ed2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e8a:	1e5a      	subs	r2, r3, #1
 8013e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d104      	bne.n	8013ea2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013e98:	f001 fa60 	bl	801535c <pvTaskIncrementMutexHeldCount>
 8013e9c:	4602      	mov	r2, r0
 8013e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea4:	691b      	ldr	r3, [r3, #16]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d00f      	beq.n	8013eca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eac:	3310      	adds	r3, #16
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f000 ff20 	bl	8014cf4 <xTaskRemoveFromEventList>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d007      	beq.n	8013eca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013eba:	4b54      	ldr	r3, [pc, #336]	; (801400c <xQueueSemaphoreTake+0x214>)
 8013ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ec0:	601a      	str	r2, [r3, #0]
 8013ec2:	f3bf 8f4f 	dsb	sy
 8013ec6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013eca:	f001 ff5b 	bl	8015d84 <vPortExitCritical>
				return pdPASS;
 8013ece:	2301      	movs	r3, #1
 8013ed0:	e097      	b.n	8014002 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d111      	bne.n	8013efc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d00a      	beq.n	8013ef4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8013ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ee2:	f383 8811 	msr	BASEPRI, r3
 8013ee6:	f3bf 8f6f 	isb	sy
 8013eea:	f3bf 8f4f 	dsb	sy
 8013eee:	617b      	str	r3, [r7, #20]
}
 8013ef0:	bf00      	nop
 8013ef2:	e7fe      	b.n	8013ef2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013ef4:	f001 ff46 	bl	8015d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013ef8:	2300      	movs	r3, #0
 8013efa:	e082      	b.n	8014002 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d106      	bne.n	8013f10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013f02:	f107 030c 	add.w	r3, r7, #12
 8013f06:	4618      	mov	r0, r3
 8013f08:	f000 ff58 	bl	8014dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013f10:	f001 ff38 	bl	8015d84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013f14:	f000 fcca 	bl	80148ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013f18:	f001 ff04 	bl	8015d24 <vPortEnterCritical>
 8013f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f22:	b25b      	sxtb	r3, r3
 8013f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f28:	d103      	bne.n	8013f32 <xQueueSemaphoreTake+0x13a>
 8013f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f38:	b25b      	sxtb	r3, r3
 8013f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f3e:	d103      	bne.n	8013f48 <xQueueSemaphoreTake+0x150>
 8013f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f42:	2200      	movs	r2, #0
 8013f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013f48:	f001 ff1c 	bl	8015d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013f4c:	463a      	mov	r2, r7
 8013f4e:	f107 030c 	add.w	r3, r7, #12
 8013f52:	4611      	mov	r1, r2
 8013f54:	4618      	mov	r0, r3
 8013f56:	f000 ff47 	bl	8014de8 <xTaskCheckForTimeOut>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d132      	bne.n	8013fc6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f62:	f000 f9db 	bl	801431c <prvIsQueueEmpty>
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d026      	beq.n	8013fba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d109      	bne.n	8013f88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8013f74:	f001 fed6 	bl	8015d24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7a:	689b      	ldr	r3, [r3, #8]
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f001 f895 	bl	80150ac <xTaskPriorityInherit>
 8013f82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013f84:	f001 fefe 	bl	8015d84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f8a:	3324      	adds	r3, #36	; 0x24
 8013f8c:	683a      	ldr	r2, [r7, #0]
 8013f8e:	4611      	mov	r1, r2
 8013f90:	4618      	mov	r0, r3
 8013f92:	f000 fe5f 	bl	8014c54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f98:	f000 f96e 	bl	8014278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013f9c:	f000 fc94 	bl	80148c8 <xTaskResumeAll>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	f47f af68 	bne.w	8013e78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8013fa8:	4b18      	ldr	r3, [pc, #96]	; (801400c <xQueueSemaphoreTake+0x214>)
 8013faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fae:	601a      	str	r2, [r3, #0]
 8013fb0:	f3bf 8f4f 	dsb	sy
 8013fb4:	f3bf 8f6f 	isb	sy
 8013fb8:	e75e      	b.n	8013e78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013fba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fbc:	f000 f95c 	bl	8014278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013fc0:	f000 fc82 	bl	80148c8 <xTaskResumeAll>
 8013fc4:	e758      	b.n	8013e78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fc8:	f000 f956 	bl	8014278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013fcc:	f000 fc7c 	bl	80148c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013fd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fd2:	f000 f9a3 	bl	801431c <prvIsQueueEmpty>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	f43f af4d 	beq.w	8013e78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d00d      	beq.n	8014000 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013fe4:	f001 fe9e 	bl	8015d24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fea:	f000 f89d 	bl	8014128 <prvGetDisinheritPriorityAfterTimeout>
 8013fee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff2:	689b      	ldr	r3, [r3, #8]
 8013ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f001 f92e 	bl	8015258 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013ffc:	f001 fec2 	bl	8015d84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014002:	4618      	mov	r0, r3
 8014004:	3738      	adds	r7, #56	; 0x38
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}
 801400a:	bf00      	nop
 801400c:	e000ed04 	.word	0xe000ed04

08014010 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b08e      	sub	sp, #56	; 0x38
 8014014:	af00      	add	r7, sp, #0
 8014016:	60f8      	str	r0, [r7, #12]
 8014018:	60b9      	str	r1, [r7, #8]
 801401a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014022:	2b00      	cmp	r3, #0
 8014024:	d10a      	bne.n	801403c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801402a:	f383 8811 	msr	BASEPRI, r3
 801402e:	f3bf 8f6f 	isb	sy
 8014032:	f3bf 8f4f 	dsb	sy
 8014036:	623b      	str	r3, [r7, #32]
}
 8014038:	bf00      	nop
 801403a:	e7fe      	b.n	801403a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d103      	bne.n	801404a <xQueueReceiveFromISR+0x3a>
 8014042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014046:	2b00      	cmp	r3, #0
 8014048:	d101      	bne.n	801404e <xQueueReceiveFromISR+0x3e>
 801404a:	2301      	movs	r3, #1
 801404c:	e000      	b.n	8014050 <xQueueReceiveFromISR+0x40>
 801404e:	2300      	movs	r3, #0
 8014050:	2b00      	cmp	r3, #0
 8014052:	d10a      	bne.n	801406a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014058:	f383 8811 	msr	BASEPRI, r3
 801405c:	f3bf 8f6f 	isb	sy
 8014060:	f3bf 8f4f 	dsb	sy
 8014064:	61fb      	str	r3, [r7, #28]
}
 8014066:	bf00      	nop
 8014068:	e7fe      	b.n	8014068 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801406a:	f001 ff3d 	bl	8015ee8 <vPortValidateInterruptPriority>
	__asm volatile
 801406e:	f3ef 8211 	mrs	r2, BASEPRI
 8014072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014076:	f383 8811 	msr	BASEPRI, r3
 801407a:	f3bf 8f6f 	isb	sy
 801407e:	f3bf 8f4f 	dsb	sy
 8014082:	61ba      	str	r2, [r7, #24]
 8014084:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014086:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014088:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801408e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014092:	2b00      	cmp	r3, #0
 8014094:	d02f      	beq.n	80140f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801409c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80140a0:	68b9      	ldr	r1, [r7, #8]
 80140a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140a4:	f000 f8c2 	bl	801422c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80140a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140aa:	1e5a      	subs	r2, r3, #1
 80140ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80140b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80140b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b8:	d112      	bne.n	80140e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80140ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140bc:	691b      	ldr	r3, [r3, #16]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d016      	beq.n	80140f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80140c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c4:	3310      	adds	r3, #16
 80140c6:	4618      	mov	r0, r3
 80140c8:	f000 fe14 	bl	8014cf4 <xTaskRemoveFromEventList>
 80140cc:	4603      	mov	r3, r0
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d00e      	beq.n	80140f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d00b      	beq.n	80140f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2201      	movs	r2, #1
 80140dc:	601a      	str	r2, [r3, #0]
 80140de:	e007      	b.n	80140f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80140e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140e4:	3301      	adds	r3, #1
 80140e6:	b2db      	uxtb	r3, r3
 80140e8:	b25a      	sxtb	r2, r3
 80140ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80140f0:	2301      	movs	r3, #1
 80140f2:	637b      	str	r3, [r7, #52]	; 0x34
 80140f4:	e001      	b.n	80140fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80140f6:	2300      	movs	r3, #0
 80140f8:	637b      	str	r3, [r7, #52]	; 0x34
 80140fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80140fe:	693b      	ldr	r3, [r7, #16]
 8014100:	f383 8811 	msr	BASEPRI, r3
}
 8014104:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014108:	4618      	mov	r0, r3
 801410a:	3738      	adds	r7, #56	; 0x38
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}

08014110 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8014110:	b480      	push	{r7}
 8014112:	b083      	sub	sp, #12
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 801411c:	4618      	mov	r0, r3
 801411e:	370c      	adds	r7, #12
 8014120:	46bd      	mov	sp, r7
 8014122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014126:	4770      	bx	lr

08014128 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014128:	b480      	push	{r7}
 801412a:	b085      	sub	sp, #20
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014134:	2b00      	cmp	r3, #0
 8014136:	d006      	beq.n	8014146 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014142:	60fb      	str	r3, [r7, #12]
 8014144:	e001      	b.n	801414a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014146:	2300      	movs	r3, #0
 8014148:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801414a:	68fb      	ldr	r3, [r7, #12]
	}
 801414c:	4618      	mov	r0, r3
 801414e:	3714      	adds	r7, #20
 8014150:	46bd      	mov	sp, r7
 8014152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014156:	4770      	bx	lr

08014158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b086      	sub	sp, #24
 801415c:	af00      	add	r7, sp, #0
 801415e:	60f8      	str	r0, [r7, #12]
 8014160:	60b9      	str	r1, [r7, #8]
 8014162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014164:	2300      	movs	r3, #0
 8014166:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801416c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014172:	2b00      	cmp	r3, #0
 8014174:	d10d      	bne.n	8014192 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d14d      	bne.n	801421a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	689b      	ldr	r3, [r3, #8]
 8014182:	4618      	mov	r0, r3
 8014184:	f000 fffa 	bl	801517c <xTaskPriorityDisinherit>
 8014188:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2200      	movs	r2, #0
 801418e:	609a      	str	r2, [r3, #8]
 8014190:	e043      	b.n	801421a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d119      	bne.n	80141cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	6858      	ldr	r0, [r3, #4]
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141a0:	461a      	mov	r2, r3
 80141a2:	68b9      	ldr	r1, [r7, #8]
 80141a4:	f002 fd0c 	bl	8016bc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	685a      	ldr	r2, [r3, #4]
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141b0:	441a      	add	r2, r3
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	685a      	ldr	r2, [r3, #4]
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	689b      	ldr	r3, [r3, #8]
 80141be:	429a      	cmp	r2, r3
 80141c0:	d32b      	bcc.n	801421a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	681a      	ldr	r2, [r3, #0]
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	605a      	str	r2, [r3, #4]
 80141ca:	e026      	b.n	801421a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	68d8      	ldr	r0, [r3, #12]
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141d4:	461a      	mov	r2, r3
 80141d6:	68b9      	ldr	r1, [r7, #8]
 80141d8:	f002 fcf2 	bl	8016bc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	68da      	ldr	r2, [r3, #12]
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141e4:	425b      	negs	r3, r3
 80141e6:	441a      	add	r2, r3
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	68da      	ldr	r2, [r3, #12]
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d207      	bcs.n	8014208 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	689a      	ldr	r2, [r3, #8]
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014200:	425b      	negs	r3, r3
 8014202:	441a      	add	r2, r3
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2b02      	cmp	r3, #2
 801420c:	d105      	bne.n	801421a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801420e:	693b      	ldr	r3, [r7, #16]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d002      	beq.n	801421a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	3b01      	subs	r3, #1
 8014218:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801421a:	693b      	ldr	r3, [r7, #16]
 801421c:	1c5a      	adds	r2, r3, #1
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014222:	697b      	ldr	r3, [r7, #20]
}
 8014224:	4618      	mov	r0, r3
 8014226:	3718      	adds	r7, #24
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}

0801422c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801423a:	2b00      	cmp	r3, #0
 801423c:	d018      	beq.n	8014270 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	68da      	ldr	r2, [r3, #12]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014246:	441a      	add	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	68da      	ldr	r2, [r3, #12]
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	689b      	ldr	r3, [r3, #8]
 8014254:	429a      	cmp	r2, r3
 8014256:	d303      	bcc.n	8014260 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681a      	ldr	r2, [r3, #0]
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	68d9      	ldr	r1, [r3, #12]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014268:	461a      	mov	r2, r3
 801426a:	6838      	ldr	r0, [r7, #0]
 801426c:	f002 fca8 	bl	8016bc0 <memcpy>
	}
}
 8014270:	bf00      	nop
 8014272:	3708      	adds	r7, #8
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}

08014278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014280:	f001 fd50 	bl	8015d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801428a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801428c:	e011      	b.n	80142b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014292:	2b00      	cmp	r3, #0
 8014294:	d012      	beq.n	80142bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	3324      	adds	r3, #36	; 0x24
 801429a:	4618      	mov	r0, r3
 801429c:	f000 fd2a 	bl	8014cf4 <xTaskRemoveFromEventList>
 80142a0:	4603      	mov	r3, r0
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d001      	beq.n	80142aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80142a6:	f000 fe01 	bl	8014eac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80142aa:	7bfb      	ldrb	r3, [r7, #15]
 80142ac:	3b01      	subs	r3, #1
 80142ae:	b2db      	uxtb	r3, r3
 80142b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80142b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	dce9      	bgt.n	801428e <prvUnlockQueue+0x16>
 80142ba:	e000      	b.n	80142be <prvUnlockQueue+0x46>
					break;
 80142bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	22ff      	movs	r2, #255	; 0xff
 80142c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80142c6:	f001 fd5d 	bl	8015d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80142ca:	f001 fd2b 	bl	8015d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80142d6:	e011      	b.n	80142fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	691b      	ldr	r3, [r3, #16]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d012      	beq.n	8014306 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	3310      	adds	r3, #16
 80142e4:	4618      	mov	r0, r3
 80142e6:	f000 fd05 	bl	8014cf4 <xTaskRemoveFromEventList>
 80142ea:	4603      	mov	r3, r0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d001      	beq.n	80142f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80142f0:	f000 fddc 	bl	8014eac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80142f4:	7bbb      	ldrb	r3, [r7, #14]
 80142f6:	3b01      	subs	r3, #1
 80142f8:	b2db      	uxtb	r3, r3
 80142fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80142fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014300:	2b00      	cmp	r3, #0
 8014302:	dce9      	bgt.n	80142d8 <prvUnlockQueue+0x60>
 8014304:	e000      	b.n	8014308 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014306:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	22ff      	movs	r2, #255	; 0xff
 801430c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014310:	f001 fd38 	bl	8015d84 <vPortExitCritical>
}
 8014314:	bf00      	nop
 8014316:	3710      	adds	r7, #16
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}

0801431c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b084      	sub	sp, #16
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014324:	f001 fcfe 	bl	8015d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801432c:	2b00      	cmp	r3, #0
 801432e:	d102      	bne.n	8014336 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014330:	2301      	movs	r3, #1
 8014332:	60fb      	str	r3, [r7, #12]
 8014334:	e001      	b.n	801433a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014336:	2300      	movs	r3, #0
 8014338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801433a:	f001 fd23 	bl	8015d84 <vPortExitCritical>

	return xReturn;
 801433e:	68fb      	ldr	r3, [r7, #12]
}
 8014340:	4618      	mov	r0, r3
 8014342:	3710      	adds	r7, #16
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}

08014348 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b084      	sub	sp, #16
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014350:	f001 fce8 	bl	8015d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801435c:	429a      	cmp	r2, r3
 801435e:	d102      	bne.n	8014366 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014360:	2301      	movs	r3, #1
 8014362:	60fb      	str	r3, [r7, #12]
 8014364:	e001      	b.n	801436a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014366:	2300      	movs	r3, #0
 8014368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801436a:	f001 fd0b 	bl	8015d84 <vPortExitCritical>

	return xReturn;
 801436e:	68fb      	ldr	r3, [r7, #12]
}
 8014370:	4618      	mov	r0, r3
 8014372:	3710      	adds	r7, #16
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014378:	b480      	push	{r7}
 801437a:	b085      	sub	sp, #20
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014382:	2300      	movs	r3, #0
 8014384:	60fb      	str	r3, [r7, #12]
 8014386:	e014      	b.n	80143b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014388:	4a0f      	ldr	r2, [pc, #60]	; (80143c8 <vQueueAddToRegistry+0x50>)
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d10b      	bne.n	80143ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014394:	490c      	ldr	r1, [pc, #48]	; (80143c8 <vQueueAddToRegistry+0x50>)
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	683a      	ldr	r2, [r7, #0]
 801439a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801439e:	4a0a      	ldr	r2, [pc, #40]	; (80143c8 <vQueueAddToRegistry+0x50>)
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	00db      	lsls	r3, r3, #3
 80143a4:	4413      	add	r3, r2
 80143a6:	687a      	ldr	r2, [r7, #4]
 80143a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80143aa:	e006      	b.n	80143ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	3301      	adds	r3, #1
 80143b0:	60fb      	str	r3, [r7, #12]
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	2b07      	cmp	r3, #7
 80143b6:	d9e7      	bls.n	8014388 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80143b8:	bf00      	nop
 80143ba:	bf00      	nop
 80143bc:	3714      	adds	r7, #20
 80143be:	46bd      	mov	sp, r7
 80143c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c4:	4770      	bx	lr
 80143c6:	bf00      	nop
 80143c8:	20002c30 	.word	0x20002c30

080143cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b086      	sub	sp, #24
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	60f8      	str	r0, [r7, #12]
 80143d4:	60b9      	str	r1, [r7, #8]
 80143d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80143dc:	f001 fca2 	bl	8015d24 <vPortEnterCritical>
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143e6:	b25b      	sxtb	r3, r3
 80143e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143ec:	d103      	bne.n	80143f6 <vQueueWaitForMessageRestricted+0x2a>
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	2200      	movs	r2, #0
 80143f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80143fc:	b25b      	sxtb	r3, r3
 80143fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014402:	d103      	bne.n	801440c <vQueueWaitForMessageRestricted+0x40>
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	2200      	movs	r2, #0
 8014408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801440c:	f001 fcba 	bl	8015d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014410:	697b      	ldr	r3, [r7, #20]
 8014412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014414:	2b00      	cmp	r3, #0
 8014416:	d106      	bne.n	8014426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	3324      	adds	r3, #36	; 0x24
 801441c:	687a      	ldr	r2, [r7, #4]
 801441e:	68b9      	ldr	r1, [r7, #8]
 8014420:	4618      	mov	r0, r3
 8014422:	f000 fc3b 	bl	8014c9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014426:	6978      	ldr	r0, [r7, #20]
 8014428:	f7ff ff26 	bl	8014278 <prvUnlockQueue>
	}
 801442c:	bf00      	nop
 801442e:	3718      	adds	r7, #24
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}

08014434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014434:	b580      	push	{r7, lr}
 8014436:	b08e      	sub	sp, #56	; 0x38
 8014438:	af04      	add	r7, sp, #16
 801443a:	60f8      	str	r0, [r7, #12]
 801443c:	60b9      	str	r1, [r7, #8]
 801443e:	607a      	str	r2, [r7, #4]
 8014440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014444:	2b00      	cmp	r3, #0
 8014446:	d10a      	bne.n	801445e <xTaskCreateStatic+0x2a>
	__asm volatile
 8014448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801444c:	f383 8811 	msr	BASEPRI, r3
 8014450:	f3bf 8f6f 	isb	sy
 8014454:	f3bf 8f4f 	dsb	sy
 8014458:	623b      	str	r3, [r7, #32]
}
 801445a:	bf00      	nop
 801445c:	e7fe      	b.n	801445c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014460:	2b00      	cmp	r3, #0
 8014462:	d10a      	bne.n	801447a <xTaskCreateStatic+0x46>
	__asm volatile
 8014464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014468:	f383 8811 	msr	BASEPRI, r3
 801446c:	f3bf 8f6f 	isb	sy
 8014470:	f3bf 8f4f 	dsb	sy
 8014474:	61fb      	str	r3, [r7, #28]
}
 8014476:	bf00      	nop
 8014478:	e7fe      	b.n	8014478 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801447a:	235c      	movs	r3, #92	; 0x5c
 801447c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801447e:	693b      	ldr	r3, [r7, #16]
 8014480:	2b5c      	cmp	r3, #92	; 0x5c
 8014482:	d00a      	beq.n	801449a <xTaskCreateStatic+0x66>
	__asm volatile
 8014484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014488:	f383 8811 	msr	BASEPRI, r3
 801448c:	f3bf 8f6f 	isb	sy
 8014490:	f3bf 8f4f 	dsb	sy
 8014494:	61bb      	str	r3, [r7, #24]
}
 8014496:	bf00      	nop
 8014498:	e7fe      	b.n	8014498 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801449a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d01e      	beq.n	80144e0 <xTaskCreateStatic+0xac>
 80144a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d01b      	beq.n	80144e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80144a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80144ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80144b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80144b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b4:	2202      	movs	r2, #2
 80144b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80144ba:	2300      	movs	r3, #0
 80144bc:	9303      	str	r3, [sp, #12]
 80144be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c0:	9302      	str	r3, [sp, #8]
 80144c2:	f107 0314 	add.w	r3, r7, #20
 80144c6:	9301      	str	r3, [sp, #4]
 80144c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ca:	9300      	str	r3, [sp, #0]
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	68b9      	ldr	r1, [r7, #8]
 80144d2:	68f8      	ldr	r0, [r7, #12]
 80144d4:	f000 f850 	bl	8014578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80144d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80144da:	f000 f8dd 	bl	8014698 <prvAddNewTaskToReadyList>
 80144de:	e001      	b.n	80144e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80144e0:	2300      	movs	r3, #0
 80144e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80144e4:	697b      	ldr	r3, [r7, #20]
	}
 80144e6:	4618      	mov	r0, r3
 80144e8:	3728      	adds	r7, #40	; 0x28
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}

080144ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80144ee:	b580      	push	{r7, lr}
 80144f0:	b08c      	sub	sp, #48	; 0x30
 80144f2:	af04      	add	r7, sp, #16
 80144f4:	60f8      	str	r0, [r7, #12]
 80144f6:	60b9      	str	r1, [r7, #8]
 80144f8:	603b      	str	r3, [r7, #0]
 80144fa:	4613      	mov	r3, r2
 80144fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80144fe:	88fb      	ldrh	r3, [r7, #6]
 8014500:	009b      	lsls	r3, r3, #2
 8014502:	4618      	mov	r0, r3
 8014504:	f001 fd30 	bl	8015f68 <pvPortMalloc>
 8014508:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d00e      	beq.n	801452e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014510:	205c      	movs	r0, #92	; 0x5c
 8014512:	f001 fd29 	bl	8015f68 <pvPortMalloc>
 8014516:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014518:	69fb      	ldr	r3, [r7, #28]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d003      	beq.n	8014526 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801451e:	69fb      	ldr	r3, [r7, #28]
 8014520:	697a      	ldr	r2, [r7, #20]
 8014522:	631a      	str	r2, [r3, #48]	; 0x30
 8014524:	e005      	b.n	8014532 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014526:	6978      	ldr	r0, [r7, #20]
 8014528:	f001 fde2 	bl	80160f0 <vPortFree>
 801452c:	e001      	b.n	8014532 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801452e:	2300      	movs	r3, #0
 8014530:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014532:	69fb      	ldr	r3, [r7, #28]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d017      	beq.n	8014568 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	2200      	movs	r2, #0
 801453c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014540:	88fa      	ldrh	r2, [r7, #6]
 8014542:	2300      	movs	r3, #0
 8014544:	9303      	str	r3, [sp, #12]
 8014546:	69fb      	ldr	r3, [r7, #28]
 8014548:	9302      	str	r3, [sp, #8]
 801454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801454c:	9301      	str	r3, [sp, #4]
 801454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014550:	9300      	str	r3, [sp, #0]
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	68b9      	ldr	r1, [r7, #8]
 8014556:	68f8      	ldr	r0, [r7, #12]
 8014558:	f000 f80e 	bl	8014578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801455c:	69f8      	ldr	r0, [r7, #28]
 801455e:	f000 f89b 	bl	8014698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014562:	2301      	movs	r3, #1
 8014564:	61bb      	str	r3, [r7, #24]
 8014566:	e002      	b.n	801456e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014568:	f04f 33ff 	mov.w	r3, #4294967295
 801456c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801456e:	69bb      	ldr	r3, [r7, #24]
	}
 8014570:	4618      	mov	r0, r3
 8014572:	3720      	adds	r7, #32
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b088      	sub	sp, #32
 801457c:	af00      	add	r7, sp, #0
 801457e:	60f8      	str	r0, [r7, #12]
 8014580:	60b9      	str	r1, [r7, #8]
 8014582:	607a      	str	r2, [r7, #4]
 8014584:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014588:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	009b      	lsls	r3, r3, #2
 801458e:	461a      	mov	r2, r3
 8014590:	21a5      	movs	r1, #165	; 0xa5
 8014592:	f002 fb23 	bl	8016bdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80145a0:	3b01      	subs	r3, #1
 80145a2:	009b      	lsls	r3, r3, #2
 80145a4:	4413      	add	r3, r2
 80145a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80145a8:	69bb      	ldr	r3, [r7, #24]
 80145aa:	f023 0307 	bic.w	r3, r3, #7
 80145ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80145b0:	69bb      	ldr	r3, [r7, #24]
 80145b2:	f003 0307 	and.w	r3, r3, #7
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d00a      	beq.n	80145d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80145ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145be:	f383 8811 	msr	BASEPRI, r3
 80145c2:	f3bf 8f6f 	isb	sy
 80145c6:	f3bf 8f4f 	dsb	sy
 80145ca:	617b      	str	r3, [r7, #20]
}
 80145cc:	bf00      	nop
 80145ce:	e7fe      	b.n	80145ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d01f      	beq.n	8014616 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80145d6:	2300      	movs	r3, #0
 80145d8:	61fb      	str	r3, [r7, #28]
 80145da:	e012      	b.n	8014602 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80145dc:	68ba      	ldr	r2, [r7, #8]
 80145de:	69fb      	ldr	r3, [r7, #28]
 80145e0:	4413      	add	r3, r2
 80145e2:	7819      	ldrb	r1, [r3, #0]
 80145e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145e6:	69fb      	ldr	r3, [r7, #28]
 80145e8:	4413      	add	r3, r2
 80145ea:	3334      	adds	r3, #52	; 0x34
 80145ec:	460a      	mov	r2, r1
 80145ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80145f0:	68ba      	ldr	r2, [r7, #8]
 80145f2:	69fb      	ldr	r3, [r7, #28]
 80145f4:	4413      	add	r3, r2
 80145f6:	781b      	ldrb	r3, [r3, #0]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d006      	beq.n	801460a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80145fc:	69fb      	ldr	r3, [r7, #28]
 80145fe:	3301      	adds	r3, #1
 8014600:	61fb      	str	r3, [r7, #28]
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	2b0f      	cmp	r3, #15
 8014606:	d9e9      	bls.n	80145dc <prvInitialiseNewTask+0x64>
 8014608:	e000      	b.n	801460c <prvInitialiseNewTask+0x94>
			{
				break;
 801460a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801460e:	2200      	movs	r2, #0
 8014610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014614:	e003      	b.n	801461e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014618:	2200      	movs	r2, #0
 801461a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014620:	2b37      	cmp	r3, #55	; 0x37
 8014622:	d901      	bls.n	8014628 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014624:	2337      	movs	r3, #55	; 0x37
 8014626:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801462a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801462c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014632:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014636:	2200      	movs	r2, #0
 8014638:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801463c:	3304      	adds	r3, #4
 801463e:	4618      	mov	r0, r3
 8014640:	f7fe fecc 	bl	80133dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014646:	3318      	adds	r3, #24
 8014648:	4618      	mov	r0, r3
 801464a:	f7fe fec7 	bl	80133dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014652:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014656:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014662:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014666:	2200      	movs	r2, #0
 8014668:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801466c:	2200      	movs	r2, #0
 801466e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014672:	683a      	ldr	r2, [r7, #0]
 8014674:	68f9      	ldr	r1, [r7, #12]
 8014676:	69b8      	ldr	r0, [r7, #24]
 8014678:	f001 fa26 	bl	8015ac8 <pxPortInitialiseStack>
 801467c:	4602      	mov	r2, r0
 801467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014680:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014684:	2b00      	cmp	r3, #0
 8014686:	d002      	beq.n	801468e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801468a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801468c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801468e:	bf00      	nop
 8014690:	3720      	adds	r7, #32
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
	...

08014698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b082      	sub	sp, #8
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80146a0:	f001 fb40 	bl	8015d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80146a4:	4b2d      	ldr	r3, [pc, #180]	; (801475c <prvAddNewTaskToReadyList+0xc4>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	3301      	adds	r3, #1
 80146aa:	4a2c      	ldr	r2, [pc, #176]	; (801475c <prvAddNewTaskToReadyList+0xc4>)
 80146ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80146ae:	4b2c      	ldr	r3, [pc, #176]	; (8014760 <prvAddNewTaskToReadyList+0xc8>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d109      	bne.n	80146ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80146b6:	4a2a      	ldr	r2, [pc, #168]	; (8014760 <prvAddNewTaskToReadyList+0xc8>)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80146bc:	4b27      	ldr	r3, [pc, #156]	; (801475c <prvAddNewTaskToReadyList+0xc4>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	d110      	bne.n	80146e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80146c4:	f000 fc16 	bl	8014ef4 <prvInitialiseTaskLists>
 80146c8:	e00d      	b.n	80146e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80146ca:	4b26      	ldr	r3, [pc, #152]	; (8014764 <prvAddNewTaskToReadyList+0xcc>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d109      	bne.n	80146e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80146d2:	4b23      	ldr	r3, [pc, #140]	; (8014760 <prvAddNewTaskToReadyList+0xc8>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146dc:	429a      	cmp	r2, r3
 80146de:	d802      	bhi.n	80146e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80146e0:	4a1f      	ldr	r2, [pc, #124]	; (8014760 <prvAddNewTaskToReadyList+0xc8>)
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80146e6:	4b20      	ldr	r3, [pc, #128]	; (8014768 <prvAddNewTaskToReadyList+0xd0>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	3301      	adds	r3, #1
 80146ec:	4a1e      	ldr	r2, [pc, #120]	; (8014768 <prvAddNewTaskToReadyList+0xd0>)
 80146ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80146f0:	4b1d      	ldr	r3, [pc, #116]	; (8014768 <prvAddNewTaskToReadyList+0xd0>)
 80146f2:	681a      	ldr	r2, [r3, #0]
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146fc:	4b1b      	ldr	r3, [pc, #108]	; (801476c <prvAddNewTaskToReadyList+0xd4>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	429a      	cmp	r2, r3
 8014702:	d903      	bls.n	801470c <prvAddNewTaskToReadyList+0x74>
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014708:	4a18      	ldr	r2, [pc, #96]	; (801476c <prvAddNewTaskToReadyList+0xd4>)
 801470a:	6013      	str	r3, [r2, #0]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014710:	4613      	mov	r3, r2
 8014712:	009b      	lsls	r3, r3, #2
 8014714:	4413      	add	r3, r2
 8014716:	009b      	lsls	r3, r3, #2
 8014718:	4a15      	ldr	r2, [pc, #84]	; (8014770 <prvAddNewTaskToReadyList+0xd8>)
 801471a:	441a      	add	r2, r3
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	3304      	adds	r3, #4
 8014720:	4619      	mov	r1, r3
 8014722:	4610      	mov	r0, r2
 8014724:	f7fe fe67 	bl	80133f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014728:	f001 fb2c 	bl	8015d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801472c:	4b0d      	ldr	r3, [pc, #52]	; (8014764 <prvAddNewTaskToReadyList+0xcc>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d00e      	beq.n	8014752 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014734:	4b0a      	ldr	r3, [pc, #40]	; (8014760 <prvAddNewTaskToReadyList+0xc8>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801473e:	429a      	cmp	r2, r3
 8014740:	d207      	bcs.n	8014752 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014742:	4b0c      	ldr	r3, [pc, #48]	; (8014774 <prvAddNewTaskToReadyList+0xdc>)
 8014744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014748:	601a      	str	r2, [r3, #0]
 801474a:	f3bf 8f4f 	dsb	sy
 801474e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014752:	bf00      	nop
 8014754:	3708      	adds	r7, #8
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
 801475a:	bf00      	nop
 801475c:	20003144 	.word	0x20003144
 8014760:	20002c70 	.word	0x20002c70
 8014764:	20003150 	.word	0x20003150
 8014768:	20003160 	.word	0x20003160
 801476c:	2000314c 	.word	0x2000314c
 8014770:	20002c74 	.word	0x20002c74
 8014774:	e000ed04 	.word	0xe000ed04

08014778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014780:	2300      	movs	r3, #0
 8014782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d017      	beq.n	80147ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801478a:	4b13      	ldr	r3, [pc, #76]	; (80147d8 <vTaskDelay+0x60>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d00a      	beq.n	80147a8 <vTaskDelay+0x30>
	__asm volatile
 8014792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014796:	f383 8811 	msr	BASEPRI, r3
 801479a:	f3bf 8f6f 	isb	sy
 801479e:	f3bf 8f4f 	dsb	sy
 80147a2:	60bb      	str	r3, [r7, #8]
}
 80147a4:	bf00      	nop
 80147a6:	e7fe      	b.n	80147a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80147a8:	f000 f880 	bl	80148ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80147ac:	2100      	movs	r1, #0
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f000 fde8 	bl	8015384 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80147b4:	f000 f888 	bl	80148c8 <xTaskResumeAll>
 80147b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d107      	bne.n	80147d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80147c0:	4b06      	ldr	r3, [pc, #24]	; (80147dc <vTaskDelay+0x64>)
 80147c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147c6:	601a      	str	r2, [r3, #0]
 80147c8:	f3bf 8f4f 	dsb	sy
 80147cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80147d0:	bf00      	nop
 80147d2:	3710      	adds	r7, #16
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	2000316c 	.word	0x2000316c
 80147dc:	e000ed04 	.word	0xe000ed04

080147e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b08a      	sub	sp, #40	; 0x28
 80147e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80147e6:	2300      	movs	r3, #0
 80147e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80147ea:	2300      	movs	r3, #0
 80147ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80147ee:	463a      	mov	r2, r7
 80147f0:	1d39      	adds	r1, r7, #4
 80147f2:	f107 0308 	add.w	r3, r7, #8
 80147f6:	4618      	mov	r0, r3
 80147f8:	f7fe fd9c 	bl	8013334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80147fc:	6839      	ldr	r1, [r7, #0]
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	68ba      	ldr	r2, [r7, #8]
 8014802:	9202      	str	r2, [sp, #8]
 8014804:	9301      	str	r3, [sp, #4]
 8014806:	2300      	movs	r3, #0
 8014808:	9300      	str	r3, [sp, #0]
 801480a:	2300      	movs	r3, #0
 801480c:	460a      	mov	r2, r1
 801480e:	4921      	ldr	r1, [pc, #132]	; (8014894 <vTaskStartScheduler+0xb4>)
 8014810:	4821      	ldr	r0, [pc, #132]	; (8014898 <vTaskStartScheduler+0xb8>)
 8014812:	f7ff fe0f 	bl	8014434 <xTaskCreateStatic>
 8014816:	4603      	mov	r3, r0
 8014818:	4a20      	ldr	r2, [pc, #128]	; (801489c <vTaskStartScheduler+0xbc>)
 801481a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801481c:	4b1f      	ldr	r3, [pc, #124]	; (801489c <vTaskStartScheduler+0xbc>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d002      	beq.n	801482a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014824:	2301      	movs	r3, #1
 8014826:	617b      	str	r3, [r7, #20]
 8014828:	e001      	b.n	801482e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801482a:	2300      	movs	r3, #0
 801482c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	2b01      	cmp	r3, #1
 8014832:	d102      	bne.n	801483a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014834:	f000 fdfa 	bl	801542c <xTimerCreateTimerTask>
 8014838:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	2b01      	cmp	r3, #1
 801483e:	d116      	bne.n	801486e <vTaskStartScheduler+0x8e>
	__asm volatile
 8014840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014844:	f383 8811 	msr	BASEPRI, r3
 8014848:	f3bf 8f6f 	isb	sy
 801484c:	f3bf 8f4f 	dsb	sy
 8014850:	613b      	str	r3, [r7, #16]
}
 8014852:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014854:	4b12      	ldr	r3, [pc, #72]	; (80148a0 <vTaskStartScheduler+0xc0>)
 8014856:	f04f 32ff 	mov.w	r2, #4294967295
 801485a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801485c:	4b11      	ldr	r3, [pc, #68]	; (80148a4 <vTaskStartScheduler+0xc4>)
 801485e:	2201      	movs	r2, #1
 8014860:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014862:	4b11      	ldr	r3, [pc, #68]	; (80148a8 <vTaskStartScheduler+0xc8>)
 8014864:	2200      	movs	r2, #0
 8014866:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014868:	f001 f9ba 	bl	8015be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801486c:	e00e      	b.n	801488c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014874:	d10a      	bne.n	801488c <vTaskStartScheduler+0xac>
	__asm volatile
 8014876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801487a:	f383 8811 	msr	BASEPRI, r3
 801487e:	f3bf 8f6f 	isb	sy
 8014882:	f3bf 8f4f 	dsb	sy
 8014886:	60fb      	str	r3, [r7, #12]
}
 8014888:	bf00      	nop
 801488a:	e7fe      	b.n	801488a <vTaskStartScheduler+0xaa>
}
 801488c:	bf00      	nop
 801488e:	3718      	adds	r7, #24
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}
 8014894:	08018190 	.word	0x08018190
 8014898:	08014ec5 	.word	0x08014ec5
 801489c:	20003168 	.word	0x20003168
 80148a0:	20003164 	.word	0x20003164
 80148a4:	20003150 	.word	0x20003150
 80148a8:	20003148 	.word	0x20003148

080148ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80148ac:	b480      	push	{r7}
 80148ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80148b0:	4b04      	ldr	r3, [pc, #16]	; (80148c4 <vTaskSuspendAll+0x18>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	3301      	adds	r3, #1
 80148b6:	4a03      	ldr	r2, [pc, #12]	; (80148c4 <vTaskSuspendAll+0x18>)
 80148b8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80148ba:	bf00      	nop
 80148bc:	46bd      	mov	sp, r7
 80148be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c2:	4770      	bx	lr
 80148c4:	2000316c 	.word	0x2000316c

080148c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b084      	sub	sp, #16
 80148cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80148ce:	2300      	movs	r3, #0
 80148d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80148d2:	2300      	movs	r3, #0
 80148d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80148d6:	4b42      	ldr	r3, [pc, #264]	; (80149e0 <xTaskResumeAll+0x118>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d10a      	bne.n	80148f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80148de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e2:	f383 8811 	msr	BASEPRI, r3
 80148e6:	f3bf 8f6f 	isb	sy
 80148ea:	f3bf 8f4f 	dsb	sy
 80148ee:	603b      	str	r3, [r7, #0]
}
 80148f0:	bf00      	nop
 80148f2:	e7fe      	b.n	80148f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80148f4:	f001 fa16 	bl	8015d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80148f8:	4b39      	ldr	r3, [pc, #228]	; (80149e0 <xTaskResumeAll+0x118>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	3b01      	subs	r3, #1
 80148fe:	4a38      	ldr	r2, [pc, #224]	; (80149e0 <xTaskResumeAll+0x118>)
 8014900:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014902:	4b37      	ldr	r3, [pc, #220]	; (80149e0 <xTaskResumeAll+0x118>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d162      	bne.n	80149d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801490a:	4b36      	ldr	r3, [pc, #216]	; (80149e4 <xTaskResumeAll+0x11c>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d05e      	beq.n	80149d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014912:	e02f      	b.n	8014974 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014914:	4b34      	ldr	r3, [pc, #208]	; (80149e8 <xTaskResumeAll+0x120>)
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	68db      	ldr	r3, [r3, #12]
 801491a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	3318      	adds	r3, #24
 8014920:	4618      	mov	r0, r3
 8014922:	f7fe fdc5 	bl	80134b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	3304      	adds	r3, #4
 801492a:	4618      	mov	r0, r3
 801492c:	f7fe fdc0 	bl	80134b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014934:	4b2d      	ldr	r3, [pc, #180]	; (80149ec <xTaskResumeAll+0x124>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	429a      	cmp	r2, r3
 801493a:	d903      	bls.n	8014944 <xTaskResumeAll+0x7c>
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014940:	4a2a      	ldr	r2, [pc, #168]	; (80149ec <xTaskResumeAll+0x124>)
 8014942:	6013      	str	r3, [r2, #0]
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014948:	4613      	mov	r3, r2
 801494a:	009b      	lsls	r3, r3, #2
 801494c:	4413      	add	r3, r2
 801494e:	009b      	lsls	r3, r3, #2
 8014950:	4a27      	ldr	r2, [pc, #156]	; (80149f0 <xTaskResumeAll+0x128>)
 8014952:	441a      	add	r2, r3
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	3304      	adds	r3, #4
 8014958:	4619      	mov	r1, r3
 801495a:	4610      	mov	r0, r2
 801495c:	f7fe fd4b 	bl	80133f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014964:	4b23      	ldr	r3, [pc, #140]	; (80149f4 <xTaskResumeAll+0x12c>)
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801496a:	429a      	cmp	r2, r3
 801496c:	d302      	bcc.n	8014974 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801496e:	4b22      	ldr	r3, [pc, #136]	; (80149f8 <xTaskResumeAll+0x130>)
 8014970:	2201      	movs	r2, #1
 8014972:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014974:	4b1c      	ldr	r3, [pc, #112]	; (80149e8 <xTaskResumeAll+0x120>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d1cb      	bne.n	8014914 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d001      	beq.n	8014986 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014982:	f000 fb55 	bl	8015030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014986:	4b1d      	ldr	r3, [pc, #116]	; (80149fc <xTaskResumeAll+0x134>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d010      	beq.n	80149b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014992:	f000 f847 	bl	8014a24 <xTaskIncrementTick>
 8014996:	4603      	mov	r3, r0
 8014998:	2b00      	cmp	r3, #0
 801499a:	d002      	beq.n	80149a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801499c:	4b16      	ldr	r3, [pc, #88]	; (80149f8 <xTaskResumeAll+0x130>)
 801499e:	2201      	movs	r2, #1
 80149a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	3b01      	subs	r3, #1
 80149a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d1f1      	bne.n	8014992 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80149ae:	4b13      	ldr	r3, [pc, #76]	; (80149fc <xTaskResumeAll+0x134>)
 80149b0:	2200      	movs	r2, #0
 80149b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80149b4:	4b10      	ldr	r3, [pc, #64]	; (80149f8 <xTaskResumeAll+0x130>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d009      	beq.n	80149d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80149bc:	2301      	movs	r3, #1
 80149be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80149c0:	4b0f      	ldr	r3, [pc, #60]	; (8014a00 <xTaskResumeAll+0x138>)
 80149c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149c6:	601a      	str	r2, [r3, #0]
 80149c8:	f3bf 8f4f 	dsb	sy
 80149cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80149d0:	f001 f9d8 	bl	8015d84 <vPortExitCritical>

	return xAlreadyYielded;
 80149d4:	68bb      	ldr	r3, [r7, #8]
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3710      	adds	r7, #16
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	2000316c 	.word	0x2000316c
 80149e4:	20003144 	.word	0x20003144
 80149e8:	20003104 	.word	0x20003104
 80149ec:	2000314c 	.word	0x2000314c
 80149f0:	20002c74 	.word	0x20002c74
 80149f4:	20002c70 	.word	0x20002c70
 80149f8:	20003158 	.word	0x20003158
 80149fc:	20003154 	.word	0x20003154
 8014a00:	e000ed04 	.word	0xe000ed04

08014a04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014a04:	b480      	push	{r7}
 8014a06:	b083      	sub	sp, #12
 8014a08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014a0a:	4b05      	ldr	r3, [pc, #20]	; (8014a20 <xTaskGetTickCount+0x1c>)
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014a10:	687b      	ldr	r3, [r7, #4]
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	370c      	adds	r7, #12
 8014a16:	46bd      	mov	sp, r7
 8014a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1c:	4770      	bx	lr
 8014a1e:	bf00      	nop
 8014a20:	20003148 	.word	0x20003148

08014a24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b086      	sub	sp, #24
 8014a28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a2e:	4b4f      	ldr	r3, [pc, #316]	; (8014b6c <xTaskIncrementTick+0x148>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	f040 8089 	bne.w	8014b4a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014a38:	4b4d      	ldr	r3, [pc, #308]	; (8014b70 <xTaskIncrementTick+0x14c>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	3301      	adds	r3, #1
 8014a3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014a40:	4a4b      	ldr	r2, [pc, #300]	; (8014b70 <xTaskIncrementTick+0x14c>)
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014a46:	693b      	ldr	r3, [r7, #16]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d120      	bne.n	8014a8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014a4c:	4b49      	ldr	r3, [pc, #292]	; (8014b74 <xTaskIncrementTick+0x150>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d00a      	beq.n	8014a6c <xTaskIncrementTick+0x48>
	__asm volatile
 8014a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a5a:	f383 8811 	msr	BASEPRI, r3
 8014a5e:	f3bf 8f6f 	isb	sy
 8014a62:	f3bf 8f4f 	dsb	sy
 8014a66:	603b      	str	r3, [r7, #0]
}
 8014a68:	bf00      	nop
 8014a6a:	e7fe      	b.n	8014a6a <xTaskIncrementTick+0x46>
 8014a6c:	4b41      	ldr	r3, [pc, #260]	; (8014b74 <xTaskIncrementTick+0x150>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	60fb      	str	r3, [r7, #12]
 8014a72:	4b41      	ldr	r3, [pc, #260]	; (8014b78 <xTaskIncrementTick+0x154>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	4a3f      	ldr	r2, [pc, #252]	; (8014b74 <xTaskIncrementTick+0x150>)
 8014a78:	6013      	str	r3, [r2, #0]
 8014a7a:	4a3f      	ldr	r2, [pc, #252]	; (8014b78 <xTaskIncrementTick+0x154>)
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	6013      	str	r3, [r2, #0]
 8014a80:	4b3e      	ldr	r3, [pc, #248]	; (8014b7c <xTaskIncrementTick+0x158>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	3301      	adds	r3, #1
 8014a86:	4a3d      	ldr	r2, [pc, #244]	; (8014b7c <xTaskIncrementTick+0x158>)
 8014a88:	6013      	str	r3, [r2, #0]
 8014a8a:	f000 fad1 	bl	8015030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014a8e:	4b3c      	ldr	r3, [pc, #240]	; (8014b80 <xTaskIncrementTick+0x15c>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	693a      	ldr	r2, [r7, #16]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d349      	bcc.n	8014b2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a98:	4b36      	ldr	r3, [pc, #216]	; (8014b74 <xTaskIncrementTick+0x150>)
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d104      	bne.n	8014aac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014aa2:	4b37      	ldr	r3, [pc, #220]	; (8014b80 <xTaskIncrementTick+0x15c>)
 8014aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8014aa8:	601a      	str	r2, [r3, #0]
					break;
 8014aaa:	e03f      	b.n	8014b2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014aac:	4b31      	ldr	r3, [pc, #196]	; (8014b74 <xTaskIncrementTick+0x150>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	68db      	ldr	r3, [r3, #12]
 8014ab4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014ab6:	68bb      	ldr	r3, [r7, #8]
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014abc:	693a      	ldr	r2, [r7, #16]
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	d203      	bcs.n	8014acc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014ac4:	4a2e      	ldr	r2, [pc, #184]	; (8014b80 <xTaskIncrementTick+0x15c>)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014aca:	e02f      	b.n	8014b2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	3304      	adds	r3, #4
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f7fe fced 	bl	80134b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d004      	beq.n	8014ae8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	3318      	adds	r3, #24
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fe fce4 	bl	80134b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aec:	4b25      	ldr	r3, [pc, #148]	; (8014b84 <xTaskIncrementTick+0x160>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	429a      	cmp	r2, r3
 8014af2:	d903      	bls.n	8014afc <xTaskIncrementTick+0xd8>
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014af8:	4a22      	ldr	r2, [pc, #136]	; (8014b84 <xTaskIncrementTick+0x160>)
 8014afa:	6013      	str	r3, [r2, #0]
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b00:	4613      	mov	r3, r2
 8014b02:	009b      	lsls	r3, r3, #2
 8014b04:	4413      	add	r3, r2
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	4a1f      	ldr	r2, [pc, #124]	; (8014b88 <xTaskIncrementTick+0x164>)
 8014b0a:	441a      	add	r2, r3
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	3304      	adds	r3, #4
 8014b10:	4619      	mov	r1, r3
 8014b12:	4610      	mov	r0, r2
 8014b14:	f7fe fc6f 	bl	80133f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b1c:	4b1b      	ldr	r3, [pc, #108]	; (8014b8c <xTaskIncrementTick+0x168>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d3b8      	bcc.n	8014a98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014b26:	2301      	movs	r3, #1
 8014b28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014b2a:	e7b5      	b.n	8014a98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014b2c:	4b17      	ldr	r3, [pc, #92]	; (8014b8c <xTaskIncrementTick+0x168>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b32:	4915      	ldr	r1, [pc, #84]	; (8014b88 <xTaskIncrementTick+0x164>)
 8014b34:	4613      	mov	r3, r2
 8014b36:	009b      	lsls	r3, r3, #2
 8014b38:	4413      	add	r3, r2
 8014b3a:	009b      	lsls	r3, r3, #2
 8014b3c:	440b      	add	r3, r1
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	d907      	bls.n	8014b54 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8014b44:	2301      	movs	r3, #1
 8014b46:	617b      	str	r3, [r7, #20]
 8014b48:	e004      	b.n	8014b54 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014b4a:	4b11      	ldr	r3, [pc, #68]	; (8014b90 <xTaskIncrementTick+0x16c>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	4a0f      	ldr	r2, [pc, #60]	; (8014b90 <xTaskIncrementTick+0x16c>)
 8014b52:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014b54:	4b0f      	ldr	r3, [pc, #60]	; (8014b94 <xTaskIncrementTick+0x170>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d001      	beq.n	8014b60 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014b60:	697b      	ldr	r3, [r7, #20]
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	3718      	adds	r7, #24
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	2000316c 	.word	0x2000316c
 8014b70:	20003148 	.word	0x20003148
 8014b74:	200030fc 	.word	0x200030fc
 8014b78:	20003100 	.word	0x20003100
 8014b7c:	2000315c 	.word	0x2000315c
 8014b80:	20003164 	.word	0x20003164
 8014b84:	2000314c 	.word	0x2000314c
 8014b88:	20002c74 	.word	0x20002c74
 8014b8c:	20002c70 	.word	0x20002c70
 8014b90:	20003154 	.word	0x20003154
 8014b94:	20003158 	.word	0x20003158

08014b98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014b98:	b480      	push	{r7}
 8014b9a:	b085      	sub	sp, #20
 8014b9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014b9e:	4b28      	ldr	r3, [pc, #160]	; (8014c40 <vTaskSwitchContext+0xa8>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d003      	beq.n	8014bae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014ba6:	4b27      	ldr	r3, [pc, #156]	; (8014c44 <vTaskSwitchContext+0xac>)
 8014ba8:	2201      	movs	r2, #1
 8014baa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014bac:	e041      	b.n	8014c32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014bae:	4b25      	ldr	r3, [pc, #148]	; (8014c44 <vTaskSwitchContext+0xac>)
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bb4:	4b24      	ldr	r3, [pc, #144]	; (8014c48 <vTaskSwitchContext+0xb0>)
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	60fb      	str	r3, [r7, #12]
 8014bba:	e010      	b.n	8014bde <vTaskSwitchContext+0x46>
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d10a      	bne.n	8014bd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8014bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc6:	f383 8811 	msr	BASEPRI, r3
 8014bca:	f3bf 8f6f 	isb	sy
 8014bce:	f3bf 8f4f 	dsb	sy
 8014bd2:	607b      	str	r3, [r7, #4]
}
 8014bd4:	bf00      	nop
 8014bd6:	e7fe      	b.n	8014bd6 <vTaskSwitchContext+0x3e>
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	3b01      	subs	r3, #1
 8014bdc:	60fb      	str	r3, [r7, #12]
 8014bde:	491b      	ldr	r1, [pc, #108]	; (8014c4c <vTaskSwitchContext+0xb4>)
 8014be0:	68fa      	ldr	r2, [r7, #12]
 8014be2:	4613      	mov	r3, r2
 8014be4:	009b      	lsls	r3, r3, #2
 8014be6:	4413      	add	r3, r2
 8014be8:	009b      	lsls	r3, r3, #2
 8014bea:	440b      	add	r3, r1
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d0e4      	beq.n	8014bbc <vTaskSwitchContext+0x24>
 8014bf2:	68fa      	ldr	r2, [r7, #12]
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	009b      	lsls	r3, r3, #2
 8014bf8:	4413      	add	r3, r2
 8014bfa:	009b      	lsls	r3, r3, #2
 8014bfc:	4a13      	ldr	r2, [pc, #76]	; (8014c4c <vTaskSwitchContext+0xb4>)
 8014bfe:	4413      	add	r3, r2
 8014c00:	60bb      	str	r3, [r7, #8]
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	685b      	ldr	r3, [r3, #4]
 8014c06:	685a      	ldr	r2, [r3, #4]
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	605a      	str	r2, [r3, #4]
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	685a      	ldr	r2, [r3, #4]
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	3308      	adds	r3, #8
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d104      	bne.n	8014c22 <vTaskSwitchContext+0x8a>
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	685b      	ldr	r3, [r3, #4]
 8014c1c:	685a      	ldr	r2, [r3, #4]
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	605a      	str	r2, [r3, #4]
 8014c22:	68bb      	ldr	r3, [r7, #8]
 8014c24:	685b      	ldr	r3, [r3, #4]
 8014c26:	68db      	ldr	r3, [r3, #12]
 8014c28:	4a09      	ldr	r2, [pc, #36]	; (8014c50 <vTaskSwitchContext+0xb8>)
 8014c2a:	6013      	str	r3, [r2, #0]
 8014c2c:	4a06      	ldr	r2, [pc, #24]	; (8014c48 <vTaskSwitchContext+0xb0>)
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	6013      	str	r3, [r2, #0]
}
 8014c32:	bf00      	nop
 8014c34:	3714      	adds	r7, #20
 8014c36:	46bd      	mov	sp, r7
 8014c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3c:	4770      	bx	lr
 8014c3e:	bf00      	nop
 8014c40:	2000316c 	.word	0x2000316c
 8014c44:	20003158 	.word	0x20003158
 8014c48:	2000314c 	.word	0x2000314c
 8014c4c:	20002c74 	.word	0x20002c74
 8014c50:	20002c70 	.word	0x20002c70

08014c54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b084      	sub	sp, #16
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d10a      	bne.n	8014c7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c68:	f383 8811 	msr	BASEPRI, r3
 8014c6c:	f3bf 8f6f 	isb	sy
 8014c70:	f3bf 8f4f 	dsb	sy
 8014c74:	60fb      	str	r3, [r7, #12]
}
 8014c76:	bf00      	nop
 8014c78:	e7fe      	b.n	8014c78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c7a:	4b07      	ldr	r3, [pc, #28]	; (8014c98 <vTaskPlaceOnEventList+0x44>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	3318      	adds	r3, #24
 8014c80:	4619      	mov	r1, r3
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f7fe fbdb 	bl	801343e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c88:	2101      	movs	r1, #1
 8014c8a:	6838      	ldr	r0, [r7, #0]
 8014c8c:	f000 fb7a 	bl	8015384 <prvAddCurrentTaskToDelayedList>
}
 8014c90:	bf00      	nop
 8014c92:	3710      	adds	r7, #16
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	20002c70 	.word	0x20002c70

08014c9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b086      	sub	sp, #24
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	60f8      	str	r0, [r7, #12]
 8014ca4:	60b9      	str	r1, [r7, #8]
 8014ca6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d10a      	bne.n	8014cc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cb2:	f383 8811 	msr	BASEPRI, r3
 8014cb6:	f3bf 8f6f 	isb	sy
 8014cba:	f3bf 8f4f 	dsb	sy
 8014cbe:	617b      	str	r3, [r7, #20]
}
 8014cc0:	bf00      	nop
 8014cc2:	e7fe      	b.n	8014cc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014cc4:	4b0a      	ldr	r3, [pc, #40]	; (8014cf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	3318      	adds	r3, #24
 8014cca:	4619      	mov	r1, r3
 8014ccc:	68f8      	ldr	r0, [r7, #12]
 8014cce:	f7fe fb92 	bl	80133f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d002      	beq.n	8014cde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8014cdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014cde:	6879      	ldr	r1, [r7, #4]
 8014ce0:	68b8      	ldr	r0, [r7, #8]
 8014ce2:	f000 fb4f 	bl	8015384 <prvAddCurrentTaskToDelayedList>
	}
 8014ce6:	bf00      	nop
 8014ce8:	3718      	adds	r7, #24
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
 8014cee:	bf00      	nop
 8014cf0:	20002c70 	.word	0x20002c70

08014cf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b086      	sub	sp, #24
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	68db      	ldr	r3, [r3, #12]
 8014d00:	68db      	ldr	r3, [r3, #12]
 8014d02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d10a      	bne.n	8014d20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d0e:	f383 8811 	msr	BASEPRI, r3
 8014d12:	f3bf 8f6f 	isb	sy
 8014d16:	f3bf 8f4f 	dsb	sy
 8014d1a:	60fb      	str	r3, [r7, #12]
}
 8014d1c:	bf00      	nop
 8014d1e:	e7fe      	b.n	8014d1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	3318      	adds	r3, #24
 8014d24:	4618      	mov	r0, r3
 8014d26:	f7fe fbc3 	bl	80134b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d2a:	4b1e      	ldr	r3, [pc, #120]	; (8014da4 <xTaskRemoveFromEventList+0xb0>)
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d11d      	bne.n	8014d6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d32:	693b      	ldr	r3, [r7, #16]
 8014d34:	3304      	adds	r3, #4
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7fe fbba 	bl	80134b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d40:	4b19      	ldr	r3, [pc, #100]	; (8014da8 <xTaskRemoveFromEventList+0xb4>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d903      	bls.n	8014d50 <xTaskRemoveFromEventList+0x5c>
 8014d48:	693b      	ldr	r3, [r7, #16]
 8014d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d4c:	4a16      	ldr	r2, [pc, #88]	; (8014da8 <xTaskRemoveFromEventList+0xb4>)
 8014d4e:	6013      	str	r3, [r2, #0]
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d54:	4613      	mov	r3, r2
 8014d56:	009b      	lsls	r3, r3, #2
 8014d58:	4413      	add	r3, r2
 8014d5a:	009b      	lsls	r3, r3, #2
 8014d5c:	4a13      	ldr	r2, [pc, #76]	; (8014dac <xTaskRemoveFromEventList+0xb8>)
 8014d5e:	441a      	add	r2, r3
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	3304      	adds	r3, #4
 8014d64:	4619      	mov	r1, r3
 8014d66:	4610      	mov	r0, r2
 8014d68:	f7fe fb45 	bl	80133f6 <vListInsertEnd>
 8014d6c:	e005      	b.n	8014d7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	3318      	adds	r3, #24
 8014d72:	4619      	mov	r1, r3
 8014d74:	480e      	ldr	r0, [pc, #56]	; (8014db0 <xTaskRemoveFromEventList+0xbc>)
 8014d76:	f7fe fb3e 	bl	80133f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d7e:	4b0d      	ldr	r3, [pc, #52]	; (8014db4 <xTaskRemoveFromEventList+0xc0>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d84:	429a      	cmp	r2, r3
 8014d86:	d905      	bls.n	8014d94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014d88:	2301      	movs	r3, #1
 8014d8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014d8c:	4b0a      	ldr	r3, [pc, #40]	; (8014db8 <xTaskRemoveFromEventList+0xc4>)
 8014d8e:	2201      	movs	r2, #1
 8014d90:	601a      	str	r2, [r3, #0]
 8014d92:	e001      	b.n	8014d98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014d94:	2300      	movs	r3, #0
 8014d96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014d98:	697b      	ldr	r3, [r7, #20]
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3718      	adds	r7, #24
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}
 8014da2:	bf00      	nop
 8014da4:	2000316c 	.word	0x2000316c
 8014da8:	2000314c 	.word	0x2000314c
 8014dac:	20002c74 	.word	0x20002c74
 8014db0:	20003104 	.word	0x20003104
 8014db4:	20002c70 	.word	0x20002c70
 8014db8:	20003158 	.word	0x20003158

08014dbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014dbc:	b480      	push	{r7}
 8014dbe:	b083      	sub	sp, #12
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014dc4:	4b06      	ldr	r3, [pc, #24]	; (8014de0 <vTaskInternalSetTimeOutState+0x24>)
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014dcc:	4b05      	ldr	r3, [pc, #20]	; (8014de4 <vTaskInternalSetTimeOutState+0x28>)
 8014dce:	681a      	ldr	r2, [r3, #0]
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	605a      	str	r2, [r3, #4]
}
 8014dd4:	bf00      	nop
 8014dd6:	370c      	adds	r7, #12
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dde:	4770      	bx	lr
 8014de0:	2000315c 	.word	0x2000315c
 8014de4:	20003148 	.word	0x20003148

08014de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b088      	sub	sp, #32
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
 8014df0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d10a      	bne.n	8014e0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dfc:	f383 8811 	msr	BASEPRI, r3
 8014e00:	f3bf 8f6f 	isb	sy
 8014e04:	f3bf 8f4f 	dsb	sy
 8014e08:	613b      	str	r3, [r7, #16]
}
 8014e0a:	bf00      	nop
 8014e0c:	e7fe      	b.n	8014e0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d10a      	bne.n	8014e2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e18:	f383 8811 	msr	BASEPRI, r3
 8014e1c:	f3bf 8f6f 	isb	sy
 8014e20:	f3bf 8f4f 	dsb	sy
 8014e24:	60fb      	str	r3, [r7, #12]
}
 8014e26:	bf00      	nop
 8014e28:	e7fe      	b.n	8014e28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014e2a:	f000 ff7b 	bl	8015d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014e2e:	4b1d      	ldr	r3, [pc, #116]	; (8014ea4 <xTaskCheckForTimeOut+0xbc>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	685b      	ldr	r3, [r3, #4]
 8014e38:	69ba      	ldr	r2, [r7, #24]
 8014e3a:	1ad3      	subs	r3, r2, r3
 8014e3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014e3e:	683b      	ldr	r3, [r7, #0]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e46:	d102      	bne.n	8014e4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	61fb      	str	r3, [r7, #28]
 8014e4c:	e023      	b.n	8014e96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	681a      	ldr	r2, [r3, #0]
 8014e52:	4b15      	ldr	r3, [pc, #84]	; (8014ea8 <xTaskCheckForTimeOut+0xc0>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d007      	beq.n	8014e6a <xTaskCheckForTimeOut+0x82>
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	69ba      	ldr	r2, [r7, #24]
 8014e60:	429a      	cmp	r2, r3
 8014e62:	d302      	bcc.n	8014e6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014e64:	2301      	movs	r3, #1
 8014e66:	61fb      	str	r3, [r7, #28]
 8014e68:	e015      	b.n	8014e96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	697a      	ldr	r2, [r7, #20]
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d20b      	bcs.n	8014e8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	681a      	ldr	r2, [r3, #0]
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	1ad2      	subs	r2, r2, r3
 8014e7c:	683b      	ldr	r3, [r7, #0]
 8014e7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f7ff ff9b 	bl	8014dbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014e86:	2300      	movs	r3, #0
 8014e88:	61fb      	str	r3, [r7, #28]
 8014e8a:	e004      	b.n	8014e96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014e92:	2301      	movs	r3, #1
 8014e94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014e96:	f000 ff75 	bl	8015d84 <vPortExitCritical>

	return xReturn;
 8014e9a:	69fb      	ldr	r3, [r7, #28]
}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3720      	adds	r7, #32
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	20003148 	.word	0x20003148
 8014ea8:	2000315c 	.word	0x2000315c

08014eac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014eac:	b480      	push	{r7}
 8014eae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014eb0:	4b03      	ldr	r3, [pc, #12]	; (8014ec0 <vTaskMissedYield+0x14>)
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	601a      	str	r2, [r3, #0]
}
 8014eb6:	bf00      	nop
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebe:	4770      	bx	lr
 8014ec0:	20003158 	.word	0x20003158

08014ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b082      	sub	sp, #8
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ecc:	f000 f852 	bl	8014f74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014ed0:	4b06      	ldr	r3, [pc, #24]	; (8014eec <prvIdleTask+0x28>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	2b01      	cmp	r3, #1
 8014ed6:	d9f9      	bls.n	8014ecc <prvIdleTask+0x8>
			{
				taskYIELD();
 8014ed8:	4b05      	ldr	r3, [pc, #20]	; (8014ef0 <prvIdleTask+0x2c>)
 8014eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ede:	601a      	str	r2, [r3, #0]
 8014ee0:	f3bf 8f4f 	dsb	sy
 8014ee4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014ee8:	e7f0      	b.n	8014ecc <prvIdleTask+0x8>
 8014eea:	bf00      	nop
 8014eec:	20002c74 	.word	0x20002c74
 8014ef0:	e000ed04 	.word	0xe000ed04

08014ef4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014efa:	2300      	movs	r3, #0
 8014efc:	607b      	str	r3, [r7, #4]
 8014efe:	e00c      	b.n	8014f1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	4613      	mov	r3, r2
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	4413      	add	r3, r2
 8014f08:	009b      	lsls	r3, r3, #2
 8014f0a:	4a12      	ldr	r2, [pc, #72]	; (8014f54 <prvInitialiseTaskLists+0x60>)
 8014f0c:	4413      	add	r3, r2
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f7fe fa44 	bl	801339c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	3301      	adds	r3, #1
 8014f18:	607b      	str	r3, [r7, #4]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	2b37      	cmp	r3, #55	; 0x37
 8014f1e:	d9ef      	bls.n	8014f00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014f20:	480d      	ldr	r0, [pc, #52]	; (8014f58 <prvInitialiseTaskLists+0x64>)
 8014f22:	f7fe fa3b 	bl	801339c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014f26:	480d      	ldr	r0, [pc, #52]	; (8014f5c <prvInitialiseTaskLists+0x68>)
 8014f28:	f7fe fa38 	bl	801339c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014f2c:	480c      	ldr	r0, [pc, #48]	; (8014f60 <prvInitialiseTaskLists+0x6c>)
 8014f2e:	f7fe fa35 	bl	801339c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014f32:	480c      	ldr	r0, [pc, #48]	; (8014f64 <prvInitialiseTaskLists+0x70>)
 8014f34:	f7fe fa32 	bl	801339c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014f38:	480b      	ldr	r0, [pc, #44]	; (8014f68 <prvInitialiseTaskLists+0x74>)
 8014f3a:	f7fe fa2f 	bl	801339c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014f3e:	4b0b      	ldr	r3, [pc, #44]	; (8014f6c <prvInitialiseTaskLists+0x78>)
 8014f40:	4a05      	ldr	r2, [pc, #20]	; (8014f58 <prvInitialiseTaskLists+0x64>)
 8014f42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014f44:	4b0a      	ldr	r3, [pc, #40]	; (8014f70 <prvInitialiseTaskLists+0x7c>)
 8014f46:	4a05      	ldr	r2, [pc, #20]	; (8014f5c <prvInitialiseTaskLists+0x68>)
 8014f48:	601a      	str	r2, [r3, #0]
}
 8014f4a:	bf00      	nop
 8014f4c:	3708      	adds	r7, #8
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	20002c74 	.word	0x20002c74
 8014f58:	200030d4 	.word	0x200030d4
 8014f5c:	200030e8 	.word	0x200030e8
 8014f60:	20003104 	.word	0x20003104
 8014f64:	20003118 	.word	0x20003118
 8014f68:	20003130 	.word	0x20003130
 8014f6c:	200030fc 	.word	0x200030fc
 8014f70:	20003100 	.word	0x20003100

08014f74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b082      	sub	sp, #8
 8014f78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f7a:	e019      	b.n	8014fb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014f7c:	f000 fed2 	bl	8015d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f80:	4b10      	ldr	r3, [pc, #64]	; (8014fc4 <prvCheckTasksWaitingTermination+0x50>)
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	3304      	adds	r3, #4
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7fe fa8f 	bl	80134b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014f92:	4b0d      	ldr	r3, [pc, #52]	; (8014fc8 <prvCheckTasksWaitingTermination+0x54>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	3b01      	subs	r3, #1
 8014f98:	4a0b      	ldr	r2, [pc, #44]	; (8014fc8 <prvCheckTasksWaitingTermination+0x54>)
 8014f9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014f9c:	4b0b      	ldr	r3, [pc, #44]	; (8014fcc <prvCheckTasksWaitingTermination+0x58>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	3b01      	subs	r3, #1
 8014fa2:	4a0a      	ldr	r2, [pc, #40]	; (8014fcc <prvCheckTasksWaitingTermination+0x58>)
 8014fa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014fa6:	f000 feed 	bl	8015d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f000 f810 	bl	8014fd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014fb0:	4b06      	ldr	r3, [pc, #24]	; (8014fcc <prvCheckTasksWaitingTermination+0x58>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d1e1      	bne.n	8014f7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014fb8:	bf00      	nop
 8014fba:	bf00      	nop
 8014fbc:	3708      	adds	r7, #8
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	20003118 	.word	0x20003118
 8014fc8:	20003144 	.word	0x20003144
 8014fcc:	2000312c 	.word	0x2000312c

08014fd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b084      	sub	sp, #16
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d108      	bne.n	8014ff4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f001 f882 	bl	80160f0 <vPortFree>
				vPortFree( pxTCB );
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f001 f87f 	bl	80160f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014ff2:	e018      	b.n	8015026 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014ffa:	2b01      	cmp	r3, #1
 8014ffc:	d103      	bne.n	8015006 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014ffe:	6878      	ldr	r0, [r7, #4]
 8015000:	f001 f876 	bl	80160f0 <vPortFree>
	}
 8015004:	e00f      	b.n	8015026 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801500c:	2b02      	cmp	r3, #2
 801500e:	d00a      	beq.n	8015026 <prvDeleteTCB+0x56>
	__asm volatile
 8015010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015014:	f383 8811 	msr	BASEPRI, r3
 8015018:	f3bf 8f6f 	isb	sy
 801501c:	f3bf 8f4f 	dsb	sy
 8015020:	60fb      	str	r3, [r7, #12]
}
 8015022:	bf00      	nop
 8015024:	e7fe      	b.n	8015024 <prvDeleteTCB+0x54>
	}
 8015026:	bf00      	nop
 8015028:	3710      	adds	r7, #16
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
	...

08015030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015030:	b480      	push	{r7}
 8015032:	b083      	sub	sp, #12
 8015034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015036:	4b0c      	ldr	r3, [pc, #48]	; (8015068 <prvResetNextTaskUnblockTime+0x38>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d104      	bne.n	801504a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015040:	4b0a      	ldr	r3, [pc, #40]	; (801506c <prvResetNextTaskUnblockTime+0x3c>)
 8015042:	f04f 32ff 	mov.w	r2, #4294967295
 8015046:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015048:	e008      	b.n	801505c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801504a:	4b07      	ldr	r3, [pc, #28]	; (8015068 <prvResetNextTaskUnblockTime+0x38>)
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	68db      	ldr	r3, [r3, #12]
 8015050:	68db      	ldr	r3, [r3, #12]
 8015052:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	685b      	ldr	r3, [r3, #4]
 8015058:	4a04      	ldr	r2, [pc, #16]	; (801506c <prvResetNextTaskUnblockTime+0x3c>)
 801505a:	6013      	str	r3, [r2, #0]
}
 801505c:	bf00      	nop
 801505e:	370c      	adds	r7, #12
 8015060:	46bd      	mov	sp, r7
 8015062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015066:	4770      	bx	lr
 8015068:	200030fc 	.word	0x200030fc
 801506c:	20003164 	.word	0x20003164

08015070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015070:	b480      	push	{r7}
 8015072:	b083      	sub	sp, #12
 8015074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015076:	4b0b      	ldr	r3, [pc, #44]	; (80150a4 <xTaskGetSchedulerState+0x34>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d102      	bne.n	8015084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801507e:	2301      	movs	r3, #1
 8015080:	607b      	str	r3, [r7, #4]
 8015082:	e008      	b.n	8015096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015084:	4b08      	ldr	r3, [pc, #32]	; (80150a8 <xTaskGetSchedulerState+0x38>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d102      	bne.n	8015092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801508c:	2302      	movs	r3, #2
 801508e:	607b      	str	r3, [r7, #4]
 8015090:	e001      	b.n	8015096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015092:	2300      	movs	r3, #0
 8015094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015096:	687b      	ldr	r3, [r7, #4]
	}
 8015098:	4618      	mov	r0, r3
 801509a:	370c      	adds	r7, #12
 801509c:	46bd      	mov	sp, r7
 801509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a2:	4770      	bx	lr
 80150a4:	20003150 	.word	0x20003150
 80150a8:	2000316c 	.word	0x2000316c

080150ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80150b8:	2300      	movs	r3, #0
 80150ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d051      	beq.n	8015166 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150c6:	4b2a      	ldr	r3, [pc, #168]	; (8015170 <xTaskPriorityInherit+0xc4>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150cc:	429a      	cmp	r2, r3
 80150ce:	d241      	bcs.n	8015154 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	699b      	ldr	r3, [r3, #24]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	db06      	blt.n	80150e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150d8:	4b25      	ldr	r3, [pc, #148]	; (8015170 <xTaskPriorityInherit+0xc4>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	6959      	ldr	r1, [r3, #20]
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150ee:	4613      	mov	r3, r2
 80150f0:	009b      	lsls	r3, r3, #2
 80150f2:	4413      	add	r3, r2
 80150f4:	009b      	lsls	r3, r3, #2
 80150f6:	4a1f      	ldr	r2, [pc, #124]	; (8015174 <xTaskPriorityInherit+0xc8>)
 80150f8:	4413      	add	r3, r2
 80150fa:	4299      	cmp	r1, r3
 80150fc:	d122      	bne.n	8015144 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	3304      	adds	r3, #4
 8015102:	4618      	mov	r0, r3
 8015104:	f7fe f9d4 	bl	80134b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015108:	4b19      	ldr	r3, [pc, #100]	; (8015170 <xTaskPriorityInherit+0xc4>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015116:	4b18      	ldr	r3, [pc, #96]	; (8015178 <xTaskPriorityInherit+0xcc>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	429a      	cmp	r2, r3
 801511c:	d903      	bls.n	8015126 <xTaskPriorityInherit+0x7a>
 801511e:	68bb      	ldr	r3, [r7, #8]
 8015120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015122:	4a15      	ldr	r2, [pc, #84]	; (8015178 <xTaskPriorityInherit+0xcc>)
 8015124:	6013      	str	r3, [r2, #0]
 8015126:	68bb      	ldr	r3, [r7, #8]
 8015128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801512a:	4613      	mov	r3, r2
 801512c:	009b      	lsls	r3, r3, #2
 801512e:	4413      	add	r3, r2
 8015130:	009b      	lsls	r3, r3, #2
 8015132:	4a10      	ldr	r2, [pc, #64]	; (8015174 <xTaskPriorityInherit+0xc8>)
 8015134:	441a      	add	r2, r3
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	3304      	adds	r3, #4
 801513a:	4619      	mov	r1, r3
 801513c:	4610      	mov	r0, r2
 801513e:	f7fe f95a 	bl	80133f6 <vListInsertEnd>
 8015142:	e004      	b.n	801514e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015144:	4b0a      	ldr	r3, [pc, #40]	; (8015170 <xTaskPriorityInherit+0xc4>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801514a:	68bb      	ldr	r3, [r7, #8]
 801514c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801514e:	2301      	movs	r3, #1
 8015150:	60fb      	str	r3, [r7, #12]
 8015152:	e008      	b.n	8015166 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015158:	4b05      	ldr	r3, [pc, #20]	; (8015170 <xTaskPriorityInherit+0xc4>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801515e:	429a      	cmp	r2, r3
 8015160:	d201      	bcs.n	8015166 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015162:	2301      	movs	r3, #1
 8015164:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015166:	68fb      	ldr	r3, [r7, #12]
	}
 8015168:	4618      	mov	r0, r3
 801516a:	3710      	adds	r7, #16
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	20002c70 	.word	0x20002c70
 8015174:	20002c74 	.word	0x20002c74
 8015178:	2000314c 	.word	0x2000314c

0801517c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801517c:	b580      	push	{r7, lr}
 801517e:	b086      	sub	sp, #24
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015188:	2300      	movs	r3, #0
 801518a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d056      	beq.n	8015240 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015192:	4b2e      	ldr	r3, [pc, #184]	; (801524c <xTaskPriorityDisinherit+0xd0>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	693a      	ldr	r2, [r7, #16]
 8015198:	429a      	cmp	r2, r3
 801519a:	d00a      	beq.n	80151b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151a0:	f383 8811 	msr	BASEPRI, r3
 80151a4:	f3bf 8f6f 	isb	sy
 80151a8:	f3bf 8f4f 	dsb	sy
 80151ac:	60fb      	str	r3, [r7, #12]
}
 80151ae:	bf00      	nop
 80151b0:	e7fe      	b.n	80151b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d10a      	bne.n	80151d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80151ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151be:	f383 8811 	msr	BASEPRI, r3
 80151c2:	f3bf 8f6f 	isb	sy
 80151c6:	f3bf 8f4f 	dsb	sy
 80151ca:	60bb      	str	r3, [r7, #8]
}
 80151cc:	bf00      	nop
 80151ce:	e7fe      	b.n	80151ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151d4:	1e5a      	subs	r2, r3, #1
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d02c      	beq.n	8015240 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d128      	bne.n	8015240 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151ee:	693b      	ldr	r3, [r7, #16]
 80151f0:	3304      	adds	r3, #4
 80151f2:	4618      	mov	r0, r3
 80151f4:	f7fe f95c 	bl	80134b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80151f8:	693b      	ldr	r3, [r7, #16]
 80151fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80151fc:	693b      	ldr	r3, [r7, #16]
 80151fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015204:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801520c:	693b      	ldr	r3, [r7, #16]
 801520e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015210:	4b0f      	ldr	r3, [pc, #60]	; (8015250 <xTaskPriorityDisinherit+0xd4>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	429a      	cmp	r2, r3
 8015216:	d903      	bls.n	8015220 <xTaskPriorityDisinherit+0xa4>
 8015218:	693b      	ldr	r3, [r7, #16]
 801521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801521c:	4a0c      	ldr	r2, [pc, #48]	; (8015250 <xTaskPriorityDisinherit+0xd4>)
 801521e:	6013      	str	r3, [r2, #0]
 8015220:	693b      	ldr	r3, [r7, #16]
 8015222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015224:	4613      	mov	r3, r2
 8015226:	009b      	lsls	r3, r3, #2
 8015228:	4413      	add	r3, r2
 801522a:	009b      	lsls	r3, r3, #2
 801522c:	4a09      	ldr	r2, [pc, #36]	; (8015254 <xTaskPriorityDisinherit+0xd8>)
 801522e:	441a      	add	r2, r3
 8015230:	693b      	ldr	r3, [r7, #16]
 8015232:	3304      	adds	r3, #4
 8015234:	4619      	mov	r1, r3
 8015236:	4610      	mov	r0, r2
 8015238:	f7fe f8dd 	bl	80133f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801523c:	2301      	movs	r3, #1
 801523e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015240:	697b      	ldr	r3, [r7, #20]
	}
 8015242:	4618      	mov	r0, r3
 8015244:	3718      	adds	r7, #24
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
 801524a:	bf00      	nop
 801524c:	20002c70 	.word	0x20002c70
 8015250:	2000314c 	.word	0x2000314c
 8015254:	20002c74 	.word	0x20002c74

08015258 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015258:	b580      	push	{r7, lr}
 801525a:	b088      	sub	sp, #32
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015266:	2301      	movs	r3, #1
 8015268:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d06a      	beq.n	8015346 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015270:	69bb      	ldr	r3, [r7, #24]
 8015272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015274:	2b00      	cmp	r3, #0
 8015276:	d10a      	bne.n	801528e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8015278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801527c:	f383 8811 	msr	BASEPRI, r3
 8015280:	f3bf 8f6f 	isb	sy
 8015284:	f3bf 8f4f 	dsb	sy
 8015288:	60fb      	str	r3, [r7, #12]
}
 801528a:	bf00      	nop
 801528c:	e7fe      	b.n	801528c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801528e:	69bb      	ldr	r3, [r7, #24]
 8015290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015292:	683a      	ldr	r2, [r7, #0]
 8015294:	429a      	cmp	r2, r3
 8015296:	d902      	bls.n	801529e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	61fb      	str	r3, [r7, #28]
 801529c:	e002      	b.n	80152a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801529e:	69bb      	ldr	r3, [r7, #24]
 80152a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80152a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152a8:	69fa      	ldr	r2, [r7, #28]
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d04b      	beq.n	8015346 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80152ae:	69bb      	ldr	r3, [r7, #24]
 80152b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80152b2:	697a      	ldr	r2, [r7, #20]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d146      	bne.n	8015346 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80152b8:	4b25      	ldr	r3, [pc, #148]	; (8015350 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	69ba      	ldr	r2, [r7, #24]
 80152be:	429a      	cmp	r2, r3
 80152c0:	d10a      	bne.n	80152d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80152c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152c6:	f383 8811 	msr	BASEPRI, r3
 80152ca:	f3bf 8f6f 	isb	sy
 80152ce:	f3bf 8f4f 	dsb	sy
 80152d2:	60bb      	str	r3, [r7, #8]
}
 80152d4:	bf00      	nop
 80152d6:	e7fe      	b.n	80152d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80152d8:	69bb      	ldr	r3, [r7, #24]
 80152da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80152de:	69bb      	ldr	r3, [r7, #24]
 80152e0:	69fa      	ldr	r2, [r7, #28]
 80152e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80152e4:	69bb      	ldr	r3, [r7, #24]
 80152e6:	699b      	ldr	r3, [r3, #24]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	db04      	blt.n	80152f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80152ec:	69fb      	ldr	r3, [r7, #28]
 80152ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80152f2:	69bb      	ldr	r3, [r7, #24]
 80152f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80152f6:	69bb      	ldr	r3, [r7, #24]
 80152f8:	6959      	ldr	r1, [r3, #20]
 80152fa:	693a      	ldr	r2, [r7, #16]
 80152fc:	4613      	mov	r3, r2
 80152fe:	009b      	lsls	r3, r3, #2
 8015300:	4413      	add	r3, r2
 8015302:	009b      	lsls	r3, r3, #2
 8015304:	4a13      	ldr	r2, [pc, #76]	; (8015354 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015306:	4413      	add	r3, r2
 8015308:	4299      	cmp	r1, r3
 801530a:	d11c      	bne.n	8015346 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801530c:	69bb      	ldr	r3, [r7, #24]
 801530e:	3304      	adds	r3, #4
 8015310:	4618      	mov	r0, r3
 8015312:	f7fe f8cd 	bl	80134b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015316:	69bb      	ldr	r3, [r7, #24]
 8015318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801531a:	4b0f      	ldr	r3, [pc, #60]	; (8015358 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	429a      	cmp	r2, r3
 8015320:	d903      	bls.n	801532a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8015322:	69bb      	ldr	r3, [r7, #24]
 8015324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015326:	4a0c      	ldr	r2, [pc, #48]	; (8015358 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015328:	6013      	str	r3, [r2, #0]
 801532a:	69bb      	ldr	r3, [r7, #24]
 801532c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801532e:	4613      	mov	r3, r2
 8015330:	009b      	lsls	r3, r3, #2
 8015332:	4413      	add	r3, r2
 8015334:	009b      	lsls	r3, r3, #2
 8015336:	4a07      	ldr	r2, [pc, #28]	; (8015354 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015338:	441a      	add	r2, r3
 801533a:	69bb      	ldr	r3, [r7, #24]
 801533c:	3304      	adds	r3, #4
 801533e:	4619      	mov	r1, r3
 8015340:	4610      	mov	r0, r2
 8015342:	f7fe f858 	bl	80133f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015346:	bf00      	nop
 8015348:	3720      	adds	r7, #32
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}
 801534e:	bf00      	nop
 8015350:	20002c70 	.word	0x20002c70
 8015354:	20002c74 	.word	0x20002c74
 8015358:	2000314c 	.word	0x2000314c

0801535c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801535c:	b480      	push	{r7}
 801535e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015360:	4b07      	ldr	r3, [pc, #28]	; (8015380 <pvTaskIncrementMutexHeldCount+0x24>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d004      	beq.n	8015372 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015368:	4b05      	ldr	r3, [pc, #20]	; (8015380 <pvTaskIncrementMutexHeldCount+0x24>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801536e:	3201      	adds	r2, #1
 8015370:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8015372:	4b03      	ldr	r3, [pc, #12]	; (8015380 <pvTaskIncrementMutexHeldCount+0x24>)
 8015374:	681b      	ldr	r3, [r3, #0]
	}
 8015376:	4618      	mov	r0, r3
 8015378:	46bd      	mov	sp, r7
 801537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537e:	4770      	bx	lr
 8015380:	20002c70 	.word	0x20002c70

08015384 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b084      	sub	sp, #16
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801538e:	4b21      	ldr	r3, [pc, #132]	; (8015414 <prvAddCurrentTaskToDelayedList+0x90>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015394:	4b20      	ldr	r3, [pc, #128]	; (8015418 <prvAddCurrentTaskToDelayedList+0x94>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	3304      	adds	r3, #4
 801539a:	4618      	mov	r0, r3
 801539c:	f7fe f888 	bl	80134b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153a6:	d10a      	bne.n	80153be <prvAddCurrentTaskToDelayedList+0x3a>
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d007      	beq.n	80153be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153ae:	4b1a      	ldr	r3, [pc, #104]	; (8015418 <prvAddCurrentTaskToDelayedList+0x94>)
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	3304      	adds	r3, #4
 80153b4:	4619      	mov	r1, r3
 80153b6:	4819      	ldr	r0, [pc, #100]	; (801541c <prvAddCurrentTaskToDelayedList+0x98>)
 80153b8:	f7fe f81d 	bl	80133f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80153bc:	e026      	b.n	801540c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80153be:	68fa      	ldr	r2, [r7, #12]
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	4413      	add	r3, r2
 80153c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80153c6:	4b14      	ldr	r3, [pc, #80]	; (8015418 <prvAddCurrentTaskToDelayedList+0x94>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	68ba      	ldr	r2, [r7, #8]
 80153cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80153ce:	68ba      	ldr	r2, [r7, #8]
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	d209      	bcs.n	80153ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153d6:	4b12      	ldr	r3, [pc, #72]	; (8015420 <prvAddCurrentTaskToDelayedList+0x9c>)
 80153d8:	681a      	ldr	r2, [r3, #0]
 80153da:	4b0f      	ldr	r3, [pc, #60]	; (8015418 <prvAddCurrentTaskToDelayedList+0x94>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	3304      	adds	r3, #4
 80153e0:	4619      	mov	r1, r3
 80153e2:	4610      	mov	r0, r2
 80153e4:	f7fe f82b 	bl	801343e <vListInsert>
}
 80153e8:	e010      	b.n	801540c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153ea:	4b0e      	ldr	r3, [pc, #56]	; (8015424 <prvAddCurrentTaskToDelayedList+0xa0>)
 80153ec:	681a      	ldr	r2, [r3, #0]
 80153ee:	4b0a      	ldr	r3, [pc, #40]	; (8015418 <prvAddCurrentTaskToDelayedList+0x94>)
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	3304      	adds	r3, #4
 80153f4:	4619      	mov	r1, r3
 80153f6:	4610      	mov	r0, r2
 80153f8:	f7fe f821 	bl	801343e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80153fc:	4b0a      	ldr	r3, [pc, #40]	; (8015428 <prvAddCurrentTaskToDelayedList+0xa4>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	68ba      	ldr	r2, [r7, #8]
 8015402:	429a      	cmp	r2, r3
 8015404:	d202      	bcs.n	801540c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015406:	4a08      	ldr	r2, [pc, #32]	; (8015428 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	6013      	str	r3, [r2, #0]
}
 801540c:	bf00      	nop
 801540e:	3710      	adds	r7, #16
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	20003148 	.word	0x20003148
 8015418:	20002c70 	.word	0x20002c70
 801541c:	20003130 	.word	0x20003130
 8015420:	20003100 	.word	0x20003100
 8015424:	200030fc 	.word	0x200030fc
 8015428:	20003164 	.word	0x20003164

0801542c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b08a      	sub	sp, #40	; 0x28
 8015430:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015432:	2300      	movs	r3, #0
 8015434:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015436:	f000 fb07 	bl	8015a48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801543a:	4b1c      	ldr	r3, [pc, #112]	; (80154ac <xTimerCreateTimerTask+0x80>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d021      	beq.n	8015486 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015442:	2300      	movs	r3, #0
 8015444:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015446:	2300      	movs	r3, #0
 8015448:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801544a:	1d3a      	adds	r2, r7, #4
 801544c:	f107 0108 	add.w	r1, r7, #8
 8015450:	f107 030c 	add.w	r3, r7, #12
 8015454:	4618      	mov	r0, r3
 8015456:	f7fd ff87 	bl	8013368 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801545a:	6879      	ldr	r1, [r7, #4]
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	68fa      	ldr	r2, [r7, #12]
 8015460:	9202      	str	r2, [sp, #8]
 8015462:	9301      	str	r3, [sp, #4]
 8015464:	2306      	movs	r3, #6
 8015466:	9300      	str	r3, [sp, #0]
 8015468:	2300      	movs	r3, #0
 801546a:	460a      	mov	r2, r1
 801546c:	4910      	ldr	r1, [pc, #64]	; (80154b0 <xTimerCreateTimerTask+0x84>)
 801546e:	4811      	ldr	r0, [pc, #68]	; (80154b4 <xTimerCreateTimerTask+0x88>)
 8015470:	f7fe ffe0 	bl	8014434 <xTaskCreateStatic>
 8015474:	4603      	mov	r3, r0
 8015476:	4a10      	ldr	r2, [pc, #64]	; (80154b8 <xTimerCreateTimerTask+0x8c>)
 8015478:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801547a:	4b0f      	ldr	r3, [pc, #60]	; (80154b8 <xTimerCreateTimerTask+0x8c>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d001      	beq.n	8015486 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015482:	2301      	movs	r3, #1
 8015484:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d10a      	bne.n	80154a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015490:	f383 8811 	msr	BASEPRI, r3
 8015494:	f3bf 8f6f 	isb	sy
 8015498:	f3bf 8f4f 	dsb	sy
 801549c:	613b      	str	r3, [r7, #16]
}
 801549e:	bf00      	nop
 80154a0:	e7fe      	b.n	80154a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80154a2:	697b      	ldr	r3, [r7, #20]
}
 80154a4:	4618      	mov	r0, r3
 80154a6:	3718      	adds	r7, #24
 80154a8:	46bd      	mov	sp, r7
 80154aa:	bd80      	pop	{r7, pc}
 80154ac:	200031a0 	.word	0x200031a0
 80154b0:	08018198 	.word	0x08018198
 80154b4:	080155f1 	.word	0x080155f1
 80154b8:	200031a4 	.word	0x200031a4

080154bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b08a      	sub	sp, #40	; 0x28
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	60f8      	str	r0, [r7, #12]
 80154c4:	60b9      	str	r1, [r7, #8]
 80154c6:	607a      	str	r2, [r7, #4]
 80154c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80154ca:	2300      	movs	r3, #0
 80154cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d10a      	bne.n	80154ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80154d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154d8:	f383 8811 	msr	BASEPRI, r3
 80154dc:	f3bf 8f6f 	isb	sy
 80154e0:	f3bf 8f4f 	dsb	sy
 80154e4:	623b      	str	r3, [r7, #32]
}
 80154e6:	bf00      	nop
 80154e8:	e7fe      	b.n	80154e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80154ea:	4b1a      	ldr	r3, [pc, #104]	; (8015554 <xTimerGenericCommand+0x98>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d02a      	beq.n	8015548 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80154f2:	68bb      	ldr	r3, [r7, #8]
 80154f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80154fe:	68bb      	ldr	r3, [r7, #8]
 8015500:	2b05      	cmp	r3, #5
 8015502:	dc18      	bgt.n	8015536 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015504:	f7ff fdb4 	bl	8015070 <xTaskGetSchedulerState>
 8015508:	4603      	mov	r3, r0
 801550a:	2b02      	cmp	r3, #2
 801550c:	d109      	bne.n	8015522 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801550e:	4b11      	ldr	r3, [pc, #68]	; (8015554 <xTimerGenericCommand+0x98>)
 8015510:	6818      	ldr	r0, [r3, #0]
 8015512:	f107 0110 	add.w	r1, r7, #16
 8015516:	2300      	movs	r3, #0
 8015518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801551a:	f7fe f969 	bl	80137f0 <xQueueGenericSend>
 801551e:	6278      	str	r0, [r7, #36]	; 0x24
 8015520:	e012      	b.n	8015548 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015522:	4b0c      	ldr	r3, [pc, #48]	; (8015554 <xTimerGenericCommand+0x98>)
 8015524:	6818      	ldr	r0, [r3, #0]
 8015526:	f107 0110 	add.w	r1, r7, #16
 801552a:	2300      	movs	r3, #0
 801552c:	2200      	movs	r2, #0
 801552e:	f7fe f95f 	bl	80137f0 <xQueueGenericSend>
 8015532:	6278      	str	r0, [r7, #36]	; 0x24
 8015534:	e008      	b.n	8015548 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015536:	4b07      	ldr	r3, [pc, #28]	; (8015554 <xTimerGenericCommand+0x98>)
 8015538:	6818      	ldr	r0, [r3, #0]
 801553a:	f107 0110 	add.w	r1, r7, #16
 801553e:	2300      	movs	r3, #0
 8015540:	683a      	ldr	r2, [r7, #0]
 8015542:	f7fe fa53 	bl	80139ec <xQueueGenericSendFromISR>
 8015546:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801554a:	4618      	mov	r0, r3
 801554c:	3728      	adds	r7, #40	; 0x28
 801554e:	46bd      	mov	sp, r7
 8015550:	bd80      	pop	{r7, pc}
 8015552:	bf00      	nop
 8015554:	200031a0 	.word	0x200031a0

08015558 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b088      	sub	sp, #32
 801555c:	af02      	add	r7, sp, #8
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015562:	4b22      	ldr	r3, [pc, #136]	; (80155ec <prvProcessExpiredTimer+0x94>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	68db      	ldr	r3, [r3, #12]
 801556a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	3304      	adds	r3, #4
 8015570:	4618      	mov	r0, r3
 8015572:	f7fd ff9d 	bl	80134b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015576:	697b      	ldr	r3, [r7, #20]
 8015578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801557c:	f003 0304 	and.w	r3, r3, #4
 8015580:	2b00      	cmp	r3, #0
 8015582:	d022      	beq.n	80155ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	699a      	ldr	r2, [r3, #24]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	18d1      	adds	r1, r2, r3
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	683a      	ldr	r2, [r7, #0]
 8015590:	6978      	ldr	r0, [r7, #20]
 8015592:	f000 f8d1 	bl	8015738 <prvInsertTimerInActiveList>
 8015596:	4603      	mov	r3, r0
 8015598:	2b00      	cmp	r3, #0
 801559a:	d01f      	beq.n	80155dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801559c:	2300      	movs	r3, #0
 801559e:	9300      	str	r3, [sp, #0]
 80155a0:	2300      	movs	r3, #0
 80155a2:	687a      	ldr	r2, [r7, #4]
 80155a4:	2100      	movs	r1, #0
 80155a6:	6978      	ldr	r0, [r7, #20]
 80155a8:	f7ff ff88 	bl	80154bc <xTimerGenericCommand>
 80155ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80155ae:	693b      	ldr	r3, [r7, #16]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d113      	bne.n	80155dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80155b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155b8:	f383 8811 	msr	BASEPRI, r3
 80155bc:	f3bf 8f6f 	isb	sy
 80155c0:	f3bf 8f4f 	dsb	sy
 80155c4:	60fb      	str	r3, [r7, #12]
}
 80155c6:	bf00      	nop
 80155c8:	e7fe      	b.n	80155c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155d0:	f023 0301 	bic.w	r3, r3, #1
 80155d4:	b2da      	uxtb	r2, r3
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80155dc:	697b      	ldr	r3, [r7, #20]
 80155de:	6a1b      	ldr	r3, [r3, #32]
 80155e0:	6978      	ldr	r0, [r7, #20]
 80155e2:	4798      	blx	r3
}
 80155e4:	bf00      	nop
 80155e6:	3718      	adds	r7, #24
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd80      	pop	{r7, pc}
 80155ec:	20003198 	.word	0x20003198

080155f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80155f8:	f107 0308 	add.w	r3, r7, #8
 80155fc:	4618      	mov	r0, r3
 80155fe:	f000 f857 	bl	80156b0 <prvGetNextExpireTime>
 8015602:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015604:	68bb      	ldr	r3, [r7, #8]
 8015606:	4619      	mov	r1, r3
 8015608:	68f8      	ldr	r0, [r7, #12]
 801560a:	f000 f803 	bl	8015614 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801560e:	f000 f8d5 	bl	80157bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015612:	e7f1      	b.n	80155f8 <prvTimerTask+0x8>

08015614 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b084      	sub	sp, #16
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
 801561c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801561e:	f7ff f945 	bl	80148ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015622:	f107 0308 	add.w	r3, r7, #8
 8015626:	4618      	mov	r0, r3
 8015628:	f000 f866 	bl	80156f8 <prvSampleTimeNow>
 801562c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d130      	bne.n	8015696 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015634:	683b      	ldr	r3, [r7, #0]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d10a      	bne.n	8015650 <prvProcessTimerOrBlockTask+0x3c>
 801563a:	687a      	ldr	r2, [r7, #4]
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	429a      	cmp	r2, r3
 8015640:	d806      	bhi.n	8015650 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015642:	f7ff f941 	bl	80148c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015646:	68f9      	ldr	r1, [r7, #12]
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f7ff ff85 	bl	8015558 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801564e:	e024      	b.n	801569a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d008      	beq.n	8015668 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015656:	4b13      	ldr	r3, [pc, #76]	; (80156a4 <prvProcessTimerOrBlockTask+0x90>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d101      	bne.n	8015664 <prvProcessTimerOrBlockTask+0x50>
 8015660:	2301      	movs	r3, #1
 8015662:	e000      	b.n	8015666 <prvProcessTimerOrBlockTask+0x52>
 8015664:	2300      	movs	r3, #0
 8015666:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015668:	4b0f      	ldr	r3, [pc, #60]	; (80156a8 <prvProcessTimerOrBlockTask+0x94>)
 801566a:	6818      	ldr	r0, [r3, #0]
 801566c:	687a      	ldr	r2, [r7, #4]
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	1ad3      	subs	r3, r2, r3
 8015672:	683a      	ldr	r2, [r7, #0]
 8015674:	4619      	mov	r1, r3
 8015676:	f7fe fea9 	bl	80143cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801567a:	f7ff f925 	bl	80148c8 <xTaskResumeAll>
 801567e:	4603      	mov	r3, r0
 8015680:	2b00      	cmp	r3, #0
 8015682:	d10a      	bne.n	801569a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015684:	4b09      	ldr	r3, [pc, #36]	; (80156ac <prvProcessTimerOrBlockTask+0x98>)
 8015686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801568a:	601a      	str	r2, [r3, #0]
 801568c:	f3bf 8f4f 	dsb	sy
 8015690:	f3bf 8f6f 	isb	sy
}
 8015694:	e001      	b.n	801569a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015696:	f7ff f917 	bl	80148c8 <xTaskResumeAll>
}
 801569a:	bf00      	nop
 801569c:	3710      	adds	r7, #16
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}
 80156a2:	bf00      	nop
 80156a4:	2000319c 	.word	0x2000319c
 80156a8:	200031a0 	.word	0x200031a0
 80156ac:	e000ed04 	.word	0xe000ed04

080156b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80156b0:	b480      	push	{r7}
 80156b2:	b085      	sub	sp, #20
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80156b8:	4b0e      	ldr	r3, [pc, #56]	; (80156f4 <prvGetNextExpireTime+0x44>)
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d101      	bne.n	80156c6 <prvGetNextExpireTime+0x16>
 80156c2:	2201      	movs	r2, #1
 80156c4:	e000      	b.n	80156c8 <prvGetNextExpireTime+0x18>
 80156c6:	2200      	movs	r2, #0
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d105      	bne.n	80156e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80156d4:	4b07      	ldr	r3, [pc, #28]	; (80156f4 <prvGetNextExpireTime+0x44>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	68db      	ldr	r3, [r3, #12]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	60fb      	str	r3, [r7, #12]
 80156de:	e001      	b.n	80156e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80156e0:	2300      	movs	r3, #0
 80156e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80156e4:	68fb      	ldr	r3, [r7, #12]
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	3714      	adds	r7, #20
 80156ea:	46bd      	mov	sp, r7
 80156ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f0:	4770      	bx	lr
 80156f2:	bf00      	nop
 80156f4:	20003198 	.word	0x20003198

080156f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b084      	sub	sp, #16
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015700:	f7ff f980 	bl	8014a04 <xTaskGetTickCount>
 8015704:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015706:	4b0b      	ldr	r3, [pc, #44]	; (8015734 <prvSampleTimeNow+0x3c>)
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	429a      	cmp	r2, r3
 801570e:	d205      	bcs.n	801571c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015710:	f000 f936 	bl	8015980 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2201      	movs	r2, #1
 8015718:	601a      	str	r2, [r3, #0]
 801571a:	e002      	b.n	8015722 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	2200      	movs	r2, #0
 8015720:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015722:	4a04      	ldr	r2, [pc, #16]	; (8015734 <prvSampleTimeNow+0x3c>)
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015728:	68fb      	ldr	r3, [r7, #12]
}
 801572a:	4618      	mov	r0, r3
 801572c:	3710      	adds	r7, #16
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	200031a8 	.word	0x200031a8

08015738 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b086      	sub	sp, #24
 801573c:	af00      	add	r7, sp, #0
 801573e:	60f8      	str	r0, [r7, #12]
 8015740:	60b9      	str	r1, [r7, #8]
 8015742:	607a      	str	r2, [r7, #4]
 8015744:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015746:	2300      	movs	r3, #0
 8015748:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	68ba      	ldr	r2, [r7, #8]
 801574e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	68fa      	ldr	r2, [r7, #12]
 8015754:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015756:	68ba      	ldr	r2, [r7, #8]
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	429a      	cmp	r2, r3
 801575c:	d812      	bhi.n	8015784 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801575e:	687a      	ldr	r2, [r7, #4]
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	1ad2      	subs	r2, r2, r3
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	699b      	ldr	r3, [r3, #24]
 8015768:	429a      	cmp	r2, r3
 801576a:	d302      	bcc.n	8015772 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801576c:	2301      	movs	r3, #1
 801576e:	617b      	str	r3, [r7, #20]
 8015770:	e01b      	b.n	80157aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015772:	4b10      	ldr	r3, [pc, #64]	; (80157b4 <prvInsertTimerInActiveList+0x7c>)
 8015774:	681a      	ldr	r2, [r3, #0]
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	3304      	adds	r3, #4
 801577a:	4619      	mov	r1, r3
 801577c:	4610      	mov	r0, r2
 801577e:	f7fd fe5e 	bl	801343e <vListInsert>
 8015782:	e012      	b.n	80157aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015784:	687a      	ldr	r2, [r7, #4]
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	429a      	cmp	r2, r3
 801578a:	d206      	bcs.n	801579a <prvInsertTimerInActiveList+0x62>
 801578c:	68ba      	ldr	r2, [r7, #8]
 801578e:	683b      	ldr	r3, [r7, #0]
 8015790:	429a      	cmp	r2, r3
 8015792:	d302      	bcc.n	801579a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015794:	2301      	movs	r3, #1
 8015796:	617b      	str	r3, [r7, #20]
 8015798:	e007      	b.n	80157aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801579a:	4b07      	ldr	r3, [pc, #28]	; (80157b8 <prvInsertTimerInActiveList+0x80>)
 801579c:	681a      	ldr	r2, [r3, #0]
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	3304      	adds	r3, #4
 80157a2:	4619      	mov	r1, r3
 80157a4:	4610      	mov	r0, r2
 80157a6:	f7fd fe4a 	bl	801343e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80157aa:	697b      	ldr	r3, [r7, #20]
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	3718      	adds	r7, #24
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	2000319c 	.word	0x2000319c
 80157b8:	20003198 	.word	0x20003198

080157bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b08e      	sub	sp, #56	; 0x38
 80157c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80157c2:	e0ca      	b.n	801595a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	da18      	bge.n	80157fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80157ca:	1d3b      	adds	r3, r7, #4
 80157cc:	3304      	adds	r3, #4
 80157ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80157d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d10a      	bne.n	80157ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80157d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157da:	f383 8811 	msr	BASEPRI, r3
 80157de:	f3bf 8f6f 	isb	sy
 80157e2:	f3bf 8f4f 	dsb	sy
 80157e6:	61fb      	str	r3, [r7, #28]
}
 80157e8:	bf00      	nop
 80157ea:	e7fe      	b.n	80157ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80157ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157f2:	6850      	ldr	r0, [r2, #4]
 80157f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157f6:	6892      	ldr	r2, [r2, #8]
 80157f8:	4611      	mov	r1, r2
 80157fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	f2c0 80aa 	blt.w	8015958 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801580a:	695b      	ldr	r3, [r3, #20]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d004      	beq.n	801581a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015812:	3304      	adds	r3, #4
 8015814:	4618      	mov	r0, r3
 8015816:	f7fd fe4b 	bl	80134b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801581a:	463b      	mov	r3, r7
 801581c:	4618      	mov	r0, r3
 801581e:	f7ff ff6b 	bl	80156f8 <prvSampleTimeNow>
 8015822:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2b09      	cmp	r3, #9
 8015828:	f200 8097 	bhi.w	801595a <prvProcessReceivedCommands+0x19e>
 801582c:	a201      	add	r2, pc, #4	; (adr r2, 8015834 <prvProcessReceivedCommands+0x78>)
 801582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015832:	bf00      	nop
 8015834:	0801585d 	.word	0x0801585d
 8015838:	0801585d 	.word	0x0801585d
 801583c:	0801585d 	.word	0x0801585d
 8015840:	080158d1 	.word	0x080158d1
 8015844:	080158e5 	.word	0x080158e5
 8015848:	0801592f 	.word	0x0801592f
 801584c:	0801585d 	.word	0x0801585d
 8015850:	0801585d 	.word	0x0801585d
 8015854:	080158d1 	.word	0x080158d1
 8015858:	080158e5 	.word	0x080158e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801585e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015862:	f043 0301 	orr.w	r3, r3, #1
 8015866:	b2da      	uxtb	r2, r3
 8015868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801586e:	68ba      	ldr	r2, [r7, #8]
 8015870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015872:	699b      	ldr	r3, [r3, #24]
 8015874:	18d1      	adds	r1, r2, r3
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801587a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801587c:	f7ff ff5c 	bl	8015738 <prvInsertTimerInActiveList>
 8015880:	4603      	mov	r3, r0
 8015882:	2b00      	cmp	r3, #0
 8015884:	d069      	beq.n	801595a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015888:	6a1b      	ldr	r3, [r3, #32]
 801588a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801588c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015894:	f003 0304 	and.w	r3, r3, #4
 8015898:	2b00      	cmp	r3, #0
 801589a:	d05e      	beq.n	801595a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801589c:	68ba      	ldr	r2, [r7, #8]
 801589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a0:	699b      	ldr	r3, [r3, #24]
 80158a2:	441a      	add	r2, r3
 80158a4:	2300      	movs	r3, #0
 80158a6:	9300      	str	r3, [sp, #0]
 80158a8:	2300      	movs	r3, #0
 80158aa:	2100      	movs	r1, #0
 80158ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158ae:	f7ff fe05 	bl	80154bc <xTimerGenericCommand>
 80158b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80158b4:	6a3b      	ldr	r3, [r7, #32]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d14f      	bne.n	801595a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80158ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158be:	f383 8811 	msr	BASEPRI, r3
 80158c2:	f3bf 8f6f 	isb	sy
 80158c6:	f3bf 8f4f 	dsb	sy
 80158ca:	61bb      	str	r3, [r7, #24]
}
 80158cc:	bf00      	nop
 80158ce:	e7fe      	b.n	80158ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80158d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158d6:	f023 0301 	bic.w	r3, r3, #1
 80158da:	b2da      	uxtb	r2, r3
 80158dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80158e2:	e03a      	b.n	801595a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80158e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158ea:	f043 0301 	orr.w	r3, r3, #1
 80158ee:	b2da      	uxtb	r2, r3
 80158f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80158f6:	68ba      	ldr	r2, [r7, #8]
 80158f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80158fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158fe:	699b      	ldr	r3, [r3, #24]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d10a      	bne.n	801591a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015908:	f383 8811 	msr	BASEPRI, r3
 801590c:	f3bf 8f6f 	isb	sy
 8015910:	f3bf 8f4f 	dsb	sy
 8015914:	617b      	str	r3, [r7, #20]
}
 8015916:	bf00      	nop
 8015918:	e7fe      	b.n	8015918 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801591c:	699a      	ldr	r2, [r3, #24]
 801591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015920:	18d1      	adds	r1, r2, r3
 8015922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015928:	f7ff ff06 	bl	8015738 <prvInsertTimerInActiveList>
					break;
 801592c:	e015      	b.n	801595a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015934:	f003 0302 	and.w	r3, r3, #2
 8015938:	2b00      	cmp	r3, #0
 801593a:	d103      	bne.n	8015944 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801593c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801593e:	f000 fbd7 	bl	80160f0 <vPortFree>
 8015942:	e00a      	b.n	801595a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801594a:	f023 0301 	bic.w	r3, r3, #1
 801594e:	b2da      	uxtb	r2, r3
 8015950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015956:	e000      	b.n	801595a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015958:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801595a:	4b08      	ldr	r3, [pc, #32]	; (801597c <prvProcessReceivedCommands+0x1c0>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	1d39      	adds	r1, r7, #4
 8015960:	2200      	movs	r2, #0
 8015962:	4618      	mov	r0, r3
 8015964:	f7fe f968 	bl	8013c38 <xQueueReceive>
 8015968:	4603      	mov	r3, r0
 801596a:	2b00      	cmp	r3, #0
 801596c:	f47f af2a 	bne.w	80157c4 <prvProcessReceivedCommands+0x8>
	}
}
 8015970:	bf00      	nop
 8015972:	bf00      	nop
 8015974:	3730      	adds	r7, #48	; 0x30
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
 801597a:	bf00      	nop
 801597c:	200031a0 	.word	0x200031a0

08015980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b088      	sub	sp, #32
 8015984:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015986:	e048      	b.n	8015a1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015988:	4b2d      	ldr	r3, [pc, #180]	; (8015a40 <prvSwitchTimerLists+0xc0>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	68db      	ldr	r3, [r3, #12]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015992:	4b2b      	ldr	r3, [pc, #172]	; (8015a40 <prvSwitchTimerLists+0xc0>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	68db      	ldr	r3, [r3, #12]
 801599a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	3304      	adds	r3, #4
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7fd fd85 	bl	80134b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	6a1b      	ldr	r3, [r3, #32]
 80159aa:	68f8      	ldr	r0, [r7, #12]
 80159ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159b4:	f003 0304 	and.w	r3, r3, #4
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d02e      	beq.n	8015a1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	699b      	ldr	r3, [r3, #24]
 80159c0:	693a      	ldr	r2, [r7, #16]
 80159c2:	4413      	add	r3, r2
 80159c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80159c6:	68ba      	ldr	r2, [r7, #8]
 80159c8:	693b      	ldr	r3, [r7, #16]
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d90e      	bls.n	80159ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	68ba      	ldr	r2, [r7, #8]
 80159d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	68fa      	ldr	r2, [r7, #12]
 80159d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80159da:	4b19      	ldr	r3, [pc, #100]	; (8015a40 <prvSwitchTimerLists+0xc0>)
 80159dc:	681a      	ldr	r2, [r3, #0]
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	3304      	adds	r3, #4
 80159e2:	4619      	mov	r1, r3
 80159e4:	4610      	mov	r0, r2
 80159e6:	f7fd fd2a 	bl	801343e <vListInsert>
 80159ea:	e016      	b.n	8015a1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80159ec:	2300      	movs	r3, #0
 80159ee:	9300      	str	r3, [sp, #0]
 80159f0:	2300      	movs	r3, #0
 80159f2:	693a      	ldr	r2, [r7, #16]
 80159f4:	2100      	movs	r1, #0
 80159f6:	68f8      	ldr	r0, [r7, #12]
 80159f8:	f7ff fd60 	bl	80154bc <xTimerGenericCommand>
 80159fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d10a      	bne.n	8015a1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a08:	f383 8811 	msr	BASEPRI, r3
 8015a0c:	f3bf 8f6f 	isb	sy
 8015a10:	f3bf 8f4f 	dsb	sy
 8015a14:	603b      	str	r3, [r7, #0]
}
 8015a16:	bf00      	nop
 8015a18:	e7fe      	b.n	8015a18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015a1a:	4b09      	ldr	r3, [pc, #36]	; (8015a40 <prvSwitchTimerLists+0xc0>)
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d1b1      	bne.n	8015988 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015a24:	4b06      	ldr	r3, [pc, #24]	; (8015a40 <prvSwitchTimerLists+0xc0>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015a2a:	4b06      	ldr	r3, [pc, #24]	; (8015a44 <prvSwitchTimerLists+0xc4>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	4a04      	ldr	r2, [pc, #16]	; (8015a40 <prvSwitchTimerLists+0xc0>)
 8015a30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015a32:	4a04      	ldr	r2, [pc, #16]	; (8015a44 <prvSwitchTimerLists+0xc4>)
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	6013      	str	r3, [r2, #0]
}
 8015a38:	bf00      	nop
 8015a3a:	3718      	adds	r7, #24
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}
 8015a40:	20003198 	.word	0x20003198
 8015a44:	2000319c 	.word	0x2000319c

08015a48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015a4e:	f000 f969 	bl	8015d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015a52:	4b15      	ldr	r3, [pc, #84]	; (8015aa8 <prvCheckForValidListAndQueue+0x60>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d120      	bne.n	8015a9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015a5a:	4814      	ldr	r0, [pc, #80]	; (8015aac <prvCheckForValidListAndQueue+0x64>)
 8015a5c:	f7fd fc9e 	bl	801339c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015a60:	4813      	ldr	r0, [pc, #76]	; (8015ab0 <prvCheckForValidListAndQueue+0x68>)
 8015a62:	f7fd fc9b 	bl	801339c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015a66:	4b13      	ldr	r3, [pc, #76]	; (8015ab4 <prvCheckForValidListAndQueue+0x6c>)
 8015a68:	4a10      	ldr	r2, [pc, #64]	; (8015aac <prvCheckForValidListAndQueue+0x64>)
 8015a6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015a6c:	4b12      	ldr	r3, [pc, #72]	; (8015ab8 <prvCheckForValidListAndQueue+0x70>)
 8015a6e:	4a10      	ldr	r2, [pc, #64]	; (8015ab0 <prvCheckForValidListAndQueue+0x68>)
 8015a70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015a72:	2300      	movs	r3, #0
 8015a74:	9300      	str	r3, [sp, #0]
 8015a76:	4b11      	ldr	r3, [pc, #68]	; (8015abc <prvCheckForValidListAndQueue+0x74>)
 8015a78:	4a11      	ldr	r2, [pc, #68]	; (8015ac0 <prvCheckForValidListAndQueue+0x78>)
 8015a7a:	2110      	movs	r1, #16
 8015a7c:	200a      	movs	r0, #10
 8015a7e:	f7fd fda9 	bl	80135d4 <xQueueGenericCreateStatic>
 8015a82:	4603      	mov	r3, r0
 8015a84:	4a08      	ldr	r2, [pc, #32]	; (8015aa8 <prvCheckForValidListAndQueue+0x60>)
 8015a86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015a88:	4b07      	ldr	r3, [pc, #28]	; (8015aa8 <prvCheckForValidListAndQueue+0x60>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d005      	beq.n	8015a9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015a90:	4b05      	ldr	r3, [pc, #20]	; (8015aa8 <prvCheckForValidListAndQueue+0x60>)
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	490b      	ldr	r1, [pc, #44]	; (8015ac4 <prvCheckForValidListAndQueue+0x7c>)
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7fe fc6e 	bl	8014378 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a9c:	f000 f972 	bl	8015d84 <vPortExitCritical>
}
 8015aa0:	bf00      	nop
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	200031a0 	.word	0x200031a0
 8015aac:	20003170 	.word	0x20003170
 8015ab0:	20003184 	.word	0x20003184
 8015ab4:	20003198 	.word	0x20003198
 8015ab8:	2000319c 	.word	0x2000319c
 8015abc:	2000324c 	.word	0x2000324c
 8015ac0:	200031ac 	.word	0x200031ac
 8015ac4:	080181a0 	.word	0x080181a0

08015ac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015ac8:	b480      	push	{r7}
 8015aca:	b085      	sub	sp, #20
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	60f8      	str	r0, [r7, #12]
 8015ad0:	60b9      	str	r1, [r7, #8]
 8015ad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	3b04      	subs	r3, #4
 8015ad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	3b04      	subs	r3, #4
 8015ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	f023 0201 	bic.w	r2, r3, #1
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	3b04      	subs	r3, #4
 8015af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015af8:	4a0c      	ldr	r2, [pc, #48]	; (8015b2c <pxPortInitialiseStack+0x64>)
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	3b14      	subs	r3, #20
 8015b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015b04:	687a      	ldr	r2, [r7, #4]
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	3b04      	subs	r3, #4
 8015b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	f06f 0202 	mvn.w	r2, #2
 8015b16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	3b20      	subs	r3, #32
 8015b1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015b1e:	68fb      	ldr	r3, [r7, #12]
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	3714      	adds	r7, #20
 8015b24:	46bd      	mov	sp, r7
 8015b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2a:	4770      	bx	lr
 8015b2c:	08015b31 	.word	0x08015b31

08015b30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015b30:	b480      	push	{r7}
 8015b32:	b085      	sub	sp, #20
 8015b34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015b36:	2300      	movs	r3, #0
 8015b38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015b3a:	4b12      	ldr	r3, [pc, #72]	; (8015b84 <prvTaskExitError+0x54>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b42:	d00a      	beq.n	8015b5a <prvTaskExitError+0x2a>
	__asm volatile
 8015b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b48:	f383 8811 	msr	BASEPRI, r3
 8015b4c:	f3bf 8f6f 	isb	sy
 8015b50:	f3bf 8f4f 	dsb	sy
 8015b54:	60fb      	str	r3, [r7, #12]
}
 8015b56:	bf00      	nop
 8015b58:	e7fe      	b.n	8015b58 <prvTaskExitError+0x28>
	__asm volatile
 8015b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b5e:	f383 8811 	msr	BASEPRI, r3
 8015b62:	f3bf 8f6f 	isb	sy
 8015b66:	f3bf 8f4f 	dsb	sy
 8015b6a:	60bb      	str	r3, [r7, #8]
}
 8015b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015b6e:	bf00      	nop
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d0fc      	beq.n	8015b70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015b76:	bf00      	nop
 8015b78:	bf00      	nop
 8015b7a:	3714      	adds	r7, #20
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b82:	4770      	bx	lr
 8015b84:	200005ac 	.word	0x200005ac
	...

08015b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015b90:	4b07      	ldr	r3, [pc, #28]	; (8015bb0 <pxCurrentTCBConst2>)
 8015b92:	6819      	ldr	r1, [r3, #0]
 8015b94:	6808      	ldr	r0, [r1, #0]
 8015b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b9a:	f380 8809 	msr	PSP, r0
 8015b9e:	f3bf 8f6f 	isb	sy
 8015ba2:	f04f 0000 	mov.w	r0, #0
 8015ba6:	f380 8811 	msr	BASEPRI, r0
 8015baa:	4770      	bx	lr
 8015bac:	f3af 8000 	nop.w

08015bb0 <pxCurrentTCBConst2>:
 8015bb0:	20002c70 	.word	0x20002c70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015bb4:	bf00      	nop
 8015bb6:	bf00      	nop

08015bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015bb8:	4808      	ldr	r0, [pc, #32]	; (8015bdc <prvPortStartFirstTask+0x24>)
 8015bba:	6800      	ldr	r0, [r0, #0]
 8015bbc:	6800      	ldr	r0, [r0, #0]
 8015bbe:	f380 8808 	msr	MSP, r0
 8015bc2:	f04f 0000 	mov.w	r0, #0
 8015bc6:	f380 8814 	msr	CONTROL, r0
 8015bca:	b662      	cpsie	i
 8015bcc:	b661      	cpsie	f
 8015bce:	f3bf 8f4f 	dsb	sy
 8015bd2:	f3bf 8f6f 	isb	sy
 8015bd6:	df00      	svc	0
 8015bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015bda:	bf00      	nop
 8015bdc:	e000ed08 	.word	0xe000ed08

08015be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b086      	sub	sp, #24
 8015be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015be6:	4b46      	ldr	r3, [pc, #280]	; (8015d00 <xPortStartScheduler+0x120>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	4a46      	ldr	r2, [pc, #280]	; (8015d04 <xPortStartScheduler+0x124>)
 8015bec:	4293      	cmp	r3, r2
 8015bee:	d10a      	bne.n	8015c06 <xPortStartScheduler+0x26>
	__asm volatile
 8015bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf4:	f383 8811 	msr	BASEPRI, r3
 8015bf8:	f3bf 8f6f 	isb	sy
 8015bfc:	f3bf 8f4f 	dsb	sy
 8015c00:	613b      	str	r3, [r7, #16]
}
 8015c02:	bf00      	nop
 8015c04:	e7fe      	b.n	8015c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015c06:	4b3e      	ldr	r3, [pc, #248]	; (8015d00 <xPortStartScheduler+0x120>)
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4a3f      	ldr	r2, [pc, #252]	; (8015d08 <xPortStartScheduler+0x128>)
 8015c0c:	4293      	cmp	r3, r2
 8015c0e:	d10a      	bne.n	8015c26 <xPortStartScheduler+0x46>
	__asm volatile
 8015c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c14:	f383 8811 	msr	BASEPRI, r3
 8015c18:	f3bf 8f6f 	isb	sy
 8015c1c:	f3bf 8f4f 	dsb	sy
 8015c20:	60fb      	str	r3, [r7, #12]
}
 8015c22:	bf00      	nop
 8015c24:	e7fe      	b.n	8015c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015c26:	4b39      	ldr	r3, [pc, #228]	; (8015d0c <xPortStartScheduler+0x12c>)
 8015c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015c2a:	697b      	ldr	r3, [r7, #20]
 8015c2c:	781b      	ldrb	r3, [r3, #0]
 8015c2e:	b2db      	uxtb	r3, r3
 8015c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	22ff      	movs	r2, #255	; 0xff
 8015c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015c38:	697b      	ldr	r3, [r7, #20]
 8015c3a:	781b      	ldrb	r3, [r3, #0]
 8015c3c:	b2db      	uxtb	r3, r3
 8015c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015c40:	78fb      	ldrb	r3, [r7, #3]
 8015c42:	b2db      	uxtb	r3, r3
 8015c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015c48:	b2da      	uxtb	r2, r3
 8015c4a:	4b31      	ldr	r3, [pc, #196]	; (8015d10 <xPortStartScheduler+0x130>)
 8015c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015c4e:	4b31      	ldr	r3, [pc, #196]	; (8015d14 <xPortStartScheduler+0x134>)
 8015c50:	2207      	movs	r2, #7
 8015c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015c54:	e009      	b.n	8015c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015c56:	4b2f      	ldr	r3, [pc, #188]	; (8015d14 <xPortStartScheduler+0x134>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	3b01      	subs	r3, #1
 8015c5c:	4a2d      	ldr	r2, [pc, #180]	; (8015d14 <xPortStartScheduler+0x134>)
 8015c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015c60:	78fb      	ldrb	r3, [r7, #3]
 8015c62:	b2db      	uxtb	r3, r3
 8015c64:	005b      	lsls	r3, r3, #1
 8015c66:	b2db      	uxtb	r3, r3
 8015c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015c6a:	78fb      	ldrb	r3, [r7, #3]
 8015c6c:	b2db      	uxtb	r3, r3
 8015c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015c72:	2b80      	cmp	r3, #128	; 0x80
 8015c74:	d0ef      	beq.n	8015c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015c76:	4b27      	ldr	r3, [pc, #156]	; (8015d14 <xPortStartScheduler+0x134>)
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	f1c3 0307 	rsb	r3, r3, #7
 8015c7e:	2b04      	cmp	r3, #4
 8015c80:	d00a      	beq.n	8015c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8015c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c86:	f383 8811 	msr	BASEPRI, r3
 8015c8a:	f3bf 8f6f 	isb	sy
 8015c8e:	f3bf 8f4f 	dsb	sy
 8015c92:	60bb      	str	r3, [r7, #8]
}
 8015c94:	bf00      	nop
 8015c96:	e7fe      	b.n	8015c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015c98:	4b1e      	ldr	r3, [pc, #120]	; (8015d14 <xPortStartScheduler+0x134>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	021b      	lsls	r3, r3, #8
 8015c9e:	4a1d      	ldr	r2, [pc, #116]	; (8015d14 <xPortStartScheduler+0x134>)
 8015ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015ca2:	4b1c      	ldr	r3, [pc, #112]	; (8015d14 <xPortStartScheduler+0x134>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015caa:	4a1a      	ldr	r2, [pc, #104]	; (8015d14 <xPortStartScheduler+0x134>)
 8015cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	b2da      	uxtb	r2, r3
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015cb6:	4b18      	ldr	r3, [pc, #96]	; (8015d18 <xPortStartScheduler+0x138>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	4a17      	ldr	r2, [pc, #92]	; (8015d18 <xPortStartScheduler+0x138>)
 8015cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015cc2:	4b15      	ldr	r3, [pc, #84]	; (8015d18 <xPortStartScheduler+0x138>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	4a14      	ldr	r2, [pc, #80]	; (8015d18 <xPortStartScheduler+0x138>)
 8015cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015cce:	f000 f8dd 	bl	8015e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015cd2:	4b12      	ldr	r3, [pc, #72]	; (8015d1c <xPortStartScheduler+0x13c>)
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015cd8:	f000 f8fc 	bl	8015ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015cdc:	4b10      	ldr	r3, [pc, #64]	; (8015d20 <xPortStartScheduler+0x140>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	4a0f      	ldr	r2, [pc, #60]	; (8015d20 <xPortStartScheduler+0x140>)
 8015ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015ce8:	f7ff ff66 	bl	8015bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015cec:	f7fe ff54 	bl	8014b98 <vTaskSwitchContext>
	prvTaskExitError();
 8015cf0:	f7ff ff1e 	bl	8015b30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015cf4:	2300      	movs	r3, #0
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3718      	adds	r7, #24
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}
 8015cfe:	bf00      	nop
 8015d00:	e000ed00 	.word	0xe000ed00
 8015d04:	410fc271 	.word	0x410fc271
 8015d08:	410fc270 	.word	0x410fc270
 8015d0c:	e000e400 	.word	0xe000e400
 8015d10:	2000329c 	.word	0x2000329c
 8015d14:	200032a0 	.word	0x200032a0
 8015d18:	e000ed20 	.word	0xe000ed20
 8015d1c:	200005ac 	.word	0x200005ac
 8015d20:	e000ef34 	.word	0xe000ef34

08015d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015d24:	b480      	push	{r7}
 8015d26:	b083      	sub	sp, #12
 8015d28:	af00      	add	r7, sp, #0
	__asm volatile
 8015d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d2e:	f383 8811 	msr	BASEPRI, r3
 8015d32:	f3bf 8f6f 	isb	sy
 8015d36:	f3bf 8f4f 	dsb	sy
 8015d3a:	607b      	str	r3, [r7, #4]
}
 8015d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015d3e:	4b0f      	ldr	r3, [pc, #60]	; (8015d7c <vPortEnterCritical+0x58>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	3301      	adds	r3, #1
 8015d44:	4a0d      	ldr	r2, [pc, #52]	; (8015d7c <vPortEnterCritical+0x58>)
 8015d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015d48:	4b0c      	ldr	r3, [pc, #48]	; (8015d7c <vPortEnterCritical+0x58>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	2b01      	cmp	r3, #1
 8015d4e:	d10f      	bne.n	8015d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015d50:	4b0b      	ldr	r3, [pc, #44]	; (8015d80 <vPortEnterCritical+0x5c>)
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d00a      	beq.n	8015d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8015d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d5e:	f383 8811 	msr	BASEPRI, r3
 8015d62:	f3bf 8f6f 	isb	sy
 8015d66:	f3bf 8f4f 	dsb	sy
 8015d6a:	603b      	str	r3, [r7, #0]
}
 8015d6c:	bf00      	nop
 8015d6e:	e7fe      	b.n	8015d6e <vPortEnterCritical+0x4a>
	}
}
 8015d70:	bf00      	nop
 8015d72:	370c      	adds	r7, #12
 8015d74:	46bd      	mov	sp, r7
 8015d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7a:	4770      	bx	lr
 8015d7c:	200005ac 	.word	0x200005ac
 8015d80:	e000ed04 	.word	0xe000ed04

08015d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015d84:	b480      	push	{r7}
 8015d86:	b083      	sub	sp, #12
 8015d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015d8a:	4b12      	ldr	r3, [pc, #72]	; (8015dd4 <vPortExitCritical+0x50>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d10a      	bne.n	8015da8 <vPortExitCritical+0x24>
	__asm volatile
 8015d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d96:	f383 8811 	msr	BASEPRI, r3
 8015d9a:	f3bf 8f6f 	isb	sy
 8015d9e:	f3bf 8f4f 	dsb	sy
 8015da2:	607b      	str	r3, [r7, #4]
}
 8015da4:	bf00      	nop
 8015da6:	e7fe      	b.n	8015da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015da8:	4b0a      	ldr	r3, [pc, #40]	; (8015dd4 <vPortExitCritical+0x50>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	3b01      	subs	r3, #1
 8015dae:	4a09      	ldr	r2, [pc, #36]	; (8015dd4 <vPortExitCritical+0x50>)
 8015db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015db2:	4b08      	ldr	r3, [pc, #32]	; (8015dd4 <vPortExitCritical+0x50>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d105      	bne.n	8015dc6 <vPortExitCritical+0x42>
 8015dba:	2300      	movs	r3, #0
 8015dbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	f383 8811 	msr	BASEPRI, r3
}
 8015dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015dc6:	bf00      	nop
 8015dc8:	370c      	adds	r7, #12
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd0:	4770      	bx	lr
 8015dd2:	bf00      	nop
 8015dd4:	200005ac 	.word	0x200005ac
	...

08015de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015de0:	f3ef 8009 	mrs	r0, PSP
 8015de4:	f3bf 8f6f 	isb	sy
 8015de8:	4b15      	ldr	r3, [pc, #84]	; (8015e40 <pxCurrentTCBConst>)
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	f01e 0f10 	tst.w	lr, #16
 8015df0:	bf08      	it	eq
 8015df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dfa:	6010      	str	r0, [r2, #0]
 8015dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015e04:	f380 8811 	msr	BASEPRI, r0
 8015e08:	f3bf 8f4f 	dsb	sy
 8015e0c:	f3bf 8f6f 	isb	sy
 8015e10:	f7fe fec2 	bl	8014b98 <vTaskSwitchContext>
 8015e14:	f04f 0000 	mov.w	r0, #0
 8015e18:	f380 8811 	msr	BASEPRI, r0
 8015e1c:	bc09      	pop	{r0, r3}
 8015e1e:	6819      	ldr	r1, [r3, #0]
 8015e20:	6808      	ldr	r0, [r1, #0]
 8015e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e26:	f01e 0f10 	tst.w	lr, #16
 8015e2a:	bf08      	it	eq
 8015e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015e30:	f380 8809 	msr	PSP, r0
 8015e34:	f3bf 8f6f 	isb	sy
 8015e38:	4770      	bx	lr
 8015e3a:	bf00      	nop
 8015e3c:	f3af 8000 	nop.w

08015e40 <pxCurrentTCBConst>:
 8015e40:	20002c70 	.word	0x20002c70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015e44:	bf00      	nop
 8015e46:	bf00      	nop

08015e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b082      	sub	sp, #8
 8015e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8015e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e52:	f383 8811 	msr	BASEPRI, r3
 8015e56:	f3bf 8f6f 	isb	sy
 8015e5a:	f3bf 8f4f 	dsb	sy
 8015e5e:	607b      	str	r3, [r7, #4]
}
 8015e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015e62:	f7fe fddf 	bl	8014a24 <xTaskIncrementTick>
 8015e66:	4603      	mov	r3, r0
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d003      	beq.n	8015e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015e6c:	4b06      	ldr	r3, [pc, #24]	; (8015e88 <SysTick_Handler+0x40>)
 8015e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e72:	601a      	str	r2, [r3, #0]
 8015e74:	2300      	movs	r3, #0
 8015e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	f383 8811 	msr	BASEPRI, r3
}
 8015e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015e80:	bf00      	nop
 8015e82:	3708      	adds	r7, #8
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}
 8015e88:	e000ed04 	.word	0xe000ed04

08015e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015e8c:	b480      	push	{r7}
 8015e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015e90:	4b0b      	ldr	r3, [pc, #44]	; (8015ec0 <vPortSetupTimerInterrupt+0x34>)
 8015e92:	2200      	movs	r2, #0
 8015e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015e96:	4b0b      	ldr	r3, [pc, #44]	; (8015ec4 <vPortSetupTimerInterrupt+0x38>)
 8015e98:	2200      	movs	r2, #0
 8015e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015e9c:	4b0a      	ldr	r3, [pc, #40]	; (8015ec8 <vPortSetupTimerInterrupt+0x3c>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	4a0a      	ldr	r2, [pc, #40]	; (8015ecc <vPortSetupTimerInterrupt+0x40>)
 8015ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8015ea6:	099b      	lsrs	r3, r3, #6
 8015ea8:	4a09      	ldr	r2, [pc, #36]	; (8015ed0 <vPortSetupTimerInterrupt+0x44>)
 8015eaa:	3b01      	subs	r3, #1
 8015eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015eae:	4b04      	ldr	r3, [pc, #16]	; (8015ec0 <vPortSetupTimerInterrupt+0x34>)
 8015eb0:	2207      	movs	r2, #7
 8015eb2:	601a      	str	r2, [r3, #0]
}
 8015eb4:	bf00      	nop
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebc:	4770      	bx	lr
 8015ebe:	bf00      	nop
 8015ec0:	e000e010 	.word	0xe000e010
 8015ec4:	e000e018 	.word	0xe000e018
 8015ec8:	2000000c 	.word	0x2000000c
 8015ecc:	10624dd3 	.word	0x10624dd3
 8015ed0:	e000e014 	.word	0xe000e014

08015ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015ee4 <vPortEnableVFP+0x10>
 8015ed8:	6801      	ldr	r1, [r0, #0]
 8015eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015ede:	6001      	str	r1, [r0, #0]
 8015ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015ee2:	bf00      	nop
 8015ee4:	e000ed88 	.word	0xe000ed88

08015ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015ee8:	b480      	push	{r7}
 8015eea:	b085      	sub	sp, #20
 8015eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015eee:	f3ef 8305 	mrs	r3, IPSR
 8015ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	2b0f      	cmp	r3, #15
 8015ef8:	d914      	bls.n	8015f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015efa:	4a17      	ldr	r2, [pc, #92]	; (8015f58 <vPortValidateInterruptPriority+0x70>)
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	4413      	add	r3, r2
 8015f00:	781b      	ldrb	r3, [r3, #0]
 8015f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015f04:	4b15      	ldr	r3, [pc, #84]	; (8015f5c <vPortValidateInterruptPriority+0x74>)
 8015f06:	781b      	ldrb	r3, [r3, #0]
 8015f08:	7afa      	ldrb	r2, [r7, #11]
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	d20a      	bcs.n	8015f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f12:	f383 8811 	msr	BASEPRI, r3
 8015f16:	f3bf 8f6f 	isb	sy
 8015f1a:	f3bf 8f4f 	dsb	sy
 8015f1e:	607b      	str	r3, [r7, #4]
}
 8015f20:	bf00      	nop
 8015f22:	e7fe      	b.n	8015f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015f24:	4b0e      	ldr	r3, [pc, #56]	; (8015f60 <vPortValidateInterruptPriority+0x78>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015f2c:	4b0d      	ldr	r3, [pc, #52]	; (8015f64 <vPortValidateInterruptPriority+0x7c>)
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d90a      	bls.n	8015f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f38:	f383 8811 	msr	BASEPRI, r3
 8015f3c:	f3bf 8f6f 	isb	sy
 8015f40:	f3bf 8f4f 	dsb	sy
 8015f44:	603b      	str	r3, [r7, #0]
}
 8015f46:	bf00      	nop
 8015f48:	e7fe      	b.n	8015f48 <vPortValidateInterruptPriority+0x60>
	}
 8015f4a:	bf00      	nop
 8015f4c:	3714      	adds	r7, #20
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f54:	4770      	bx	lr
 8015f56:	bf00      	nop
 8015f58:	e000e3f0 	.word	0xe000e3f0
 8015f5c:	2000329c 	.word	0x2000329c
 8015f60:	e000ed0c 	.word	0xe000ed0c
 8015f64:	200032a0 	.word	0x200032a0

08015f68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b08a      	sub	sp, #40	; 0x28
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015f70:	2300      	movs	r3, #0
 8015f72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015f74:	f7fe fc9a 	bl	80148ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015f78:	4b58      	ldr	r3, [pc, #352]	; (80160dc <pvPortMalloc+0x174>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d101      	bne.n	8015f84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015f80:	f000 f910 	bl	80161a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015f84:	4b56      	ldr	r3, [pc, #344]	; (80160e0 <pvPortMalloc+0x178>)
 8015f86:	681a      	ldr	r2, [r3, #0]
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	4013      	ands	r3, r2
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	f040 808e 	bne.w	80160ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d01d      	beq.n	8015fd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015f98:	2208      	movs	r2, #8
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	4413      	add	r3, r2
 8015f9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f003 0307 	and.w	r3, r3, #7
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d014      	beq.n	8015fd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f023 0307 	bic.w	r3, r3, #7
 8015fb0:	3308      	adds	r3, #8
 8015fb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	f003 0307 	and.w	r3, r3, #7
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d00a      	beq.n	8015fd4 <pvPortMalloc+0x6c>
	__asm volatile
 8015fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc2:	f383 8811 	msr	BASEPRI, r3
 8015fc6:	f3bf 8f6f 	isb	sy
 8015fca:	f3bf 8f4f 	dsb	sy
 8015fce:	617b      	str	r3, [r7, #20]
}
 8015fd0:	bf00      	nop
 8015fd2:	e7fe      	b.n	8015fd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d069      	beq.n	80160ae <pvPortMalloc+0x146>
 8015fda:	4b42      	ldr	r3, [pc, #264]	; (80160e4 <pvPortMalloc+0x17c>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	687a      	ldr	r2, [r7, #4]
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	d864      	bhi.n	80160ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015fe4:	4b40      	ldr	r3, [pc, #256]	; (80160e8 <pvPortMalloc+0x180>)
 8015fe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015fe8:	4b3f      	ldr	r3, [pc, #252]	; (80160e8 <pvPortMalloc+0x180>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015fee:	e004      	b.n	8015ffa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ffc:	685b      	ldr	r3, [r3, #4]
 8015ffe:	687a      	ldr	r2, [r7, #4]
 8016000:	429a      	cmp	r2, r3
 8016002:	d903      	bls.n	801600c <pvPortMalloc+0xa4>
 8016004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d1f1      	bne.n	8015ff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801600c:	4b33      	ldr	r3, [pc, #204]	; (80160dc <pvPortMalloc+0x174>)
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016012:	429a      	cmp	r2, r3
 8016014:	d04b      	beq.n	80160ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016016:	6a3b      	ldr	r3, [r7, #32]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	2208      	movs	r2, #8
 801601c:	4413      	add	r3, r2
 801601e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016022:	681a      	ldr	r2, [r3, #0]
 8016024:	6a3b      	ldr	r3, [r7, #32]
 8016026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801602a:	685a      	ldr	r2, [r3, #4]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	1ad2      	subs	r2, r2, r3
 8016030:	2308      	movs	r3, #8
 8016032:	005b      	lsls	r3, r3, #1
 8016034:	429a      	cmp	r2, r3
 8016036:	d91f      	bls.n	8016078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	4413      	add	r3, r2
 801603e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016040:	69bb      	ldr	r3, [r7, #24]
 8016042:	f003 0307 	and.w	r3, r3, #7
 8016046:	2b00      	cmp	r3, #0
 8016048:	d00a      	beq.n	8016060 <pvPortMalloc+0xf8>
	__asm volatile
 801604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801604e:	f383 8811 	msr	BASEPRI, r3
 8016052:	f3bf 8f6f 	isb	sy
 8016056:	f3bf 8f4f 	dsb	sy
 801605a:	613b      	str	r3, [r7, #16]
}
 801605c:	bf00      	nop
 801605e:	e7fe      	b.n	801605e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016062:	685a      	ldr	r2, [r3, #4]
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	1ad2      	subs	r2, r2, r3
 8016068:	69bb      	ldr	r3, [r7, #24]
 801606a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801606e:	687a      	ldr	r2, [r7, #4]
 8016070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016072:	69b8      	ldr	r0, [r7, #24]
 8016074:	f000 f8f8 	bl	8016268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016078:	4b1a      	ldr	r3, [pc, #104]	; (80160e4 <pvPortMalloc+0x17c>)
 801607a:	681a      	ldr	r2, [r3, #0]
 801607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801607e:	685b      	ldr	r3, [r3, #4]
 8016080:	1ad3      	subs	r3, r2, r3
 8016082:	4a18      	ldr	r2, [pc, #96]	; (80160e4 <pvPortMalloc+0x17c>)
 8016084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016086:	4b17      	ldr	r3, [pc, #92]	; (80160e4 <pvPortMalloc+0x17c>)
 8016088:	681a      	ldr	r2, [r3, #0]
 801608a:	4b18      	ldr	r3, [pc, #96]	; (80160ec <pvPortMalloc+0x184>)
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	429a      	cmp	r2, r3
 8016090:	d203      	bcs.n	801609a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016092:	4b14      	ldr	r3, [pc, #80]	; (80160e4 <pvPortMalloc+0x17c>)
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	4a15      	ldr	r2, [pc, #84]	; (80160ec <pvPortMalloc+0x184>)
 8016098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801609c:	685a      	ldr	r2, [r3, #4]
 801609e:	4b10      	ldr	r3, [pc, #64]	; (80160e0 <pvPortMalloc+0x178>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	431a      	orrs	r2, r3
 80160a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80160a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160aa:	2200      	movs	r2, #0
 80160ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80160ae:	f7fe fc0b 	bl	80148c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80160b2:	69fb      	ldr	r3, [r7, #28]
 80160b4:	f003 0307 	and.w	r3, r3, #7
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d00a      	beq.n	80160d2 <pvPortMalloc+0x16a>
	__asm volatile
 80160bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160c0:	f383 8811 	msr	BASEPRI, r3
 80160c4:	f3bf 8f6f 	isb	sy
 80160c8:	f3bf 8f4f 	dsb	sy
 80160cc:	60fb      	str	r3, [r7, #12]
}
 80160ce:	bf00      	nop
 80160d0:	e7fe      	b.n	80160d0 <pvPortMalloc+0x168>
	return pvReturn;
 80160d2:	69fb      	ldr	r3, [r7, #28]
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3728      	adds	r7, #40	; 0x28
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	20006eac 	.word	0x20006eac
 80160e0:	20006eb8 	.word	0x20006eb8
 80160e4:	20006eb0 	.word	0x20006eb0
 80160e8:	20006ea4 	.word	0x20006ea4
 80160ec:	20006eb4 	.word	0x20006eb4

080160f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b086      	sub	sp, #24
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d048      	beq.n	8016194 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016102:	2308      	movs	r3, #8
 8016104:	425b      	negs	r3, r3
 8016106:	697a      	ldr	r2, [r7, #20]
 8016108:	4413      	add	r3, r2
 801610a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801610c:	697b      	ldr	r3, [r7, #20]
 801610e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016110:	693b      	ldr	r3, [r7, #16]
 8016112:	685a      	ldr	r2, [r3, #4]
 8016114:	4b21      	ldr	r3, [pc, #132]	; (801619c <vPortFree+0xac>)
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	4013      	ands	r3, r2
 801611a:	2b00      	cmp	r3, #0
 801611c:	d10a      	bne.n	8016134 <vPortFree+0x44>
	__asm volatile
 801611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016122:	f383 8811 	msr	BASEPRI, r3
 8016126:	f3bf 8f6f 	isb	sy
 801612a:	f3bf 8f4f 	dsb	sy
 801612e:	60fb      	str	r3, [r7, #12]
}
 8016130:	bf00      	nop
 8016132:	e7fe      	b.n	8016132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016134:	693b      	ldr	r3, [r7, #16]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d00a      	beq.n	8016152 <vPortFree+0x62>
	__asm volatile
 801613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016140:	f383 8811 	msr	BASEPRI, r3
 8016144:	f3bf 8f6f 	isb	sy
 8016148:	f3bf 8f4f 	dsb	sy
 801614c:	60bb      	str	r3, [r7, #8]
}
 801614e:	bf00      	nop
 8016150:	e7fe      	b.n	8016150 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016152:	693b      	ldr	r3, [r7, #16]
 8016154:	685a      	ldr	r2, [r3, #4]
 8016156:	4b11      	ldr	r3, [pc, #68]	; (801619c <vPortFree+0xac>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	4013      	ands	r3, r2
 801615c:	2b00      	cmp	r3, #0
 801615e:	d019      	beq.n	8016194 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016160:	693b      	ldr	r3, [r7, #16]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d115      	bne.n	8016194 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016168:	693b      	ldr	r3, [r7, #16]
 801616a:	685a      	ldr	r2, [r3, #4]
 801616c:	4b0b      	ldr	r3, [pc, #44]	; (801619c <vPortFree+0xac>)
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	43db      	mvns	r3, r3
 8016172:	401a      	ands	r2, r3
 8016174:	693b      	ldr	r3, [r7, #16]
 8016176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016178:	f7fe fb98 	bl	80148ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801617c:	693b      	ldr	r3, [r7, #16]
 801617e:	685a      	ldr	r2, [r3, #4]
 8016180:	4b07      	ldr	r3, [pc, #28]	; (80161a0 <vPortFree+0xb0>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	4413      	add	r3, r2
 8016186:	4a06      	ldr	r2, [pc, #24]	; (80161a0 <vPortFree+0xb0>)
 8016188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801618a:	6938      	ldr	r0, [r7, #16]
 801618c:	f000 f86c 	bl	8016268 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016190:	f7fe fb9a 	bl	80148c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016194:	bf00      	nop
 8016196:	3718      	adds	r7, #24
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}
 801619c:	20006eb8 	.word	0x20006eb8
 80161a0:	20006eb0 	.word	0x20006eb0

080161a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80161a4:	b480      	push	{r7}
 80161a6:	b085      	sub	sp, #20
 80161a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80161aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80161ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80161b0:	4b27      	ldr	r3, [pc, #156]	; (8016250 <prvHeapInit+0xac>)
 80161b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	f003 0307 	and.w	r3, r3, #7
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d00c      	beq.n	80161d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	3307      	adds	r3, #7
 80161c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	f023 0307 	bic.w	r3, r3, #7
 80161ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80161cc:	68ba      	ldr	r2, [r7, #8]
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	1ad3      	subs	r3, r2, r3
 80161d2:	4a1f      	ldr	r2, [pc, #124]	; (8016250 <prvHeapInit+0xac>)
 80161d4:	4413      	add	r3, r2
 80161d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80161dc:	4a1d      	ldr	r2, [pc, #116]	; (8016254 <prvHeapInit+0xb0>)
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80161e2:	4b1c      	ldr	r3, [pc, #112]	; (8016254 <prvHeapInit+0xb0>)
 80161e4:	2200      	movs	r2, #0
 80161e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	68ba      	ldr	r2, [r7, #8]
 80161ec:	4413      	add	r3, r2
 80161ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80161f0:	2208      	movs	r2, #8
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	1a9b      	subs	r3, r3, r2
 80161f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	f023 0307 	bic.w	r3, r3, #7
 80161fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	4a15      	ldr	r2, [pc, #84]	; (8016258 <prvHeapInit+0xb4>)
 8016204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016206:	4b14      	ldr	r3, [pc, #80]	; (8016258 <prvHeapInit+0xb4>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	2200      	movs	r2, #0
 801620c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801620e:	4b12      	ldr	r3, [pc, #72]	; (8016258 <prvHeapInit+0xb4>)
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	2200      	movs	r2, #0
 8016214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801621a:	683b      	ldr	r3, [r7, #0]
 801621c:	68fa      	ldr	r2, [r7, #12]
 801621e:	1ad2      	subs	r2, r2, r3
 8016220:	683b      	ldr	r3, [r7, #0]
 8016222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016224:	4b0c      	ldr	r3, [pc, #48]	; (8016258 <prvHeapInit+0xb4>)
 8016226:	681a      	ldr	r2, [r3, #0]
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801622c:	683b      	ldr	r3, [r7, #0]
 801622e:	685b      	ldr	r3, [r3, #4]
 8016230:	4a0a      	ldr	r2, [pc, #40]	; (801625c <prvHeapInit+0xb8>)
 8016232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016234:	683b      	ldr	r3, [r7, #0]
 8016236:	685b      	ldr	r3, [r3, #4]
 8016238:	4a09      	ldr	r2, [pc, #36]	; (8016260 <prvHeapInit+0xbc>)
 801623a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801623c:	4b09      	ldr	r3, [pc, #36]	; (8016264 <prvHeapInit+0xc0>)
 801623e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016242:	601a      	str	r2, [r3, #0]
}
 8016244:	bf00      	nop
 8016246:	3714      	adds	r7, #20
 8016248:	46bd      	mov	sp, r7
 801624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624e:	4770      	bx	lr
 8016250:	200032a4 	.word	0x200032a4
 8016254:	20006ea4 	.word	0x20006ea4
 8016258:	20006eac 	.word	0x20006eac
 801625c:	20006eb4 	.word	0x20006eb4
 8016260:	20006eb0 	.word	0x20006eb0
 8016264:	20006eb8 	.word	0x20006eb8

08016268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016268:	b480      	push	{r7}
 801626a:	b085      	sub	sp, #20
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016270:	4b28      	ldr	r3, [pc, #160]	; (8016314 <prvInsertBlockIntoFreeList+0xac>)
 8016272:	60fb      	str	r3, [r7, #12]
 8016274:	e002      	b.n	801627c <prvInsertBlockIntoFreeList+0x14>
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	60fb      	str	r3, [r7, #12]
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	687a      	ldr	r2, [r7, #4]
 8016282:	429a      	cmp	r2, r3
 8016284:	d8f7      	bhi.n	8016276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	685b      	ldr	r3, [r3, #4]
 801628e:	68ba      	ldr	r2, [r7, #8]
 8016290:	4413      	add	r3, r2
 8016292:	687a      	ldr	r2, [r7, #4]
 8016294:	429a      	cmp	r2, r3
 8016296:	d108      	bne.n	80162aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	685a      	ldr	r2, [r3, #4]
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	685b      	ldr	r3, [r3, #4]
 80162a0:	441a      	add	r2, r3
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	685b      	ldr	r3, [r3, #4]
 80162b2:	68ba      	ldr	r2, [r7, #8]
 80162b4:	441a      	add	r2, r3
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	429a      	cmp	r2, r3
 80162bc:	d118      	bne.n	80162f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	681a      	ldr	r2, [r3, #0]
 80162c2:	4b15      	ldr	r3, [pc, #84]	; (8016318 <prvInsertBlockIntoFreeList+0xb0>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	429a      	cmp	r2, r3
 80162c8:	d00d      	beq.n	80162e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	685a      	ldr	r2, [r3, #4]
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	685b      	ldr	r3, [r3, #4]
 80162d4:	441a      	add	r2, r3
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	681a      	ldr	r2, [r3, #0]
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	601a      	str	r2, [r3, #0]
 80162e4:	e008      	b.n	80162f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80162e6:	4b0c      	ldr	r3, [pc, #48]	; (8016318 <prvInsertBlockIntoFreeList+0xb0>)
 80162e8:	681a      	ldr	r2, [r3, #0]
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	601a      	str	r2, [r3, #0]
 80162ee:	e003      	b.n	80162f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	681a      	ldr	r2, [r3, #0]
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80162f8:	68fa      	ldr	r2, [r7, #12]
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	429a      	cmp	r2, r3
 80162fe:	d002      	beq.n	8016306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016306:	bf00      	nop
 8016308:	3714      	adds	r7, #20
 801630a:	46bd      	mov	sp, r7
 801630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016310:	4770      	bx	lr
 8016312:	bf00      	nop
 8016314:	20006ea4 	.word	0x20006ea4
 8016318:	20006eac 	.word	0x20006eac

0801631c <findslot>:
 801631c:	4b0a      	ldr	r3, [pc, #40]	; (8016348 <findslot+0x2c>)
 801631e:	b510      	push	{r4, lr}
 8016320:	4604      	mov	r4, r0
 8016322:	6818      	ldr	r0, [r3, #0]
 8016324:	b118      	cbz	r0, 801632e <findslot+0x12>
 8016326:	6983      	ldr	r3, [r0, #24]
 8016328:	b90b      	cbnz	r3, 801632e <findslot+0x12>
 801632a:	f000 fb7b 	bl	8016a24 <__sinit>
 801632e:	2c13      	cmp	r4, #19
 8016330:	d807      	bhi.n	8016342 <findslot+0x26>
 8016332:	4806      	ldr	r0, [pc, #24]	; (801634c <findslot+0x30>)
 8016334:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8016338:	3201      	adds	r2, #1
 801633a:	d002      	beq.n	8016342 <findslot+0x26>
 801633c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8016340:	bd10      	pop	{r4, pc}
 8016342:	2000      	movs	r0, #0
 8016344:	e7fc      	b.n	8016340 <findslot+0x24>
 8016346:	bf00      	nop
 8016348:	200005bc 	.word	0x200005bc
 801634c:	20006ec8 	.word	0x20006ec8

08016350 <error>:
 8016350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016352:	4604      	mov	r4, r0
 8016354:	f000 fb08 	bl	8016968 <__errno>
 8016358:	2613      	movs	r6, #19
 801635a:	4605      	mov	r5, r0
 801635c:	2700      	movs	r7, #0
 801635e:	4630      	mov	r0, r6
 8016360:	4639      	mov	r1, r7
 8016362:	beab      	bkpt	0x00ab
 8016364:	4606      	mov	r6, r0
 8016366:	602e      	str	r6, [r5, #0]
 8016368:	4620      	mov	r0, r4
 801636a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801636c <checkerror>:
 801636c:	1c43      	adds	r3, r0, #1
 801636e:	d101      	bne.n	8016374 <checkerror+0x8>
 8016370:	f7ff bfee 	b.w	8016350 <error>
 8016374:	4770      	bx	lr

08016376 <_swiread>:
 8016376:	b530      	push	{r4, r5, lr}
 8016378:	b085      	sub	sp, #20
 801637a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801637e:	9203      	str	r2, [sp, #12]
 8016380:	2406      	movs	r4, #6
 8016382:	ad01      	add	r5, sp, #4
 8016384:	4620      	mov	r0, r4
 8016386:	4629      	mov	r1, r5
 8016388:	beab      	bkpt	0x00ab
 801638a:	4604      	mov	r4, r0
 801638c:	4620      	mov	r0, r4
 801638e:	f7ff ffed 	bl	801636c <checkerror>
 8016392:	b005      	add	sp, #20
 8016394:	bd30      	pop	{r4, r5, pc}

08016396 <_read>:
 8016396:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016398:	4615      	mov	r5, r2
 801639a:	9101      	str	r1, [sp, #4]
 801639c:	f7ff ffbe 	bl	801631c <findslot>
 80163a0:	9901      	ldr	r1, [sp, #4]
 80163a2:	4604      	mov	r4, r0
 80163a4:	b938      	cbnz	r0, 80163b6 <_read+0x20>
 80163a6:	f000 fadf 	bl	8016968 <__errno>
 80163aa:	2309      	movs	r3, #9
 80163ac:	6003      	str	r3, [r0, #0]
 80163ae:	f04f 30ff 	mov.w	r0, #4294967295
 80163b2:	b003      	add	sp, #12
 80163b4:	bd30      	pop	{r4, r5, pc}
 80163b6:	6800      	ldr	r0, [r0, #0]
 80163b8:	462a      	mov	r2, r5
 80163ba:	f7ff ffdc 	bl	8016376 <_swiread>
 80163be:	1c43      	adds	r3, r0, #1
 80163c0:	d0f7      	beq.n	80163b2 <_read+0x1c>
 80163c2:	6863      	ldr	r3, [r4, #4]
 80163c4:	1a2a      	subs	r2, r5, r0
 80163c6:	4413      	add	r3, r2
 80163c8:	6063      	str	r3, [r4, #4]
 80163ca:	4610      	mov	r0, r2
 80163cc:	e7f1      	b.n	80163b2 <_read+0x1c>

080163ce <_swilseek>:
 80163ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163d0:	460c      	mov	r4, r1
 80163d2:	4616      	mov	r6, r2
 80163d4:	f7ff ffa2 	bl	801631c <findslot>
 80163d8:	4605      	mov	r5, r0
 80163da:	b940      	cbnz	r0, 80163ee <_swilseek+0x20>
 80163dc:	f000 fac4 	bl	8016968 <__errno>
 80163e0:	2309      	movs	r3, #9
 80163e2:	6003      	str	r3, [r0, #0]
 80163e4:	f04f 34ff 	mov.w	r4, #4294967295
 80163e8:	4620      	mov	r0, r4
 80163ea:	b003      	add	sp, #12
 80163ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163ee:	2e02      	cmp	r6, #2
 80163f0:	d903      	bls.n	80163fa <_swilseek+0x2c>
 80163f2:	f000 fab9 	bl	8016968 <__errno>
 80163f6:	2316      	movs	r3, #22
 80163f8:	e7f3      	b.n	80163e2 <_swilseek+0x14>
 80163fa:	2e01      	cmp	r6, #1
 80163fc:	d112      	bne.n	8016424 <_swilseek+0x56>
 80163fe:	6843      	ldr	r3, [r0, #4]
 8016400:	18e4      	adds	r4, r4, r3
 8016402:	d4f6      	bmi.n	80163f2 <_swilseek+0x24>
 8016404:	682b      	ldr	r3, [r5, #0]
 8016406:	260a      	movs	r6, #10
 8016408:	e9cd 3400 	strd	r3, r4, [sp]
 801640c:	466f      	mov	r7, sp
 801640e:	4630      	mov	r0, r6
 8016410:	4639      	mov	r1, r7
 8016412:	beab      	bkpt	0x00ab
 8016414:	4606      	mov	r6, r0
 8016416:	4630      	mov	r0, r6
 8016418:	f7ff ffa8 	bl	801636c <checkerror>
 801641c:	2800      	cmp	r0, #0
 801641e:	dbe1      	blt.n	80163e4 <_swilseek+0x16>
 8016420:	606c      	str	r4, [r5, #4]
 8016422:	e7e1      	b.n	80163e8 <_swilseek+0x1a>
 8016424:	2e02      	cmp	r6, #2
 8016426:	d1ed      	bne.n	8016404 <_swilseek+0x36>
 8016428:	6803      	ldr	r3, [r0, #0]
 801642a:	9300      	str	r3, [sp, #0]
 801642c:	260c      	movs	r6, #12
 801642e:	466f      	mov	r7, sp
 8016430:	4630      	mov	r0, r6
 8016432:	4639      	mov	r1, r7
 8016434:	beab      	bkpt	0x00ab
 8016436:	4606      	mov	r6, r0
 8016438:	4630      	mov	r0, r6
 801643a:	f7ff ff97 	bl	801636c <checkerror>
 801643e:	1c43      	adds	r3, r0, #1
 8016440:	d0d0      	beq.n	80163e4 <_swilseek+0x16>
 8016442:	4404      	add	r4, r0
 8016444:	e7de      	b.n	8016404 <_swilseek+0x36>

08016446 <_lseek>:
 8016446:	f7ff bfc2 	b.w	80163ce <_swilseek>

0801644a <_swiwrite>:
 801644a:	b530      	push	{r4, r5, lr}
 801644c:	b085      	sub	sp, #20
 801644e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8016452:	9203      	str	r2, [sp, #12]
 8016454:	2405      	movs	r4, #5
 8016456:	ad01      	add	r5, sp, #4
 8016458:	4620      	mov	r0, r4
 801645a:	4629      	mov	r1, r5
 801645c:	beab      	bkpt	0x00ab
 801645e:	4604      	mov	r4, r0
 8016460:	4620      	mov	r0, r4
 8016462:	f7ff ff83 	bl	801636c <checkerror>
 8016466:	b005      	add	sp, #20
 8016468:	bd30      	pop	{r4, r5, pc}

0801646a <_write>:
 801646a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801646c:	4615      	mov	r5, r2
 801646e:	9101      	str	r1, [sp, #4]
 8016470:	f7ff ff54 	bl	801631c <findslot>
 8016474:	9901      	ldr	r1, [sp, #4]
 8016476:	4604      	mov	r4, r0
 8016478:	b930      	cbnz	r0, 8016488 <_write+0x1e>
 801647a:	f000 fa75 	bl	8016968 <__errno>
 801647e:	2309      	movs	r3, #9
 8016480:	6003      	str	r3, [r0, #0]
 8016482:	f04f 30ff 	mov.w	r0, #4294967295
 8016486:	e012      	b.n	80164ae <_write+0x44>
 8016488:	6800      	ldr	r0, [r0, #0]
 801648a:	462a      	mov	r2, r5
 801648c:	f7ff ffdd 	bl	801644a <_swiwrite>
 8016490:	2800      	cmp	r0, #0
 8016492:	dbf6      	blt.n	8016482 <_write+0x18>
 8016494:	6862      	ldr	r2, [r4, #4]
 8016496:	1a2b      	subs	r3, r5, r0
 8016498:	441a      	add	r2, r3
 801649a:	42a8      	cmp	r0, r5
 801649c:	6062      	str	r2, [r4, #4]
 801649e:	d105      	bne.n	80164ac <_write+0x42>
 80164a0:	2000      	movs	r0, #0
 80164a2:	b003      	add	sp, #12
 80164a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164a8:	f7ff bf52 	b.w	8016350 <error>
 80164ac:	4618      	mov	r0, r3
 80164ae:	b003      	add	sp, #12
 80164b0:	bd30      	pop	{r4, r5, pc}

080164b2 <_swiclose>:
 80164b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164b4:	2402      	movs	r4, #2
 80164b6:	9001      	str	r0, [sp, #4]
 80164b8:	ad01      	add	r5, sp, #4
 80164ba:	4620      	mov	r0, r4
 80164bc:	4629      	mov	r1, r5
 80164be:	beab      	bkpt	0x00ab
 80164c0:	4604      	mov	r4, r0
 80164c2:	4620      	mov	r0, r4
 80164c4:	f7ff ff52 	bl	801636c <checkerror>
 80164c8:	b003      	add	sp, #12
 80164ca:	bd30      	pop	{r4, r5, pc}

080164cc <_close>:
 80164cc:	b538      	push	{r3, r4, r5, lr}
 80164ce:	4605      	mov	r5, r0
 80164d0:	f7ff ff24 	bl	801631c <findslot>
 80164d4:	4604      	mov	r4, r0
 80164d6:	b930      	cbnz	r0, 80164e6 <_close+0x1a>
 80164d8:	f000 fa46 	bl	8016968 <__errno>
 80164dc:	2309      	movs	r3, #9
 80164de:	6003      	str	r3, [r0, #0]
 80164e0:	f04f 30ff 	mov.w	r0, #4294967295
 80164e4:	bd38      	pop	{r3, r4, r5, pc}
 80164e6:	3d01      	subs	r5, #1
 80164e8:	2d01      	cmp	r5, #1
 80164ea:	d809      	bhi.n	8016500 <_close+0x34>
 80164ec:	4b09      	ldr	r3, [pc, #36]	; (8016514 <_close+0x48>)
 80164ee:	689a      	ldr	r2, [r3, #8]
 80164f0:	691b      	ldr	r3, [r3, #16]
 80164f2:	429a      	cmp	r2, r3
 80164f4:	d104      	bne.n	8016500 <_close+0x34>
 80164f6:	f04f 33ff 	mov.w	r3, #4294967295
 80164fa:	6003      	str	r3, [r0, #0]
 80164fc:	2000      	movs	r0, #0
 80164fe:	e7f1      	b.n	80164e4 <_close+0x18>
 8016500:	6820      	ldr	r0, [r4, #0]
 8016502:	f7ff ffd6 	bl	80164b2 <_swiclose>
 8016506:	2800      	cmp	r0, #0
 8016508:	d1ec      	bne.n	80164e4 <_close+0x18>
 801650a:	f04f 33ff 	mov.w	r3, #4294967295
 801650e:	6023      	str	r3, [r4, #0]
 8016510:	e7e8      	b.n	80164e4 <_close+0x18>
 8016512:	bf00      	nop
 8016514:	20006ec8 	.word	0x20006ec8

08016518 <_getpid>:
 8016518:	2001      	movs	r0, #1
 801651a:	4770      	bx	lr

0801651c <_swistat>:
 801651c:	b570      	push	{r4, r5, r6, lr}
 801651e:	460c      	mov	r4, r1
 8016520:	f7ff fefc 	bl	801631c <findslot>
 8016524:	4605      	mov	r5, r0
 8016526:	b930      	cbnz	r0, 8016536 <_swistat+0x1a>
 8016528:	f000 fa1e 	bl	8016968 <__errno>
 801652c:	2309      	movs	r3, #9
 801652e:	6003      	str	r3, [r0, #0]
 8016530:	f04f 30ff 	mov.w	r0, #4294967295
 8016534:	bd70      	pop	{r4, r5, r6, pc}
 8016536:	6863      	ldr	r3, [r4, #4]
 8016538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801653c:	6063      	str	r3, [r4, #4]
 801653e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016542:	64a3      	str	r3, [r4, #72]	; 0x48
 8016544:	260c      	movs	r6, #12
 8016546:	4630      	mov	r0, r6
 8016548:	4629      	mov	r1, r5
 801654a:	beab      	bkpt	0x00ab
 801654c:	4605      	mov	r5, r0
 801654e:	4628      	mov	r0, r5
 8016550:	f7ff ff0c 	bl	801636c <checkerror>
 8016554:	1c43      	adds	r3, r0, #1
 8016556:	bf1c      	itt	ne
 8016558:	6120      	strne	r0, [r4, #16]
 801655a:	2000      	movne	r0, #0
 801655c:	e7ea      	b.n	8016534 <_swistat+0x18>

0801655e <_fstat>:
 801655e:	460b      	mov	r3, r1
 8016560:	b510      	push	{r4, lr}
 8016562:	2100      	movs	r1, #0
 8016564:	4604      	mov	r4, r0
 8016566:	2258      	movs	r2, #88	; 0x58
 8016568:	4618      	mov	r0, r3
 801656a:	f000 fb37 	bl	8016bdc <memset>
 801656e:	4601      	mov	r1, r0
 8016570:	4620      	mov	r0, r4
 8016572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016576:	f7ff bfd1 	b.w	801651c <_swistat>

0801657a <_stat>:
 801657a:	b538      	push	{r3, r4, r5, lr}
 801657c:	460d      	mov	r5, r1
 801657e:	4604      	mov	r4, r0
 8016580:	2258      	movs	r2, #88	; 0x58
 8016582:	2100      	movs	r1, #0
 8016584:	4628      	mov	r0, r5
 8016586:	f000 fb29 	bl	8016bdc <memset>
 801658a:	4620      	mov	r0, r4
 801658c:	2100      	movs	r1, #0
 801658e:	f000 f811 	bl	80165b4 <_swiopen>
 8016592:	1c43      	adds	r3, r0, #1
 8016594:	4604      	mov	r4, r0
 8016596:	d00b      	beq.n	80165b0 <_stat+0x36>
 8016598:	686b      	ldr	r3, [r5, #4]
 801659a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801659e:	606b      	str	r3, [r5, #4]
 80165a0:	4629      	mov	r1, r5
 80165a2:	f7ff ffbb 	bl	801651c <_swistat>
 80165a6:	4605      	mov	r5, r0
 80165a8:	4620      	mov	r0, r4
 80165aa:	f7ff ff8f 	bl	80164cc <_close>
 80165ae:	462c      	mov	r4, r5
 80165b0:	4620      	mov	r0, r4
 80165b2:	bd38      	pop	{r3, r4, r5, pc}

080165b4 <_swiopen>:
 80165b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165b8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8016664 <_swiopen+0xb0>
 80165bc:	b097      	sub	sp, #92	; 0x5c
 80165be:	4607      	mov	r7, r0
 80165c0:	460e      	mov	r6, r1
 80165c2:	2500      	movs	r5, #0
 80165c4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80165c8:	1c61      	adds	r1, r4, #1
 80165ca:	d037      	beq.n	801663c <_swiopen+0x88>
 80165cc:	3501      	adds	r5, #1
 80165ce:	2d14      	cmp	r5, #20
 80165d0:	d1f8      	bne.n	80165c4 <_swiopen+0x10>
 80165d2:	f000 f9c9 	bl	8016968 <__errno>
 80165d6:	2318      	movs	r3, #24
 80165d8:	6003      	str	r3, [r0, #0]
 80165da:	f04f 34ff 	mov.w	r4, #4294967295
 80165de:	e03d      	b.n	801665c <_swiopen+0xa8>
 80165e0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80165e4:	f240 6301 	movw	r3, #1537	; 0x601
 80165e8:	07b2      	lsls	r2, r6, #30
 80165ea:	bf48      	it	mi
 80165ec:	f044 0402 	orrmi.w	r4, r4, #2
 80165f0:	421e      	tst	r6, r3
 80165f2:	bf18      	it	ne
 80165f4:	f044 0404 	orrne.w	r4, r4, #4
 80165f8:	0733      	lsls	r3, r6, #28
 80165fa:	bf48      	it	mi
 80165fc:	f024 0404 	bicmi.w	r4, r4, #4
 8016600:	4638      	mov	r0, r7
 8016602:	bf48      	it	mi
 8016604:	f044 0408 	orrmi.w	r4, r4, #8
 8016608:	9700      	str	r7, [sp, #0]
 801660a:	f7e9 fde1 	bl	80001d0 <strlen>
 801660e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8016612:	2401      	movs	r4, #1
 8016614:	4620      	mov	r0, r4
 8016616:	4649      	mov	r1, r9
 8016618:	beab      	bkpt	0x00ab
 801661a:	4604      	mov	r4, r0
 801661c:	2c00      	cmp	r4, #0
 801661e:	db08      	blt.n	8016632 <_swiopen+0x7e>
 8016620:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8016624:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8016628:	2300      	movs	r3, #0
 801662a:	f8c8 3004 	str.w	r3, [r8, #4]
 801662e:	462c      	mov	r4, r5
 8016630:	e014      	b.n	801665c <_swiopen+0xa8>
 8016632:	4620      	mov	r0, r4
 8016634:	f7ff fe8c 	bl	8016350 <error>
 8016638:	4604      	mov	r4, r0
 801663a:	e00f      	b.n	801665c <_swiopen+0xa8>
 801663c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8016640:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8016644:	46e9      	mov	r9, sp
 8016646:	d1cb      	bne.n	80165e0 <_swiopen+0x2c>
 8016648:	4649      	mov	r1, r9
 801664a:	4638      	mov	r0, r7
 801664c:	f7ff ff95 	bl	801657a <_stat>
 8016650:	3001      	adds	r0, #1
 8016652:	d0c5      	beq.n	80165e0 <_swiopen+0x2c>
 8016654:	f000 f988 	bl	8016968 <__errno>
 8016658:	2311      	movs	r3, #17
 801665a:	6003      	str	r3, [r0, #0]
 801665c:	4620      	mov	r0, r4
 801665e:	b017      	add	sp, #92	; 0x5c
 8016660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016664:	20006ec8 	.word	0x20006ec8

08016668 <_get_semihosting_exts>:
 8016668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801666c:	4606      	mov	r6, r0
 801666e:	460f      	mov	r7, r1
 8016670:	482a      	ldr	r0, [pc, #168]	; (801671c <_get_semihosting_exts+0xb4>)
 8016672:	2100      	movs	r1, #0
 8016674:	4615      	mov	r5, r2
 8016676:	f7ff ff9d 	bl	80165b4 <_swiopen>
 801667a:	462a      	mov	r2, r5
 801667c:	4604      	mov	r4, r0
 801667e:	2100      	movs	r1, #0
 8016680:	4630      	mov	r0, r6
 8016682:	f000 faab 	bl	8016bdc <memset>
 8016686:	1c63      	adds	r3, r4, #1
 8016688:	d016      	beq.n	80166b8 <_get_semihosting_exts+0x50>
 801668a:	4620      	mov	r0, r4
 801668c:	f7ff fe46 	bl	801631c <findslot>
 8016690:	f04f 090c 	mov.w	r9, #12
 8016694:	4680      	mov	r8, r0
 8016696:	4648      	mov	r0, r9
 8016698:	4641      	mov	r1, r8
 801669a:	beab      	bkpt	0x00ab
 801669c:	4680      	mov	r8, r0
 801669e:	4640      	mov	r0, r8
 80166a0:	f7ff fe64 	bl	801636c <checkerror>
 80166a4:	2803      	cmp	r0, #3
 80166a6:	dd02      	ble.n	80166ae <_get_semihosting_exts+0x46>
 80166a8:	1ec3      	subs	r3, r0, #3
 80166aa:	42ab      	cmp	r3, r5
 80166ac:	dc08      	bgt.n	80166c0 <_get_semihosting_exts+0x58>
 80166ae:	4620      	mov	r0, r4
 80166b0:	f7ff ff0c 	bl	80164cc <_close>
 80166b4:	f04f 34ff 	mov.w	r4, #4294967295
 80166b8:	4620      	mov	r0, r4
 80166ba:	b003      	add	sp, #12
 80166bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166c0:	2204      	movs	r2, #4
 80166c2:	eb0d 0102 	add.w	r1, sp, r2
 80166c6:	4620      	mov	r0, r4
 80166c8:	f7ff fe65 	bl	8016396 <_read>
 80166cc:	2803      	cmp	r0, #3
 80166ce:	ddee      	ble.n	80166ae <_get_semihosting_exts+0x46>
 80166d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80166d4:	2b53      	cmp	r3, #83	; 0x53
 80166d6:	d1ea      	bne.n	80166ae <_get_semihosting_exts+0x46>
 80166d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80166dc:	2b48      	cmp	r3, #72	; 0x48
 80166de:	d1e6      	bne.n	80166ae <_get_semihosting_exts+0x46>
 80166e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80166e4:	2b46      	cmp	r3, #70	; 0x46
 80166e6:	d1e2      	bne.n	80166ae <_get_semihosting_exts+0x46>
 80166e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80166ec:	2b42      	cmp	r3, #66	; 0x42
 80166ee:	d1de      	bne.n	80166ae <_get_semihosting_exts+0x46>
 80166f0:	2201      	movs	r2, #1
 80166f2:	4639      	mov	r1, r7
 80166f4:	4620      	mov	r0, r4
 80166f6:	f7ff fe6a 	bl	80163ce <_swilseek>
 80166fa:	2800      	cmp	r0, #0
 80166fc:	dbd7      	blt.n	80166ae <_get_semihosting_exts+0x46>
 80166fe:	462a      	mov	r2, r5
 8016700:	4631      	mov	r1, r6
 8016702:	4620      	mov	r0, r4
 8016704:	f7ff fe47 	bl	8016396 <_read>
 8016708:	4605      	mov	r5, r0
 801670a:	4620      	mov	r0, r4
 801670c:	f7ff fede 	bl	80164cc <_close>
 8016710:	4628      	mov	r0, r5
 8016712:	f7ff fe2b 	bl	801636c <checkerror>
 8016716:	4604      	mov	r4, r0
 8016718:	e7ce      	b.n	80166b8 <_get_semihosting_exts+0x50>
 801671a:	bf00      	nop
 801671c:	08018d08 	.word	0x08018d08

08016720 <initialise_semihosting_exts>:
 8016720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016722:	4d0a      	ldr	r5, [pc, #40]	; (801674c <initialise_semihosting_exts+0x2c>)
 8016724:	4c0a      	ldr	r4, [pc, #40]	; (8016750 <initialise_semihosting_exts+0x30>)
 8016726:	2100      	movs	r1, #0
 8016728:	2201      	movs	r2, #1
 801672a:	a801      	add	r0, sp, #4
 801672c:	6029      	str	r1, [r5, #0]
 801672e:	6022      	str	r2, [r4, #0]
 8016730:	f7ff ff9a 	bl	8016668 <_get_semihosting_exts>
 8016734:	2800      	cmp	r0, #0
 8016736:	dd07      	ble.n	8016748 <initialise_semihosting_exts+0x28>
 8016738:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801673c:	f003 0201 	and.w	r2, r3, #1
 8016740:	f003 0302 	and.w	r3, r3, #2
 8016744:	602a      	str	r2, [r5, #0]
 8016746:	6023      	str	r3, [r4, #0]
 8016748:	b003      	add	sp, #12
 801674a:	bd30      	pop	{r4, r5, pc}
 801674c:	200005b0 	.word	0x200005b0
 8016750:	200005b4 	.word	0x200005b4

08016754 <_has_ext_stdout_stderr>:
 8016754:	b510      	push	{r4, lr}
 8016756:	4c04      	ldr	r4, [pc, #16]	; (8016768 <_has_ext_stdout_stderr+0x14>)
 8016758:	6823      	ldr	r3, [r4, #0]
 801675a:	2b00      	cmp	r3, #0
 801675c:	da01      	bge.n	8016762 <_has_ext_stdout_stderr+0xe>
 801675e:	f7ff ffdf 	bl	8016720 <initialise_semihosting_exts>
 8016762:	6820      	ldr	r0, [r4, #0]
 8016764:	bd10      	pop	{r4, pc}
 8016766:	bf00      	nop
 8016768:	200005b4 	.word	0x200005b4

0801676c <initialise_monitor_handles>:
 801676c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016770:	b085      	sub	sp, #20
 8016772:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8016824 <initialise_monitor_handles+0xb8>
 8016776:	f8cd 9004 	str.w	r9, [sp, #4]
 801677a:	2303      	movs	r3, #3
 801677c:	2400      	movs	r4, #0
 801677e:	9303      	str	r3, [sp, #12]
 8016780:	af01      	add	r7, sp, #4
 8016782:	9402      	str	r4, [sp, #8]
 8016784:	2501      	movs	r5, #1
 8016786:	4628      	mov	r0, r5
 8016788:	4639      	mov	r1, r7
 801678a:	beab      	bkpt	0x00ab
 801678c:	4605      	mov	r5, r0
 801678e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8016828 <initialise_monitor_handles+0xbc>
 8016792:	4623      	mov	r3, r4
 8016794:	4c20      	ldr	r4, [pc, #128]	; (8016818 <initialise_monitor_handles+0xac>)
 8016796:	f8c8 5000 	str.w	r5, [r8]
 801679a:	f04f 32ff 	mov.w	r2, #4294967295
 801679e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80167a2:	3301      	adds	r3, #1
 80167a4:	2b14      	cmp	r3, #20
 80167a6:	d1fa      	bne.n	801679e <initialise_monitor_handles+0x32>
 80167a8:	f7ff ffd4 	bl	8016754 <_has_ext_stdout_stderr>
 80167ac:	4d1b      	ldr	r5, [pc, #108]	; (801681c <initialise_monitor_handles+0xb0>)
 80167ae:	b1d0      	cbz	r0, 80167e6 <initialise_monitor_handles+0x7a>
 80167b0:	f04f 0a03 	mov.w	sl, #3
 80167b4:	2304      	movs	r3, #4
 80167b6:	f8cd 9004 	str.w	r9, [sp, #4]
 80167ba:	2601      	movs	r6, #1
 80167bc:	f8cd a00c 	str.w	sl, [sp, #12]
 80167c0:	9302      	str	r3, [sp, #8]
 80167c2:	4630      	mov	r0, r6
 80167c4:	4639      	mov	r1, r7
 80167c6:	beab      	bkpt	0x00ab
 80167c8:	4683      	mov	fp, r0
 80167ca:	4b15      	ldr	r3, [pc, #84]	; (8016820 <initialise_monitor_handles+0xb4>)
 80167cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80167d0:	f8c3 b000 	str.w	fp, [r3]
 80167d4:	2308      	movs	r3, #8
 80167d6:	f8cd a00c 	str.w	sl, [sp, #12]
 80167da:	9302      	str	r3, [sp, #8]
 80167dc:	4630      	mov	r0, r6
 80167de:	4639      	mov	r1, r7
 80167e0:	beab      	bkpt	0x00ab
 80167e2:	4606      	mov	r6, r0
 80167e4:	602e      	str	r6, [r5, #0]
 80167e6:	682b      	ldr	r3, [r5, #0]
 80167e8:	3301      	adds	r3, #1
 80167ea:	bf02      	ittt	eq
 80167ec:	4b0c      	ldreq	r3, [pc, #48]	; (8016820 <initialise_monitor_handles+0xb4>)
 80167ee:	681b      	ldreq	r3, [r3, #0]
 80167f0:	602b      	streq	r3, [r5, #0]
 80167f2:	2600      	movs	r6, #0
 80167f4:	f8d8 3000 	ldr.w	r3, [r8]
 80167f8:	6023      	str	r3, [r4, #0]
 80167fa:	6066      	str	r6, [r4, #4]
 80167fc:	f7ff ffaa 	bl	8016754 <_has_ext_stdout_stderr>
 8016800:	b130      	cbz	r0, 8016810 <initialise_monitor_handles+0xa4>
 8016802:	4b07      	ldr	r3, [pc, #28]	; (8016820 <initialise_monitor_handles+0xb4>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	e9c4 3602 	strd	r3, r6, [r4, #8]
 801680a:	682b      	ldr	r3, [r5, #0]
 801680c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8016810:	b005      	add	sp, #20
 8016812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016816:	bf00      	nop
 8016818:	20006ec8 	.word	0x20006ec8
 801681c:	20006ebc 	.word	0x20006ebc
 8016820:	20006ec4 	.word	0x20006ec4
 8016824:	08018d1e 	.word	0x08018d1e
 8016828:	20006ec0 	.word	0x20006ec0

0801682c <_isatty>:
 801682c:	b570      	push	{r4, r5, r6, lr}
 801682e:	f7ff fd75 	bl	801631c <findslot>
 8016832:	2509      	movs	r5, #9
 8016834:	4604      	mov	r4, r0
 8016836:	b920      	cbnz	r0, 8016842 <_isatty+0x16>
 8016838:	f000 f896 	bl	8016968 <__errno>
 801683c:	6005      	str	r5, [r0, #0]
 801683e:	4620      	mov	r0, r4
 8016840:	bd70      	pop	{r4, r5, r6, pc}
 8016842:	4628      	mov	r0, r5
 8016844:	4621      	mov	r1, r4
 8016846:	beab      	bkpt	0x00ab
 8016848:	4604      	mov	r4, r0
 801684a:	2c01      	cmp	r4, #1
 801684c:	d0f7      	beq.n	801683e <_isatty+0x12>
 801684e:	f000 f88b 	bl	8016968 <__errno>
 8016852:	2400      	movs	r4, #0
 8016854:	4605      	mov	r5, r0
 8016856:	2613      	movs	r6, #19
 8016858:	4630      	mov	r0, r6
 801685a:	4621      	mov	r1, r4
 801685c:	beab      	bkpt	0x00ab
 801685e:	4606      	mov	r6, r0
 8016860:	602e      	str	r6, [r5, #0]
 8016862:	e7ec      	b.n	801683e <_isatty+0x12>

08016864 <_Znwj>:
 8016864:	2801      	cmp	r0, #1
 8016866:	bf38      	it	cc
 8016868:	2001      	movcc	r0, #1
 801686a:	b510      	push	{r4, lr}
 801686c:	4604      	mov	r4, r0
 801686e:	4620      	mov	r0, r4
 8016870:	f000 f99e 	bl	8016bb0 <malloc>
 8016874:	b930      	cbnz	r0, 8016884 <_Znwj+0x20>
 8016876:	f000 f81b 	bl	80168b0 <_ZSt15get_new_handlerv>
 801687a:	b908      	cbnz	r0, 8016880 <_Znwj+0x1c>
 801687c:	f000 f865 	bl	801694a <abort>
 8016880:	4780      	blx	r0
 8016882:	e7f4      	b.n	801686e <_Znwj+0xa>
 8016884:	bd10      	pop	{r4, pc}

08016886 <__cxa_pure_virtual>:
 8016886:	b508      	push	{r3, lr}
 8016888:	f000 f80c 	bl	80168a4 <_ZSt9terminatev>

0801688c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801688c:	b508      	push	{r3, lr}
 801688e:	4780      	blx	r0
 8016890:	f000 f85b 	bl	801694a <abort>

08016894 <_ZSt13get_terminatev>:
 8016894:	4b02      	ldr	r3, [pc, #8]	; (80168a0 <_ZSt13get_terminatev+0xc>)
 8016896:	6818      	ldr	r0, [r3, #0]
 8016898:	f3bf 8f5b 	dmb	ish
 801689c:	4770      	bx	lr
 801689e:	bf00      	nop
 80168a0:	200005b8 	.word	0x200005b8

080168a4 <_ZSt9terminatev>:
 80168a4:	b508      	push	{r3, lr}
 80168a6:	f7ff fff5 	bl	8016894 <_ZSt13get_terminatev>
 80168aa:	f7ff ffef 	bl	801688c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080168b0 <_ZSt15get_new_handlerv>:
 80168b0:	4b02      	ldr	r3, [pc, #8]	; (80168bc <_ZSt15get_new_handlerv+0xc>)
 80168b2:	6818      	ldr	r0, [r3, #0]
 80168b4:	f3bf 8f5b 	dmb	ish
 80168b8:	4770      	bx	lr
 80168ba:	bf00      	nop
 80168bc:	20006f68 	.word	0x20006f68

080168c0 <roundf>:
 80168c0:	ee10 0a10 	vmov	r0, s0
 80168c4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80168c8:	3a7f      	subs	r2, #127	; 0x7f
 80168ca:	2a16      	cmp	r2, #22
 80168cc:	dc15      	bgt.n	80168fa <roundf+0x3a>
 80168ce:	2a00      	cmp	r2, #0
 80168d0:	da08      	bge.n	80168e4 <roundf+0x24>
 80168d2:	3201      	adds	r2, #1
 80168d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80168d8:	d101      	bne.n	80168de <roundf+0x1e>
 80168da:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80168de:	ee00 3a10 	vmov	s0, r3
 80168e2:	4770      	bx	lr
 80168e4:	4907      	ldr	r1, [pc, #28]	; (8016904 <roundf+0x44>)
 80168e6:	4111      	asrs	r1, r2
 80168e8:	4208      	tst	r0, r1
 80168ea:	d0fa      	beq.n	80168e2 <roundf+0x22>
 80168ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80168f0:	4113      	asrs	r3, r2
 80168f2:	4403      	add	r3, r0
 80168f4:	ea23 0301 	bic.w	r3, r3, r1
 80168f8:	e7f1      	b.n	80168de <roundf+0x1e>
 80168fa:	2a80      	cmp	r2, #128	; 0x80
 80168fc:	d1f1      	bne.n	80168e2 <roundf+0x22>
 80168fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016902:	4770      	bx	lr
 8016904:	007fffff 	.word	0x007fffff

08016908 <sqrtf>:
 8016908:	b508      	push	{r3, lr}
 801690a:	ed2d 8b02 	vpush	{d8}
 801690e:	eeb0 8a40 	vmov.f32	s16, s0
 8016912:	f000 f817 	bl	8016944 <__ieee754_sqrtf>
 8016916:	eeb4 8a48 	vcmp.f32	s16, s16
 801691a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801691e:	d60c      	bvs.n	801693a <sqrtf+0x32>
 8016920:	eddf 8a07 	vldr	s17, [pc, #28]	; 8016940 <sqrtf+0x38>
 8016924:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801692c:	d505      	bpl.n	801693a <sqrtf+0x32>
 801692e:	f000 f81b 	bl	8016968 <__errno>
 8016932:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8016936:	2321      	movs	r3, #33	; 0x21
 8016938:	6003      	str	r3, [r0, #0]
 801693a:	ecbd 8b02 	vpop	{d8}
 801693e:	bd08      	pop	{r3, pc}
 8016940:	00000000 	.word	0x00000000

08016944 <__ieee754_sqrtf>:
 8016944:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016948:	4770      	bx	lr

0801694a <abort>:
 801694a:	b508      	push	{r3, lr}
 801694c:	2006      	movs	r0, #6
 801694e:	f000 fb09 	bl	8016f64 <raise>
 8016952:	2001      	movs	r0, #1
 8016954:	f001 fa9e 	bl	8017e94 <_exit>

08016958 <calloc>:
 8016958:	4b02      	ldr	r3, [pc, #8]	; (8016964 <calloc+0xc>)
 801695a:	460a      	mov	r2, r1
 801695c:	4601      	mov	r1, r0
 801695e:	6818      	ldr	r0, [r3, #0]
 8016960:	f000 b944 	b.w	8016bec <_calloc_r>
 8016964:	200005bc 	.word	0x200005bc

08016968 <__errno>:
 8016968:	4b01      	ldr	r3, [pc, #4]	; (8016970 <__errno+0x8>)
 801696a:	6818      	ldr	r0, [r3, #0]
 801696c:	4770      	bx	lr
 801696e:	bf00      	nop
 8016970:	200005bc 	.word	0x200005bc

08016974 <std>:
 8016974:	2300      	movs	r3, #0
 8016976:	b510      	push	{r4, lr}
 8016978:	4604      	mov	r4, r0
 801697a:	e9c0 3300 	strd	r3, r3, [r0]
 801697e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016982:	6083      	str	r3, [r0, #8]
 8016984:	8181      	strh	r1, [r0, #12]
 8016986:	6643      	str	r3, [r0, #100]	; 0x64
 8016988:	81c2      	strh	r2, [r0, #14]
 801698a:	6183      	str	r3, [r0, #24]
 801698c:	4619      	mov	r1, r3
 801698e:	2208      	movs	r2, #8
 8016990:	305c      	adds	r0, #92	; 0x5c
 8016992:	f000 f923 	bl	8016bdc <memset>
 8016996:	4b05      	ldr	r3, [pc, #20]	; (80169ac <std+0x38>)
 8016998:	6263      	str	r3, [r4, #36]	; 0x24
 801699a:	4b05      	ldr	r3, [pc, #20]	; (80169b0 <std+0x3c>)
 801699c:	62a3      	str	r3, [r4, #40]	; 0x28
 801699e:	4b05      	ldr	r3, [pc, #20]	; (80169b4 <std+0x40>)
 80169a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80169a2:	4b05      	ldr	r3, [pc, #20]	; (80169b8 <std+0x44>)
 80169a4:	6224      	str	r4, [r4, #32]
 80169a6:	6323      	str	r3, [r4, #48]	; 0x30
 80169a8:	bd10      	pop	{r4, pc}
 80169aa:	bf00      	nop
 80169ac:	08016f9d 	.word	0x08016f9d
 80169b0:	08016fbf 	.word	0x08016fbf
 80169b4:	08016ff7 	.word	0x08016ff7
 80169b8:	0801701b 	.word	0x0801701b

080169bc <_cleanup_r>:
 80169bc:	4901      	ldr	r1, [pc, #4]	; (80169c4 <_cleanup_r+0x8>)
 80169be:	f000 b8af 	b.w	8016b20 <_fwalk_reent>
 80169c2:	bf00      	nop
 80169c4:	08017365 	.word	0x08017365

080169c8 <__sfmoreglue>:
 80169c8:	b570      	push	{r4, r5, r6, lr}
 80169ca:	2268      	movs	r2, #104	; 0x68
 80169cc:	1e4d      	subs	r5, r1, #1
 80169ce:	4355      	muls	r5, r2
 80169d0:	460e      	mov	r6, r1
 80169d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80169d6:	f000 f98b 	bl	8016cf0 <_malloc_r>
 80169da:	4604      	mov	r4, r0
 80169dc:	b140      	cbz	r0, 80169f0 <__sfmoreglue+0x28>
 80169de:	2100      	movs	r1, #0
 80169e0:	e9c0 1600 	strd	r1, r6, [r0]
 80169e4:	300c      	adds	r0, #12
 80169e6:	60a0      	str	r0, [r4, #8]
 80169e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80169ec:	f000 f8f6 	bl	8016bdc <memset>
 80169f0:	4620      	mov	r0, r4
 80169f2:	bd70      	pop	{r4, r5, r6, pc}

080169f4 <__sfp_lock_acquire>:
 80169f4:	4801      	ldr	r0, [pc, #4]	; (80169fc <__sfp_lock_acquire+0x8>)
 80169f6:	f000 b8d8 	b.w	8016baa <__retarget_lock_acquire_recursive>
 80169fa:	bf00      	nop
 80169fc:	20006f6d 	.word	0x20006f6d

08016a00 <__sfp_lock_release>:
 8016a00:	4801      	ldr	r0, [pc, #4]	; (8016a08 <__sfp_lock_release+0x8>)
 8016a02:	f000 b8d3 	b.w	8016bac <__retarget_lock_release_recursive>
 8016a06:	bf00      	nop
 8016a08:	20006f6d 	.word	0x20006f6d

08016a0c <__sinit_lock_acquire>:
 8016a0c:	4801      	ldr	r0, [pc, #4]	; (8016a14 <__sinit_lock_acquire+0x8>)
 8016a0e:	f000 b8cc 	b.w	8016baa <__retarget_lock_acquire_recursive>
 8016a12:	bf00      	nop
 8016a14:	20006f6e 	.word	0x20006f6e

08016a18 <__sinit_lock_release>:
 8016a18:	4801      	ldr	r0, [pc, #4]	; (8016a20 <__sinit_lock_release+0x8>)
 8016a1a:	f000 b8c7 	b.w	8016bac <__retarget_lock_release_recursive>
 8016a1e:	bf00      	nop
 8016a20:	20006f6e 	.word	0x20006f6e

08016a24 <__sinit>:
 8016a24:	b510      	push	{r4, lr}
 8016a26:	4604      	mov	r4, r0
 8016a28:	f7ff fff0 	bl	8016a0c <__sinit_lock_acquire>
 8016a2c:	69a3      	ldr	r3, [r4, #24]
 8016a2e:	b11b      	cbz	r3, 8016a38 <__sinit+0x14>
 8016a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a34:	f7ff bff0 	b.w	8016a18 <__sinit_lock_release>
 8016a38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016a3c:	6523      	str	r3, [r4, #80]	; 0x50
 8016a3e:	4b13      	ldr	r3, [pc, #76]	; (8016a8c <__sinit+0x68>)
 8016a40:	4a13      	ldr	r2, [pc, #76]	; (8016a90 <__sinit+0x6c>)
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	62a2      	str	r2, [r4, #40]	; 0x28
 8016a46:	42a3      	cmp	r3, r4
 8016a48:	bf04      	itt	eq
 8016a4a:	2301      	moveq	r3, #1
 8016a4c:	61a3      	streq	r3, [r4, #24]
 8016a4e:	4620      	mov	r0, r4
 8016a50:	f000 f820 	bl	8016a94 <__sfp>
 8016a54:	6060      	str	r0, [r4, #4]
 8016a56:	4620      	mov	r0, r4
 8016a58:	f000 f81c 	bl	8016a94 <__sfp>
 8016a5c:	60a0      	str	r0, [r4, #8]
 8016a5e:	4620      	mov	r0, r4
 8016a60:	f000 f818 	bl	8016a94 <__sfp>
 8016a64:	2200      	movs	r2, #0
 8016a66:	60e0      	str	r0, [r4, #12]
 8016a68:	2104      	movs	r1, #4
 8016a6a:	6860      	ldr	r0, [r4, #4]
 8016a6c:	f7ff ff82 	bl	8016974 <std>
 8016a70:	68a0      	ldr	r0, [r4, #8]
 8016a72:	2201      	movs	r2, #1
 8016a74:	2109      	movs	r1, #9
 8016a76:	f7ff ff7d 	bl	8016974 <std>
 8016a7a:	68e0      	ldr	r0, [r4, #12]
 8016a7c:	2202      	movs	r2, #2
 8016a7e:	2112      	movs	r1, #18
 8016a80:	f7ff ff78 	bl	8016974 <std>
 8016a84:	2301      	movs	r3, #1
 8016a86:	61a3      	str	r3, [r4, #24]
 8016a88:	e7d2      	b.n	8016a30 <__sinit+0xc>
 8016a8a:	bf00      	nop
 8016a8c:	08018d84 	.word	0x08018d84
 8016a90:	080169bd 	.word	0x080169bd

08016a94 <__sfp>:
 8016a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a96:	4607      	mov	r7, r0
 8016a98:	f7ff ffac 	bl	80169f4 <__sfp_lock_acquire>
 8016a9c:	4b1e      	ldr	r3, [pc, #120]	; (8016b18 <__sfp+0x84>)
 8016a9e:	681e      	ldr	r6, [r3, #0]
 8016aa0:	69b3      	ldr	r3, [r6, #24]
 8016aa2:	b913      	cbnz	r3, 8016aaa <__sfp+0x16>
 8016aa4:	4630      	mov	r0, r6
 8016aa6:	f7ff ffbd 	bl	8016a24 <__sinit>
 8016aaa:	3648      	adds	r6, #72	; 0x48
 8016aac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016ab0:	3b01      	subs	r3, #1
 8016ab2:	d503      	bpl.n	8016abc <__sfp+0x28>
 8016ab4:	6833      	ldr	r3, [r6, #0]
 8016ab6:	b30b      	cbz	r3, 8016afc <__sfp+0x68>
 8016ab8:	6836      	ldr	r6, [r6, #0]
 8016aba:	e7f7      	b.n	8016aac <__sfp+0x18>
 8016abc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016ac0:	b9d5      	cbnz	r5, 8016af8 <__sfp+0x64>
 8016ac2:	4b16      	ldr	r3, [pc, #88]	; (8016b1c <__sfp+0x88>)
 8016ac4:	60e3      	str	r3, [r4, #12]
 8016ac6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016aca:	6665      	str	r5, [r4, #100]	; 0x64
 8016acc:	f000 f86c 	bl	8016ba8 <__retarget_lock_init_recursive>
 8016ad0:	f7ff ff96 	bl	8016a00 <__sfp_lock_release>
 8016ad4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016ad8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016adc:	6025      	str	r5, [r4, #0]
 8016ade:	61a5      	str	r5, [r4, #24]
 8016ae0:	2208      	movs	r2, #8
 8016ae2:	4629      	mov	r1, r5
 8016ae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016ae8:	f000 f878 	bl	8016bdc <memset>
 8016aec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016af0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016af4:	4620      	mov	r0, r4
 8016af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016af8:	3468      	adds	r4, #104	; 0x68
 8016afa:	e7d9      	b.n	8016ab0 <__sfp+0x1c>
 8016afc:	2104      	movs	r1, #4
 8016afe:	4638      	mov	r0, r7
 8016b00:	f7ff ff62 	bl	80169c8 <__sfmoreglue>
 8016b04:	4604      	mov	r4, r0
 8016b06:	6030      	str	r0, [r6, #0]
 8016b08:	2800      	cmp	r0, #0
 8016b0a:	d1d5      	bne.n	8016ab8 <__sfp+0x24>
 8016b0c:	f7ff ff78 	bl	8016a00 <__sfp_lock_release>
 8016b10:	230c      	movs	r3, #12
 8016b12:	603b      	str	r3, [r7, #0]
 8016b14:	e7ee      	b.n	8016af4 <__sfp+0x60>
 8016b16:	bf00      	nop
 8016b18:	08018d84 	.word	0x08018d84
 8016b1c:	ffff0001 	.word	0xffff0001

08016b20 <_fwalk_reent>:
 8016b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b24:	4606      	mov	r6, r0
 8016b26:	4688      	mov	r8, r1
 8016b28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016b2c:	2700      	movs	r7, #0
 8016b2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016b32:	f1b9 0901 	subs.w	r9, r9, #1
 8016b36:	d505      	bpl.n	8016b44 <_fwalk_reent+0x24>
 8016b38:	6824      	ldr	r4, [r4, #0]
 8016b3a:	2c00      	cmp	r4, #0
 8016b3c:	d1f7      	bne.n	8016b2e <_fwalk_reent+0xe>
 8016b3e:	4638      	mov	r0, r7
 8016b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b44:	89ab      	ldrh	r3, [r5, #12]
 8016b46:	2b01      	cmp	r3, #1
 8016b48:	d907      	bls.n	8016b5a <_fwalk_reent+0x3a>
 8016b4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016b4e:	3301      	adds	r3, #1
 8016b50:	d003      	beq.n	8016b5a <_fwalk_reent+0x3a>
 8016b52:	4629      	mov	r1, r5
 8016b54:	4630      	mov	r0, r6
 8016b56:	47c0      	blx	r8
 8016b58:	4307      	orrs	r7, r0
 8016b5a:	3568      	adds	r5, #104	; 0x68
 8016b5c:	e7e9      	b.n	8016b32 <_fwalk_reent+0x12>
	...

08016b60 <__libc_init_array>:
 8016b60:	b570      	push	{r4, r5, r6, lr}
 8016b62:	4d0d      	ldr	r5, [pc, #52]	; (8016b98 <__libc_init_array+0x38>)
 8016b64:	4c0d      	ldr	r4, [pc, #52]	; (8016b9c <__libc_init_array+0x3c>)
 8016b66:	1b64      	subs	r4, r4, r5
 8016b68:	10a4      	asrs	r4, r4, #2
 8016b6a:	2600      	movs	r6, #0
 8016b6c:	42a6      	cmp	r6, r4
 8016b6e:	d109      	bne.n	8016b84 <__libc_init_array+0x24>
 8016b70:	4d0b      	ldr	r5, [pc, #44]	; (8016ba0 <__libc_init_array+0x40>)
 8016b72:	4c0c      	ldr	r4, [pc, #48]	; (8016ba4 <__libc_init_array+0x44>)
 8016b74:	f001 f990 	bl	8017e98 <_init>
 8016b78:	1b64      	subs	r4, r4, r5
 8016b7a:	10a4      	asrs	r4, r4, #2
 8016b7c:	2600      	movs	r6, #0
 8016b7e:	42a6      	cmp	r6, r4
 8016b80:	d105      	bne.n	8016b8e <__libc_init_array+0x2e>
 8016b82:	bd70      	pop	{r4, r5, r6, pc}
 8016b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b88:	4798      	blx	r3
 8016b8a:	3601      	adds	r6, #1
 8016b8c:	e7ee      	b.n	8016b6c <__libc_init_array+0xc>
 8016b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b92:	4798      	blx	r3
 8016b94:	3601      	adds	r6, #1
 8016b96:	e7f2      	b.n	8016b7e <__libc_init_array+0x1e>
 8016b98:	08018dc4 	.word	0x08018dc4
 8016b9c:	08018dc4 	.word	0x08018dc4
 8016ba0:	08018dc4 	.word	0x08018dc4
 8016ba4:	08018dcc 	.word	0x08018dcc

08016ba8 <__retarget_lock_init_recursive>:
 8016ba8:	4770      	bx	lr

08016baa <__retarget_lock_acquire_recursive>:
 8016baa:	4770      	bx	lr

08016bac <__retarget_lock_release_recursive>:
 8016bac:	4770      	bx	lr
	...

08016bb0 <malloc>:
 8016bb0:	4b02      	ldr	r3, [pc, #8]	; (8016bbc <malloc+0xc>)
 8016bb2:	4601      	mov	r1, r0
 8016bb4:	6818      	ldr	r0, [r3, #0]
 8016bb6:	f000 b89b 	b.w	8016cf0 <_malloc_r>
 8016bba:	bf00      	nop
 8016bbc:	200005bc 	.word	0x200005bc

08016bc0 <memcpy>:
 8016bc0:	440a      	add	r2, r1
 8016bc2:	4291      	cmp	r1, r2
 8016bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8016bc8:	d100      	bne.n	8016bcc <memcpy+0xc>
 8016bca:	4770      	bx	lr
 8016bcc:	b510      	push	{r4, lr}
 8016bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016bd6:	4291      	cmp	r1, r2
 8016bd8:	d1f9      	bne.n	8016bce <memcpy+0xe>
 8016bda:	bd10      	pop	{r4, pc}

08016bdc <memset>:
 8016bdc:	4402      	add	r2, r0
 8016bde:	4603      	mov	r3, r0
 8016be0:	4293      	cmp	r3, r2
 8016be2:	d100      	bne.n	8016be6 <memset+0xa>
 8016be4:	4770      	bx	lr
 8016be6:	f803 1b01 	strb.w	r1, [r3], #1
 8016bea:	e7f9      	b.n	8016be0 <memset+0x4>

08016bec <_calloc_r>:
 8016bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016bee:	fba1 2402 	umull	r2, r4, r1, r2
 8016bf2:	b94c      	cbnz	r4, 8016c08 <_calloc_r+0x1c>
 8016bf4:	4611      	mov	r1, r2
 8016bf6:	9201      	str	r2, [sp, #4]
 8016bf8:	f000 f87a 	bl	8016cf0 <_malloc_r>
 8016bfc:	9a01      	ldr	r2, [sp, #4]
 8016bfe:	4605      	mov	r5, r0
 8016c00:	b930      	cbnz	r0, 8016c10 <_calloc_r+0x24>
 8016c02:	4628      	mov	r0, r5
 8016c04:	b003      	add	sp, #12
 8016c06:	bd30      	pop	{r4, r5, pc}
 8016c08:	220c      	movs	r2, #12
 8016c0a:	6002      	str	r2, [r0, #0]
 8016c0c:	2500      	movs	r5, #0
 8016c0e:	e7f8      	b.n	8016c02 <_calloc_r+0x16>
 8016c10:	4621      	mov	r1, r4
 8016c12:	f7ff ffe3 	bl	8016bdc <memset>
 8016c16:	e7f4      	b.n	8016c02 <_calloc_r+0x16>

08016c18 <_free_r>:
 8016c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c1a:	2900      	cmp	r1, #0
 8016c1c:	d044      	beq.n	8016ca8 <_free_r+0x90>
 8016c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c22:	9001      	str	r0, [sp, #4]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	f1a1 0404 	sub.w	r4, r1, #4
 8016c2a:	bfb8      	it	lt
 8016c2c:	18e4      	addlt	r4, r4, r3
 8016c2e:	f000 fc4d 	bl	80174cc <__malloc_lock>
 8016c32:	4a1e      	ldr	r2, [pc, #120]	; (8016cac <_free_r+0x94>)
 8016c34:	9801      	ldr	r0, [sp, #4]
 8016c36:	6813      	ldr	r3, [r2, #0]
 8016c38:	b933      	cbnz	r3, 8016c48 <_free_r+0x30>
 8016c3a:	6063      	str	r3, [r4, #4]
 8016c3c:	6014      	str	r4, [r2, #0]
 8016c3e:	b003      	add	sp, #12
 8016c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c44:	f000 bc48 	b.w	80174d8 <__malloc_unlock>
 8016c48:	42a3      	cmp	r3, r4
 8016c4a:	d908      	bls.n	8016c5e <_free_r+0x46>
 8016c4c:	6825      	ldr	r5, [r4, #0]
 8016c4e:	1961      	adds	r1, r4, r5
 8016c50:	428b      	cmp	r3, r1
 8016c52:	bf01      	itttt	eq
 8016c54:	6819      	ldreq	r1, [r3, #0]
 8016c56:	685b      	ldreq	r3, [r3, #4]
 8016c58:	1949      	addeq	r1, r1, r5
 8016c5a:	6021      	streq	r1, [r4, #0]
 8016c5c:	e7ed      	b.n	8016c3a <_free_r+0x22>
 8016c5e:	461a      	mov	r2, r3
 8016c60:	685b      	ldr	r3, [r3, #4]
 8016c62:	b10b      	cbz	r3, 8016c68 <_free_r+0x50>
 8016c64:	42a3      	cmp	r3, r4
 8016c66:	d9fa      	bls.n	8016c5e <_free_r+0x46>
 8016c68:	6811      	ldr	r1, [r2, #0]
 8016c6a:	1855      	adds	r5, r2, r1
 8016c6c:	42a5      	cmp	r5, r4
 8016c6e:	d10b      	bne.n	8016c88 <_free_r+0x70>
 8016c70:	6824      	ldr	r4, [r4, #0]
 8016c72:	4421      	add	r1, r4
 8016c74:	1854      	adds	r4, r2, r1
 8016c76:	42a3      	cmp	r3, r4
 8016c78:	6011      	str	r1, [r2, #0]
 8016c7a:	d1e0      	bne.n	8016c3e <_free_r+0x26>
 8016c7c:	681c      	ldr	r4, [r3, #0]
 8016c7e:	685b      	ldr	r3, [r3, #4]
 8016c80:	6053      	str	r3, [r2, #4]
 8016c82:	4421      	add	r1, r4
 8016c84:	6011      	str	r1, [r2, #0]
 8016c86:	e7da      	b.n	8016c3e <_free_r+0x26>
 8016c88:	d902      	bls.n	8016c90 <_free_r+0x78>
 8016c8a:	230c      	movs	r3, #12
 8016c8c:	6003      	str	r3, [r0, #0]
 8016c8e:	e7d6      	b.n	8016c3e <_free_r+0x26>
 8016c90:	6825      	ldr	r5, [r4, #0]
 8016c92:	1961      	adds	r1, r4, r5
 8016c94:	428b      	cmp	r3, r1
 8016c96:	bf04      	itt	eq
 8016c98:	6819      	ldreq	r1, [r3, #0]
 8016c9a:	685b      	ldreq	r3, [r3, #4]
 8016c9c:	6063      	str	r3, [r4, #4]
 8016c9e:	bf04      	itt	eq
 8016ca0:	1949      	addeq	r1, r1, r5
 8016ca2:	6021      	streq	r1, [r4, #0]
 8016ca4:	6054      	str	r4, [r2, #4]
 8016ca6:	e7ca      	b.n	8016c3e <_free_r+0x26>
 8016ca8:	b003      	add	sp, #12
 8016caa:	bd30      	pop	{r4, r5, pc}
 8016cac:	20006f70 	.word	0x20006f70

08016cb0 <sbrk_aligned>:
 8016cb0:	b570      	push	{r4, r5, r6, lr}
 8016cb2:	4e0e      	ldr	r6, [pc, #56]	; (8016cec <sbrk_aligned+0x3c>)
 8016cb4:	460c      	mov	r4, r1
 8016cb6:	6831      	ldr	r1, [r6, #0]
 8016cb8:	4605      	mov	r5, r0
 8016cba:	b911      	cbnz	r1, 8016cc2 <sbrk_aligned+0x12>
 8016cbc:	f000 f91a 	bl	8016ef4 <_sbrk_r>
 8016cc0:	6030      	str	r0, [r6, #0]
 8016cc2:	4621      	mov	r1, r4
 8016cc4:	4628      	mov	r0, r5
 8016cc6:	f000 f915 	bl	8016ef4 <_sbrk_r>
 8016cca:	1c43      	adds	r3, r0, #1
 8016ccc:	d00a      	beq.n	8016ce4 <sbrk_aligned+0x34>
 8016cce:	1cc4      	adds	r4, r0, #3
 8016cd0:	f024 0403 	bic.w	r4, r4, #3
 8016cd4:	42a0      	cmp	r0, r4
 8016cd6:	d007      	beq.n	8016ce8 <sbrk_aligned+0x38>
 8016cd8:	1a21      	subs	r1, r4, r0
 8016cda:	4628      	mov	r0, r5
 8016cdc:	f000 f90a 	bl	8016ef4 <_sbrk_r>
 8016ce0:	3001      	adds	r0, #1
 8016ce2:	d101      	bne.n	8016ce8 <sbrk_aligned+0x38>
 8016ce4:	f04f 34ff 	mov.w	r4, #4294967295
 8016ce8:	4620      	mov	r0, r4
 8016cea:	bd70      	pop	{r4, r5, r6, pc}
 8016cec:	20006f74 	.word	0x20006f74

08016cf0 <_malloc_r>:
 8016cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cf4:	1ccd      	adds	r5, r1, #3
 8016cf6:	f025 0503 	bic.w	r5, r5, #3
 8016cfa:	3508      	adds	r5, #8
 8016cfc:	2d0c      	cmp	r5, #12
 8016cfe:	bf38      	it	cc
 8016d00:	250c      	movcc	r5, #12
 8016d02:	2d00      	cmp	r5, #0
 8016d04:	4607      	mov	r7, r0
 8016d06:	db01      	blt.n	8016d0c <_malloc_r+0x1c>
 8016d08:	42a9      	cmp	r1, r5
 8016d0a:	d905      	bls.n	8016d18 <_malloc_r+0x28>
 8016d0c:	230c      	movs	r3, #12
 8016d0e:	603b      	str	r3, [r7, #0]
 8016d10:	2600      	movs	r6, #0
 8016d12:	4630      	mov	r0, r6
 8016d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d18:	4e2e      	ldr	r6, [pc, #184]	; (8016dd4 <_malloc_r+0xe4>)
 8016d1a:	f000 fbd7 	bl	80174cc <__malloc_lock>
 8016d1e:	6833      	ldr	r3, [r6, #0]
 8016d20:	461c      	mov	r4, r3
 8016d22:	bb34      	cbnz	r4, 8016d72 <_malloc_r+0x82>
 8016d24:	4629      	mov	r1, r5
 8016d26:	4638      	mov	r0, r7
 8016d28:	f7ff ffc2 	bl	8016cb0 <sbrk_aligned>
 8016d2c:	1c43      	adds	r3, r0, #1
 8016d2e:	4604      	mov	r4, r0
 8016d30:	d14d      	bne.n	8016dce <_malloc_r+0xde>
 8016d32:	6834      	ldr	r4, [r6, #0]
 8016d34:	4626      	mov	r6, r4
 8016d36:	2e00      	cmp	r6, #0
 8016d38:	d140      	bne.n	8016dbc <_malloc_r+0xcc>
 8016d3a:	6823      	ldr	r3, [r4, #0]
 8016d3c:	4631      	mov	r1, r6
 8016d3e:	4638      	mov	r0, r7
 8016d40:	eb04 0803 	add.w	r8, r4, r3
 8016d44:	f000 f8d6 	bl	8016ef4 <_sbrk_r>
 8016d48:	4580      	cmp	r8, r0
 8016d4a:	d13a      	bne.n	8016dc2 <_malloc_r+0xd2>
 8016d4c:	6821      	ldr	r1, [r4, #0]
 8016d4e:	3503      	adds	r5, #3
 8016d50:	1a6d      	subs	r5, r5, r1
 8016d52:	f025 0503 	bic.w	r5, r5, #3
 8016d56:	3508      	adds	r5, #8
 8016d58:	2d0c      	cmp	r5, #12
 8016d5a:	bf38      	it	cc
 8016d5c:	250c      	movcc	r5, #12
 8016d5e:	4629      	mov	r1, r5
 8016d60:	4638      	mov	r0, r7
 8016d62:	f7ff ffa5 	bl	8016cb0 <sbrk_aligned>
 8016d66:	3001      	adds	r0, #1
 8016d68:	d02b      	beq.n	8016dc2 <_malloc_r+0xd2>
 8016d6a:	6823      	ldr	r3, [r4, #0]
 8016d6c:	442b      	add	r3, r5
 8016d6e:	6023      	str	r3, [r4, #0]
 8016d70:	e00e      	b.n	8016d90 <_malloc_r+0xa0>
 8016d72:	6822      	ldr	r2, [r4, #0]
 8016d74:	1b52      	subs	r2, r2, r5
 8016d76:	d41e      	bmi.n	8016db6 <_malloc_r+0xc6>
 8016d78:	2a0b      	cmp	r2, #11
 8016d7a:	d916      	bls.n	8016daa <_malloc_r+0xba>
 8016d7c:	1961      	adds	r1, r4, r5
 8016d7e:	42a3      	cmp	r3, r4
 8016d80:	6025      	str	r5, [r4, #0]
 8016d82:	bf18      	it	ne
 8016d84:	6059      	strne	r1, [r3, #4]
 8016d86:	6863      	ldr	r3, [r4, #4]
 8016d88:	bf08      	it	eq
 8016d8a:	6031      	streq	r1, [r6, #0]
 8016d8c:	5162      	str	r2, [r4, r5]
 8016d8e:	604b      	str	r3, [r1, #4]
 8016d90:	4638      	mov	r0, r7
 8016d92:	f104 060b 	add.w	r6, r4, #11
 8016d96:	f000 fb9f 	bl	80174d8 <__malloc_unlock>
 8016d9a:	f026 0607 	bic.w	r6, r6, #7
 8016d9e:	1d23      	adds	r3, r4, #4
 8016da0:	1af2      	subs	r2, r6, r3
 8016da2:	d0b6      	beq.n	8016d12 <_malloc_r+0x22>
 8016da4:	1b9b      	subs	r3, r3, r6
 8016da6:	50a3      	str	r3, [r4, r2]
 8016da8:	e7b3      	b.n	8016d12 <_malloc_r+0x22>
 8016daa:	6862      	ldr	r2, [r4, #4]
 8016dac:	42a3      	cmp	r3, r4
 8016dae:	bf0c      	ite	eq
 8016db0:	6032      	streq	r2, [r6, #0]
 8016db2:	605a      	strne	r2, [r3, #4]
 8016db4:	e7ec      	b.n	8016d90 <_malloc_r+0xa0>
 8016db6:	4623      	mov	r3, r4
 8016db8:	6864      	ldr	r4, [r4, #4]
 8016dba:	e7b2      	b.n	8016d22 <_malloc_r+0x32>
 8016dbc:	4634      	mov	r4, r6
 8016dbe:	6876      	ldr	r6, [r6, #4]
 8016dc0:	e7b9      	b.n	8016d36 <_malloc_r+0x46>
 8016dc2:	230c      	movs	r3, #12
 8016dc4:	603b      	str	r3, [r7, #0]
 8016dc6:	4638      	mov	r0, r7
 8016dc8:	f000 fb86 	bl	80174d8 <__malloc_unlock>
 8016dcc:	e7a1      	b.n	8016d12 <_malloc_r+0x22>
 8016dce:	6025      	str	r5, [r4, #0]
 8016dd0:	e7de      	b.n	8016d90 <_malloc_r+0xa0>
 8016dd2:	bf00      	nop
 8016dd4:	20006f70 	.word	0x20006f70

08016dd8 <iprintf>:
 8016dd8:	b40f      	push	{r0, r1, r2, r3}
 8016dda:	4b0a      	ldr	r3, [pc, #40]	; (8016e04 <iprintf+0x2c>)
 8016ddc:	b513      	push	{r0, r1, r4, lr}
 8016dde:	681c      	ldr	r4, [r3, #0]
 8016de0:	b124      	cbz	r4, 8016dec <iprintf+0x14>
 8016de2:	69a3      	ldr	r3, [r4, #24]
 8016de4:	b913      	cbnz	r3, 8016dec <iprintf+0x14>
 8016de6:	4620      	mov	r0, r4
 8016de8:	f7ff fe1c 	bl	8016a24 <__sinit>
 8016dec:	ab05      	add	r3, sp, #20
 8016dee:	9a04      	ldr	r2, [sp, #16]
 8016df0:	68a1      	ldr	r1, [r4, #8]
 8016df2:	9301      	str	r3, [sp, #4]
 8016df4:	4620      	mov	r0, r4
 8016df6:	f000 fcfb 	bl	80177f0 <_vfiprintf_r>
 8016dfa:	b002      	add	sp, #8
 8016dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e00:	b004      	add	sp, #16
 8016e02:	4770      	bx	lr
 8016e04:	200005bc 	.word	0x200005bc

08016e08 <_puts_r>:
 8016e08:	b570      	push	{r4, r5, r6, lr}
 8016e0a:	460e      	mov	r6, r1
 8016e0c:	4605      	mov	r5, r0
 8016e0e:	b118      	cbz	r0, 8016e18 <_puts_r+0x10>
 8016e10:	6983      	ldr	r3, [r0, #24]
 8016e12:	b90b      	cbnz	r3, 8016e18 <_puts_r+0x10>
 8016e14:	f7ff fe06 	bl	8016a24 <__sinit>
 8016e18:	69ab      	ldr	r3, [r5, #24]
 8016e1a:	68ac      	ldr	r4, [r5, #8]
 8016e1c:	b913      	cbnz	r3, 8016e24 <_puts_r+0x1c>
 8016e1e:	4628      	mov	r0, r5
 8016e20:	f7ff fe00 	bl	8016a24 <__sinit>
 8016e24:	4b2c      	ldr	r3, [pc, #176]	; (8016ed8 <_puts_r+0xd0>)
 8016e26:	429c      	cmp	r4, r3
 8016e28:	d120      	bne.n	8016e6c <_puts_r+0x64>
 8016e2a:	686c      	ldr	r4, [r5, #4]
 8016e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e2e:	07db      	lsls	r3, r3, #31
 8016e30:	d405      	bmi.n	8016e3e <_puts_r+0x36>
 8016e32:	89a3      	ldrh	r3, [r4, #12]
 8016e34:	0598      	lsls	r0, r3, #22
 8016e36:	d402      	bmi.n	8016e3e <_puts_r+0x36>
 8016e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e3a:	f7ff feb6 	bl	8016baa <__retarget_lock_acquire_recursive>
 8016e3e:	89a3      	ldrh	r3, [r4, #12]
 8016e40:	0719      	lsls	r1, r3, #28
 8016e42:	d51d      	bpl.n	8016e80 <_puts_r+0x78>
 8016e44:	6923      	ldr	r3, [r4, #16]
 8016e46:	b1db      	cbz	r3, 8016e80 <_puts_r+0x78>
 8016e48:	3e01      	subs	r6, #1
 8016e4a:	68a3      	ldr	r3, [r4, #8]
 8016e4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016e50:	3b01      	subs	r3, #1
 8016e52:	60a3      	str	r3, [r4, #8]
 8016e54:	bb39      	cbnz	r1, 8016ea6 <_puts_r+0x9e>
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	da38      	bge.n	8016ecc <_puts_r+0xc4>
 8016e5a:	4622      	mov	r2, r4
 8016e5c:	210a      	movs	r1, #10
 8016e5e:	4628      	mov	r0, r5
 8016e60:	f000 f918 	bl	8017094 <__swbuf_r>
 8016e64:	3001      	adds	r0, #1
 8016e66:	d011      	beq.n	8016e8c <_puts_r+0x84>
 8016e68:	250a      	movs	r5, #10
 8016e6a:	e011      	b.n	8016e90 <_puts_r+0x88>
 8016e6c:	4b1b      	ldr	r3, [pc, #108]	; (8016edc <_puts_r+0xd4>)
 8016e6e:	429c      	cmp	r4, r3
 8016e70:	d101      	bne.n	8016e76 <_puts_r+0x6e>
 8016e72:	68ac      	ldr	r4, [r5, #8]
 8016e74:	e7da      	b.n	8016e2c <_puts_r+0x24>
 8016e76:	4b1a      	ldr	r3, [pc, #104]	; (8016ee0 <_puts_r+0xd8>)
 8016e78:	429c      	cmp	r4, r3
 8016e7a:	bf08      	it	eq
 8016e7c:	68ec      	ldreq	r4, [r5, #12]
 8016e7e:	e7d5      	b.n	8016e2c <_puts_r+0x24>
 8016e80:	4621      	mov	r1, r4
 8016e82:	4628      	mov	r0, r5
 8016e84:	f000 f96a 	bl	801715c <__swsetup_r>
 8016e88:	2800      	cmp	r0, #0
 8016e8a:	d0dd      	beq.n	8016e48 <_puts_r+0x40>
 8016e8c:	f04f 35ff 	mov.w	r5, #4294967295
 8016e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e92:	07da      	lsls	r2, r3, #31
 8016e94:	d405      	bmi.n	8016ea2 <_puts_r+0x9a>
 8016e96:	89a3      	ldrh	r3, [r4, #12]
 8016e98:	059b      	lsls	r3, r3, #22
 8016e9a:	d402      	bmi.n	8016ea2 <_puts_r+0x9a>
 8016e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e9e:	f7ff fe85 	bl	8016bac <__retarget_lock_release_recursive>
 8016ea2:	4628      	mov	r0, r5
 8016ea4:	bd70      	pop	{r4, r5, r6, pc}
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	da04      	bge.n	8016eb4 <_puts_r+0xac>
 8016eaa:	69a2      	ldr	r2, [r4, #24]
 8016eac:	429a      	cmp	r2, r3
 8016eae:	dc06      	bgt.n	8016ebe <_puts_r+0xb6>
 8016eb0:	290a      	cmp	r1, #10
 8016eb2:	d004      	beq.n	8016ebe <_puts_r+0xb6>
 8016eb4:	6823      	ldr	r3, [r4, #0]
 8016eb6:	1c5a      	adds	r2, r3, #1
 8016eb8:	6022      	str	r2, [r4, #0]
 8016eba:	7019      	strb	r1, [r3, #0]
 8016ebc:	e7c5      	b.n	8016e4a <_puts_r+0x42>
 8016ebe:	4622      	mov	r2, r4
 8016ec0:	4628      	mov	r0, r5
 8016ec2:	f000 f8e7 	bl	8017094 <__swbuf_r>
 8016ec6:	3001      	adds	r0, #1
 8016ec8:	d1bf      	bne.n	8016e4a <_puts_r+0x42>
 8016eca:	e7df      	b.n	8016e8c <_puts_r+0x84>
 8016ecc:	6823      	ldr	r3, [r4, #0]
 8016ece:	250a      	movs	r5, #10
 8016ed0:	1c5a      	adds	r2, r3, #1
 8016ed2:	6022      	str	r2, [r4, #0]
 8016ed4:	701d      	strb	r5, [r3, #0]
 8016ed6:	e7db      	b.n	8016e90 <_puts_r+0x88>
 8016ed8:	08018d44 	.word	0x08018d44
 8016edc:	08018d64 	.word	0x08018d64
 8016ee0:	08018d24 	.word	0x08018d24

08016ee4 <puts>:
 8016ee4:	4b02      	ldr	r3, [pc, #8]	; (8016ef0 <puts+0xc>)
 8016ee6:	4601      	mov	r1, r0
 8016ee8:	6818      	ldr	r0, [r3, #0]
 8016eea:	f7ff bf8d 	b.w	8016e08 <_puts_r>
 8016eee:	bf00      	nop
 8016ef0:	200005bc 	.word	0x200005bc

08016ef4 <_sbrk_r>:
 8016ef4:	b538      	push	{r3, r4, r5, lr}
 8016ef6:	4d06      	ldr	r5, [pc, #24]	; (8016f10 <_sbrk_r+0x1c>)
 8016ef8:	2300      	movs	r3, #0
 8016efa:	4604      	mov	r4, r0
 8016efc:	4608      	mov	r0, r1
 8016efe:	602b      	str	r3, [r5, #0]
 8016f00:	f7ea fdcc 	bl	8001a9c <_sbrk>
 8016f04:	1c43      	adds	r3, r0, #1
 8016f06:	d102      	bne.n	8016f0e <_sbrk_r+0x1a>
 8016f08:	682b      	ldr	r3, [r5, #0]
 8016f0a:	b103      	cbz	r3, 8016f0e <_sbrk_r+0x1a>
 8016f0c:	6023      	str	r3, [r4, #0]
 8016f0e:	bd38      	pop	{r3, r4, r5, pc}
 8016f10:	20006f78 	.word	0x20006f78

08016f14 <_raise_r>:
 8016f14:	291f      	cmp	r1, #31
 8016f16:	b538      	push	{r3, r4, r5, lr}
 8016f18:	4604      	mov	r4, r0
 8016f1a:	460d      	mov	r5, r1
 8016f1c:	d904      	bls.n	8016f28 <_raise_r+0x14>
 8016f1e:	2316      	movs	r3, #22
 8016f20:	6003      	str	r3, [r0, #0]
 8016f22:	f04f 30ff 	mov.w	r0, #4294967295
 8016f26:	bd38      	pop	{r3, r4, r5, pc}
 8016f28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016f2a:	b112      	cbz	r2, 8016f32 <_raise_r+0x1e>
 8016f2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016f30:	b94b      	cbnz	r3, 8016f46 <_raise_r+0x32>
 8016f32:	4620      	mov	r0, r4
 8016f34:	f000 f830 	bl	8016f98 <_getpid_r>
 8016f38:	462a      	mov	r2, r5
 8016f3a:	4601      	mov	r1, r0
 8016f3c:	4620      	mov	r0, r4
 8016f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f42:	f000 b817 	b.w	8016f74 <_kill_r>
 8016f46:	2b01      	cmp	r3, #1
 8016f48:	d00a      	beq.n	8016f60 <_raise_r+0x4c>
 8016f4a:	1c59      	adds	r1, r3, #1
 8016f4c:	d103      	bne.n	8016f56 <_raise_r+0x42>
 8016f4e:	2316      	movs	r3, #22
 8016f50:	6003      	str	r3, [r0, #0]
 8016f52:	2001      	movs	r0, #1
 8016f54:	e7e7      	b.n	8016f26 <_raise_r+0x12>
 8016f56:	2400      	movs	r4, #0
 8016f58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016f5c:	4628      	mov	r0, r5
 8016f5e:	4798      	blx	r3
 8016f60:	2000      	movs	r0, #0
 8016f62:	e7e0      	b.n	8016f26 <_raise_r+0x12>

08016f64 <raise>:
 8016f64:	4b02      	ldr	r3, [pc, #8]	; (8016f70 <raise+0xc>)
 8016f66:	4601      	mov	r1, r0
 8016f68:	6818      	ldr	r0, [r3, #0]
 8016f6a:	f7ff bfd3 	b.w	8016f14 <_raise_r>
 8016f6e:	bf00      	nop
 8016f70:	200005bc 	.word	0x200005bc

08016f74 <_kill_r>:
 8016f74:	b538      	push	{r3, r4, r5, lr}
 8016f76:	4d07      	ldr	r5, [pc, #28]	; (8016f94 <_kill_r+0x20>)
 8016f78:	2300      	movs	r3, #0
 8016f7a:	4604      	mov	r4, r0
 8016f7c:	4608      	mov	r0, r1
 8016f7e:	4611      	mov	r1, r2
 8016f80:	602b      	str	r3, [r5, #0]
 8016f82:	f000 ff7f 	bl	8017e84 <_kill>
 8016f86:	1c43      	adds	r3, r0, #1
 8016f88:	d102      	bne.n	8016f90 <_kill_r+0x1c>
 8016f8a:	682b      	ldr	r3, [r5, #0]
 8016f8c:	b103      	cbz	r3, 8016f90 <_kill_r+0x1c>
 8016f8e:	6023      	str	r3, [r4, #0]
 8016f90:	bd38      	pop	{r3, r4, r5, pc}
 8016f92:	bf00      	nop
 8016f94:	20006f78 	.word	0x20006f78

08016f98 <_getpid_r>:
 8016f98:	f7ff babe 	b.w	8016518 <_getpid>

08016f9c <__sread>:
 8016f9c:	b510      	push	{r4, lr}
 8016f9e:	460c      	mov	r4, r1
 8016fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fa4:	f000 fee8 	bl	8017d78 <_read_r>
 8016fa8:	2800      	cmp	r0, #0
 8016faa:	bfab      	itete	ge
 8016fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016fae:	89a3      	ldrhlt	r3, [r4, #12]
 8016fb0:	181b      	addge	r3, r3, r0
 8016fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016fb6:	bfac      	ite	ge
 8016fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8016fba:	81a3      	strhlt	r3, [r4, #12]
 8016fbc:	bd10      	pop	{r4, pc}

08016fbe <__swrite>:
 8016fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fc2:	461f      	mov	r7, r3
 8016fc4:	898b      	ldrh	r3, [r1, #12]
 8016fc6:	05db      	lsls	r3, r3, #23
 8016fc8:	4605      	mov	r5, r0
 8016fca:	460c      	mov	r4, r1
 8016fcc:	4616      	mov	r6, r2
 8016fce:	d505      	bpl.n	8016fdc <__swrite+0x1e>
 8016fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fd4:	2302      	movs	r3, #2
 8016fd6:	2200      	movs	r2, #0
 8016fd8:	f000 fa00 	bl	80173dc <_lseek_r>
 8016fdc:	89a3      	ldrh	r3, [r4, #12]
 8016fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016fe6:	81a3      	strh	r3, [r4, #12]
 8016fe8:	4632      	mov	r2, r6
 8016fea:	463b      	mov	r3, r7
 8016fec:	4628      	mov	r0, r5
 8016fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ff2:	f000 b8a1 	b.w	8017138 <_write_r>

08016ff6 <__sseek>:
 8016ff6:	b510      	push	{r4, lr}
 8016ff8:	460c      	mov	r4, r1
 8016ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ffe:	f000 f9ed 	bl	80173dc <_lseek_r>
 8017002:	1c43      	adds	r3, r0, #1
 8017004:	89a3      	ldrh	r3, [r4, #12]
 8017006:	bf15      	itete	ne
 8017008:	6560      	strne	r0, [r4, #84]	; 0x54
 801700a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801700e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017012:	81a3      	strheq	r3, [r4, #12]
 8017014:	bf18      	it	ne
 8017016:	81a3      	strhne	r3, [r4, #12]
 8017018:	bd10      	pop	{r4, pc}

0801701a <__sclose>:
 801701a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801701e:	f000 b90b 	b.w	8017238 <_close_r>

08017022 <_vsniprintf_r>:
 8017022:	b530      	push	{r4, r5, lr}
 8017024:	4614      	mov	r4, r2
 8017026:	2c00      	cmp	r4, #0
 8017028:	b09b      	sub	sp, #108	; 0x6c
 801702a:	4605      	mov	r5, r0
 801702c:	461a      	mov	r2, r3
 801702e:	da05      	bge.n	801703c <_vsniprintf_r+0x1a>
 8017030:	238b      	movs	r3, #139	; 0x8b
 8017032:	6003      	str	r3, [r0, #0]
 8017034:	f04f 30ff 	mov.w	r0, #4294967295
 8017038:	b01b      	add	sp, #108	; 0x6c
 801703a:	bd30      	pop	{r4, r5, pc}
 801703c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017040:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017044:	bf14      	ite	ne
 8017046:	f104 33ff 	addne.w	r3, r4, #4294967295
 801704a:	4623      	moveq	r3, r4
 801704c:	9302      	str	r3, [sp, #8]
 801704e:	9305      	str	r3, [sp, #20]
 8017050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017054:	9100      	str	r1, [sp, #0]
 8017056:	9104      	str	r1, [sp, #16]
 8017058:	f8ad 300e 	strh.w	r3, [sp, #14]
 801705c:	4669      	mov	r1, sp
 801705e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017060:	f000 fa9c 	bl	801759c <_svfiprintf_r>
 8017064:	1c43      	adds	r3, r0, #1
 8017066:	bfbc      	itt	lt
 8017068:	238b      	movlt	r3, #139	; 0x8b
 801706a:	602b      	strlt	r3, [r5, #0]
 801706c:	2c00      	cmp	r4, #0
 801706e:	d0e3      	beq.n	8017038 <_vsniprintf_r+0x16>
 8017070:	9b00      	ldr	r3, [sp, #0]
 8017072:	2200      	movs	r2, #0
 8017074:	701a      	strb	r2, [r3, #0]
 8017076:	e7df      	b.n	8017038 <_vsniprintf_r+0x16>

08017078 <vsniprintf>:
 8017078:	b507      	push	{r0, r1, r2, lr}
 801707a:	9300      	str	r3, [sp, #0]
 801707c:	4613      	mov	r3, r2
 801707e:	460a      	mov	r2, r1
 8017080:	4601      	mov	r1, r0
 8017082:	4803      	ldr	r0, [pc, #12]	; (8017090 <vsniprintf+0x18>)
 8017084:	6800      	ldr	r0, [r0, #0]
 8017086:	f7ff ffcc 	bl	8017022 <_vsniprintf_r>
 801708a:	b003      	add	sp, #12
 801708c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017090:	200005bc 	.word	0x200005bc

08017094 <__swbuf_r>:
 8017094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017096:	460e      	mov	r6, r1
 8017098:	4614      	mov	r4, r2
 801709a:	4605      	mov	r5, r0
 801709c:	b118      	cbz	r0, 80170a6 <__swbuf_r+0x12>
 801709e:	6983      	ldr	r3, [r0, #24]
 80170a0:	b90b      	cbnz	r3, 80170a6 <__swbuf_r+0x12>
 80170a2:	f7ff fcbf 	bl	8016a24 <__sinit>
 80170a6:	4b21      	ldr	r3, [pc, #132]	; (801712c <__swbuf_r+0x98>)
 80170a8:	429c      	cmp	r4, r3
 80170aa:	d12b      	bne.n	8017104 <__swbuf_r+0x70>
 80170ac:	686c      	ldr	r4, [r5, #4]
 80170ae:	69a3      	ldr	r3, [r4, #24]
 80170b0:	60a3      	str	r3, [r4, #8]
 80170b2:	89a3      	ldrh	r3, [r4, #12]
 80170b4:	071a      	lsls	r2, r3, #28
 80170b6:	d52f      	bpl.n	8017118 <__swbuf_r+0x84>
 80170b8:	6923      	ldr	r3, [r4, #16]
 80170ba:	b36b      	cbz	r3, 8017118 <__swbuf_r+0x84>
 80170bc:	6923      	ldr	r3, [r4, #16]
 80170be:	6820      	ldr	r0, [r4, #0]
 80170c0:	1ac0      	subs	r0, r0, r3
 80170c2:	6963      	ldr	r3, [r4, #20]
 80170c4:	b2f6      	uxtb	r6, r6
 80170c6:	4283      	cmp	r3, r0
 80170c8:	4637      	mov	r7, r6
 80170ca:	dc04      	bgt.n	80170d6 <__swbuf_r+0x42>
 80170cc:	4621      	mov	r1, r4
 80170ce:	4628      	mov	r0, r5
 80170d0:	f000 f948 	bl	8017364 <_fflush_r>
 80170d4:	bb30      	cbnz	r0, 8017124 <__swbuf_r+0x90>
 80170d6:	68a3      	ldr	r3, [r4, #8]
 80170d8:	3b01      	subs	r3, #1
 80170da:	60a3      	str	r3, [r4, #8]
 80170dc:	6823      	ldr	r3, [r4, #0]
 80170de:	1c5a      	adds	r2, r3, #1
 80170e0:	6022      	str	r2, [r4, #0]
 80170e2:	701e      	strb	r6, [r3, #0]
 80170e4:	6963      	ldr	r3, [r4, #20]
 80170e6:	3001      	adds	r0, #1
 80170e8:	4283      	cmp	r3, r0
 80170ea:	d004      	beq.n	80170f6 <__swbuf_r+0x62>
 80170ec:	89a3      	ldrh	r3, [r4, #12]
 80170ee:	07db      	lsls	r3, r3, #31
 80170f0:	d506      	bpl.n	8017100 <__swbuf_r+0x6c>
 80170f2:	2e0a      	cmp	r6, #10
 80170f4:	d104      	bne.n	8017100 <__swbuf_r+0x6c>
 80170f6:	4621      	mov	r1, r4
 80170f8:	4628      	mov	r0, r5
 80170fa:	f000 f933 	bl	8017364 <_fflush_r>
 80170fe:	b988      	cbnz	r0, 8017124 <__swbuf_r+0x90>
 8017100:	4638      	mov	r0, r7
 8017102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017104:	4b0a      	ldr	r3, [pc, #40]	; (8017130 <__swbuf_r+0x9c>)
 8017106:	429c      	cmp	r4, r3
 8017108:	d101      	bne.n	801710e <__swbuf_r+0x7a>
 801710a:	68ac      	ldr	r4, [r5, #8]
 801710c:	e7cf      	b.n	80170ae <__swbuf_r+0x1a>
 801710e:	4b09      	ldr	r3, [pc, #36]	; (8017134 <__swbuf_r+0xa0>)
 8017110:	429c      	cmp	r4, r3
 8017112:	bf08      	it	eq
 8017114:	68ec      	ldreq	r4, [r5, #12]
 8017116:	e7ca      	b.n	80170ae <__swbuf_r+0x1a>
 8017118:	4621      	mov	r1, r4
 801711a:	4628      	mov	r0, r5
 801711c:	f000 f81e 	bl	801715c <__swsetup_r>
 8017120:	2800      	cmp	r0, #0
 8017122:	d0cb      	beq.n	80170bc <__swbuf_r+0x28>
 8017124:	f04f 37ff 	mov.w	r7, #4294967295
 8017128:	e7ea      	b.n	8017100 <__swbuf_r+0x6c>
 801712a:	bf00      	nop
 801712c:	08018d44 	.word	0x08018d44
 8017130:	08018d64 	.word	0x08018d64
 8017134:	08018d24 	.word	0x08018d24

08017138 <_write_r>:
 8017138:	b538      	push	{r3, r4, r5, lr}
 801713a:	4d07      	ldr	r5, [pc, #28]	; (8017158 <_write_r+0x20>)
 801713c:	4604      	mov	r4, r0
 801713e:	4608      	mov	r0, r1
 8017140:	4611      	mov	r1, r2
 8017142:	2200      	movs	r2, #0
 8017144:	602a      	str	r2, [r5, #0]
 8017146:	461a      	mov	r2, r3
 8017148:	f7ff f98f 	bl	801646a <_write>
 801714c:	1c43      	adds	r3, r0, #1
 801714e:	d102      	bne.n	8017156 <_write_r+0x1e>
 8017150:	682b      	ldr	r3, [r5, #0]
 8017152:	b103      	cbz	r3, 8017156 <_write_r+0x1e>
 8017154:	6023      	str	r3, [r4, #0]
 8017156:	bd38      	pop	{r3, r4, r5, pc}
 8017158:	20006f78 	.word	0x20006f78

0801715c <__swsetup_r>:
 801715c:	4b32      	ldr	r3, [pc, #200]	; (8017228 <__swsetup_r+0xcc>)
 801715e:	b570      	push	{r4, r5, r6, lr}
 8017160:	681d      	ldr	r5, [r3, #0]
 8017162:	4606      	mov	r6, r0
 8017164:	460c      	mov	r4, r1
 8017166:	b125      	cbz	r5, 8017172 <__swsetup_r+0x16>
 8017168:	69ab      	ldr	r3, [r5, #24]
 801716a:	b913      	cbnz	r3, 8017172 <__swsetup_r+0x16>
 801716c:	4628      	mov	r0, r5
 801716e:	f7ff fc59 	bl	8016a24 <__sinit>
 8017172:	4b2e      	ldr	r3, [pc, #184]	; (801722c <__swsetup_r+0xd0>)
 8017174:	429c      	cmp	r4, r3
 8017176:	d10f      	bne.n	8017198 <__swsetup_r+0x3c>
 8017178:	686c      	ldr	r4, [r5, #4]
 801717a:	89a3      	ldrh	r3, [r4, #12]
 801717c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017180:	0719      	lsls	r1, r3, #28
 8017182:	d42c      	bmi.n	80171de <__swsetup_r+0x82>
 8017184:	06dd      	lsls	r5, r3, #27
 8017186:	d411      	bmi.n	80171ac <__swsetup_r+0x50>
 8017188:	2309      	movs	r3, #9
 801718a:	6033      	str	r3, [r6, #0]
 801718c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017190:	81a3      	strh	r3, [r4, #12]
 8017192:	f04f 30ff 	mov.w	r0, #4294967295
 8017196:	e03e      	b.n	8017216 <__swsetup_r+0xba>
 8017198:	4b25      	ldr	r3, [pc, #148]	; (8017230 <__swsetup_r+0xd4>)
 801719a:	429c      	cmp	r4, r3
 801719c:	d101      	bne.n	80171a2 <__swsetup_r+0x46>
 801719e:	68ac      	ldr	r4, [r5, #8]
 80171a0:	e7eb      	b.n	801717a <__swsetup_r+0x1e>
 80171a2:	4b24      	ldr	r3, [pc, #144]	; (8017234 <__swsetup_r+0xd8>)
 80171a4:	429c      	cmp	r4, r3
 80171a6:	bf08      	it	eq
 80171a8:	68ec      	ldreq	r4, [r5, #12]
 80171aa:	e7e6      	b.n	801717a <__swsetup_r+0x1e>
 80171ac:	0758      	lsls	r0, r3, #29
 80171ae:	d512      	bpl.n	80171d6 <__swsetup_r+0x7a>
 80171b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171b2:	b141      	cbz	r1, 80171c6 <__swsetup_r+0x6a>
 80171b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171b8:	4299      	cmp	r1, r3
 80171ba:	d002      	beq.n	80171c2 <__swsetup_r+0x66>
 80171bc:	4630      	mov	r0, r6
 80171be:	f7ff fd2b 	bl	8016c18 <_free_r>
 80171c2:	2300      	movs	r3, #0
 80171c4:	6363      	str	r3, [r4, #52]	; 0x34
 80171c6:	89a3      	ldrh	r3, [r4, #12]
 80171c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80171cc:	81a3      	strh	r3, [r4, #12]
 80171ce:	2300      	movs	r3, #0
 80171d0:	6063      	str	r3, [r4, #4]
 80171d2:	6923      	ldr	r3, [r4, #16]
 80171d4:	6023      	str	r3, [r4, #0]
 80171d6:	89a3      	ldrh	r3, [r4, #12]
 80171d8:	f043 0308 	orr.w	r3, r3, #8
 80171dc:	81a3      	strh	r3, [r4, #12]
 80171de:	6923      	ldr	r3, [r4, #16]
 80171e0:	b94b      	cbnz	r3, 80171f6 <__swsetup_r+0x9a>
 80171e2:	89a3      	ldrh	r3, [r4, #12]
 80171e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80171e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80171ec:	d003      	beq.n	80171f6 <__swsetup_r+0x9a>
 80171ee:	4621      	mov	r1, r4
 80171f0:	4630      	mov	r0, r6
 80171f2:	f000 f92b 	bl	801744c <__smakebuf_r>
 80171f6:	89a0      	ldrh	r0, [r4, #12]
 80171f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80171fc:	f010 0301 	ands.w	r3, r0, #1
 8017200:	d00a      	beq.n	8017218 <__swsetup_r+0xbc>
 8017202:	2300      	movs	r3, #0
 8017204:	60a3      	str	r3, [r4, #8]
 8017206:	6963      	ldr	r3, [r4, #20]
 8017208:	425b      	negs	r3, r3
 801720a:	61a3      	str	r3, [r4, #24]
 801720c:	6923      	ldr	r3, [r4, #16]
 801720e:	b943      	cbnz	r3, 8017222 <__swsetup_r+0xc6>
 8017210:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017214:	d1ba      	bne.n	801718c <__swsetup_r+0x30>
 8017216:	bd70      	pop	{r4, r5, r6, pc}
 8017218:	0781      	lsls	r1, r0, #30
 801721a:	bf58      	it	pl
 801721c:	6963      	ldrpl	r3, [r4, #20]
 801721e:	60a3      	str	r3, [r4, #8]
 8017220:	e7f4      	b.n	801720c <__swsetup_r+0xb0>
 8017222:	2000      	movs	r0, #0
 8017224:	e7f7      	b.n	8017216 <__swsetup_r+0xba>
 8017226:	bf00      	nop
 8017228:	200005bc 	.word	0x200005bc
 801722c:	08018d44 	.word	0x08018d44
 8017230:	08018d64 	.word	0x08018d64
 8017234:	08018d24 	.word	0x08018d24

08017238 <_close_r>:
 8017238:	b538      	push	{r3, r4, r5, lr}
 801723a:	4d06      	ldr	r5, [pc, #24]	; (8017254 <_close_r+0x1c>)
 801723c:	2300      	movs	r3, #0
 801723e:	4604      	mov	r4, r0
 8017240:	4608      	mov	r0, r1
 8017242:	602b      	str	r3, [r5, #0]
 8017244:	f7ff f942 	bl	80164cc <_close>
 8017248:	1c43      	adds	r3, r0, #1
 801724a:	d102      	bne.n	8017252 <_close_r+0x1a>
 801724c:	682b      	ldr	r3, [r5, #0]
 801724e:	b103      	cbz	r3, 8017252 <_close_r+0x1a>
 8017250:	6023      	str	r3, [r4, #0]
 8017252:	bd38      	pop	{r3, r4, r5, pc}
 8017254:	20006f78 	.word	0x20006f78

08017258 <__sflush_r>:
 8017258:	898a      	ldrh	r2, [r1, #12]
 801725a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801725e:	4605      	mov	r5, r0
 8017260:	0710      	lsls	r0, r2, #28
 8017262:	460c      	mov	r4, r1
 8017264:	d458      	bmi.n	8017318 <__sflush_r+0xc0>
 8017266:	684b      	ldr	r3, [r1, #4]
 8017268:	2b00      	cmp	r3, #0
 801726a:	dc05      	bgt.n	8017278 <__sflush_r+0x20>
 801726c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801726e:	2b00      	cmp	r3, #0
 8017270:	dc02      	bgt.n	8017278 <__sflush_r+0x20>
 8017272:	2000      	movs	r0, #0
 8017274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801727a:	2e00      	cmp	r6, #0
 801727c:	d0f9      	beq.n	8017272 <__sflush_r+0x1a>
 801727e:	2300      	movs	r3, #0
 8017280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017284:	682f      	ldr	r7, [r5, #0]
 8017286:	602b      	str	r3, [r5, #0]
 8017288:	d032      	beq.n	80172f0 <__sflush_r+0x98>
 801728a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801728c:	89a3      	ldrh	r3, [r4, #12]
 801728e:	075a      	lsls	r2, r3, #29
 8017290:	d505      	bpl.n	801729e <__sflush_r+0x46>
 8017292:	6863      	ldr	r3, [r4, #4]
 8017294:	1ac0      	subs	r0, r0, r3
 8017296:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017298:	b10b      	cbz	r3, 801729e <__sflush_r+0x46>
 801729a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801729c:	1ac0      	subs	r0, r0, r3
 801729e:	2300      	movs	r3, #0
 80172a0:	4602      	mov	r2, r0
 80172a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172a4:	6a21      	ldr	r1, [r4, #32]
 80172a6:	4628      	mov	r0, r5
 80172a8:	47b0      	blx	r6
 80172aa:	1c43      	adds	r3, r0, #1
 80172ac:	89a3      	ldrh	r3, [r4, #12]
 80172ae:	d106      	bne.n	80172be <__sflush_r+0x66>
 80172b0:	6829      	ldr	r1, [r5, #0]
 80172b2:	291d      	cmp	r1, #29
 80172b4:	d82c      	bhi.n	8017310 <__sflush_r+0xb8>
 80172b6:	4a2a      	ldr	r2, [pc, #168]	; (8017360 <__sflush_r+0x108>)
 80172b8:	40ca      	lsrs	r2, r1
 80172ba:	07d6      	lsls	r6, r2, #31
 80172bc:	d528      	bpl.n	8017310 <__sflush_r+0xb8>
 80172be:	2200      	movs	r2, #0
 80172c0:	6062      	str	r2, [r4, #4]
 80172c2:	04d9      	lsls	r1, r3, #19
 80172c4:	6922      	ldr	r2, [r4, #16]
 80172c6:	6022      	str	r2, [r4, #0]
 80172c8:	d504      	bpl.n	80172d4 <__sflush_r+0x7c>
 80172ca:	1c42      	adds	r2, r0, #1
 80172cc:	d101      	bne.n	80172d2 <__sflush_r+0x7a>
 80172ce:	682b      	ldr	r3, [r5, #0]
 80172d0:	b903      	cbnz	r3, 80172d4 <__sflush_r+0x7c>
 80172d2:	6560      	str	r0, [r4, #84]	; 0x54
 80172d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172d6:	602f      	str	r7, [r5, #0]
 80172d8:	2900      	cmp	r1, #0
 80172da:	d0ca      	beq.n	8017272 <__sflush_r+0x1a>
 80172dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172e0:	4299      	cmp	r1, r3
 80172e2:	d002      	beq.n	80172ea <__sflush_r+0x92>
 80172e4:	4628      	mov	r0, r5
 80172e6:	f7ff fc97 	bl	8016c18 <_free_r>
 80172ea:	2000      	movs	r0, #0
 80172ec:	6360      	str	r0, [r4, #52]	; 0x34
 80172ee:	e7c1      	b.n	8017274 <__sflush_r+0x1c>
 80172f0:	6a21      	ldr	r1, [r4, #32]
 80172f2:	2301      	movs	r3, #1
 80172f4:	4628      	mov	r0, r5
 80172f6:	47b0      	blx	r6
 80172f8:	1c41      	adds	r1, r0, #1
 80172fa:	d1c7      	bne.n	801728c <__sflush_r+0x34>
 80172fc:	682b      	ldr	r3, [r5, #0]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d0c4      	beq.n	801728c <__sflush_r+0x34>
 8017302:	2b1d      	cmp	r3, #29
 8017304:	d001      	beq.n	801730a <__sflush_r+0xb2>
 8017306:	2b16      	cmp	r3, #22
 8017308:	d101      	bne.n	801730e <__sflush_r+0xb6>
 801730a:	602f      	str	r7, [r5, #0]
 801730c:	e7b1      	b.n	8017272 <__sflush_r+0x1a>
 801730e:	89a3      	ldrh	r3, [r4, #12]
 8017310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017314:	81a3      	strh	r3, [r4, #12]
 8017316:	e7ad      	b.n	8017274 <__sflush_r+0x1c>
 8017318:	690f      	ldr	r7, [r1, #16]
 801731a:	2f00      	cmp	r7, #0
 801731c:	d0a9      	beq.n	8017272 <__sflush_r+0x1a>
 801731e:	0793      	lsls	r3, r2, #30
 8017320:	680e      	ldr	r6, [r1, #0]
 8017322:	bf08      	it	eq
 8017324:	694b      	ldreq	r3, [r1, #20]
 8017326:	600f      	str	r7, [r1, #0]
 8017328:	bf18      	it	ne
 801732a:	2300      	movne	r3, #0
 801732c:	eba6 0807 	sub.w	r8, r6, r7
 8017330:	608b      	str	r3, [r1, #8]
 8017332:	f1b8 0f00 	cmp.w	r8, #0
 8017336:	dd9c      	ble.n	8017272 <__sflush_r+0x1a>
 8017338:	6a21      	ldr	r1, [r4, #32]
 801733a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801733c:	4643      	mov	r3, r8
 801733e:	463a      	mov	r2, r7
 8017340:	4628      	mov	r0, r5
 8017342:	47b0      	blx	r6
 8017344:	2800      	cmp	r0, #0
 8017346:	dc06      	bgt.n	8017356 <__sflush_r+0xfe>
 8017348:	89a3      	ldrh	r3, [r4, #12]
 801734a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801734e:	81a3      	strh	r3, [r4, #12]
 8017350:	f04f 30ff 	mov.w	r0, #4294967295
 8017354:	e78e      	b.n	8017274 <__sflush_r+0x1c>
 8017356:	4407      	add	r7, r0
 8017358:	eba8 0800 	sub.w	r8, r8, r0
 801735c:	e7e9      	b.n	8017332 <__sflush_r+0xda>
 801735e:	bf00      	nop
 8017360:	20400001 	.word	0x20400001

08017364 <_fflush_r>:
 8017364:	b538      	push	{r3, r4, r5, lr}
 8017366:	690b      	ldr	r3, [r1, #16]
 8017368:	4605      	mov	r5, r0
 801736a:	460c      	mov	r4, r1
 801736c:	b913      	cbnz	r3, 8017374 <_fflush_r+0x10>
 801736e:	2500      	movs	r5, #0
 8017370:	4628      	mov	r0, r5
 8017372:	bd38      	pop	{r3, r4, r5, pc}
 8017374:	b118      	cbz	r0, 801737e <_fflush_r+0x1a>
 8017376:	6983      	ldr	r3, [r0, #24]
 8017378:	b90b      	cbnz	r3, 801737e <_fflush_r+0x1a>
 801737a:	f7ff fb53 	bl	8016a24 <__sinit>
 801737e:	4b14      	ldr	r3, [pc, #80]	; (80173d0 <_fflush_r+0x6c>)
 8017380:	429c      	cmp	r4, r3
 8017382:	d11b      	bne.n	80173bc <_fflush_r+0x58>
 8017384:	686c      	ldr	r4, [r5, #4]
 8017386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d0ef      	beq.n	801736e <_fflush_r+0xa>
 801738e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017390:	07d0      	lsls	r0, r2, #31
 8017392:	d404      	bmi.n	801739e <_fflush_r+0x3a>
 8017394:	0599      	lsls	r1, r3, #22
 8017396:	d402      	bmi.n	801739e <_fflush_r+0x3a>
 8017398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801739a:	f7ff fc06 	bl	8016baa <__retarget_lock_acquire_recursive>
 801739e:	4628      	mov	r0, r5
 80173a0:	4621      	mov	r1, r4
 80173a2:	f7ff ff59 	bl	8017258 <__sflush_r>
 80173a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173a8:	07da      	lsls	r2, r3, #31
 80173aa:	4605      	mov	r5, r0
 80173ac:	d4e0      	bmi.n	8017370 <_fflush_r+0xc>
 80173ae:	89a3      	ldrh	r3, [r4, #12]
 80173b0:	059b      	lsls	r3, r3, #22
 80173b2:	d4dd      	bmi.n	8017370 <_fflush_r+0xc>
 80173b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173b6:	f7ff fbf9 	bl	8016bac <__retarget_lock_release_recursive>
 80173ba:	e7d9      	b.n	8017370 <_fflush_r+0xc>
 80173bc:	4b05      	ldr	r3, [pc, #20]	; (80173d4 <_fflush_r+0x70>)
 80173be:	429c      	cmp	r4, r3
 80173c0:	d101      	bne.n	80173c6 <_fflush_r+0x62>
 80173c2:	68ac      	ldr	r4, [r5, #8]
 80173c4:	e7df      	b.n	8017386 <_fflush_r+0x22>
 80173c6:	4b04      	ldr	r3, [pc, #16]	; (80173d8 <_fflush_r+0x74>)
 80173c8:	429c      	cmp	r4, r3
 80173ca:	bf08      	it	eq
 80173cc:	68ec      	ldreq	r4, [r5, #12]
 80173ce:	e7da      	b.n	8017386 <_fflush_r+0x22>
 80173d0:	08018d44 	.word	0x08018d44
 80173d4:	08018d64 	.word	0x08018d64
 80173d8:	08018d24 	.word	0x08018d24

080173dc <_lseek_r>:
 80173dc:	b538      	push	{r3, r4, r5, lr}
 80173de:	4d07      	ldr	r5, [pc, #28]	; (80173fc <_lseek_r+0x20>)
 80173e0:	4604      	mov	r4, r0
 80173e2:	4608      	mov	r0, r1
 80173e4:	4611      	mov	r1, r2
 80173e6:	2200      	movs	r2, #0
 80173e8:	602a      	str	r2, [r5, #0]
 80173ea:	461a      	mov	r2, r3
 80173ec:	f7ff f82b 	bl	8016446 <_lseek>
 80173f0:	1c43      	adds	r3, r0, #1
 80173f2:	d102      	bne.n	80173fa <_lseek_r+0x1e>
 80173f4:	682b      	ldr	r3, [r5, #0]
 80173f6:	b103      	cbz	r3, 80173fa <_lseek_r+0x1e>
 80173f8:	6023      	str	r3, [r4, #0]
 80173fa:	bd38      	pop	{r3, r4, r5, pc}
 80173fc:	20006f78 	.word	0x20006f78

08017400 <__swhatbuf_r>:
 8017400:	b570      	push	{r4, r5, r6, lr}
 8017402:	460e      	mov	r6, r1
 8017404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017408:	2900      	cmp	r1, #0
 801740a:	b096      	sub	sp, #88	; 0x58
 801740c:	4614      	mov	r4, r2
 801740e:	461d      	mov	r5, r3
 8017410:	da08      	bge.n	8017424 <__swhatbuf_r+0x24>
 8017412:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017416:	2200      	movs	r2, #0
 8017418:	602a      	str	r2, [r5, #0]
 801741a:	061a      	lsls	r2, r3, #24
 801741c:	d410      	bmi.n	8017440 <__swhatbuf_r+0x40>
 801741e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017422:	e00e      	b.n	8017442 <__swhatbuf_r+0x42>
 8017424:	466a      	mov	r2, sp
 8017426:	f000 fcb9 	bl	8017d9c <_fstat_r>
 801742a:	2800      	cmp	r0, #0
 801742c:	dbf1      	blt.n	8017412 <__swhatbuf_r+0x12>
 801742e:	9a01      	ldr	r2, [sp, #4]
 8017430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017438:	425a      	negs	r2, r3
 801743a:	415a      	adcs	r2, r3
 801743c:	602a      	str	r2, [r5, #0]
 801743e:	e7ee      	b.n	801741e <__swhatbuf_r+0x1e>
 8017440:	2340      	movs	r3, #64	; 0x40
 8017442:	2000      	movs	r0, #0
 8017444:	6023      	str	r3, [r4, #0]
 8017446:	b016      	add	sp, #88	; 0x58
 8017448:	bd70      	pop	{r4, r5, r6, pc}
	...

0801744c <__smakebuf_r>:
 801744c:	898b      	ldrh	r3, [r1, #12]
 801744e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017450:	079d      	lsls	r5, r3, #30
 8017452:	4606      	mov	r6, r0
 8017454:	460c      	mov	r4, r1
 8017456:	d507      	bpl.n	8017468 <__smakebuf_r+0x1c>
 8017458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801745c:	6023      	str	r3, [r4, #0]
 801745e:	6123      	str	r3, [r4, #16]
 8017460:	2301      	movs	r3, #1
 8017462:	6163      	str	r3, [r4, #20]
 8017464:	b002      	add	sp, #8
 8017466:	bd70      	pop	{r4, r5, r6, pc}
 8017468:	ab01      	add	r3, sp, #4
 801746a:	466a      	mov	r2, sp
 801746c:	f7ff ffc8 	bl	8017400 <__swhatbuf_r>
 8017470:	9900      	ldr	r1, [sp, #0]
 8017472:	4605      	mov	r5, r0
 8017474:	4630      	mov	r0, r6
 8017476:	f7ff fc3b 	bl	8016cf0 <_malloc_r>
 801747a:	b948      	cbnz	r0, 8017490 <__smakebuf_r+0x44>
 801747c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017480:	059a      	lsls	r2, r3, #22
 8017482:	d4ef      	bmi.n	8017464 <__smakebuf_r+0x18>
 8017484:	f023 0303 	bic.w	r3, r3, #3
 8017488:	f043 0302 	orr.w	r3, r3, #2
 801748c:	81a3      	strh	r3, [r4, #12]
 801748e:	e7e3      	b.n	8017458 <__smakebuf_r+0xc>
 8017490:	4b0d      	ldr	r3, [pc, #52]	; (80174c8 <__smakebuf_r+0x7c>)
 8017492:	62b3      	str	r3, [r6, #40]	; 0x28
 8017494:	89a3      	ldrh	r3, [r4, #12]
 8017496:	6020      	str	r0, [r4, #0]
 8017498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801749c:	81a3      	strh	r3, [r4, #12]
 801749e:	9b00      	ldr	r3, [sp, #0]
 80174a0:	6163      	str	r3, [r4, #20]
 80174a2:	9b01      	ldr	r3, [sp, #4]
 80174a4:	6120      	str	r0, [r4, #16]
 80174a6:	b15b      	cbz	r3, 80174c0 <__smakebuf_r+0x74>
 80174a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174ac:	4630      	mov	r0, r6
 80174ae:	f000 fc87 	bl	8017dc0 <_isatty_r>
 80174b2:	b128      	cbz	r0, 80174c0 <__smakebuf_r+0x74>
 80174b4:	89a3      	ldrh	r3, [r4, #12]
 80174b6:	f023 0303 	bic.w	r3, r3, #3
 80174ba:	f043 0301 	orr.w	r3, r3, #1
 80174be:	81a3      	strh	r3, [r4, #12]
 80174c0:	89a0      	ldrh	r0, [r4, #12]
 80174c2:	4305      	orrs	r5, r0
 80174c4:	81a5      	strh	r5, [r4, #12]
 80174c6:	e7cd      	b.n	8017464 <__smakebuf_r+0x18>
 80174c8:	080169bd 	.word	0x080169bd

080174cc <__malloc_lock>:
 80174cc:	4801      	ldr	r0, [pc, #4]	; (80174d4 <__malloc_lock+0x8>)
 80174ce:	f7ff bb6c 	b.w	8016baa <__retarget_lock_acquire_recursive>
 80174d2:	bf00      	nop
 80174d4:	20006f6c 	.word	0x20006f6c

080174d8 <__malloc_unlock>:
 80174d8:	4801      	ldr	r0, [pc, #4]	; (80174e0 <__malloc_unlock+0x8>)
 80174da:	f7ff bb67 	b.w	8016bac <__retarget_lock_release_recursive>
 80174de:	bf00      	nop
 80174e0:	20006f6c 	.word	0x20006f6c

080174e4 <__ssputs_r>:
 80174e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174e8:	688e      	ldr	r6, [r1, #8]
 80174ea:	429e      	cmp	r6, r3
 80174ec:	4682      	mov	sl, r0
 80174ee:	460c      	mov	r4, r1
 80174f0:	4690      	mov	r8, r2
 80174f2:	461f      	mov	r7, r3
 80174f4:	d838      	bhi.n	8017568 <__ssputs_r+0x84>
 80174f6:	898a      	ldrh	r2, [r1, #12]
 80174f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80174fc:	d032      	beq.n	8017564 <__ssputs_r+0x80>
 80174fe:	6825      	ldr	r5, [r4, #0]
 8017500:	6909      	ldr	r1, [r1, #16]
 8017502:	eba5 0901 	sub.w	r9, r5, r1
 8017506:	6965      	ldr	r5, [r4, #20]
 8017508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801750c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017510:	3301      	adds	r3, #1
 8017512:	444b      	add	r3, r9
 8017514:	106d      	asrs	r5, r5, #1
 8017516:	429d      	cmp	r5, r3
 8017518:	bf38      	it	cc
 801751a:	461d      	movcc	r5, r3
 801751c:	0553      	lsls	r3, r2, #21
 801751e:	d531      	bpl.n	8017584 <__ssputs_r+0xa0>
 8017520:	4629      	mov	r1, r5
 8017522:	f7ff fbe5 	bl	8016cf0 <_malloc_r>
 8017526:	4606      	mov	r6, r0
 8017528:	b950      	cbnz	r0, 8017540 <__ssputs_r+0x5c>
 801752a:	230c      	movs	r3, #12
 801752c:	f8ca 3000 	str.w	r3, [sl]
 8017530:	89a3      	ldrh	r3, [r4, #12]
 8017532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017536:	81a3      	strh	r3, [r4, #12]
 8017538:	f04f 30ff 	mov.w	r0, #4294967295
 801753c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017540:	6921      	ldr	r1, [r4, #16]
 8017542:	464a      	mov	r2, r9
 8017544:	f7ff fb3c 	bl	8016bc0 <memcpy>
 8017548:	89a3      	ldrh	r3, [r4, #12]
 801754a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801754e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017552:	81a3      	strh	r3, [r4, #12]
 8017554:	6126      	str	r6, [r4, #16]
 8017556:	6165      	str	r5, [r4, #20]
 8017558:	444e      	add	r6, r9
 801755a:	eba5 0509 	sub.w	r5, r5, r9
 801755e:	6026      	str	r6, [r4, #0]
 8017560:	60a5      	str	r5, [r4, #8]
 8017562:	463e      	mov	r6, r7
 8017564:	42be      	cmp	r6, r7
 8017566:	d900      	bls.n	801756a <__ssputs_r+0x86>
 8017568:	463e      	mov	r6, r7
 801756a:	6820      	ldr	r0, [r4, #0]
 801756c:	4632      	mov	r2, r6
 801756e:	4641      	mov	r1, r8
 8017570:	f000 fc36 	bl	8017de0 <memmove>
 8017574:	68a3      	ldr	r3, [r4, #8]
 8017576:	1b9b      	subs	r3, r3, r6
 8017578:	60a3      	str	r3, [r4, #8]
 801757a:	6823      	ldr	r3, [r4, #0]
 801757c:	4433      	add	r3, r6
 801757e:	6023      	str	r3, [r4, #0]
 8017580:	2000      	movs	r0, #0
 8017582:	e7db      	b.n	801753c <__ssputs_r+0x58>
 8017584:	462a      	mov	r2, r5
 8017586:	f000 fc45 	bl	8017e14 <_realloc_r>
 801758a:	4606      	mov	r6, r0
 801758c:	2800      	cmp	r0, #0
 801758e:	d1e1      	bne.n	8017554 <__ssputs_r+0x70>
 8017590:	6921      	ldr	r1, [r4, #16]
 8017592:	4650      	mov	r0, sl
 8017594:	f7ff fb40 	bl	8016c18 <_free_r>
 8017598:	e7c7      	b.n	801752a <__ssputs_r+0x46>
	...

0801759c <_svfiprintf_r>:
 801759c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175a0:	4698      	mov	r8, r3
 80175a2:	898b      	ldrh	r3, [r1, #12]
 80175a4:	061b      	lsls	r3, r3, #24
 80175a6:	b09d      	sub	sp, #116	; 0x74
 80175a8:	4607      	mov	r7, r0
 80175aa:	460d      	mov	r5, r1
 80175ac:	4614      	mov	r4, r2
 80175ae:	d50e      	bpl.n	80175ce <_svfiprintf_r+0x32>
 80175b0:	690b      	ldr	r3, [r1, #16]
 80175b2:	b963      	cbnz	r3, 80175ce <_svfiprintf_r+0x32>
 80175b4:	2140      	movs	r1, #64	; 0x40
 80175b6:	f7ff fb9b 	bl	8016cf0 <_malloc_r>
 80175ba:	6028      	str	r0, [r5, #0]
 80175bc:	6128      	str	r0, [r5, #16]
 80175be:	b920      	cbnz	r0, 80175ca <_svfiprintf_r+0x2e>
 80175c0:	230c      	movs	r3, #12
 80175c2:	603b      	str	r3, [r7, #0]
 80175c4:	f04f 30ff 	mov.w	r0, #4294967295
 80175c8:	e0d1      	b.n	801776e <_svfiprintf_r+0x1d2>
 80175ca:	2340      	movs	r3, #64	; 0x40
 80175cc:	616b      	str	r3, [r5, #20]
 80175ce:	2300      	movs	r3, #0
 80175d0:	9309      	str	r3, [sp, #36]	; 0x24
 80175d2:	2320      	movs	r3, #32
 80175d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80175d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80175dc:	2330      	movs	r3, #48	; 0x30
 80175de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017788 <_svfiprintf_r+0x1ec>
 80175e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80175e6:	f04f 0901 	mov.w	r9, #1
 80175ea:	4623      	mov	r3, r4
 80175ec:	469a      	mov	sl, r3
 80175ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175f2:	b10a      	cbz	r2, 80175f8 <_svfiprintf_r+0x5c>
 80175f4:	2a25      	cmp	r2, #37	; 0x25
 80175f6:	d1f9      	bne.n	80175ec <_svfiprintf_r+0x50>
 80175f8:	ebba 0b04 	subs.w	fp, sl, r4
 80175fc:	d00b      	beq.n	8017616 <_svfiprintf_r+0x7a>
 80175fe:	465b      	mov	r3, fp
 8017600:	4622      	mov	r2, r4
 8017602:	4629      	mov	r1, r5
 8017604:	4638      	mov	r0, r7
 8017606:	f7ff ff6d 	bl	80174e4 <__ssputs_r>
 801760a:	3001      	adds	r0, #1
 801760c:	f000 80aa 	beq.w	8017764 <_svfiprintf_r+0x1c8>
 8017610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017612:	445a      	add	r2, fp
 8017614:	9209      	str	r2, [sp, #36]	; 0x24
 8017616:	f89a 3000 	ldrb.w	r3, [sl]
 801761a:	2b00      	cmp	r3, #0
 801761c:	f000 80a2 	beq.w	8017764 <_svfiprintf_r+0x1c8>
 8017620:	2300      	movs	r3, #0
 8017622:	f04f 32ff 	mov.w	r2, #4294967295
 8017626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801762a:	f10a 0a01 	add.w	sl, sl, #1
 801762e:	9304      	str	r3, [sp, #16]
 8017630:	9307      	str	r3, [sp, #28]
 8017632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017636:	931a      	str	r3, [sp, #104]	; 0x68
 8017638:	4654      	mov	r4, sl
 801763a:	2205      	movs	r2, #5
 801763c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017640:	4851      	ldr	r0, [pc, #324]	; (8017788 <_svfiprintf_r+0x1ec>)
 8017642:	f7e8 fdcd 	bl	80001e0 <memchr>
 8017646:	9a04      	ldr	r2, [sp, #16]
 8017648:	b9d8      	cbnz	r0, 8017682 <_svfiprintf_r+0xe6>
 801764a:	06d0      	lsls	r0, r2, #27
 801764c:	bf44      	itt	mi
 801764e:	2320      	movmi	r3, #32
 8017650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017654:	0711      	lsls	r1, r2, #28
 8017656:	bf44      	itt	mi
 8017658:	232b      	movmi	r3, #43	; 0x2b
 801765a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801765e:	f89a 3000 	ldrb.w	r3, [sl]
 8017662:	2b2a      	cmp	r3, #42	; 0x2a
 8017664:	d015      	beq.n	8017692 <_svfiprintf_r+0xf6>
 8017666:	9a07      	ldr	r2, [sp, #28]
 8017668:	4654      	mov	r4, sl
 801766a:	2000      	movs	r0, #0
 801766c:	f04f 0c0a 	mov.w	ip, #10
 8017670:	4621      	mov	r1, r4
 8017672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017676:	3b30      	subs	r3, #48	; 0x30
 8017678:	2b09      	cmp	r3, #9
 801767a:	d94e      	bls.n	801771a <_svfiprintf_r+0x17e>
 801767c:	b1b0      	cbz	r0, 80176ac <_svfiprintf_r+0x110>
 801767e:	9207      	str	r2, [sp, #28]
 8017680:	e014      	b.n	80176ac <_svfiprintf_r+0x110>
 8017682:	eba0 0308 	sub.w	r3, r0, r8
 8017686:	fa09 f303 	lsl.w	r3, r9, r3
 801768a:	4313      	orrs	r3, r2
 801768c:	9304      	str	r3, [sp, #16]
 801768e:	46a2      	mov	sl, r4
 8017690:	e7d2      	b.n	8017638 <_svfiprintf_r+0x9c>
 8017692:	9b03      	ldr	r3, [sp, #12]
 8017694:	1d19      	adds	r1, r3, #4
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	9103      	str	r1, [sp, #12]
 801769a:	2b00      	cmp	r3, #0
 801769c:	bfbb      	ittet	lt
 801769e:	425b      	neglt	r3, r3
 80176a0:	f042 0202 	orrlt.w	r2, r2, #2
 80176a4:	9307      	strge	r3, [sp, #28]
 80176a6:	9307      	strlt	r3, [sp, #28]
 80176a8:	bfb8      	it	lt
 80176aa:	9204      	strlt	r2, [sp, #16]
 80176ac:	7823      	ldrb	r3, [r4, #0]
 80176ae:	2b2e      	cmp	r3, #46	; 0x2e
 80176b0:	d10c      	bne.n	80176cc <_svfiprintf_r+0x130>
 80176b2:	7863      	ldrb	r3, [r4, #1]
 80176b4:	2b2a      	cmp	r3, #42	; 0x2a
 80176b6:	d135      	bne.n	8017724 <_svfiprintf_r+0x188>
 80176b8:	9b03      	ldr	r3, [sp, #12]
 80176ba:	1d1a      	adds	r2, r3, #4
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	9203      	str	r2, [sp, #12]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	bfb8      	it	lt
 80176c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80176c8:	3402      	adds	r4, #2
 80176ca:	9305      	str	r3, [sp, #20]
 80176cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017798 <_svfiprintf_r+0x1fc>
 80176d0:	7821      	ldrb	r1, [r4, #0]
 80176d2:	2203      	movs	r2, #3
 80176d4:	4650      	mov	r0, sl
 80176d6:	f7e8 fd83 	bl	80001e0 <memchr>
 80176da:	b140      	cbz	r0, 80176ee <_svfiprintf_r+0x152>
 80176dc:	2340      	movs	r3, #64	; 0x40
 80176de:	eba0 000a 	sub.w	r0, r0, sl
 80176e2:	fa03 f000 	lsl.w	r0, r3, r0
 80176e6:	9b04      	ldr	r3, [sp, #16]
 80176e8:	4303      	orrs	r3, r0
 80176ea:	3401      	adds	r4, #1
 80176ec:	9304      	str	r3, [sp, #16]
 80176ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176f2:	4826      	ldr	r0, [pc, #152]	; (801778c <_svfiprintf_r+0x1f0>)
 80176f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80176f8:	2206      	movs	r2, #6
 80176fa:	f7e8 fd71 	bl	80001e0 <memchr>
 80176fe:	2800      	cmp	r0, #0
 8017700:	d038      	beq.n	8017774 <_svfiprintf_r+0x1d8>
 8017702:	4b23      	ldr	r3, [pc, #140]	; (8017790 <_svfiprintf_r+0x1f4>)
 8017704:	bb1b      	cbnz	r3, 801774e <_svfiprintf_r+0x1b2>
 8017706:	9b03      	ldr	r3, [sp, #12]
 8017708:	3307      	adds	r3, #7
 801770a:	f023 0307 	bic.w	r3, r3, #7
 801770e:	3308      	adds	r3, #8
 8017710:	9303      	str	r3, [sp, #12]
 8017712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017714:	4433      	add	r3, r6
 8017716:	9309      	str	r3, [sp, #36]	; 0x24
 8017718:	e767      	b.n	80175ea <_svfiprintf_r+0x4e>
 801771a:	fb0c 3202 	mla	r2, ip, r2, r3
 801771e:	460c      	mov	r4, r1
 8017720:	2001      	movs	r0, #1
 8017722:	e7a5      	b.n	8017670 <_svfiprintf_r+0xd4>
 8017724:	2300      	movs	r3, #0
 8017726:	3401      	adds	r4, #1
 8017728:	9305      	str	r3, [sp, #20]
 801772a:	4619      	mov	r1, r3
 801772c:	f04f 0c0a 	mov.w	ip, #10
 8017730:	4620      	mov	r0, r4
 8017732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017736:	3a30      	subs	r2, #48	; 0x30
 8017738:	2a09      	cmp	r2, #9
 801773a:	d903      	bls.n	8017744 <_svfiprintf_r+0x1a8>
 801773c:	2b00      	cmp	r3, #0
 801773e:	d0c5      	beq.n	80176cc <_svfiprintf_r+0x130>
 8017740:	9105      	str	r1, [sp, #20]
 8017742:	e7c3      	b.n	80176cc <_svfiprintf_r+0x130>
 8017744:	fb0c 2101 	mla	r1, ip, r1, r2
 8017748:	4604      	mov	r4, r0
 801774a:	2301      	movs	r3, #1
 801774c:	e7f0      	b.n	8017730 <_svfiprintf_r+0x194>
 801774e:	ab03      	add	r3, sp, #12
 8017750:	9300      	str	r3, [sp, #0]
 8017752:	462a      	mov	r2, r5
 8017754:	4b0f      	ldr	r3, [pc, #60]	; (8017794 <_svfiprintf_r+0x1f8>)
 8017756:	a904      	add	r1, sp, #16
 8017758:	4638      	mov	r0, r7
 801775a:	f3af 8000 	nop.w
 801775e:	1c42      	adds	r2, r0, #1
 8017760:	4606      	mov	r6, r0
 8017762:	d1d6      	bne.n	8017712 <_svfiprintf_r+0x176>
 8017764:	89ab      	ldrh	r3, [r5, #12]
 8017766:	065b      	lsls	r3, r3, #25
 8017768:	f53f af2c 	bmi.w	80175c4 <_svfiprintf_r+0x28>
 801776c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801776e:	b01d      	add	sp, #116	; 0x74
 8017770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017774:	ab03      	add	r3, sp, #12
 8017776:	9300      	str	r3, [sp, #0]
 8017778:	462a      	mov	r2, r5
 801777a:	4b06      	ldr	r3, [pc, #24]	; (8017794 <_svfiprintf_r+0x1f8>)
 801777c:	a904      	add	r1, sp, #16
 801777e:	4638      	mov	r0, r7
 8017780:	f000 f9d4 	bl	8017b2c <_printf_i>
 8017784:	e7eb      	b.n	801775e <_svfiprintf_r+0x1c2>
 8017786:	bf00      	nop
 8017788:	08018d88 	.word	0x08018d88
 801778c:	08018d92 	.word	0x08018d92
 8017790:	00000000 	.word	0x00000000
 8017794:	080174e5 	.word	0x080174e5
 8017798:	08018d8e 	.word	0x08018d8e

0801779c <__sfputc_r>:
 801779c:	6893      	ldr	r3, [r2, #8]
 801779e:	3b01      	subs	r3, #1
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	b410      	push	{r4}
 80177a4:	6093      	str	r3, [r2, #8]
 80177a6:	da08      	bge.n	80177ba <__sfputc_r+0x1e>
 80177a8:	6994      	ldr	r4, [r2, #24]
 80177aa:	42a3      	cmp	r3, r4
 80177ac:	db01      	blt.n	80177b2 <__sfputc_r+0x16>
 80177ae:	290a      	cmp	r1, #10
 80177b0:	d103      	bne.n	80177ba <__sfputc_r+0x1e>
 80177b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177b6:	f7ff bc6d 	b.w	8017094 <__swbuf_r>
 80177ba:	6813      	ldr	r3, [r2, #0]
 80177bc:	1c58      	adds	r0, r3, #1
 80177be:	6010      	str	r0, [r2, #0]
 80177c0:	7019      	strb	r1, [r3, #0]
 80177c2:	4608      	mov	r0, r1
 80177c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177c8:	4770      	bx	lr

080177ca <__sfputs_r>:
 80177ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177cc:	4606      	mov	r6, r0
 80177ce:	460f      	mov	r7, r1
 80177d0:	4614      	mov	r4, r2
 80177d2:	18d5      	adds	r5, r2, r3
 80177d4:	42ac      	cmp	r4, r5
 80177d6:	d101      	bne.n	80177dc <__sfputs_r+0x12>
 80177d8:	2000      	movs	r0, #0
 80177da:	e007      	b.n	80177ec <__sfputs_r+0x22>
 80177dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177e0:	463a      	mov	r2, r7
 80177e2:	4630      	mov	r0, r6
 80177e4:	f7ff ffda 	bl	801779c <__sfputc_r>
 80177e8:	1c43      	adds	r3, r0, #1
 80177ea:	d1f3      	bne.n	80177d4 <__sfputs_r+0xa>
 80177ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080177f0 <_vfiprintf_r>:
 80177f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f4:	460d      	mov	r5, r1
 80177f6:	b09d      	sub	sp, #116	; 0x74
 80177f8:	4614      	mov	r4, r2
 80177fa:	4698      	mov	r8, r3
 80177fc:	4606      	mov	r6, r0
 80177fe:	b118      	cbz	r0, 8017808 <_vfiprintf_r+0x18>
 8017800:	6983      	ldr	r3, [r0, #24]
 8017802:	b90b      	cbnz	r3, 8017808 <_vfiprintf_r+0x18>
 8017804:	f7ff f90e 	bl	8016a24 <__sinit>
 8017808:	4b89      	ldr	r3, [pc, #548]	; (8017a30 <_vfiprintf_r+0x240>)
 801780a:	429d      	cmp	r5, r3
 801780c:	d11b      	bne.n	8017846 <_vfiprintf_r+0x56>
 801780e:	6875      	ldr	r5, [r6, #4]
 8017810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017812:	07d9      	lsls	r1, r3, #31
 8017814:	d405      	bmi.n	8017822 <_vfiprintf_r+0x32>
 8017816:	89ab      	ldrh	r3, [r5, #12]
 8017818:	059a      	lsls	r2, r3, #22
 801781a:	d402      	bmi.n	8017822 <_vfiprintf_r+0x32>
 801781c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801781e:	f7ff f9c4 	bl	8016baa <__retarget_lock_acquire_recursive>
 8017822:	89ab      	ldrh	r3, [r5, #12]
 8017824:	071b      	lsls	r3, r3, #28
 8017826:	d501      	bpl.n	801782c <_vfiprintf_r+0x3c>
 8017828:	692b      	ldr	r3, [r5, #16]
 801782a:	b9eb      	cbnz	r3, 8017868 <_vfiprintf_r+0x78>
 801782c:	4629      	mov	r1, r5
 801782e:	4630      	mov	r0, r6
 8017830:	f7ff fc94 	bl	801715c <__swsetup_r>
 8017834:	b1c0      	cbz	r0, 8017868 <_vfiprintf_r+0x78>
 8017836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017838:	07dc      	lsls	r4, r3, #31
 801783a:	d50e      	bpl.n	801785a <_vfiprintf_r+0x6a>
 801783c:	f04f 30ff 	mov.w	r0, #4294967295
 8017840:	b01d      	add	sp, #116	; 0x74
 8017842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017846:	4b7b      	ldr	r3, [pc, #492]	; (8017a34 <_vfiprintf_r+0x244>)
 8017848:	429d      	cmp	r5, r3
 801784a:	d101      	bne.n	8017850 <_vfiprintf_r+0x60>
 801784c:	68b5      	ldr	r5, [r6, #8]
 801784e:	e7df      	b.n	8017810 <_vfiprintf_r+0x20>
 8017850:	4b79      	ldr	r3, [pc, #484]	; (8017a38 <_vfiprintf_r+0x248>)
 8017852:	429d      	cmp	r5, r3
 8017854:	bf08      	it	eq
 8017856:	68f5      	ldreq	r5, [r6, #12]
 8017858:	e7da      	b.n	8017810 <_vfiprintf_r+0x20>
 801785a:	89ab      	ldrh	r3, [r5, #12]
 801785c:	0598      	lsls	r0, r3, #22
 801785e:	d4ed      	bmi.n	801783c <_vfiprintf_r+0x4c>
 8017860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017862:	f7ff f9a3 	bl	8016bac <__retarget_lock_release_recursive>
 8017866:	e7e9      	b.n	801783c <_vfiprintf_r+0x4c>
 8017868:	2300      	movs	r3, #0
 801786a:	9309      	str	r3, [sp, #36]	; 0x24
 801786c:	2320      	movs	r3, #32
 801786e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017872:	f8cd 800c 	str.w	r8, [sp, #12]
 8017876:	2330      	movs	r3, #48	; 0x30
 8017878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017a3c <_vfiprintf_r+0x24c>
 801787c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017880:	f04f 0901 	mov.w	r9, #1
 8017884:	4623      	mov	r3, r4
 8017886:	469a      	mov	sl, r3
 8017888:	f813 2b01 	ldrb.w	r2, [r3], #1
 801788c:	b10a      	cbz	r2, 8017892 <_vfiprintf_r+0xa2>
 801788e:	2a25      	cmp	r2, #37	; 0x25
 8017890:	d1f9      	bne.n	8017886 <_vfiprintf_r+0x96>
 8017892:	ebba 0b04 	subs.w	fp, sl, r4
 8017896:	d00b      	beq.n	80178b0 <_vfiprintf_r+0xc0>
 8017898:	465b      	mov	r3, fp
 801789a:	4622      	mov	r2, r4
 801789c:	4629      	mov	r1, r5
 801789e:	4630      	mov	r0, r6
 80178a0:	f7ff ff93 	bl	80177ca <__sfputs_r>
 80178a4:	3001      	adds	r0, #1
 80178a6:	f000 80aa 	beq.w	80179fe <_vfiprintf_r+0x20e>
 80178aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178ac:	445a      	add	r2, fp
 80178ae:	9209      	str	r2, [sp, #36]	; 0x24
 80178b0:	f89a 3000 	ldrb.w	r3, [sl]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	f000 80a2 	beq.w	80179fe <_vfiprintf_r+0x20e>
 80178ba:	2300      	movs	r3, #0
 80178bc:	f04f 32ff 	mov.w	r2, #4294967295
 80178c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178c4:	f10a 0a01 	add.w	sl, sl, #1
 80178c8:	9304      	str	r3, [sp, #16]
 80178ca:	9307      	str	r3, [sp, #28]
 80178cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80178d0:	931a      	str	r3, [sp, #104]	; 0x68
 80178d2:	4654      	mov	r4, sl
 80178d4:	2205      	movs	r2, #5
 80178d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178da:	4858      	ldr	r0, [pc, #352]	; (8017a3c <_vfiprintf_r+0x24c>)
 80178dc:	f7e8 fc80 	bl	80001e0 <memchr>
 80178e0:	9a04      	ldr	r2, [sp, #16]
 80178e2:	b9d8      	cbnz	r0, 801791c <_vfiprintf_r+0x12c>
 80178e4:	06d1      	lsls	r1, r2, #27
 80178e6:	bf44      	itt	mi
 80178e8:	2320      	movmi	r3, #32
 80178ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80178ee:	0713      	lsls	r3, r2, #28
 80178f0:	bf44      	itt	mi
 80178f2:	232b      	movmi	r3, #43	; 0x2b
 80178f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80178f8:	f89a 3000 	ldrb.w	r3, [sl]
 80178fc:	2b2a      	cmp	r3, #42	; 0x2a
 80178fe:	d015      	beq.n	801792c <_vfiprintf_r+0x13c>
 8017900:	9a07      	ldr	r2, [sp, #28]
 8017902:	4654      	mov	r4, sl
 8017904:	2000      	movs	r0, #0
 8017906:	f04f 0c0a 	mov.w	ip, #10
 801790a:	4621      	mov	r1, r4
 801790c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017910:	3b30      	subs	r3, #48	; 0x30
 8017912:	2b09      	cmp	r3, #9
 8017914:	d94e      	bls.n	80179b4 <_vfiprintf_r+0x1c4>
 8017916:	b1b0      	cbz	r0, 8017946 <_vfiprintf_r+0x156>
 8017918:	9207      	str	r2, [sp, #28]
 801791a:	e014      	b.n	8017946 <_vfiprintf_r+0x156>
 801791c:	eba0 0308 	sub.w	r3, r0, r8
 8017920:	fa09 f303 	lsl.w	r3, r9, r3
 8017924:	4313      	orrs	r3, r2
 8017926:	9304      	str	r3, [sp, #16]
 8017928:	46a2      	mov	sl, r4
 801792a:	e7d2      	b.n	80178d2 <_vfiprintf_r+0xe2>
 801792c:	9b03      	ldr	r3, [sp, #12]
 801792e:	1d19      	adds	r1, r3, #4
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	9103      	str	r1, [sp, #12]
 8017934:	2b00      	cmp	r3, #0
 8017936:	bfbb      	ittet	lt
 8017938:	425b      	neglt	r3, r3
 801793a:	f042 0202 	orrlt.w	r2, r2, #2
 801793e:	9307      	strge	r3, [sp, #28]
 8017940:	9307      	strlt	r3, [sp, #28]
 8017942:	bfb8      	it	lt
 8017944:	9204      	strlt	r2, [sp, #16]
 8017946:	7823      	ldrb	r3, [r4, #0]
 8017948:	2b2e      	cmp	r3, #46	; 0x2e
 801794a:	d10c      	bne.n	8017966 <_vfiprintf_r+0x176>
 801794c:	7863      	ldrb	r3, [r4, #1]
 801794e:	2b2a      	cmp	r3, #42	; 0x2a
 8017950:	d135      	bne.n	80179be <_vfiprintf_r+0x1ce>
 8017952:	9b03      	ldr	r3, [sp, #12]
 8017954:	1d1a      	adds	r2, r3, #4
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	9203      	str	r2, [sp, #12]
 801795a:	2b00      	cmp	r3, #0
 801795c:	bfb8      	it	lt
 801795e:	f04f 33ff 	movlt.w	r3, #4294967295
 8017962:	3402      	adds	r4, #2
 8017964:	9305      	str	r3, [sp, #20]
 8017966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017a4c <_vfiprintf_r+0x25c>
 801796a:	7821      	ldrb	r1, [r4, #0]
 801796c:	2203      	movs	r2, #3
 801796e:	4650      	mov	r0, sl
 8017970:	f7e8 fc36 	bl	80001e0 <memchr>
 8017974:	b140      	cbz	r0, 8017988 <_vfiprintf_r+0x198>
 8017976:	2340      	movs	r3, #64	; 0x40
 8017978:	eba0 000a 	sub.w	r0, r0, sl
 801797c:	fa03 f000 	lsl.w	r0, r3, r0
 8017980:	9b04      	ldr	r3, [sp, #16]
 8017982:	4303      	orrs	r3, r0
 8017984:	3401      	adds	r4, #1
 8017986:	9304      	str	r3, [sp, #16]
 8017988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801798c:	482c      	ldr	r0, [pc, #176]	; (8017a40 <_vfiprintf_r+0x250>)
 801798e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017992:	2206      	movs	r2, #6
 8017994:	f7e8 fc24 	bl	80001e0 <memchr>
 8017998:	2800      	cmp	r0, #0
 801799a:	d03f      	beq.n	8017a1c <_vfiprintf_r+0x22c>
 801799c:	4b29      	ldr	r3, [pc, #164]	; (8017a44 <_vfiprintf_r+0x254>)
 801799e:	bb1b      	cbnz	r3, 80179e8 <_vfiprintf_r+0x1f8>
 80179a0:	9b03      	ldr	r3, [sp, #12]
 80179a2:	3307      	adds	r3, #7
 80179a4:	f023 0307 	bic.w	r3, r3, #7
 80179a8:	3308      	adds	r3, #8
 80179aa:	9303      	str	r3, [sp, #12]
 80179ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179ae:	443b      	add	r3, r7
 80179b0:	9309      	str	r3, [sp, #36]	; 0x24
 80179b2:	e767      	b.n	8017884 <_vfiprintf_r+0x94>
 80179b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80179b8:	460c      	mov	r4, r1
 80179ba:	2001      	movs	r0, #1
 80179bc:	e7a5      	b.n	801790a <_vfiprintf_r+0x11a>
 80179be:	2300      	movs	r3, #0
 80179c0:	3401      	adds	r4, #1
 80179c2:	9305      	str	r3, [sp, #20]
 80179c4:	4619      	mov	r1, r3
 80179c6:	f04f 0c0a 	mov.w	ip, #10
 80179ca:	4620      	mov	r0, r4
 80179cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179d0:	3a30      	subs	r2, #48	; 0x30
 80179d2:	2a09      	cmp	r2, #9
 80179d4:	d903      	bls.n	80179de <_vfiprintf_r+0x1ee>
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d0c5      	beq.n	8017966 <_vfiprintf_r+0x176>
 80179da:	9105      	str	r1, [sp, #20]
 80179dc:	e7c3      	b.n	8017966 <_vfiprintf_r+0x176>
 80179de:	fb0c 2101 	mla	r1, ip, r1, r2
 80179e2:	4604      	mov	r4, r0
 80179e4:	2301      	movs	r3, #1
 80179e6:	e7f0      	b.n	80179ca <_vfiprintf_r+0x1da>
 80179e8:	ab03      	add	r3, sp, #12
 80179ea:	9300      	str	r3, [sp, #0]
 80179ec:	462a      	mov	r2, r5
 80179ee:	4b16      	ldr	r3, [pc, #88]	; (8017a48 <_vfiprintf_r+0x258>)
 80179f0:	a904      	add	r1, sp, #16
 80179f2:	4630      	mov	r0, r6
 80179f4:	f3af 8000 	nop.w
 80179f8:	4607      	mov	r7, r0
 80179fa:	1c78      	adds	r0, r7, #1
 80179fc:	d1d6      	bne.n	80179ac <_vfiprintf_r+0x1bc>
 80179fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a00:	07d9      	lsls	r1, r3, #31
 8017a02:	d405      	bmi.n	8017a10 <_vfiprintf_r+0x220>
 8017a04:	89ab      	ldrh	r3, [r5, #12]
 8017a06:	059a      	lsls	r2, r3, #22
 8017a08:	d402      	bmi.n	8017a10 <_vfiprintf_r+0x220>
 8017a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a0c:	f7ff f8ce 	bl	8016bac <__retarget_lock_release_recursive>
 8017a10:	89ab      	ldrh	r3, [r5, #12]
 8017a12:	065b      	lsls	r3, r3, #25
 8017a14:	f53f af12 	bmi.w	801783c <_vfiprintf_r+0x4c>
 8017a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a1a:	e711      	b.n	8017840 <_vfiprintf_r+0x50>
 8017a1c:	ab03      	add	r3, sp, #12
 8017a1e:	9300      	str	r3, [sp, #0]
 8017a20:	462a      	mov	r2, r5
 8017a22:	4b09      	ldr	r3, [pc, #36]	; (8017a48 <_vfiprintf_r+0x258>)
 8017a24:	a904      	add	r1, sp, #16
 8017a26:	4630      	mov	r0, r6
 8017a28:	f000 f880 	bl	8017b2c <_printf_i>
 8017a2c:	e7e4      	b.n	80179f8 <_vfiprintf_r+0x208>
 8017a2e:	bf00      	nop
 8017a30:	08018d44 	.word	0x08018d44
 8017a34:	08018d64 	.word	0x08018d64
 8017a38:	08018d24 	.word	0x08018d24
 8017a3c:	08018d88 	.word	0x08018d88
 8017a40:	08018d92 	.word	0x08018d92
 8017a44:	00000000 	.word	0x00000000
 8017a48:	080177cb 	.word	0x080177cb
 8017a4c:	08018d8e 	.word	0x08018d8e

08017a50 <_printf_common>:
 8017a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a54:	4616      	mov	r6, r2
 8017a56:	4699      	mov	r9, r3
 8017a58:	688a      	ldr	r2, [r1, #8]
 8017a5a:	690b      	ldr	r3, [r1, #16]
 8017a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a60:	4293      	cmp	r3, r2
 8017a62:	bfb8      	it	lt
 8017a64:	4613      	movlt	r3, r2
 8017a66:	6033      	str	r3, [r6, #0]
 8017a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a6c:	4607      	mov	r7, r0
 8017a6e:	460c      	mov	r4, r1
 8017a70:	b10a      	cbz	r2, 8017a76 <_printf_common+0x26>
 8017a72:	3301      	adds	r3, #1
 8017a74:	6033      	str	r3, [r6, #0]
 8017a76:	6823      	ldr	r3, [r4, #0]
 8017a78:	0699      	lsls	r1, r3, #26
 8017a7a:	bf42      	ittt	mi
 8017a7c:	6833      	ldrmi	r3, [r6, #0]
 8017a7e:	3302      	addmi	r3, #2
 8017a80:	6033      	strmi	r3, [r6, #0]
 8017a82:	6825      	ldr	r5, [r4, #0]
 8017a84:	f015 0506 	ands.w	r5, r5, #6
 8017a88:	d106      	bne.n	8017a98 <_printf_common+0x48>
 8017a8a:	f104 0a19 	add.w	sl, r4, #25
 8017a8e:	68e3      	ldr	r3, [r4, #12]
 8017a90:	6832      	ldr	r2, [r6, #0]
 8017a92:	1a9b      	subs	r3, r3, r2
 8017a94:	42ab      	cmp	r3, r5
 8017a96:	dc26      	bgt.n	8017ae6 <_printf_common+0x96>
 8017a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017a9c:	1e13      	subs	r3, r2, #0
 8017a9e:	6822      	ldr	r2, [r4, #0]
 8017aa0:	bf18      	it	ne
 8017aa2:	2301      	movne	r3, #1
 8017aa4:	0692      	lsls	r2, r2, #26
 8017aa6:	d42b      	bmi.n	8017b00 <_printf_common+0xb0>
 8017aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017aac:	4649      	mov	r1, r9
 8017aae:	4638      	mov	r0, r7
 8017ab0:	47c0      	blx	r8
 8017ab2:	3001      	adds	r0, #1
 8017ab4:	d01e      	beq.n	8017af4 <_printf_common+0xa4>
 8017ab6:	6823      	ldr	r3, [r4, #0]
 8017ab8:	68e5      	ldr	r5, [r4, #12]
 8017aba:	6832      	ldr	r2, [r6, #0]
 8017abc:	f003 0306 	and.w	r3, r3, #6
 8017ac0:	2b04      	cmp	r3, #4
 8017ac2:	bf08      	it	eq
 8017ac4:	1aad      	subeq	r5, r5, r2
 8017ac6:	68a3      	ldr	r3, [r4, #8]
 8017ac8:	6922      	ldr	r2, [r4, #16]
 8017aca:	bf0c      	ite	eq
 8017acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ad0:	2500      	movne	r5, #0
 8017ad2:	4293      	cmp	r3, r2
 8017ad4:	bfc4      	itt	gt
 8017ad6:	1a9b      	subgt	r3, r3, r2
 8017ad8:	18ed      	addgt	r5, r5, r3
 8017ada:	2600      	movs	r6, #0
 8017adc:	341a      	adds	r4, #26
 8017ade:	42b5      	cmp	r5, r6
 8017ae0:	d11a      	bne.n	8017b18 <_printf_common+0xc8>
 8017ae2:	2000      	movs	r0, #0
 8017ae4:	e008      	b.n	8017af8 <_printf_common+0xa8>
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	4652      	mov	r2, sl
 8017aea:	4649      	mov	r1, r9
 8017aec:	4638      	mov	r0, r7
 8017aee:	47c0      	blx	r8
 8017af0:	3001      	adds	r0, #1
 8017af2:	d103      	bne.n	8017afc <_printf_common+0xac>
 8017af4:	f04f 30ff 	mov.w	r0, #4294967295
 8017af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017afc:	3501      	adds	r5, #1
 8017afe:	e7c6      	b.n	8017a8e <_printf_common+0x3e>
 8017b00:	18e1      	adds	r1, r4, r3
 8017b02:	1c5a      	adds	r2, r3, #1
 8017b04:	2030      	movs	r0, #48	; 0x30
 8017b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017b0a:	4422      	add	r2, r4
 8017b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017b14:	3302      	adds	r3, #2
 8017b16:	e7c7      	b.n	8017aa8 <_printf_common+0x58>
 8017b18:	2301      	movs	r3, #1
 8017b1a:	4622      	mov	r2, r4
 8017b1c:	4649      	mov	r1, r9
 8017b1e:	4638      	mov	r0, r7
 8017b20:	47c0      	blx	r8
 8017b22:	3001      	adds	r0, #1
 8017b24:	d0e6      	beq.n	8017af4 <_printf_common+0xa4>
 8017b26:	3601      	adds	r6, #1
 8017b28:	e7d9      	b.n	8017ade <_printf_common+0x8e>
	...

08017b2c <_printf_i>:
 8017b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b30:	7e0f      	ldrb	r7, [r1, #24]
 8017b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017b34:	2f78      	cmp	r7, #120	; 0x78
 8017b36:	4691      	mov	r9, r2
 8017b38:	4680      	mov	r8, r0
 8017b3a:	460c      	mov	r4, r1
 8017b3c:	469a      	mov	sl, r3
 8017b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017b42:	d807      	bhi.n	8017b54 <_printf_i+0x28>
 8017b44:	2f62      	cmp	r7, #98	; 0x62
 8017b46:	d80a      	bhi.n	8017b5e <_printf_i+0x32>
 8017b48:	2f00      	cmp	r7, #0
 8017b4a:	f000 80d8 	beq.w	8017cfe <_printf_i+0x1d2>
 8017b4e:	2f58      	cmp	r7, #88	; 0x58
 8017b50:	f000 80a3 	beq.w	8017c9a <_printf_i+0x16e>
 8017b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017b5c:	e03a      	b.n	8017bd4 <_printf_i+0xa8>
 8017b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017b62:	2b15      	cmp	r3, #21
 8017b64:	d8f6      	bhi.n	8017b54 <_printf_i+0x28>
 8017b66:	a101      	add	r1, pc, #4	; (adr r1, 8017b6c <_printf_i+0x40>)
 8017b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b6c:	08017bc5 	.word	0x08017bc5
 8017b70:	08017bd9 	.word	0x08017bd9
 8017b74:	08017b55 	.word	0x08017b55
 8017b78:	08017b55 	.word	0x08017b55
 8017b7c:	08017b55 	.word	0x08017b55
 8017b80:	08017b55 	.word	0x08017b55
 8017b84:	08017bd9 	.word	0x08017bd9
 8017b88:	08017b55 	.word	0x08017b55
 8017b8c:	08017b55 	.word	0x08017b55
 8017b90:	08017b55 	.word	0x08017b55
 8017b94:	08017b55 	.word	0x08017b55
 8017b98:	08017ce5 	.word	0x08017ce5
 8017b9c:	08017c09 	.word	0x08017c09
 8017ba0:	08017cc7 	.word	0x08017cc7
 8017ba4:	08017b55 	.word	0x08017b55
 8017ba8:	08017b55 	.word	0x08017b55
 8017bac:	08017d07 	.word	0x08017d07
 8017bb0:	08017b55 	.word	0x08017b55
 8017bb4:	08017c09 	.word	0x08017c09
 8017bb8:	08017b55 	.word	0x08017b55
 8017bbc:	08017b55 	.word	0x08017b55
 8017bc0:	08017ccf 	.word	0x08017ccf
 8017bc4:	682b      	ldr	r3, [r5, #0]
 8017bc6:	1d1a      	adds	r2, r3, #4
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	602a      	str	r2, [r5, #0]
 8017bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017bd4:	2301      	movs	r3, #1
 8017bd6:	e0a3      	b.n	8017d20 <_printf_i+0x1f4>
 8017bd8:	6820      	ldr	r0, [r4, #0]
 8017bda:	6829      	ldr	r1, [r5, #0]
 8017bdc:	0606      	lsls	r6, r0, #24
 8017bde:	f101 0304 	add.w	r3, r1, #4
 8017be2:	d50a      	bpl.n	8017bfa <_printf_i+0xce>
 8017be4:	680e      	ldr	r6, [r1, #0]
 8017be6:	602b      	str	r3, [r5, #0]
 8017be8:	2e00      	cmp	r6, #0
 8017bea:	da03      	bge.n	8017bf4 <_printf_i+0xc8>
 8017bec:	232d      	movs	r3, #45	; 0x2d
 8017bee:	4276      	negs	r6, r6
 8017bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bf4:	485e      	ldr	r0, [pc, #376]	; (8017d70 <_printf_i+0x244>)
 8017bf6:	230a      	movs	r3, #10
 8017bf8:	e019      	b.n	8017c2e <_printf_i+0x102>
 8017bfa:	680e      	ldr	r6, [r1, #0]
 8017bfc:	602b      	str	r3, [r5, #0]
 8017bfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017c02:	bf18      	it	ne
 8017c04:	b236      	sxthne	r6, r6
 8017c06:	e7ef      	b.n	8017be8 <_printf_i+0xbc>
 8017c08:	682b      	ldr	r3, [r5, #0]
 8017c0a:	6820      	ldr	r0, [r4, #0]
 8017c0c:	1d19      	adds	r1, r3, #4
 8017c0e:	6029      	str	r1, [r5, #0]
 8017c10:	0601      	lsls	r1, r0, #24
 8017c12:	d501      	bpl.n	8017c18 <_printf_i+0xec>
 8017c14:	681e      	ldr	r6, [r3, #0]
 8017c16:	e002      	b.n	8017c1e <_printf_i+0xf2>
 8017c18:	0646      	lsls	r6, r0, #25
 8017c1a:	d5fb      	bpl.n	8017c14 <_printf_i+0xe8>
 8017c1c:	881e      	ldrh	r6, [r3, #0]
 8017c1e:	4854      	ldr	r0, [pc, #336]	; (8017d70 <_printf_i+0x244>)
 8017c20:	2f6f      	cmp	r7, #111	; 0x6f
 8017c22:	bf0c      	ite	eq
 8017c24:	2308      	moveq	r3, #8
 8017c26:	230a      	movne	r3, #10
 8017c28:	2100      	movs	r1, #0
 8017c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017c2e:	6865      	ldr	r5, [r4, #4]
 8017c30:	60a5      	str	r5, [r4, #8]
 8017c32:	2d00      	cmp	r5, #0
 8017c34:	bfa2      	ittt	ge
 8017c36:	6821      	ldrge	r1, [r4, #0]
 8017c38:	f021 0104 	bicge.w	r1, r1, #4
 8017c3c:	6021      	strge	r1, [r4, #0]
 8017c3e:	b90e      	cbnz	r6, 8017c44 <_printf_i+0x118>
 8017c40:	2d00      	cmp	r5, #0
 8017c42:	d04d      	beq.n	8017ce0 <_printf_i+0x1b4>
 8017c44:	4615      	mov	r5, r2
 8017c46:	fbb6 f1f3 	udiv	r1, r6, r3
 8017c4a:	fb03 6711 	mls	r7, r3, r1, r6
 8017c4e:	5dc7      	ldrb	r7, [r0, r7]
 8017c50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017c54:	4637      	mov	r7, r6
 8017c56:	42bb      	cmp	r3, r7
 8017c58:	460e      	mov	r6, r1
 8017c5a:	d9f4      	bls.n	8017c46 <_printf_i+0x11a>
 8017c5c:	2b08      	cmp	r3, #8
 8017c5e:	d10b      	bne.n	8017c78 <_printf_i+0x14c>
 8017c60:	6823      	ldr	r3, [r4, #0]
 8017c62:	07de      	lsls	r6, r3, #31
 8017c64:	d508      	bpl.n	8017c78 <_printf_i+0x14c>
 8017c66:	6923      	ldr	r3, [r4, #16]
 8017c68:	6861      	ldr	r1, [r4, #4]
 8017c6a:	4299      	cmp	r1, r3
 8017c6c:	bfde      	ittt	le
 8017c6e:	2330      	movle	r3, #48	; 0x30
 8017c70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017c74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017c78:	1b52      	subs	r2, r2, r5
 8017c7a:	6122      	str	r2, [r4, #16]
 8017c7c:	f8cd a000 	str.w	sl, [sp]
 8017c80:	464b      	mov	r3, r9
 8017c82:	aa03      	add	r2, sp, #12
 8017c84:	4621      	mov	r1, r4
 8017c86:	4640      	mov	r0, r8
 8017c88:	f7ff fee2 	bl	8017a50 <_printf_common>
 8017c8c:	3001      	adds	r0, #1
 8017c8e:	d14c      	bne.n	8017d2a <_printf_i+0x1fe>
 8017c90:	f04f 30ff 	mov.w	r0, #4294967295
 8017c94:	b004      	add	sp, #16
 8017c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c9a:	4835      	ldr	r0, [pc, #212]	; (8017d70 <_printf_i+0x244>)
 8017c9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017ca0:	6829      	ldr	r1, [r5, #0]
 8017ca2:	6823      	ldr	r3, [r4, #0]
 8017ca4:	f851 6b04 	ldr.w	r6, [r1], #4
 8017ca8:	6029      	str	r1, [r5, #0]
 8017caa:	061d      	lsls	r5, r3, #24
 8017cac:	d514      	bpl.n	8017cd8 <_printf_i+0x1ac>
 8017cae:	07df      	lsls	r7, r3, #31
 8017cb0:	bf44      	itt	mi
 8017cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8017cb6:	6023      	strmi	r3, [r4, #0]
 8017cb8:	b91e      	cbnz	r6, 8017cc2 <_printf_i+0x196>
 8017cba:	6823      	ldr	r3, [r4, #0]
 8017cbc:	f023 0320 	bic.w	r3, r3, #32
 8017cc0:	6023      	str	r3, [r4, #0]
 8017cc2:	2310      	movs	r3, #16
 8017cc4:	e7b0      	b.n	8017c28 <_printf_i+0xfc>
 8017cc6:	6823      	ldr	r3, [r4, #0]
 8017cc8:	f043 0320 	orr.w	r3, r3, #32
 8017ccc:	6023      	str	r3, [r4, #0]
 8017cce:	2378      	movs	r3, #120	; 0x78
 8017cd0:	4828      	ldr	r0, [pc, #160]	; (8017d74 <_printf_i+0x248>)
 8017cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017cd6:	e7e3      	b.n	8017ca0 <_printf_i+0x174>
 8017cd8:	0659      	lsls	r1, r3, #25
 8017cda:	bf48      	it	mi
 8017cdc:	b2b6      	uxthmi	r6, r6
 8017cde:	e7e6      	b.n	8017cae <_printf_i+0x182>
 8017ce0:	4615      	mov	r5, r2
 8017ce2:	e7bb      	b.n	8017c5c <_printf_i+0x130>
 8017ce4:	682b      	ldr	r3, [r5, #0]
 8017ce6:	6826      	ldr	r6, [r4, #0]
 8017ce8:	6961      	ldr	r1, [r4, #20]
 8017cea:	1d18      	adds	r0, r3, #4
 8017cec:	6028      	str	r0, [r5, #0]
 8017cee:	0635      	lsls	r5, r6, #24
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	d501      	bpl.n	8017cf8 <_printf_i+0x1cc>
 8017cf4:	6019      	str	r1, [r3, #0]
 8017cf6:	e002      	b.n	8017cfe <_printf_i+0x1d2>
 8017cf8:	0670      	lsls	r0, r6, #25
 8017cfa:	d5fb      	bpl.n	8017cf4 <_printf_i+0x1c8>
 8017cfc:	8019      	strh	r1, [r3, #0]
 8017cfe:	2300      	movs	r3, #0
 8017d00:	6123      	str	r3, [r4, #16]
 8017d02:	4615      	mov	r5, r2
 8017d04:	e7ba      	b.n	8017c7c <_printf_i+0x150>
 8017d06:	682b      	ldr	r3, [r5, #0]
 8017d08:	1d1a      	adds	r2, r3, #4
 8017d0a:	602a      	str	r2, [r5, #0]
 8017d0c:	681d      	ldr	r5, [r3, #0]
 8017d0e:	6862      	ldr	r2, [r4, #4]
 8017d10:	2100      	movs	r1, #0
 8017d12:	4628      	mov	r0, r5
 8017d14:	f7e8 fa64 	bl	80001e0 <memchr>
 8017d18:	b108      	cbz	r0, 8017d1e <_printf_i+0x1f2>
 8017d1a:	1b40      	subs	r0, r0, r5
 8017d1c:	6060      	str	r0, [r4, #4]
 8017d1e:	6863      	ldr	r3, [r4, #4]
 8017d20:	6123      	str	r3, [r4, #16]
 8017d22:	2300      	movs	r3, #0
 8017d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d28:	e7a8      	b.n	8017c7c <_printf_i+0x150>
 8017d2a:	6923      	ldr	r3, [r4, #16]
 8017d2c:	462a      	mov	r2, r5
 8017d2e:	4649      	mov	r1, r9
 8017d30:	4640      	mov	r0, r8
 8017d32:	47d0      	blx	sl
 8017d34:	3001      	adds	r0, #1
 8017d36:	d0ab      	beq.n	8017c90 <_printf_i+0x164>
 8017d38:	6823      	ldr	r3, [r4, #0]
 8017d3a:	079b      	lsls	r3, r3, #30
 8017d3c:	d413      	bmi.n	8017d66 <_printf_i+0x23a>
 8017d3e:	68e0      	ldr	r0, [r4, #12]
 8017d40:	9b03      	ldr	r3, [sp, #12]
 8017d42:	4298      	cmp	r0, r3
 8017d44:	bfb8      	it	lt
 8017d46:	4618      	movlt	r0, r3
 8017d48:	e7a4      	b.n	8017c94 <_printf_i+0x168>
 8017d4a:	2301      	movs	r3, #1
 8017d4c:	4632      	mov	r2, r6
 8017d4e:	4649      	mov	r1, r9
 8017d50:	4640      	mov	r0, r8
 8017d52:	47d0      	blx	sl
 8017d54:	3001      	adds	r0, #1
 8017d56:	d09b      	beq.n	8017c90 <_printf_i+0x164>
 8017d58:	3501      	adds	r5, #1
 8017d5a:	68e3      	ldr	r3, [r4, #12]
 8017d5c:	9903      	ldr	r1, [sp, #12]
 8017d5e:	1a5b      	subs	r3, r3, r1
 8017d60:	42ab      	cmp	r3, r5
 8017d62:	dcf2      	bgt.n	8017d4a <_printf_i+0x21e>
 8017d64:	e7eb      	b.n	8017d3e <_printf_i+0x212>
 8017d66:	2500      	movs	r5, #0
 8017d68:	f104 0619 	add.w	r6, r4, #25
 8017d6c:	e7f5      	b.n	8017d5a <_printf_i+0x22e>
 8017d6e:	bf00      	nop
 8017d70:	08018d99 	.word	0x08018d99
 8017d74:	08018daa 	.word	0x08018daa

08017d78 <_read_r>:
 8017d78:	b538      	push	{r3, r4, r5, lr}
 8017d7a:	4d07      	ldr	r5, [pc, #28]	; (8017d98 <_read_r+0x20>)
 8017d7c:	4604      	mov	r4, r0
 8017d7e:	4608      	mov	r0, r1
 8017d80:	4611      	mov	r1, r2
 8017d82:	2200      	movs	r2, #0
 8017d84:	602a      	str	r2, [r5, #0]
 8017d86:	461a      	mov	r2, r3
 8017d88:	f7fe fb05 	bl	8016396 <_read>
 8017d8c:	1c43      	adds	r3, r0, #1
 8017d8e:	d102      	bne.n	8017d96 <_read_r+0x1e>
 8017d90:	682b      	ldr	r3, [r5, #0]
 8017d92:	b103      	cbz	r3, 8017d96 <_read_r+0x1e>
 8017d94:	6023      	str	r3, [r4, #0]
 8017d96:	bd38      	pop	{r3, r4, r5, pc}
 8017d98:	20006f78 	.word	0x20006f78

08017d9c <_fstat_r>:
 8017d9c:	b538      	push	{r3, r4, r5, lr}
 8017d9e:	4d07      	ldr	r5, [pc, #28]	; (8017dbc <_fstat_r+0x20>)
 8017da0:	2300      	movs	r3, #0
 8017da2:	4604      	mov	r4, r0
 8017da4:	4608      	mov	r0, r1
 8017da6:	4611      	mov	r1, r2
 8017da8:	602b      	str	r3, [r5, #0]
 8017daa:	f7fe fbd8 	bl	801655e <_fstat>
 8017dae:	1c43      	adds	r3, r0, #1
 8017db0:	d102      	bne.n	8017db8 <_fstat_r+0x1c>
 8017db2:	682b      	ldr	r3, [r5, #0]
 8017db4:	b103      	cbz	r3, 8017db8 <_fstat_r+0x1c>
 8017db6:	6023      	str	r3, [r4, #0]
 8017db8:	bd38      	pop	{r3, r4, r5, pc}
 8017dba:	bf00      	nop
 8017dbc:	20006f78 	.word	0x20006f78

08017dc0 <_isatty_r>:
 8017dc0:	b538      	push	{r3, r4, r5, lr}
 8017dc2:	4d06      	ldr	r5, [pc, #24]	; (8017ddc <_isatty_r+0x1c>)
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	4604      	mov	r4, r0
 8017dc8:	4608      	mov	r0, r1
 8017dca:	602b      	str	r3, [r5, #0]
 8017dcc:	f7fe fd2e 	bl	801682c <_isatty>
 8017dd0:	1c43      	adds	r3, r0, #1
 8017dd2:	d102      	bne.n	8017dda <_isatty_r+0x1a>
 8017dd4:	682b      	ldr	r3, [r5, #0]
 8017dd6:	b103      	cbz	r3, 8017dda <_isatty_r+0x1a>
 8017dd8:	6023      	str	r3, [r4, #0]
 8017dda:	bd38      	pop	{r3, r4, r5, pc}
 8017ddc:	20006f78 	.word	0x20006f78

08017de0 <memmove>:
 8017de0:	4288      	cmp	r0, r1
 8017de2:	b510      	push	{r4, lr}
 8017de4:	eb01 0402 	add.w	r4, r1, r2
 8017de8:	d902      	bls.n	8017df0 <memmove+0x10>
 8017dea:	4284      	cmp	r4, r0
 8017dec:	4623      	mov	r3, r4
 8017dee:	d807      	bhi.n	8017e00 <memmove+0x20>
 8017df0:	1e43      	subs	r3, r0, #1
 8017df2:	42a1      	cmp	r1, r4
 8017df4:	d008      	beq.n	8017e08 <memmove+0x28>
 8017df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017dfe:	e7f8      	b.n	8017df2 <memmove+0x12>
 8017e00:	4402      	add	r2, r0
 8017e02:	4601      	mov	r1, r0
 8017e04:	428a      	cmp	r2, r1
 8017e06:	d100      	bne.n	8017e0a <memmove+0x2a>
 8017e08:	bd10      	pop	{r4, pc}
 8017e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017e12:	e7f7      	b.n	8017e04 <memmove+0x24>

08017e14 <_realloc_r>:
 8017e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e18:	4680      	mov	r8, r0
 8017e1a:	4614      	mov	r4, r2
 8017e1c:	460e      	mov	r6, r1
 8017e1e:	b921      	cbnz	r1, 8017e2a <_realloc_r+0x16>
 8017e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e24:	4611      	mov	r1, r2
 8017e26:	f7fe bf63 	b.w	8016cf0 <_malloc_r>
 8017e2a:	b92a      	cbnz	r2, 8017e38 <_realloc_r+0x24>
 8017e2c:	f7fe fef4 	bl	8016c18 <_free_r>
 8017e30:	4625      	mov	r5, r4
 8017e32:	4628      	mov	r0, r5
 8017e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e38:	f000 f81b 	bl	8017e72 <_malloc_usable_size_r>
 8017e3c:	4284      	cmp	r4, r0
 8017e3e:	4607      	mov	r7, r0
 8017e40:	d802      	bhi.n	8017e48 <_realloc_r+0x34>
 8017e42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017e46:	d812      	bhi.n	8017e6e <_realloc_r+0x5a>
 8017e48:	4621      	mov	r1, r4
 8017e4a:	4640      	mov	r0, r8
 8017e4c:	f7fe ff50 	bl	8016cf0 <_malloc_r>
 8017e50:	4605      	mov	r5, r0
 8017e52:	2800      	cmp	r0, #0
 8017e54:	d0ed      	beq.n	8017e32 <_realloc_r+0x1e>
 8017e56:	42bc      	cmp	r4, r7
 8017e58:	4622      	mov	r2, r4
 8017e5a:	4631      	mov	r1, r6
 8017e5c:	bf28      	it	cs
 8017e5e:	463a      	movcs	r2, r7
 8017e60:	f7fe feae 	bl	8016bc0 <memcpy>
 8017e64:	4631      	mov	r1, r6
 8017e66:	4640      	mov	r0, r8
 8017e68:	f7fe fed6 	bl	8016c18 <_free_r>
 8017e6c:	e7e1      	b.n	8017e32 <_realloc_r+0x1e>
 8017e6e:	4635      	mov	r5, r6
 8017e70:	e7df      	b.n	8017e32 <_realloc_r+0x1e>

08017e72 <_malloc_usable_size_r>:
 8017e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e76:	1f18      	subs	r0, r3, #4
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	bfbc      	itt	lt
 8017e7c:	580b      	ldrlt	r3, [r1, r0]
 8017e7e:	18c0      	addlt	r0, r0, r3
 8017e80:	4770      	bx	lr
	...

08017e84 <_kill>:
 8017e84:	4b02      	ldr	r3, [pc, #8]	; (8017e90 <_kill+0xc>)
 8017e86:	2258      	movs	r2, #88	; 0x58
 8017e88:	601a      	str	r2, [r3, #0]
 8017e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8017e8e:	4770      	bx	lr
 8017e90:	20006f78 	.word	0x20006f78

08017e94 <_exit>:
 8017e94:	e7fe      	b.n	8017e94 <_exit>
	...

08017e98 <_init>:
 8017e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e9a:	bf00      	nop
 8017e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e9e:	bc08      	pop	{r3}
 8017ea0:	469e      	mov	lr, r3
 8017ea2:	4770      	bx	lr

08017ea4 <_fini>:
 8017ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ea6:	bf00      	nop
 8017ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017eaa:	bc08      	pop	{r3}
 8017eac:	469e      	mov	lr, r3
 8017eae:	4770      	bx	lr
