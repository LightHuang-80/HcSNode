
tmc5160joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018020  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f24  080181b0  080181b0  000281b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080190d4  080190d4  00030620  2**0
                  CONTENTS
  4 .ARM          00000008  080190d4  080190d4  000290d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080190dc  080190dc  00030620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080190dc  080190dc  000290dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080190e4  080190e4  000290e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000620  20000000  080190e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068f4  20000620  08019708  00030620  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006f14  08019708  00036f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030620  2**0
                  CONTENTS, READONLY
 12 .debug_info   00077dea  00000000  00000000  00030650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000e606  00000000  00000000  000a843a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003480  00000000  00000000  000b6a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003030  00000000  00000000  000b9ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000324d6  00000000  00000000  000bcef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004477c  00000000  00000000  000ef3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1dd1  00000000  00000000  00133b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00215913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e81c  00000000  00000000  00215964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00224180  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  002241a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000620 	.word	0x20000620
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018198 	.word	0x08018198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000624 	.word	0x20000624
 80001cc:	08018198 	.word	0x08018198

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <MX_CAN1_Init+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d7c:	220e      	movs	r2, #14
 8000d7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d8e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000d92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_CAN1_Init+0x64>)
 8000dc0:	f00d fc18 	bl	800e5f4 <HAL_CAN_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000dca:	f000 fc29 	bl	8001620 <Error_Handler>
  }

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000063c 	.word	0x2000063c
 8000dd8:	40006400 	.word	0x40006400

08000ddc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <HAL_CAN_MspInit+0xc4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d14c      	bne.n	8000e98 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <HAL_CAN_MspInit+0xc8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e48:	2309      	movs	r3, #9
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4815      	ldr	r0, [pc, #84]	; (8000ea8 <HAL_CAN_MspInit+0xcc>)
 8000e54:	f00e ffa6 	bl	800fda4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 12, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	210c      	movs	r1, #12
 8000e5c:	2013      	movs	r0, #19
 8000e5e:	f00e fbd7 	bl	800f610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000e62:	2013      	movs	r0, #19
 8000e64:	f00e fbf0 	bl	800f648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 12, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	210c      	movs	r1, #12
 8000e6c:	2014      	movs	r0, #20
 8000e6e:	f00e fbcf 	bl	800f610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e72:	2014      	movs	r0, #20
 8000e74:	f00e fbe8 	bl	800f648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 12, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	210c      	movs	r1, #12
 8000e7c:	2015      	movs	r0, #21
 8000e7e:	f00e fbc7 	bl	800f610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e82:	2015      	movs	r0, #21
 8000e84:	f00e fbe0 	bl	800f648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 12, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	210c      	movs	r1, #12
 8000e8c:	2016      	movs	r0, #22
 8000e8e:	f00e fbbf 	bl	800f610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e92:	2016      	movs	r0, #22
 8000e94:	f00e fbd8 	bl	800f648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40006400 	.word	0x40006400
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_CAN_MspDeInit+0x48>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d116      	bne.n	8000eec <HAL_CAN_MspDeInit+0x40>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_CAN_MspDeInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_CAN_MspDeInit+0x4c>)
 8000ec4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8000eca:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ece:	480b      	ldr	r0, [pc, #44]	; (8000efc <HAL_CAN_MspDeInit+0x50>)
 8000ed0:	f00f f904 	bl	80100dc <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8000ed4:	2013      	movs	r0, #19
 8000ed6:	f00e fbc5 	bl	800f664 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000eda:	2014      	movs	r0, #20
 8000edc:	f00e fbc2 	bl	800f664 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8000ee0:	2015      	movs	r0, #21
 8000ee2:	f00e fbbf 	bl	800f664 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8000ee6:	2016      	movs	r0, #22
 8000ee8:	f00e fbbc 	bl	800f664 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40006400 	.word	0x40006400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020400 	.word	0x40020400

08000f00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_DMA_Init+0x4c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <MX_DMA_Init+0x4c>)
 8000f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <MX_DMA_Init+0x4c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	203a      	movs	r0, #58	; 0x3a
 8000f28:	f00e fb72 	bl	800f610 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f2c:	203a      	movs	r0, #58	; 0x3a
 8000f2e:	f00e fb8b 	bl	800f648 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2046      	movs	r0, #70	; 0x46
 8000f38:	f00e fb6a 	bl	800f610 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000f3c:	2046      	movs	r0, #70	; 0x46
 8000f3e:	f00e fb83 	bl	800f648 <HAL_NVIC_EnableIRQ>

}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800

08000f50 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  /* Initialize the USART*/
  FUART_Init();
 8000f54:	f00c ffec 	bl	800df30 <FUART_Init>

  LOG_Init(LOG_InfoLevel, 1, LOG_USARTOut);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f008 fbb3 	bl	80096c8 <LOG_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  g_MotionMsgQueue = xQueueCreate(100, sizeof(MotionMsgItem_t));
 8000f62:	2200      	movs	r2, #0
 8000f64:	2114      	movs	r1, #20
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f012 fd2a 	bl	80139c0 <xQueueGenericCreate>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <MX_FREERTOS_Init+0x80>)
 8000f70:	6013      	str	r3, [r2, #0]

  // Motion 初始化
  MT_Init(g_MotionMsgQueue);
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_FREERTOS_Init+0x80>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f009 fa8a 	bl	800a490 <MT_Init>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTaskMain, NULL, &defaultTask_attributes);
 8000f7c:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <MX_FREERTOS_Init+0x84>)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <MX_FREERTOS_Init+0x88>)
 8000f82:	f012 fa81 	bl	8013488 <osThreadNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <MX_FREERTOS_Init+0x8c>)
 8000f8a:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(LedTaskMain, NULL, &ledTask_attributes);
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <MX_FREERTOS_Init+0x90>)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4814      	ldr	r0, [pc, #80]	; (8000fe4 <MX_FREERTOS_Init+0x94>)
 8000f92:	f012 fa79 	bl	8013488 <osThreadNew>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <MX_FREERTOS_Init+0x98>)
 8000f9a:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(EncoderTaskMain, NULL, &encoderTask_attributes);
 8000f9c:	4a13      	ldr	r2, [pc, #76]	; (8000fec <MX_FREERTOS_Init+0x9c>)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <MX_FREERTOS_Init+0xa0>)
 8000fa2:	f012 fa71 	bl	8013488 <osThreadNew>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_FREERTOS_Init+0xa4>)
 8000faa:	6013      	str	r3, [r2, #0]

  /* creation of uartTask */
  motionTaskHandle = osThreadNew(MotionTaskMain, NULL, &motionTask_attributes);
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <MX_FREERTOS_Init+0xa8>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4812      	ldr	r0, [pc, #72]	; (8000ffc <MX_FREERTOS_Init+0xac>)
 8000fb2:	f012 fa69 	bl	8013488 <osThreadNew>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a11      	ldr	r2, [pc, #68]	; (8001000 <MX_FREERTOS_Init+0xb0>)
 8000fba:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(CanCommTaskMain, NULL, &canTask_attributes);
 8000fbc:	4a11      	ldr	r2, [pc, #68]	; (8001004 <MX_FREERTOS_Init+0xb4>)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <MX_FREERTOS_Init+0xb8>)
 8000fc2:	f012 fa61 	bl	8013488 <osThreadNew>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <MX_FREERTOS_Init+0xbc>)
 8000fca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200006ec 	.word	0x200006ec
 8000fd4:	080184c0 	.word	0x080184c0
 8000fd8:	08001011 	.word	0x08001011
 8000fdc:	200006f0 	.word	0x200006f0
 8000fe0:	080184e4 	.word	0x080184e4
 8000fe4:	08001021 	.word	0x08001021
 8000fe8:	200006f4 	.word	0x200006f4
 8000fec:	08018508 	.word	0x08018508
 8000ff0:	080010a5 	.word	0x080010a5
 8000ff4:	200006f8 	.word	0x200006f8
 8000ff8:	0801852c 	.word	0x0801852c
 8000ffc:	08001171 	.word	0x08001171
 8001000:	200006fc 	.word	0x200006fc
 8001004:	08018550 	.word	0x08018550
 8001008:	080011a9 	.word	0x080011a9
 800100c:	20000700 	.word	0x20000700

08001010 <_Z15DefaultTaskMainPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTaskMain */
void DefaultTaskMain(void *argument)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTaskMain */
  /* Infinite loop */
  for(;;)
  {
	//MT_process_v3(g_IncSteps);
	osDelay(4);
 8001018:	2004      	movs	r0, #4
 800101a:	f012 fadb 	bl	80135d4 <osDelay>
 800101e:	e7fb      	b.n	8001018 <_Z15DefaultTaskMainPv+0x8>

08001020 <_Z11LedTaskMainPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTaskMain */
void LedTaskMain(void *argument)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTaskMain */
  /* Infinite loop */
  uint32_t count = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	if (++count >= 1000) count = 0;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001038:	4293      	cmp	r3, r2
 800103a:	bf8c      	ite	hi
 800103c:	2301      	movhi	r3, #1
 800103e:	2300      	movls	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <_Z11LedTaskMainPv+0x2a>
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]

	uint32_t cycles = LED1_NORMAL_BQCNT;
 800104a:	2332      	movs	r3, #50	; 0x32
 800104c:	60bb      	str	r3, [r7, #8]
	if (g_TransportInited && CO->CANmodule[0]->errOld){
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <_Z11LedTaskMainPv+0x78>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <_Z11LedTaskMainPv+0x46>
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <_Z11LedTaskMainPv+0x7c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <_Z11LedTaskMainPv+0x46>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <_Z11LedTaskMainPv+0x48>
 8001066:	2300      	movs	r3, #0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <_Z11LedTaskMainPv+0x50>
		cycles = LED1_ERR_BQCNT;
 800106c:	230a      	movs	r3, #10
 800106e:	60bb      	str	r3, [r7, #8]
	}

	if (count % cycles == 0)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	fbb3 f2f2 	udiv	r2, r3, r2
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	fb01 f202 	mul.w	r2, r1, r2
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d104      	bne.n	800108e <_Z11LedTaskMainPv+0x6e>
		HAL_GPIO_TogglePin(GPIOC, LED1_Pin);
 8001084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <_Z11LedTaskMainPv+0x80>)
 800108a:	f00f f954 	bl	8010336 <HAL_GPIO_TogglePin>

	osDelay(LEDLOOPMS);
 800108e:	2014      	movs	r0, #20
 8001090:	f012 faa0 	bl	80135d4 <osDelay>
  }
 8001094:	e7ca      	b.n	800102c <_Z11LedTaskMainPv+0xc>
 8001096:	bf00      	nop
 8001098:	20000664 	.word	0x20000664
 800109c:	20000adc 	.word	0x20000adc
 80010a0:	40020800 	.word	0x40020800

080010a4 <_Z15EncoderTaskMainPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EncoderTaskMain */
void EncoderTaskMain(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderTaskMain */
  /* Infinite loop */
  AS5048A_Init();
 80010ac:	f008 fb74 	bl	8009798 <AS5048A_Init>

  uint16_t retry = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	81fb      	strh	r3, [r7, #14]
  uint16_t result = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	81bb      	strh	r3, [r7, #12]

  //AS5048A_ZeroPoint();

  do {
    result = AS5048A_ReadAngle((uint16_t*)&g_AbsAngle);
 80010b8:	4829      	ldr	r0, [pc, #164]	; (8001160 <_Z15EncoderTaskMainPv+0xbc>)
 80010ba:	f008 fc66 	bl	800998a <AS5048A_ReadAngle>
 80010be:	4603      	mov	r3, r0
 80010c0:	81bb      	strh	r3, [r7, #12]
    if (result == HAL_OK)
 80010c2:	89bb      	ldrh	r3, [r7, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d009      	beq.n	80010dc <_Z15EncoderTaskMainPv+0x38>
      break;

    osDelay(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f012 fa83 	bl	80135d4 <osDelay>
    retry ++;
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	3301      	adds	r3, #1
 80010d2:	81fb      	strh	r3, [r7, #14]
  }while(retry < ENCODER_ReadAngle_Retry);
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	2b0e      	cmp	r3, #14
 80010d8:	d801      	bhi.n	80010de <_Z15EncoderTaskMainPv+0x3a>
  do {
 80010da:	e7ed      	b.n	80010b8 <_Z15EncoderTaskMainPv+0x14>
      break;
 80010dc:	bf00      	nop

  if (result != HAL_OK){
 80010de:	89bb      	ldrh	r3, [r7, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d138      	bne.n	8001156 <_Z15EncoderTaskMainPv+0xb2>
	return;
  }

  printf("Initialized angle: %d\n", g_AbsAngle);
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <_Z15EncoderTaskMainPv+0xbc>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4619      	mov	r1, r3
 80010ec:	481d      	ldr	r0, [pc, #116]	; (8001164 <_Z15EncoderTaskMainPv+0xc0>)
 80010ee:	f015 fff3 	bl	80170d8 <iprintf>

  RND_Init(g_AbsAngle);
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <_Z15EncoderTaskMainPv+0xbc>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f008 fc57 	bl	80099ac <RND_Init>

  uint16_t angle = g_AbsAngle;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <_Z15EncoderTaskMainPv+0xbc>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	813b      	strh	r3, [r7, #8]

  /* Infinite loop */
  for(;;) {
	/*Feed the current angle*/
	RND_Input(g_AbsAngle);
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <_Z15EncoderTaskMainPv+0xbc>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	4618      	mov	r0, r3
 800110e:	f008 fc97 	bl	8009a40 <RND_Input>

	/*Update the increment steps*/
	// 40.24(64teeths)/9.68(16teeths) * 16(g_MicroSteps) = 66.51
	g_IncSteps = RND_GetIncSteps(g_AbsAngle, g_EncoderRatio); //
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <_Z15EncoderTaskMainPv+0xbc>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <_Z15EncoderTaskMainPv+0xc4>)
 800111a:	edd2 7a00 	vldr	s15, [r2]
 800111e:	eeb0 0a67 	vmov.f32	s0, s15
 8001122:	4618      	mov	r0, r3
 8001124:	f008 fdf6 	bl	8009d14 <RND_GetIncSteps>
 8001128:	4603      	mov	r3, r0
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <_Z15EncoderTaskMainPv+0xc8>)
 800112c:	6013      	str	r3, [r2, #0]

	/*loop read, and update global absolute angle*/
	uint16_t status = AS5048A_ReadAngle((uint16_t*)&angle);
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	4618      	mov	r0, r3
 8001134:	f008 fc29 	bl	800998a <AS5048A_ReadAngle>
 8001138:	4603      	mov	r3, r0
 800113a:	817b      	strh	r3, [r7, #10]
	if (status == HAL_OK && angle != 0){
 800113c:	897b      	ldrh	r3, [r7, #10]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <_Z15EncoderTaskMainPv+0xaa>
 8001142:	893b      	ldrh	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <_Z15EncoderTaskMainPv+0xaa>
		g_AbsAngle = angle;
 8001148:	893a      	ldrh	r2, [r7, #8]
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <_Z15EncoderTaskMainPv+0xbc>)
 800114c:	801a      	strh	r2, [r3, #0]
	}
	osDelay(2);
 800114e:	2002      	movs	r0, #2
 8001150:	f012 fa40 	bl	80135d4 <osDelay>
  }
 8001154:	e7d7      	b.n	8001106 <_Z15EncoderTaskMainPv+0x62>
	return;
 8001156:	bf00      	nop
  /* USER CODE END EncoderTaskMain */
}
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200006e8 	.word	0x200006e8
 8001164:	080181e4 	.word	0x080181e4
 8001168:	20000004 	.word	0x20000004
 800116c:	200006e4 	.word	0x200006e4

08001170 <_Z14MotionTaskMainPv>:
* @retval None
*/
/* USER CODE END Header_UITaskMain */
#if (USE_TMC5160 == 1)
void MotionTaskMain(void *argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  FUART_beginReceive(&huart1);
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <_Z14MotionTaskMainPv+0x30>)
 800117a:	f00c ff01 	bl	800df80 <FUART_beginReceive>

  MOTOR_Init();
 800117e:	f008 ff21 	bl	8009fc4 <MOTOR_Init>
  MOTOR_bindDriver(&driver);
 8001182:	4808      	ldr	r0, [pc, #32]	; (80011a4 <_Z14MotionTaskMainPv+0x34>)
 8001184:	f008 ff36 	bl	8009ff4 <MOTOR_bindDriver>

  MT_Begin();
 8001188:	f009 f942 	bl	800a410 <MT_Begin>

  uint32_t ticks = 4;
 800118c:	2304      	movs	r3, #4
 800118e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	//JNT_processMsg();
	  MT_Loop(ticks);
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f009 f949 	bl	800a428 <MT_Loop>
	  osDelay(ticks);
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f012 fa1c 	bl	80135d4 <osDelay>
	  MT_Loop(ticks);
 800119c:	e7f8      	b.n	8001190 <_Z14MotionTaskMainPv+0x20>
 800119e:	bf00      	nop
 80011a0:	2000093c 	.word	0x2000093c
 80011a4:	20000668 	.word	0x20000668

080011a8 <_Z15CanCommTaskMainPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CanCommTaskMain */
void CanCommTaskMain(void *argument)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CanCommTaskMain */
  uint8_t ret;

  if (NODE_new() == CO_ERROR_NO){
 80011b0:	f007 fc90 	bl	8008ad4 <NODE_new>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf0c      	ite	eq
 80011ba:	2301      	moveq	r3, #1
 80011bc:	2300      	movne	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00b      	beq.n	80011dc <_Z15CanCommTaskMainPv+0x34>
    ret = NODE_Init((void*)&hcan1, g_NodeId);
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <_Z15CanCommTaskMainPv+0xb8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4826      	ldr	r0, [pc, #152]	; (8001264 <_Z15CanCommTaskMainPv+0xbc>)
 80011cc:	f007 fca0 	bl	8008b10 <NODE_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	75fb      	strb	r3, [r7, #23]
  }else{
    printf("Create CAN node failed.\n");
	return;
  }

  if (ret != CO_ERROR_NO){
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00a      	beq.n	80011f0 <_Z15CanCommTaskMainPv+0x48>
 80011da:	e003      	b.n	80011e4 <_Z15CanCommTaskMainPv+0x3c>
    printf("Create CAN node failed.\n");
 80011dc:	4822      	ldr	r0, [pc, #136]	; (8001268 <_Z15CanCommTaskMainPv+0xc0>)
 80011de:	f016 f801 	bl	80171e4 <puts>
	return;
 80011e2:	e03a      	b.n	800125a <_Z15CanCommTaskMainPv+0xb2>
    printf("Node initialize failed. [%d]\n", ret);
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	4619      	mov	r1, r3
 80011e8:	4820      	ldr	r0, [pc, #128]	; (800126c <_Z15CanCommTaskMainPv+0xc4>)
 80011ea:	f015 ff75 	bl	80170d8 <iprintf>
	return;
 80011ee:	e034      	b.n	800125a <_Z15CanCommTaskMainPv+0xb2>
  }

  bool_t   syncWas;
  uint32_t timerNext;

  uint32_t timeInterval = CAN_LOOP_DUARTION * TMR_TASK_INTERVAL;
 80011f0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80011f4:	613b      	str	r3, [r7, #16]

  g_TransportInited = 1;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <_Z15CanCommTaskMainPv+0xc8>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  for(;;) {
	if(CO->CANmodule[0]->CANnormal){
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <_Z15CanCommTaskMainPv+0xcc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	7c9b      	ldrb	r3, [r3, #18]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf14      	ite	ne
 800120a:	2301      	movne	r3, #1
 800120c:	2300      	moveq	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d01e      	beq.n	8001252 <_Z15CanCommTaskMainPv+0xaa>

	  CO_process(CO, timeInterval, &timerNext);
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <_Z15CanCommTaskMainPv+0xcc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f107 0208 	add.w	r2, r7, #8
 800121c:	6939      	ldr	r1, [r7, #16]
 800121e:	4618      	mov	r0, r3
 8001220:	f007 f920 	bl	8008464 <CO_process>

	  syncWas = CO_process_SYNC(CO, timeInterval, &timerNext);
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <_Z15CanCommTaskMainPv+0xcc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f107 0208 	add.w	r2, r7, #8
 800122c:	6939      	ldr	r1, [r7, #16]
 800122e:	4618      	mov	r0, r3
 8001230:	f007 f97c 	bl	800852c <CO_process_SYNC>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]

	  NODE_process(timeInterval, syncWas);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	b29b      	uxth	r3, r3
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f007 fd8f 	bl	8008d64 <NODE_process>

	  CO_CANpolling_Tx(CO->CANmodule[0]);
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <_Z15CanCommTaskMainPv+0xcc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f008 f89b 	bl	8009388 <CO_CANpolling_Tx>
    }
	osDelay(CAN_LOOP_DUARTION);
 8001252:	2004      	movs	r0, #4
 8001254:	f012 f9be 	bl	80135d4 <osDelay>
	if(CO->CANmodule[0]->CANnormal){
 8001258:	e7d0      	b.n	80011fc <_Z15CanCommTaskMainPv+0x54>
  }
  /* USER CODE END CanCommTaskMain */
}
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	2000063c 	.word	0x2000063c
 8001268:	080181fc 	.word	0x080181fc
 800126c:	08018214 	.word	0x08018214
 8001270:	20000664 	.word	0x20000664
 8001274:	20000adc 	.word	0x20000adc

08001278 <_Z41__static_initialization_and_destruction_0ii>:
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d111      	bne.n	80012ac <_Z41__static_initialization_and_destruction_0ii+0x34>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128e:	4293      	cmp	r3, r2
 8001290:	d10c      	bne.n	80012ac <_Z41__static_initialization_and_destruction_0ii+0x34>
TMC5160Stepper driver(0, 0.075, 0, 0, 0, -1);
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	2300      	movs	r3, #0
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2200      	movs	r2, #0
 80012a0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80012b4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80012a4:	2100      	movs	r1, #0
 80012a6:	4804      	ldr	r0, [pc, #16]	; (80012b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80012a8:	f00c fa6a 	bl	800d780 <_ZN14TMC5160StepperC1Etfttta>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	3d99999a 	.word	0x3d99999a
 80012b8:	20000668 	.word	0x20000668

080012bc <_GLOBAL__sub_I_g_TransportInited>:
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
 80012c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff ffd7 	bl	8001278 <_Z41__static_initialization_and_destruction_0ii>
 80012ca:	bd80      	pop	{r7, pc}

080012cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b6e      	ldr	r3, [pc, #440]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a6d      	ldr	r2, [pc, #436]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b6b      	ldr	r3, [pc, #428]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a66      	ldr	r2, [pc, #408]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b64      	ldr	r3, [pc, #400]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a5f      	ldr	r2, [pc, #380]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b59      	ldr	r3, [pc, #356]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a58      	ldr	r2, [pc, #352]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b52      	ldr	r3, [pc, #328]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a51      	ldr	r2, [pc, #324]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <MX_GPIO_Init+0x1d4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|SPI3_CS_Pin|DRV_ENN_Pin|LED2_Pin
 800136e:	2200      	movs	r2, #0
 8001370:	f242 3171 	movw	r1, #9073	; 0x2371
 8001374:	484b      	ldr	r0, [pc, #300]	; (80014a4 <MX_GPIO_Init+0x1d8>)
 8001376:	f00e ffc5 	bl	8010304 <HAL_GPIO_WritePin>
                          |EXTSTEP_DIR_Pin|DCEN_Pin|Stepper_Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI2_CS_Pin|DCO_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f241 0102 	movw	r1, #4098	; 0x1002
 8001380:	4849      	ldr	r0, [pc, #292]	; (80014a8 <MX_GPIO_Init+0x1dc>)
 8001382:	f00e ffbf 	bl	8010304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTSTEP_EN_GPIO_Port, EXTSTEP_EN_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138c:	4847      	ldr	r0, [pc, #284]	; (80014ac <MX_GPIO_Init+0x1e0>)
 800138e:	f00e ffb9 	bl	8010304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|DRV_ENN_Pin|LED2_Pin|EXTSTEP_DIR_Pin
 8001392:	f242 3370 	movw	r3, #9072	; 0x2370
 8001396:	617b      	str	r3, [r7, #20]
                          |DCEN_Pin|Stepper_Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	483e      	ldr	r0, [pc, #248]	; (80014a4 <MX_GPIO_Init+0x1d8>)
 80013ac:	f00e fcfa 	bl	800fda4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013bc:	2302      	movs	r3, #2
 80013be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4837      	ldr	r0, [pc, #220]	; (80014a4 <MX_GPIO_Init+0x1d8>)
 80013c8:	f00e fcec 	bl	800fda4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80013cc:	2302      	movs	r3, #2
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4831      	ldr	r0, [pc, #196]	; (80014a8 <MX_GPIO_Init+0x1dc>)
 80013e4:	f00e fcde 	bl	800fda4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTSTEP_EN_Pin;
 80013e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTSTEP_EN_GPIO_Port, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	482a      	ldr	r0, [pc, #168]	; (80014ac <MX_GPIO_Init+0x1e0>)
 8001402:	f00e fccf 	bl	800fda4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCIN_Pin;
 8001406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCIN_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4823      	ldr	r0, [pc, #140]	; (80014a8 <MX_GPIO_Init+0x1dc>)
 800141c:	f00e fcc2 	bl	800fda4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCO_Pin;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCO_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	481b      	ldr	r0, [pc, #108]	; (80014a8 <MX_GPIO_Init+0x1dc>)
 800143a:	f00e fcb3 	bl	800fda4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800143e:	2304      	movs	r3, #4
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = g_EndStopTriggerMode;
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_GPIO_Init+0x1e4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4818      	ldr	r0, [pc, #96]	; (80014b4 <MX_GPIO_Init+0x1e8>)
 8001454:	f00e fca6 	bl	800fda4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001458:	2310      	movs	r3, #16
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_GPIO_Init+0x1ec>)
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4810      	ldr	r0, [pc, #64]	; (80014ac <MX_GPIO_Init+0x1e0>)
 800146c:	f00e fc9a 	bl	800fda4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIAG1_Pin|DIAG0_Pin;
 8001470:	23c0      	movs	r3, #192	; 0xc0
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <MX_GPIO_Init+0x1e0>)
 8001484:	f00e fc8e 	bl	800fda4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 6, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2106      	movs	r1, #6
 800148c:	2008      	movs	r0, #8
 800148e:	f00e f8bf 	bl	800f610 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001492:	2008      	movs	r0, #8
 8001494:	f00e f8d8 	bl	800f648 <HAL_NVIC_EnableIRQ>

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	20000008 	.word	0x20000008
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	10110000 	.word	0x10110000

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 80014c0:	f015 fad4 	bl	8016a6c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c4:	f00d f830 	bl	800e528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c8:	f000 f824 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014cc:	f7ff fefe 	bl	80012cc <MX_GPIO_Init>
  MX_DMA_Init();
 80014d0:	f7ff fd16 	bl	8000f00 <MX_DMA_Init>
  MX_CAN1_Init();
 80014d4:	f7ff fc4c 	bl	8000d70 <MX_CAN1_Init>
  MX_SPI3_Init();
 80014d8:	f000 f8e0 	bl	800169c <MX_SPI3_Init>
  MX_TIM1_Init();
 80014dc:	f000 fb36 	bl	8001b4c <MX_TIM1_Init>
  MX_TIM2_Init();
 80014e0:	f000 fbb8 	bl	8001c54 <MX_TIM2_Init>
  MX_TIM5_Init();
 80014e4:	f000 fc0c 	bl	8001d00 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80014e8:	f000 fe5a 	bl	80021a0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80014ec:	f000 f8a0 	bl	8001630 <MX_SPI2_Init>
  MX_TIM8_Init();
 80014f0:	f000 fc5c 	bl	8001dac <MX_TIM8_Init>
  MX_TIM12_Init();
 80014f4:	f000 fcdc 	bl	8001eb0 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  g_GPIOInitFinished = 1;
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <main+0x54>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  PosProfile_Initialize();
 80014fe:	f00a fb23 	bl	800bb48 <PosProfile_Initialize>
  }

  printf("Exhaust time: %ld\n", st);
*/
  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001502:	f011 ff57 	bl	80133b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001506:	f7ff fd23 	bl	8000f50 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800150a:	f011 ff87 	bl	801341c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800150e:	e7fe      	b.n	800150e <main+0x52>
 8001510:	20000704 	.word	0x20000704

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2230      	movs	r2, #48	; 0x30
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f015 fcda 	bl	8016edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <SystemClock_Config+0xcc>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <SystemClock_Config+0xcc>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <SystemClock_Config+0xcc>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <SystemClock_Config+0xd0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <SystemClock_Config+0xd0>)
 800155e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <SystemClock_Config+0xd0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157a:	2302      	movs	r3, #2
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001584:	230f      	movs	r3, #15
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001588:	23c0      	movs	r3, #192	; 0xc0
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001590:	2304      	movs	r3, #4
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4618      	mov	r0, r3
 800159a:	f00e ff0b 	bl	80103b4 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015a4:	f000 f83c 	bl	8001620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ac:	2302      	movs	r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2105      	movs	r1, #5
 80015c6:	4618      	mov	r0, r3
 80015c8:	f00f f962 	bl	8010890 <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015d2:	f000 f825 	bl	8001620 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015fa:	f00c ffb7 	bl	800e56c <HAL_IncTick>
  }

  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM5){
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d102      	bne.n	800160e <HAL_TIM_PeriodElapsedCallback+0x26>
	  MT_process_v3(4);
 8001608:	2004      	movs	r0, #4
 800160a:	f009 fa15 	bl	800aa38 <MT_process_v3>
  }
  /* USER CODE END Callback 1 */
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40001c00 	.word	0x40001c00
 800161c:	40000c00 	.word	0x40000c00

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <MX_SPI2_Init+0x64>)
 8001636:	4a18      	ldr	r2, [pc, #96]	; (8001698 <MX_SPI2_Init+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_SPI2_Init+0x64>)
 800163c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001640:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_SPI2_Init+0x64>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_SPI2_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_SPI2_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_SPI2_Init+0x64>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_SPI2_Init+0x64>)
 800165c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001660:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_SPI2_Init+0x64>)
 8001664:	2228      	movs	r2, #40	; 0x28
 8001666:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_SPI2_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_SPI2_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_SPI2_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_SPI2_Init+0x64>)
 800167c:	220a      	movs	r2, #10
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_SPI2_Init+0x64>)
 8001682:	f00f fb17 	bl	8010cb4 <HAL_SPI_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800168c:	f7ff ffc8 	bl	8001620 <Error_Handler>
  }

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000708 	.word	0x20000708
 8001698:	40003800 	.word	0x40003800

0800169c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_SPI3_Init+0x68>)
 80016a2:	4a19      	ldr	r2, [pc, #100]	; (8001708 <MX_SPI3_Init+0x6c>)
 80016a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_SPI3_Init+0x68>)
 80016a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <MX_SPI3_Init+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <MX_SPI3_Init+0x68>)
 80016b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_SPI3_Init+0x68>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_SPI3_Init+0x68>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_SPI3_Init+0x68>)
 80016ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_SPI3_Init+0x68>)
 80016d2:	2228      	movs	r2, #40	; 0x28
 80016d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_SPI3_Init+0x68>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_SPI3_Init+0x68>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_SPI3_Init+0x68>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_SPI3_Init+0x68>)
 80016ea:	220a      	movs	r2, #10
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_SPI3_Init+0x68>)
 80016f0:	f00f fae0 	bl	8010cb4 <HAL_SPI_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80016fa:	f7ff ff91 	bl	8001620 <Error_Handler>
  }

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000760 	.word	0x20000760
 8001708:	40003c00 	.word	0x40003c00

0800170c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a42      	ldr	r2, [pc, #264]	; (8001834 <HAL_SPI_MspInit+0x128>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d14b      	bne.n	80017c6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a40      	ldr	r2, [pc, #256]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	61bb      	str	r3, [r7, #24]
 8001748:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a39      	ldr	r2, [pc, #228]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b33      	ldr	r3, [pc, #204]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a32      	ldr	r2, [pc, #200]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b30      	ldr	r3, [pc, #192]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001782:	230c      	movs	r3, #12
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001792:	2305      	movs	r3, #5
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4827      	ldr	r0, [pc, #156]	; (800183c <HAL_SPI_MspInit+0x130>)
 800179e:	f00e fb01 	bl	800fda4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b4:	2305      	movs	r3, #5
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	4820      	ldr	r0, [pc, #128]	; (8001840 <HAL_SPI_MspInit+0x134>)
 80017c0:	f00e faf0 	bl	800fda4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80017c4:	e031      	b.n	800182a <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <HAL_SPI_MspInit+0x138>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d12c      	bne.n	800182a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 80017da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	6313      	str	r3, [r2, #48]	; 0x30
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_SPI_MspInit+0x12c>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001808:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800181a:	2306      	movs	r3, #6
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <HAL_SPI_MspInit+0x130>)
 8001826:	f00e fabd 	bl	800fda4 <HAL_GPIO_Init>
}
 800182a:	bf00      	nop
 800182c:	3730      	adds	r7, #48	; 0x30
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40003800 	.word	0x40003800
 8001838:	40023800 	.word	0x40023800
 800183c:	40020800 	.word	0x40020800
 8001840:	40020400 	.word	0x40020400
 8001844:	40003c00 	.word	0x40003c00

08001848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_MspInit+0x4c>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <HAL_MspInit+0x4c>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185c:	6453      	str	r3, [r2, #68]	; 0x44
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_MspInit+0x4c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_MspInit+0x4c>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_MspInit+0x4c>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_MspInit+0x4c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	202c      	movs	r0, #44	; 0x2c
 80018ae:	f00d feaf 	bl	800f610 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80018b2:	202c      	movs	r0, #44	; 0x2c
 80018b4:	f00d fec8 	bl	800f648 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <HAL_InitTick+0xa4>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	4a1e      	ldr	r2, [pc, #120]	; (800193c <HAL_InitTick+0xa4>)
 80018c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c6:	6413      	str	r3, [r2, #64]	; 0x40
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_InitTick+0xa4>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018d4:	f107 0210 	add.w	r2, r7, #16
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f00f f9b6 	bl	8010c50 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018e4:	f00f f98c 	bl	8010c00 <HAL_RCC_GetPCLK1Freq>
 80018e8:	4603      	mov	r3, r0
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	4a13      	ldr	r2, [pc, #76]	; (8001940 <HAL_InitTick+0xa8>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0c9b      	lsrs	r3, r3, #18
 80018f8:	3b01      	subs	r3, #1
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_InitTick+0xac>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <HAL_InitTick+0xb0>)
 8001900:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000 / 1000) - 1;
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_InitTick+0xac>)
 8001904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001908:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_InitTick+0xac>)
 800190c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190e:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_InitTick+0xac>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_InitTick+0xac>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <HAL_InitTick+0xac>)
 800191e:	f00f fc7b 	bl	8011218 <HAL_TIM_Base_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d104      	bne.n	8001932 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001928:	4806      	ldr	r0, [pc, #24]	; (8001944 <HAL_InitTick+0xac>)
 800192a:	f00f fcaa 	bl	8011282 <HAL_TIM_Base_Start_IT>
 800192e:	4603      	mov	r3, r0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3730      	adds	r7, #48	; 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	431bde83 	.word	0x431bde83
 8001944:	200007b8 	.word	0x200007b8
 8001948:	40001c00 	.word	0x40001c00

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <MemManage_Handler+0x4>

08001966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <UsageFault_Handler+0x4>

08001972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001984:	2004      	movs	r0, #4
 8001986:	f00e fcf1 	bl	801036c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == g_EndStopTriggerState && g_GPIOInitFinished == 1){
 800198a:	2104      	movs	r1, #4
 800198c:	4808      	ldr	r0, [pc, #32]	; (80019b0 <EXTI2_IRQHandler+0x30>)
 800198e:	f00e fca1 	bl	80102d4 <HAL_GPIO_ReadPin>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <EXTI2_IRQHandler+0x34>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d106      	bne.n	80019ac <EXTI2_IRQHandler+0x2c>
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <EXTI2_IRQHandler+0x38>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d102      	bne.n	80019ac <EXTI2_IRQHandler+0x2c>
    HOME_OnSwitchSignal(GPIO_PIN_2);
 80019a6:	2004      	movs	r0, #4
 80019a8:	f006 f902 	bl	8007bb0 <HOME_OnSwitchSignal>
  }
  /* USER CODE END EXTI2_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	200006e0 	.word	0x200006e0
 80019b8:	20000704 	.word	0x20000704

080019bc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <CAN1_TX_IRQHandler+0x10>)
 80019c2:	f00d fb17 	bl	800eff4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000063c 	.word	0x2000063c

080019d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <CAN1_RX0_IRQHandler+0x10>)
 80019d6:	f00d fb0d 	bl	800eff4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000063c 	.word	0x2000063c

080019e4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <CAN1_RX1_IRQHandler+0x10>)
 80019ea:	f00d fb03 	bl	800eff4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000063c 	.word	0x2000063c

080019f8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <CAN1_SCE_IRQHandler+0x10>)
 80019fe:	f00d faf9 	bl	800eff4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2000063c 	.word	0x2000063c

08001a0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a12:	f00f fe0d 	bl	8011630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200007fc 	.word	0x200007fc

08001a20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <TIM1_CC_IRQHandler+0x10>)
 8001a26:	f00f fe03 	bl	8011630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200007fc 	.word	0x200007fc

08001a34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <TIM2_IRQHandler+0x10>)
 8001a3a:	f00f fdf9 	bl	8011630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000083c 	.word	0x2000083c

08001a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <USART1_IRQHandler+0x10>)
 8001a4e:	f010 fccd 	bl	80123ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000093c 	.word	0x2000093c

08001a5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8001a62:	f00f fde5 	bl	8011630 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8001a66:	4803      	ldr	r0, [pc, #12]	; (8001a74 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001a68:	f00f fde2 	bl	8011630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200008bc 	.word	0x200008bc
 8001a74:	200007b8 	.word	0x200007b8

08001a78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <TIM5_IRQHandler+0x10>)
 8001a7e:	f00f fdd7 	bl	8011630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000087c 	.word	0x2000087c

08001a8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <DMA2_Stream2_IRQHandler+0x10>)
 8001a92:	f00d ff1d 	bl	800f8d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000097c 	.word	0x2000097c

08001aa0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <DMA2_Stream7_IRQHandler+0x10>)
 8001aa6:	f00d ff13 	bl	800f8d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200009dc 	.word	0x200009dc

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae4:	f015 f8c0 	bl	8016c68 <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <_sbrk+0x64>)
 8001b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20020000 	.word	0x20020000
 8001b14:	00000400 	.word	0x00000400
 8001b18:	200007f8 	.word	0x200007f8
 8001b1c:	20006f18 	.word	0x20006f18

08001b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <SystemInit+0x28>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <SystemInit+0x28>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SystemInit+0x28>)
 8001b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b3a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b092      	sub	sp, #72	; 0x48
 8001b50:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2220      	movs	r2, #32
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f015 f9b0 	bl	8016edc <memset>

  htim1.Instance = TIM1;
 8001b7c:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001b7e:	4a34      	ldr	r2, [pc, #208]	; (8001c50 <MX_TIM1_Init+0x104>)
 8001b80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;	// APB2 timer clock 160MHz
 8001b82:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001b84:	224f      	movs	r2, #79	; 0x4f
 8001b86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001b90:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001b94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ba8:	4828      	ldr	r0, [pc, #160]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001baa:	f00f fbb9 	bl	8011320 <HAL_TIM_PWM_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001bb4:	f7ff fd34 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bb8:	2320      	movs	r3, #32
 8001bba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4821      	ldr	r0, [pc, #132]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001bc8:	f010 f9f4 	bl	8011fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001bd2:	f7ff fd25 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd6:	2360      	movs	r3, #96	; 0x60
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 250;
 8001bda:	23fa      	movs	r3, #250	; 0xfa
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001be2:	2300      	movs	r3, #0
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4814      	ldr	r0, [pc, #80]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001bfc:	f00f fe80 	bl	8011900 <HAL_TIM_PWM_ConfigChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001c06:	f7ff fd0b 	bl	8001620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001c2e:	f010 fa3d 	bl	80120ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001c38:	f7ff fcf2 	bl	8001620 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <MX_TIM1_Init+0x100>)
 8001c3e:	f000 fa23 	bl	8002088 <HAL_TIM_MspPostInit>

}
 8001c42:	bf00      	nop
 8001c44:	3748      	adds	r7, #72	; 0x48
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200007fc 	.word	0x200007fc
 8001c50:	40010000 	.word	0x40010000

08001c54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5a:	f107 0320 	add.w	r3, r7, #32
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <MX_TIM2_Init+0xa8>)
 8001c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <MX_TIM2_Init+0xa8>)
 8001c80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <MX_TIM2_Init+0xa8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <MX_TIM2_Init+0xa8>)
 8001c8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <MX_TIM2_Init+0xa8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <MX_TIM2_Init+0xa8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001ca0:	4816      	ldr	r0, [pc, #88]	; (8001cfc <MX_TIM2_Init+0xa8>)
 8001ca2:	f00f fb12 	bl	80112ca <HAL_TIM_OC_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001cac:	f7ff fcb8 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cb0:	2320      	movs	r3, #32
 8001cb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cb8:	f107 0320 	add.w	r3, r7, #32
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480f      	ldr	r0, [pc, #60]	; (8001cfc <MX_TIM2_Init+0xa8>)
 8001cc0:	f010 f978 	bl	8011fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001cca:	f7ff fca9 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_TIM2_Init+0xa8>)
 8001ce6:	f00f fdab 	bl	8011840 <HAL_TIM_OC_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001cf0:	f7ff fc96 	bl	8001620 <Error_Handler>
  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2000083c 	.word	0x2000083c

08001d00 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d06:	f107 0320 	add.w	r3, r7, #32
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
 8001d1e:	615a      	str	r2, [r3, #20]
 8001d20:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <MX_TIM5_Init+0xa4>)
 8001d24:	4a20      	ldr	r2, [pc, #128]	; (8001da8 <MX_TIM5_Init+0xa8>)
 8001d26:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <MX_TIM5_Init+0xa4>)
 8001d2a:	224f      	movs	r2, #79	; 0x4f
 8001d2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <MX_TIM5_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3999;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <MX_TIM5_Init+0xa4>)
 8001d36:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001d3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <MX_TIM5_Init+0xa4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_TIM5_Init+0xa4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001d48:	4816      	ldr	r0, [pc, #88]	; (8001da4 <MX_TIM5_Init+0xa4>)
 8001d4a:	f00f fabe 	bl	80112ca <HAL_TIM_OC_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001d54:	f7ff fc64 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d60:	f107 0320 	add.w	r3, r7, #32
 8001d64:	4619      	mov	r1, r3
 8001d66:	480f      	ldr	r0, [pc, #60]	; (8001da4 <MX_TIM5_Init+0xa4>)
 8001d68:	f010 f924 	bl	8011fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001d72:	f7ff fc55 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_TIM5_Init+0xa4>)
 8001d8e:	f00f fd57 	bl	8011840 <HAL_TIM_OC_ConfigChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001d98:	f7ff fc42 	bl	8001620 <Error_Handler>
  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2000087c 	.word	0x2000087c
 8001da8:	40000c00 	.word	0x40000c00

08001dac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b092      	sub	sp, #72	; 0x48
 8001db0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
 8001dcc:	615a      	str	r2, [r3, #20]
 8001dce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f015 f880 	bl	8016edc <memset>

  htim8.Instance = TIM8;
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001dde:	4a33      	ldr	r2, [pc, #204]	; (8001eac <MX_TIM8_Init+0x100>)
 8001de0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 8001de2:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 6;
 8001dee:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001df0:	2206      	movs	r2, #6
 8001df2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001e02:	2280      	movs	r2, #128	; 0x80
 8001e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e06:	4828      	ldr	r0, [pc, #160]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001e08:	f00f fa8a 	bl	8011320 <HAL_TIM_PWM_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8001e12:	f7ff fc05 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e16:	2320      	movs	r3, #32
 8001e18:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e22:	4619      	mov	r1, r3
 8001e24:	4820      	ldr	r0, [pc, #128]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001e26:	f010 f8c5 	bl	8011fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8001e30:	f7ff fbf6 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e34:	2360      	movs	r3, #96	; 0x60
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 3;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e40:	2300      	movs	r3, #0
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	2204      	movs	r2, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4813      	ldr	r0, [pc, #76]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001e5a:	f00f fd51 	bl	8011900 <HAL_TIM_PWM_ConfigChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8001e64:	f7ff fbdc 	bl	8001620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001e8c:	f010 f90e 	bl	80120ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8001e96:	f7ff fbc3 	bl	8001620 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8001e9a:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <MX_TIM8_Init+0xfc>)
 8001e9c:	f000 f8f4 	bl	8002088 <HAL_TIM_MspPostInit>

}
 8001ea0:	bf00      	nop
 8001ea2:	3748      	adds	r7, #72	; 0x48
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200008bc 	.word	0x200008bc
 8001eac:	40010400 	.word	0x40010400

08001eb0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
 8001ec4:	615a      	str	r2, [r3, #20]
 8001ec6:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001eca:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <MX_TIM12_Init+0x84>)
 8001ecc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 6;
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001ed0:	2206      	movs	r2, #6
 8001ed2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 5;
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001edc:	2205      	movs	r2, #5
 8001ede:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001eec:	4810      	ldr	r0, [pc, #64]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001eee:	f00f fa17 	bl	8011320 <HAL_TIM_PWM_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001ef8:	f7ff fb92 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efc:	2360      	movs	r3, #96	; 0x60
 8001efe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8001f00:	2303      	movs	r3, #3
 8001f02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4619      	mov	r1, r3
 8001f12:	4807      	ldr	r0, [pc, #28]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001f14:	f00f fcf4 	bl	8011900 <HAL_TIM_PWM_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001f1e:	f7ff fb7f 	bl	8001620 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001f22:	4803      	ldr	r0, [pc, #12]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001f24:	f000 f8b0 	bl	8002088 <HAL_TIM_MspPostInit>

}
 8001f28:	bf00      	nop
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200008fc 	.word	0x200008fc
 8001f34:	40001800 	.word	0x40001800

08001f38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a2a      	ldr	r2, [pc, #168]	; (8001ff0 <HAL_TIM_PWM_MspInit+0xb8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d11e      	bne.n	8001f88 <HAL_TIM_PWM_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <HAL_TIM_PWM_MspInit+0xbc>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <HAL_TIM_PWM_MspInit+0xbc>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <HAL_TIM_PWM_MspInit+0xbc>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2019      	movs	r0, #25
 8001f6c:	f00d fb50 	bl	800f610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f70:	2019      	movs	r0, #25
 8001f72:	f00d fb69 	bl	800f648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	201b      	movs	r0, #27
 8001f7c:	f00d fb48 	bl	800f610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f80:	201b      	movs	r0, #27
 8001f82:	f00d fb61 	bl	800f648 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001f86:	e02e      	b.n	8001fe6 <HAL_TIM_PWM_MspInit+0xae>
  else if(tim_pwmHandle->Instance==TIM8)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d116      	bne.n	8001fc0 <HAL_TIM_PWM_MspInit+0x88>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_TIM_PWM_MspInit+0xbc>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_TIM_PWM_MspInit+0xbc>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_TIM_PWM_MspInit+0xbc>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	202c      	movs	r0, #44	; 0x2c
 8001fb4:	f00d fb2c 	bl	800f610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001fb8:	202c      	movs	r0, #44	; 0x2c
 8001fba:	f00d fb45 	bl	800f648 <HAL_NVIC_EnableIRQ>
}
 8001fbe:	e012      	b.n	8001fe6 <HAL_TIM_PWM_MspInit+0xae>
  else if(tim_pwmHandle->Instance==TIM12)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_TIM_PWM_MspInit+0xc4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10d      	bne.n	8001fe6 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_TIM_PWM_MspInit+0xbc>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a08      	ldr	r2, [pc, #32]	; (8001ff4 <HAL_TIM_PWM_MspInit+0xbc>)
 8001fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_TIM_PWM_MspInit+0xbc>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40010400 	.word	0x40010400
 8001ffc:	40001800 	.word	0x40001800

08002000 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d116      	bne.n	8002040 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_TIM_OC_MspInit+0x80>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a19      	ldr	r2, [pc, #100]	; (8002080 <HAL_TIM_OC_MspInit+0x80>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_TIM_OC_MspInit+0x80>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	201c      	movs	r0, #28
 8002034:	f00d faec 	bl	800f610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002038:	201c      	movs	r0, #28
 800203a:	f00d fb05 	bl	800f648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800203e:	e01a      	b.n	8002076 <HAL_TIM_OC_MspInit+0x76>
  else if(tim_ocHandle->Instance==TIM5)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <HAL_TIM_OC_MspInit+0x84>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d115      	bne.n	8002076 <HAL_TIM_OC_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_TIM_OC_MspInit+0x80>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HAL_TIM_OC_MspInit+0x80>)
 8002054:	f043 0308 	orr.w	r3, r3, #8
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_TIM_OC_MspInit+0x80>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 10, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	210a      	movs	r1, #10
 800206a:	2032      	movs	r0, #50	; 0x32
 800206c:	f00d fad0 	bl	800f610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002070:	2032      	movs	r0, #50	; 0x32
 8002072:	f00d fae9 	bl	800f648 <HAL_NVIC_EnableIRQ>
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800
 8002084:	40000c00 	.word	0x40000c00

08002088 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a37      	ldr	r2, [pc, #220]	; (8002184 <HAL_TIM_MspPostInit+0xfc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d11f      	bne.n	80020ea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_TIM_MspPostInit+0x100>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a35      	ldr	r2, [pc, #212]	; (8002188 <HAL_TIM_MspPostInit+0x100>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b33      	ldr	r3, [pc, #204]	; (8002188 <HAL_TIM_MspPostInit+0x100>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020d8:	2301      	movs	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	482a      	ldr	r0, [pc, #168]	; (800218c <HAL_TIM_MspPostInit+0x104>)
 80020e4:	f00d fe5e 	bl	800fda4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80020e8:	e047      	b.n	800217a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a28      	ldr	r2, [pc, #160]	; (8002190 <HAL_TIM_MspPostInit+0x108>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d11e      	bne.n	8002132 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_TIM_MspPostInit+0x100>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_TIM_MspPostInit+0x100>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6313      	str	r3, [r2, #48]	; 0x30
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_TIM_MspPostInit+0x100>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002120:	2303      	movs	r3, #3
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	481a      	ldr	r0, [pc, #104]	; (8002194 <HAL_TIM_MspPostInit+0x10c>)
 800212c:	f00d fe3a 	bl	800fda4 <HAL_GPIO_Init>
}
 8002130:	e023      	b.n	800217a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM12)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a18      	ldr	r2, [pc, #96]	; (8002198 <HAL_TIM_MspPostInit+0x110>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d11e      	bne.n	800217a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_TIM_MspPostInit+0x100>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4a10      	ldr	r2, [pc, #64]	; (8002188 <HAL_TIM_MspPostInit+0x100>)
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	6313      	str	r3, [r2, #48]	; 0x30
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_TIM_MspPostInit+0x100>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002158:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800215c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800216a:	2309      	movs	r3, #9
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	4809      	ldr	r0, [pc, #36]	; (800219c <HAL_TIM_MspPostInit+0x114>)
 8002176:	f00d fe15 	bl	800fda4 <HAL_GPIO_Init>
}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40010000 	.word	0x40010000
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000
 8002190:	40010400 	.word	0x40010400
 8002194:	40020800 	.word	0x40020800
 8002198:	40001800 	.word	0x40001800
 800219c:	40020400 	.word	0x40020400

080021a0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <MX_USART1_UART_Init+0x50>)
 80021a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021d8:	f00f ffce 	bl	8012178 <HAL_UART_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021e2:	f7ff fa1d 	bl	8001620 <Error_Handler>
  }

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000093c 	.word	0x2000093c
 80021f0:	40011000 	.word	0x40011000

080021f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a4c      	ldr	r2, [pc, #304]	; (8002344 <HAL_UART_MspInit+0x150>)
 8002212:	4293      	cmp	r3, r2
 8002214:	f040 8092 	bne.w	800233c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_UART_MspInit+0x154>)
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	4a49      	ldr	r2, [pc, #292]	; (8002348 <HAL_UART_MspInit+0x154>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6453      	str	r3, [r2, #68]	; 0x44
 8002228:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_UART_MspInit+0x154>)
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_UART_MspInit+0x154>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	4a42      	ldr	r2, [pc, #264]	; (8002348 <HAL_UART_MspInit+0x154>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6313      	str	r3, [r2, #48]	; 0x30
 8002244:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_UART_MspInit+0x154>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002250:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002262:	2307      	movs	r3, #7
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	4837      	ldr	r0, [pc, #220]	; (800234c <HAL_UART_MspInit+0x158>)
 800226e:	f00d fd99 	bl	800fda4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <HAL_UART_MspInit+0x15c>)
 8002274:	4a37      	ldr	r2, [pc, #220]	; (8002354 <HAL_UART_MspInit+0x160>)
 8002276:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_UART_MspInit+0x15c>)
 800227a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800227e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002280:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_UART_MspInit+0x15c>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002286:	4b32      	ldr	r3, [pc, #200]	; (8002350 <HAL_UART_MspInit+0x15c>)
 8002288:	2200      	movs	r2, #0
 800228a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_UART_MspInit+0x15c>)
 800228e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002292:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002294:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <HAL_UART_MspInit+0x15c>)
 8002296:	2200      	movs	r2, #0
 8002298:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_UART_MspInit+0x15c>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_UART_MspInit+0x15c>)
 80022a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022a8:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_UART_MspInit+0x15c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_UART_MspInit+0x15c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022b4:	4826      	ldr	r0, [pc, #152]	; (8002350 <HAL_UART_MspInit+0x15c>)
 80022b6:	f00d f9e3 	bl	800f680 <HAL_DMA_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80022c0:	f7ff f9ae 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a22      	ldr	r2, [pc, #136]	; (8002350 <HAL_UART_MspInit+0x15c>)
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34
 80022ca:	4a21      	ldr	r2, [pc, #132]	; (8002350 <HAL_UART_MspInit+0x15c>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_UART_MspInit+0x164>)
 80022d2:	4a22      	ldr	r2, [pc, #136]	; (800235c <HAL_UART_MspInit+0x168>)
 80022d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_UART_MspInit+0x164>)
 80022d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022de:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_UART_MspInit+0x164>)
 80022e0:	2240      	movs	r2, #64	; 0x40
 80022e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_UART_MspInit+0x164>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_UART_MspInit+0x164>)
 80022ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_UART_MspInit+0x164>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_UART_MspInit+0x164>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_UART_MspInit+0x164>)
 8002300:	2200      	movs	r2, #0
 8002302:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_UART_MspInit+0x164>)
 8002306:	2200      	movs	r2, #0
 8002308:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_UART_MspInit+0x164>)
 800230c:	2200      	movs	r2, #0
 800230e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002310:	4811      	ldr	r0, [pc, #68]	; (8002358 <HAL_UART_MspInit+0x164>)
 8002312:	f00d f9b5 	bl	800f680 <HAL_DMA_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800231c:	f7ff f980 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <HAL_UART_MspInit+0x164>)
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
 8002326:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <HAL_UART_MspInit+0x164>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2105      	movs	r1, #5
 8002330:	2025      	movs	r0, #37	; 0x25
 8002332:	f00d f96d 	bl	800f610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002336:	2025      	movs	r0, #37	; 0x25
 8002338:	f00d f986 	bl	800f648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800233c:	bf00      	nop
 800233e:	3728      	adds	r7, #40	; 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40011000 	.word	0x40011000
 8002348:	40023800 	.word	0x40023800
 800234c:	40020000 	.word	0x40020000
 8002350:	2000097c 	.word	0x2000097c
 8002354:	40026440 	.word	0x40026440
 8002358:	200009dc 	.word	0x200009dc
 800235c:	400264b8 	.word	0x400264b8

08002360 <CO_getUint32>:
 * Helper function returns uint32 from byte array.
 *
 * @param data Location of source data.
 * @return Variable of type uint32_t.
 */
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
    uint32_t value;
    memcpy(&value, data, sizeof(value));
 800236c:	60fb      	str	r3, [r7, #12]
    return value;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <CO_setUint32>:
 * Helper function writes uint32 to byte array.
 *
 * @param data Location of destination data.
 * @param value Variable of type uint32_t to be written into data.
 */
static inline void CO_setUint32(uint8_t data[], const uint32_t value){
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	683a      	ldr	r2, [r7, #0]
    memcpy(data, &value, sizeof(value));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	601a      	str	r2, [r3, #0]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <CO_EM_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_EM_receive(void *object, void *msg) {
 8002398:	b5b0      	push	{r4, r5, r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af02      	add	r7, sp, #8
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
    CO_EM_t *em;

    em = (CO_EM_t*)object;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	61fb      	str	r3, [r7, #28]

    if(em!=NULL && em->pFunctSignalRx!=NULL){
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d022      	beq.n	80023f2 <CO_EM_receive+0x5a>
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01e      	beq.n	80023f2 <CO_EM_receive+0x5a>
        uint16_t ident = CO_CANrxMsg_readIdent(msg);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	837b      	strh	r3, [r7, #26]
        if (ident != 0x80) {
 80023ba:	8b7b      	ldrh	r3, [r7, #26]
 80023bc:	2b80      	cmp	r3, #128	; 0x80
 80023be:	d018      	beq.n	80023f2 <CO_EM_receive+0x5a>
            /* ignore sync messages (necessary if sync object is not used) */
            uint8_t *data = CO_CANrxMsg_readData(msg);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	3321      	adds	r3, #33	; 0x21
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
            uint16_t errorCode;
            uint32_t infoCode;

            CO_memcpySwap2(&errorCode, &data[0]);
 80023cc:	827b      	strh	r3, [r7, #18]
            CO_memcpySwap4(&infoCode, &data[4]);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3304      	adds	r3, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
            em->pFunctSignalRx(ident,
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 80023da:	8a79      	ldrh	r1, [r7, #18]
                            errorCode,
                            data[2],
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3302      	adds	r3, #2
            em->pFunctSignalRx(ident,
 80023e0:	781a      	ldrb	r2, [r3, #0]
                            data[3],
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3303      	adds	r3, #3
            em->pFunctSignalRx(ident,
 80023e6:	781d      	ldrb	r5, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8b78      	ldrh	r0, [r7, #26]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	462b      	mov	r3, r5
 80023f0:	47a0      	blx	r4
                            infoCode);
        }
    }
}
 80023f2:	bf00      	nop
 80023f4:	3720      	adds	r7, #32
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080023fc <CO_ODF_1003>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    CO_EMpr_t *emPr;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

    emPr = (CO_EMpr_t*) ODF_arg->object;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7ddb      	ldrb	r3, [r3, #23]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <CO_ODF_1003+0x50>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	7a5b      	ldrb	r3, [r3, #9]
 8002422:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7d9b      	ldrb	r3, [r3, #22]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <CO_ODF_1003+0x3a>
            ODF_arg->data[0] = noOfErrors;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	7bba      	ldrb	r2, [r7, #14]
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e01a      	b.n	800246c <CO_ODF_1003+0x70>
        }
        else if(ODF_arg->subIndex > noOfErrors){
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7d9b      	ldrb	r3, [r3, #22]
 800243a:	7bba      	ldrb	r2, [r7, #14]
 800243c:	429a      	cmp	r2, r3
 800243e:	d202      	bcs.n	8002446 <CO_ODF_1003+0x4a>
            ret = CO_SDO_AB_NO_DATA;
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <CO_ODF_1003+0x80>)
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e012      	b.n	800246c <CO_ODF_1003+0x70>
        }
        else{
            ret = CO_SDO_AB_NONE;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	e00f      	b.n	800246c <CO_ODF_1003+0x70>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7d9b      	ldrb	r3, [r3, #22]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <CO_ODF_1003+0x6c>
            if(value == 0U){
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d103      	bne.n	8002462 <CO_ODF_1003+0x66>
                emPr->preDefErrNoOfErrors = 0U;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2200      	movs	r2, #0
 800245e:	725a      	strb	r2, [r3, #9]
 8002460:	e004      	b.n	800246c <CO_ODF_1003+0x70>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <CO_ODF_1003+0x84>)
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	e001      	b.n	800246c <CO_ODF_1003+0x70>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <CO_ODF_1003+0x88>)
 800246a:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
 800246c:	697b      	ldr	r3, [r7, #20]
}
 800246e:	4618      	mov	r0, r3
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	08000024 	.word	0x08000024
 8002480:	06090030 	.word	0x06090030
 8002484:	06010002 	.word	0x06010002

08002488 <CO_ODF_1014>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff5e 	bl	8002360 <CO_getUint32>
 80024a4:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	7ddb      	ldrb	r3, [r3, #23]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <CO_ODF_1014+0x3c>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	440b      	add	r3, r1
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f7ff ff5c 	bl	800237c <CO_setUint32>
    }

    return ret;
 80024c4:	697b      	ldr	r3, [r7, #20]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <CO_EM_init>:
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidTxEM)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af04      	add	r7, sp, #16
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
    uint8_t i;
    CO_ReturnError_t ret = CO_ERROR_NO;
 80024de:	2300      	movs	r3, #0
 80024e0:	75bb      	strb	r3, [r7, #22]

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL || errorStatusBitsSize<6U ||
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d018      	beq.n	800251a <CO_EM_init+0x4a>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d015      	beq.n	800251a <CO_EM_init+0x4a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d012      	beq.n	800251a <CO_EM_init+0x4a>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00f      	beq.n	800251a <CO_EM_init+0x4a>
 80024fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d90b      	bls.n	800251a <CO_EM_init+0x4a>
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <CO_EM_init+0x4a>
       errorRegister==NULL || preDefErr==NULL || CANdevTx==NULL
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <CO_EM_init+0x4a>
 800250e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <CO_EM_init+0x4a>
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx==NULL
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <CO_EM_init+0x50>
#endif
    ){
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	e08d      	b.n	800263c <CO_EM_init+0x16c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f897 2020 	ldrb.w	r2, [r7, #32]
 800252c:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3305      	adds	r3, #5
 8002532:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1d5a      	adds	r2, r3, #5
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1d5a      	adds	r2, r3, #5
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
#if (CO_CONFIG_EM) & CO_CONFIG_FLAG_CALLBACK_PRE
    em->pFunctSignalPre         = NULL;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	669a      	str	r2, [r3, #104]	; 0x68
    em->functSignalObjectPre    = NULL;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
    em->pFunctSignalRx          = NULL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	671a      	str	r2, [r3, #112]	; 0x70
#endif
    emPr->em                    = em;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002576:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800257c:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002584:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2200      	movs	r2, #0
 800258a:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]

    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
 8002596:	e008      	b.n	80025aa <CO_EM_init+0xda>
        em->errorStatusBits[i] = 0U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	4413      	add	r3, r2
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	3301      	adds	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
 80025aa:	7dfa      	ldrb	r2, [r7, #23]
 80025ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d3f1      	bcc.n	8002598 <CO_EM_init+0xc8>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure(SDO, OD_H1003_PREDEF_ERR_FIELD, CO_ODF_1003, (void*)emPr, 0, 0U);
 80025b4:	2300      	movs	r3, #0
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	2300      	movs	r3, #0
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4a21      	ldr	r2, [pc, #132]	; (8002644 <CO_EM_init+0x174>)
 80025c0:	f241 0103 	movw	r1, #4099	; 0x1003
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f002 fddd 	bl	8005184 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1014_COBID_EMERGENCY, CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 80025d0:	2200      	movs	r2, #0
 80025d2:	9201      	str	r2, [sp, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	9200      	str	r2, [sp, #0]
 80025d8:	4a1b      	ldr	r2, [pc, #108]	; (8002648 <CO_EM_init+0x178>)
 80025da:	f241 0114 	movw	r1, #4116	; 0x1014
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f002 fdd0 	bl	8005184 <CO_OD_configure>

#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(
 80025e4:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <CO_EM_init+0x17c>)
 80025e8:	9302      	str	r3, [sp, #8]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2300      	movs	r3, #0
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025fa:	f006 fd85 	bl	8009108 <CO_CANrxBufferInit>
 80025fe:	4603      	mov	r3, r0
 8002600:	75bb      	strb	r3, [r7, #22]
            (void*)em,              /* object passed to receive function */
            CO_EM_receive);         /* this function will process received message */
#endif

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdevTx;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002606:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	61da      	str	r2, [r3, #28]
    emPr->CANtxBuff = CO_CANtxBufferInit(
 8002610:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002614:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8002616:	2300      	movs	r3, #0
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	2308      	movs	r3, #8
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2300      	movs	r3, #0
 8002620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002622:	f006 fdc7 	bl	80091b4 <CO_CANtxBufferInit>
 8002626:	4602      	mov	r2, r0
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (emPr->CANtxBuff == NULL) {
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <CO_EM_init+0x168>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8002634:	23ff      	movs	r3, #255	; 0xff
 8002636:	75bb      	strb	r3, [r7, #22]
    }

    return ret;
 8002638:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	080023fd 	.word	0x080023fd
 8002648:	08002489 	.word	0x08002489
 800264c:	08002399 	.word	0x08002399

08002650 <CO_EM_process>:
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint16_t                emInhTime_100us,
        uint32_t               *timerNext_us)
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b08f      	sub	sp, #60	; 0x3c
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	461a      	mov	r2, r3
 800265c:	460b      	mov	r3, r1
 800265e:	72fb      	strb	r3, [r7, #11]
 8002660:	4613      	mov	r3, r2
 8002662:	813b      	strh	r3, [r7, #8]

    CO_EM_t *em = emPr->em;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorRegister;
    uint8_t errorMask;
    uint8_t i;
    uint32_t emInhTime_us = (uint32_t)emInhTime_100us * 100;
 800266a:	893b      	ldrh	r3, [r7, #8]
 800266c:	2264      	movs	r2, #100	; 0x64
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	627b      	str	r3, [r7, #36]	; 0x24

    /* verify errors from driver and other */
    CO_CANverifyErrors(emPr->CANdev);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	4618      	mov	r0, r3
 800267a:	f006 fef5 	bl	8009468 <CO_CANverifyErrors>
    if(em->wrongErrorReport != 0U){
 800267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002680:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <CO_EM_process+0x52>
        CO_errorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800268e:	f44f 42c2 	mov.w	r2, #24832	; 0x6100
 8002692:	2128      	movs	r1, #40	; 0x28
 8002694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002696:	f000 f92c 	bl	80028f2 <CO_errorReport>
        em->wrongErrorReport = 0U;
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    errorMask = (uint8_t)~(CO_ERR_REG_GENERIC_ERR | CO_ERR_REG_COMM_ERR | CO_ERR_REG_MANUFACTURER);
 80026a8:	236e      	movs	r3, #110	; 0x6e
 80026aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /* generic error */
    if(em->errorStatusBits[5]){
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3305      	adds	r3, #5
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <CO_EM_process+0x76>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 80026ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3302      	adds	r3, #2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <CO_EM_process+0x8e>
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3303      	adds	r3, #3
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <CO_EM_process+0x9a>
        errorRegister |= CO_ERR_REG_COMM_ERR;
 80026de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026e2:	f043 0310 	orr.w	r3, r3, #16
 80026e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    /* Manufacturer */
    for(i=6; i<em->errorStatusBitsSize; i++) {
 80026ea:	2306      	movs	r3, #6
 80026ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80026f0:	e012      	b.n	8002718 <CO_EM_process+0xc8>
        if (em->errorStatusBits[i]) {
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026fa:	4413      	add	r3, r2
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <CO_EM_process+0xbe>
            errorRegister |= CO_ERR_REG_MANUFACTURER;
 8002702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002706:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800270a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for(i=6; i<em->errorStatusBitsSize; i++) {
 800270e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002712:	3301      	adds	r3, #1
 8002714:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	791b      	ldrb	r3, [r3, #4]
 800271c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002720:	429a      	cmp	r2, r3
 8002722:	d3e6      	bcc.n	80026f2 <CO_EM_process+0xa2>
        }
    }
    *emPr->errorRegister = (*emPr->errorRegister & errorMask) | errorRegister;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800272e:	4013      	ands	r3, r2
 8002730:	b2d9      	uxtb	r1, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800273a:	430a      	orrs	r2, r1
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if (emPr->inhibitEmTimer < emInhTime_us) {
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	429a      	cmp	r2, r3
 8002748:	d905      	bls.n	8002756 <CO_EM_process+0x106>
        emPr->inhibitEmTimer += timeDifference_us;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	441a      	add	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	60da      	str	r2, [r3, #12]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
 8002756:	7afb      	ldrb	r3, [r7, #11]
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80c6 	beq.w	80028ea <CO_EM_process+0x29a>
            !emPr->CANtxBuff->bufferFull &&
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	7b5b      	ldrb	r3, [r3, #13]
 8002764:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 80bf 	bne.w	80028ea <CO_EM_process+0x29a>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            !emPr->CANtxBuff->bufferFull &&
 8002774:	429a      	cmp	r2, r3
 8002776:	d105      	bne.n	8002784 <CO_EM_process+0x134>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80b3 	beq.w	80028ea <CO_EM_process+0x29a>
    {
        uint32_t preDEF;    /* preDefinedErrorField */

        if (emPr->inhibitEmTimer >= emInhTime_us) {
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	429a      	cmp	r2, r3
 800278c:	f200 809c 	bhi.w	80028c8 <CO_EM_process+0x278>
            /* inhibit time elapsed, send message */

            /* add error register */
            em->bufReadPtr[2] = *emPr->errorRegister;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	3302      	adds	r3, #2
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
            /* report also own emergency messages */
            if (em->pFunctSignalRx != NULL) {
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d019      	beq.n	80027da <CO_EM_process+0x18a>
                uint16_t errorCode;
                uint32_t infoCode;
                CO_memcpySwap2(&errorCode, &em->bufReadPtr[0]);
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	82fb      	strh	r3, [r7, #22]
                CO_memcpySwap4(&infoCode, &em->bufReadPtr[4]);
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b4:	3304      	adds	r3, #4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	613b      	str	r3, [r7, #16]
                em->pFunctSignalRx(0,
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 80027be:	8af9      	ldrh	r1, [r7, #22]
                                   errorCode,
                                   em->bufReadPtr[2],
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c4:	3302      	adds	r3, #2
                em->pFunctSignalRx(0,
 80027c6:	781a      	ldrb	r2, [r3, #0]
                                   em->bufReadPtr[3],
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	3303      	adds	r3, #3
                em->pFunctSignalRx(0,
 80027ce:	7818      	ldrb	r0, [r3, #0]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4603      	mov	r3, r0
 80027d6:	2000      	movs	r0, #0
 80027d8:	47a0      	blx	r4
                                   infoCode);
            }
#endif

            /* copy data to CAN emergency message */
            memcpy(emPr->CANtxBuff->data, em->bufReadPtr, sizeof(emPr->CANtxBuff->data));
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	1d58      	adds	r0, r3, #5
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e4:	2208      	movs	r2, #8
 80027e6:	4619      	mov	r1, r3
 80027e8:	f014 fb6a 	bl	8016ec0 <memcpy>
            memcpy(&preDEF, em->bufReadPtr, sizeof(preDEF));
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	61bb      	str	r3, [r7, #24]
            em->bufReadPtr += 8;
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f8:	f103 0208 	add.w	r2, r3, #8
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update read buffer pointer and reset inhibit timer */
            if(em->bufReadPtr == em->bufEnd){
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	429a      	cmp	r2, r3
 800280a:	d103      	bne.n	8002814 <CO_EM_process+0x1c4>
                em->bufReadPtr = em->buf;
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	1d5a      	adds	r2, r3, #5
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	661a      	str	r2, [r3, #96]	; 0x60
            }
            emPr->inhibitEmTimer = 0U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]

            /* verify message buffer overflow, then clear full flag */
            if(em->bufFull == 2U){
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002820:	2b02      	cmp	r3, #2
 8002822:	d10b      	bne.n	800283c <CO_EM_process+0x1ec>
                em->bufFull = 0U;    /* will be updated below */
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
 800282c:	2300      	movs	r3, #0
 800282e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002832:	2120      	movs	r1, #32
 8002834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002836:	f000 f85c 	bl	80028f2 <CO_errorReport>
 800283a:	e008      	b.n	800284e <CO_EM_process+0x1fe>
            }
            else{
                em->bufFull = 0;
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2120      	movs	r1, #32
 8002848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800284a:	f000 f8d8 	bl	80029fe <CO_errorReset>
            }

            /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
            if(emPr->preDefErr){
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d02f      	beq.n	80028b6 <CO_EM_process+0x266>
                uint8_t j;

                if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	7a5a      	ldrb	r2, [r3, #9]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	7a1b      	ldrb	r3, [r3, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	d205      	bcs.n	800286e <CO_EM_process+0x21e>
                    emPr->preDefErrNoOfErrors++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	7a5b      	ldrb	r3, [r3, #9]
 8002866:	3301      	adds	r3, #1
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	725a      	strb	r2, [r3, #9]
                for(j=emPr->preDefErrNoOfErrors-1; j>0; j--)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	7a5b      	ldrb	r3, [r3, #9]
 8002872:	3b01      	subs	r3, #1
 8002874:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002878:	e015      	b.n	80028a6 <CO_EM_process+0x256>
                    emPr->preDefErr[j] = emPr->preDefErr[j-1];
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002882:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002886:	3b01      	subs	r3, #1
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	441a      	add	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	601a      	str	r2, [r3, #0]
                for(j=emPr->preDefErrNoOfErrors-1; j>0; j--)
 800289c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028a0:	3b01      	subs	r3, #1
 80028a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80028a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1e5      	bne.n	800287a <CO_EM_process+0x22a>
                emPr->preDefErr[0] = preDEF;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	601a      	str	r2, [r3, #0]
            }

            /* send CAN message */
            CO_CANsend(emPr->CANdev, emPr->CANtxBuff);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f006 fcb7 	bl	8009234 <CO_CANsend>
            }
        }
#endif
    }

    return;
 80028c6:	e010      	b.n	80028ea <CO_EM_process+0x29a>
        else if (timerNext_us != NULL) {
 80028c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <CO_EM_process+0x29a>
            diff = emInhTime_us - emPr->inhibitEmTimer;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	61fb      	str	r3, [r7, #28]
            if (*timerNext_us > diff) {
 80028d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d203      	bcs.n	80028ea <CO_EM_process+0x29a>
                *timerNext_us = diff;
 80028e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	601a      	str	r2, [r3, #0]
    return;
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
}
 80028ec:	3734      	adds	r7, #52	; 0x34
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd90      	pop	{r4, r7, pc}

080028f2 <CO_errorReport>:


/******************************************************************************/
void CO_errorReport(CO_EM_t *em, const uint8_t errorBit, const uint16_t errorCode, const uint32_t infoCode){
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b088      	sub	sp, #32
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	72fb      	strb	r3, [r7, #11]
 8002900:	4613      	mov	r3, r2
 8002902:	813b      	strh	r3, [r7, #8]
    uint8_t index = errorBit >> 3;
 8002904:	7afb      	ldrb	r3, [r7, #11]
 8002906:	08db      	lsrs	r3, r3, #3
 8002908:	76bb      	strb	r3, [r7, #26]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800290a:	7afb      	ldrb	r3, [r7, #11]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	2201      	movs	r2, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	767b      	strb	r3, [r7, #25]
    uint8_t *errorStatusBits = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
    bool_t sendEmergency = true;
 800291c:	2301      	movs	r3, #1
 800291e:	76fb      	strb	r3, [r7, #27]

    if(em == NULL){
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <CO_errorReport+0x3a>
        sendEmergency = false;
 8002926:	2300      	movs	r3, #0
 8002928:	76fb      	strb	r3, [r7, #27]
 800292a:	e019      	b.n	8002960 <CO_errorReport+0x6e>
    }
    else if(index >= em->errorStatusBitsSize){
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	791b      	ldrb	r3, [r3, #4]
 8002930:	7eba      	ldrb	r2, [r7, #26]
 8002932:	429a      	cmp	r2, r3
 8002934:	d306      	bcc.n	8002944 <CO_errorReport+0x52>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	7afa      	ldrb	r2, [r7, #11]
 800293a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 800293e:	2300      	movs	r3, #0
 8002940:	76fb      	strb	r3, [r7, #27]
 8002942:	e00d      	b.n	8002960 <CO_errorReport+0x6e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	7ebb      	ldrb	r3, [r7, #26]
 800294a:	4413      	add	r3, r2
 800294c:	61fb      	str	r3, [r7, #28]
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	7e7b      	ldrb	r3, [r7, #25]
 8002954:	4013      	ands	r3, r2
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <CO_errorReport+0x6e>
            sendEmergency = false;
 800295c:	2300      	movs	r3, #0
 800295e:	76fb      	strb	r3, [r7, #27]
        }
    }

    if(sendEmergency){
 8002960:	7efb      	ldrb	r3, [r7, #27]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d047      	beq.n	80029f6 <CO_errorReport+0x104>
        /* set error bit */
        if(errorBit){
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <CO_errorReport+0x88>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	781a      	ldrb	r2, [r3, #0]
 8002970:	7e7b      	ldrb	r3, [r7, #25]
 8002972:	4313      	orrs	r3, r2
 8002974:	b2da      	uxtb	r2, r3
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002980:	2b00      	cmp	r3, #0
 8002982:	d004      	beq.n	800298e <CO_errorReport+0x9c>
            em->bufFull = 2;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                em->pFunctSignalPre(em->functSignalObjectPre);
            }
#endif
        }
    }
}
 800298c:	e033      	b.n	80029f6 <CO_errorReport+0x104>
 800298e:	893b      	ldrh	r3, [r7, #8]
            CO_memcpySwap2(&bufCopy[0], &errorCode);
 8002990:	823b      	strh	r3, [r7, #16]
            bufCopy[2] = 0; /* error register will be set later */
 8002992:	2300      	movs	r3, #0
 8002994:	74bb      	strb	r3, [r7, #18]
            bufCopy[3] = errorBit;
 8002996:	7afb      	ldrb	r3, [r7, #11]
 8002998:	74fb      	strb	r3, [r7, #19]
 800299a:	687b      	ldr	r3, [r7, #4]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 800299c:	617b      	str	r3, [r7, #20]
            memcpy(em->bufWritePtr, bufCopy, sizeof(bufCopy));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	461a      	mov	r2, r3
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	cb03      	ldmia	r3!, {r0, r1}
 80029aa:	6010      	str	r0, [r2, #0]
 80029ac:	6051      	str	r1, [r2, #4]
            em->bufWritePtr += 8;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b2:	f103 0208 	add.w	r2, r3, #8
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d103      	bne.n	80029ce <CO_errorReport+0xdc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1d5a      	adds	r2, r3, #5
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d103      	bne.n	80029e2 <CO_errorReport+0xf0>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignalPre != NULL) {
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <CO_errorReport+0x104>
                em->pFunctSignalPre(em->functSignalObjectPre);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80029f2:	4610      	mov	r0, r2
 80029f4:	4798      	blx	r3
}
 80029f6:	bf00      	nop
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <CO_errorReset>:


/******************************************************************************/
void CO_errorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b088      	sub	sp, #32
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	460b      	mov	r3, r1
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	72fb      	strb	r3, [r7, #11]
    uint8_t index = errorBit >> 3;
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
 8002a0e:	08db      	lsrs	r3, r3, #3
 8002a10:	76bb      	strb	r3, [r7, #26]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8002a12:	7afb      	ldrb	r3, [r7, #11]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	2201      	movs	r2, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	767b      	strb	r3, [r7, #25]
    uint8_t *errorStatusBits = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
    bool_t sendEmergency = true;
 8002a24:	2301      	movs	r3, #1
 8002a26:	76fb      	strb	r3, [r7, #27]

    if(em == NULL){
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <CO_errorReset+0x36>
        sendEmergency = false;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	76fb      	strb	r3, [r7, #27]
 8002a32:	e019      	b.n	8002a68 <CO_errorReset+0x6a>
    }
    else if(index >= em->errorStatusBitsSize){
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	7eba      	ldrb	r2, [r7, #26]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d306      	bcc.n	8002a4c <CO_errorReset+0x4e>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	7afa      	ldrb	r2, [r7, #11]
 8002a42:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 8002a46:	2300      	movs	r3, #0
 8002a48:	76fb      	strb	r3, [r7, #27]
 8002a4a:	e00d      	b.n	8002a68 <CO_errorReset+0x6a>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	7ebb      	ldrb	r3, [r7, #26]
 8002a52:	4413      	add	r3, r2
 8002a54:	61fb      	str	r3, [r7, #28]
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	7e7b      	ldrb	r3, [r7, #25]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <CO_errorReset+0x6a>
            sendEmergency = false;
 8002a64:	2300      	movs	r3, #0
 8002a66:	76fb      	strb	r3, [r7, #27]
        }
    }

    if(sendEmergency){
 8002a68:	7efb      	ldrb	r3, [r7, #27]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d04b      	beq.n	8002b06 <CO_errorReset+0x108>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b25a      	sxtb	r2, r3
 8002a74:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	b25b      	sxtb	r3, r3
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	b25b      	sxtb	r3, r3
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <CO_errorReset+0x9c>
            em->bufFull = 2;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                em->pFunctSignalPre(em->functSignalObjectPre);
            }
#endif
        }
    }
}
 8002a98:	e035      	b.n	8002b06 <CO_errorReset+0x108>
            bufCopy[0] = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	743b      	strb	r3, [r7, #16]
            bufCopy[1] = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	747b      	strb	r3, [r7, #17]
            bufCopy[2] = 0; /* error register will be set later */
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	74bb      	strb	r3, [r7, #18]
            bufCopy[3] = errorBit;
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	74fb      	strb	r3, [r7, #19]
 8002aaa:	687b      	ldr	r3, [r7, #4]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 8002aac:	617b      	str	r3, [r7, #20]
            memcpy(em->bufWritePtr, bufCopy, sizeof(bufCopy));
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	cb03      	ldmia	r3!, {r0, r1}
 8002aba:	6010      	str	r0, [r2, #0]
 8002abc:	6051      	str	r1, [r2, #4]
            em->bufWritePtr += 8;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	f103 0208 	add.w	r2, r3, #8
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d103      	bne.n	8002ade <CO_errorReset+0xe0>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1d5a      	adds	r2, r3, #5
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d103      	bne.n	8002af2 <CO_errorReset+0xf4>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignalPre != NULL) {
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <CO_errorReset+0x108>
                em->pFunctSignalPre(em->functSignalObjectPre);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002b02:	4610      	mov	r0, r2
 8002b04:	4798      	blx	r3
}
 8002b06:	bf00      	nop
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <CO_isError>:


/******************************************************************************/
bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit){
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	08db      	lsrs	r3, r3, #3
 8002b1e:	73bb      	strb	r3, [r7, #14]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	2201      	movs	r2, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	737b      	strb	r3, [r7, #13]
    bool_t ret = false;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]

    if(em != NULL && index < em->errorStatusBitsSize){
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d010      	beq.n	8002b5a <CO_isError+0x4c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	791b      	ldrb	r3, [r3, #4]
 8002b3c:	7bba      	ldrb	r2, [r7, #14]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d20b      	bcs.n	8002b5a <CO_isError+0x4c>
        if((em->errorStatusBits[index] & bitmask) != 0){
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	7bbb      	ldrb	r3, [r7, #14]
 8002b48:	4413      	add	r3, r2
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	7b7b      	ldrb	r3, [r7, #13]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <CO_isError+0x4c>
            ret = true;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8002b74:	60fb      	str	r3, [r7, #12]
    return value;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b94:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	3321      	adds	r3, #33	; 0x21
 8002b9a:	613b      	str	r3, [r7, #16]

    HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	60fb      	str	r3, [r7, #12]

    /* verify message length */
    if(DLC == 1){
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <CO_HBcons_receive+0x32>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	b25a      	sxtb	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	60da      	str	r2, [r3, #12]
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_CALLBACK_PRE
    /* Optional signal to RTOS, which can resume task, which handles HBcons. */
    if(HBconsNode->pFunctSignalPre != NULL) {
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <CO_HBcons_receive+0x46>
        HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	6952      	ldr	r2, [r2, #20]
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4798      	blx	r3
    }
#endif
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <CO_ODF_1016>:
 * OD function for accessing _Consumer Heartbeat Time_ (index 0x1016) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
    uint8_t NodeID;
    uint16_t HBconsTime;
    uint32_t value;
    CO_ReturnError_t ret;

    if(ODF_arg->reading){
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7ddb      	ldrb	r3, [r3, #23]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <CO_ODF_1016+0x14>
        return CO_SDO_AB_NONE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e026      	b.n	8002c36 <CO_ODF_1016+0x62>
    }

    HBcons = (CO_HBconsumer_t*) ODF_arg->object;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	617b      	str	r3, [r7, #20]
    value = CO_getUint32(ODF_arg->data);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ffb8 	bl	8002b68 <CO_getUint32>
 8002bf8:	6138      	str	r0, [r7, #16]
    NodeID = (value >> 16U) & 0xFFU;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	73fb      	strb	r3, [r7, #15]
    HBconsTime = value & 0xFFFFU;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	81bb      	strh	r3, [r7, #12]

    if((value & 0xFF800000U) != 0){
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	0ddb      	lsrs	r3, r3, #23
 8002c08:	05db      	lsls	r3, r3, #23
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <CO_ODF_1016+0x3e>
        return CO_SDO_AB_PRAM_INCOMPAT;
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <CO_ODF_1016+0x6c>)
 8002c10:	e011      	b.n	8002c36 <CO_ODF_1016+0x62>
    }

    ret = CO_HBconsumer_initEntry(HBcons, ODF_arg->subIndex-1U, NodeID, HBconsTime);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7d9b      	ldrb	r3, [r3, #22]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b2d9      	uxtb	r1, r3
 8002c1a:	89bb      	ldrh	r3, [r7, #12]
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f000 f8a6 	bl	8002d70 <CO_HBconsumer_initEntry>
 8002c24:	4603      	mov	r3, r0
 8002c26:	72fb      	strb	r3, [r7, #11]
    if (ret != CO_ERROR_NO) {
 8002c28:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <CO_ODF_1016+0x60>
        return CO_SDO_AB_PRAM_INCOMPAT;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <CO_ODF_1016+0x6c>)
 8002c32:	e000      	b.n	8002c36 <CO_ODF_1016+0x62>
    }
    return CO_SDO_AB_NONE;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	06040043 	.word	0x06040043

08002c44 <CO_HBconsumer_init>:
        const uint32_t          HBconsTime[],
        CO_HBconsNode_t         monitoredNodes[],
        uint8_t                 numberOfMonitoredNodes,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdxStart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
    uint8_t i;
    CO_ReturnError_t ret = CO_ERROR_NO;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75bb      	strb	r3, [r7, #22]

    /* verify arguments */
    if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <CO_HBconsumer_init+0x36>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <CO_HBconsumer_init+0x36>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <CO_HBconsumer_init+0x36>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <CO_HBconsumer_init+0x36>
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <CO_HBconsumer_init+0x36>
        monitoredNodes==NULL || CANdevRx==NULL){
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <CO_HBconsumer_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	e071      	b.n	8002d64 <CO_HBconsumer_init+0x120>
    }

    /* Configure object variables */
    HBcons->em = em;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	601a      	str	r2, [r3, #0]
    HBcons->HBconsTime = HBconsTime;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
    HBcons->monitoredNodes = monitoredNodes;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a3a      	ldr	r2, [r7, #32]
 8002c90:	609a      	str	r2, [r3, #8]
    HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002c98:	731a      	strb	r2, [r3, #12]
    HBcons->allMonitoredActive = false;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	735a      	strb	r2, [r3, #13]
    HBcons->allMonitoredOperational = CO_NMT_UNKNOWN;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	22ff      	movs	r2, #255	; 0xff
 8002ca4:	739a      	strb	r2, [r3, #14]
    HBcons->NMTisPreOrOperationalPrev = false;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	73da      	strb	r2, [r3, #15]
    HBcons->CANdevRx = CANdevRx;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb0:	611a      	str	r2, [r3, #16]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002cb6:	829a      	strh	r2, [r3, #20]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
    HBcons->pFunctSignalNmtChanged = NULL;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
#endif

    for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]
 8002cc2:	e03d      	b.n	8002d40 <CO_HBconsumer_init+0xfc>
        uint8_t nodeId = (HBcons->HBconsTime[i] >> 16U) & 0xFFU;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	757b      	strb	r3, [r7, #21]
        uint16_t time = HBcons->HBconsTime[i] & 0xFFFFU;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	827b      	strh	r3, [r7, #18]
        ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8002ce2:	8a7b      	ldrh	r3, [r7, #18]
 8002ce4:	7d7a      	ldrb	r2, [r7, #21]
 8002ce6:	7df9      	ldrb	r1, [r7, #23]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f841 	bl	8002d70 <CO_HBconsumer_initEntry>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75bb      	strb	r3, [r7, #22]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_CALLBACK_PRE
            HBcons->monitoredNodes[i].pFunctSignalPre = NULL;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	2134      	movs	r1, #52	; 0x34
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
#endif
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            HBcons->monitoredNodes[i].pFunctSignalHbStarted = NULL;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2134      	movs	r1, #52	; 0x34
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
            HBcons->monitoredNodes[i].pFunctSignalTimeout = NULL;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2134      	movs	r1, #52	; 0x34
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	2200      	movs	r2, #0
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24
            HBcons->monitoredNodes[i].pFunctSignalRemoteReset = NULL;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2134      	movs	r1, #52	; 0x34
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	2200      	movs	r2, #0
 8002d38:	62da      	str	r2, [r3, #44]	; 0x2c
    for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	75fb      	strb	r3, [r7, #23]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	7b1b      	ldrb	r3, [r3, #12]
 8002d44:	7dfa      	ldrb	r2, [r7, #23]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d3bc      	bcc.n	8002cc4 <CO_HBconsumer_init+0x80>
#endif
    }

    /* Configure Object dictionary entry at index 0x1016 */
    CO_OD_configure(SDO, OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <CO_HBconsumer_init+0x128>)
 8002d56:	f241 0116 	movw	r1, #4118	; 0x1016
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f002 fa12 	bl	8005184 <CO_OD_configure>

    return ret;
 8002d60:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	08002bd5 	.word	0x08002bd5

08002d70 <CO_HBconsumer_initEntry>:
CO_ReturnError_t CO_HBconsumer_initEntry(
        CO_HBconsumer_t        *HBcons,
        uint8_t                 idx,
        uint8_t                 nodeId,
        uint16_t                consumerTime_ms)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b08b      	sub	sp, #44	; 0x2c
 8002d74:	af04      	add	r7, sp, #16
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	70fb      	strb	r3, [r7, #3]
 8002d82:	460b      	mov	r3, r1
 8002d84:	70bb      	strb	r3, [r7, #2]
 8002d86:	4613      	mov	r3, r2
 8002d88:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <CO_HBconsumer_initEntry+0x2e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7b1b      	ldrb	r3, [r3, #12]
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002da2:	e084      	b.n	8002eae <CO_HBconsumer_initEntry+0x13e>
    }

    if((consumerTime_ms != 0) && (nodeId != 0)){
 8002da4:	883b      	ldrh	r3, [r7, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d026      	beq.n	8002df8 <CO_HBconsumer_initEntry+0x88>
 8002daa:	78bb      	ldrb	r3, [r7, #2]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d023      	beq.n	8002df8 <CO_HBconsumer_initEntry+0x88>
        uint8_t i;
        /* there must not be more entries with same index and time different than zero */
        for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 8002db0:	2300      	movs	r3, #0
 8002db2:	75bb      	strb	r3, [r7, #22]
 8002db4:	e01b      	b.n	8002dee <CO_HBconsumer_initEntry+0x7e>
            uint32_t objectCopy = HBcons->HBconsTime[i];
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	7dbb      	ldrb	r3, [r7, #22]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	613b      	str	r3, [r7, #16]
            uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	73fb      	strb	r3, [r7, #15]
            uint16_t HBconsTimeObj = objectCopy & 0xFFFFU;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	81bb      	strh	r3, [r7, #12]
            if((idx != i) && (HBconsTimeObj != 0) && (nodeId == NodeIDObj)){
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	7dbb      	ldrb	r3, [r7, #22]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d008      	beq.n	8002de8 <CO_HBconsumer_initEntry+0x78>
 8002dd6:	89bb      	ldrh	r3, [r7, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <CO_HBconsumer_initEntry+0x78>
 8002ddc:	78ba      	ldrb	r2, [r7, #2]
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d101      	bne.n	8002de8 <CO_HBconsumer_initEntry+0x78>
                ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8002de4:	23ff      	movs	r3, #255	; 0xff
 8002de6:	75fb      	strb	r3, [r7, #23]
        for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 8002de8:	7dbb      	ldrb	r3, [r7, #22]
 8002dea:	3301      	adds	r3, #1
 8002dec:	75bb      	strb	r3, [r7, #22]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7b1b      	ldrb	r3, [r3, #12]
 8002df2:	7dba      	ldrb	r2, [r7, #22]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d3de      	bcc.n	8002db6 <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8002df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d154      	bne.n	8002eaa <CO_HBconsumer_initEntry+0x13a>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	2134      	movs	r1, #52	; 0x34
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
        monitoredNode->nodeId = nodeId;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	78ba      	ldrb	r2, [r7, #2]
 8002e14:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8002e16:	883b      	ldrh	r3, [r7, #0]
 8002e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e1c:	fb02 f303 	mul.w	r3, r2, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	22ff      	movs	r2, #255	; 0xff
 8002e2a:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	22ff      	movs	r2, #255	; 0xff
 8002e30:	761a      	strb	r2, [r3, #24]
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId && monitoredNode->time_us) {
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00d      	beq.n	8002e5c <CO_HBconsumer_initEntry+0xec>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d009      	beq.n	8002e5c <CO_HBconsumer_initEntry+0xec>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8002e52:	82bb      	strh	r3, [r7, #20]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2201      	movs	r2, #1
 8002e58:	709a      	strb	r2, [r3, #2]
 8002e5a:	e007      	b.n	8002e6c <CO_HBconsumer_initEntry+0xfc>
        }
        else {
            COB_ID = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	82bb      	strh	r3, [r7, #20]
            monitoredNode->time_us = 0;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer CAN reception */
        if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	789b      	ldrb	r3, [r3, #2]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01a      	beq.n	8002eaa <CO_HBconsumer_initEntry+0x13a>
            ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6918      	ldr	r0, [r3, #16]
                                     HBcons->CANdevRxIdxStart + idx,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8a9a      	ldrh	r2, [r3, #20]
            ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	b299      	uxth	r1, r3
                                     COB_ID,
                                     0x7FF,
                                     0,
                                     (void*)&HBcons->monitoredNodes[idx],
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	2434      	movs	r4, #52	; 0x34
 8002e8c:	fb04 f303 	mul.w	r3, r4, r3
 8002e90:	4413      	add	r3, r2
            ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8002e92:	8aba      	ldrh	r2, [r7, #20]
 8002e94:	4c08      	ldr	r4, [pc, #32]	; (8002eb8 <CO_HBconsumer_initEntry+0x148>)
 8002e96:	9402      	str	r4, [sp, #8]
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002ea2:	f006 f931 	bl	8009108 <CO_CANrxBufferInit>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	75fb      	strb	r3, [r7, #23]
                                     CO_HBcons_receive);
        }
    }
    return ret;
 8002eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	371c      	adds	r7, #28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd90      	pop	{r4, r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	08002b85 	.word	0x08002b85

08002ebc <CO_HBconsumer_initCallbackHeartbeatStarted>:
void CO_HBconsumer_initCallbackHeartbeatStarted(
    CO_HBconsumer_t        *HBcons,
    uint8_t                 idx,
    void                   *object,
    void                  (*pFunctSignal)(uint8_t nodeId, uint8_t idx, void *object))
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	72fb      	strb	r3, [r7, #11]
    CO_HBconsNode_t *monitoredNode;

    if (HBcons==NULL || idx>=HBcons->numberOfMonitoredNodes) {
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d013      	beq.n	8002efa <CO_HBconsumer_initCallbackHeartbeatStarted+0x3e>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	7b1b      	ldrb	r3, [r3, #12]
 8002ed6:	7afa      	ldrb	r2, [r7, #11]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d20e      	bcs.n	8002efa <CO_HBconsumer_initCallbackHeartbeatStarted+0x3e>
        return;
    }

    monitoredNode = &HBcons->monitoredNodes[idx];
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	7afb      	ldrb	r3, [r7, #11]
 8002ee2:	2134      	movs	r1, #52	; 0x34
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
    monitoredNode->pFunctSignalHbStarted = pFunctSignal;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	61da      	str	r2, [r3, #28]
    monitoredNode->functSignalObjectHbStarted = object;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	621a      	str	r2, [r3, #32]
 8002ef8:	e000      	b.n	8002efc <CO_HBconsumer_initCallbackHeartbeatStarted+0x40>
        return;
 8002efa:	bf00      	nop
}
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <CO_HBconsumer_initCallbackTimeout>:
void CO_HBconsumer_initCallbackTimeout(
    CO_HBconsumer_t        *HBcons,
    uint8_t                 idx,
    void                   *object,
    void                  (*pFunctSignal)(uint8_t nodeId, uint8_t idx, void *object))
{
 8002f06:	b480      	push	{r7}
 8002f08:	b087      	sub	sp, #28
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	460b      	mov	r3, r1
 8002f14:	72fb      	strb	r3, [r7, #11]
    CO_HBconsNode_t *monitoredNode;

    if (HBcons==NULL || idx>=HBcons->numberOfMonitoredNodes) {
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <CO_HBconsumer_initCallbackTimeout+0x3e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	7b1b      	ldrb	r3, [r3, #12]
 8002f20:	7afa      	ldrb	r2, [r7, #11]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d20e      	bcs.n	8002f44 <CO_HBconsumer_initCallbackTimeout+0x3e>
        return;
    }

    monitoredNode = &HBcons->monitoredNodes[idx];
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	7afb      	ldrb	r3, [r7, #11]
 8002f2c:	2134      	movs	r1, #52	; 0x34
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
    monitoredNode->pFunctSignalTimeout = pFunctSignal;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24
    monitoredNode->functSignalObjectTimeout = object;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
 8002f42:	e000      	b.n	8002f46 <CO_HBconsumer_initCallbackTimeout+0x40>
        return;
 8002f44:	bf00      	nop
}
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	72fb      	strb	r3, [r7, #11]
    uint8_t i;
    bool_t allMonitoredActiveCurrent = true;
 8002f60:	2301      	movs	r3, #1
 8002f62:	77bb      	strb	r3, [r7, #30]
    uint8_t allMonitoredOperationalCurrent = CO_NMT_OPERATIONAL;
 8002f64:	2305      	movs	r3, #5
 8002f66:	777b      	strb	r3, [r7, #29]
    CO_HBconsNode_t *monitoredNode = &HBcons->monitoredNodes[0];
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	61bb      	str	r3, [r7, #24]

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80ba 	beq.w	80030ea <CO_HBconsumer_process+0x19a>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	7bdb      	ldrb	r3, [r3, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80b5 	beq.w	80030ea <CO_HBconsumer_process+0x19a>
        for (i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8002f80:	2300      	movs	r3, #0
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e0aa      	b.n	80030dc <CO_HBconsumer_process+0x18c>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	617b      	str	r3, [r7, #20]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	789b      	ldrb	r3, [r3, #2]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80a0 	beq.w	80030d4 <CO_HBconsumer_process+0x184>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d03b      	beq.n	8003014 <CO_HBconsumer_process+0xc4>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11b      	bne.n	8002fde <CO_HBconsumer_process+0x8e>
                    /* bootup message*/
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <CO_HBconsumer_process+0x6e>
                        monitoredNode->pFunctSignalRemoteReset(
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	7810      	ldrb	r0, [r2, #0]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fba:	7ff9      	ldrb	r1, [r7, #31]
 8002fbc:	4798      	blx	r3
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	789b      	ldrb	r3, [r3, #2]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d107      	bne.n	8002fd6 <CO_HBconsumer_process+0x86>
                        CO_errorReport(HBcons->em,
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	7ffb      	ldrb	r3, [r7, #31]
 8002fcc:	f248 1230 	movw	r2, #33072	; 0x8130
 8002fd0:	211c      	movs	r1, #28
 8002fd2:	f7ff fc8e 	bl	80028f2 <CO_errorReport>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	709a      	strb	r2, [r3, #2]
 8002fdc:	e017      	b.n	800300e <CO_HBconsumer_process+0xbe>

                }
                else {
                    /* heartbeat message */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
                    if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE &&
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	789b      	ldrb	r3, [r3, #2]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d00b      	beq.n	8002ffe <CO_HBconsumer_process+0xae>
                        monitoredNode->pFunctSignalHbStarted != NULL) {
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	69db      	ldr	r3, [r3, #28]
                    if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <CO_HBconsumer_process+0xae>
                        monitoredNode->pFunctSignalHbStarted(
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	7810      	ldrb	r0, [r2, #0]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	6a12      	ldr	r2, [r2, #32]
 8002ffa:	7ff9      	ldrb	r1, [r7, #31]
 8002ffc:	4798      	blx	r3
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2202      	movs	r2, #2
 8003002:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2200      	movs	r2, #0
 8003008:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2200      	movs	r2, #0
 8003012:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	789b      	ldrb	r3, [r3, #2]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d12f      	bne.n	800307c <CO_HBconsumer_process+0x12c>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	441a      	add	r2, r3
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	d312      	bcc.n	800305a <CO_HBconsumer_process+0x10a>
                    /* timeout expired */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
                    if (monitoredNode->pFunctSignalTimeout!=NULL) {
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <CO_HBconsumer_process+0xfc>
                        monitoredNode->pFunctSignalTimeout(
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	7810      	ldrb	r0, [r2, #0]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003048:	7ff9      	ldrb	r1, [r7, #31]
 800304a:	4798      	blx	r3
#endif
                    /*
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
                                   CO_EMC_HEARTBEAT, i);
                    */
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	22ff      	movs	r2, #255	; 0xff
 8003050:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2203      	movs	r2, #3
 8003056:	709a      	strb	r2, [r3, #2]
 8003058:	e010      	b.n	800307c <CO_HBconsumer_process+0x12c>
                }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_TIMERNEXT
                else if (timerNext_us != NULL) {
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00d      	beq.n	800307c <CO_HBconsumer_process+0x12c>
                    /* Calculate timerNext_us for next timeout checking. */
                    uint32_t diff = monitoredNode->time_us
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	689a      	ldr	r2, [r3, #8]
                                  - monitoredNode->timeoutTimer;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	685b      	ldr	r3, [r3, #4]
                    uint32_t diff = monitoredNode->time_us
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	613b      	str	r3, [r7, #16]
                    if (*timerNext_us > diff) {
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	429a      	cmp	r2, r3
 8003074:	d202      	bcs.n	800307c <CO_HBconsumer_process+0x12c>
                        *timerNext_us = diff;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	601a      	str	r2, [r3, #0]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	789b      	ldrb	r3, [r3, #2]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d001      	beq.n	8003088 <CO_HBconsumer_process+0x138>
                allMonitoredActiveCurrent = false;
 8003084:	2300      	movs	r3, #0
 8003086:	77bb      	strb	r3, [r7, #30]
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800308e:	2b05      	cmp	r3, #5
 8003090:	d001      	beq.n	8003096 <CO_HBconsumer_process+0x146>
                allMonitoredOperationalCurrent = CO_NMT_UNKNOWN;
 8003092:	23ff      	movs	r3, #255	; 0xff
 8003094:	777b      	strb	r3, [r7, #29]
            }
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
            /* Verify, if NMT state of monitored node changed */
            if(monitoredNode->NMTstate != monitoredNode->NMTstatePrev) {
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d012      	beq.n	80030cc <CO_HBconsumer_process+0x17c>
                if (HBcons->pFunctSignalNmtChanged != NULL) {
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <CO_HBconsumer_process+0x172>
                    HBcons->pFunctSignalNmtChanged(
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	7810      	ldrb	r0, [r2, #0]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	f992 1001 	ldrsb.w	r1, [r2, #1]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	69d2      	ldr	r2, [r2, #28]
 80030c0:	4798      	blx	r3
                        monitoredNode->nodeId, monitoredNode->NMTstate,
                        HBcons->pFunctSignalObjectNmtChanged);
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	761a      	strb	r2, [r3, #24]
            }
#endif
            monitoredNode++;
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	3334      	adds	r3, #52	; 0x34
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	e000      	b.n	80030d6 <CO_HBconsumer_process+0x186>
                continue;
 80030d4:	bf00      	nop
        for (i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80030d6:	7ffb      	ldrb	r3, [r7, #31]
 80030d8:	3301      	adds	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	7b1b      	ldrb	r3, [r3, #12]
 80030e0:	7ffa      	ldrb	r2, [r7, #31]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	f4ff af4f 	bcc.w	8002f86 <CO_HBconsumer_process+0x36>
    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 80030e8:	e028      	b.n	800313c <CO_HBconsumer_process+0x1ec>
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80030ea:	7afb      	ldrb	r3, [r7, #11]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d103      	bne.n	80030f8 <CO_HBconsumer_process+0x1a8>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	7bdb      	ldrb	r3, [r3, #15]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d021      	beq.n	800313c <CO_HBconsumer_process+0x1ec>
        /* (pre)operational state changed, clear variables */
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e015      	b.n	800312a <CO_HBconsumer_process+0x1da>
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	22ff      	movs	r2, #255	; 0xff
 8003102:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	22ff      	movs	r2, #255	; 0xff
 8003108:	761a      	strb	r2, [r3, #24]
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	789b      	ldrb	r3, [r3, #2]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <CO_HBconsumer_process+0x1ce>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2201      	movs	r2, #1
 800311c:	709a      	strb	r2, [r3, #2]
            }
            monitoredNode++;
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	3334      	adds	r3, #52	; 0x34
 8003122:	61bb      	str	r3, [r7, #24]
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8003124:	7ffb      	ldrb	r3, [r7, #31]
 8003126:	3301      	adds	r3, #1
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	7b1b      	ldrb	r3, [r3, #12]
 800312e:	7ffa      	ldrb	r2, [r7, #31]
 8003130:	429a      	cmp	r2, r3
 8003132:	d3e4      	bcc.n	80030fe <CO_HBconsumer_process+0x1ae>
        }
        allMonitoredActiveCurrent = false;
 8003134:	2300      	movs	r3, #0
 8003136:	77bb      	strb	r3, [r7, #30]
        allMonitoredOperationalCurrent = CO_NMT_UNKNOWN;
 8003138:	23ff      	movs	r3, #255	; 0xff
 800313a:	777b      	strb	r3, [r7, #29]
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	7b5b      	ldrb	r3, [r3, #13]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d110      	bne.n	8003166 <CO_HBconsumer_process+0x216>
 8003144:	7fbb      	ldrb	r3, [r7, #30]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <CO_HBconsumer_process+0x216>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2200      	movs	r2, #0
 8003150:	211b      	movs	r1, #27
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fc53 	bl	80029fe <CO_errorReset>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2200      	movs	r2, #0
 800315e:	211c      	movs	r1, #28
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fc4c 	bl	80029fe <CO_errorReset>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	7fba      	ldrb	r2, [r7, #30]
 800316a:	735a      	strb	r2, [r3, #13]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	7f7a      	ldrb	r2, [r7, #29]
 8003170:	739a      	strb	r2, [r3, #14]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	7afa      	ldrb	r2, [r7, #11]
 8003176:	73da      	strb	r2, [r3, #15]
}
 8003178:	bf00      	nop
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg){
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003190:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	3321      	adds	r3, #33	; 0x21
 8003196:	613b      	str	r3, [r7, #16]

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	60fb      	str	r3, [r7, #12]

    nodeId = data[1];
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	72fb      	strb	r3, [r7, #11]

    if((DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d14d      	bne.n	8003244 <CO_NMT_receive+0xc4>
 80031a8:	7afb      	ldrb	r3, [r7, #11]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d004      	beq.n	80031b8 <CO_NMT_receive+0x38>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	7bdb      	ldrb	r3, [r3, #15]
 80031b2:	7afa      	ldrb	r2, [r7, #11]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d145      	bne.n	8003244 <CO_NMT_receive+0xc4>
        uint8_t command = data[0];
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	72bb      	strb	r3, [r7, #10]
#if (CO_CONFIG_NMT) & (CO_CONFIG_NMT_CALLBACK_CHANGE | CO_CONFIG_FLAG_CALLBACK_PRE)
        CO_NMT_internalState_t currentOperatingState = NMT->operatingState;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	7b1b      	ldrb	r3, [r3, #12]
 80031c2:	727b      	strb	r3, [r7, #9]
#endif

        switch(command){
 80031c4:	7abb      	ldrb	r3, [r7, #10]
 80031c6:	2b82      	cmp	r3, #130	; 0x82
 80031c8:	d024      	beq.n	8003214 <CO_NMT_receive+0x94>
 80031ca:	2b82      	cmp	r3, #130	; 0x82
 80031cc:	dc26      	bgt.n	800321c <CO_NMT_receive+0x9c>
 80031ce:	2b81      	cmp	r3, #129	; 0x81
 80031d0:	d01c      	beq.n	800320c <CO_NMT_receive+0x8c>
 80031d2:	2b81      	cmp	r3, #129	; 0x81
 80031d4:	dc22      	bgt.n	800321c <CO_NMT_receive+0x9c>
 80031d6:	2b80      	cmp	r3, #128	; 0x80
 80031d8:	d014      	beq.n	8003204 <CO_NMT_receive+0x84>
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	dc1e      	bgt.n	800321c <CO_NMT_receive+0x9c>
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d002      	beq.n	80031e8 <CO_NMT_receive+0x68>
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d00a      	beq.n	80031fc <CO_NMT_receive+0x7c>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 80031e6:	e019      	b.n	800321c <CO_NMT_receive+0x9c>
                if((*NMT->emPr->errorRegister) == 0U){
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d115      	bne.n	8003220 <CO_NMT_receive+0xa0>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2205      	movs	r2, #5
 80031f8:	731a      	strb	r2, [r3, #12]
                break;
 80031fa:	e011      	b.n	8003220 <CO_NMT_receive+0xa0>
                NMT->operatingState = CO_NMT_STOPPED;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2204      	movs	r2, #4
 8003200:	731a      	strb	r2, [r3, #12]
                break;
 8003202:	e00e      	b.n	8003222 <CO_NMT_receive+0xa2>
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	227f      	movs	r2, #127	; 0x7f
 8003208:	731a      	strb	r2, [r3, #12]
                break;
 800320a:	e00a      	b.n	8003222 <CO_NMT_receive+0xa2>
                NMT->resetCommand = CO_RESET_APP;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2202      	movs	r2, #2
 8003210:	739a      	strb	r2, [r3, #14]
                break;
 8003212:	e006      	b.n	8003222 <CO_NMT_receive+0xa2>
                NMT->resetCommand = CO_RESET_COMM;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	739a      	strb	r2, [r3, #14]
                break;
 800321a:	e002      	b.n	8003222 <CO_NMT_receive+0xa2>
                break;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <CO_NMT_receive+0xa2>
                break;
 8003220:	bf00      	nop
        }
#endif
*/
#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_CALLBACK_PRE
    /* Optional signal to RTOS, which can resume task, which handles NMT. */
    if(NMT->pFunctSignalPre != NULL && currentOperatingState!=NMT->operatingState) {
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <CO_NMT_receive+0xc4>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003230:	f997 2009 	ldrsb.w	r2, [r7, #9]
 8003234:	429a      	cmp	r2, r3
 8003236:	d005      	beq.n	8003244 <CO_NMT_receive+0xc4>
        NMT->pFunctSignalPre(NMT->functSignalObjectPre);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003240:	4610      	mov	r0, r2
 8003242:	4798      	blx	r3
    }
#endif
    }
}
 8003244:	bf00      	nop
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <CO_NMT_init>:
        uint16_t                NMT_txIdx,
        uint16_t                CANidTxNMT,
        CO_CANmodule_t         *HB_CANdevTx,
        uint16_t                HB_txIdx,
        uint16_t                CANidTxHB)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af04      	add	r7, sp, #16
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	460b      	mov	r3, r1
 800325c:	71fb      	strb	r3, [r7, #7]
 800325e:	4613      	mov	r3, r2
 8003260:	80bb      	strh	r3, [r7, #4]
    /* verify arguments */
    if (NMT == NULL || emPr == NULL || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <CO_NMT_init+0x2e>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <CO_NMT_init+0x2e>
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <CO_NMT_init+0x2e>
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <CO_NMT_init+0x34>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
 800327e:	e067      	b.n	8003350 <CO_NMT_init+0x104>
    }

    CO_ReturnError_t ret = CO_ERROR_NO;
 8003280:	2300      	movs	r3, #0
 8003282:	75fb      	strb	r3, [r7, #23]

    /* blinking bytes and LEDS */
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_LEDS
    NMT->LEDtimer               = 0;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
    NMT->LEDflickering          = 0;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	711a      	strb	r2, [r3, #4]
    NMT->LEDblinking            = 0;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	715a      	strb	r2, [r3, #5]
    NMT->LEDsingleFlash         = 0;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	719a      	strb	r2, [r3, #6]
    NMT->LEDdoubleFlash         = 0;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	71da      	strb	r2, [r3, #7]
    NMT->LEDtripleFlash         = 0;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	721a      	strb	r2, [r3, #8]
    NMT->LEDquadrupleFlash      = 0;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	725a      	strb	r2, [r3, #9]
    NMT->LEDgreenRun            = -1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	22ff      	movs	r2, #255	; 0xff
 80032b2:	729a      	strb	r2, [r3, #10]
    NMT->LEDredError            = 1;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	72da      	strb	r2, [r3, #11]
#endif /* CO_CONFIG_NMT_LEDS */

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	731a      	strb	r2, [r3, #12]
    NMT->operatingStatePrev     = CO_NMT_INITIALIZING;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	735a      	strb	r2, [r3, #13]
    NMT->nodeId                 = nodeId;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	79fa      	ldrb	r2, [r7, #7]
 80032ca:	73da      	strb	r2, [r3, #15]
    NMT->firstHBTime            = (int32_t)firstHBTime_ms * 1000;
 80032cc:	88bb      	ldrh	r3, [r7, #4]
 80032ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	615a      	str	r2, [r3, #20]
    NMT->resetCommand           = 0;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	739a      	strb	r2, [r3, #14]
    NMT->HBproducerTimer        = 0;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	611a      	str	r2, [r3, #16]
    NMT->emPr                   = emPr;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	619a      	str	r2, [r3, #24]
#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_CALLBACK_PRE
    NMT->pFunctSignalPre = NULL;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->functSignalObjectPre = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
    NMT->pFunctNMT              = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8003300:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003302:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <CO_NMT_init+0x10c>)
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	2300      	movs	r3, #0
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003314:	6a38      	ldr	r0, [r7, #32]
 8003316:	f005 fef7 	bl	8009108 <CO_CANrxBufferInit>
 800331a:	4603      	mov	r3, r0
 800331c:	75fb      	strb	r3, [r7, #23]
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003322:	61da      	str	r2, [r3, #28]
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8003324:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003328:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800332a:	2300      	movs	r3, #0
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	2301      	movs	r3, #1
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	2300      	movs	r3, #0
 8003334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003336:	f005 ff3d 	bl	80091b4 <CO_CANtxBufferInit>
 800333a:	4602      	mov	r2, r0
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	621a      	str	r2, [r3, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (NMT->HB_TXbuff == NULL) {
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <CO_NMT_init+0x100>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003348:	23ff      	movs	r3, #255	; 0xff
 800334a:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800334c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	08003181 	.word	0x08003181

0800335c <CO_NMT_initCallbackPre>:
#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_CALLBACK_PRE
void CO_NMT_initCallbackPre(
        CO_NMT_t               *NMT,
        void                   *object,
        void                  (*pFunctSignal)(void *object))
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
    if (NMT != NULL) {
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <CO_NMT_initCallbackPre+0x1e>
        NMT->pFunctSignalPre = pFunctSignal;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24
        NMT->functSignalObjectPre = object;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	629a      	str	r2, [r3, #40]	; 0x28
    }
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <CO_NMT_initCallbackChanged>:
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
/******************************************************************************/
void CO_NMT_initCallbackChanged(
        CO_NMT_t               *NMT,
        void                  (*pFunctNMT)(CO_NMT_internalState_t state))
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
    if(NMT != NULL){
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <CO_NMT_initCallbackChanged+0x2c>
        NMT->pFunctNMT = pFunctNMT;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c
        if(NMT->pFunctNMT != NULL){
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d006      	beq.n	80033b2 <CO_NMT_initCallbackChanged+0x2c>
            NMT->pFunctNMT(NMT->operatingState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	f992 200c 	ldrsb.w	r2, [r2, #12]
 80033ae:	4610      	mov	r0, r2
 80033b0:	4798      	blx	r3
        }
    }
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <CO_NMT_process>:
        uint16_t                HBtime_ms,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint32_t               *timerNext_us)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b088      	sub	sp, #32
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	4613      	mov	r3, r2
 80033c8:	80fb      	strh	r3, [r7, #6]
    uint8_t CANpassive;

    CO_NMT_internalState_t currentOperatingState = NMT->operatingState;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	7b1b      	ldrb	r3, [r3, #12]
 80033ce:	77bb      	strb	r3, [r7, #30]
    uint32_t HBtime = (uint32_t)HBtime_ms * 1000;
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer += timeDifference_us;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	441a      	add	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	611a      	str	r2, [r3, #16]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer and Timer expired or
     * - HB producer and NMT->operatingState changed, but not from initialised */
    if ((NMT->operatingState == CO_NMT_INITIALIZING) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00f      	beq.n	8003412 <CO_NMT_process+0x58>
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d038      	beq.n	800346a <CO_NMT_process+0xb0>
        (HBtime != 0 && (NMT->HBproducerTimer >= HBtime ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d907      	bls.n	8003412 <CO_NMT_process+0x58>
                         NMT->operatingState != NMT->operatingStatePrev)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f993 300d 	ldrsb.w	r3, [r3, #13]
        (HBtime != 0 && (NMT->HBproducerTimer >= HBtime ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d02b      	beq.n	800346a <CO_NMT_process+0xb0>
        ))
    {
        /* Start from the beginning. If OS is slow, time sliding may occur. However,
         * heartbeat is not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	611a      	str	r2, [r3, #16]

        NMT->HB_TXbuff->data[0] = (uint8_t) NMT->operatingState;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f005 feff 	bl	8009234 <CO_CANsend>

        if (NMT->operatingState == CO_NMT_INITIALIZING) {
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d114      	bne.n	800346a <CO_NMT_process+0xb0>
            /* After bootup messages send first heartbeat earlier */
            if (HBtime > NMT->firstHBTime) {
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	429a      	cmp	r2, r3
 8003448:	d905      	bls.n	8003456 <CO_NMT_process+0x9c>
                NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	1ad2      	subs	r2, r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	611a      	str	r2, [r3, #16]
            }

            /* NMT slave self starting */
            if (NMTstartup == 0x00000008U) NMT->operatingState = CO_NMT_OPERATIONAL;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d103      	bne.n	8003464 <CO_NMT_process+0xaa>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2205      	movs	r2, #5
 8003460:	731a      	strb	r2, [r3, #12]
 8003462:	e002      	b.n	800346a <CO_NMT_process+0xb0>
            else                           NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	227f      	movs	r2, #127	; 0x7f
 8003468:	731a      	strb	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMT->operatingState;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	735a      	strb	r2, [r3, #13]

    /* CAN passive flag */
    CANpassive = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	77fb      	strb	r3, [r7, #31]
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || CO_isError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2107      	movs	r1, #7
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fb44 	bl	8002b0e <CO_isError>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <CO_NMT_process+0xe6>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2106      	movs	r1, #6
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fb3a 	bl	8002b0e <CO_isError>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <CO_NMT_process+0xea>
        CANpassive = 1;
 80034a0:	2301      	movs	r3, #1
 80034a2:	77fb      	strb	r3, [r7, #31]


#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_LEDS
    NMT->LEDtimer += timeDifference_us;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	441a      	add	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	601a      	str	r2, [r3, #0]
    if (NMT->LEDtimer >= 50000) {
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80034b8:	4293      	cmp	r3, r2
 80034ba:	f240 80e6 	bls.w	800368a <CO_NMT_process+0x2d0>
        NMT->LEDtimer -= 50000;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 80034c6:	3b50      	subs	r3, #80	; 0x50
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	6013      	str	r3, [r2, #0]

#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_TIMERNEXT
        if (timerNext_us != NULL) {
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <CO_NMT_process+0x134>
            uint32_t diff = 50000 - NMT->LEDtimer;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f5c3 4343 	rsb	r3, r3, #49920	; 0xc300
 80034da:	3350      	adds	r3, #80	; 0x50
 80034dc:	617b      	str	r3, [r7, #20]
            if (*timerNext_us > diff) {
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d202      	bcs.n	80034ee <CO_NMT_process+0x134>
                *timerNext_us = diff;
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	601a      	str	r2, [r3, #0]
            }
        }
#endif

        if (++NMT->LEDflickering >= 1) NMT->LEDflickering = -1;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	b25a      	sxtb	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	711a      	strb	r2, [r3, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	dd02      	ble.n	8003510 <CO_NMT_process+0x156>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	22ff      	movs	r2, #255	; 0xff
 800350e:	711a      	strb	r2, [r3, #4]

        if (++NMT->LEDblinking >= 4) NMT->LEDblinking = -4;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3301      	adds	r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	b25a      	sxtb	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	715a      	strb	r2, [r3, #5]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003528:	2b03      	cmp	r3, #3
 800352a:	dd02      	ble.n	8003532 <CO_NMT_process+0x178>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	22fc      	movs	r2, #252	; 0xfc
 8003530:	715a      	strb	r2, [r3, #5]

        if (++NMT->LEDsingleFlash >= 4) NMT->LEDsingleFlash = -20;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3301      	adds	r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	b25a      	sxtb	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	719a      	strb	r2, [r3, #6]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800354a:	2b03      	cmp	r3, #3
 800354c:	dd02      	ble.n	8003554 <CO_NMT_process+0x19a>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	22ec      	movs	r2, #236	; 0xec
 8003552:	719a      	strb	r2, [r3, #6]

        switch (++NMT->LEDdoubleFlash) {
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3301      	adds	r3, #1
 800355e:	b2db      	uxtb	r3, r3
 8003560:	b25a      	sxtb	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	71da      	strb	r2, [r3, #7]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800356c:	2b68      	cmp	r3, #104	; 0x68
 800356e:	d00e      	beq.n	800358e <CO_NMT_process+0x1d4>
 8003570:	2b68      	cmp	r3, #104	; 0x68
 8003572:	dc10      	bgt.n	8003596 <CO_NMT_process+0x1dc>
 8003574:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003578:	d005      	beq.n	8003586 <CO_NMT_process+0x1cc>
 800357a:	2b04      	cmp	r3, #4
 800357c:	d10b      	bne.n	8003596 <CO_NMT_process+0x1dc>
            case    4: NMT->LEDdoubleFlash = -104; break;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2298      	movs	r2, #152	; 0x98
 8003582:	71da      	strb	r2, [r3, #7]
 8003584:	e008      	b.n	8003598 <CO_NMT_process+0x1de>
            case -100: NMT->LEDdoubleFlash =  100; break;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2264      	movs	r2, #100	; 0x64
 800358a:	71da      	strb	r2, [r3, #7]
 800358c:	e004      	b.n	8003598 <CO_NMT_process+0x1de>
            case  104: NMT->LEDdoubleFlash =  -20; break;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	22ec      	movs	r2, #236	; 0xec
 8003592:	71da      	strb	r2, [r3, #7]
 8003594:	e000      	b.n	8003598 <CO_NMT_process+0x1de>
            default: break;
 8003596:	bf00      	nop
        }

        switch (++NMT->LEDtripleFlash) {
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3301      	adds	r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	b25a      	sxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	721a      	strb	r2, [r3, #8]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80035b0:	2b72      	cmp	r3, #114	; 0x72
 80035b2:	d020      	beq.n	80035f6 <CO_NMT_process+0x23c>
 80035b4:	2b72      	cmp	r3, #114	; 0x72
 80035b6:	dc22      	bgt.n	80035fe <CO_NMT_process+0x244>
 80035b8:	2b68      	cmp	r3, #104	; 0x68
 80035ba:	d014      	beq.n	80035e6 <CO_NMT_process+0x22c>
 80035bc:	2b68      	cmp	r3, #104	; 0x68
 80035be:	dc1e      	bgt.n	80035fe <CO_NMT_process+0x244>
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d008      	beq.n	80035d6 <CO_NMT_process+0x21c>
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	dc1a      	bgt.n	80035fe <CO_NMT_process+0x244>
 80035c8:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 80035cc:	d00f      	beq.n	80035ee <CO_NMT_process+0x234>
 80035ce:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80035d2:	d004      	beq.n	80035de <CO_NMT_process+0x224>
            case    4: NMT->LEDtripleFlash = -104; break;
            case -100: NMT->LEDtripleFlash =  100; break;
            case  104: NMT->LEDtripleFlash = -114; break;
            case -110: NMT->LEDtripleFlash =  110; break;
            case  114: NMT->LEDtripleFlash =  -20; break;
            default: break;
 80035d4:	e013      	b.n	80035fe <CO_NMT_process+0x244>
            case    4: NMT->LEDtripleFlash = -104; break;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2298      	movs	r2, #152	; 0x98
 80035da:	721a      	strb	r2, [r3, #8]
 80035dc:	e010      	b.n	8003600 <CO_NMT_process+0x246>
            case -100: NMT->LEDtripleFlash =  100; break;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2264      	movs	r2, #100	; 0x64
 80035e2:	721a      	strb	r2, [r3, #8]
 80035e4:	e00c      	b.n	8003600 <CO_NMT_process+0x246>
            case  104: NMT->LEDtripleFlash = -114; break;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	228e      	movs	r2, #142	; 0x8e
 80035ea:	721a      	strb	r2, [r3, #8]
 80035ec:	e008      	b.n	8003600 <CO_NMT_process+0x246>
            case -110: NMT->LEDtripleFlash =  110; break;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	226e      	movs	r2, #110	; 0x6e
 80035f2:	721a      	strb	r2, [r3, #8]
 80035f4:	e004      	b.n	8003600 <CO_NMT_process+0x246>
            case  114: NMT->LEDtripleFlash =  -20; break;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	22ec      	movs	r2, #236	; 0xec
 80035fa:	721a      	strb	r2, [r3, #8]
 80035fc:	e000      	b.n	8003600 <CO_NMT_process+0x246>
            default: break;
 80035fe:	bf00      	nop
        }

        switch (++NMT->LEDquadrupleFlash) {
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	3301      	adds	r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	b25a      	sxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	725a      	strb	r2, [r3, #9]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003618:	2b7c      	cmp	r3, #124	; 0x7c
 800361a:	d032      	beq.n	8003682 <CO_NMT_process+0x2c8>
 800361c:	2b7c      	cmp	r3, #124	; 0x7c
 800361e:	dc36      	bgt.n	800368e <CO_NMT_process+0x2d4>
 8003620:	2b72      	cmp	r3, #114	; 0x72
 8003622:	d026      	beq.n	8003672 <CO_NMT_process+0x2b8>
 8003624:	2b72      	cmp	r3, #114	; 0x72
 8003626:	dc32      	bgt.n	800368e <CO_NMT_process+0x2d4>
 8003628:	2b68      	cmp	r3, #104	; 0x68
 800362a:	d01a      	beq.n	8003662 <CO_NMT_process+0x2a8>
 800362c:	2b68      	cmp	r3, #104	; 0x68
 800362e:	dc2e      	bgt.n	800368e <CO_NMT_process+0x2d4>
 8003630:	2b04      	cmp	r3, #4
 8003632:	d00e      	beq.n	8003652 <CO_NMT_process+0x298>
 8003634:	2b04      	cmp	r3, #4
 8003636:	dc2a      	bgt.n	800368e <CO_NMT_process+0x2d4>
 8003638:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800363c:	d00d      	beq.n	800365a <CO_NMT_process+0x2a0>
 800363e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003642:	dc24      	bgt.n	800368e <CO_NMT_process+0x2d4>
 8003644:	f113 0f78 	cmn.w	r3, #120	; 0x78
 8003648:	d017      	beq.n	800367a <CO_NMT_process+0x2c0>
 800364a:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 800364e:	d00c      	beq.n	800366a <CO_NMT_process+0x2b0>
            case  104: NMT->LEDquadrupleFlash = -114; break;
            case -110: NMT->LEDquadrupleFlash =  110; break;
            case  114: NMT->LEDquadrupleFlash = -124; break;
            case -120: NMT->LEDquadrupleFlash =  120; break;
            case  124: NMT->LEDquadrupleFlash =  -20; break;
            default: break;
 8003650:	e01d      	b.n	800368e <CO_NMT_process+0x2d4>
            case    4: NMT->LEDquadrupleFlash = -104; break;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2298      	movs	r2, #152	; 0x98
 8003656:	725a      	strb	r2, [r3, #9]
 8003658:	e01a      	b.n	8003690 <CO_NMT_process+0x2d6>
            case -100: NMT->LEDquadrupleFlash =  100; break;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2264      	movs	r2, #100	; 0x64
 800365e:	725a      	strb	r2, [r3, #9]
 8003660:	e016      	b.n	8003690 <CO_NMT_process+0x2d6>
            case  104: NMT->LEDquadrupleFlash = -114; break;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	228e      	movs	r2, #142	; 0x8e
 8003666:	725a      	strb	r2, [r3, #9]
 8003668:	e012      	b.n	8003690 <CO_NMT_process+0x2d6>
            case -110: NMT->LEDquadrupleFlash =  110; break;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	226e      	movs	r2, #110	; 0x6e
 800366e:	725a      	strb	r2, [r3, #9]
 8003670:	e00e      	b.n	8003690 <CO_NMT_process+0x2d6>
            case  114: NMT->LEDquadrupleFlash = -124; break;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2284      	movs	r2, #132	; 0x84
 8003676:	725a      	strb	r2, [r3, #9]
 8003678:	e00a      	b.n	8003690 <CO_NMT_process+0x2d6>
            case -120: NMT->LEDquadrupleFlash =  120; break;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2278      	movs	r2, #120	; 0x78
 800367e:	725a      	strb	r2, [r3, #9]
 8003680:	e006      	b.n	8003690 <CO_NMT_process+0x2d6>
            case  124: NMT->LEDquadrupleFlash =  -20; break;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	22ec      	movs	r2, #236	; 0xec
 8003686:	725a      	strb	r2, [r3, #9]
 8003688:	e002      	b.n	8003690 <CO_NMT_process+0x2d6>
        }
    }
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <CO_NMT_process+0x2d6>
            default: break;
 800368e:	bf00      	nop

    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003696:	2b7f      	cmp	r3, #127	; 0x7f
 8003698:	d00c      	beq.n	80036b4 <CO_NMT_process+0x2fa>
 800369a:	2b7f      	cmp	r3, #127	; 0x7f
 800369c:	dc14      	bgt.n	80036c8 <CO_NMT_process+0x30e>
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d002      	beq.n	80036a8 <CO_NMT_process+0x2ee>
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	d00c      	beq.n	80036c0 <CO_NMT_process+0x306>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
        default: break;
 80036a6:	e00f      	b.n	80036c8 <CO_NMT_process+0x30e>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f993 2006 	ldrsb.w	r2, [r3, #6]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	729a      	strb	r2, [r3, #10]
 80036b2:	e00a      	b.n	80036ca <CO_NMT_process+0x310>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	729a      	strb	r2, [r3, #10]
 80036be:	e004      	b.n	80036ca <CO_NMT_process+0x310>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	729a      	strb	r2, [r3, #10]
 80036c6:	e000      	b.n	80036ca <CO_NMT_process+0x310>
        default: break;
 80036c8:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2112      	movs	r1, #18
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fa1b 	bl	8002b0e <CO_isError>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <CO_NMT_process+0x32c>
        NMT->LEDredError = 1;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	72da      	strb	r2, [r3, #11]
 80036e4:	e04f      	b.n	8003786 <CO_NMT_process+0x3cc>

    else if(CO_isError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2118      	movs	r1, #24
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fa0d 	bl	8002b0e <CO_isError>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <CO_NMT_process+0x34c>
        NMT->LEDredError = NMT->LEDtripleFlash;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	72da      	strb	r2, [r3, #11]
 8003704:	e03f      	b.n	8003786 <CO_NMT_process+0x3cc>

    else if(CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	211b      	movs	r1, #27
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff f9fd 	bl	8002b0e <CO_isError>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <CO_NMT_process+0x374>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	211c      	movs	r1, #28
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff f9f3 	bl	8002b0e <CO_isError>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <CO_NMT_process+0x380>
        NMT->LEDredError = NMT->LEDdoubleFlash;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f993 2007 	ldrsb.w	r2, [r3, #7]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	72da      	strb	r2, [r3, #11]
 8003738:	e025      	b.n	8003786 <CO_NMT_process+0x3cc>

    else if(CANpassive || CO_isError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
 800373a:	7ffb      	ldrb	r3, [r7, #31]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <CO_NMT_process+0x39a>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2101      	movs	r1, #1
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f9e0 	bl	8002b0e <CO_isError>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <CO_NMT_process+0x3a6>
        NMT->LEDredError = NMT->LEDsingleFlash;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	72da      	strb	r2, [r3, #11]
 800375e:	e012      	b.n	8003786 <CO_NMT_process+0x3cc>

    else if(errorRegister)
 8003760:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <CO_NMT_process+0x3c6>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800376e:	2b00      	cmp	r3, #0
 8003770:	db02      	blt.n	8003778 <CO_NMT_process+0x3be>
 8003772:	f04f 32ff 	mov.w	r2, #4294967295
 8003776:	e000      	b.n	800377a <CO_NMT_process+0x3c0>
 8003778:	2201      	movs	r2, #1
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	72da      	strb	r2, [r3, #11]
 800377e:	e002      	b.n	8003786 <CO_NMT_process+0x3cc>

    else
        NMT->LEDredError = -1;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	22ff      	movs	r2, #255	; 0xff
 8003784:	72da      	strb	r2, [r3, #11]
#endif /* CO_CONFIG_NMT_LEDS */


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80ae 	beq.w	80038ea <CO_NMT_process+0x530>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003794:	2b05      	cmp	r3, #5
 8003796:	f040 80a8 	bne.w	80038ea <CO_NMT_process+0x530>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
 800379a:	7ffb      	ldrb	r3, [r7, #31]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00f      	beq.n	80037c0 <CO_NMT_process+0x406>
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	3302      	adds	r3, #2
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <CO_NMT_process+0x3fa>
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	3302      	adds	r3, #2
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d105      	bne.n	80037c0 <CO_NMT_process+0x406>
 80037b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037b8:	f043 0310 	orr.w	r3, r3, #16
 80037bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        if(errorRegister){
 80037c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8090 	beq.w	80038ea <CO_NMT_process+0x530>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
 80037ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d03e      	beq.n	8003854 <CO_NMT_process+0x49a>
                if(errorBehavior[1] == 0){
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	3301      	adds	r3, #1
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <CO_NMT_process+0x42e>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	227f      	movs	r2, #127	; 0x7f
 80037e4:	731a      	strb	r2, [r3, #12]
 80037e6:	e035      	b.n	8003854 <CO_NMT_process+0x49a>
                }
                else if(errorBehavior[1] == 2){
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	3301      	adds	r3, #1
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d103      	bne.n	80037fa <CO_NMT_process+0x440>
                    NMT->operatingState = CO_NMT_STOPPED;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2204      	movs	r2, #4
 80037f6:	731a      	strb	r2, [r3, #12]
 80037f8:	e02c      	b.n	8003854 <CO_NMT_process+0x49a>
                }
                else if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2112      	movs	r1, #18
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff f983 	bl	8002b0e <CO_isError>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d113      	bne.n	8003836 <CO_NMT_process+0x47c>
                     || CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	211b      	movs	r1, #27
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f979 	bl	8002b0e <CO_isError>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <CO_NMT_process+0x47c>
                     || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	211c      	movs	r1, #28
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff f96f 	bl	8002b0e <CO_isError>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00e      	beq.n	8003854 <CO_NMT_process+0x49a>
                {
                    if(errorBehavior[0] == 0){
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <CO_NMT_process+0x48c>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	227f      	movs	r2, #127	; 0x7f
 8003842:	731a      	strb	r2, [r3, #12]
 8003844:	e006      	b.n	8003854 <CO_NMT_process+0x49a>
                    }
                    else if(errorBehavior[0] == 2){
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d102      	bne.n	8003854 <CO_NMT_process+0x49a>
                        NMT->operatingState = CO_NMT_STOPPED;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2204      	movs	r2, #4
 8003852:	731a      	strb	r2, [r3, #12]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
 8003854:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d010      	beq.n	8003882 <CO_NMT_process+0x4c8>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	3303      	adds	r3, #3
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <CO_NMT_process+0x4b8>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	227f      	movs	r2, #127	; 0x7f
 800386e:	731a      	strb	r2, [r3, #12]
 8003870:	e007      	b.n	8003882 <CO_NMT_process+0x4c8>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	3303      	adds	r3, #3
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d102      	bne.n	8003882 <CO_NMT_process+0x4c8>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2204      	movs	r2, #4
 8003880:	731a      	strb	r2, [r3, #12]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
 8003882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d010      	beq.n	80038b0 <CO_NMT_process+0x4f6>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 800388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003890:	3304      	adds	r3, #4
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <CO_NMT_process+0x4e6>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	227f      	movs	r2, #127	; 0x7f
 800389c:	731a      	strb	r2, [r3, #12]
 800389e:	e007      	b.n	80038b0 <CO_NMT_process+0x4f6>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	3304      	adds	r3, #4
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d102      	bne.n	80038b0 <CO_NMT_process+0x4f6>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2204      	movs	r2, #4
 80038ae:	731a      	strb	r2, [r3, #12]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
 80038b0:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	da10      	bge.n	80038da <CO_NMT_process+0x520>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 80038b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ba:	3305      	adds	r3, #5
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <CO_NMT_process+0x510>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	227f      	movs	r2, #127	; 0x7f
 80038c6:	731a      	strb	r2, [r3, #12]
 80038c8:	e007      	b.n	80038da <CO_NMT_process+0x520>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	3305      	adds	r3, #5
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d102      	bne.n	80038da <CO_NMT_process+0x520>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2204      	movs	r2, #4
 80038d8:	731a      	strb	r2, [r3, #12]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d002      	beq.n	80038ea <CO_NMT_process+0x530>
                NMT->HBproducerTimer = HBtime;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	611a      	str	r2, [r3, #16]
        }
    }

    if (currentOperatingState != NMT->operatingState) {
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80038f0:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d010      	beq.n	800391a <CO_NMT_process+0x560>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
        if (NMT->pFunctNMT != NULL) {
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <CO_NMT_process+0x554>
            NMT->pFunctNMT(NMT->operatingState);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800390a:	4610      	mov	r0, r2
 800390c:	4798      	blx	r3
        }
#endif
#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_TIMERNEXT
        /* execute next CANopen processing immediately */
        if (timerNext_us != NULL) {
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <CO_NMT_process+0x560>
            *timerNext_us = 0;
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
#endif
    }

#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_TIMERNEXT
    /* Calculate, when next Heartbeat needs to be send and lower timerNext_us if necessary. */
    if (HBtime != 0 && timerNext_us != NULL) {
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d018      	beq.n	8003952 <CO_NMT_process+0x598>
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	2b00      	cmp	r3, #0
 8003924:	d015      	beq.n	8003952 <CO_NMT_process+0x598>
        if (NMT->HBproducerTimer < HBtime) {
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	429a      	cmp	r2, r3
 800392e:	d90d      	bls.n	800394c <CO_NMT_process+0x592>
            uint32_t diff = HBtime - NMT->HBproducerTimer;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	613b      	str	r3, [r7, #16]
            if (*timerNext_us > diff) {
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	429a      	cmp	r2, r3
 8003942:	d206      	bcs.n	8003952 <CO_NMT_process+0x598>
                *timerNext_us = diff;
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e002      	b.n	8003952 <CO_NMT_process+0x598>
            }
        } else {
            *timerNext_us = 0;
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
        }
    }
#endif

    return (CO_NMT_reset_cmd_t) NMT->resetCommand;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	7b9b      	ldrb	r3, [r3, #14]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <CO_getUint16>:
static inline uint16_t CO_getUint16(const uint8_t data[]){
 800395e:	b480      	push	{r7}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
    memcpy(&value, data, sizeof(value));
 800396c:	81fb      	strh	r3, [r7, #14]
    return value;
 800396e:	89fb      	ldrh	r3, [r7, #14]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8003988:	60fb      	str	r3, [r7, #12]
    return value;
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <CO_setUint32>:
static inline void CO_setUint32(uint8_t data[], const uint32_t value){
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	683a      	ldr	r2, [r7, #0]
    memcpy(data, &value, sizeof(value));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	601a      	str	r2, [r3, #0]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, void *msg){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039c4:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	3321      	adds	r3, #33	; 0x21
 80039ca:	613b      	str	r3, [r7, #16]

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	7e5b      	ldrb	r3, [r3, #25]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d038      	beq.n	8003a4a <CO_PDO_receive+0x96>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f993 3000 	ldrsb.w	r3, [r3]
    if( (RPDO->valid) &&
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d132      	bne.n	8003a4a <CO_PDO_receive+0x96>
        (DLC >= RPDO->dataLength))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	7e9b      	ldrb	r3, [r3, #26]
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 80039e8:	7dfa      	ldrb	r2, [r7, #23]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d32d      	bcc.n	8003a4a <CO_PDO_receive+0x96>
    {
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        const size_t index = RPDO->SYNC && RPDO->synchronous && RPDO->SYNC->CANrxToggle;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <CO_PDO_receive+0x5a>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d006      	beq.n	8003a0e <CO_PDO_receive+0x5a>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	7f1b      	ldrb	r3, [r3, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <CO_PDO_receive+0x5a>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <CO_PDO_receive+0x5c>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
#else
        const size_t index = 0;
#endif

        /* copy data into appropriate buffer and set 'new message' flag */
        memcpy(RPDO->CANrxData[index], data, sizeof(RPDO->CANrxData[index]));
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3309      	adds	r3, #9
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2208      	movs	r2, #8
 8003a20:	6939      	ldr	r1, [r7, #16]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f013 fa4c 	bl	8016ec0 <memcpy>
        CO_FLAG_SET(RPDO->CANrxNew[index]);
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3310      	adds	r3, #16
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	2201      	movs	r2, #1
 8003a34:	605a      	str	r2, [r3, #4]

#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_CALLBACK_PRE
        /* Optional signal to RTOS, which can resume task, which handles RPDO. */
        if(RPDO->pFunctSignalPre != NULL) {
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <CO_PDO_receive+0x96>
            RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003a46:	4610      	mov	r0, r2
 8003a48:	4798      	blx	r3
        }
#endif
    }
}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <CO_RPDOconfigCom>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af04      	add	r7, sp, #16
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
    uint16_t ID;
    CO_ReturnError_t r;

    ID = (uint16_t)COB_IDUsedByRPDO;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	81fb      	strh	r3, [r7, #14]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <CO_RPDOconfigCom+0xb8>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d121      	bne.n	8003ab0 <CO_RPDOconfigCom+0x5c>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	7e9b      	ldrb	r3, [r3, #26]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01d      	beq.n	8003ab0 <CO_RPDOconfigCom+0x5c>
 8003a74:	89fb      	ldrh	r3, [r7, #14]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01a      	beq.n	8003ab0 <CO_RPDOconfigCom+0x5c>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8adb      	ldrh	r3, [r3, #22]
 8003a7e:	89fa      	ldrh	r2, [r7, #14]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d105      	bne.n	8003a90 <CO_RPDOconfigCom+0x3c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	7d1b      	ldrb	r3, [r3, #20]
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	89fb      	ldrh	r3, [r7, #14]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = true;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	765a      	strb	r2, [r3, #25]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	7a1b      	ldrb	r3, [r3, #8]
 8003a9c:	2bf0      	cmp	r3, #240	; 0xf0
 8003a9e:	bf94      	ite	ls
 8003aa0:	2301      	movls	r3, #1
 8003aa2:	2300      	movhi	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aae:	e00a      	b.n	8003ac6 <CO_RPDOconfigCom+0x72>
#endif
    }
    else{
        ID = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = false;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	765a      	strb	r2, [r3, #25]
        CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    }
    r = CO_CANrxBufferInit(
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 8003ad0:	89fa      	ldrh	r2, [r7, #14]
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <CO_RPDOconfigCom+0xbc>)
 8003ad4:	9302      	str	r3, [sp, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003ae2:	f005 fb11 	bl	8009108 <CO_CANrxBufferInit>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	737b      	strb	r3, [r7, #13]
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    if(r != CO_ERROR_NO){
 8003aea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <CO_RPDOconfigCom+0xb0>
        RPDO->valid = false;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	765a      	strb	r2, [r3, #25]
        CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    }
}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	bffff800 	.word	0xbffff800
 8003b10:	080039b5 	.word	0x080039b5

08003b14 <CO_TPDOconfigCom>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b089      	sub	sp, #36	; 0x24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	71fb      	strb	r3, [r7, #7]
    uint16_t ID;

    ID = (uint16_t)COB_IDUsedByTPDO;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	82fb      	strh	r3, [r7, #22]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <CO_TPDOconfigCom+0x8c>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d115      	bne.n	8003b5c <CO_TPDOconfigCom+0x48>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	7e9b      	ldrb	r3, [r3, #26]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d011      	beq.n	8003b5c <CO_TPDOconfigCom+0x48>
 8003b38:	8afb      	ldrh	r3, [r7, #22]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00e      	beq.n	8003b5c <CO_TPDOconfigCom+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8adb      	ldrh	r3, [r3, #22]
 8003b42:	8afa      	ldrh	r2, [r7, #22]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d105      	bne.n	8003b54 <CO_TPDOconfigCom+0x40>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	7d1b      	ldrb	r3, [r3, #20]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	8afb      	ldrh	r3, [r7, #22]
 8003b50:	4413      	add	r3, r2
 8003b52:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = true;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	765a      	strb	r2, [r3, #25]
 8003b5a:	e004      	b.n	8003b66 <CO_TPDOconfigCom+0x52>
    }
    else{
        ID = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = false;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	765a      	strb	r2, [r3, #25]
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	7e9b      	ldrb	r3, [r3, #26]
 8003b74:	8afc      	ldrh	r4, [r7, #22]
 8003b76:	79fa      	ldrb	r2, [r7, #7]
 8003b78:	9201      	str	r2, [sp, #4]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	4622      	mov	r2, r4
 8003b80:	f005 fb18 	bl	80091b4 <CO_CANtxBufferInit>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <CO_TPDOconfigCom+0x84>
        TPDO->valid = false;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	765a      	strb	r2, [r3, #25]
    }
}
 8003b98:	bf00      	nop
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd90      	pop	{r4, r7, pc}
 8003ba0:	bffff800 	.word	0xbffff800

08003ba4 <CO_PDOfindMap>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint16_t)(map>>16);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	0c1b      	lsrs	r3, r3, #16
 8003bb8:	837b      	strh	r3, [r7, #26]
    subIndex = (uint8_t)(map>>8);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	767b      	strb	r3, [r7, #25]
    dataLen = (uint8_t) map;   /* data length in bits */
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	763b      	strb	r3, [r7, #24]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003bc4:	7e3b      	ldrb	r3, [r7, #24]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <CO_PDOfindMap+0x2e>
 8003bce:	4b66      	ldr	r3, [pc, #408]	; (8003d68 <CO_PDOfindMap+0x1c4>)
 8003bd0:	e0c6      	b.n	8003d60 <CO_PDOfindMap+0x1bc>

    dataLen >>= 3;    /* new data length is in bytes */
 8003bd2:	7e3b      	ldrb	r3, [r7, #24]
 8003bd4:	08db      	lsrs	r3, r3, #3
 8003bd6:	763b      	strb	r3, [r7, #24]
    *pLength += dataLen;
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	781a      	ldrb	r2, [r3, #0]
 8003bdc:	7e3b      	ldrb	r3, [r7, #24]
 8003bde:	4413      	add	r3, r2
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d901      	bls.n	8003bf2 <CO_PDOfindMap+0x4e>
 8003bee:	4b5f      	ldr	r3, [pc, #380]	; (8003d6c <CO_PDOfindMap+0x1c8>)
 8003bf0:	e0b6      	b.n	8003d60 <CO_PDOfindMap+0x1bc>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
 8003bf2:	8b7b      	ldrh	r3, [r7, #26]
 8003bf4:	2b07      	cmp	r3, #7
 8003bf6:	d82d      	bhi.n	8003c54 <CO_PDOfindMap+0xb0>
 8003bf8:	7e7b      	ldrb	r3, [r7, #25]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d12a      	bne.n	8003c54 <CO_PDOfindMap+0xb0>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
 8003bfe:	2304      	movs	r3, #4
 8003c00:	77fb      	strb	r3, [r7, #31]

        if(index<2) dummySize = 0;
 8003c02:	8b7b      	ldrh	r3, [r7, #26]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d802      	bhi.n	8003c0e <CO_PDOfindMap+0x6a>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e010      	b.n	8003c30 <CO_PDOfindMap+0x8c>
        else if(index==2 || index==5) dummySize = 1;
 8003c0e:	8b7b      	ldrh	r3, [r7, #26]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d002      	beq.n	8003c1a <CO_PDOfindMap+0x76>
 8003c14:	8b7b      	ldrh	r3, [r7, #26]
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	d102      	bne.n	8003c20 <CO_PDOfindMap+0x7c>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	e007      	b.n	8003c30 <CO_PDOfindMap+0x8c>
        else if(index==3 || index==6) dummySize = 2;
 8003c20:	8b7b      	ldrh	r3, [r7, #26]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d002      	beq.n	8003c2c <CO_PDOfindMap+0x88>
 8003c26:	8b7b      	ldrh	r3, [r7, #26]
 8003c28:	2b06      	cmp	r3, #6
 8003c2a:	d101      	bne.n	8003c30 <CO_PDOfindMap+0x8c>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	77fb      	strb	r3, [r7, #31]

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003c30:	7ffa      	ldrb	r2, [r7, #31]
 8003c32:	7e3b      	ldrb	r3, [r7, #24]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d201      	bcs.n	8003c3c <CO_PDOfindMap+0x98>
 8003c38:	4b4b      	ldr	r3, [pc, #300]	; (8003d68 <CO_PDOfindMap+0x1c4>)
 8003c3a:	e091      	b.n	8003d60 <CO_PDOfindMap+0x1bc>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d103      	bne.n	8003c4a <CO_PDOfindMap+0xa6>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	4a4a      	ldr	r2, [pc, #296]	; (8003d70 <CO_PDOfindMap+0x1cc>)
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e002      	b.n	8003c50 <CO_PDOfindMap+0xac>
        else         *ppData = (uint8_t*) &dummyTX;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	4a49      	ldr	r2, [pc, #292]	; (8003d74 <CO_PDOfindMap+0x1d0>)
 8003c4e:	601a      	str	r2, [r3, #0]

        return 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e085      	b.n	8003d60 <CO_PDOfindMap+0x1bc>
    }

    /* find object in Object Dictionary */
    entryNo = CO_OD_find(SDO, index);
 8003c54:	8b7b      	ldrh	r3, [r7, #26]
 8003c56:	4619      	mov	r1, r3
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f001 faeb 	bl	8005234 <CO_OD_find>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	82fb      	strh	r3, [r7, #22]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
 8003c62:	8afb      	ldrh	r3, [r7, #22]
 8003c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00c      	beq.n	8003c86 <CO_PDOfindMap+0xe2>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 8003c72:	8afa      	ldrh	r2, [r7, #22]
 8003c74:	4613      	mov	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	789b      	ldrb	r3, [r3, #2]
 8003c80:	7e7a      	ldrb	r2, [r7, #25]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d901      	bls.n	8003c8a <CO_PDOfindMap+0xe6>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
 8003c86:	4b3c      	ldr	r3, [pc, #240]	; (8003d78 <CO_PDOfindMap+0x1d4>)
 8003c88:	e06a      	b.n	8003d60 <CO_PDOfindMap+0x1bc>

    attr = CO_OD_getAttribute(SDO, entryNo, subIndex);
 8003c8a:	7e7a      	ldrb	r2, [r7, #25]
 8003c8c:	8afb      	ldrh	r3, [r7, #22]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f001 fb78 	bl	8005386 <CO_OD_getAttribute>
 8003c96:	4603      	mov	r3, r0
 8003c98:	757b      	strb	r3, [r7, #21]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10b      	bne.n	8003cb8 <CO_PDOfindMap+0x114>
 8003ca0:	7d7b      	ldrb	r3, [r7, #21]
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <CO_PDOfindMap+0x110>
 8003caa:	7d7b      	ldrb	r3, [r7, #21]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <CO_PDOfindMap+0x114>
 8003cb4:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <CO_PDOfindMap+0x1c4>)
 8003cb6:	e053      	b.n	8003d60 <CO_PDOfindMap+0x1bc>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <CO_PDOfindMap+0x132>
 8003cbe:	7d7b      	ldrb	r3, [r7, #21]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <CO_PDOfindMap+0x12e>
 8003cc8:	7d7b      	ldrb	r3, [r7, #21]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <CO_PDOfindMap+0x132>
 8003cd2:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <CO_PDOfindMap+0x1c4>)
 8003cd4:	e044      	b.n	8003d60 <CO_PDOfindMap+0x1bc>

    /* is size of variable big enough for map */
    objectLen = CO_OD_getLength(SDO, entryNo, subIndex);
 8003cd6:	7e7a      	ldrb	r2, [r7, #25]
 8003cd8:	8afb      	ldrh	r3, [r7, #22]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f001 fb01 	bl	80052e4 <CO_OD_getLength>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	753b      	strb	r3, [r7, #20]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003ce6:	7d3a      	ldrb	r2, [r7, #20]
 8003ce8:	7e3b      	ldrb	r3, [r7, #24]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d201      	bcs.n	8003cf2 <CO_PDOfindMap+0x14e>
 8003cee:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <CO_PDOfindMap+0x1c4>)
 8003cf0:	e036      	b.n	8003d60 <CO_PDOfindMap+0x1bc>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
 8003cf2:	7d7b      	ldrb	r3, [r7, #21]
 8003cf4:	09db      	lsrs	r3, r3, #7
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) CO_OD_getDataPointer(SDO, entryNo, subIndex);
 8003cfc:	7e7a      	ldrb	r2, [r7, #25]
 8003cfe:	8afb      	ldrh	r3, [r7, #22]
 8003d00:	4619      	mov	r1, r3
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f001 fb93 	bl	800542e <CO_OD_getDataPointer>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
 8003d0e:	7d7b      	ldrb	r3, [r7, #21]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d022      	beq.n	8003d5e <CO_PDOfindMap+0x1ba>
        int16_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	7e3b      	ldrb	r3, [r7, #24]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	83bb      	strh	r3, [r7, #28]
 8003d28:	e013      	b.n	8003d52 <CO_PDOfindMap+0x1ae>
            *pSendIfCOSFlags |= 1<<i;
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b25a      	sxtb	r2, r3
 8003d30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3a:	b25b      	sxtb	r3, r3
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b25b      	sxtb	r3, r3
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
 8003d46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	83bb      	strh	r3, [r7, #28]
 8003d52:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	dbe5      	blt.n	8003d2a <CO_PDOfindMap+0x186>
        }
    }

    return 0;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	06040041 	.word	0x06040041
 8003d6c:	06040042 	.word	0x06040042
 8003d70:	20000a3c 	.word	0x20000a3c
 8003d74:	20000a40 	.word	0x20000a40
 8003d78:	06020000 	.word	0x06020000

08003d7c <CO_RPDOconfigMap>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08e      	sub	sp, #56	; 0x38
 8003d80:	af04      	add	r7, sp, #16
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	3304      	adds	r3, #4
 8003d96:	61fb      	str	r3, [r7, #28]

    for(i=noOfMappedObjects; i>0; i--){
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d9c:	e047      	b.n	8003e2e <CO_RPDOconfigMap+0xb2>
        int16_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	72fb      	strb	r3, [r7, #11]
        uint8_t prevLength = length;
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	1d1a      	adds	r2, r3, #4
 8003daa:	61fa      	str	r2, [r7, #28]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6858      	ldr	r0, [r3, #4]
 8003db4:	f107 020c 	add.w	r2, r7, #12
 8003db8:	f107 030a 	add.w	r3, r7, #10
 8003dbc:	9302      	str	r3, [sp, #8]
 8003dbe:	f107 030b 	add.w	r3, r7, #11
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	f107 0313 	add.w	r3, r7, #19
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	2200      	movs	r2, #0
 8003dce:	6979      	ldr	r1, [r7, #20]
 8003dd0:	f7ff fee8 	bl	8003ba4 <CO_PDOfindMap>
 8003dd4:	6238      	str	r0, [r7, #32]
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
        if(ret){
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <CO_RPDOconfigMap+0x76>
            length = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 8003dea:	211a      	movs	r1, #26
 8003dec:	f7fe fd81 	bl	80028f2 <CO_errorReport>
 8003df0:	e021      	b.n	8003e36 <CO_RPDOconfigMap+0xba>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 8003df2:	7e7b      	ldrb	r3, [r7, #25]
 8003df4:	837b      	strh	r3, [r7, #26]
 8003df6:	e00f      	b.n	8003e18 <CO_RPDOconfigMap+0x9c>
            RPDO->mapPointer[j] = pData++;
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	1c53      	adds	r3, r2, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	3306      	adds	r3, #6
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
 8003e0c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3301      	adds	r3, #1
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	837b      	strh	r3, [r7, #26]
 8003e18:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003e1c:	7cfa      	ldrb	r2, [r7, #19]
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	dbea      	blt.n	8003df8 <CO_RPDOconfigMap+0x7c>
    for(i=noOfMappedObjects; i>0; i--){
 8003e22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	dcb3      	bgt.n	8003d9e <CO_RPDOconfigMap+0x22>
        }
#endif

    }

    RPDO->dataLength = length;
 8003e36:	7cfa      	ldrb	r2, [r7, #19]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	769a      	strb	r2, [r3, #26]

    return ret;
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <CO_TPDOconfigMap>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08e      	sub	sp, #56	; 0x38
 8003e4a:	af04      	add	r7, sp, #16
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	61fb      	str	r3, [r7, #28]

    TPDO->sendIfCOSFlags = 0;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for(i=noOfMappedObjects; i>0; i--){
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e6e:	e045      	b.n	8003efc <CO_TPDOconfigMap+0xb6>
        int16_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	1d1a      	adds	r2, r3, #4
 8003e78:	61fa      	str	r2, [r7, #28]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6858      	ldr	r0, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3344      	adds	r3, #68	; 0x44
 8003e86:	f107 010c 	add.w	r1, r7, #12
 8003e8a:	f107 020b 	add.w	r2, r7, #11
 8003e8e:	9202      	str	r2, [sp, #8]
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	f107 0313 	add.w	r3, r7, #19
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	6979      	ldr	r1, [r7, #20]
 8003e9e:	f7ff fe81 	bl	8003ba4 <CO_PDOfindMap>
 8003ea2:	6238      	str	r0, [r7, #32]
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
        if(ret){
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <CO_TPDOconfigMap+0x7a>
            length = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 8003eb8:	211a      	movs	r1, #26
 8003eba:	f7fe fd1a 	bl	80028f2 <CO_errorReport>
 8003ebe:	e021      	b.n	8003f04 <CO_TPDOconfigMap+0xbe>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 8003ec0:	7e7b      	ldrb	r3, [r7, #25]
 8003ec2:	837b      	strh	r3, [r7, #26]
 8003ec4:	e00f      	b.n	8003ee6 <CO_TPDOconfigMap+0xa0>
            TPDO->mapPointer[j] = pData++;
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	1c53      	adds	r3, r2, #1
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	3306      	adds	r3, #6
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
 8003eda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	837b      	strh	r3, [r7, #26]
 8003ee6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003eea:	7cfa      	ldrb	r2, [r7, #19]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	dbea      	blt.n	8003ec6 <CO_TPDOconfigMap+0x80>
    for(i=noOfMappedObjects; i>0; i--){
 8003ef0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003efc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	dcb5      	bgt.n	8003e70 <CO_TPDOconfigMap+0x2a>
        }
#endif

    }

    TPDO->dataLength = length;
 8003f04:	7cfa      	ldrb	r2, [r7, #19]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	769a      	strb	r2, [r3, #26]

    return ret;
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3728      	adds	r7, #40	; 0x28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <CO_ODF_RPDOcom>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	617b      	str	r3, [r7, #20]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7ddb      	ldrb	r3, [r3, #23]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d029      	beq.n	8003f7e <CO_ODF_RPDOcom+0x6a>
        if(ODF_arg->subIndex == 1){
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7d9b      	ldrb	r3, [r3, #22]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d123      	bne.n	8003f7a <CO_ODF_RPDOcom+0x66>
            uint32_t value = CO_getUint32(ODF_arg->data);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fd20 	bl	800397c <CO_getUint32>
 8003f3c:	61f8      	str	r0, [r7, #28]

            /* if default COB ID is used, write default value here */
            if(((value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	8ad2      	ldrh	r2, [r2, #22]
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d109      	bne.n	8003f5e <CO_ODF_RPDOcom+0x4a>
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	8adb      	ldrh	r3, [r3, #22]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <CO_ODF_RPDOcom+0x4a>
                value += RPDO->nodeId;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	7d1b      	ldrb	r3, [r3, #20]
 8003f56:	461a      	mov	r2, r3
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	61fb      	str	r3, [r7, #28]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) value |= 0x80000000L;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	7e5b      	ldrb	r3, [r3, #25]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <CO_ODF_RPDOcom+0x5a>
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f6c:	61fb      	str	r3, [r7, #28]

            CO_setUint32(ODF_arg->data, value);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	69f9      	ldr	r1, [r7, #28]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fd0f 	bl	8003998 <CO_setUint32>
        }
        return CO_SDO_AB_NONE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e07e      	b.n	800407c <CO_ODF_RPDOcom+0x168>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	7e1b      	ldrb	r3, [r3, #24]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <CO_ODF_RPDOcom+0x7a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8003f8a:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <CO_ODF_RPDOcom+0x170>)
 8003f8c:	e076      	b.n	800407c <CO_ODF_RPDOcom+0x168>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f993 3000 	ldrsb.w	r3, [r3]
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d107      	bne.n	8003faa <CO_ODF_RPDOcom+0x96>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	7e1b      	ldrb	r3, [r3, #24]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <CO_ODF_RPDOcom+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8003fa6:	4b38      	ldr	r3, [pc, #224]	; (8004088 <CO_ODF_RPDOcom+0x174>)
 8003fa8:	e068      	b.n	800407c <CO_ODF_RPDOcom+0x168>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	7d9b      	ldrb	r3, [r3, #22]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d13a      	bne.n	8004028 <CO_ODF_RPDOcom+0x114>
        uint32_t value = CO_getUint32(ODF_arg->data);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fce0 	bl	800397c <CO_getUint32>
 8003fbc:	61b8      	str	r0, [r7, #24]

        /* bits 11...29 must be zero */
        if(value & 0x3FFF8000L)
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4b32      	ldr	r3, [pc, #200]	; (800408c <CO_ODF_RPDOcom+0x178>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <CO_ODF_RPDOcom+0xb8>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8003fc8:	4b31      	ldr	r3, [pc, #196]	; (8004090 <CO_ODF_RPDOcom+0x17c>)
 8003fca:	e057      	b.n	800407c <CO_ODF_RPDOcom+0x168>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	8ad2      	ldrh	r2, [r2, #22]
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	7d12      	ldrb	r2, [r2, #20]
 8003fda:	440a      	add	r2, r1
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d10f      	bne.n	8004000 <CO_ODF_RPDOcom+0xec>
            value &= 0xC0000000L;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003fe6:	61bb      	str	r3, [r7, #24]
            value += RPDO->defaultCOB_ID;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	8adb      	ldrh	r3, [r3, #22]
 8003fec:	461a      	mov	r2, r3
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
            CO_setUint32(ODF_arg->data, value);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	69b9      	ldr	r1, [r7, #24]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fccc 	bl	8003998 <CO_setUint32>
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	7e5b      	ldrb	r3, [r3, #25]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <CO_ODF_RPDOcom+0x10a>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	4053      	eors	r3, r2
 8004012:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <CO_ODF_RPDOcom+0x10a>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 800401a:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <CO_ODF_RPDOcom+0x17c>)
 800401c:	e02e      	b.n	800407c <CO_ODF_RPDOcom+0x168>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, value);
 800401e:	69b9      	ldr	r1, [r7, #24]
 8004020:	6978      	ldr	r0, [r7, #20]
 8004022:	f7ff fd17 	bl	8003a54 <CO_RPDOconfigCom>
 8004026:	e028      	b.n	800407a <CO_ODF_RPDOcom+0x166>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	7d9b      	ldrb	r3, [r3, #22]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d124      	bne.n	800407a <CO_ODF_RPDOcom+0x166>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        bool_t synchronousPrev = RPDO->synchronous;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800403c:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2bf0      	cmp	r3, #240	; 0xf0
 8004044:	d905      	bls.n	8004052 <CO_ODF_RPDOcom+0x13e>
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2bfd      	cmp	r3, #253	; 0xfd
 800404c:	d801      	bhi.n	8004052 <CO_ODF_RPDOcom+0x13e>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <CO_ODF_RPDOcom+0x17c>)
 8004050:	e014      	b.n	800407c <CO_ODF_RPDOcom+0x168>

        RPDO->synchronous = (*value <= 240) ? true : false;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2bf0      	cmp	r3, #240	; 0xf0
 8004058:	bf94      	ite	ls
 800405a:	2301      	movls	r3, #1
 800405c:	2300      	movhi	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	429a      	cmp	r2, r3
 8004072:	d002      	beq.n	800407a <CO_ODF_RPDOcom+0x166>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2200      	movs	r2, #0
 8004078:	649a      	str	r2, [r3, #72]	; 0x48
        if(*value <= 253)
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
#endif
    }

    return CO_SDO_AB_NONE;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3720      	adds	r7, #32
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	06010002 	.word	0x06010002
 8004088:	08000022 	.word	0x08000022
 800408c:	3fff8000 	.word	0x3fff8000
 8004090:	06090030 	.word	0x06090030

08004094 <CO_ODF_TPDOcom>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	617b      	str	r3, [r7, #20]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7d9b      	ldrb	r3, [r3, #22]
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d101      	bne.n	80040ae <CO_ODF_TPDOcom+0x1a>
 80040aa:	4b73      	ldr	r3, [pc, #460]	; (8004278 <CO_ODF_TPDOcom+0x1e4>)
 80040ac:	e0e0      	b.n	8004270 <CO_ODF_TPDOcom+0x1dc>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	7ddb      	ldrb	r3, [r3, #23]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d029      	beq.n	800410a <CO_ODF_TPDOcom+0x76>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	7d9b      	ldrb	r3, [r3, #22]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d123      	bne.n	8004106 <CO_ODF_TPDOcom+0x72>
            uint32_t value = CO_getUint32(ODF_arg->data);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fc5a 	bl	800397c <CO_getUint32>
 80040c8:	61f8      	str	r0, [r7, #28]

            /* if default COB ID is used, write default value here */
            if(((value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	8ad2      	ldrh	r2, [r2, #22]
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d109      	bne.n	80040ea <CO_ODF_TPDOcom+0x56>
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	8adb      	ldrh	r3, [r3, #22]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <CO_ODF_TPDOcom+0x56>
                value += TPDO->nodeId;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	7d1b      	ldrb	r3, [r3, #20]
 80040e2:	461a      	mov	r2, r3
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	61fb      	str	r3, [r7, #28]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) value |= 0x80000000L;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	7e5b      	ldrb	r3, [r3, #25]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <CO_ODF_TPDOcom+0x66>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040f8:	61fb      	str	r3, [r7, #28]

            CO_setUint32(ODF_arg->data, value);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	69f9      	ldr	r1, [r7, #28]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fc49 	bl	8003998 <CO_setUint32>
        }
        return CO_SDO_AB_NONE;
 8004106:	2300      	movs	r3, #0
 8004108:	e0b2      	b.n	8004270 <CO_ODF_TPDOcom+0x1dc>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	7e1b      	ldrb	r3, [r3, #24]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <CO_ODF_TPDOcom+0x86>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8004116:	4b59      	ldr	r3, [pc, #356]	; (800427c <CO_ODF_TPDOcom+0x1e8>)
 8004118:	e0aa      	b.n	8004270 <CO_ODF_TPDOcom+0x1dc>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f993 3000 	ldrsb.w	r3, [r3]
 8004122:	2b05      	cmp	r3, #5
 8004124:	d107      	bne.n	8004136 <CO_ODF_TPDOcom+0xa2>
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	7e1b      	ldrb	r3, [r3, #24]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <CO_ODF_TPDOcom+0xa2>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8004132:	4b53      	ldr	r3, [pc, #332]	; (8004280 <CO_ODF_TPDOcom+0x1ec>)
 8004134:	e09c      	b.n	8004270 <CO_ODF_TPDOcom+0x1dc>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7d9b      	ldrb	r3, [r3, #22]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d143      	bne.n	80041c6 <CO_ODF_TPDOcom+0x132>
        uint32_t value = CO_getUint32(ODF_arg->data);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fc1a 	bl	800397c <CO_getUint32>
 8004148:	61b8      	str	r0, [r7, #24]

        /* bits 11...29 must be zero */
        if(value & 0x3FFF8000L)
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4b4d      	ldr	r3, [pc, #308]	; (8004284 <CO_ODF_TPDOcom+0x1f0>)
 800414e:	4013      	ands	r3, r2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <CO_ODF_TPDOcom+0xc4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004154:	4b4c      	ldr	r3, [pc, #304]	; (8004288 <CO_ODF_TPDOcom+0x1f4>)
 8004156:	e08b      	b.n	8004270 <CO_ODF_TPDOcom+0x1dc>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	b29b      	uxth	r3, r3
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	8ad2      	ldrh	r2, [r2, #22]
 8004160:	4611      	mov	r1, r2
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	7d12      	ldrb	r2, [r2, #20]
 8004166:	440a      	add	r2, r1
 8004168:	4293      	cmp	r3, r2
 800416a:	d10f      	bne.n	800418c <CO_ODF_TPDOcom+0xf8>
            value &= 0xC0000000L;
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004172:	61bb      	str	r3, [r7, #24]
            value += TPDO->defaultCOB_ID;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	8adb      	ldrh	r3, [r3, #22]
 8004178:	461a      	mov	r2, r3
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	4413      	add	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]

            CO_setUint32(ODF_arg->data, value);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fc06 	bl	8003998 <CO_setUint32>
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	7e5b      	ldrb	r3, [r3, #25]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <CO_ODF_TPDOcom+0x116>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	4053      	eors	r3, r2
 800419e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <CO_ODF_TPDOcom+0x116>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 80041a6:	4b38      	ldr	r3, [pc, #224]	; (8004288 <CO_ODF_TPDOcom+0x1f4>)
 80041a8:	e062      	b.n	8004270 <CO_ODF_TPDOcom+0x1dc>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, value, TPDO->CANtxBuff->syncFlag);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ae:	7b9b      	ldrb	r3, [r3, #14]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	69b9      	ldr	r1, [r7, #24]
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff fcac 	bl	8003b14 <CO_TPDOconfigCom>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	22ff      	movs	r2, #255	; 0xff
 80041c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c4:	e053      	b.n	800426e <CO_ODF_TPDOcom+0x1da>
#endif
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	7d9b      	ldrb	r3, [r3, #22]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d11b      	bne.n	8004206 <CO_ODF_TPDOcom+0x172>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2bf0      	cmp	r3, #240	; 0xf0
 80041da:	d905      	bls.n	80041e8 <CO_ODF_TPDOcom+0x154>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2bfd      	cmp	r3, #253	; 0xfd
 80041e2:	d801      	bhi.n	80041e8 <CO_ODF_TPDOcom+0x154>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 80041e4:	4b28      	ldr	r3, [pc, #160]	; (8004288 <CO_ODF_TPDOcom+0x1f4>)
 80041e6:	e043      	b.n	8004270 <CO_ODF_TPDOcom+0x1dc>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2bf0      	cmp	r3, #240	; 0xf0
 80041ee:	bf94      	ite	ls
 80041f0:	2301      	movls	r3, #1
 80041f2:	2300      	movhi	r3, #0
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	22ff      	movs	r2, #255	; 0xff
 8004200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004204:	e033      	b.n	800426e <CO_ODF_TPDOcom+0x1da>
        /* values from 0...253 are not valid */
        if(*value <= 253)
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
#endif
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	7d9b      	ldrb	r3, [r3, #22]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d109      	bne.n	8004222 <CO_ODF_TPDOcom+0x18e>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	7e5b      	ldrb	r3, [r3, #25]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <CO_ODF_TPDOcom+0x186>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004216:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <CO_ODF_TPDOcom+0x1f4>)
 8004218:	e02a      	b.n	8004270 <CO_ODF_TPDOcom+0x1dc>

        TPDO->inhibitTimer = 0;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2200      	movs	r2, #0
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004220:	e025      	b.n	800426e <CO_ODF_TPDOcom+0x1da>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	7d9b      	ldrb	r3, [r3, #22]
 8004226:	2b05      	cmp	r3, #5
 8004228:	d10e      	bne.n	8004248 <CO_ODF_TPDOcom+0x1b4>
        uint16_t value = CO_getUint16(ODF_arg->data);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fb95 	bl	800395e <CO_getUint16>
 8004234:	4603      	mov	r3, r0
 8004236:	81fb      	strh	r3, [r7, #14]

        TPDO->eventTimer = ((uint32_t) value) * 1000;
 8004238:	89fb      	ldrh	r3, [r7, #14]
 800423a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800423e:	fb03 f202 	mul.w	r2, r3, r2
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
 8004246:	e012      	b.n	800426e <CO_ODF_TPDOcom+0x1da>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7d9b      	ldrb	r3, [r3, #22]
 800424c:	2b06      	cmp	r3, #6
 800424e:	d10e      	bne.n	800426e <CO_ODF_TPDOcom+0x1da>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	613b      	str	r3, [r7, #16]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	7e5b      	ldrb	r3, [r3, #25]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <CO_ODF_TPDOcom+0x1ce>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <CO_ODF_TPDOcom+0x1f4>)
 8004260:	e006      	b.n	8004270 <CO_ODF_TPDOcom+0x1dc>

        /* values from 240...255 are not valid */
        if(*value > 240)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2bf0      	cmp	r3, #240	; 0xf0
 8004268:	d901      	bls.n	800426e <CO_ODF_TPDOcom+0x1da>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 800426a:	4b07      	ldr	r3, [pc, #28]	; (8004288 <CO_ODF_TPDOcom+0x1f4>)
 800426c:	e000      	b.n	8004270 <CO_ODF_TPDOcom+0x1dc>
    }

    return CO_SDO_AB_NONE;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	06090011 	.word	0x06090011
 800427c:	06010002 	.word	0x06010002
 8004280:	08000022 	.word	0x08000022
 8004284:	3fff8000 	.word	0x3fff8000
 8004288:	06090030 	.word	0x06090030

0800428c <CO_ODF_RPDOmap>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
 800428c:	b580      	push	{r7, lr}
 800428e:	b08c      	sub	sp, #48	; 0x30
 8004290:	af04      	add	r7, sp, #16
 8004292:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7ddb      	ldrb	r3, [r3, #23]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00f      	beq.n	80042c2 <CO_ODF_RPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	7d9b      	ldrb	r3, [r3, #22]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <CO_ODF_RPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	7e9b      	ldrb	r3, [r3, #26]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <CO_ODF_RPDOmap+0x32>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 80042be:	2300      	movs	r3, #0
 80042c0:	e054      	b.n	800436c <CO_ODF_RPDOmap+0xe0>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	7e1b      	ldrb	r3, [r3, #24]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <CO_ODF_RPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 80042ce:	4b29      	ldr	r3, [pc, #164]	; (8004374 <CO_ODF_RPDOmap+0xe8>)
 80042d0:	e04c      	b.n	800436c <CO_ODF_RPDOmap+0xe0>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f993 3000 	ldrsb.w	r3, [r3]
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d107      	bne.n	80042ee <CO_ODF_RPDOmap+0x62>
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	7e1b      	ldrb	r3, [r3, #24]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <CO_ODF_RPDOmap+0x62>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 80042ea:	4b23      	ldr	r3, [pc, #140]	; (8004378 <CO_ODF_RPDOmap+0xec>)
 80042ec:	e03e      	b.n	800436c <CO_ODF_RPDOmap+0xe0>
    if(RPDO->valid)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	7e5b      	ldrb	r3, [r3, #25]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <CO_ODF_RPDOmap+0x6e>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 80042f6:	4b21      	ldr	r3, [pc, #132]	; (800437c <CO_ODF_RPDOmap+0xf0>)
 80042f8:	e038      	b.n	800436c <CO_ODF_RPDOmap+0xe0>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	7d9b      	ldrb	r3, [r3, #22]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d110      	bne.n	8004324 <CO_ODF_RPDOmap+0x98>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d901      	bls.n	8004314 <CO_ODF_RPDOmap+0x88>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <CO_ODF_RPDOmap+0xf4>)
 8004312:	e02b      	b.n	800436c <CO_ODF_RPDOmap+0xe0>

        /* configure mapping */
        return (CO_SDO_abortCode_t) CO_RPDOconfigMap(RPDO, *value);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	4619      	mov	r1, r3
 800431a:	69f8      	ldr	r0, [r7, #28]
 800431c:	f7ff fd2e 	bl	8003d7c <CO_RPDOconfigMap>
 8004320:	4603      	mov	r3, r0
 8004322:	e023      	b.n	800436c <CO_ODF_RPDOmap+0xe0>
    }

    /* mappedObject */
    else{
        uint32_t value = CO_getUint32(ODF_arg->data);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fb27 	bl	800397c <CO_getUint32>
 800432e:	61b8      	str	r0, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	7e9b      	ldrb	r3, [r3, #26]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <CO_ODF_RPDOmap+0xb8>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004340:	4b0e      	ldr	r3, [pc, #56]	; (800437c <CO_ODF_RPDOmap+0xf0>)
 8004342:	e013      	b.n	800436c <CO_ODF_RPDOmap+0xe0>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t) CO_PDOfindMap(
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	6858      	ldr	r0, [r3, #4]
 8004348:	f107 020c 	add.w	r2, r7, #12
 800434c:	f107 0309 	add.w	r3, r7, #9
 8004350:	9302      	str	r3, [sp, #8]
 8004352:	f107 030a 	add.w	r3, r7, #10
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	f107 030b 	add.w	r3, r7, #11
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	4613      	mov	r3, r2
 8004360:	2200      	movs	r2, #0
 8004362:	69b9      	ldr	r1, [r7, #24]
 8004364:	f7ff fc1e 	bl	8003ba4 <CO_PDOfindMap>
 8004368:	4603      	mov	r3, r0
 800436a:	bf00      	nop
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	06010002 	.word	0x06010002
 8004378:	08000022 	.word	0x08000022
 800437c:	06010000 	.word	0x06010000
 8004380:	06040042 	.word	0x06040042

08004384 <CO_ODF_TPDOmap>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
 8004384:	b580      	push	{r7, lr}
 8004386:	b08c      	sub	sp, #48	; 0x30
 8004388:	af04      	add	r7, sp, #16
 800438a:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	7ddb      	ldrb	r3, [r3, #23]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00f      	beq.n	80043ba <CO_ODF_TPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	7d9b      	ldrb	r3, [r3, #22]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <CO_ODF_TPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	7e9b      	ldrb	r3, [r3, #26]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d102      	bne.n	80043b6 <CO_ODF_TPDOmap+0x32>
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e054      	b.n	8004464 <CO_ODF_TPDOmap+0xe0>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	7e1b      	ldrb	r3, [r3, #24]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <CO_ODF_TPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 80043c6:	4b29      	ldr	r3, [pc, #164]	; (800446c <CO_ODF_TPDOmap+0xe8>)
 80043c8:	e04c      	b.n	8004464 <CO_ODF_TPDOmap+0xe0>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f993 3000 	ldrsb.w	r3, [r3]
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d107      	bne.n	80043e6 <CO_ODF_TPDOmap+0x62>
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	7e1b      	ldrb	r3, [r3, #24]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <CO_ODF_TPDOmap+0x62>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 80043e2:	4b23      	ldr	r3, [pc, #140]	; (8004470 <CO_ODF_TPDOmap+0xec>)
 80043e4:	e03e      	b.n	8004464 <CO_ODF_TPDOmap+0xe0>
    if(TPDO->valid)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	7e5b      	ldrb	r3, [r3, #25]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <CO_ODF_TPDOmap+0x6e>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 80043ee:	4b21      	ldr	r3, [pc, #132]	; (8004474 <CO_ODF_TPDOmap+0xf0>)
 80043f0:	e038      	b.n	8004464 <CO_ODF_TPDOmap+0xe0>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	7d9b      	ldrb	r3, [r3, #22]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d110      	bne.n	800441c <CO_ODF_TPDOmap+0x98>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d901      	bls.n	800440c <CO_ODF_TPDOmap+0x88>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <CO_ODF_TPDOmap+0xf4>)
 800440a:	e02b      	b.n	8004464 <CO_ODF_TPDOmap+0xe0>

        /* configure mapping */
        return (CO_SDO_abortCode_t) CO_TPDOconfigMap(TPDO, *value);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	4619      	mov	r1, r3
 8004412:	69f8      	ldr	r0, [r7, #28]
 8004414:	f7ff fd17 	bl	8003e46 <CO_TPDOconfigMap>
 8004418:	4603      	mov	r3, r0
 800441a:	e023      	b.n	8004464 <CO_ODF_TPDOmap+0xe0>
    }

    /* mappedObject */
    else{
        uint32_t value = CO_getUint32(ODF_arg->data);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff faab 	bl	800397c <CO_getUint32>
 8004426:	61b8      	str	r0, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	7e9b      	ldrb	r3, [r3, #26]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <CO_ODF_TPDOmap+0xb8>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004438:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <CO_ODF_TPDOmap+0xf0>)
 800443a:	e013      	b.n	8004464 <CO_ODF_TPDOmap+0xe0>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t) CO_PDOfindMap(
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	6858      	ldr	r0, [r3, #4]
 8004440:	f107 020c 	add.w	r2, r7, #12
 8004444:	f107 0309 	add.w	r3, r7, #9
 8004448:	9302      	str	r3, [sp, #8]
 800444a:	f107 030a 	add.w	r3, r7, #10
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	f107 030b 	add.w	r3, r7, #11
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	4613      	mov	r3, r2
 8004458:	2201      	movs	r2, #1
 800445a:	69b9      	ldr	r1, [r7, #24]
 800445c:	f7ff fba2 	bl	8003ba4 <CO_PDOfindMap>
 8004460:	4603      	mov	r3, r0
 8004462:	bf00      	nop
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 8004464:	4618      	mov	r0, r3
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	06010002 	.word	0x06010002
 8004470:	08000022 	.word	0x08000022
 8004474:	06010000 	.word	0x06010000
 8004478:	06040042 	.word	0x06040042

0800447c <CO_RPDO_init>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint16_t                idx_RPDOCommPar,
        uint16_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d011      	beq.n	80044b4 <CO_RPDO_init+0x38>
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00e      	beq.n	80044b4 <CO_RPDO_init+0x38>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <CO_RPDO_init+0x38>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d008      	beq.n	80044b4 <CO_RPDO_init+0x38>
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <CO_RPDO_init+0x38>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <CO_RPDO_init+0x38>
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <CO_RPDO_init+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295
 80044b8:	e04f      	b.n	800455a <CO_RPDO_init+0xde>
    }

    /* Configure object variables */
    RPDO->em = em;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	605a      	str	r2, [r3, #4]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    RPDO->SYNC = (CO_SYNC_t *)SYNC;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
    RPDO->RPDOCommPar = RPDOCommPar;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d0:	609a      	str	r2, [r3, #8]
    RPDO->RPDOMapPar = RPDOMapPar;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d6:	60da      	str	r2, [r3, #12]
    RPDO->operatingState = operatingState;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	611a      	str	r2, [r3, #16]
    RPDO->nodeId = nodeId;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	7f3a      	ldrb	r2, [r7, #28]
 80044e2:	751a      	strb	r2, [r3, #20]
    RPDO->defaultCOB_ID = defaultCOB_ID;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8c3a      	ldrh	r2, [r7, #32]
 80044e8:	82da      	strh	r2, [r3, #22]
    RPDO->restrictionFlags = restrictionFlags;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80044f0:	761a      	strb	r2, [r3, #24]
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_CALLBACK_PRE
    RPDO->pFunctSignalPre = NULL;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	65da      	str	r2, [r3, #92]	; 0x5c
    RPDO->functSignalObjectPre = NULL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	661a      	str	r2, [r3, #96]	; 0x60
#endif

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    CO_OD_configure(SDO, idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
 80044fe:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8004500:	2300      	movs	r3, #0
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	2300      	movs	r3, #0
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4a16      	ldr	r2, [pc, #88]	; (8004564 <CO_RPDO_init+0xe8>)
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fe39 	bl	8005184 <CO_OD_configure>
    CO_OD_configure(SDO, idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
 8004512:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004514:	2300      	movs	r3, #0
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	2300      	movs	r3, #0
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4a12      	ldr	r2, [pc, #72]	; (8004568 <CO_RPDO_init+0xec>)
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fe2f 	bl	8005184 <CO_OD_configure>

    /* configure communication and mapping */
    CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    RPDO->CANdevRx = CANdevRx;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004536:	665a      	str	r2, [r3, #100]	; 0x64
    RPDO->CANdevRxIdx = CANdevRxIdx;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800453c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	4619      	mov	r1, r3
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff fc18 	bl	8003d7c <CO_RPDOconfigMap>
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4619      	mov	r1, r3
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff fa7e 	bl	8003a54 <CO_RPDOconfigCom>

    return CO_ERROR_NO;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	08003f15 	.word	0x08003f15
 8004568:	0800428d 	.word	0x0800428d

0800456c <CO_TPDO_init>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint16_t                idx_TPDOCommPar,
        uint16_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d011      	beq.n	80045a4 <CO_TPDO_init+0x38>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00e      	beq.n	80045a4 <CO_TPDO_init+0x38>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <CO_TPDO_init+0x38>
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <CO_TPDO_init+0x38>
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <CO_TPDO_init+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <CO_TPDO_init+0x38>
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <CO_TPDO_init+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295
 80045a8:	e070      	b.n	800468c <CO_TPDO_init+0x120>
    }

    /* Configure object variables */
    TPDO->em = em;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	605a      	str	r2, [r3, #4]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->SYNC = (CO_SYNC_t *)SYNC;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    TPDO->TPDOCommPar = TPDOCommPar;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c0:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c6:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	7f3a      	ldrb	r2, [r7, #28]
 80045d2:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8c3a      	ldrh	r2, [r7, #32]
 80045d8:	82da      	strh	r2, [r3, #22]
    TPDO->restrictionFlags = restrictionFlags;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80045e0:	761a      	strb	r2, [r3, #24]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    CO_OD_configure(SDO, idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
 80045e2:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80045e4:	2300      	movs	r3, #0
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	2300      	movs	r3, #0
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a29      	ldr	r2, [pc, #164]	; (8004694 <CO_TPDO_init+0x128>)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fdc7 	bl	8005184 <CO_OD_configure>
    CO_OD_configure(SDO, idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
 80045f6:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80045f8:	2300      	movs	r3, #0
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	2300      	movs	r3, #0
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a25      	ldr	r2, [pc, #148]	; (8004698 <CO_TPDO_init+0x12c>)
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fdbd 	bl	8005184 <CO_OD_configure>

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800460e:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004614:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    TPDO->inhibitTimer = 0;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	63da      	str	r2, [r3, #60]	; 0x3c
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
 800461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004620:	89db      	ldrh	r3, [r3, #14]
 8004622:	461a      	mov	r2, r3
 8004624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004628:	fb03 f202 	mul.w	r2, r3, r2
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	7a1b      	ldrb	r3, [r3, #8]
 8004634:	2bfd      	cmp	r3, #253	; 0xfd
 8004636:	d902      	bls.n	800463e <CO_TPDO_init+0xd2>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	76da      	strb	r2, [r3, #27]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	4619      	mov	r1, r3
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fbfe 	bl	8003e46 <CO_TPDOconfigMap>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncCounter = 255;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	22ff      	movs	r2, #255	; 0xff
 800464e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	7a1b      	ldrb	r3, [r3, #8]
 800465a:	2bf0      	cmp	r3, #240	; 0xf0
 800465c:	bf94      	ite	ls
 800465e:	2301      	movls	r3, #1
 8004660:	2300      	movhi	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff fa54 	bl	8003b14 <CO_TPDOconfigCom>

    if((TPDOCommPar->transmissionType>240 &&
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	7a1b      	ldrb	r3, [r3, #8]
 8004670:	2bf0      	cmp	r3, #240	; 0xf0
 8004672:	d903      	bls.n	800467c <CO_TPDO_init+0x110>
         TPDOCommPar->transmissionType<254) ||
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
 8004678:	2bfd      	cmp	r3, #253	; 0xfd
 800467a:	d903      	bls.n	8004684 <CO_TPDO_init+0x118>
         TPDOCommPar->SYNCStartValue>240){
 800467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467e:	7c1b      	ldrb	r3, [r3, #16]
         TPDOCommPar->transmissionType<254) ||
 8004680:	2bf0      	cmp	r3, #240	; 0xf0
 8004682:	d902      	bls.n	800468a <CO_TPDO_init+0x11e>
            TPDO->valid = false;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	765a      	strb	r2, [r3, #25]
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, 0);
    if(TPDOCommPar->transmissionType<254)
        TPDO->valid = false;
#endif

    return CO_ERROR_NO;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	08004095 	.word	0x08004095
 8004698:	08004385 	.word	0x08004385

0800469c <CO_TPDOisCOS>:


/******************************************************************************/
uint8_t CO_TPDOisCOS(CO_TPDO_t *TPDO){
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	7e92      	ldrb	r2, [r2, #26]
 80046ac:	4413      	add	r3, r2
 80046ae:	3305      	adds	r3, #5
 80046b0:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	7e9b      	ldrb	r3, [r3, #26]
 80046b6:	3306      	adds	r3, #6
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	3304      	adds	r3, #4
 80046c0:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	7e9b      	ldrb	r3, [r3, #26]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	2b07      	cmp	r3, #7
 80046ca:	f200 80c2 	bhi.w	8004852 <CO_TPDOisCOS+0x1b6>
 80046ce:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <CO_TPDOisCOS+0x38>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	08004827 	.word	0x08004827
 80046d8:	080047fb 	.word	0x080047fb
 80046dc:	080047cf 	.word	0x080047cf
 80046e0:	080047a3 	.word	0x080047a3
 80046e4:	08004777 	.word	0x08004777
 80046e8:	0800474b 	.word	0x0800474b
 80046ec:	0800471f 	.word	0x0800471f
 80046f0:	080046f5 	.word	0x080046f5
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1; // fallthrough
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	781a      	ldrb	r2, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	3b04      	subs	r3, #4
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d007      	beq.n	800471e <CO_TPDOisCOS+0x82>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004714:	b25b      	sxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	da01      	bge.n	800471e <CO_TPDOisCOS+0x82>
 800471a:	2301      	movs	r3, #1
 800471c:	e09a      	b.n	8004854 <CO_TPDOisCOS+0x1b8>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1; // fallthrough
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3b01      	subs	r3, #1
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	781a      	ldrb	r2, [r3, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	3b04      	subs	r3, #4
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d008      	beq.n	800474a <CO_TPDOisCOS+0xae>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <CO_TPDOisCOS+0xae>
 8004746:	2301      	movs	r3, #1
 8004748:	e084      	b.n	8004854 <CO_TPDOisCOS+0x1b8>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1; // fallthrough
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3b01      	subs	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	781a      	ldrb	r2, [r3, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	3b04      	subs	r3, #4
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d008      	beq.n	8004776 <CO_TPDOisCOS+0xda>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <CO_TPDOisCOS+0xda>
 8004772:	2301      	movs	r3, #1
 8004774:	e06e      	b.n	8004854 <CO_TPDOisCOS+0x1b8>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1; // fallthrough
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3b01      	subs	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	781a      	ldrb	r2, [r3, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	3b04      	subs	r3, #4
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d008      	beq.n	80047a2 <CO_TPDOisCOS+0x106>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <CO_TPDOisCOS+0x106>
 800479e:	2301      	movs	r3, #1
 80047a0:	e058      	b.n	8004854 <CO_TPDOisCOS+0x1b8>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1; // fallthrough
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	781a      	ldrb	r2, [r3, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	3b04      	subs	r3, #4
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d008      	beq.n	80047ce <CO_TPDOisCOS+0x132>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <CO_TPDOisCOS+0x132>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e042      	b.n	8004854 <CO_TPDOisCOS+0x1b8>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1; // fallthrough
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	3b04      	subs	r3, #4
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d008      	beq.n	80047fa <CO_TPDOisCOS+0x15e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <CO_TPDOisCOS+0x15e>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e02c      	b.n	8004854 <CO_TPDOisCOS+0x1b8>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1; // fallthrough
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	781a      	ldrb	r2, [r3, #0]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	3b04      	subs	r3, #4
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d008      	beq.n	8004826 <CO_TPDOisCOS+0x18a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <CO_TPDOisCOS+0x18a>
 8004822:	2301      	movs	r3, #1
 8004824:	e016      	b.n	8004854 <CO_TPDOisCOS+0x1b8>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1; // fallthrough
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3b01      	subs	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	781a      	ldrb	r2, [r3, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	3b04      	subs	r3, #4
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d008      	beq.n	8004852 <CO_TPDOisCOS+0x1b6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <CO_TPDOisCOS+0x1b6>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <CO_TPDOisCOS+0x1b8>
    }

    return 0;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <CO_TPDOsend>:

/******************************************************************************/
int16_t CO_TPDOsend(CO_TPDO_t *TPDO){
 8004860:	b580      	push	{r7, lr}
 8004862:	b094      	sub	sp, #80	; 0x50
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
    int16_t i;
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_CALLS_EXTENSION
    if(TPDO->SDO->ODExtensions){
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d07c      	beq.n	800496e <CO_TPDOsend+0x10e>
        /* for each mapped OD, check mapping to see if an OD extension is available, and call it if it is */
        const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	3304      	adds	r3, #4
 800487a:	643b      	str	r3, [r7, #64]	; 0x40
        CO_SDO_t *pSDO = TPDO->SDO;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(i=TPDO->TPDOMapPar->numberOfMappedObjects; i>0; i--){
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800488c:	e06b      	b.n	8004966 <CO_TPDOsend+0x106>
            uint32_t map = *(pMap++);
 800488e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004890:	1d1a      	adds	r2, r3, #4
 8004892:	643a      	str	r2, [r7, #64]	; 0x40
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
            uint16_t index = (uint16_t)(map>>16);
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	0c1b      	lsrs	r3, r3, #16
 800489c:	86fb      	strh	r3, [r7, #54]	; 0x36
            uint8_t subIndex = (uint8_t)(map>>8);
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            uint16_t entryNo = CO_OD_find(pSDO, index);
 80048a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048a8:	4619      	mov	r1, r3
 80048aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80048ac:	f000 fcc2 	bl	8005234 <CO_OD_find>
 80048b0:	4603      	mov	r3, r0
 80048b2:	867b      	strh	r3, [r7, #50]	; 0x32
            if ( entryNo == 0xFFFF ) continue;
 80048b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d049      	beq.n	8004952 <CO_TPDOsend+0xf2>
            CO_OD_extension_t *ext = &pSDO->ODExtensions[entryNo];
 80048be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c0:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 80048c4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80048c6:	4613      	mov	r3, r2
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
            if( ext->pODFunc == NULL) continue;
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d03d      	beq.n	8004956 <CO_TPDOsend+0xf6>
            CO_ODF_arg_t ODF_arg;
            memset((void*)&ODF_arg, 0, sizeof(CO_ODF_arg_t));
 80048da:	f107 0308 	add.w	r3, r7, #8
 80048de:	2224      	movs	r2, #36	; 0x24
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f012 fafa 	bl	8016edc <memset>
            ODF_arg.reading = true;
 80048e8:	2301      	movs	r3, #1
 80048ea:	77fb      	strb	r3, [r7, #31]
            ODF_arg.index = index;
 80048ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048ee:	83bb      	strh	r3, [r7, #28]
            ODF_arg.subIndex = subIndex;
 80048f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80048f4:	77bb      	strb	r3, [r7, #30]
            ODF_arg.object = ext->object;
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	60bb      	str	r3, [r7, #8]
            ODF_arg.attribute = CO_OD_getAttribute(pSDO, entryNo, subIndex);
 80048fc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004900:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004902:	4619      	mov	r1, r3
 8004904:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004906:	f000 fd3e 	bl	8005386 <CO_OD_getAttribute>
 800490a:	4603      	mov	r3, r0
 800490c:	82fb      	strh	r3, [r7, #22]
            ODF_arg.pFlags = CO_OD_getFlagsPointer(pSDO, entryNo, subIndex);
 800490e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004912:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004914:	4619      	mov	r1, r3
 8004916:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004918:	f000 fdd6 	bl	80054c8 <CO_OD_getFlagsPointer>
 800491c:	4603      	mov	r3, r0
 800491e:	61bb      	str	r3, [r7, #24]
            ODF_arg.data = CO_OD_getDataPointer(pSDO, entryNo, subIndex); //https://github.com/CANopenNode/CANopenNode/issues/100
 8004920:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004924:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004926:	4619      	mov	r1, r3
 8004928:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800492a:	f000 fd80 	bl	800542e <CO_OD_getDataPointer>
 800492e:	4603      	mov	r3, r0
 8004930:	60fb      	str	r3, [r7, #12]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
 8004932:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004936:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004938:	4619      	mov	r1, r3
 800493a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800493c:	f000 fcd2 	bl	80052e4 <CO_OD_getLength>
 8004940:	4603      	mov	r3, r0
 8004942:	82bb      	strh	r3, [r7, #20]
            ext->pODFunc(&ODF_arg);
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f107 0208 	add.w	r2, r7, #8
 800494c:	4610      	mov	r0, r2
 800494e:	4798      	blx	r3
 8004950:	e002      	b.n	8004958 <CO_TPDOsend+0xf8>
            if ( entryNo == 0xFFFF ) continue;
 8004952:	bf00      	nop
 8004954:	e000      	b.n	8004958 <CO_TPDOsend+0xf8>
            if( ext->pODFunc == NULL) continue;
 8004956:	bf00      	nop
        for(i=TPDO->TPDOMapPar->numberOfMappedObjects; i>0; i--){
 8004958:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29b      	uxth	r3, r3
 8004962:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004966:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800496a:	2b00      	cmp	r3, #0
 800496c:	dc8f      	bgt.n	800488e <CO_TPDOsend+0x2e>
        }
    }
#endif
    i = TPDO->dataLength;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7e9b      	ldrb	r3, [r3, #26]
 8004972:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497a:	3305      	adds	r3, #5
 800497c:	64bb      	str	r3, [r7, #72]	; 0x48
    ppODdataByte = &TPDO->mapPointer[0];
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	331c      	adds	r3, #28
 8004982:	647b      	str	r3, [r7, #68]	; 0x44

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
 8004984:	e00f      	b.n	80049a6 <CO_TPDOsend+0x146>
        *(pPDOdataByte++) = **(ppODdataByte++);
 8004986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004988:	1d1a      	adds	r2, r3, #4
 800498a:	647a      	str	r2, [r7, #68]	; 0x44
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004990:	1c59      	adds	r1, r3, #1
 8004992:	64b9      	str	r1, [r7, #72]	; 0x48
 8004994:	7812      	ldrb	r2, [r2, #0]
 8004996:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
 8004998:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80049a6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	dceb      	bgt.n	8004986 <CO_TPDOsend+0x126>
    }

    TPDO->sendRequest = 0;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	76da      	strb	r2, [r3, #27]

    return CO_CANsend(TPDO->CANdevTx, TPDO->CANtxBuff);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f004 fc38 	bl	8009234 <CO_CANsend>
 80049c4:	4603      	mov	r3, r0
 80049c6:	b21b      	sxth	r3, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3750      	adds	r7, #80	; 0x50
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <CO_RPDO_process>:

/******************************************************************************/
void CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b096      	sub	sp, #88	; 0x58
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
    bool_t process_rpdo = true;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    if(RPDO->synchronous && !syncWas)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <CO_RPDO_process+0x28>
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <CO_RPDO_process+0x28>
        process_rpdo = false;
 80049f2:	2300      	movs	r3, #0
 80049f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	7e5b      	ldrb	r3, [r3, #25]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <CO_RPDO_process+0x3c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f993 3000 	ldrsb.w	r3, [r3]
 8004a08:	2b05      	cmp	r3, #5
 8004a0a:	d006      	beq.n	8004a1a <CO_RPDO_process+0x4a>
    {
        CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	649a      	str	r2, [r3, #72]	; 0x48
                ext->pODFunc(&ODF_arg);
            }
        }
#endif
    }
}
 8004a18:	e0dc      	b.n	8004bd4 <CO_RPDO_process+0x204>
    else if(process_rpdo)
 8004a1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80d8 	beq.w	8004bd4 <CO_RPDO_process+0x204>
        bool_t update = false;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        uint8_t bufNo = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        if(RPDO->SYNC && RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d03c      	beq.n	8004ab2 <CO_RPDO_process+0xe2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d037      	beq.n	8004ab2 <CO_RPDO_process+0xe2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a46:	7f1b      	ldrb	r3, [r3, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d132      	bne.n	8004ab2 <CO_RPDO_process+0xe2>
            bufNo = 1;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        while(CO_FLAG_READ(RPDO->CANrxNew[bufNo])){
 8004a52:	e02e      	b.n	8004ab2 <CO_RPDO_process+0xe2>
            i = RPDO->dataLength;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	7e9b      	ldrb	r3, [r3, #26]
 8004a58:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
 8004a5c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004a60:	3309      	adds	r3, #9
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4413      	add	r3, r2
 8004a68:	3304      	adds	r3, #4
 8004a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
            ppODdataByte = &RPDO->mapPointer[0];
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	331c      	adds	r3, #28
 8004a70:	64bb      	str	r3, [r7, #72]	; 0x48
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8004a72:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	3310      	adds	r3, #16
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
            for(; i>0; i--) {
 8004a82:	e00f      	b.n	8004aa4 <CO_RPDO_process+0xd4>
                **(ppODdataByte++) = *(pPDOdataByte++);
 8004a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a8c:	1d11      	adds	r1, r2, #4
 8004a8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
 8004a96:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004aa4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	dceb      	bgt.n	8004a84 <CO_RPDO_process+0xb4>
            update = true;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        while(CO_FLAG_READ(RPDO->CANrxNew[bufNo])){
 8004ab2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	3310      	adds	r3, #16
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1c7      	bne.n	8004a54 <CO_RPDO_process+0x84>
        if(update && RPDO->SDO->ODExtensions){
 8004ac4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8083 	beq.w	8004bd4 <CO_RPDO_process+0x204>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d07c      	beq.n	8004bd4 <CO_RPDO_process+0x204>
            const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	643b      	str	r3, [r7, #64]	; 0x40
            CO_SDO_t *pSDO = RPDO->SDO;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
            for(i=RPDO->RPDOMapPar->numberOfMappedObjects; i>0; i--){
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004af2:	e06b      	b.n	8004bcc <CO_RPDO_process+0x1fc>
                uint32_t map = *(pMap++);
 8004af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af6:	1d1a      	adds	r2, r3, #4
 8004af8:	643a      	str	r2, [r7, #64]	; 0x40
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	63bb      	str	r3, [r7, #56]	; 0x38
                uint16_t index = (uint16_t)(map>>16);
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	0c1b      	lsrs	r3, r3, #16
 8004b02:	86fb      	strh	r3, [r7, #54]	; 0x36
                uint8_t subIndex = (uint8_t)(map>>8);
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                uint16_t entryNo = CO_OD_find(pSDO, index);
 8004b0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b12:	f000 fb8f 	bl	8005234 <CO_OD_find>
 8004b16:	4603      	mov	r3, r0
 8004b18:	867b      	strh	r3, [r7, #50]	; 0x32
                if ( entryNo == 0xFFFF ) continue;
 8004b1a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d049      	beq.n	8004bb8 <CO_RPDO_process+0x1e8>
                CO_OD_extension_t *ext = &pSDO->ODExtensions[entryNo];
 8004b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b26:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8004b2a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
                if( ext->pODFunc == NULL) continue;
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d03d      	beq.n	8004bbc <CO_RPDO_process+0x1ec>
                memset((void*)&ODF_arg, 0, sizeof(CO_ODF_arg_t));
 8004b40:	f107 0308 	add.w	r3, r7, #8
 8004b44:	2224      	movs	r2, #36	; 0x24
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f012 f9c7 	bl	8016edc <memset>
                ODF_arg.reading = false;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	77fb      	strb	r3, [r7, #31]
                ODF_arg.index = index;
 8004b52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b54:	83bb      	strh	r3, [r7, #28]
                ODF_arg.subIndex = subIndex;
 8004b56:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b5a:	77bb      	strb	r3, [r7, #30]
                ODF_arg.object = ext->object;
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	60bb      	str	r3, [r7, #8]
                ODF_arg.attribute = CO_OD_getAttribute(pSDO, entryNo, subIndex);
 8004b62:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004b66:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b6c:	f000 fc0b 	bl	8005386 <CO_OD_getAttribute>
 8004b70:	4603      	mov	r3, r0
 8004b72:	82fb      	strh	r3, [r7, #22]
                ODF_arg.pFlags = CO_OD_getFlagsPointer(pSDO, entryNo, subIndex);
 8004b74:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004b78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b7e:	f000 fca3 	bl	80054c8 <CO_OD_getFlagsPointer>
 8004b82:	4603      	mov	r3, r0
 8004b84:	61bb      	str	r3, [r7, #24]
                ODF_arg.data = CO_OD_getDataPointer(pSDO, entryNo, subIndex); //https://github.com/CANopenNode/CANopenNode/issues/100
 8004b86:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004b8a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b90:	f000 fc4d 	bl	800542e <CO_OD_getDataPointer>
 8004b94:	4603      	mov	r3, r0
 8004b96:	60fb      	str	r3, [r7, #12]
                ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
 8004b98:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004b9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ba2:	f000 fb9f 	bl	80052e4 <CO_OD_getLength>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	82bb      	strh	r3, [r7, #20]
                ext->pODFunc(&ODF_arg);
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f107 0208 	add.w	r2, r7, #8
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4798      	blx	r3
 8004bb6:	e002      	b.n	8004bbe <CO_RPDO_process+0x1ee>
                if ( entryNo == 0xFFFF ) continue;
 8004bb8:	bf00      	nop
 8004bba:	e000      	b.n	8004bbe <CO_RPDO_process+0x1ee>
                if( ext->pODFunc == NULL) continue;
 8004bbc:	bf00      	nop
            for(i=RPDO->RPDOMapPar->numberOfMappedObjects; i>0; i--){
 8004bbe:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004bcc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	dc8f      	bgt.n	8004af4 <CO_RPDO_process+0x124>
}
 8004bd4:	bf00      	nop
 8004bd6:	3758      	adds	r7, #88	; 0x58
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <CO_TPDO_process>:
void CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        bool_t                  syncWas,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	460b      	mov	r3, r1
 8004bea:	72fb      	strb	r3, [r7, #11]
    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d204      	bcs.n	8004c00 <CO_TPDO_process+0x24>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	e000      	b.n	8004c02 <CO_TPDO_process+0x26>
 8004c00:	2300      	movs	r3, #0
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	63d3      	str	r3, [r2, #60]	; 0x3c
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d204      	bcs.n	8004c1a <CO_TPDO_process+0x3e>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	e000      	b.n	8004c1c <CO_TPDO_process+0x40>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	6413      	str	r3, [r2, #64]	; 0x40

    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	7e5b      	ldrb	r3, [r3, #25]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80b2 	beq.w	8004d8e <CO_TPDO_process+0x1b2>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8004c32:	2b05      	cmp	r3, #5
 8004c34:	f040 80ab 	bne.w	8004d8e <CO_TPDO_process+0x1b2>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	7a1b      	ldrb	r3, [r3, #8]
 8004c3e:	2bfc      	cmp	r3, #252	; 0xfc
 8004c40:	d94c      	bls.n	8004cdc <CO_TPDO_process+0x100>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d125      	bne.n	8004c96 <CO_TPDO_process+0xba>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	7edb      	ldrb	r3, [r3, #27]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d108      	bne.n	8004c64 <CO_TPDO_process+0x88>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	89db      	ldrh	r3, [r3, #14]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01c      	beq.n	8004c96 <CO_TPDO_process+0xba>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d118      	bne.n	8004c96 <CO_TPDO_process+0xba>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f7ff fdfb 	bl	8004860 <CO_TPDOsend>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d112      	bne.n	8004c96 <CO_TPDO_process+0xba>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	895b      	ldrh	r3, [r3, #10]
 8004c76:	461a      	mov	r2, r3
 8004c78:	2364      	movs	r3, #100	; 0x64
 8004c7a:	fb03 f202 	mul.w	r2, r3, r2
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	63da      	str	r2, [r3, #60]	; 0x3c
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	89db      	ldrh	r3, [r3, #14]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c8e:	fb03 f202 	mul.w	r2, r3, r2
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
                }
            }
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_TIMERNEXT
            if(timerNext_us != NULL){
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8085 	beq.w	8004da8 <CO_TPDO_process+0x1cc>
                if(TPDO->sendRequest && *timerNext_us > TPDO->inhibitTimer){
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	7edb      	ldrb	r3, [r3, #27]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <CO_TPDO_process+0xe0>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d904      	bls.n	8004cbc <CO_TPDO_process+0xe0>
                    *timerNext_us = TPDO->inhibitTimer; /* Schedule for just beyond inhibit window */
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	601a      	str	r2, [r3, #0]
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004cba:	e075      	b.n	8004da8 <CO_TPDO_process+0x1cc>
                }else if(TPDO->TPDOCommPar->eventTimer && *timerNext_us > TPDO->eventTimer){
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	89db      	ldrh	r3, [r3, #14]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d070      	beq.n	8004da8 <CO_TPDO_process+0x1cc>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d96a      	bls.n	8004da8 <CO_TPDO_process+0x1cc>
                    *timerNext_us = TPDO->eventTimer; /* Schedule for next maximum event time */
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	601a      	str	r2, [r3, #0]
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004cda:	e065      	b.n	8004da8 <CO_TPDO_process+0x1cc>
#endif
        }

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        /* Synchronous PDOs */
        else if(TPDO->SYNC && syncWas){
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d061      	beq.n	8004da8 <CO_TPDO_process+0x1cc>
 8004ce4:	7afb      	ldrb	r3, [r7, #11]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d05e      	beq.n	8004da8 <CO_TPDO_process+0x1cc>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	7a1b      	ldrb	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d107      	bne.n	8004d04 <CO_TPDO_process+0x128>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	7edb      	ldrb	r3, [r3, #27]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d055      	beq.n	8004da8 <CO_TPDO_process+0x1cc>
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff fdaf 	bl	8004860 <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004d02:	e051      	b.n	8004da8 <CO_TPDO_process+0x1cc>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d0a:	2bff      	cmp	r3, #255	; 0xff
 8004d0c:	d114      	bne.n	8004d38 <CO_TPDO_process+0x15c>
                    if(TPDO->SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d12:	7d1b      	ldrb	r3, [r3, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d009      	beq.n	8004d2c <CO_TPDO_process+0x150>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	7c1b      	ldrb	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d004      	beq.n	8004d2c <CO_TPDO_process+0x150>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	22fe      	movs	r2, #254	; 0xfe
 8004d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d2a:	e005      	b.n	8004d38 <CO_TPDO_process+0x15c>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	7a1a      	ldrb	r2, [r3, #8]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d3e:	2bfe      	cmp	r3, #254	; 0xfe
 8004d40:	d10e      	bne.n	8004d60 <CO_TPDO_process+0x184>
                    if(TPDO->SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d46:	7f5a      	ldrb	r2, [r3, #29]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	7c1b      	ldrb	r3, [r3, #16]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d12a      	bne.n	8004da8 <CO_TPDO_process+0x1cc>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	7a1a      	ldrb	r2, [r3, #8]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004d5e:	e023      	b.n	8004da8 <CO_TPDO_process+0x1cc>
                        //CO_TPDOsend(TPDO);
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d116      	bne.n	8004da8 <CO_TPDO_process+0x1cc>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	7a1a      	ldrb	r2, [r3, #8]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                    CO_TPDOsend(TPDO);
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff fd6a 	bl	8004860 <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004d8c:	e00c      	b.n	8004da8 <CO_TPDO_process+0x1cc>
#endif

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	7a1b      	ldrb	r3, [r3, #8]
 8004d94:	2bfd      	cmp	r3, #253	; 0xfd
 8004d96:	d903      	bls.n	8004da0 <CO_TPDO_process+0x1c4>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	76da      	strb	r2, [r3, #27]
        else                                         TPDO->sendRequest = 0;
    }
}
 8004d9e:	e004      	b.n	8004daa <CO_TPDO_process+0x1ce>
        else                                         TPDO->sendRequest = 0;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	76da      	strb	r2, [r3, #27]
}
 8004da6:	e000      	b.n	8004daa <CO_TPDO_process+0x1ce>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004da8:	bf00      	nop
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8004dbe:	60fb      	str	r3, [r7, #12]
    return value;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <CO_setUint32>:
static inline void CO_setUint32(uint8_t data[], const uint32_t value){
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
 8004dd8:	683a      	ldr	r2, [r7, #0]
    memcpy(data, &value, sizeof(value));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <CO_SDO_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg);
static void CO_SDO_receive(void *object, void *msg){
 8004dea:	b590      	push	{r4, r7, lr}
 8004dec:	b087      	sub	sp, #28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dfa:	75bb      	strb	r3, [r7, #22]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	3321      	adds	r3, #33	; 0x21
 8004e00:	613b      	str	r3, [r7, #16]

    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((DLC == 8U) && (!CO_FLAG_READ(SDO->CANrxNew))){
 8004e06:	7dbb      	ldrb	r3, [r7, #22]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	f040 80b9 	bne.w	8004f80 <CO_SDO_receive+0x196>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f040 80b3 	bne.w	8004f80 <CO_SDO_receive+0x196>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8004e20:	2ba5      	cmp	r3, #165	; 0xa5
 8004e22:	d024      	beq.n	8004e6e <CO_SDO_receive+0x84>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = data[0];
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = data[1];
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	785a      	ldrb	r2, [r3, #1]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = data[2];
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	789a      	ldrb	r2, [r3, #2]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = data[3];
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	78da      	ldrb	r2, [r3, #3]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = data[4];
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	791a      	ldrb	r2, [r3, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = data[5];
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	795a      	ldrb	r2, [r3, #5]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = data[6];
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	799a      	ldrb	r2, [r3, #6]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = data[7];
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	79da      	ldrb	r2, [r3, #7]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	71da      	strb	r2, [r3, #7]

            CO_FLAG_SET(SDO->CANrxNew);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
 8004e6c:	e076      	b.n	8004f5c <CO_SDO_receive+0x172>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = data[0];
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7e:	72fb      	strb	r3, [r7, #11]
            SDO->timeoutTimer = 0;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
            /* clear timeout in sub-block transfer indication if set before */
            if (SDO->timeoutSubblockDownolad) {
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <CO_SDO_receive+0xb0>
                SDO->timeoutSubblockDownolad = false;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
            }

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
 8004e9a:	7afa      	ldrb	r2, [r7, #11]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d146      	bne.n	8004f36 <CO_SDO_receive+0x14c>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8004eae:	3301      	adds	r3, #1
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a

                /* copy data */
                for(i=1; i<8; i++) {
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
 8004ebc:	e022      	b.n	8004f04 <CO_SDO_receive+0x11a>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
 8004ebe:	7dfb      	ldrb	r3, [r7, #23]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8004ed0:	1c58      	adds	r0, r3, #1
 8004ed2:	b284      	uxth	r4, r0
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f8a0 4720 	strh.w	r4, [r0, #1824]	; 0x720
 8004eda:	440b      	add	r3, r1
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_CONFIG_SDO_BUFFER_SIZE) {
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8004ee6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004eea:	d308      	bcc.n	8004efe <CO_SDO_receive+0x114>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	22a6      	movs	r2, #166	; 0xa6
 8004ef0:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                        CO_FLAG_SET(SDO->CANrxNew);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
                        break;
 8004efc:	e005      	b.n	8004f0a <CO_SDO_receive+0x120>
                for(i=1; i<8; i++) {
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
 8004f00:	3301      	adds	r3, #1
 8004f02:	75fb      	strb	r3, [r7, #23]
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
 8004f06:	2b07      	cmp	r3, #7
 8004f08:	d9d9      	bls.n	8004ebe <CO_SDO_receive+0xd4>
                    }
                }

                /* break reception if last segment, block ends or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db07      	blt.n	8004f24 <CO_SDO_receive+0x13a>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 274a 	ldrb.w	r2, [r3, #1866]	; 0x74a
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d31b      	bcc.n	8004f5c <CO_SDO_receive+0x172>
                	SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	22a6      	movs	r2, #166	; 0xa6
 8004f28:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                    CO_FLAG_SET(SDO->CANrxNew);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
 8004f34:	e012      	b.n	8004f5c <CO_SDO_receive+0x172>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8004f3c:	7afa      	ldrb	r2, [r7, #11]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d00c      	beq.n	8004f5c <CO_SDO_receive+0x172>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <CO_SDO_receive+0x172>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is wrong, send response without resetting sequence */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP_2;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	22a7      	movs	r2, #167	; 0xa7
 8004f50:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                CO_FLAG_SET(SDO->CANrxNew);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            }
        }

#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_CALLBACK_PRE
        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(CO_FLAG_READ(SDO->CANrxNew) && SDO->pFunctSignalPre != NULL) {
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00c      	beq.n	8004f80 <CO_SDO_receive+0x196>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <CO_SDO_receive+0x196>
            SDO->pFunctSignalPre(SDO->functSignalObjectPre);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	f8d2 2764 	ldr.w	r2, [r2, #1892]	; 0x764
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4798      	blx	r3
        }
#endif
    }
}
 8004f80:	bf00      	nop
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd90      	pop	{r4, r7, pc}

08004f88 <CO_ODF_1200>:
 * from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff ff07 	bl	8004db2 <CO_getUint32>
 8004fa4:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	7ddb      	ldrb	r3, [r3, #23]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00e      	beq.n	8004fcc <CO_ODF_1200+0x44>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	7d9b      	ldrb	r3, [r3, #22]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <CO_ODF_1200+0x44>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	440b      	add	r3, r1
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f7ff ff01 	bl	8004dce <CO_setUint32>
    }

    return ret;
 8004fcc:	697b      	ldr	r3, [r7, #20]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <CO_SDO_init>:
        uint16_t                SDOtimeoutTime_ms,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	; 0x28
 8004fdc:	af04      	add	r7, sp, #16
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	807b      	strh	r3, [r7, #2]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SDO==NULL || CANdevRx==NULL || CANdevTx==NULL){
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <CO_SDO_init+0x24>
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <CO_SDO_init+0x24>
 8004ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <CO_SDO_init+0x2a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8005000:	e0b8      	b.n	8005174 <CO_SDO_init+0x19c>
    }

    /* configure own object dictionary */
    if(parentSDO == NULL){
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d13b      	bne.n	8005080 <CO_SDO_init+0xa8>
        uint16_t i;

        SDO->ownOD = true;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
        SDO->OD = OD;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        SDO->ODSize = ODSize;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800501c:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718
        SDO->ODExtensions = ODExtensions;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005024:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
 8005028:	2300      	movs	r3, #0
 800502a:	82bb      	strh	r3, [r7, #20]
 800502c:	e023      	b.n	8005076 <CO_SDO_init+0x9e>
            SDO->ODExtensions[i].pODFunc = NULL;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8005034:	8aba      	ldrh	r2, [r7, #20]
 8005036:	4613      	mov	r3, r2
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 800504a:	8aba      	ldrh	r2, [r7, #20]
 800504c:	4613      	mov	r3, r2
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	2200      	movs	r2, #0
 8005058:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8005060:	8aba      	ldrh	r2, [r7, #20]
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	2200      	movs	r2, #0
 800506e:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
 8005070:	8abb      	ldrh	r3, [r7, #20]
 8005072:	3301      	adds	r3, #1
 8005074:	82bb      	strh	r3, [r7, #20]
 8005076:	8aba      	ldrh	r2, [r7, #20]
 8005078:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800507a:	429a      	cmp	r2, r3
 800507c:	d3d7      	bcc.n	800502e <CO_SDO_init+0x56>
 800507e:	e015      	b.n	80050ac <CO_SDO_init+0xd4>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
        SDO->OD = parentSDO->OD;
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	f8d3 2714 	ldr.w	r2, [r3, #1812]	; 0x714
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        SDO->ODSize = parentSDO->ODSize;
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	f8b3 2718 	ldrh.w	r2, [r3, #1816]	; 0x718
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718
        SDO->ODExtensions = parentSDO->ODExtensions;
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80050b2:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 80050b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050bc:	fb03 f202 	mul.w	r2, r3, r2
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
    SDO->state = CO_SDO_ST_IDLE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
    CO_FLAG_CLEAR(SDO->CANrxNew);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_CALLBACK_PRE
    SDO->pFunctSignalPre = NULL;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
    SDO->functSignalObjectPre = NULL;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
#endif

    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
 80050e6:	887b      	ldrh	r3, [r7, #2]
 80050e8:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80050ec:	d10b      	bne.n	8005106 <CO_SDO_init+0x12e>
        CO_OD_configure(SDO, ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 80050f4:	8879      	ldrh	r1, [r7, #2]
 80050f6:	2200      	movs	r2, #0
 80050f8:	9201      	str	r2, [sp, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	9200      	str	r2, [sp, #0]
 80050fe:	4a1f      	ldr	r2, [pc, #124]	; (800517c <CO_SDO_init+0x1a4>)
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f83f 	bl	8005184 <CO_OD_configure>
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	db02      	blt.n	8005112 <CO_SDO_init+0x13a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	da03      	bge.n	800511a <CO_SDO_init+0x142>
        // SDO is invalid
        COB_IDClientToServer = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
        COB_IDServerToClient = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	607b      	str	r3, [r7, #4]
    }
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	b29a      	uxth	r2, r3
 800511e:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8005120:	4b17      	ldr	r3, [pc, #92]	; (8005180 <CO_SDO_init+0x1a8>)
 8005122:	9302      	str	r3, [sp, #8]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	2300      	movs	r3, #0
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005130:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005132:	f003 ffe9 	bl	8009108 <CO_CANrxBufferInit>
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */

    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800513e:	f8c3 2768 	str.w	r2, [r3, #1896]	; 0x768
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	b29a      	uxth	r2, r3
 8005146:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800514a:	2300      	movs	r3, #0
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	2308      	movs	r3, #8
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	2300      	movs	r3, #0
 8005154:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005156:	f004 f82d 	bl	80091b4 <CO_CANtxBufferInit>
 800515a:	4602      	mov	r2, r0
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8c3 276c 	str.w	r2, [r3, #1900]	; 0x76c
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <CO_SDO_init+0x198>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800516c:	23ff      	movs	r3, #255	; 0xff
 800516e:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8005170:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	08004f89 	.word	0x08004f89
 8005180:	08004deb 	.word	0x08004deb

08005184 <CO_OD_configure>:
        uint16_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	460b      	mov	r3, r1
 8005192:	817b      	strh	r3, [r7, #10]
    uint16_t entryNo;

    entryNo = CO_OD_find(SDO, index);
 8005194:	897b      	ldrh	r3, [r7, #10]
 8005196:	4619      	mov	r1, r3
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f84b 	bl	8005234 <CO_OD_find>
 800519e:	4603      	mov	r3, r0
 80051a0:	83bb      	strh	r3, [r7, #28]
    if(entryNo < 0xFFFFU){
 80051a2:	8bbb      	ldrh	r3, [r7, #28]
 80051a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d03f      	beq.n	800522c <CO_OD_configure+0xa8>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 80051b2:	8bba      	ldrh	r2, [r7, #28]
 80051b4:	4613      	mov	r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	61bb      	str	r3, [r7, #24]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 80051c6:	8bba      	ldrh	r2, [r7, #28]
 80051c8:	4613      	mov	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	789b      	ldrb	r3, [r3, #2]
 80051d4:	75fb      	strb	r3, [r7, #23]

        ext->pODFunc = pODFunc;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	601a      	str	r2, [r3, #0]
        ext->object = object;
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01d      	beq.n	8005224 <CO_OD_configure+0xa0>
 80051e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d019      	beq.n	8005224 <CO_OD_configure+0xa0>
 80051f0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d114      	bne.n	8005224 <CO_OD_configure+0xa0>
            uint16_t i;
            ext->flags = flags;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051fe:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
 8005200:	2300      	movs	r3, #0
 8005202:	83fb      	strh	r3, [r7, #30]
 8005204:	e008      	b.n	8005218 <CO_OD_configure+0x94>
                ext->flags[i] = 0U;
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	8bfb      	ldrh	r3, [r7, #30]
 800520c:	4413      	add	r3, r2
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
 8005212:	8bfb      	ldrh	r3, [r7, #30]
 8005214:	3301      	adds	r3, #1
 8005216:	83fb      	strh	r3, [r7, #30]
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	b29b      	uxth	r3, r3
 800521c:	8bfa      	ldrh	r2, [r7, #30]
 800521e:	429a      	cmp	r2, r3
 8005220:	d9f1      	bls.n	8005206 <CO_OD_configure+0x82>
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 8005222:	e003      	b.n	800522c <CO_OD_configure+0xa8>
            }
        }
        else{
            ext->flags = NULL;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2200      	movs	r2, #0
 8005228:	609a      	str	r2, [r3, #8]
        }
    }
}
 800522a:	e7ff      	b.n	800522c <CO_OD_configure+0xa8>
 800522c:	bf00      	nop
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <CO_OD_find>:


/******************************************************************************/
uint16_t CO_OD_find(CO_SDO_t *SDO, uint16_t index){
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	807b      	strh	r3, [r7, #2]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint16_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	82fb      	strh	r3, [r7, #22]
    max = SDO->ODSize - 1U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 3718 	ldrh.w	r3, [r3, #1816]	; 0x718
 800524a:	3b01      	subs	r3, #1
 800524c:	82bb      	strh	r3, [r7, #20]
    while(min < max){
 800524e:	e028      	b.n	80052a2 <CO_OD_find+0x6e>
        cur = (min + max) / 2;
 8005250:	8afa      	ldrh	r2, [r7, #22]
 8005252:	8abb      	ldrh	r3, [r7, #20]
 8005254:	4413      	add	r3, r2
 8005256:	0fda      	lsrs	r2, r3, #31
 8005258:	4413      	add	r3, r2
 800525a:	105b      	asrs	r3, r3, #1
 800525c:	81fb      	strh	r3, [r7, #14]
        object = &SDO->OD[cur];
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 8005264:	89fa      	ldrh	r2, [r7, #14]
 8005266:	4613      	mov	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	887a      	ldrh	r2, [r7, #2]
 8005278:	429a      	cmp	r2, r3
 800527a:	d101      	bne.n	8005280 <CO_OD_find+0x4c>
            return cur;
 800527c:	89fb      	ldrh	r3, [r7, #14]
 800527e:	e02b      	b.n	80052d8 <CO_OD_find+0xa4>
        }
        if(index < object->index){
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	887a      	ldrh	r2, [r7, #2]
 8005286:	429a      	cmp	r2, r3
 8005288:	d208      	bcs.n	800529c <CO_OD_find+0x68>
            max = cur;
 800528a:	89fb      	ldrh	r3, [r7, #14]
 800528c:	82bb      	strh	r3, [r7, #20]
            if(max) max--;
 800528e:	8abb      	ldrh	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d006      	beq.n	80052a2 <CO_OD_find+0x6e>
 8005294:	8abb      	ldrh	r3, [r7, #20]
 8005296:	3b01      	subs	r3, #1
 8005298:	82bb      	strh	r3, [r7, #20]
 800529a:	e002      	b.n	80052a2 <CO_OD_find+0x6e>
        }
        else
            min = cur + 1U;
 800529c:	89fb      	ldrh	r3, [r7, #14]
 800529e:	3301      	adds	r3, #1
 80052a0:	82fb      	strh	r3, [r7, #22]
    while(min < max){
 80052a2:	8afa      	ldrh	r2, [r7, #22]
 80052a4:	8abb      	ldrh	r3, [r7, #20]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d3d2      	bcc.n	8005250 <CO_OD_find+0x1c>
    }

    if(min == max){
 80052aa:	8afa      	ldrh	r2, [r7, #22]
 80052ac:	8abb      	ldrh	r3, [r7, #20]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d110      	bne.n	80052d4 <CO_OD_find+0xa0>
        object = &SDO->OD[min];
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 80052b8:	8afa      	ldrh	r2, [r7, #22]
 80052ba:	4613      	mov	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	887a      	ldrh	r2, [r7, #2]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d101      	bne.n	80052d4 <CO_OD_find+0xa0>
            return min;
 80052d0:	8afb      	ldrh	r3, [r7, #22]
 80052d2:	e001      	b.n	80052d8 <CO_OD_find+0xa4>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
 80052d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80052d8:	4618      	mov	r0, r3
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <CO_OD_getLength>:


/******************************************************************************/
uint16_t CO_OD_getLength(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	807b      	strh	r3, [r7, #2]
 80052f0:	4613      	mov	r3, r2
 80052f2:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 80052fa:	887a      	ldrh	r2, [r7, #2]
 80052fc:	4613      	mov	r3, r2
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 8005308:	887b      	ldrh	r3, [r7, #2]
 800530a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <CO_OD_getLength+0x32>
        return 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	e031      	b.n	800537a <CO_OD_getLength+0x96>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	789b      	ldrb	r3, [r3, #2]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <CO_OD_getLength+0x4e>
        if(object->pData == 0){ /* data type is domain */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <CO_OD_getLength+0x48>
            return CO_CONFIG_SDO_BUFFER_SIZE;
 8005326:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800532a:	e026      	b.n	800537a <CO_OD_getLength+0x96>
        }
        else{
            return object->length;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	88db      	ldrh	r3, [r3, #6]
 8005330:	e023      	b.n	800537a <CO_OD_getLength+0x96>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	889b      	ldrh	r3, [r3, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00e      	beq.n	8005358 <CO_OD_getLength+0x74>
        if(subIndex == 0U){
 800533a:	787b      	ldrb	r3, [r7, #1]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <CO_OD_getLength+0x60>
            return 1U;
 8005340:	2301      	movs	r3, #1
 8005342:	e01a      	b.n	800537a <CO_OD_getLength+0x96>
        }
        else if(object->pData == 0){
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <CO_OD_getLength+0x6e>
            /* data type is domain */
            return CO_CONFIG_SDO_BUFFER_SIZE;
 800534c:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8005350:	e013      	b.n	800537a <CO_OD_getLength+0x96>
        }
        else{
            return object->length;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	88db      	ldrh	r3, [r3, #6]
 8005356:	e010      	b.n	800537a <CO_OD_getLength+0x96>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	787b      	ldrb	r3, [r7, #1]
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <CO_OD_getLength+0x8a>
            /* data type is domain */
            return CO_CONFIG_SDO_BUFFER_SIZE;
 8005368:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800536c:	e005      	b.n	800537a <CO_OD_getLength+0x96>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	787b      	ldrb	r3, [r7, #1]
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4413      	add	r3, r2
 8005378:	88db      	ldrh	r3, [r3, #6]
        }
    }
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <CO_OD_getAttribute>:


/******************************************************************************/
uint16_t CO_OD_getAttribute(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	807b      	strh	r3, [r7, #2]
 8005392:	4613      	mov	r3, r2
 8005394:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 800539c:	887a      	ldrh	r2, [r7, #2]
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	60bb      	str	r3, [r7, #8]

    if(entryNo == 0xFFFFU){
 80053aa:	887b      	ldrh	r3, [r7, #2]
 80053ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d101      	bne.n	80053b8 <CO_OD_getAttribute+0x32>
        return 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	e034      	b.n	8005422 <CO_OD_getAttribute+0x9c>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	789b      	ldrb	r3, [r3, #2]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <CO_OD_getAttribute+0x40>
        return object->attribute;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	889b      	ldrh	r3, [r3, #4]
 80053c4:	e02d      	b.n	8005422 <CO_OD_getAttribute+0x9c>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	889b      	ldrh	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d023      	beq.n	8005416 <CO_OD_getAttribute+0x90>
        bool_t exception_1003 = false;
 80053ce:	2300      	movs	r3, #0
 80053d0:	73fb      	strb	r3, [r7, #15]
        uint16_t attr = object->attribute;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	889b      	ldrh	r3, [r3, #4]
 80053d6:	81bb      	strh	r3, [r7, #12]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d108      	bne.n	80053f6 <CO_OD_getAttribute+0x70>
 80053e4:	787b      	ldrb	r3, [r7, #1]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d105      	bne.n	80053f6 <CO_OD_getAttribute+0x70>
            exception_1003 = true;
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
            attr |= CO_ODA_WRITEABLE;
 80053ee:	89bb      	ldrh	r3, [r7, #12]
 80053f0:	f043 0308 	orr.w	r3, r3, #8
 80053f4:	81bb      	strh	r3, [r7, #12]
        }

        if(subIndex == 0U  && !exception_1003){
 80053f6:	787b      	ldrb	r3, [r7, #1]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <CO_OD_getAttribute+0x8c>
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d107      	bne.n	8005412 <CO_OD_getAttribute+0x8c>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
 8005402:	89bb      	ldrh	r3, [r7, #12]
 8005404:	f023 0318 	bic.w	r3, r3, #24
 8005408:	81bb      	strh	r3, [r7, #12]
            attr |= CO_ODA_READABLE;
 800540a:	89bb      	ldrh	r3, [r7, #12]
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	81bb      	strh	r3, [r7, #12]
        }
        return attr;
 8005412:	89bb      	ldrh	r3, [r7, #12]
 8005414:	e005      	b.n	8005422 <CO_OD_getAttribute+0x9c>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	787b      	ldrb	r3, [r7, #1]
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	889b      	ldrh	r3, [r3, #4]
    }
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <CO_OD_getDataPointer>:


/******************************************************************************/
void* CO_OD_getDataPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	807b      	strh	r3, [r7, #2]
 800543a:	4613      	mov	r3, r2
 800543c:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 8005444:	887a      	ldrh	r2, [r7, #2]
 8005446:	4613      	mov	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 8005452:	887b      	ldrh	r3, [r7, #2]
 8005454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005458:	4293      	cmp	r3, r2
 800545a:	d101      	bne.n	8005460 <CO_OD_getDataPointer+0x32>
        return 0;
 800545c:	2300      	movs	r3, #0
 800545e:	e02d      	b.n	80054bc <CO_OD_getDataPointer+0x8e>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	789b      	ldrb	r3, [r3, #2]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <CO_OD_getDataPointer+0x40>
        return object->pData;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	e026      	b.n	80054bc <CO_OD_getDataPointer+0x8e>
    }
    else if(object->maxSubIndex < subIndex){
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	789b      	ldrb	r3, [r3, #2]
 8005472:	787a      	ldrb	r2, [r7, #1]
 8005474:	429a      	cmp	r2, r3
 8005476:	d901      	bls.n	800547c <CO_OD_getDataPointer+0x4e>
        /* Object type Array/Record, request is out of bounds */
        return 0;
 8005478:	2300      	movs	r3, #0
 800547a:	e01f      	b.n	80054bc <CO_OD_getDataPointer+0x8e>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	889b      	ldrh	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d015      	beq.n	80054b0 <CO_OD_getDataPointer+0x82>
        if(subIndex==0){
 8005484:	787b      	ldrb	r3, [r7, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d102      	bne.n	8005490 <CO_OD_getDataPointer+0x62>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3302      	adds	r3, #2
 800548e:	e015      	b.n	80054bc <CO_OD_getDataPointer+0x8e>
        }
        else if(object->pData == 0){
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <CO_OD_getDataPointer+0x6e>
            /* data type is domain */
            return 0;
 8005498:	2300      	movs	r3, #0
 800549a:	e00f      	b.n	80054bc <CO_OD_getDataPointer+0x8e>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	787a      	ldrb	r2, [r7, #1]
 80054a2:	3a01      	subs	r2, #1
 80054a4:	68f9      	ldr	r1, [r7, #12]
 80054a6:	88c9      	ldrh	r1, [r1, #6]
 80054a8:	fb01 f202 	mul.w	r2, r1, r2
 80054ac:	4413      	add	r3, r2
 80054ae:	e005      	b.n	80054bc <CO_OD_getDataPointer+0x8e>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	787b      	ldrb	r3, [r7, #1]
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	4413      	add	r3, r2
 80054ba:	681b      	ldr	r3, [r3, #0]
    }
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <CO_OD_getFlagsPointer>:


/******************************************************************************/
uint8_t* CO_OD_getFlagsPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	807b      	strh	r3, [r7, #2]
 80054d4:	4613      	mov	r3, r2
 80054d6:	707b      	strb	r3, [r7, #1]
    if(entryNo == 0xFFFF || SDO->ODExtensions == NULL){
 80054d8:	887b      	ldrh	r3, [r7, #2]
 80054da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <CO_OD_getFlagsPointer+0x24>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <CO_OD_getFlagsPointer+0x28>
        return NULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	e013      	b.n	8005518 <CO_OD_getFlagsPointer+0x50>
    }

    CO_OD_extension_t* ext = &SDO->ODExtensions[entryNo];
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 80054f6:	887a      	ldrh	r2, [r7, #2]
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	60fb      	str	r3, [r7, #12]
    if (ext->flags == NULL){
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <CO_OD_getFlagsPointer+0x48>
        return NULL;
 800550c:	2300      	movs	r3, #0
 800550e:	e003      	b.n	8005518 <CO_OD_getFlagsPointer+0x50>
    }

    return &ext->flags[subIndex];
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	787b      	ldrb	r3, [r7, #1]
 8005516:	4413      	add	r3, r2
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <CO_SDO_initTransfer>:


/******************************************************************************/
uint32_t CO_SDO_initTransfer(CO_SDO_t *SDO, uint16_t index, uint8_t subIndex){
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	807b      	strh	r3, [r7, #2]
 8005530:	4613      	mov	r3, r2
 8005532:	707b      	strb	r3, [r7, #1]

    SDO->ODF_arg.index = index;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	887a      	ldrh	r2, [r7, #2]
 8005538:	f8a3 2738 	strh.w	r2, [r3, #1848]	; 0x738
    SDO->ODF_arg.subIndex = subIndex;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	787a      	ldrb	r2, [r7, #1]
 8005540:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find(SDO, index);
 8005544:	887b      	ldrh	r3, [r7, #2]
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fe73 	bl	8005234 <CO_OD_find>
 800554e:	4603      	mov	r3, r0
 8005550:	461a      	mov	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8a3 2722 	strh.w	r2, [r3, #1826]	; 0x722
    if(SDO->entryNo == 0xFFFFU){
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 800555e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005562:	4293      	cmp	r3, r2
 8005564:	d101      	bne.n	800556a <CO_SDO_initTransfer+0x46>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
 8005566:	4b4e      	ldr	r3, [pc, #312]	; (80056a0 <CO_SDO_initTransfer+0x17c>)
 8005568:	e096      	b.n	8005698 <CO_SDO_initTransfer+0x174>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 2714 	ldr.w	r2, [r3, #1812]	; 0x714
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005576:	4619      	mov	r1, r3
 8005578:	460b      	mov	r3, r1
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	440b      	add	r3, r1
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	789b      	ldrb	r3, [r3, #2]
 8005584:	787a      	ldrb	r2, [r7, #1]
 8005586:	429a      	cmp	r2, r3
 8005588:	d910      	bls.n	80055ac <CO_SDO_initTransfer+0x88>
            SDO->OD[SDO->entryNo].pData != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 2714 	ldr.w	r2, [r3, #1812]	; 0x714
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005596:	4619      	mov	r1, r3
 8005598:	460b      	mov	r3, r1
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	440b      	add	r3, r1
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	689b      	ldr	r3, [r3, #8]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <CO_SDO_initTransfer+0x88>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
 80055a8:	4b3e      	ldr	r3, [pc, #248]	; (80056a4 <CO_SDO_initTransfer+0x180>)
 80055aa:	e075      	b.n	8005698 <CO_SDO_initTransfer+0x174>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO, SDO->entryNo, subIndex);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 80055b2:	787a      	ldrb	r2, [r7, #1]
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff ff39 	bl	800542e <CO_OD_getDataPointer>
 80055bc:	4602      	mov	r2, r0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8c3 272c 	str.w	r2, [r3, #1836]	; 0x72c

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
    if(SDO->ODExtensions){
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d011      	beq.n	80055fa <CO_SDO_initTransfer+0xd6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 80055e2:	4619      	mov	r1, r3
 80055e4:	460b      	mov	r3, r1
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	440b      	add	r3, r1
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
        SDO->ODF_arg.object = ext->object;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
    }
    SDO->ODF_arg.data = SDO->databuffer;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f103 0208 	add.w	r2, r3, #8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, subIndex);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 800560c:	787a      	ldrb	r2, [r7, #1]
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fe67 	bl	80052e4 <CO_OD_getLength>
 8005616:	4603      	mov	r3, r0
 8005618:	461a      	mov	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO, SDO->entryNo, subIndex);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005626:	787a      	ldrb	r2, [r7, #1]
 8005628:	4619      	mov	r1, r3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff feab 	bl	8005386 <CO_OD_getAttribute>
 8005630:	4603      	mov	r3, r0
 8005632:	461a      	mov	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8a3 2732 	strh.w	r2, [r3, #1842]	; 0x732
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer(SDO, SDO->entryNo, subIndex);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005640:	787a      	ldrb	r2, [r7, #1]
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ff3f 	bl	80054c8 <CO_OD_getFlagsPointer>
 800564a:	4602      	mov	r2, r0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    SDO->ODF_arg.firstSegment = true;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
    SDO->ODF_arg.lastSegment = true;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <CO_SDO_initTransfer+0x152>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005672:	461a      	mov	r2, r3
 8005674:	e000      	b.n	8005678 <CO_SDO_initTransfer+0x154>
 8005676:	2200      	movs	r2, #0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740

    SDO->ODF_arg.offset = 0U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_CONFIG_SDO_BUFFER_SIZE){
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800568c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005690:	d901      	bls.n	8005696 <CO_SDO_initTransfer+0x172>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <CO_SDO_initTransfer+0x184>)
 8005694:	e000      	b.n	8005698 <CO_SDO_initTransfer+0x174>
    }

    return 0U;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	06020000 	.word	0x06020000
 80056a4:	06090011 	.word	0x06090011
 80056a8:	06040047 	.word	0x06040047

080056ac <CO_SDO_readOD>:


/******************************************************************************/
uint32_t CO_SDO_readOD(CO_SDO_t *SDO, uint16_t SDOBufferSize){
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 80056be:	61fb      	str	r3, [r7, #28]
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80056c6:	61bb      	str	r3, [r7, #24]
    uint16_t length = SDO->ODF_arg.dataLength;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80056ce:	82fb      	strh	r3, [r7, #22]
    CO_OD_extension_t *ext = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	613b      	str	r3, [r7, #16]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b3 3732 	ldrh.w	r3, [r3, #1842]	; 0x732
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <CO_SDO_readOD+0x3a>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
 80056e2:	4b30      	ldr	r3, [pc, #192]	; (80057a4 <CO_SDO_readOD+0xf8>)
 80056e4:	e05a      	b.n	800579c <CO_SDO_readOD+0xf0>

    /* find extension */
    if(SDO->ODExtensions != NULL){
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00c      	beq.n	800570a <CO_SDO_readOD+0x5e>
        ext = &SDO->ODExtensions[SDO->entryNo];
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 80056fc:	4619      	mov	r1, r3
 80056fe:	460b      	mov	r3, r1
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	440b      	add	r3, r1
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
    }

    CO_LOCK_OD();

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00e      	beq.n	800572e <CO_SDO_readOD+0x82>
        while(length--) *(SDObuffer++) = *(ODdata++);
 8005710:	e007      	b.n	8005722 <CO_SDO_readOD+0x76>
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	1c53      	adds	r3, r2, #1
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	1c59      	adds	r1, r3, #1
 800571c:	61f9      	str	r1, [r7, #28]
 800571e:	7812      	ldrb	r2, [r2, #0]
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	8afb      	ldrh	r3, [r7, #22]
 8005724:	1e5a      	subs	r2, r3, #1
 8005726:	82fa      	strh	r2, [r7, #22]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f2      	bne.n	8005712 <CO_SDO_readOD+0x66>
 800572c:	e005      	b.n	800573a <CO_SDO_readOD+0x8e>
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <CO_SDO_readOD+0x8e>
            CO_UNLOCK_OD();
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 8005736:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <CO_SDO_readOD+0xfc>)
 8005738:	e030      	b.n	800579c <CO_SDO_readOD+0xf0>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
    if(ext->pODFunc != NULL){
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d019      	beq.n	800577e <CO_SDO_readOD+0xd2>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	f202 7224 	addw	r2, r2, #1828	; 0x724
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
 8005758:	60f8      	str	r0, [r7, #12]
        if(abortCode != 0U){
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <CO_SDO_readOD+0xb8>
            CO_UNLOCK_OD();
            return abortCode;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	e01b      	b.n	800579c <CO_SDO_readOD+0xf0>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <CO_SDO_readOD+0xce>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005774:	887a      	ldrh	r2, [r7, #2]
 8005776:	429a      	cmp	r2, r3
 8005778:	d201      	bcs.n	800577e <CO_SDO_readOD+0xd2>
            CO_UNLOCK_OD();
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 800577a:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <CO_SDO_readOD+0xfc>)
 800577c:	e00e      	b.n	800579c <CO_SDO_readOD+0xf0>
        }
    }

    CO_UNLOCK_OD();

    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 800578a:	441a      	add	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
    SDO->ODF_arg.firstSegment = false;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3720      	adds	r7, #32
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	06010001 	.word	0x06010001
 80057a8:	06040047 	.word	0x06040047

080057ac <CO_SDO_writeOD>:


/******************************************************************************/
uint32_t CO_SDO_writeOD(CO_SDO_t *SDO, uint16_t length){
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 80057be:	61fb      	str	r3, [r7, #28]
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80057c6:	61bb      	str	r3, [r7, #24]
    bool_t exception_1003 = false;
 80057c8:	2300      	movs	r3, #0
 80057ca:	75fb      	strb	r3, [r7, #23]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 3732 	ldrh.w	r3, [r3, #1842]	; 0x732
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <CO_SDO_writeOD+0x32>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
 80057da:	4b37      	ldr	r3, [pc, #220]	; (80058b8 <CO_SDO_writeOD+0x10c>)
 80057dc:	e067      	b.n	80058ae <CO_SDO_writeOD+0x102>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <CO_SDO_writeOD+0x42>
        SDO->ODF_arg.dataLength = length;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	887a      	ldrh	r2, [r7, #2]
 80057e8:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
 80057ec:	e007      	b.n	80057fe <CO_SDO_writeOD+0x52>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80057f4:	887a      	ldrh	r2, [r7, #2]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d001      	beq.n	80057fe <CO_SDO_writeOD+0x52>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
 80057fa:	4b30      	ldr	r3, [pc, #192]	; (80058bc <CO_SDO_writeOD+0x110>)
 80057fc:	e057      	b.n	80058ae <CO_SDO_writeOD+0x102>
#endif

    CO_LOCK_OD();

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
    if(SDO->ODExtensions != NULL){
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01d      	beq.n	800584c <CO_SDO_writeOD+0xa0>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 800581c:	4619      	mov	r1, r3
 800581e:	460b      	mov	r3, r1
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	440b      	add	r3, r1
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	613b      	str	r3, [r7, #16]

        if(ext->pODFunc != NULL){
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00c      	beq.n	800584c <CO_SDO_writeOD+0xa0>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	f202 7224 	addw	r2, r2, #1828	; 0x724
 800583c:	4610      	mov	r0, r2
 800583e:	4798      	blx	r3
 8005840:	60f8      	str	r0, [r7, #12]
            if(abortCode != 0U){
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <CO_SDO_writeOD+0xa0>
                CO_UNLOCK_OD();
                return abortCode;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	e030      	b.n	80058ae <CO_SDO_writeOD+0x102>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 8005858:	441a      	add	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
    SDO->ODF_arg.firstSegment = false;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8b3 3738 	ldrh.w	r3, [r3, #1848]	; 0x738
 800586e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005872:	4293      	cmp	r3, r2
 8005874:	d106      	bne.n	8005884 <CO_SDO_writeOD+0xd8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 373a 	ldrb.w	r3, [r3, #1850]	; 0x73a
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <CO_SDO_writeOD+0xd8>
        exception_1003 = true;
 8005880:	2301      	movs	r3, #1
 8005882:	75fb      	strb	r3, [r7, #23]
    }

    /* copy data from SDO buffer to OD if not domain */
    if((ODdata != NULL) && !exception_1003){
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d010      	beq.n	80058ac <CO_SDO_writeOD+0x100>
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10d      	bne.n	80058ac <CO_SDO_writeOD+0x100>
        while(length--){
 8005890:	e007      	b.n	80058a2 <CO_SDO_writeOD+0xf6>
            *(ODdata++) = *(SDObuffer++);
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	1c53      	adds	r3, r2, #1
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	1c59      	adds	r1, r3, #1
 800589c:	61b9      	str	r1, [r7, #24]
 800589e:	7812      	ldrb	r2, [r2, #0]
 80058a0:	701a      	strb	r2, [r3, #0]
        while(length--){
 80058a2:	887b      	ldrh	r3, [r7, #2]
 80058a4:	1e5a      	subs	r2, r3, #1
 80058a6:	807a      	strh	r2, [r7, #2]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f2      	bne.n	8005892 <CO_SDO_writeOD+0xe6>
        }
    }

    CO_UNLOCK_OD();

    return 0;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	06010002 	.word	0x06010002
 80058bc:	06070010 	.word	0x06070010

080058c0 <CO_SDO_abort>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO, uint32_t code){
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80058d0:	2280      	movs	r2, #128	; 0x80
 80058d2:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8b3 2738 	ldrh.w	r2, [r3, #1848]	; 0x738
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8b3 3738 	ldrh.w	r3, [r3, #1848]	; 0x738
 80058ea:	0a1b      	lsrs	r3, r3, #8
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	f892 273a 	ldrb.w	r2, [r2, #1850]	; 0x73a
 8005904:	721a      	strb	r2, [r3, #8]
    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800590c:	3309      	adds	r3, #9
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	601a      	str	r2, [r3, #0]
    SDO->state = CO_SDO_ST_IDLE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
    CO_FLAG_CLEAR(SDO->CANrxNew);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
    CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 2768 	ldr.w	r2, [r3, #1896]	; 0x768
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f003 fc7f 	bl	8009234 <CO_CANsend>
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <CO_SDO_process>:
int8_t CO_SDO_process(
        CO_SDO_t               *SDO,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8005940:	b590      	push	{r4, r7, lr}
 8005942:	b093      	sub	sp, #76	; 0x4c
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	460b      	mov	r3, r1
 800594e:	72fb      	strb	r3, [r7, #11]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
 8005950:	2300      	movs	r3, #0
 8005952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t sendResponse = false;
 8005956:	2300      	movs	r3, #0
 8005958:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!CO_FLAG_READ(SDO->CANrxNew))){
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005962:	2b00      	cmp	r3, #0
 8005964:	d107      	bne.n	8005976 <CO_SDO_process+0x36>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <CO_SDO_process+0x36>
        return 0;
 8005970:	2300      	movs	r3, #0
 8005972:	f001 b911 	b.w	8006b98 <CO_SDO_process+0x1258>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
 8005976:	7afb      	ldrb	r3, [r7, #11]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <CO_SDO_process+0x52>
        SDO->state = CO_SDO_ST_IDLE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
        return 0;
 800598c:	2300      	movs	r3, #0
 800598e:	f001 b903 	b.w	8006b98 <CO_SDO_process+0x1258>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((CO_FLAG_READ(SDO->CANrxNew)) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005998:	7b5b      	ldrb	r3, [r3, #13]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 80e1 	bne.w	8005b64 <CO_SDO_process+0x224>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <CO_SDO_process+0x78>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 80059b2:	2bb6      	cmp	r3, #182	; 0xb6
 80059b4:	f040 80d6 	bne.w	8005b64 <CO_SDO_process+0x224>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK) {
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 80059c8:	2bb6      	cmp	r3, #182	; 0xb6
 80059ca:	d005      	beq.n	80059d8 <CO_SDO_process+0x98>
            SDO->timeoutTimer = 0;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
            timeDifference_us = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	607b      	str	r3, [r7, #4]
        }

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80059de:	2200      	movs	r2, #0
 80059e0:	721a      	strb	r2, [r3, #8]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 80059e8:	7a1b      	ldrb	r3, [r3, #8]
 80059ea:	71d3      	strb	r3, [r2, #7]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80059f2:	79d2      	ldrb	r2, [r2, #7]
 80059f4:	719a      	strb	r2, [r3, #6]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 80059fc:	799b      	ldrb	r3, [r3, #6]
 80059fe:	7153      	strb	r3, [r2, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005a06:	2200      	movs	r2, #0
 8005a08:	731a      	strb	r2, [r3, #12]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 8005a10:	7b1b      	ldrb	r3, [r3, #12]
 8005a12:	72d3      	strb	r3, [r2, #11]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005a1a:	7ad2      	ldrb	r2, [r2, #11]
 8005a1c:	729a      	strb	r2, [r3, #10]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 8005a24:	7a9b      	ldrb	r3, [r3, #10]
 8005a26:	7253      	strb	r3, [r2, #9]

        /* Is abort from client? */
        if((CO_FLAG_READ(SDO->CANrxNew)) && (SDO->CANrxData[0] == CCS_ABORT)){
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00f      	beq.n	8005a52 <CO_SDO_process+0x112>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b80      	cmp	r3, #128	; 0x80
 8005a38:	d10b      	bne.n	8005a52 <CO_SDO_process+0x112>
            SDO->state = CO_SDO_ST_IDLE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            CO_FLAG_CLEAR(SDO->CANrxNew);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            return -1;
 8005a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4e:	f001 b8a3 	b.w	8006b98 <CO_SDO_process+0x1258>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <CO_SDO_process+0x128>
            state = SDO->state;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005a62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005a66:	e07d      	b.n	8005b64 <CO_SDO_process+0x224>
        else{
            uint32_t abortCode;
            uint16_t index;

            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
 8005a68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d013      	beq.n	8005a98 <CO_SDO_process+0x158>
 8005a70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d00f      	beq.n	8005a98 <CO_SDO_process+0x158>
 8005a78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a7c:	2b06      	cmp	r3, #6
 8005a7e:	d00b      	beq.n	8005a98 <CO_SDO_process+0x158>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
 8005a80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a84:	2b05      	cmp	r3, #5
 8005a86:	d007      	beq.n	8005a98 <CO_SDO_process+0x158>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005a88:	49b4      	ldr	r1, [pc, #720]	; (8005d5c <CO_SDO_process+0x41c>)
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff ff18 	bl	80058c0 <CO_SDO_abort>
                return -1;
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295
 8005a94:	f001 b880 	b.w	8006b98 <CO_SDO_process+0x1258>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	789b      	ldrb	r3, [r3, #2]
 8005a9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            index = index << 8 | SDO->CANrxData[1];
 8005a9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	b21a      	sxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	b21b      	sxth	r3, r3
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	b21b      	sxth	r3, r3
 8005aae:	87bb      	strh	r3, [r7, #60]	; 0x3c
            abortCode = CO_SDO_initTransfer(SDO, index, SDO->CANrxData[3]);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	78da      	ldrb	r2, [r3, #3]
 8005ab4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff fd33 	bl	8005524 <CO_SDO_initTransfer>
 8005abe:	63b8      	str	r0, [r7, #56]	; 0x38
            if(abortCode != 0U){
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <CO_SDO_process+0x196>
                CO_SDO_abort(SDO, abortCode);
 8005ac6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7ff fef9 	bl	80058c0 <CO_SDO_abort>
                return -1;
 8005ace:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad2:	f001 b861 	b.w	8006b98 <CO_SDO_process+0x1258>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
 8005ad6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d003      	beq.n	8005ae6 <CO_SDO_process+0x1a6>
 8005ade:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ae2:	2b06      	cmp	r3, #6
 8005ae4:	d11a      	bne.n	8005b1c <CO_SDO_process+0x1dc>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8b3 3732 	ldrh.w	r3, [r3, #1842]	; 0x732
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d107      	bne.n	8005b04 <CO_SDO_process+0x1c4>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
 8005af4:	499a      	ldr	r1, [pc, #616]	; (8005d60 <CO_SDO_process+0x420>)
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff fee2 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 8005afc:	f04f 33ff 	mov.w	r3, #4294967295
 8005b00:	f001 b84a 	b.w	8006b98 <CO_SDO_process+0x1258>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005b04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d103      	bne.n	8005b14 <CO_SDO_process+0x1d4>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
 8005b0c:	23a1      	movs	r3, #161	; 0xa1
 8005b0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005b12:	e027      	b.n	8005b64 <CO_SDO_process+0x224>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
 8005b14:	23a4      	movs	r3, #164	; 0xa4
 8005b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005b1a:	e023      	b.n	8005b64 <CO_SDO_process+0x224>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD(SDO, CO_CONFIG_SDO_BUFFER_SIZE);
 8005b1c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fdc3 	bl	80056ac <CO_SDO_readOD>
 8005b26:	63b8      	str	r0, [r7, #56]	; 0x38
                if(abortCode != 0U){
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d007      	beq.n	8005b3e <CO_SDO_process+0x1fe>
                    CO_SDO_abort(SDO, abortCode);
 8005b2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff fec5 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	f001 b82d 	b.w	8006b98 <CO_SDO_process+0x1258>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
 8005b3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b42:	2b05      	cmp	r3, #5
 8005b44:	d10b      	bne.n	8005b5e <CO_SDO_process+0x21e>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	795b      	ldrb	r3, [r3, #5]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d903      	bls.n	8005b5e <CO_SDO_process+0x21e>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
 8005b56:	23b4      	movs	r3, #180	; 0xb4
 8005b58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b5c:	e002      	b.n	8005b64 <CO_SDO_process+0x224>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
 8005b5e:	23b1      	movs	r3, #177	; 0xb1
 8005b60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8d3 2750 	ldr.w	r2, [r3, #1872]	; 0x750
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d207      	bcs.n	8005b84 <CO_SDO_process+0x244>
        SDO->timeoutTimer += timeDifference_us;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8d3 2750 	ldr.w	r2, [r3, #1872]	; 0x750
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	441a      	add	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
    }
    if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8d3 2750 	ldr.w	r2, [r3, #1872]	; 0x750
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d324      	bcc.n	8005bde <CO_SDO_process+0x29e>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (!SDO->timeoutSubblockDownolad) && (!SDO->CANtxBuff->bufferFull)){
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005b9a:	2ba5      	cmp	r3, #165	; 0xa5
 8005b9c:	d117      	bne.n	8005bce <CO_SDO_process+0x28e>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d112      	bne.n	8005bce <CO_SDO_process+0x28e>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005bae:	7b5b      	ldrb	r3, [r3, #13]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10b      	bne.n	8005bce <CO_SDO_process+0x28e>
            /* set indication timeout in sub-block transfer and reset timeout */
            SDO->timeoutSubblockDownolad = true;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
            SDO->timeoutTimer = 0;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
            /* send response without resetting sequence */
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP_2;
 8005bc6:	23a7      	movs	r3, #167	; 0xa7
 8005bc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005bcc:	e01a      	b.n	8005c04 <CO_SDO_process+0x2c4>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
 8005bce:	4965      	ldr	r1, [pc, #404]	; (8005d64 <CO_SDO_process+0x424>)
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff fe75 	bl	80058c0 <CO_SDO_abort>
            return -1;
 8005bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bda:	f000 bfdd 	b.w	8006b98 <CO_SDO_process+0x1258>
        }
    }
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
    else if (timerNext_us != NULL) {
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00f      	beq.n	8005c04 <CO_SDO_process+0x2c4>
        /* check again after timeout time elapsed */
        uint32_t diff = SDO->SDOtimeoutTime_us - SDO->timeoutTimer;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8d3 274c 	ldr.w	r2, [r3, #1868]	; 0x74c
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8d3 3750 	ldr.w	r3, [r3, #1872]	; 0x750
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	637b      	str	r3, [r7, #52]	; 0x34
        if (*timerNext_us > diff) {
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d202      	bcs.n	8005c04 <CO_SDO_process+0x2c4>
            *timerNext_us = diff;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c02:	601a      	str	r2, [r3, #0]
        }
    }
#endif

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
 8005c04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d102      	bne.n	8005c12 <CO_SDO_process+0x2d2>
        return 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f000 bfc3 	b.w	8006b98 <CO_SDO_process+0x1258>
    }

    /* state machine (buffer is freed (CO_FLAG_CLEAR()) at the end) */
    switch(state){
 8005c12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8799 	beq.w	8006b4e <CO_SDO_process+0x120e>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f2c0 878f 	blt.w	8006b40 <CO_SDO_process+0x1200>
 8005c22:	2bb7      	cmp	r3, #183	; 0xb7
 8005c24:	f300 878c 	bgt.w	8006b40 <CO_SDO_process+0x1200>
 8005c28:	2ba1      	cmp	r3, #161	; 0xa1
 8005c2a:	f2c0 8789 	blt.w	8006b40 <CO_SDO_process+0x1200>
 8005c2e:	3ba1      	subs	r3, #161	; 0xa1
 8005c30:	2b16      	cmp	r3, #22
 8005c32:	f200 8785 	bhi.w	8006b40 <CO_SDO_process+0x1200>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <CO_SDO_process+0x2fc>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c99 	.word	0x08005c99
 8005c40:	08005def 	.word	0x08005def
 8005c44:	08006b41 	.word	0x08006b41
 8005c48:	08005f8d 	.word	0x08005f8d
 8005c4c:	08006b53 	.word	0x08006b53
 8005c50:	08006077 	.word	0x08006077
 8005c54:	08006077 	.word	0x08006077
 8005c58:	080061e1 	.word	0x080061e1
 8005c5c:	08006b41 	.word	0x08006b41
 8005c60:	08006b41 	.word	0x08006b41
 8005c64:	08006b41 	.word	0x08006b41
 8005c68:	08006b41 	.word	0x08006b41
 8005c6c:	08006b41 	.word	0x08006b41
 8005c70:	08006b41 	.word	0x08006b41
 8005c74:	08006b41 	.word	0x08006b41
 8005c78:	08006b41 	.word	0x08006b41
 8005c7c:	080062cf 	.word	0x080062cf
 8005c80:	080063cf 	.word	0x080063cf
 8005c84:	08006b41 	.word	0x08006b41
 8005c88:	08006629 	.word	0x08006629
 8005c8c:	0800673f 	.word	0x0800673f
 8005c90:	08006781 	.word	0x08006781
 8005c94:	08006b11 	.word	0x08006b11
        uint16_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005c9e:	2260      	movs	r2, #96	; 0x60
 8005ca0:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	7852      	ldrb	r2, [r2, #1]
 8005cac:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	7892      	ldrb	r2, [r2, #2]
 8005cb8:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	78d2      	ldrb	r2, [r2, #3]
 8005cc4:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d05a      	beq.n	8005d88 <CO_SDO_process+0x448>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00c      	beq.n	8005cf8 <CO_SDO_process+0x3b8>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	089b      	lsrs	r3, r3, #2
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f1c3 0304 	rsb	r3, r3, #4
 8005cf2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cf6:	e004      	b.n	8005d02 <CO_SDO_process+0x3c2>
                }
                else{
                    len = SDO->ODF_arg.dataLength;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005cfe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	7912      	ldrb	r2, [r2, #4]
 8005d0c:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005d14:	3301      	adds	r3, #1
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	7952      	ldrb	r2, [r2, #5]
 8005d1a:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005d22:	3302      	adds	r3, #2
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	7992      	ldrb	r2, [r2, #6]
 8005d28:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005d30:	3303      	adds	r3, #3
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	79d2      	ldrb	r2, [r2, #7]
 8005d36:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD(SDO, len);
 8005d38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f7ff fd34 	bl	80057ac <CO_SDO_writeOD>
 8005d44:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <CO_SDO_process+0x428>
                    CO_SDO_abort(SDO, abortCode);
 8005d4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff fdb6 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 8005d54:	f04f 33ff 	mov.w	r3, #4294967295
 8005d58:	f000 bf1e 	b.w	8006b98 <CO_SDO_process+0x1258>
 8005d5c:	05040001 	.word	0x05040001
 8005d60:	06010002 	.word	0x06010002
 8005d64:	05040000 	.word	0x05040000
                }

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                sendResponse = true;
 8005d70:	2301      	movs	r3, #1
 8005d72:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 86ec 	beq.w	8006b56 <CO_SDO_process+0x1216>
                    *timerNext_us = 0;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
                SDO->bufferOffset = 0U;
                SDO->sequence = 0U;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
 8005d84:	f000 bee7 	b.w	8006b56 <CO_SDO_process+0x1216>
                if((SDO->CANrxData[0]&0x01) != 0){
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01b      	beq.n	8005dcc <CO_SDO_process+0x48c>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3304      	adds	r3, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
                    SDO->ODF_arg.dataLengthTotal = lenRx;
 8005d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005daa:	461a      	mov	r2, r3
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d00c      	beq.n	8005dcc <CO_SDO_process+0x48c>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <CO_SDO_process+0x48c>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 8005dbc:	49b4      	ldr	r1, [pc, #720]	; (8006090 <CO_SDO_process+0x750>)
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f7ff fd7e 	bl	80058c0 <CO_SDO_abort>
                        return -1;
 8005dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc8:	f000 bee6 	b.w	8006b98 <CO_SDO_process+0x1258>
                SDO->bufferOffset = 0U;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                SDO->sequence = 0U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	22a2      	movs	r2, #162	; 0xa2
 8005de0:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                sendResponse = true;
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 8005dea:	f000 beb4 	b.w	8006b56 <CO_SDO_process+0x1216>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <CO_SDO_process+0x4ca>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005dfa:	49a6      	ldr	r1, [pc, #664]	; (8006094 <CO_SDO_process+0x754>)
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff fd5f 	bl	80058c0 <CO_SDO_abort>
                return -1;
 8005e02:	f04f 33ff 	mov.w	r3, #4294967295
 8005e06:	f000 bec7 	b.w	8006b98 <CO_SDO_process+0x1258>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	091b      	lsrs	r3, r3, #4
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(i != SDO->sequence){
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d007      	beq.n	8005e3a <CO_SDO_process+0x4fa>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 8005e2a:	499b      	ldr	r1, [pc, #620]	; (8006098 <CO_SDO_process+0x758>)
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7ff fd47 	bl	80058c0 <CO_SDO_abort>
                return -1;
 8005e32:	f04f 33ff 	mov.w	r3, #4294967295
 8005e36:	f000 beaf 	b.w	8006b98 <CO_SDO_process+0x1258>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8005e56:	461a      	mov	r2, r3
 8005e58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e5c:	4413      	add	r3, r2
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 8005e64:	4293      	cmp	r3, r2
 8005e66:	dd2c      	ble.n	8005ec2 <CO_SDO_process+0x582>
                if(SDO->ODF_arg.ODdataStorage != 0){
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <CO_SDO_process+0x542>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
 8005e72:	498a      	ldr	r1, [pc, #552]	; (800609c <CO_SDO_process+0x75c>)
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff fd23 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 8005e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7e:	f000 be8b 	b.w	8006b98 <CO_SDO_process+0x1258>
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
                    abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8005e90:	4619      	mov	r1, r3
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fc8a 	bl	80057ac <CO_SDO_writeOD>
 8005e98:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <CO_SDO_process+0x570>
                        CO_SDO_abort(SDO, abortCode);
 8005ea0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7ff fd0c 	bl	80058c0 <CO_SDO_abort>
                        return -1;
 8005ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eac:	f000 be74 	b.w	8006b98 <CO_SDO_process+0x1258>
                    }

                    SDO->ODF_arg.dataLength = CO_CONFIG_SDO_BUFFER_SIZE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005eb6:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                    SDO->bufferOffset = 0U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ec8:	e016      	b.n	8005ef8 <CO_SDO_process+0x5b8>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
 8005eca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8005edc:	1c58      	adds	r0, r3, #1
 8005ede:	b284      	uxth	r4, r0
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f8a0 4720 	strh.w	r4, [r0, #1824]	; 0x720
 8005ee6:	440b      	add	r3, r1
 8005ee8:	68f9      	ldr	r1, [r7, #12]
 8005eea:	5c8a      	ldrb	r2, [r1, r2]
 8005eec:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
 8005eee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ef8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8005efc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d3e2      	bcc.n	8005eca <CO_SDO_process+0x58a>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d020      	beq.n	8005f52 <CO_SDO_process+0x612>
                SDO->ODF_arg.lastSegment = true;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8005f1e:	4619      	mov	r1, r3
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7ff fc43 	bl	80057ac <CO_SDO_writeOD>
 8005f26:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <CO_SDO_process+0x5fe>
                    CO_SDO_abort(SDO, abortCode);
 8005f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff fcc5 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 8005f36:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3a:	f000 be2d 	b.w	8006b98 <CO_SDO_process+0x1258>
                }

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <CO_SDO_process+0x612>
                    *timerNext_us = 0;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
#endif
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <CO_SDO_process+0x620>
 8005f5c:	2230      	movs	r2, #48	; 0x30
 8005f5e:	e000      	b.n	8005f62 <CO_SDO_process+0x622>
 8005f60:	2220      	movs	r2, #32
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005f68:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bf0c      	ite	eq
 8005f74:	2301      	moveq	r3, #1
 8005f76:	2300      	movne	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            sendResponse = true;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 8005f88:	f000 bdec 	b.w	8006b64 <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 8005f94:	2bc0      	cmp	r3, #192	; 0xc0
 8005f96:	d007      	beq.n	8005fa8 <CO_SDO_process+0x668>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005f98:	493e      	ldr	r1, [pc, #248]	; (8006094 <CO_SDO_process+0x754>)
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7ff fc90 	bl	80058c0 <CO_SDO_abort>
                return -1;
 8005fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa4:	f000 bdf8 	b.w	8006b98 <CO_SDO_process+0x1258>
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005fae:	22a4      	movs	r2, #164	; 0xa4
 8005fb0:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	7852      	ldrb	r2, [r2, #1]
 8005fbc:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	7892      	ldrb	r2, [r2, #2]
 8005fc8:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	78d2      	ldrb	r2, [r2, #3]
 8005fd4:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_CONFIG_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_CONFIG_SDO_BUFFER_SIZE / 7);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	227f      	movs	r2, #127	; 0x7f
 8005fda:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
            SDO->CANtxBuff->data[4] = SDO->blksize;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	f892 2754 	ldrb.w	r2, [r2, #1876]	; 0x754
 8005fea:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	109b      	asrs	r3, r3, #2
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f883 2755 	strb.w	r2, [r3, #1877]	; 0x755
            SDO->crc = 0;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01b      	beq.n	800604c <CO_SDO_process+0x70c>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3304      	adds	r3, #4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	623b      	str	r3, [r7, #32]
                SDO->ODF_arg.dataLengthTotal = lenRx;
 800601c:	6a3a      	ldr	r2, [r7, #32]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800602a:	461a      	mov	r2, r3
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	429a      	cmp	r2, r3
 8006030:	d00c      	beq.n	800604c <CO_SDO_process+0x70c>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <CO_SDO_process+0x70c>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 800603c:	4914      	ldr	r1, [pc, #80]	; (8006090 <CO_SDO_process+0x750>)
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff fc3e 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 8006044:	f04f 33ff 	mov.w	r3, #4294967295
 8006048:	f000 bda6 	b.w	8006b98 <CO_SDO_process+0x1258>
                }
            }

            SDO->bufferOffset = 0U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
            SDO->sequence = 0U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            SDO->timeoutSubblockDownolad = false;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	22a5      	movs	r2, #165	; 0xa5
 8006068:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749

            /* send response */
            sendResponse = true;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 8006072:	f000 bd77 	b.w	8006b64 <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:
        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP_2:{
            /* check if last segment received */
            lastSegmentInSubblock = (!SDO->timeoutSubblockDownolad &&
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10f      	bne.n	80060a0 <CO_SDO_process+0x760>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	b25b      	sxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	da0a      	bge.n	80060a0 <CO_SDO_process+0x760>
 800608a:	2301      	movs	r3, #1
 800608c:	e009      	b.n	80060a2 <CO_SDO_process+0x762>
 800608e:	bf00      	nop
 8006090:	06070010 	.word	0x06070010
 8006094:	05040001 	.word	0x05040001
 8006098:	05030000 	.word	0x05030000
 800609c:	06070012 	.word	0x06070012
 80060a0:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!SDO->timeoutSubblockDownolad &&
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80060ac:	22a2      	movs	r2, #162	; 0xa2
 80060ae:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	f892 274a 	ldrb.w	r2, [r2, #1866]	; 0x74a
 80060bc:	719a      	strb	r2, [r3, #6]

            /* reset sequence on reception break */
            if (state == CO_SDO_ST_DOWNLOAD_BL_SUB_RESP) {
 80060be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060c2:	2ba6      	cmp	r3, #166	; 0xa6
 80060c4:	d103      	bne.n	80060ce <CO_SDO_process+0x78e>
                SDO->sequence = 0U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            }

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d13f      	bne.n	8006158 <CO_SDO_process+0x818>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d03a      	beq.n	8006158 <CO_SDO_process+0x818>
 80060e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d136      	bne.n	8006158 <CO_SDO_process+0x818>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d011      	beq.n	8006118 <CO_SDO_process+0x7d8>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006100:	4619      	mov	r1, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 8006108:	461a      	mov	r2, r3
 800610a:	f001 f9d1 	bl	80074b0 <crc16_ccitt>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006126:	4619      	mov	r1, r3
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff fb3f 	bl	80057ac <CO_SDO_writeOD>
 800612e:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <CO_SDO_process+0x806>
                    CO_SDO_abort(SDO, abortCode);
 8006136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff fbc1 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	f000 bd29 	b.w	8006b98 <CO_SDO_process+0x1258>
                }

                SDO->ODF_arg.dataLength = CO_CONFIG_SDO_BUFFER_SIZE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800614c:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                SDO->bufferOffset = 0U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
            }

            /* blksize */
            len = CO_CONFIG_SDO_BUFFER_SIZE - SDO->bufferOffset;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 800615e:	f5c3 63e1 	rsb	r3, r3, #1800	; 0x708
 8006162:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
 8006166:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800616a:	f240 3279 	movw	r2, #889	; 0x379
 800616e:	4293      	cmp	r3, r2
 8006170:	d80b      	bhi.n	800618a <CO_SDO_process+0x84a>
 8006172:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006176:	4bba      	ldr	r3, [pc, #744]	; (8006460 <CO_SDO_process+0xb20>)
 8006178:	fba3 1302 	umull	r1, r3, r3, r2
 800617c:	1ad2      	subs	r2, r2, r3
 800617e:	0852      	lsrs	r2, r2, #1
 8006180:	4413      	add	r3, r2
 8006182:	089b      	lsrs	r3, r3, #2
 8006184:	b29b      	uxth	r3, r3
 8006186:	b2da      	uxtb	r2, r3
 8006188:	e000      	b.n	800618c <CO_SDO_process+0x84c>
 800618a:	227f      	movs	r2, #127	; 0x7f
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
            SDO->CANtxBuff->data[2] = SDO->blksize;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	f892 2754 	ldrb.w	r2, [r2, #1876]	; 0x754
 800619e:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
 80061a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <CO_SDO_process+0x872>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	22a8      	movs	r2, #168	; 0xa8
 80061ac:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 80061b0:	e011      	b.n	80061d6 <CO_SDO_process+0x896>
            }
            else if(SDO->bufferOffset >= CO_CONFIG_SDO_BUFFER_SIZE) {
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 80061b8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80061bc:	d307      	bcc.n	80061ce <CO_SDO_process+0x88e>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
 80061be:	49a9      	ldr	r1, [pc, #676]	; (8006464 <CO_SDO_process+0xb24>)
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff fb7d 	bl	80058c0 <CO_SDO_abort>
                return -1;
 80061c6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ca:	f000 bce5 	b.w	8006b98 <CO_SDO_process+0x1258>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	22a5      	movs	r2, #165	; 0xa5
 80061d2:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            }

            /* send response */
            sendResponse = true;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

            break;
 80061dc:	f000 bcc2 	b.w	8006b64 <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 80061e8:	2bc1      	cmp	r3, #193	; 0xc1
 80061ea:	d007      	beq.n	80061fc <CO_SDO_process+0x8bc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80061ec:	499e      	ldr	r1, [pc, #632]	; (8006468 <CO_SDO_process+0xb28>)
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7ff fb66 	bl	80058c0 <CO_SDO_abort>
                return -1;
 80061f4:	f04f 33ff 	mov.w	r3, #4294967295
 80061f8:	f000 bcce 	b.w	8006b98 <CO_SDO_process+0x1258>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	089b      	lsrs	r3, r3, #2
 8006202:	b2db      	uxtb	r3, r3
 8006204:	b29b      	uxth	r3, r3
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            SDO->bufferOffset -= len;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8b3 2720 	ldrh.w	r2, [r3, #1824]	; 0x720
 8006214:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 8006228:	2b00      	cmp	r3, #0
 800622a:	d024      	beq.n	8006276 <CO_SDO_process+0x936>
                uint16_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006238:	4619      	mov	r1, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 8006240:	461a      	mov	r2, r3
 8006242:	f001 f935 	bl	80074b0 <crc16_ccitt>
 8006246:	4603      	mov	r3, r0
 8006248:	461a      	mov	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3301      	adds	r3, #1
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	83fb      	strh	r3, [r7, #30]

                if(SDO->crc != crc){
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8b3 2756 	ldrh.w	r2, [r3, #1878]	; 0x756
 8006260:	8bfb      	ldrh	r3, [r7, #30]
 8006262:	429a      	cmp	r2, r3
 8006264:	d007      	beq.n	8006276 <CO_SDO_process+0x936>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
 8006266:	4981      	ldr	r1, [pc, #516]	; (800646c <CO_SDO_process+0xb2c>)
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7ff fb29 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 800626e:	f04f 33ff 	mov.w	r3, #4294967295
 8006272:	f000 bc91 	b.w	8006b98 <CO_SDO_process+0x1258>
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
            abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006284:	4619      	mov	r1, r3
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff fa90 	bl	80057ac <CO_SDO_writeOD>
 800628c:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <CO_SDO_process+0x964>
                CO_SDO_abort(SDO, abortCode);
 8006294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff fb12 	bl	80058c0 <CO_SDO_abort>
                return -1;
 800629c:	f04f 33ff 	mov.w	r3, #4294967295
 80062a0:	f000 bc7a 	b.w	8006b98 <CO_SDO_process+0x1258>
            }

            /* finish the communication and run mainline processing again */
            SDO->CANtxBuff->data[0] = 0xA1;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80062aa:	22a1      	movs	r2, #161	; 0xa1
 80062ac:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            sendResponse = true;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
            if (timerNext_us != NULL)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 844b 	beq.w	8006b5a <CO_SDO_process+0x121a>
                *timerNext_us = 0;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
#endif
            break;
 80062ca:	f000 bc46 	b.w	8006b5a <CO_SDO_process+0x121a>
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	7852      	ldrb	r2, [r2, #1]
 80062d8:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	7892      	ldrb	r2, [r2, #2]
 80062e4:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	78d2      	ldrb	r2, [r2, #3]
 80062f0:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d83e      	bhi.n	800637a <CO_SDO_process+0xa3a>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 80062fc:	2300      	movs	r3, #0
 80062fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006302:	e014      	b.n	800632e <CO_SDO_process+0x9ee>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 800630a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800630e:	18d1      	adds	r1, r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8d3 276c 	ldr.w	r2, [r3, #1900]	; 0x76c
 8006316:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800631a:	3304      	adds	r3, #4
 800631c:	7809      	ldrb	r1, [r1, #0]
 800631e:	4413      	add	r3, r2
 8006320:	460a      	mov	r2, r1
 8006322:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 8006324:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006328:	3301      	adds	r3, #1
 800632a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006334:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006338:	429a      	cmp	r2, r3
 800633a:	d3e3      	bcc.n	8006304 <CO_SDO_process+0x9c4>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f1c3 0304 	rsb	r3, r3, #4
 8006348:	b2db      	uxtb	r3, r3
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	b2da      	uxtb	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006354:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	715a      	strb	r2, [r3, #5]

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                sendResponse = true;
 8006364:	2301      	movs	r3, #1
 8006366:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 83f6 	beq.w	8006b5e <CO_SDO_process+0x121e>
                    *timerNext_us = 0;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]
                }

                /* send response */
                sendResponse = true;
            }
            break;
 8006378:	e3f1      	b.n	8006b5e <CO_SDO_process+0x121e>
                SDO->bufferOffset = 0U;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                SDO->sequence = 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	22b2      	movs	r2, #178	; 0xb2
 800638e:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                if(SDO->ODF_arg.dataLengthTotal != 0U){
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00f      	beq.n	80063bc <CO_SDO_process+0xa7c>
                    uint32_t dlentot = SDO->ODF_arg.dataLengthTotal;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 80063a2:	61bb      	str	r3, [r7, #24]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &dlentot);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80063aa:	3309      	adds	r3, #9
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	601a      	str	r2, [r3, #0]
                    SDO->CANtxBuff->data[0] = 0x41U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80063b6:	2241      	movs	r2, #65	; 0x41
 80063b8:	715a      	strb	r2, [r3, #5]
 80063ba:	e004      	b.n	80063c6 <CO_SDO_process+0xa86>
                    SDO->CANtxBuff->data[0] = 0x40U;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80063c2:	2240      	movs	r2, #64	; 0x40
 80063c4:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 80063cc:	e3c7      	b.n	8006b5e <CO_SDO_process+0x121e>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80063d6:	2b60      	cmp	r3, #96	; 0x60
 80063d8:	d006      	beq.n	80063e8 <CO_SDO_process+0xaa8>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80063da:	4923      	ldr	r1, [pc, #140]	; (8006468 <CO_SDO_process+0xb28>)
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff fa6f 	bl	80058c0 <CO_SDO_abort>
                return -1;
 80063e2:	f04f 33ff 	mov.w	r3, #4294967295
 80063e6:	e3d7      	b.n	8006b98 <CO_SDO_process+0x1258>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(i != SDO->sequence){
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006404:	429a      	cmp	r2, r3
 8006406:	d006      	beq.n	8006416 <CO_SDO_process+0xad6>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 8006408:	4919      	ldr	r1, [pc, #100]	; (8006470 <CO_SDO_process+0xb30>)
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f7ff fa58 	bl	80058c0 <CO_SDO_abort>
                return -1;
 8006410:	f04f 33ff 	mov.w	r3, #4294967295
 8006414:	e3c0      	b.n	8006b98 <CO_SDO_process+0x1258>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            if(len > 7U) len = 7U;
 8006428:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800642c:	2b07      	cmp	r3, #7
 800642e:	d902      	bls.n	8006436 <CO_SDO_process+0xaf6>
 8006430:	2307      	movs	r3, #7
 8006432:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 800643c:	2b00      	cmp	r3, #0
 800643e:	f040 8087 	bne.w	8006550 <CO_SDO_process+0xc10>
 8006442:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006446:	2b06      	cmp	r3, #6
 8006448:	f200 8082 	bhi.w	8006550 <CO_SDO_process+0xc10>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 8006452:	2b00      	cmp	r3, #0
 8006454:	d17c      	bne.n	8006550 <CO_SDO_process+0xc10>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
 8006456:	2300      	movs	r3, #0
 8006458:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800645c:	e022      	b.n	80064a4 <CO_SDO_process+0xb64>
 800645e:	bf00      	nop
 8006460:	24924925 	.word	0x24924925
 8006464:	06040047 	.word	0x06040047
 8006468:	05040001 	.word	0x05040001
 800646c:	05040004 	.word	0x05040004
 8006470:	05030000 	.word	0x05030000
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	f8b2 2720 	ldrh.w	r2, [r2, #1824]	; 0x720
 8006480:	4611      	mov	r1, r2
 8006482:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006486:	440a      	add	r2, r1
 8006488:	441a      	add	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 8006490:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006494:	440b      	add	r3, r1
 8006496:	7812      	ldrb	r2, [r2, #0]
 8006498:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
 800649a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800649e:	3301      	adds	r3, #1
 80064a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80064a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80064a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d3e1      	bcc.n	8006474 <CO_SDO_process+0xb34>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 80064b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064ba:	441a      	add	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8b3 1722 	ldrh.w	r1, [r3, #1826]	; 0x722
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 373a 	ldrb.w	r3, [r3, #1850]	; 0x73a
 80064ce:	461a      	mov	r2, r3
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f7fe ff07 	bl	80052e4 <CO_OD_getLength>
 80064d6:	4603      	mov	r3, r0
 80064d8:	461a      	mov	r2, r3
 80064da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD(SDO, CO_CONFIG_SDO_BUFFER_SIZE);
 80064e8:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f7ff f8dd 	bl	80056ac <CO_SDO_readOD>
 80064f2:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <CO_SDO_process+0xbc8>
                    CO_SDO_abort(SDO, abortCode);
 80064fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7ff f9df 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 8006502:	f04f 33ff 	mov.w	r3, #4294967295
 8006506:	e347      	b.n	8006b98 <CO_SDO_process+0x1258>
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 800650e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006512:	425b      	negs	r3, r3
 8006514:	441a      	add	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                SDO->ODF_arg.dataLength +=  len;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8006522:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006526:	4413      	add	r3, r2
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                SDO->bufferOffset = 0;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800653e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                if(len > 7U) len = 7U;
 8006542:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006546:	2b07      	cmp	r3, #7
 8006548:	d902      	bls.n	8006550 <CO_SDO_process+0xc10>
 800654a:	2307      	movs	r3, #7
 800654c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
 8006550:	2300      	movs	r3, #0
 8006552:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006556:	e01a      	b.n	800658e <CO_SDO_process+0xc4e>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006564:	1c59      	adds	r1, r3, #1
 8006566:	b288      	uxth	r0, r1
 8006568:	68f9      	ldr	r1, [r7, #12]
 800656a:	f8a1 0720 	strh.w	r0, [r1, #1824]	; 0x720
 800656e:	18d1      	adds	r1, r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8d3 276c 	ldr.w	r2, [r3, #1900]	; 0x76c
 8006576:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800657a:	3301      	adds	r3, #1
 800657c:	7809      	ldrb	r1, [r1, #0]
 800657e:	4413      	add	r3, r2
 8006580:	460a      	mov	r2, r1
 8006582:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
 8006584:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006588:	3301      	adds	r3, #1
 800658a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800658e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006592:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006596:	429a      	cmp	r2, r3
 8006598:	d3de      	bcc.n	8006558 <CO_SDO_process+0xc18>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <CO_SDO_process+0xc68>
 80065a4:	2210      	movs	r2, #16
 80065a6:	e000      	b.n	80065aa <CO_SDO_process+0xc6a>
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80065ae:	f1c3 0307 	rsb	r3, r3, #7
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	b25b      	sxtb	r3, r3
 80065b6:	4313      	orrs	r3, r2
 80065b8:	b25a      	sxtb	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8b3 2720 	ldrh.w	r2, [r3, #1824]	; 0x720
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d119      	bne.n	8006620 <CO_SDO_process+0xce0>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d014      	beq.n	8006620 <CO_SDO_process+0xce0>
                SDO->CANtxBuff->data[0] |= 0x01;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80065fc:	795a      	ldrb	r2, [r3, #5]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	715a      	strb	r2, [r3, #5]

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <CO_SDO_process+0xce0>
                    *timerNext_us = 0;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
#endif
            }

            /* send response */
            sendResponse = true;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 8006626:	e29d      	b.n	8006b64 <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	7852      	ldrb	r2, [r2, #1]
 8006632:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	7892      	ldrb	r2, [r2, #2]
 800663e:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	78d2      	ldrb	r2, [r2, #3]
 800664a:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d013      	beq.n	8006680 <CO_SDO_process+0xd40>
                SDO->crcEnabled = true;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2755 	strb.w	r2, [r3, #1877]	; 0x755
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800666c:	2200      	movs	r2, #0
 800666e:	4619      	mov	r1, r3
 8006670:	f000 ff1e 	bl	80074b0 <crc16_ccitt>
 8006674:	4603      	mov	r3, r0
 8006676:	461a      	mov	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
 800667e:	e007      	b.n	8006690 <CO_SDO_process+0xd50>
            }
            else{
                SDO->crcEnabled = false;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2755 	strb.w	r2, [r3, #1877]	; 0x755
                SDO->crc = 0;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	791a      	ldrb	r2, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d006      	beq.n	80066b4 <CO_SDO_process+0xd74>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80066a6:	49a5      	ldr	r1, [pc, #660]	; (800693c <CO_SDO_process+0xffc>)
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f7ff f909 	bl	80058c0 <CO_SDO_abort>
                return -1;
 80066ae:	f04f 33ff 	mov.w	r3, #4294967295
 80066b2:	e271      	b.n	8006b98 <CO_SDO_process+0x1258>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d016      	beq.n	80066ec <CO_SDO_process+0xdac>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80066c4:	b25b      	sxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	db10      	blt.n	80066ec <CO_SDO_process+0xdac>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80066d0:	461a      	mov	r2, r3
 80066d2:	4613      	mov	r3, r2
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 80066de:	4293      	cmp	r3, r2
 80066e0:	d90b      	bls.n	80066fa <CO_SDO_process+0xdba>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <CO_SDO_process+0xdba>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 80066ec:	4994      	ldr	r1, [pc, #592]	; (8006940 <CO_SDO_process+0x1000>)
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff f8e6 	bl	80058c0 <CO_SDO_abort>
                return -1;
 80066f4:	f04f 33ff 	mov.w	r3, #4294967295
 80066f8:	e24e      	b.n	8006b98 <CO_SDO_process+0x1258>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00f      	beq.n	8006724 <CO_SDO_process+0xde4>
                uint32_t dlentot = SDO->ODF_arg.dataLengthTotal;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 800670a:	617b      	str	r3, [r7, #20]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &dlentot);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006712:	3309      	adds	r3, #9
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	601a      	str	r2, [r3, #0]
                SDO->CANtxBuff->data[0] = 0xC6U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800671e:	22c6      	movs	r2, #198	; 0xc6
 8006720:	715a      	strb	r2, [r3, #5]
 8006722:	e004      	b.n	800672e <CO_SDO_process+0xdee>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800672a:	22c4      	movs	r2, #196	; 0xc4
 800672c:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	22b5      	movs	r2, #181	; 0xb5
 8006732:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            sendResponse = true;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 800673c:	e212      	b.n	8006b64 <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 8006746:	2ba3      	cmp	r3, #163	; 0xa3
 8006748:	d006      	beq.n	8006758 <CO_SDO_process+0xe18>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 800674a:	497c      	ldr	r1, [pc, #496]	; (800693c <CO_SDO_process+0xffc>)
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7ff f8b7 	bl	80058c0 <CO_SDO_abort>
                return -1;
 8006752:	f04f 33ff 	mov.w	r3, #4294967295
 8006756:	e21f      	b.n	8006b98 <CO_SDO_process+0x1258>
            }

            SDO->bufferOffset = 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
            SDO->sequence = 0U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            SDO->endOfTransfer = false;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
            CO_FLAG_CLEAR(SDO->CANrxNew);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	22b6      	movs	r2, #182	; 0xb6
 800677c:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
        }
        // fallthrough

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(CO_FLAG_READ(SDO->CANrxNew)){
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 8131 	beq.w	80069ee <CO_SDO_process+0x10ae>
                uint8_t ackseq;
                uint16_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 8006794:	2ba2      	cmp	r3, #162	; 0xa2
 8006796:	d006      	beq.n	80067a6 <CO_SDO_process+0xe66>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006798:	4968      	ldr	r1, [pc, #416]	; (800693c <CO_SDO_process+0xffc>)
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f7ff f890 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 80067a0:	f04f 33ff 	mov.w	r3, #4294967295
 80067a4:	e1f8      	b.n	8006b98 <CO_SDO_process+0x1258>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 80067b4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d906      	bls.n	80067ca <CO_SDO_process+0xe8a>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
 80067bc:	4961      	ldr	r1, [pc, #388]	; (8006944 <CO_SDO_process+0x1004>)
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7ff f87e 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 80067c4:	f04f 33ff 	mov.w	r3, #4294967295
 80067c8:	e1e6      	b.n	8006b98 <CO_SDO_process+0x1258>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 375a 	ldrb.w	r3, [r3, #1882]	; 0x75a
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d02c      	beq.n	800682e <CO_SDO_process+0xeee>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80067da:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80067de:	429a      	cmp	r2, r3
 80067e0:	d125      	bne.n	800682e <CO_SDO_process+0xeee>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 80067e8:	f1c3 0307 	rsb	r3, r3, #7
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	b25b      	sxtb	r3, r3
 80067f0:	f063 033e 	orn	r3, r3, #62	; 0x3e
 80067f4:	b25a      	sxtb	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <CO_SDO_process+0xede>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006810:	3306      	adds	r3, #6
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	f202 7256 	addw	r2, r2, #1878	; 0x756
 8006818:	8812      	ldrh	r2, [r2, #0]
 800681a:	b292      	uxth	r2, r2
 800681c:	801a      	strh	r2, [r3, #0]

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	22b7      	movs	r2, #183	; 0xb7
 8006822:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749

                    /* send response */
                    sendResponse = true;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                    break;
 800682c:	e19a      	b.n	8006b64 <CO_SDO_process+0x1224>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 800682e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006832:	b29b      	uxth	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	00d2      	lsls	r2, r2, #3
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800683e:	2300      	movs	r3, #0
 8006840:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006844:	e017      	b.n	8006876 <CO_SDO_process+0xf36>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 800684c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006850:	441a      	add	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 8006858:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800685c:	440b      	add	r3, r1
 800685e:	7812      	ldrb	r2, [r2, #0]
 8006860:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 8006862:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006866:	3301      	adds	r3, #1
 8006868:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800686c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006870:	3301      	adds	r3, #1
 8006872:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800687c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006880:	429a      	cmp	r2, r3
 8006882:	d3e0      	bcc.n	8006846 <CO_SDO_process+0xf06>

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 800688a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800688e:	b29b      	uxth	r3, r3
 8006890:	4619      	mov	r1, r3
 8006892:	00c9      	lsls	r1, r1, #3
 8006894:	1acb      	subs	r3, r1, r3
 8006896:	b29b      	uxth	r3, r3
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	789a      	ldrb	r2, [r3, #2]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d173      	bne.n	800699e <CO_SDO_process+0x105e>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80068bc:	4619      	mov	r1, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80068c4:	461a      	mov	r2, r3
 80068c6:	4613      	mov	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	4299      	cmp	r1, r3
 80068ce:	d266      	bcs.n	800699e <CO_SDO_process+0x105e>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d161      	bne.n	800699e <CO_SDO_process+0x105e>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80068e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                    SDO->ODF_arg.data += len;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 80068ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068ee:	441a      	add	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8b3 1722 	ldrh.w	r1, [r3, #1826]	; 0x722
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 373a 	ldrb.w	r3, [r3, #1850]	; 0x73a
 8006902:	461a      	mov	r2, r3
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7fe fced 	bl	80052e4 <CO_OD_getLength>
 800690a:	4603      	mov	r3, r0
 800690c:	461a      	mov	r2, r3
 800690e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD(SDO, CO_CONFIG_SDO_BUFFER_SIZE);
 800691c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7fe fec3 	bl	80056ac <CO_SDO_readOD>
 8006926:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00c      	beq.n	8006948 <CO_SDO_process+0x1008>
                        CO_SDO_abort(SDO, abortCode);
 800692e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7fe ffc5 	bl	80058c0 <CO_SDO_abort>
                        return -1;
 8006936:	f04f 33ff 	mov.w	r3, #4294967295
 800693a:	e12d      	b.n	8006b98 <CO_SDO_process+0x1258>
 800693c:	05040001 	.word	0x05040001
 8006940:	05040002 	.word	0x05040002
 8006944:	05040003 	.word	0x05040003
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 800694e:	2b00      	cmp	r3, #0
 8006950:	d011      	beq.n	8006976 <CO_SDO_process+0x1036>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800695e:	4619      	mov	r1, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 8006966:	461a      	mov	r2, r3
 8006968:	f000 fda2 	bl	80074b0 <crc16_ccitt>
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 800697c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006980:	425b      	negs	r3, r3
 8006982:	441a      	add	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                    SDO->ODF_arg.dataLength +=  len;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8006990:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006994:	4413      	add	r3, r2
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80069a4:	461a      	mov	r2, r3
 80069a6:	4613      	mov	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	1a9b      	subs	r3, r3, r2
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d90b      	bls.n	80069ce <CO_SDO_process+0x108e>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d106      	bne.n	80069ce <CO_SDO_process+0x108e>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 80069c0:	4977      	ldr	r1, [pc, #476]	; (8006ba0 <CO_SDO_process+0x1260>)
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7fe ff7c 	bl	80058c0 <CO_SDO_abort>
                    return -1;
 80069c8:	f04f 33ff 	mov.w	r3, #4294967295
 80069cc:	e0e4      	b.n	8006b98 <CO_SDO_process+0x1258>
                }

                SDO->bufferOffset = 0U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                SDO->sequence = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
                SDO->endOfTransfer = false;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a

                /* clear flag here */
                CO_FLAG_CLEAR(SDO->CANrxNew);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 274a 	ldrb.w	r2, [r3, #1866]	; 0x74a
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d004      	beq.n	8006a08 <CO_SDO_process+0x10c8>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 375a 	ldrb.w	r3, [r3, #1882]	; 0x75a
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <CO_SDO_process+0x10cc>
                return 1;/* don't call CO_FLAG_CLEAR, so return directly */
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e0c5      	b.n	8006b98 <CO_SDO_process+0x1258>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            if(len > 7U){
 8006a26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a2a:	2b07      	cmp	r3, #7
 8006a2c:	d902      	bls.n	8006a34 <CO_SDO_process+0x10f4>
                len = 7U;
 8006a2e:	2307      	movs	r3, #7
 8006a30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
 8006a34:	2300      	movs	r3, #0
 8006a36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a3a:	e01a      	b.n	8006a72 <CO_SDO_process+0x1132>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006a48:	1c59      	adds	r1, r3, #1
 8006a4a:	b288      	uxth	r0, r1
 8006a4c:	68f9      	ldr	r1, [r7, #12]
 8006a4e:	f8a1 0720 	strh.w	r0, [r1, #1824]	; 0x720
 8006a52:	18d1      	adds	r1, r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8d3 276c 	ldr.w	r2, [r3, #1900]	; 0x76c
 8006a5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a5e:	3301      	adds	r3, #1
 8006a60:	7809      	ldrb	r1, [r1, #0]
 8006a62:	4413      	add	r3, r2
 8006a64:	460a      	mov	r2, r1
 8006a66:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
 8006a68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006a76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d3de      	bcc.n	8006a3c <CO_SDO_process+0x10fc>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8006a84:	3301      	adds	r3, #1
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	f892 274a 	ldrb.w	r2, [r2, #1866]	; 0x74a
 8006a9a:	715a      	strb	r2, [r3, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8b3 2720 	ldrh.w	r2, [r3, #1824]	; 0x720
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d11f      	bne.n	8006aec <CO_SDO_process+0x11ac>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d01a      	beq.n	8006aec <CO_SDO_process+0x11ac>
                SDO->CANtxBuff->data[0] |= 0x80;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006abc:	795a      	ldrb	r2, [r3, #5]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
 8006acc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
                SDO->blksize = SDO->sequence;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 274a 	ldrb.w	r2, [r3, #1866]	; 0x74a
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
                SDO->endOfTransfer = true;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
            }

            /* send response */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8d3 2768 	ldr.w	r2, [r3, #1896]	; 0x768
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006af8:	4619      	mov	r1, r3
 8006afa:	4610      	mov	r0, r2
 8006afc:	f002 fb9a 	bl	8009234 <CO_CANsend>

#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
            /* Inform OS to call this function again without delay. */
            if (timerNext_us != NULL) {
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <CO_SDO_process+0x11cc>
                *timerNext_us = 0;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
            }
#endif

            /* don't call CO_FLAG_CLEAR, so return directly */
            return 1;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e043      	b.n	8006b98 <CO_SDO_process+0x1258>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 8006b18:	2ba1      	cmp	r3, #161	; 0xa1
 8006b1a:	d006      	beq.n	8006b2a <CO_SDO_process+0x11ea>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006b1c:	4921      	ldr	r1, [pc, #132]	; (8006ba4 <CO_SDO_process+0x1264>)
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f7fe fece 	bl	80058c0 <CO_SDO_abort>
                return -1;
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295
 8006b28:	e036      	b.n	8006b98 <CO_SDO_process+0x1258>
            }

            /* finish the communication and run mainline processing again */
            SDO->state = CO_SDO_ST_IDLE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
            if (timerNext_us != NULL)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d014      	beq.n	8006b62 <CO_SDO_process+0x1222>
                *timerNext_us = 0;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
#endif
            break;
 8006b3e:	e010      	b.n	8006b62 <CO_SDO_process+0x1222>
            /* Nothing to do, this never happens. */
            break;
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
 8006b40:	4919      	ldr	r1, [pc, #100]	; (8006ba8 <CO_SDO_process+0x1268>)
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7fe febc 	bl	80058c0 <CO_SDO_abort>
            return -1;
 8006b48:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4c:	e024      	b.n	8006b98 <CO_SDO_process+0x1258>
            break;
 8006b4e:	bf00      	nop
 8006b50:	e008      	b.n	8006b64 <CO_SDO_process+0x1224>
            break;
 8006b52:	bf00      	nop
 8006b54:	e006      	b.n	8006b64 <CO_SDO_process+0x1224>
            break;
 8006b56:	bf00      	nop
 8006b58:	e004      	b.n	8006b64 <CO_SDO_process+0x1224>
            break;
 8006b5a:	bf00      	nop
 8006b5c:	e002      	b.n	8006b64 <CO_SDO_process+0x1224>
            break;
 8006b5e:	bf00      	nop
 8006b60:	e000      	b.n	8006b64 <CO_SDO_process+0x1224>
            break;
 8006b62:	bf00      	nop
        }
    }

    /* free buffer and send message */
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
    if(sendResponse) {
 8006b6c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <CO_SDO_process+0x1248>
        CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 2768 	ldr.w	r2, [r3, #1896]	; 0x768
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f002 fb56 	bl	8009234 <CO_CANsend>
    }

    if(SDO->state != CO_SDO_ST_IDLE){
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <CO_SDO_process+0x1256>
        return 1;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <CO_SDO_process+0x1258>
    }

    return 0;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	374c      	adds	r7, #76	; 0x4c
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd90      	pop	{r4, r7, pc}
 8006ba0:	05040002 	.word	0x05040002
 8006ba4:	05040001 	.word	0x05040001
 8006ba8:	06040047 	.word	0x06040047

08006bac <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8006bb8:	60fb      	str	r3, [r7, #12]
    return value;
 8006bba:	68fb      	ldr	r3, [r7, #12]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC;
    CO_NMT_internalState_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	617b      	str	r3, [r7, #20]
    operState = *SYNC->operatingState;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	74fb      	strb	r3, [r7, #19]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
 8006bde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006be2:	2b05      	cmp	r3, #5
 8006be4:	d003      	beq.n	8006bee <CO_SYNC_receive+0x26>
 8006be6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006bea:	2b7f      	cmp	r3, #127	; 0x7f
 8006bec:	d143      	bne.n	8006c76 <CO_SYNC_receive+0xae>
        uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bf4:	74bb      	strb	r3, [r7, #18]

        if(SYNC->counterOverflowValue == 0){
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	7d1b      	ldrb	r3, [r3, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10e      	bne.n	8006c1c <CO_SYNC_receive+0x54>
            if(DLC == 0U){
 8006bfe:	7cbb      	ldrb	r3, [r7, #18]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d103      	bne.n	8006c0c <CO_SYNC_receive+0x44>
                CO_FLAG_SET(SYNC->CANrxNew);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2201      	movs	r2, #1
 8006c08:	619a      	str	r2, [r3, #24]
 8006c0a:	e01c      	b.n	8006c46 <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)DLC | 0x0100U;
 8006c0c:	7cbb      	ldrb	r3, [r7, #18]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	849a      	strh	r2, [r3, #36]	; 0x24
 8006c1a:	e014      	b.n	8006c46 <CO_SYNC_receive+0x7e>
            }
        }
        else{
            if(DLC == 1U){
 8006c1c:	7cbb      	ldrb	r3, [r7, #18]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d10a      	bne.n	8006c38 <CO_SYNC_receive+0x70>
                uint8_t *data = CO_CANrxMsg_readData(msg);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	3321      	adds	r3, #33	; 0x21
 8006c26:	60fb      	str	r3, [r7, #12]
                SYNC->counter = data[0];
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	781a      	ldrb	r2, [r3, #0]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	775a      	strb	r2, [r3, #29]
                CO_FLAG_SET(SYNC->CANrxNew);
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2201      	movs	r2, #1
 8006c34:	619a      	str	r2, [r3, #24]
 8006c36:	e006      	b.n	8006c46 <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)DLC | 0x0200U;
 8006c38:	7cbb      	ldrb	r3, [r7, #18]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	849a      	strh	r2, [r3, #36]	; 0x24
            }
        }
        if(CO_FLAG_READ(SYNC->CANrxNew)) {
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d013      	beq.n	8006c76 <CO_SYNC_receive+0xae>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	7f1b      	ldrb	r3, [r3, #28]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	bf0c      	ite	eq
 8006c56:	2301      	moveq	r3, #1
 8006c58:	2300      	movne	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	771a      	strb	r2, [r3, #28]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_CALLBACK_PRE
            /* Optional signal to RTOS, which can resume task, which handles SYNC. */
            if(SYNC->pFunctSignalPre != NULL) {
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <CO_SYNC_receive+0xae>
                SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c72:	4610      	mov	r0, r2
 8006c74:	4798      	blx	r3
            }
#endif
        }
    }
}
 8006c76:	bf00      	nop
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <CO_ODF_1005>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08c      	sub	sp, #48	; 0x30
 8006c84:	af04      	add	r7, sp, #16
 8006c86:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61fb      	str	r3, [r7, #28]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	617b      	str	r3, [r7, #20]
    value = CO_getUint32(ODF_arg->data);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff ff88 	bl	8006bac <CO_getUint32>
 8006c9c:	6138      	str	r0, [r7, #16]

    if(!ODF_arg->reading){
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	7ddb      	ldrb	r3, [r3, #23]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d16f      	bne.n	8006d86 <CO_ODF_1005+0x106>
        uint8_t configureSyncProducer = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	76fb      	strb	r3, [r7, #27]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <CO_ODF_1005+0x3a>
            ret = CO_SDO_AB_INVALID_VALUE;
 8006cb4:	4b36      	ldr	r3, [pc, #216]	; (8006d90 <CO_ODF_1005+0x110>)
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	e00d      	b.n	8006cd6 <CO_ODF_1005+0x56>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d008      	beq.n	8006cd6 <CO_ODF_1005+0x56>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	7a1b      	ldrb	r3, [r3, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <CO_ODF_1005+0x52>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
 8006ccc:	4b31      	ldr	r3, [pc, #196]	; (8006d94 <CO_ODF_1005+0x114>)
 8006cce:	61fb      	str	r3, [r7, #28]
 8006cd0:	e001      	b.n	8006cd6 <CO_ODF_1005+0x56>
                }
                else{
                    configureSyncProducer = 1;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	76fb      	strb	r3, [r7, #27]
                }
            }
        }

        /* configure sync producer */
        if(ret == CO_SDO_AB_NONE){
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d139      	bne.n	8006d50 <CO_ODF_1005+0xd0>
            SYNC->COB_ID = (uint16_t)(value & 0x7FFU);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	815a      	strh	r2, [r3, #10]

            if(configureSyncProducer){
 8006cea:	7efb      	ldrb	r3, [r7, #27]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d02c      	beq.n	8006d4a <CO_ODF_1005+0xca>
                uint8_t len = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	76bb      	strb	r3, [r7, #26]
                if(SYNC->counterOverflowValue != 0U){
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	7d1b      	ldrb	r3, [r3, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d007      	beq.n	8006d0c <CO_ODF_1005+0x8c>
                    len = 1U;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	76bb      	strb	r3, [r7, #26]
                    SYNC->counter = 0U;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2200      	movs	r2, #0
 8006d04:	775a      	strb	r2, [r3, #29]
                    SYNC->timer = 0U;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = CO_CANtxBufferInit(
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	895a      	ldrh	r2, [r3, #10]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9301      	str	r3, [sp, #4]
 8006d1e:	7ebb      	ldrb	r3, [r7, #26]
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	2300      	movs	r3, #0
 8006d24:	f002 fa46 	bl	80091b4 <CO_CANtxBufferInit>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	63da      	str	r2, [r3, #60]	; 0x3c
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */

                if (SYNC->CANtxBuff == NULL) {
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d105      	bne.n	8006d42 <CO_ODF_1005+0xc2>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
 8006d36:	4b17      	ldr	r3, [pc, #92]	; (8006d94 <CO_ODF_1005+0x114>)
 8006d38:	61fb      	str	r3, [r7, #28]
                    SYNC->isProducer = false;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	721a      	strb	r2, [r3, #8]
 8006d40:	e006      	b.n	8006d50 <CO_ODF_1005+0xd0>
                } else {
                    SYNC->isProducer = true;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2201      	movs	r2, #1
 8006d46:	721a      	strb	r2, [r3, #8]
 8006d48:	e002      	b.n	8006d50 <CO_ODF_1005+0xd0>
                }
            }
            else{
                SYNC->isProducer = false;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	721a      	strb	r2, [r3, #8]
            }
        }

        /* configure sync consumer */
        if (ret == CO_SDO_AB_NONE) {
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d117      	bne.n	8006d86 <CO_ODF_1005+0x106>
            CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	895a      	ldrh	r2, [r3, #10]
 8006d62:	4b0d      	ldr	r3, [pc, #52]	; (8006d98 <CO_ODF_1005+0x118>)
 8006d64:	9302      	str	r3, [sp, #8]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006d72:	f002 f9c9 	bl	8009108 <CO_CANrxBufferInit>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]
                0x7FF,                  /* mask */
                0,                      /* rtr */
                (void*)SYNC,            /* object passed to receive function */
                CO_SYNC_receive);       /* this function will process received message */

            if (CANret != CO_ERROR_NO) {
 8006d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <CO_ODF_1005+0x106>
                ret = CO_SDO_AB_DATA_DEV_STATE;
 8006d82:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <CO_ODF_1005+0x114>)
 8006d84:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    return ret;
 8006d86:	69fb      	ldr	r3, [r7, #28]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3720      	adds	r7, #32
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	06090030 	.word	0x06090030
 8006d94:	08000022 	.word	0x08000022
 8006d98:	08006bc9 	.word	0x08006bc9

08006d9c <CO_ODF_1006>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8006da4:	2300      	movs	r3, #0
 8006da6:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff fefa 	bl	8006bac <CO_getUint32>
 8006db8:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	7ddb      	ldrb	r3, [r3, #23]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d11f      	bne.n	8006e02 <CO_ODF_1006+0x66>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d105      	bne.n	8006dd6 <CO_ODF_1006+0x3a>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <CO_ODF_1006+0x3a>
            SYNC->counter = 0;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	775a      	strb	r2, [r3, #29]
        }

        SYNC->periodTime = value;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	60da      	str	r2, [r3, #12]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	085a      	lsrs	r2, r3, #1
 8006de0:	4613      	mov	r3, r2
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	441a      	add	r2, r3
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	611a      	str	r2, [r3, #16]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d903      	bls.n	8006dfc <CO_ODF_1006+0x60>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfa:	611a      	str	r2, [r3, #16]
        }

        SYNC->timer = 0;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	621a      	str	r2, [r3, #32]
    }

    return ret;
 8006e02:	697b      	ldr	r3, [r7, #20]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <CO_ODF_1019>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	7ddb      	ldrb	r3, [r3, #23]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d130      	bne.n	8006e90 <CO_ODF_1019+0x84>
        uint8_t len = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <CO_ODF_1019+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
 8006e3a:	4b18      	ldr	r3, [pc, #96]	; (8006e9c <CO_ODF_1019+0x90>)
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	e027      	b.n	8006e90 <CO_ODF_1019+0x84>
        }
        else if((value == 1) || (value > 240)){
 8006e40:	7afb      	ldrb	r3, [r7, #11]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d002      	beq.n	8006e4c <CO_ODF_1019+0x40>
 8006e46:	7afb      	ldrb	r3, [r7, #11]
 8006e48:	2bf0      	cmp	r3, #240	; 0xf0
 8006e4a:	d902      	bls.n	8006e52 <CO_ODF_1019+0x46>
            ret = CO_SDO_AB_INVALID_VALUE;
 8006e4c:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <CO_ODF_1019+0x94>)
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	e01e      	b.n	8006e90 <CO_ODF_1019+0x84>
        }
        else{
            SYNC->counterOverflowValue = value;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	7afa      	ldrb	r2, [r7, #11]
 8006e56:	751a      	strb	r2, [r3, #20]
            if(value != 0){
 8006e58:	7afb      	ldrb	r3, [r7, #11]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <CO_ODF_1019+0x56>
                len = 1U;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff = CO_CANtxBufferInit(
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	895a      	ldrh	r2, [r3, #10]
 8006e70:	2300      	movs	r3, #0
 8006e72:	9301      	str	r3, [sp, #4]
 8006e74:	7cfb      	ldrb	r3, [r7, #19]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f002 f99b 	bl	80091b4 <CO_CANtxBufferInit>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	63da      	str	r2, [r3, #60]	; 0x3c
                    SYNC->COB_ID,           /* CAN identifier */
                    0,                      /* rtr */
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */

            if (SYNC->CANtxBuff == NULL) {
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <CO_ODF_1019+0x84>
                ret = CO_SDO_AB_DATA_DEV_STATE;
 8006e8c:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <CO_ODF_1019+0x90>)
 8006e8e:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return ret;
 8006e90:	697b      	ldr	r3, [r7, #20]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	08000022 	.word	0x08000022
 8006ea0:	06090030 	.word	0x06090030

08006ea4 <CO_SYNC_init>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	; 0x28
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	75bb      	strb	r3, [r7, #22]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00e      	beq.n	8006ede <CO_SYNC_init+0x3a>
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00b      	beq.n	8006ede <CO_SYNC_init+0x3a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <CO_SYNC_init+0x3a>
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d005      	beq.n	8006ede <CO_SYNC_init+0x3a>
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <CO_SYNC_init+0x3a>
        CANdevRx==NULL || CANdevTx==NULL){
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <CO_SYNC_init+0x40>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006ede:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee2:	e09d      	b.n	8007020 <CO_SYNC_init+0x17c>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	0f9b      	lsrs	r3, r3, #30
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	815a      	strh	r2, [r3, #10]

    SYNC->periodTime = communicationCyclePeriod;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f06:	60da      	str	r2, [r3, #12]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	085a      	lsrs	r2, r3, #1
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	611a      	str	r2, [r3, #16]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d903      	bls.n	8006f28 <CO_SYNC_init+0x84>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295
 8006f26:	611a      	str	r2, [r3, #16]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006f2e:	751a      	strb	r2, [r3, #20]
    if(synchronousCounterOverflowValue) len = 1;
 8006f30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <CO_SYNC_init+0x98>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	755a      	strb	r2, [r3, #21]

    CO_FLAG_CLEAR(SYNC->CANrxNew);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = false;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	771a      	strb	r2, [r3, #28]
    SYNC->timer = 0;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	775a      	strb	r2, [r3, #29]
    SYNC->receiveError = 0U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	849a      	strh	r2, [r3, #36]	; 0x24

    SYNC->em = em;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f70:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006f76:	869a      	strh	r2, [r3, #52]	; 0x34

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_CALLBACK_PRE
    SYNC->pFunctSignalPre = NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->functSignalObjectPre = NULL;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    CO_OD_configure(SDO, OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
 8006f84:	2300      	movs	r3, #0
 8006f86:	9301      	str	r3, [sp, #4]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4a26      	ldr	r2, [pc, #152]	; (8007028 <CO_SYNC_init+0x184>)
 8006f90:	f241 0105 	movw	r1, #4101	; 0x1005
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7fe f8f5 	bl	8005184 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4a21      	ldr	r2, [pc, #132]	; (800702c <CO_SYNC_init+0x188>)
 8006fa6:	f241 0106 	movw	r1, #4102	; 0x1006
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fe f8ea 	bl	8005184 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	9301      	str	r3, [sp, #4]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4a1d      	ldr	r2, [pc, #116]	; (8007030 <CO_SYNC_init+0x18c>)
 8006fbc:	f241 0119 	movw	r1, #4121	; 0x1019
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7fe f8df 	bl	8005184 <CO_OD_configure>

    /* configure SYNC CAN reception */
    ret = CO_CANrxBufferInit(
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	895a      	ldrh	r2, [r3, #10]
 8006fca:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8006fcc:	4b19      	ldr	r3, [pc, #100]	; (8007034 <CO_SYNC_init+0x190>)
 8006fce:	9302      	str	r3, [sp, #8]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	9301      	str	r3, [sp, #4]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fde:	f002 f893 	bl	8009108 <CO_CANrxBufferInit>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	75bb      	strb	r3, [r7, #22]
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fea:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	895a      	ldrh	r2, [r3, #10]
 8006ff8:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007006:	f002 f8d5 	bl	80091b4 <CO_CANtxBufferInit>
 800700a:	4602      	mov	r2, r0
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	63da      	str	r2, [r3, #60]	; 0x3c
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <CO_SYNC_init+0x178>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007018:	23ff      	movs	r3, #255	; 0xff
 800701a:	75bb      	strb	r3, [r7, #22]
    }

    return ret;
 800701c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	08006c81 	.word	0x08006c81
 800702c:	08006d9d 	.word	0x08006d9d
 8007030:	08006e0d 	.word	0x08006e0d
 8007034:	08006bc9 	.word	0x08006bc9

08007038 <CO_SYNC_process>:
CO_SYNC_status_t CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength,
        uint32_t               *timerNext_us)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
    CO_SYNC_status_t ret = CO_SYNC_NONE;
 8007046:	2300      	movs	r3, #0
 8007048:	77fb      	strb	r3, [r7, #31]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f993 3000 	ldrsb.w	r3, [r3]
 8007052:	2b05      	cmp	r3, #5
 8007054:	d006      	beq.n	8007064 <CO_SYNC_process+0x2c>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f993 3000 	ldrsb.w	r3, [r3]
 800705e:	2b7f      	cmp	r3, #127	; 0x7f
 8007060:	f040 80a8 	bne.w	80071b4 <CO_SYNC_process+0x17c>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	4413      	add	r3, r2
 800706c:	61bb      	str	r3, [r7, #24]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	429a      	cmp	r2, r3
 8007076:	d902      	bls.n	800707e <CO_SYNC_process+0x46>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	621a      	str	r2, [r3, #32]

        /* was SYNC just received */
        if(CO_FLAG_READ(SYNC->CANrxNew)){
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d007      	beq.n	8007096 <CO_SYNC_process+0x5e>
            SYNC->timer = 0;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	621a      	str	r2, [r3, #32]
            ret = CO_SYNC_RECEIVED;
 800708c:	2301      	movs	r3, #1
 800708e:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	619a      	str	r2, [r3, #24]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	7a1b      	ldrb	r3, [r3, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d045      	beq.n	800712a <CO_SYNC_process+0xf2>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d041      	beq.n	800712a <CO_SYNC_process+0xf2>
            if(SYNC->timer >= SYNC->periodTime){
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a1a      	ldr	r2, [r3, #32]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d32a      	bcc.n	8007108 <CO_SYNC_process+0xd0>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	7f5b      	ldrb	r3, [r3, #29]
 80070b6:	3301      	adds	r3, #1
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	775a      	strb	r2, [r3, #29]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	7f5a      	ldrb	r2, [r3, #29]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	7d1b      	ldrb	r3, [r3, #20]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d902      	bls.n	80070d0 <CO_SYNC_process+0x98>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	775a      	strb	r2, [r3, #29]
                SYNC->timer = 0;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	621a      	str	r2, [r3, #32]
                ret = CO_SYNC_RECEIVED;
 80070d6:	2301      	movs	r3, #1
 80070d8:	77fb      	strb	r3, [r7, #31]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	7f1b      	ldrb	r3, [r3, #28]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bf0c      	ite	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	2300      	movne	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	771a      	strb	r2, [r3, #28]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	7f52      	ldrb	r2, [r2, #29]
 80070f6:	715a      	strb	r2, [r3, #5]
                CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007100:	4619      	mov	r1, r3
 8007102:	4610      	mov	r0, r2
 8007104:	f002 f896 	bl	8009234 <CO_CANsend>
            }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_TIMERNEXT
            /* Calculate when next SYNC needs to be sent */
            if(timerNext_us != NULL){
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00d      	beq.n	800712a <CO_SYNC_process+0xf2>
                uint32_t diff = SYNC->periodTime - SYNC->timer;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	617b      	str	r3, [r7, #20]
                if(*timerNext_us > diff){
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	429a      	cmp	r2, r3
 8007122:	d202      	bcs.n	800712a <CO_SYNC_process+0xf2>
                    *timerNext_us = diff;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	601a      	str	r2, [r3, #0]
            }
#endif
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d012      	beq.n	8007156 <CO_SYNC_process+0x11e>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d209      	bcs.n	800714e <CO_SYNC_process+0x116>
                if(SYNC->curentSyncTimeIsInsideWindow){
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	7d5b      	ldrb	r3, [r3, #21]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <CO_SYNC_process+0x10e>
                    ret = CO_SYNC_OUTSIDE_WINDOW;
 8007142:	2302      	movs	r3, #2
 8007144:	77fb      	strb	r3, [r7, #31]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	755a      	strb	r2, [r3, #21]
 800714c:	e006      	b.n	800715c <CO_SYNC_process+0x124>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	755a      	strb	r2, [r3, #21]
 8007154:	e002      	b.n	800715c <CO_SYNC_process+0x124>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	755a      	strb	r2, [r3, #21]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d02b      	beq.n	80071bc <CO_SYNC_process+0x184>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f993 3000 	ldrsb.w	r3, [r3]
 800716c:	2b05      	cmp	r3, #5
 800716e:	d125      	bne.n	80071bc <CO_SYNC_process+0x184>
            if(SYNC->timer > SYNC->periodTimeoutTime) {
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1a      	ldr	r2, [r3, #32]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	429a      	cmp	r2, r3
 800717a:	d909      	bls.n	8007190 <CO_SYNC_process+0x158>
                CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6818      	ldr	r0, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8007188:	2118      	movs	r1, #24
 800718a:	f7fb fbb2 	bl	80028f2 <CO_errorReport>
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 800718e:	e015      	b.n	80071bc <CO_SYNC_process+0x184>
            }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_TIMERNEXT
            else if(timerNext_us != NULL) {
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d012      	beq.n	80071bc <CO_SYNC_process+0x184>
                uint32_t diff = SYNC->periodTimeoutTime - SYNC->timer;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	691a      	ldr	r2, [r3, #16]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	613b      	str	r3, [r7, #16]
                if(*timerNext_us > diff){
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d207      	bcs.n	80071bc <CO_SYNC_process+0x184>
                    *timerNext_us = diff;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	601a      	str	r2, [r3, #0]
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 80071b2:	e003      	b.n	80071bc <CO_SYNC_process+0x184>
            }
#endif
        }
    }
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	619a      	str	r2, [r3, #24]
 80071ba:	e000      	b.n	80071be <CO_SYNC_process+0x186>
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 80071bc:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <CO_SYNC_process+0x1a6>
        CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071ce:	f248 2240 	movw	r2, #33344	; 0x8240
 80071d2:	2119      	movs	r1, #25
 80071d4:	f7fb fb8d 	bl	80028f2 <CO_errorReport>
        SYNC->receiveError = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    return ret;
 80071de:	7ffb      	ldrb	r3, [r7, #31]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3720      	adds	r7, #32
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <CO_TIME_receive>:
 * Read received message from CAN module.
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received.
 */
static void CO_TIME_receive(void *object, void *msg){
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME;
    CO_NMT_internalState_t operState;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071f8:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	3321      	adds	r3, #33	; 0x21
 80071fe:	613b      	str	r3, [r7, #16]

    TIME = (CO_TIME_t*)object;   /* this is the correct pointer type of the first argument */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60fb      	str	r3, [r7, #12]
    operState = *TIME->operatingState;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
 800720c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007210:	2b05      	cmp	r3, #5
 8007212:	d003      	beq.n	800721c <CO_TIME_receive+0x34>
 8007214:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007218:	2b7f      	cmp	r3, #127	; 0x7f
 800721a:	d114      	bne.n	8007246 <CO_TIME_receive+0x5e>
        // Process Time from msg buffer
        memcpy(&TIME->Time.ullValue, data, DLC);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3340      	adds	r3, #64	; 0x40
 8007220:	7dfa      	ldrb	r2, [r7, #23]
 8007222:	6939      	ldr	r1, [r7, #16]
 8007224:	4618      	mov	r0, r3
 8007226:	f00f fe4b 	bl	8016ec0 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	615a      	str	r2, [r3, #20]

#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_CALLBACK_PRE
        /* Optional signal to RTOS, which can resume task, which handles TIME. */
        if(TIME->pFunctSignalPre != NULL) {
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00b      	beq.n	8007250 <CO_TIME_receive+0x68>
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007240:	4610      	mov	r0, r2
 8007242:	4798      	blx	r3
        if(TIME->pFunctSignalPre != NULL) {
 8007244:	e004      	b.n	8007250 <CO_TIME_receive+0x68>
        }
#endif
    }
    else{
        TIME->receiveError = (uint16_t)DLC;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	839a      	strh	r2, [r3, #28]
    }
}
 800724e:	bf00      	nop
 8007250:	bf00      	nop
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <CO_TIME_init>:
        uint32_t                TIMECyclePeriod,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08a      	sub	sp, #40	; 0x28
 800725c:	af04      	add	r7, sp, #16
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8007266:	2300      	movs	r3, #0
 8007268:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(TIME==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00e      	beq.n	800728e <CO_TIME_init+0x36>
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <CO_TIME_init+0x36>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d008      	beq.n	800728e <CO_TIME_init+0x36>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <CO_TIME_init+0x36>
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <CO_TIME_init+0x36>
    CANdevRx==NULL || CANdevTx==NULL){
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	2b00      	cmp	r3, #0
 800728c:	d102      	bne.n	8007294 <CO_TIME_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800728e:	f04f 33ff 	mov.w	r3, #4294967295
 8007292:	e075      	b.n	8007380 <CO_TIME_init+0x128>
    }

    /* Configure object variables */
    TIME->isConsumer = (COB_ID_TIMEMessage&0x80000000L) ? true : false;
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	0fdb      	lsrs	r3, r3, #31
 8007298:	b2da      	uxtb	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	721a      	strb	r2, [r3, #8]
    TIME->isProducer = (COB_ID_TIMEMessage&0x40000000L) ? true : false;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	0f9b      	lsrs	r3, r3, #30
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	725a      	strb	r2, [r3, #9]
    TIME->COB_ID = COB_ID_TIMEMessage&0x7FF; // 11 bit ID
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	815a      	strh	r2, [r3, #10]

    TIME->periodTime = TIMECyclePeriod;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c0:	60da      	str	r2, [r3, #12]
    TIME->periodTimeoutTime = TIMECyclePeriod / 2 * 3;
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	085a      	lsrs	r2, r3, #1
 80072c6:	4613      	mov	r3, r2
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	441a      	add	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	611a      	str	r2, [r3, #16]
    /* overflow? */
    if(TIME->periodTimeoutTime < TIMECyclePeriod)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d903      	bls.n	80072e2 <CO_TIME_init+0x8a>
        TIME->periodTimeoutTime = 0xFFFFFFFFL;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f04f 32ff 	mov.w	r2, #4294967295
 80072e0:	611a      	str	r2, [r3, #16]

    CO_FLAG_CLEAR(TIME->CANrxNew);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	615a      	str	r2, [r3, #20]
    TIME->timer = 0;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	619a      	str	r2, [r3, #24]
    TIME->receiveError = 0U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	839a      	strh	r2, [r3, #28]

    TIME->em = em;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	601a      	str	r2, [r3, #0]
    TIME->operatingState = operatingState;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	605a      	str	r2, [r3, #4]

#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_CALLBACK_PRE
    TIME->pFunctSignalPre = NULL;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	621a      	str	r2, [r3, #32]
    TIME->functSignalObjectPre = NULL;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	625a      	str	r2, [r3, #36]	; 0x24
#endif


    /* configure TIME consumer message reception */
    TIME->CANdevRx = CANdevRx;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007310:	629a      	str	r2, [r3, #40]	; 0x28
    TIME->CANdevRxIdx = CANdevRxIdx;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007316:	859a      	strh	r2, [r3, #44]	; 0x2c
	if (TIME->isConsumer) {
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	7a1b      	ldrb	r3, [r3, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00f      	beq.n	8007340 <CO_TIME_init+0xe8>
        ret = CO_CANrxBufferInit(
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	895a      	ldrh	r2, [r3, #10]
 8007324:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8007326:	4b18      	ldr	r3, [pc, #96]	; (8007388 <CO_TIME_init+0x130>)
 8007328:	9302      	str	r3, [sp, #8]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	2300      	movs	r3, #0
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007338:	f001 fee6 	bl	8009108 <CO_CANrxBufferInit>
 800733c:	4603      	mov	r3, r0
 800733e:	75fb      	strb	r3, [r7, #23]
                (void*)TIME,            /* object passed to receive function */
                CO_TIME_receive);       /* this function will process received message */
    }

    /* configure TIME producer message transmission */
    TIME->CANdevTx = CANdevTx;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007344:	631a      	str	r2, [r3, #48]	; 0x30
    TIME->CANdevTxIdx = CANdevTxIdx;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800734a:	869a      	strh	r2, [r3, #52]	; 0x34
    if (TIME->isProducer) {
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	7a5b      	ldrb	r3, [r3, #9]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d013      	beq.n	800737c <CO_TIME_init+0x124>
        TIME->TXbuff = CO_CANtxBufferInit(
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	895a      	ldrh	r2, [r3, #10]
 8007358:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800735a:	2300      	movs	r3, #0
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	2306      	movs	r3, #6
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	2300      	movs	r3, #0
 8007364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007366:	f001 ff25 	bl	80091b4 <CO_CANtxBufferInit>
 800736a:	4602      	mov	r2, r0
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38
            TIME->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            TIME_MSG_LENGTH,        /* number of data bytes */
            0);                     /* synchronous message flag bit */

        if (TIME->TXbuff == NULL) {
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <CO_TIME_init+0x124>
            ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007378:	23ff      	movs	r3, #255	; 0xff
 800737a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
 800737c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	080071e9 	.word	0x080071e9

0800738c <CO_TIME_process>:

/******************************************************************************/
uint8_t CO_TIME_process(
        CO_TIME_t              *TIME,
        uint32_t                timeDifference_us)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
    uint8_t ret = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*TIME->operatingState == CO_NMT_OPERATIONAL || *TIME->operatingState == CO_NMT_PRE_OPERATIONAL){
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f993 3000 	ldrsb.w	r3, [r3]
 80073a2:	2b05      	cmp	r3, #5
 80073a4:	d005      	beq.n	80073b2 <CO_TIME_process+0x26>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f993 3000 	ldrsb.w	r3, [r3]
 80073ae:	2b7f      	cmp	r3, #127	; 0x7f
 80073b0:	d162      	bne.n	8007478 <CO_TIME_process+0xec>
        /* update TIME timer, no overflow */
        uint32_t timeDifference_ms = (timeDifference_us+500) / 1000; //this should be optimized
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80073b8:	4a3c      	ldr	r2, [pc, #240]	; (80074ac <CO_TIME_process+0x120>)
 80073ba:	fba2 2303 	umull	r2, r3, r2, r3
 80073be:	099b      	lsrs	r3, r3, #6
 80073c0:	613b      	str	r3, [r7, #16]
        timerNew = TIME->timer + timeDifference_ms;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	4413      	add	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
        if(timerNew > TIME->timer)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d902      	bls.n	80073dc <CO_TIME_process+0x50>
            TIME->timer = timerNew;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	619a      	str	r2, [r3, #24]

        /* was TIME just received */
        if(CO_FLAG_READ(TIME->CANrxNew)){
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <CO_TIME_process+0x68>
            TIME->timer = 0;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	619a      	str	r2, [r3, #24]
            ret = 1;
 80073ea:	2301      	movs	r3, #1
 80073ec:	75fb      	strb	r3, [r7, #23]
            CO_FLAG_CLEAR(TIME->CANrxNew);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	615a      	str	r2, [r3, #20]
        }

        /* TIME producer */
        if(TIME->isProducer && TIME->periodTime){
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	7a5b      	ldrb	r3, [r3, #9]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d01f      	beq.n	800743c <CO_TIME_process+0xb0>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01b      	beq.n	800743c <CO_TIME_process+0xb0>
            if(TIME->timer >= TIME->periodTime){
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699a      	ldr	r2, [r3, #24]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	429a      	cmp	r2, r3
 800740e:	d315      	bcc.n	800743c <CO_TIME_process+0xb0>
                TIME->timer = 0;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	619a      	str	r2, [r3, #24]
                ret = 1;
 8007416:	2301      	movs	r3, #1
 8007418:	75fb      	strb	r3, [r7, #23]
                memcpy(TIME->TXbuff->data, &TIME->Time.ullValue, TIME_MSG_LENGTH);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741e:	1d58      	adds	r0, r3, #5
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3340      	adds	r3, #64	; 0x40
 8007424:	2206      	movs	r2, #6
 8007426:	4619      	mov	r1, r3
 8007428:	f00f fd4a 	bl	8016ec0 <memcpy>
                CO_CANsend(TIME->CANdevTx, TIME->TXbuff);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	4619      	mov	r1, r3
 8007436:	4610      	mov	r0, r2
 8007438:	f001 fefc 	bl	8009234 <CO_CANsend>
            }
        }

        /* Verify TIME timeout if node is consumer */
        if(TIME->isConsumer && TIME->periodTime && TIME->timer > TIME->periodTimeoutTime
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	7a1b      	ldrb	r3, [r3, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01d      	beq.n	8007480 <CO_TIME_process+0xf4>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d019      	beq.n	8007480 <CO_TIME_process+0xf4>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699a      	ldr	r2, [r3, #24]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	429a      	cmp	r2, r3
 8007456:	d913      	bls.n	8007480 <CO_TIME_process+0xf4>
        && *TIME->operatingState == CO_NMT_OPERATIONAL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f993 3000 	ldrsb.w	r3, [r3]
 8007460:	2b05      	cmp	r3, #5
 8007462:	d10d      	bne.n	8007480 <CO_TIME_process+0xf4>
            CO_errorReport(TIME->em, CO_EM_TIME_TIMEOUT, CO_EMC_COMMUNICATION, TIME->timer);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8007470:	2109      	movs	r1, #9
 8007472:	f7fb fa3e 	bl	80028f2 <CO_errorReport>
    if(*TIME->operatingState == CO_NMT_OPERATIONAL || *TIME->operatingState == CO_NMT_PRE_OPERATIONAL){
 8007476:	e003      	b.n	8007480 <CO_TIME_process+0xf4>
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	615a      	str	r2, [r3, #20]
 800747e:	e000      	b.n	8007482 <CO_TIME_process+0xf6>
    if(*TIME->operatingState == CO_NMT_OPERATIONAL || *TIME->operatingState == CO_NMT_PRE_OPERATIONAL){
 8007480:	bf00      	nop
    }

    /* verify error from receive function */
    if(TIME->receiveError != 0U){
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	8b9b      	ldrh	r3, [r3, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00b      	beq.n	80074a2 <CO_TIME_process+0x116>
        CO_errorReport(TIME->em, CO_EM_TIME_LENGTH, CO_EMC_TIME_DATA_LENGTH, (uint32_t)TIME->receiveError);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	8b9b      	ldrh	r3, [r3, #28]
 8007492:	f248 2260 	movw	r2, #33376	; 0x8260
 8007496:	210a      	movs	r1, #10
 8007498:	f7fb fa2b 	bl	80028f2 <CO_errorReport>
        TIME->receiveError = 0U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	839a      	strh	r2, [r3, #28]
    }

    return ret;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	10624dd3 	.word	0x10624dd3

080074b0 <crc16_ccitt>:
/******************************************************************************/
unsigned short crc16_ccitt(
        const unsigned char     block[],
        unsigned int            blockLength,
        unsigned short          crc)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
    unsigned int i;

    for(i=0U; i<blockLength; i++){
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	e015      	b.n	80074f0 <crc16_ccitt+0x40>
        unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
 80074c4:	88fb      	ldrh	r3, [r7, #6]
 80074c6:	0a1b      	lsrs	r3, r3, #8
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68f9      	ldr	r1, [r7, #12]
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	440b      	add	r3, r1
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	4053      	eors	r3, r2
 80074d6:	827b      	strh	r3, [r7, #18]
        crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	021b      	lsls	r3, r3, #8
 80074dc:	b29a      	uxth	r2, r3
 80074de:	8a7b      	ldrh	r3, [r7, #18]
 80074e0:	4909      	ldr	r1, [pc, #36]	; (8007508 <crc16_ccitt+0x58>)
 80074e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80074e6:	4053      	eors	r3, r2
 80074e8:	80fb      	strh	r3, [r7, #6]
    for(i=0U; i<blockLength; i++){
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	3301      	adds	r3, #1
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d3e5      	bcc.n	80074c4 <crc16_ccitt+0x14>
    }
    return crc;
 80074f8:	88fb      	ldrh	r3, [r7, #6]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	0801858c 	.word	0x0801858c

0800750c <PP_reset>:
}DS402_PP_Mode_t;

DS402_PP_Mode_t g_ProfPosMode;

void PP_reset()
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
	g_ProfPosMode.status = DS402_PP_Idle;
 8007510:	4b05      	ldr	r3, [pc, #20]	; (8007528 <PP_reset+0x1c>)
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
	g_ProfPosMode.setPosBit = 0;
 8007516:	4b04      	ldr	r3, [pc, #16]	; (8007528 <PP_reset+0x1c>)
 8007518:	2200      	movs	r2, #0
 800751a:	705a      	strb	r2, [r3, #1]
}
 800751c:	bf00      	nop
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	20000a78 	.word	0x20000a78

0800752c <PP_Init>:

void PP_Init()
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
	PP_reset();
 8007530:	f7ff ffec 	bl	800750c <PP_reset>
}
 8007534:	bf00      	nop
 8007536:	bd80      	pop	{r7, pc}

08007538 <PP_OnTargetReach>:

void PP_OnTargetReach(int32_t position)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	/* Reset the bit4*/
	g_ProfPosMode.setPosBit = 0;
 8007540:	4b09      	ldr	r3, [pc, #36]	; (8007568 <PP_OnTargetReach+0x30>)
 8007542:	2200      	movs	r2, #0
 8007544:	705a      	strb	r2, [r3, #1]

	/* Set the status word bit 10*/
	g_MotionCtrl.statusWord |= 0x400;
 8007546:	4b09      	ldr	r3, [pc, #36]	; (800756c <PP_OnTargetReach+0x34>)
 8007548:	885b      	ldrh	r3, [r3, #2]
 800754a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800754e:	b29a      	uxth	r2, r3
 8007550:	4b06      	ldr	r3, [pc, #24]	; (800756c <PP_OnTargetReach+0x34>)
 8007552:	805a      	strh	r2, [r3, #2]

	g_ProfPosMode.status = DS402_PP_Idle;
 8007554:	4b04      	ldr	r3, [pc, #16]	; (8007568 <PP_OnTargetReach+0x30>)
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20000a78 	.word	0x20000a78
 800756c:	20000a44 	.word	0x20000a44

08007570 <PP_OnMotionStart>:

void PP_OnMotionStart()
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
	/* New set point acknowledged
	 * Set status word bit 12*/
	g_MotionCtrl.statusWord |= 0x1000;
 8007574:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <PP_OnMotionStart+0x30>)
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800757c:	b29a      	uxth	r2, r3
 800757e:	4b08      	ldr	r3, [pc, #32]	; (80075a0 <PP_OnMotionStart+0x30>)
 8007580:	805a      	strh	r2, [r3, #2]

	/* Reset the status word reach target flag, bit10*/
	g_MotionCtrl.statusWord &= ~0x400;
 8007582:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <PP_OnMotionStart+0x30>)
 8007584:	885b      	ldrh	r3, [r3, #2]
 8007586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800758a:	b29a      	uxth	r2, r3
 800758c:	4b04      	ldr	r3, [pc, #16]	; (80075a0 <PP_OnMotionStart+0x30>)
 800758e:	805a      	strh	r2, [r3, #2]

	g_ProfPosMode.status = DS402_PP_Running;
 8007590:	4b04      	ldr	r3, [pc, #16]	; (80075a4 <PP_OnMotionStart+0x34>)
 8007592:	2201      	movs	r2, #1
 8007594:	701a      	strb	r2, [r3, #0]
}
 8007596:	bf00      	nop
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	20000a44 	.word	0x20000a44
 80075a4:	20000a78 	.word	0x20000a78

080075a8 <PP_active>:

void PP_active(uint16_t controlWord)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	80fb      	strh	r3, [r7, #6]
	/* Reset the bit4*/
	g_ProfPosMode.setPosBit = 0;
 80075b2:	4b06      	ldr	r3, [pc, #24]	; (80075cc <PP_active+0x24>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	705a      	strb	r2, [r3, #1]

	MT_setMotionStartPreCallback(PP_OnMotionStart);
 80075b8:	4805      	ldr	r0, [pc, #20]	; (80075d0 <PP_active+0x28>)
 80075ba:	f002 ffa1 	bl	800a500 <MT_setMotionStartPreCallback>
	MT_setReachCallback(PP_OnTargetReach);
 80075be:	4805      	ldr	r0, [pc, #20]	; (80075d4 <PP_active+0x2c>)
 80075c0:	f002 ff8e 	bl	800a4e0 <MT_setReachCallback>
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20000a78 	.word	0x20000a78
 80075d0:	08007571 	.word	0x08007571
 80075d4:	08007539 	.word	0x08007539

080075d8 <PP_exec>:

uint16_t PP_exec(uint16_t controlWord)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	80fb      	strh	r3, [r7, #6]
	uint16_t ret = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	817b      	strh	r3, [r7, #10]

	uint8_t newSetPoint = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]
	uint8_t changeSetImmediately = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73bb      	strb	r3, [r7, #14]
	uint8_t halt = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	737b      	strb	r3, [r7, #13]
	uint8_t abs  = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	733b      	strb	r3, [r7, #12]

	/* Halt bit 8*/
	if (controlWord & 0x100){
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <PP_exec+0x34>
		g_ProfPosMode.status = DS402_PP_Halt;
 8007600:	4b2b      	ldr	r3, [pc, #172]	; (80076b0 <PP_exec+0xd8>)
 8007602:	2202      	movs	r2, #2
 8007604:	701a      	strb	r2, [r3, #0]

		/*Reset the motion*/
		halt = 1;
 8007606:	2301      	movs	r3, #1
 8007608:	737b      	strb	r3, [r7, #13]
 800760a:	e027      	b.n	800765c <PP_exec+0x84>
	}else{
		/* New set position bit 4*/
		if (controlWord & 0x10){
 800760c:	88fb      	ldrh	r3, [r7, #6]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <PP_exec+0x54>
			if (!g_ProfPosMode.setPosBit){
 8007616:	4b26      	ldr	r3, [pc, #152]	; (80076b0 <PP_exec+0xd8>)
 8007618:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <PP_exec+0x4c>
				/* Start an new position motion task*/
				newSetPoint = 1;
 8007620:	2301      	movs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
			}
			g_ProfPosMode.setPosBit = 1;
 8007624:	4b22      	ldr	r3, [pc, #136]	; (80076b0 <PP_exec+0xd8>)
 8007626:	2201      	movs	r2, #1
 8007628:	705a      	strb	r2, [r3, #1]
 800762a:	e009      	b.n	8007640 <PP_exec+0x68>
		}else{
			g_ProfPosMode.setPosBit = 0;
 800762c:	4b20      	ldr	r3, [pc, #128]	; (80076b0 <PP_exec+0xd8>)
 800762e:	2200      	movs	r2, #0
 8007630:	705a      	strb	r2, [r3, #1]

			/* Reset the ack flag, bit 12*/
			g_MotionCtrl.statusWord &= ~0x1000;
 8007632:	4b20      	ldr	r3, [pc, #128]	; (80076b4 <PP_exec+0xdc>)
 8007634:	885b      	ldrh	r3, [r3, #2]
 8007636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800763a:	b29a      	uxth	r2, r3
 800763c:	4b1d      	ldr	r3, [pc, #116]	; (80076b4 <PP_exec+0xdc>)
 800763e:	805a      	strh	r2, [r3, #2]
		}

		/* Change set immediately bit 5*/
		if (controlWord & 0x20){
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <PP_exec+0x76>
			/*Set the motion posqueue pop position immediately*/
			changeSetImmediately = 1;
 800764a:	2301      	movs	r3, #1
 800764c:	73bb      	strb	r3, [r7, #14]
		}

		/* Absolution or relative position*/
		if (!(controlWord & 0x40)){
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <PP_exec+0x84>
			abs = 1;
 8007658:	2301      	movs	r3, #1
 800765a:	733b      	strb	r3, [r7, #12]

	/* Build motion task
	 * Peak velocity 0x6081
	 * Acceleration/deceleration 0x6083
	 * */
	if (halt){
 800765c:	7b7b      	ldrb	r3, [r7, #13]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <PP_exec+0x96>
		/* Build a halt task*/
		/* motion halt with deceleration*/
		MT_Halt(g_MotionCtrl.dece);
 8007662:	4b14      	ldr	r3, [pc, #80]	; (80076b4 <PP_exec+0xdc>)
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	4618      	mov	r0, r3
 8007668:	f003 f93e 	bl	800a8e8 <MT_Halt>
 800766c:	e01a      	b.n	80076a4 <PP_exec+0xcc>
	}else{
		if (newSetPoint){
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d017      	beq.n	80076a4 <PP_exec+0xcc>
			if (changeSetImmediately){
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <PP_exec+0xb8>
				/* Replace the current motion */
				MT_UpdateTask(abs, g_MotionCtrl.targetPos, g_MotionCtrl.profileVel, g_MotionCtrl.acce);
 800767a:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <PP_exec+0xdc>)
 800767c:	6919      	ldr	r1, [r3, #16]
 800767e:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <PP_exec+0xdc>)
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	461a      	mov	r2, r3
 8007684:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <PP_exec+0xdc>)
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	7b38      	ldrb	r0, [r7, #12]
 800768a:	f003 f965 	bl	800a958 <MT_UpdateTask>
 800768e:	e009      	b.n	80076a4 <PP_exec+0xcc>
			}else{
				/* Insert an new task*/
				MT_NewTask(abs, g_MotionCtrl.targetPos, g_MotionCtrl.profileVel, g_MotionCtrl.acce);
 8007690:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <PP_exec+0xdc>)
 8007692:	6919      	ldr	r1, [r3, #16]
 8007694:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <PP_exec+0xdc>)
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	461a      	mov	r2, r3
 800769a:	4b06      	ldr	r3, [pc, #24]	; (80076b4 <PP_exec+0xdc>)
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	7b38      	ldrb	r0, [r7, #12]
 80076a0:	f003 f99e 	bl	800a9e0 <MT_NewTask>
			}
		}
	}

	return ret;
 80076a4:	897b      	ldrh	r3, [r7, #10]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20000a78 	.word	0x20000a78
 80076b4:	20000a44 	.word	0x20000a44

080076b8 <DS402_buildStatusWordByStatus>:

	g_DSStateData.lastStatusWord = g_DSStateData.statusWord;
}*/

uint16_t DS402_buildStatusWordByStatus(uint16_t curStatusWord, DS402_Status_t status)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	460a      	mov	r2, r1
 80076c2:	80fb      	strh	r3, [r7, #6]
 80076c4:	4613      	mov	r3, r2
 80076c6:	717b      	strb	r3, [r7, #5]
	uint16_t newStatusWord = curStatusWord;
 80076c8:	88fb      	ldrh	r3, [r7, #6]
 80076ca:	81fb      	strh	r3, [r7, #14]

	switch(status){
 80076cc:	797b      	ldrb	r3, [r7, #5]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	f200 8089 	bhi.w	80077e8 <DS402_buildStatusWordByStatus+0x130>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <DS402_buildStatusWordByStatus+0x24>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	08007761 	.word	0x08007761
 80076e0:	0800776b 	.word	0x0800776b
 80076e4:	0800777d 	.word	0x0800777d
 80076e8:	0800778f 	.word	0x0800778f
 80076ec:	080077a1 	.word	0x080077a1
 80076f0:	080077b3 	.word	0x080077b3
 80076f4:	080077e9 	.word	0x080077e9
 80076f8:	080077e9 	.word	0x080077e9
 80076fc:	080077e9 	.word	0x080077e9
 8007700:	080077e9 	.word	0x080077e9
 8007704:	080077e9 	.word	0x080077e9
 8007708:	080077e9 	.word	0x080077e9
 800770c:	080077e9 	.word	0x080077e9
 8007710:	080077e9 	.word	0x080077e9
 8007714:	080077e9 	.word	0x080077e9
 8007718:	080077e9 	.word	0x080077e9
 800771c:	080077e9 	.word	0x080077e9
 8007720:	080077e9 	.word	0x080077e9
 8007724:	080077e9 	.word	0x080077e9
 8007728:	080077e9 	.word	0x080077e9
 800772c:	080077e9 	.word	0x080077e9
 8007730:	080077e9 	.word	0x080077e9
 8007734:	080077e9 	.word	0x080077e9
 8007738:	080077e9 	.word	0x080077e9
 800773c:	080077e9 	.word	0x080077e9
 8007740:	080077e9 	.word	0x080077e9
 8007744:	080077e9 	.word	0x080077e9
 8007748:	080077e9 	.word	0x080077e9
 800774c:	080077e9 	.word	0x080077e9
 8007750:	080077e9 	.word	0x080077e9
 8007754:	080077e9 	.word	0x080077e9
 8007758:	080077c5 	.word	0x080077c5
 800775c:	080077d7 	.word	0x080077d7
	case DS402_Status_NotReadyToSwitchON:
		newStatusWord &= 0xFFB0;
 8007760:	89fb      	ldrh	r3, [r7, #14]
 8007762:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007766:	81fb      	strh	r3, [r7, #14]
		break;
 8007768:	e03f      	b.n	80077ea <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_SwitchONDisabled:
		newStatusWord &= 0xFFB0;
 800776a:	89fb      	ldrh	r3, [r7, #14]
 800776c:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007770:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0040;
 8007772:	89fb      	ldrh	r3, [r7, #14]
 8007774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007778:	81fb      	strh	r3, [r7, #14]
		break;
 800777a:	e036      	b.n	80077ea <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_ReadyToSwitchON:
		newStatusWord &= 0xFFB0;
 800777c:	89fb      	ldrh	r3, [r7, #14]
 800777e:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007782:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0021;
 8007784:	89fb      	ldrh	r3, [r7, #14]
 8007786:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800778a:	81fb      	strh	r3, [r7, #14]
		break;
 800778c:	e02d      	b.n	80077ea <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_SwitchedON:
		newStatusWord &= 0xFFB0;
 800778e:	89fb      	ldrh	r3, [r7, #14]
 8007790:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007794:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0023;
 8007796:	89fb      	ldrh	r3, [r7, #14]
 8007798:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 800779c:	81fb      	strh	r3, [r7, #14]
		break;
 800779e:	e024      	b.n	80077ea <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_OperationEnable:
		newStatusWord &= 0xFFB0;
 80077a0:	89fb      	ldrh	r3, [r7, #14]
 80077a2:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 80077a6:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0027;
 80077a8:	89fb      	ldrh	r3, [r7, #14]
 80077aa:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80077ae:	81fb      	strh	r3, [r7, #14]
		break;
 80077b0:	e01b      	b.n	80077ea <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_QuickStopActive:
		newStatusWord &= 0xFF90;
 80077b2:	89fb      	ldrh	r3, [r7, #14]
 80077b4:	f023 036f 	bic.w	r3, r3, #111	; 0x6f
 80077b8:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0007;
 80077ba:	89fb      	ldrh	r3, [r7, #14]
 80077bc:	f043 0307 	orr.w	r3, r3, #7
 80077c0:	81fb      	strh	r3, [r7, #14]
		break;
 80077c2:	e012      	b.n	80077ea <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_FaultReactionActive:
		newStatusWord &= 0xFFB0;
 80077c4:	89fb      	ldrh	r3, [r7, #14]
 80077c6:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 80077ca:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x000F;
 80077cc:	89fb      	ldrh	r3, [r7, #14]
 80077ce:	f043 030f 	orr.w	r3, r3, #15
 80077d2:	81fb      	strh	r3, [r7, #14]
		break;
 80077d4:	e009      	b.n	80077ea <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_Fault:
		newStatusWord &= 0xFFB0;
 80077d6:	89fb      	ldrh	r3, [r7, #14]
 80077d8:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 80077dc:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0008;
 80077de:	89fb      	ldrh	r3, [r7, #14]
 80077e0:	f043 0308 	orr.w	r3, r3, #8
 80077e4:	81fb      	strh	r3, [r7, #14]
		break;
 80077e6:	e000      	b.n	80077ea <DS402_buildStatusWordByStatus+0x132>
	default:
		break;
 80077e8:	bf00      	nop
	}

	return newStatusWord;
 80077ea:	89fb      	ldrh	r3, [r7, #14]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <DS402_getStatus>:

	return controlWord;
}

DS402_Status_t DS402_getStatus(uint16_t statusWord)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	80fb      	strh	r3, [r7, #6]
	DS402_Status_t status = DS402_Status_Fault;
 8007802:	2321      	movs	r3, #33	; 0x21
 8007804:	73fb      	strb	r3, [r7, #15]
	uint16_t sw = statusWord & 0x6F;
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800780c:	81bb      	strh	r3, [r7, #12]

	if (sw == 0x21) {
 800780e:	89bb      	ldrh	r3, [r7, #12]
 8007810:	2b21      	cmp	r3, #33	; 0x21
 8007812:	d102      	bne.n	800781a <DS402_getStatus+0x22>
		status = DS402_Status_ReadyToSwitchON;
 8007814:	2303      	movs	r3, #3
 8007816:	73fb      	strb	r3, [r7, #15]
 8007818:	e026      	b.n	8007868 <DS402_getStatus+0x70>
	}else if (sw == 0x23) {
 800781a:	89bb      	ldrh	r3, [r7, #12]
 800781c:	2b23      	cmp	r3, #35	; 0x23
 800781e:	d102      	bne.n	8007826 <DS402_getStatus+0x2e>
		status = DS402_Status_SwitchedON;
 8007820:	2304      	movs	r3, #4
 8007822:	73fb      	strb	r3, [r7, #15]
 8007824:	e020      	b.n	8007868 <DS402_getStatus+0x70>
	}else if (sw == 0x27) {
 8007826:	89bb      	ldrh	r3, [r7, #12]
 8007828:	2b27      	cmp	r3, #39	; 0x27
 800782a:	d102      	bne.n	8007832 <DS402_getStatus+0x3a>
		status = DS402_Status_OperationEnable;
 800782c:	2305      	movs	r3, #5
 800782e:	73fb      	strb	r3, [r7, #15]
 8007830:	e01a      	b.n	8007868 <DS402_getStatus+0x70>
	}else if (sw == 0x07) {
 8007832:	89bb      	ldrh	r3, [r7, #12]
 8007834:	2b07      	cmp	r3, #7
 8007836:	d102      	bne.n	800783e <DS402_getStatus+0x46>
		status = DS402_Status_QuickStopActive;
 8007838:	2306      	movs	r3, #6
 800783a:	73fb      	strb	r3, [r7, #15]
 800783c:	e014      	b.n	8007868 <DS402_getStatus+0x70>
	}else {
		sw &= 0x4F;
 800783e:	89bb      	ldrh	r3, [r7, #12]
 8007840:	f003 034f 	and.w	r3, r3, #79	; 0x4f
 8007844:	81bb      	strh	r3, [r7, #12]
		if (sw == 0) {
 8007846:	89bb      	ldrh	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <DS402_getStatus+0x5a>
			status = DS402_Status_NotReadyToSwitchON;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
 8007850:	e00a      	b.n	8007868 <DS402_getStatus+0x70>
		}else if (sw == 0x40) {
 8007852:	89bb      	ldrh	r3, [r7, #12]
 8007854:	2b40      	cmp	r3, #64	; 0x40
 8007856:	d102      	bne.n	800785e <DS402_getStatus+0x66>
			status = DS402_Status_SwitchONDisabled;
 8007858:	2302      	movs	r3, #2
 800785a:	73fb      	strb	r3, [r7, #15]
 800785c:	e004      	b.n	8007868 <DS402_getStatus+0x70>
		}else if (sw == 0x0F) {
 800785e:	89bb      	ldrh	r3, [r7, #12]
 8007860:	2b0f      	cmp	r3, #15
 8007862:	d101      	bne.n	8007868 <DS402_getStatus+0x70>
			status = DS402_Status_FaultReactionActive;
 8007864:	2320      	movs	r3, #32
 8007866:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <DS402_getNewStatusByControlWord>:
	}
	return command;
}

DS402_Status_t DS402_getNewStatusByControlWord(DS402_Status_t curStatus, uint16_t controlWord)
{
 8007876:	b480      	push	{r7}
 8007878:	b085      	sub	sp, #20
 800787a:	af00      	add	r7, sp, #0
 800787c:	4603      	mov	r3, r0
 800787e:	460a      	mov	r2, r1
 8007880:	71fb      	strb	r3, [r7, #7]
 8007882:	4613      	mov	r3, r2
 8007884:	80bb      	strh	r3, [r7, #4]
	DS402_Status_t newStatus = DS402_Status_Fault;
 8007886:	2321      	movs	r3, #33	; 0x21
 8007888:	73fb      	strb	r3, [r7, #15]
	//DS402_Status_t curStatus = DS402_getStatus(statusWord);

	uint32_t cw = controlWord & 0x0F;
 800788a:	88bb      	ldrh	r3, [r7, #4]
 800788c:	f003 030f 	and.w	r3, r3, #15
 8007890:	60bb      	str	r3, [r7, #8]
	    if ((cw & 0x02) == 0){
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10d      	bne.n	80078b8 <DS402_getNewStatusByControlWord+0x42>
	    	if (curStatus == DS402_Status_ReadyToSwitchON ||
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d008      	beq.n	80078b4 <DS402_getNewStatusByControlWord+0x3e>
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	2b05      	cmp	r3, #5
 80078a6:	d005      	beq.n	80078b4 <DS402_getNewStatusByControlWord+0x3e>
	    		curStatus == DS402_Status_OperationEnable ||
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d002      	beq.n	80078b4 <DS402_getNewStatusByControlWord+0x3e>
				curStatus == DS402_Status_SwitchedON ||
 80078ae:	79fb      	ldrb	r3, [r7, #7]
 80078b0:	2b06      	cmp	r3, #6
 80078b2:	d101      	bne.n	80078b8 <DS402_getNewStatusByControlWord+0x42>
				curStatus == DS402_Status_QuickStopActive){
	    		newStatus = DS402_Status_SwitchONDisabled;
 80078b4:	2302      	movs	r3, #2
 80078b6:	73fb      	strb	r3, [r7, #15]
	    	}
	    }

	    if (cw == 0x06 || cw == 0x0E){
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b06      	cmp	r3, #6
 80078bc:	d002      	beq.n	80078c4 <DS402_getNewStatusByControlWord+0x4e>
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b0e      	cmp	r3, #14
 80078c2:	d10b      	bne.n	80078dc <DS402_getNewStatusByControlWord+0x66>
	    	if (curStatus == DS402_Status_SwitchONDisabled ||
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d005      	beq.n	80078d6 <DS402_getNewStatusByControlWord+0x60>
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d002      	beq.n	80078d6 <DS402_getNewStatusByControlWord+0x60>
	    		curStatus == DS402_Status_SwitchedON ||
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	2b05      	cmp	r3, #5
 80078d4:	d13e      	bne.n	8007954 <DS402_getNewStatusByControlWord+0xde>
				curStatus == DS402_Status_OperationEnable){
	    		newStatus = DS402_Status_ReadyToSwitchON;
 80078d6:	2303      	movs	r3, #3
 80078d8:	73fb      	strb	r3, [r7, #15]
	    	if (curStatus == DS402_Status_SwitchONDisabled ||
 80078da:	e03b      	b.n	8007954 <DS402_getNewStatusByControlWord+0xde>
	    	}
	    }else if (cw == 0x07){
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b07      	cmp	r3, #7
 80078e0:	d10e      	bne.n	8007900 <DS402_getNewStatusByControlWord+0x8a>
	    	if (curStatus == DS402_Status_ReadyToSwitchON ||
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d002      	beq.n	80078ee <DS402_getNewStatusByControlWord+0x78>
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d102      	bne.n	80078f4 <DS402_getNewStatusByControlWord+0x7e>
	    		curStatus == DS402_Status_SwitchONDisabled){
	    		newStatus = DS402_Status_SwitchedON;
 80078ee:	2304      	movs	r3, #4
 80078f0:	73fb      	strb	r3, [r7, #15]
 80078f2:	e030      	b.n	8007956 <DS402_getNewStatusByControlWord+0xe0>
	    	}else if (curStatus == DS402_Status_OperationEnable){
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	2b05      	cmp	r3, #5
 80078f8:	d12d      	bne.n	8007956 <DS402_getNewStatusByControlWord+0xe0>
	    		newStatus = DS402_Status_SwitchedON;
 80078fa:	2304      	movs	r3, #4
 80078fc:	73fb      	strb	r3, [r7, #15]
 80078fe:	e02a      	b.n	8007956 <DS402_getNewStatusByControlWord+0xe0>
	    	}
	    }else if (cw == 0x0F){
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b0f      	cmp	r3, #15
 8007904:	d111      	bne.n	800792a <DS402_getNewStatusByControlWord+0xb4>
	    	if (curStatus == DS402_Status_ReadyToSwitchON){
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	2b03      	cmp	r3, #3
 800790a:	d102      	bne.n	8007912 <DS402_getNewStatusByControlWord+0x9c>
	    		newStatus = DS402_Status_SwitchedON;
 800790c:	2304      	movs	r3, #4
 800790e:	73fb      	strb	r3, [r7, #15]
 8007910:	e021      	b.n	8007956 <DS402_getNewStatusByControlWord+0xe0>
	    	}else if (curStatus == DS402_Status_SwitchedON ||
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	2b04      	cmp	r3, #4
 8007916:	d005      	beq.n	8007924 <DS402_getNewStatusByControlWord+0xae>
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	2b06      	cmp	r3, #6
 800791c:	d002      	beq.n	8007924 <DS402_getNewStatusByControlWord+0xae>
	    			curStatus == DS402_Status_QuickStopActive ||
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	2b05      	cmp	r3, #5
 8007922:	d118      	bne.n	8007956 <DS402_getNewStatusByControlWord+0xe0>
					curStatus == DS402_Status_OperationEnable){
	    		newStatus = DS402_Status_OperationEnable;
 8007924:	2305      	movs	r3, #5
 8007926:	73fb      	strb	r3, [r7, #15]
 8007928:	e015      	b.n	8007956 <DS402_getNewStatusByControlWord+0xe0>
	    	}
	    }else if (cw == 0x02 || cw == 0x03){
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d002      	beq.n	8007936 <DS402_getNewStatusByControlWord+0xc0>
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b03      	cmp	r3, #3
 8007934:	d10f      	bne.n	8007956 <DS402_getNewStatusByControlWord+0xe0>
	    	if (curStatus == DS402_Status_ReadyToSwitchON ||
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	2b03      	cmp	r3, #3
 800793a:	d002      	beq.n	8007942 <DS402_getNewStatusByControlWord+0xcc>
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	2b04      	cmp	r3, #4
 8007940:	d102      	bne.n	8007948 <DS402_getNewStatusByControlWord+0xd2>
	    		curStatus == DS402_Status_SwitchedON){
	    		newStatus = DS402_Status_SwitchONDisabled;
 8007942:	2302      	movs	r3, #2
 8007944:	73fb      	strb	r3, [r7, #15]
 8007946:	e006      	b.n	8007956 <DS402_getNewStatusByControlWord+0xe0>
	    	}else if (curStatus == DS402_Status_OperationEnable){
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	2b05      	cmp	r3, #5
 800794c:	d103      	bne.n	8007956 <DS402_getNewStatusByControlWord+0xe0>
	    		newStatus = DS402_Status_QuickStopActive;
 800794e:	2306      	movs	r3, #6
 8007950:	73fb      	strb	r3, [r7, #15]
 8007952:	e000      	b.n	8007956 <DS402_getNewStatusByControlWord+0xe0>
	    	if (curStatus == DS402_Status_SwitchONDisabled ||
 8007954:	bf00      	nop
	    	}
	    }
	return newStatus;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <DS402_getModeActionFromControlWord>:

DS402_OperMode_Action_t DS402_getModeActionFromControlWord(int8_t mode, uint16_t controlWord)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	460a      	mov	r2, r1
 800796e:	71fb      	strb	r3, [r7, #7]
 8007970:	4613      	mov	r3, r2
 8007972:	80bb      	strh	r3, [r7, #4]
	DS402_OperMode_Action_t action = DS402_OperMode_Halt;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]

	switch (mode) {
 8007978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800797c:	2b07      	cmp	r3, #7
 800797e:	d01d      	beq.n	80079bc <DS402_getModeActionFromControlWord+0x58>
 8007980:	2b07      	cmp	r3, #7
 8007982:	dc23      	bgt.n	80079cc <DS402_getModeActionFromControlWord+0x68>
 8007984:	2b01      	cmp	r3, #1
 8007986:	d009      	beq.n	800799c <DS402_getModeActionFromControlWord+0x38>
 8007988:	2b06      	cmp	r3, #6
 800798a:	d11f      	bne.n	80079cc <DS402_getModeActionFromControlWord+0x68>
	case DS402_OperMode_Homing: {
		if ((controlWord & 0x10) == 0x10){
 800798c:	88bb      	ldrh	r3, [r7, #4]
 800798e:	f003 0310 	and.w	r3, r3, #16
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01c      	beq.n	80079d0 <DS402_getModeActionFromControlWord+0x6c>
			action = DS402_OperMode_HomingStart;
 8007996:	2310      	movs	r3, #16
 8007998:	73fb      	strb	r3, [r7, #15]
		}
	}break;
 800799a:	e019      	b.n	80079d0 <DS402_getModeActionFromControlWord+0x6c>
	case DS402_OperMode_ProfilePosition: {
		if ((controlWord & 0x10) == 0x10){
 800799c:	88bb      	ldrh	r3, [r7, #4]
 800799e:	f003 0310 	and.w	r3, r3, #16
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <DS402_getModeActionFromControlWord+0x48>
			action = DS402_OperMode_NewSetPoint;
 80079a6:	2312      	movs	r3, #18
 80079a8:	73fb      	strb	r3, [r7, #15]
		}else if ((controlWord & 0x20) == 0x20) {
			action = DS402_OperMode_ChangeSetImmediately;
		}
	}break;
 80079aa:	e013      	b.n	80079d4 <DS402_getModeActionFromControlWord+0x70>
		}else if ((controlWord & 0x20) == 0x20) {
 80079ac:	88bb      	ldrh	r3, [r7, #4]
 80079ae:	f003 0320 	and.w	r3, r3, #32
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00e      	beq.n	80079d4 <DS402_getModeActionFromControlWord+0x70>
			action = DS402_OperMode_ChangeSetImmediately;
 80079b6:	2313      	movs	r3, #19
 80079b8:	73fb      	strb	r3, [r7, #15]
	}break;
 80079ba:	e00b      	b.n	80079d4 <DS402_getModeActionFromControlWord+0x70>
	case DS402_OperMode_InterpolatedPosition: {
		if ((controlWord & 0x10) == 0x10){
 80079bc:	88bb      	ldrh	r3, [r7, #4]
 80079be:	f003 0310 	and.w	r3, r3, #16
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d008      	beq.n	80079d8 <DS402_getModeActionFromControlWord+0x74>
			action = DS402_OperMode_EnableIP;
 80079c6:	2311      	movs	r3, #17
 80079c8:	73fb      	strb	r3, [r7, #15]
		}
	}break;
 80079ca:	e005      	b.n	80079d8 <DS402_getModeActionFromControlWord+0x74>

	default:
		break;
 80079cc:	bf00      	nop
 80079ce:	e004      	b.n	80079da <DS402_getModeActionFromControlWord+0x76>
	}break;
 80079d0:	bf00      	nop
 80079d2:	e002      	b.n	80079da <DS402_getModeActionFromControlWord+0x76>
	}break;
 80079d4:	bf00      	nop
 80079d6:	e000      	b.n	80079da <DS402_getModeActionFromControlWord+0x76>
	}break;
 80079d8:	bf00      	nop
	}

	return action;
 80079da:	7bfb      	ldrb	r3, [r7, #15]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HOME_reset>:
extern volatile int32_t g_IncSteps;
extern QueueHandle_t g_MotionMsgQueue;
extern Node_DriveProfile_t g_NodeDriveProfile;

void HOME_reset()
{
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
	g_MotorHomeData.status = DS402_HOME_None;
 80079ec:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <HOME_reset+0x1c>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	701a      	strb	r2, [r3, #0]
	g_MotorHomeData.reachWindow = 32;
 80079f2:	4b04      	ldr	r3, [pc, #16]	; (8007a04 <HOME_reset+0x1c>)
 80079f4:	2220      	movs	r2, #32
 80079f6:	611a      	str	r2, [r3, #16]
}
 80079f8:	bf00      	nop
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000a7c 	.word	0x20000a7c

08007a08 <HOME_setProfile>:

void HOME_setProfile(int32_t offset, int8_t method, uint32_t speed, uint32_t acce)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	607a      	str	r2, [r7, #4]
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	460b      	mov	r3, r1
 8007a16:	72fb      	strb	r3, [r7, #11]
	g_MotorHomeData.method = method;
 8007a18:	4a08      	ldr	r2, [pc, #32]	; (8007a3c <HOME_setProfile+0x34>)
 8007a1a:	7afb      	ldrb	r3, [r7, #11]
 8007a1c:	7713      	strb	r3, [r2, #28]
	g_MotorHomeData.offset = offset;
 8007a1e:	4a07      	ldr	r2, [pc, #28]	; (8007a3c <HOME_setProfile+0x34>)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6053      	str	r3, [r2, #4]
	g_MotorHomeData.speed  = speed;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a05      	ldr	r2, [pc, #20]	; (8007a3c <HOME_setProfile+0x34>)
 8007a28:	6093      	str	r3, [r2, #8]
	g_MotorHomeData.acce   = acce;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	4a03      	ldr	r2, [pc, #12]	; (8007a3c <HOME_setProfile+0x34>)
 8007a2e:	60d3      	str	r3, [r2, #12]
}
 8007a30:	bf00      	nop
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	20000a7c 	.word	0x20000a7c

08007a40 <HOME_Init>:

bool HOME_Init(int32_t offset, int8_t method, uint32_t speed, uint32_t acce)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	72fb      	strb	r3, [r7, #11]
	bool_t ret = true;
 8007a50:	2301      	movs	r3, #1
 8007a52:	75fb      	strb	r3, [r7, #23]

	HOME_setProfile(offset, method, speed, acce);
 8007a54:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7ff ffd3 	bl	8007a08 <HOME_setProfile>
	g_MotorHomeData.finishedCallback = NULL;
 8007a62:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <HOME_Init+0x40>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	619a      	str	r2, [r3, #24]

	HOME_reset();
 8007a68:	f7ff ffbe 	bl	80079e8 <HOME_reset>

	return ret;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bf14      	ite	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	2300      	moveq	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	20000a7c 	.word	0x20000a7c

08007a84 <HOME_finish>:
{
	g_MotorHomeData.finishedCallback = pfunct;
}

void HOME_finish(int32_t position)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	if (g_MotorHomeData.status != DS402_HOME_Finished) {
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <HOME_finish+0x34>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d00a      	beq.n	8007aaa <HOME_finish+0x26>
		g_MotorHomeData.status = DS402_HOME_Finished;
 8007a94:	4b08      	ldr	r3, [pc, #32]	; (8007ab8 <HOME_finish+0x34>)
 8007a96:	2203      	movs	r2, #3
 8007a98:	701a      	strb	r2, [r3, #0]
		if (g_MotorHomeData.finishedCallback){
 8007a9a:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <HOME_finish+0x34>)
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HOME_finish+0x26>
			g_MotorHomeData.finishedCallback(position);
 8007aa2:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <HOME_finish+0x34>)
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	4798      	blx	r3
		}
	}

	MT_setReachCallback(NULL);
 8007aaa:	2000      	movs	r0, #0
 8007aac:	f002 fd18 	bl	800a4e0 <MT_setReachCallback>
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000a7c 	.word	0x20000a7c

08007abc <HOME_active>:

void HOME_active()
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	af00      	add	r7, sp, #0
	MT_setReachCallback(HOME_finish);
 8007ac0:	4804      	ldr	r0, [pc, #16]	; (8007ad4 <HOME_active+0x18>)
 8007ac2:	f002 fd0d 	bl	800a4e0 <MT_setReachCallback>
	MT_setReachWindow(g_MotorHomeData.reachWindow);
 8007ac6:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <HOME_active+0x1c>)
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f002 fd28 	bl	800a520 <MT_setReachWindow>
}
 8007ad0:	bf00      	nop
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	08007a85 	.word	0x08007a85
 8007ad8:	20000a7c 	.word	0x20000a7c

08007adc <HOME_exec>:
/*Re-enter safe function
 * controlWord uint16_t : receive from host
 * return      uint16_t : execute result, and will be merged status word bit10, bit12 and bit13
 * */
uint16_t HOME_exec(uint16_t controlWord)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	80fb      	strh	r3, [r7, #6]
	uint16_t ret = 0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	83fb      	strh	r3, [r7, #30]

	/*Get the operation mode*/
	DS402_OperMode_Action_t action = DS402_getModeActionFromControlWord(DS402_OperMode_Homing, controlWord);
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	4619      	mov	r1, r3
 8007aee:	2006      	movs	r0, #6
 8007af0:	f7ff ff38 	bl	8007964 <DS402_getModeActionFromControlWord>
 8007af4:	4603      	mov	r3, r0
 8007af6:	777b      	strb	r3, [r7, #29]
	if (action == DS402_OperMode_HomingStart) {
 8007af8:	7f7b      	ldrb	r3, [r7, #29]
 8007afa:	2b10      	cmp	r3, #16
 8007afc:	d149      	bne.n	8007b92 <HOME_exec+0xb6>
		if (g_MotorHomeData.status == DS402_HOME_None) {
 8007afe:	4b27      	ldr	r3, [pc, #156]	; (8007b9c <HOME_exec+0xc0>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d133      	bne.n	8007b6e <HOME_exec+0x92>

			printf("Motor start homeing.\n");
 8007b06:	4826      	ldr	r0, [pc, #152]	; (8007ba0 <HOME_exec+0xc4>)
 8007b08:	f00f fb6c 	bl	80171e4 <puts>

			/*Home begin*/
			g_MotorHomeData.status = DS402_HOME_SearchZeroPnt;
 8007b0c:	4b23      	ldr	r3, [pc, #140]	; (8007b9c <HOME_exec+0xc0>)
 8007b0e:	2201      	movs	r2, #1
 8007b10:	701a      	strb	r2, [r3, #0]

			/*Get home switch state*/
			GPIO_PinState state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2);
 8007b12:	2104      	movs	r1, #4
 8007b14:	4823      	ldr	r0, [pc, #140]	; (8007ba4 <HOME_exec+0xc8>)
 8007b16:	f008 fbdd 	bl	80102d4 <HAL_GPIO_ReadPin>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	773b      	strb	r3, [r7, #28]

			MotionMsgItem_t item;

			if (state == g_NodeDriveProfile.homestate){
 8007b1e:	4b22      	ldr	r3, [pc, #136]	; (8007ba8 <HOME_exec+0xcc>)
 8007b20:	78db      	ldrb	r3, [r3, #3]
 8007b22:	7f3a      	ldrb	r2, [r7, #28]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d106      	bne.n	8007b36 <HOME_exec+0x5a>
				/*Set the home offset point*/
				item.position = g_MotorHomeData.offset;
 8007b28:	4b1c      	ldr	r3, [pc, #112]	; (8007b9c <HOME_exec+0xc0>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	60fb      	str	r3, [r7, #12]

				/*Send Go home msg*/
				item.code = MMC_HomeGoHome;
 8007b2e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007b32:	813b      	strh	r3, [r7, #8]
 8007b34:	e012      	b.n	8007b5c <HOME_exec+0x80>
			}else {
				/*Set the home speed and accelerate*/
				item.velocity = g_MotorHomeData.speed;
 8007b36:	4b19      	ldr	r3, [pc, #100]	; (8007b9c <HOME_exec+0xc0>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b42:	edc7 7a04 	vstr	s15, [r7, #16]
				item.acceleration = g_MotorHomeData.acce;
 8007b46:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <HOME_exec+0xc0>)
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	ee07 3a90 	vmov	s15, r3
 8007b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b52:	edc7 7a05 	vstr	s15, [r7, #20]

				/*Start motor, send home start msg*/
				item.code = MMC_HomeStart;
 8007b56:	f240 1301 	movw	r3, #257	; 0x101
 8007b5a:	813b      	strh	r3, [r7, #8]
			}
			xQueueSend(g_MotionMsgQueue, &item, 0);
 8007b5c:	4b13      	ldr	r3, [pc, #76]	; (8007bac <HOME_exec+0xd0>)
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	f107 0108 	add.w	r1, r7, #8
 8007b64:	2300      	movs	r3, #0
 8007b66:	2200      	movs	r2, #0
 8007b68:	f00b ffc0 	bl	8013aec <xQueueGenericSend>
 8007b6c:	e008      	b.n	8007b80 <HOME_exec+0xa4>
		}else {
			if (g_MotorHomeData.status == DS402_HOME_Error) {
 8007b6e:	4b0b      	ldr	r3, [pc, #44]	; (8007b9c <HOME_exec+0xc0>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d104      	bne.n	8007b80 <HOME_exec+0xa4>
				/*Status 10 reach bit set 1(stop), 13 error bit set 1 */
				ret = (1 << 10) | (1 << 13);
 8007b76:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8007b7a:	83fb      	strh	r3, [r7, #30]
				return ret;
 8007b7c:	8bfb      	ldrh	r3, [r7, #30]
 8007b7e:	e009      	b.n	8007b94 <HOME_exec+0xb8>
			}
		}

		if (g_MotorHomeData.status == DS402_HOME_Finished) {
 8007b80:	4b06      	ldr	r3, [pc, #24]	; (8007b9c <HOME_exec+0xc0>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d104      	bne.n	8007b92 <HOME_exec+0xb6>
			/*Status 10 reach bit set 1(stop), 12 attain bit set 1 */
			ret = (1 << 10) | (1 << 12);
 8007b88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007b8c:	83fb      	strh	r3, [r7, #30]
			return ret;
 8007b8e:	8bfb      	ldrh	r3, [r7, #30]
 8007b90:	e000      	b.n	8007b94 <HOME_exec+0xb8>
		}
	}

	return ret;
 8007b92:	8bfb      	ldrh	r3, [r7, #30]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3720      	adds	r7, #32
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	20000a7c 	.word	0x20000a7c
 8007ba0:	08018234 	.word	0x08018234
 8007ba4:	40020c00 	.word	0x40020c00
 8007ba8:	20000af4 	.word	0x20000af4
 8007bac:	200006ec 	.word	0x200006ec

08007bb0 <HOME_OnSwitchSignal>:

void HOME_OnSwitchSignal(uint16_t pin)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	80fb      	strh	r3, [r7, #6]
	if (pin != GPIO_PIN_2) {
 8007bba:	88fb      	ldrh	r3, [r7, #6]
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d130      	bne.n	8007c22 <HOME_OnSwitchSignal+0x72>
		return;
	}

	if (g_MotorHomeData.status != DS402_HOME_GoHome && g_MotionMsgQueue != NULL){
 8007bc0:	4b1a      	ldr	r3, [pc, #104]	; (8007c2c <HOME_OnSwitchSignal+0x7c>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d02d      	beq.n	8007c24 <HOME_OnSwitchSignal+0x74>
 8007bc8:	4b19      	ldr	r3, [pc, #100]	; (8007c30 <HOME_OnSwitchSignal+0x80>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d029      	beq.n	8007c24 <HOME_OnSwitchSignal+0x74>

		/*Reset the callback*/
		MT_setReachCallback(HOME_finish);
 8007bd0:	4818      	ldr	r0, [pc, #96]	; (8007c34 <HOME_OnSwitchSignal+0x84>)
 8007bd2:	f002 fc85 	bl	800a4e0 <MT_setReachCallback>

		/*Send go home message*/
		MotionMsgItem_t item;
		item.code = MMC_HomeGoHome;
 8007bd6:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007bda:	81bb      	strh	r3, [r7, #12]
		item.position = g_MotorHomeData.offset;
 8007bdc:	4b13      	ldr	r3, [pc, #76]	; (8007c2c <HOME_OnSwitchSignal+0x7c>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	613b      	str	r3, [r7, #16]

		BaseType_t highTaskWoken = pdFALSE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60bb      	str	r3, [r7, #8]
		if (pdPASS == xQueueSendFromISR(g_MotionMsgQueue, &item, &highTaskWoken)){
 8007be6:	4b12      	ldr	r3, [pc, #72]	; (8007c30 <HOME_OnSwitchSignal+0x80>)
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	f107 0208 	add.w	r2, r7, #8
 8007bee:	f107 010c 	add.w	r1, r7, #12
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f00c f878 	bl	8013ce8 <xQueueGenericSendFromISR>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d102      	bne.n	8007c04 <HOME_OnSwitchSignal+0x54>
			g_MotorHomeData.status = DS402_HOME_GoHome;
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <HOME_OnSwitchSignal+0x7c>)
 8007c00:	2202      	movs	r2, #2
 8007c02:	701a      	strb	r2, [r3, #0]
		}

		if(highTaskWoken == pdTRUE) {
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d10c      	bne.n	8007c24 <HOME_OnSwitchSignal+0x74>
			portYIELD_FROM_ISR (highTaskWoken);
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d009      	beq.n	8007c24 <HOME_OnSwitchSignal+0x74>
 8007c10:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <HOME_OnSwitchSignal+0x88>)
 8007c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	e000      	b.n	8007c24 <HOME_OnSwitchSignal+0x74>
		return;
 8007c22:	bf00      	nop
		}
	}
}
 8007c24:	3720      	adds	r7, #32
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000a7c 	.word	0x20000a7c
 8007c30:	200006ec 	.word	0x200006ec
 8007c34:	08007a85 	.word	0x08007a85
 8007c38:	e000ed04 	.word	0xe000ed04

08007c3c <CO_new>:
                          CO_NO_LSS_CLIENT)


/* Create objects from heap ***************************************************/
#ifndef CO_USE_GLOBALS
CO_ReturnError_t CO_new(uint32_t *heapMemoryUsed) {
 8007c3c:	b5b0      	push	{r4, r5, r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
    int16_t i;
    uint16_t errCnt = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	81bb      	strh	r3, [r7, #12]
    uint32_t CO_memoryUsed = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60bb      	str	r3, [r7, #8]

    /* If CANopen was initialized before, return. */
    if (CO != NULL) {
 8007c4c:	4b7f      	ldr	r3, [pc, #508]	; (8007e4c <CO_new+0x210>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <CO_new+0x1c>
        return CO_ERROR_NO;
 8007c54:	2300      	movs	r3, #0
 8007c56:	e15c      	b.n	8007f12 <CO_new+0x2d6>
    }

    /* globals */
    CO = &COO;
 8007c58:	4b7c      	ldr	r3, [pc, #496]	; (8007e4c <CO_new+0x210>)
 8007c5a:	4a7d      	ldr	r2, [pc, #500]	; (8007e50 <CO_new+0x214>)
 8007c5c:	601a      	str	r2, [r3, #0]

    /* CANmodule */
    CO->CANmodule[0] = (CO_CANmodule_t *)calloc(1, sizeof(CO_CANmodule_t));
 8007c5e:	4b7b      	ldr	r3, [pc, #492]	; (8007e4c <CO_new+0x210>)
 8007c60:	681c      	ldr	r4, [r3, #0]
 8007c62:	2120      	movs	r1, #32
 8007c64:	2001      	movs	r0, #1
 8007c66:	f00e fff7 	bl	8016c58 <calloc>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	6023      	str	r3, [r4, #0]
    if (CO->CANmodule[0] == NULL) errCnt++;
 8007c6e:	4b77      	ldr	r3, [pc, #476]	; (8007e4c <CO_new+0x210>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <CO_new+0x42>
 8007c78:	89bb      	ldrh	r3, [r7, #12]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	81bb      	strh	r3, [r7, #12]
    CO_CANmodule_rxArray0 =
        (CO_CANrx_t *)calloc(CO_RXCAN_NO_MSGS, sizeof(CO_CANrx_t));
 8007c7e:	210c      	movs	r1, #12
 8007c80:	200a      	movs	r0, #10
 8007c82:	f00e ffe9 	bl	8016c58 <calloc>
 8007c86:	4603      	mov	r3, r0
 8007c88:	461a      	mov	r2, r3
    CO_CANmodule_rxArray0 =
 8007c8a:	4b72      	ldr	r3, [pc, #456]	; (8007e54 <CO_new+0x218>)
 8007c8c:	601a      	str	r2, [r3, #0]
    if (CO_CANmodule_rxArray0 == NULL) errCnt++;
 8007c8e:	4b71      	ldr	r3, [pc, #452]	; (8007e54 <CO_new+0x218>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d102      	bne.n	8007c9c <CO_new+0x60>
 8007c96:	89bb      	ldrh	r3, [r7, #12]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	81bb      	strh	r3, [r7, #12]
    CO_CANmodule_txArray0 =
        (CO_CANtx_t *)calloc(CO_TXCAN_NO_MSGS, sizeof(CO_CANtx_t));
 8007c9c:	2110      	movs	r1, #16
 8007c9e:	2009      	movs	r0, #9
 8007ca0:	f00e ffda 	bl	8016c58 <calloc>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	461a      	mov	r2, r3
    CO_CANmodule_txArray0 =
 8007ca8:	4b6b      	ldr	r3, [pc, #428]	; (8007e58 <CO_new+0x21c>)
 8007caa:	601a      	str	r2, [r3, #0]
    if (CO_CANmodule_txArray0 == NULL) errCnt++;
 8007cac:	4b6a      	ldr	r3, [pc, #424]	; (8007e58 <CO_new+0x21c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d102      	bne.n	8007cba <CO_new+0x7e>
 8007cb4:	89bb      	ldrh	r3, [r7, #12]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_CANmodule_t) +
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007cc0:	60bb      	str	r3, [r7, #8]
                     sizeof(CO_CANrx_t) * CO_RXCAN_NO_MSGS +
                     sizeof(CO_CANtx_t) * CO_TXCAN_NO_MSGS;

    /* SDOserver */
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	81fb      	strh	r3, [r7, #14]
 8007cc6:	e01f      	b.n	8007d08 <CO_new+0xcc>
        CO->SDO[i] = (CO_SDO_t *)calloc(1, sizeof(CO_SDO_t));
 8007cc8:	4b60      	ldr	r3, [pc, #384]	; (8007e4c <CO_new+0x210>)
 8007cca:	681c      	ldr	r4, [r3, #0]
 8007ccc:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 8007cd0:	f44f 61ee 	mov.w	r1, #1904	; 0x770
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	f00e ffbf 	bl	8016c58 <calloc>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	461a      	mov	r2, r3
 8007cde:	00ab      	lsls	r3, r5, #2
 8007ce0:	4423      	add	r3, r4
 8007ce2:	605a      	str	r2, [r3, #4]
        if (CO->SDO[i] == NULL) errCnt++;
 8007ce4:	4b59      	ldr	r3, [pc, #356]	; (8007e4c <CO_new+0x210>)
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d102      	bne.n	8007cfc <CO_new+0xc0>
 8007cf6:	89bb      	ldrh	r3, [r7, #12]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8007cfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	3301      	adds	r3, #1
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	81fb      	strh	r3, [r7, #14]
 8007d08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dddb      	ble.n	8007cc8 <CO_new+0x8c>
    }
    CO_SDO_ODExtensions = (CO_OD_extension_t *)calloc(
 8007d10:	210c      	movs	r1, #12
 8007d12:	2044      	movs	r0, #68	; 0x44
 8007d14:	f00e ffa0 	bl	8016c58 <calloc>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	4b4f      	ldr	r3, [pc, #316]	; (8007e5c <CO_new+0x220>)
 8007d1e:	601a      	str	r2, [r3, #0]
        CO_OD_NoOfElements, sizeof(CO_OD_extension_t));
    if (CO_SDO_ODExtensions == NULL) errCnt++;
 8007d20:	4b4e      	ldr	r3, [pc, #312]	; (8007e5c <CO_new+0x220>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <CO_new+0xf2>
 8007d28:	89bb      	ldrh	r3, [r7, #12]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_SDO_t) * CO_NO_SDO_SERVER +
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 8007d34:	60bb      	str	r3, [r7, #8]
                     sizeof(CO_OD_extension_t) * CO_OD_NoOfElements;

    /* Emergency */
    CO->em = (CO_EM_t *)calloc(1, sizeof(CO_EM_t));
 8007d36:	4b45      	ldr	r3, [pc, #276]	; (8007e4c <CO_new+0x210>)
 8007d38:	681c      	ldr	r4, [r3, #0]
 8007d3a:	2174      	movs	r1, #116	; 0x74
 8007d3c:	2001      	movs	r0, #1
 8007d3e:	f00e ff8b 	bl	8016c58 <calloc>
 8007d42:	4603      	mov	r3, r0
 8007d44:	60a3      	str	r3, [r4, #8]
    if (CO->em == NULL) errCnt++;
 8007d46:	4b41      	ldr	r3, [pc, #260]	; (8007e4c <CO_new+0x210>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <CO_new+0x11a>
 8007d50:	89bb      	ldrh	r3, [r7, #12]
 8007d52:	3301      	adds	r3, #1
 8007d54:	81bb      	strh	r3, [r7, #12]
    CO->emPr = (CO_EMpr_t *)calloc(1, sizeof(CO_EMpr_t));
 8007d56:	4b3d      	ldr	r3, [pc, #244]	; (8007e4c <CO_new+0x210>)
 8007d58:	681c      	ldr	r4, [r3, #0]
 8007d5a:	211c      	movs	r1, #28
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	f00e ff7b 	bl	8016c58 <calloc>
 8007d62:	4603      	mov	r3, r0
 8007d64:	60e3      	str	r3, [r4, #12]
    if (CO->emPr == NULL) errCnt++;
 8007d66:	4b39      	ldr	r3, [pc, #228]	; (8007e4c <CO_new+0x210>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d102      	bne.n	8007d76 <CO_new+0x13a>
 8007d70:	89bb      	ldrh	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_EM_t) + sizeof(CO_EMpr_t);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	3390      	adds	r3, #144	; 0x90
 8007d7a:	60bb      	str	r3, [r7, #8]

    /* NMT_Heartbeat */
    CO->NMT = (CO_NMT_t *)calloc(1, sizeof(CO_NMT_t));
 8007d7c:	4b33      	ldr	r3, [pc, #204]	; (8007e4c <CO_new+0x210>)
 8007d7e:	681c      	ldr	r4, [r3, #0]
 8007d80:	2130      	movs	r1, #48	; 0x30
 8007d82:	2001      	movs	r0, #1
 8007d84:	f00e ff68 	bl	8016c58 <calloc>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	6123      	str	r3, [r4, #16]
    if (CO->NMT == NULL) errCnt++;
 8007d8c:	4b2f      	ldr	r3, [pc, #188]	; (8007e4c <CO_new+0x210>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d102      	bne.n	8007d9c <CO_new+0x160>
 8007d96:	89bb      	ldrh	r3, [r7, #12]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_NMT_t);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	3330      	adds	r3, #48	; 0x30
 8007da0:	60bb      	str	r3, [r7, #8]

#if CO_NO_SYNC == 1
    /* SYNC */
    CO->SYNC = (CO_SYNC_t *)calloc(1, sizeof(CO_SYNC_t));
 8007da2:	4b2a      	ldr	r3, [pc, #168]	; (8007e4c <CO_new+0x210>)
 8007da4:	681c      	ldr	r4, [r3, #0]
 8007da6:	2144      	movs	r1, #68	; 0x44
 8007da8:	2001      	movs	r0, #1
 8007daa:	f00e ff55 	bl	8016c58 <calloc>
 8007dae:	4603      	mov	r3, r0
 8007db0:	6163      	str	r3, [r4, #20]
    if (CO->SYNC == NULL) errCnt++;
 8007db2:	4b26      	ldr	r3, [pc, #152]	; (8007e4c <CO_new+0x210>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d102      	bne.n	8007dc2 <CO_new+0x186>
 8007dbc:	89bb      	ldrh	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_SYNC_t);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	3344      	adds	r3, #68	; 0x44
 8007dc6:	60bb      	str	r3, [r7, #8]
    CO->SYNC = NULL;
#endif

#if CO_NO_TIME == 1
    /* TIME */
    CO->TIME = (CO_TIME_t *)calloc(1, sizeof(CO_TIME_t));
 8007dc8:	4b20      	ldr	r3, [pc, #128]	; (8007e4c <CO_new+0x210>)
 8007dca:	681c      	ldr	r4, [r3, #0]
 8007dcc:	2148      	movs	r1, #72	; 0x48
 8007dce:	2001      	movs	r0, #1
 8007dd0:	f00e ff42 	bl	8016c58 <calloc>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	61a3      	str	r3, [r4, #24]
    if (CO->TIME == NULL) errCnt++;
 8007dd8:	4b1c      	ldr	r3, [pc, #112]	; (8007e4c <CO_new+0x210>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d102      	bne.n	8007de8 <CO_new+0x1ac>
 8007de2:	89bb      	ldrh	r3, [r7, #12]
 8007de4:	3301      	adds	r3, #1
 8007de6:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_TIME_t);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	3348      	adds	r3, #72	; 0x48
 8007dec:	60bb      	str	r3, [r7, #8]
#else
    CO->TIME = NULL;
#endif

    /* RPDO */
    for (i = 0; i < CO_NO_RPDO; i++) {
 8007dee:	2300      	movs	r3, #0
 8007df0:	81fb      	strh	r3, [r7, #14]
 8007df2:	e020      	b.n	8007e36 <CO_new+0x1fa>
        CO->RPDO[i] = (CO_RPDO_t *)calloc(1, sizeof(CO_RPDO_t));
 8007df4:	4b15      	ldr	r3, [pc, #84]	; (8007e4c <CO_new+0x210>)
 8007df6:	681c      	ldr	r4, [r3, #0]
 8007df8:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 8007dfc:	216c      	movs	r1, #108	; 0x6c
 8007dfe:	2001      	movs	r0, #1
 8007e00:	f00e ff2a 	bl	8016c58 <calloc>
 8007e04:	4603      	mov	r3, r0
 8007e06:	461a      	mov	r2, r3
 8007e08:	1dab      	adds	r3, r5, #6
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4423      	add	r3, r4
 8007e0e:	605a      	str	r2, [r3, #4]
        if (CO->RPDO[i] == NULL) errCnt++;
 8007e10:	4b0e      	ldr	r3, [pc, #56]	; (8007e4c <CO_new+0x210>)
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e18:	3306      	adds	r3, #6
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <CO_new+0x1ee>
 8007e24:	89bb      	ldrh	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < CO_NO_RPDO; i++) {
 8007e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	3301      	adds	r3, #1
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	81fb      	strh	r3, [r7, #14]
 8007e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	ddda      	ble.n	8007df4 <CO_new+0x1b8>
    }
    CO_memoryUsed += sizeof(CO_RPDO_t) * CO_NO_RPDO;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8007e44:	60bb      	str	r3, [r7, #8]

    /* TPDO */
    for (i = 0; i < CO_NO_TPDO; i++) {
 8007e46:	2300      	movs	r3, #0
 8007e48:	81fb      	strh	r3, [r7, #14]
 8007e4a:	e02b      	b.n	8007ea4 <CO_new+0x268>
 8007e4c:	20000adc 	.word	0x20000adc
 8007e50:	20000a9c 	.word	0x20000a9c
 8007e54:	20000ae0 	.word	0x20000ae0
 8007e58:	20000ae4 	.word	0x20000ae4
 8007e5c:	20000ae8 	.word	0x20000ae8
        CO->TPDO[i] = (CO_TPDO_t *)calloc(1, sizeof(CO_TPDO_t));
 8007e60:	4b2e      	ldr	r3, [pc, #184]	; (8007f1c <CO_new+0x2e0>)
 8007e62:	681c      	ldr	r4, [r3, #0]
 8007e64:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 8007e68:	2158      	movs	r1, #88	; 0x58
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	f00e fef4 	bl	8016c58 <calloc>
 8007e70:	4603      	mov	r3, r0
 8007e72:	461a      	mov	r2, r3
 8007e74:	f105 030a 	add.w	r3, r5, #10
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4423      	add	r3, r4
 8007e7c:	605a      	str	r2, [r3, #4]
        if (CO->TPDO[i] == NULL) errCnt++;
 8007e7e:	4b27      	ldr	r3, [pc, #156]	; (8007f1c <CO_new+0x2e0>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e86:	330a      	adds	r3, #10
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d102      	bne.n	8007e98 <CO_new+0x25c>
 8007e92:	89bb      	ldrh	r3, [r7, #12]
 8007e94:	3301      	adds	r3, #1
 8007e96:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < CO_NO_TPDO; i++) {
 8007e98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	81fb      	strh	r3, [r7, #14]
 8007ea4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	ddd9      	ble.n	8007e60 <CO_new+0x224>
    }
    CO_memoryUsed += sizeof(CO_TPDO_t) * CO_NO_TPDO;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007eb2:	60bb      	str	r3, [r7, #8]

    /* Heartbeat consumer */
    CO->HBcons = (CO_HBconsumer_t *)calloc(1, sizeof(CO_HBconsumer_t));
 8007eb4:	4b19      	ldr	r3, [pc, #100]	; (8007f1c <CO_new+0x2e0>)
 8007eb6:	681c      	ldr	r4, [r3, #0]
 8007eb8:	2120      	movs	r1, #32
 8007eba:	2001      	movs	r0, #1
 8007ebc:	f00e fecc 	bl	8016c58 <calloc>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (CO->HBcons == NULL) errCnt++;
 8007ec4:	4b15      	ldr	r3, [pc, #84]	; (8007f1c <CO_new+0x2e0>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d102      	bne.n	8007ed4 <CO_new+0x298>
 8007ece:	89bb      	ldrh	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	81bb      	strh	r3, [r7, #12]
    CO_HBcons_monitoredNodes =
        (CO_HBconsNode_t *)calloc(CO_NO_HB_CONS, sizeof(CO_HBconsNode_t));
 8007ed4:	2134      	movs	r1, #52	; 0x34
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f00e febe 	bl	8016c58 <calloc>
 8007edc:	4603      	mov	r3, r0
 8007ede:	461a      	mov	r2, r3
    CO_HBcons_monitoredNodes =
 8007ee0:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <CO_new+0x2e4>)
 8007ee2:	601a      	str	r2, [r3, #0]
    if (CO_HBcons_monitoredNodes == NULL) errCnt++;
 8007ee4:	4b0e      	ldr	r3, [pc, #56]	; (8007f20 <CO_new+0x2e4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d102      	bne.n	8007ef2 <CO_new+0x2b6>
 8007eec:	89bb      	ldrh	r3, [r7, #12]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_HBconsumer_t) +
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	3354      	adds	r3, #84	; 0x54
 8007ef6:	60bb      	str	r3, [r7, #8]
        }
        CO_memoryUsed += CO_traceBufferSize[i] * sizeof(uint32_t) * 2;
    }
#endif

    if(heapMemoryUsed != NULL) {
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d002      	beq.n	8007f04 <CO_new+0x2c8>
        *heapMemoryUsed = CO_memoryUsed;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	601a      	str	r2, [r3, #0]
    }

    return (errCnt == 0) ? CO_ERROR_NO : CO_ERROR_OUT_OF_MEMORY;
 8007f04:	89bb      	ldrh	r3, [r7, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <CO_new+0x2d2>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e001      	b.n	8007f12 <CO_new+0x2d6>
 8007f0e:	f06f 0301 	mvn.w	r3, #1
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bdb0      	pop	{r4, r5, r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000adc 	.word	0x20000adc
 8007f20:	20000aec 	.word	0x20000aec

08007f24 <CO_CANinit>:


/******************************************************************************/
CO_ReturnError_t CO_CANinit(void *CANptr,
                            uint16_t bitRate)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af04      	add	r7, sp, #16
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	807b      	strh	r3, [r7, #2]
    CO_ReturnError_t err;

    CO->CANmodule[0]->CANnormal = false;
 8007f30:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <CO_CANinit+0x50>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2200      	movs	r2, #0
 8007f38:	749a      	strb	r2, [r3, #18]
    CO_CANsetConfigurationMode(CANptr);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 ff40 	bl	8008dc0 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(CO->CANmodule[0],
 8007f40:	4b0c      	ldr	r3, [pc, #48]	; (8007f74 <CO_CANinit+0x50>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <CO_CANinit+0x54>)
 8007f48:	6819      	ldr	r1, [r3, #0]
 8007f4a:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <CO_CANinit+0x58>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	887a      	ldrh	r2, [r7, #2]
 8007f50:	9202      	str	r2, [sp, #8]
 8007f52:	2209      	movs	r2, #9
 8007f54:	9201      	str	r2, [sp, #4]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	230a      	movs	r3, #10
 8007f5a:	460a      	mov	r2, r1
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	f000 ff5d 	bl	8008e1c <CO_CANmodule_init>
 8007f62:	4603      	mov	r3, r0
 8007f64:	73fb      	strb	r3, [r7, #15]
                            CO_RXCAN_NO_MSGS,
                            CO_CANmodule_txArray0,
                            CO_TXCAN_NO_MSGS,
                            bitRate);

    return err;
 8007f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000adc 	.word	0x20000adc
 8007f78:	20000ae0 	.word	0x20000ae0
 8007f7c:	20000ae4 	.word	0x20000ae4

08007f80 <CO_CANopenInit>:
}
#endif /* CO_NO_LSS_SERVER == 1 */


/******************************************************************************/
CO_ReturnError_t CO_CANopenInit(uint8_t nodeId) {
 8007f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f82:	b097      	sub	sp, #92	; 0x5c
 8007f84:	af0a      	add	r7, sp, #40	; 0x28
 8007f86:	4603      	mov	r3, r0
 8007f88:	75fb      	strb	r3, [r7, #23]
    int16_t i;
    CO_ReturnError_t err;

    /* Verify CANopen Node-ID */
    if (nodeId < 1 || nodeId > 127) {
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <CO_CANopenInit+0x18>
 8007f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	da02      	bge.n	8007f9e <CO_CANopenInit+0x1e>
        return CO_ERROR_PARAMETERS;
 8007f98:	f06f 030b 	mvn.w	r3, #11
 8007f9c:	e256      	b.n	800844c <CO_CANopenInit+0x4cc>
    }
#endif


    /* SDOserver */
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007fa2:	e069      	b.n	8008078 <CO_CANopenInit+0xf8>
        uint32_t COB_IDClientToServer;
        uint32_t COB_IDServerToClient;
        if (i == 0) {
 8007fa4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d107      	bne.n	8007fbc <CO_CANopenInit+0x3c>
            /*Default SDO server must be located at first index*/
            COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007fb2:	62bb      	str	r3, [r7, #40]	; 0x28
            COB_IDServerToClient = CO_CAN_ID_TSDO + 0x01;
 8007fb4:	f240 5381 	movw	r3, #1409	; 0x581
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fba:	e015      	b.n	8007fe8 <CO_CANopenInit+0x68>
        }
        else {
            COB_IDClientToServer =
                OD_SDOServerParameter[i].COB_IDClientToServer;
 8007fbc:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
            COB_IDClientToServer =
 8007fc0:	4997      	ldr	r1, [pc, #604]	; (8008220 <CO_CANopenInit+0x2a0>)
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	3368      	adds	r3, #104	; 0x68
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	62bb      	str	r3, [r7, #40]	; 0x28
            COB_IDServerToClient =
                OD_SDOServerParameter[i].COB_IDServerToClient;
 8007fd2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
            COB_IDServerToClient =
 8007fd6:	4992      	ldr	r1, [pc, #584]	; (8008220 <CO_CANopenInit+0x2a0>)
 8007fd8:	4613      	mov	r3, r2
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	440b      	add	r3, r1
 8007fe2:	336c      	adds	r3, #108	; 0x6c
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
        }

        err = CO_SDO_init(CO->SDO[i],
 8007fe8:	4b8e      	ldr	r3, [pc, #568]	; (8008224 <CO_CANopenInit+0x2a4>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	685e      	ldr	r6, [r3, #4]
 8007ff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ff8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8007ffc:	fa1f fc83 	uxth.w	ip, r3
 8008000:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <CO_CANopenInit+0x90>
                          COB_IDClientToServer,
                          COB_IDServerToClient,
                          OD_H1200_SDO_SERVER_PARAM + i,
                          i == 0 ? 0 : CO->SDO[0],
 8008008:	4b86      	ldr	r3, [pc, #536]	; (8008224 <CO_CANopenInit+0x2a4>)
 800800a:	681b      	ldr	r3, [r3, #0]
        err = CO_SDO_init(CO->SDO[i],
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	e000      	b.n	8008012 <CO_CANopenInit+0x92>
 8008010:	2300      	movs	r3, #0
 8008012:	4a85      	ldr	r2, [pc, #532]	; (8008228 <CO_CANopenInit+0x2a8>)
 8008014:	6812      	ldr	r2, [r2, #0]
                          &CO_OD[0],
                          CO_OD_NoOfElements,
                          CO_SDO_ODExtensions,
                          nodeId,
                          30000,
                          CO->CANmodule[0],
 8008016:	4983      	ldr	r1, [pc, #524]	; (8008224 <CO_CANopenInit+0x2a4>)
 8008018:	6809      	ldr	r1, [r1, #0]
        err = CO_SDO_init(CO->SDO[i],
 800801a:	6809      	ldr	r1, [r1, #0]
 800801c:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800801e:	3008      	adds	r0, #8
 8008020:	b280      	uxth	r0, r0
                          CO_RXCAN_SDO_SRV + i,
                          CO->CANmodule[0],
 8008022:	4c80      	ldr	r4, [pc, #512]	; (8008224 <CO_CANopenInit+0x2a4>)
 8008024:	6824      	ldr	r4, [r4, #0]
        err = CO_SDO_init(CO->SDO[i],
 8008026:	6824      	ldr	r4, [r4, #0]
 8008028:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 800802a:	3507      	adds	r5, #7
 800802c:	b2ad      	uxth	r5, r5
 800802e:	9509      	str	r5, [sp, #36]	; 0x24
 8008030:	9408      	str	r4, [sp, #32]
 8008032:	9007      	str	r0, [sp, #28]
 8008034:	9106      	str	r1, [sp, #24]
 8008036:	f247 5130 	movw	r1, #30000	; 0x7530
 800803a:	9105      	str	r1, [sp, #20]
 800803c:	7df9      	ldrb	r1, [r7, #23]
 800803e:	9104      	str	r1, [sp, #16]
 8008040:	9203      	str	r2, [sp, #12]
 8008042:	2244      	movs	r2, #68	; 0x44
 8008044:	9202      	str	r2, [sp, #8]
 8008046:	4a79      	ldr	r2, [pc, #484]	; (800822c <CO_CANopenInit+0x2ac>)
 8008048:	9201      	str	r2, [sp, #4]
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	4663      	mov	r3, ip
 800804e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008052:	4630      	mov	r0, r6
 8008054:	f7fc ffc0 	bl	8004fd8 <CO_SDO_init>
 8008058:	4603      	mov	r3, r0
 800805a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                          CO_TXCAN_SDO_SRV + i);

        if (err) return err;
 800805e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008062:	2b00      	cmp	r3, #0
 8008064:	d002      	beq.n	800806c <CO_CANopenInit+0xec>
 8008066:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800806a:	e1ef      	b.n	800844c <CO_CANopenInit+0x4cc>
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 800806c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008070:	b29b      	uxth	r3, r3
 8008072:	3301      	adds	r3, #1
 8008074:	b29b      	uxth	r3, r3
 8008076:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008078:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800807c:	2b00      	cmp	r3, #0
 800807e:	dd91      	ble.n	8007fa4 <CO_CANopenInit+0x24>
    }


    /* Emergency */
    err = CO_EM_init(CO->em,
 8008080:	4b68      	ldr	r3, [pc, #416]	; (8008224 <CO_CANopenInit+0x2a4>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6898      	ldr	r0, [r3, #8]
                     CO->emPr,
 8008086:	4b67      	ldr	r3, [pc, #412]	; (8008224 <CO_CANopenInit+0x2a4>)
 8008088:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(CO->em,
 800808a:	68dc      	ldr	r4, [r3, #12]
                     CO->SDO[0],
 800808c:	4b65      	ldr	r3, [pc, #404]	; (8008224 <CO_CANopenInit+0x2a4>)
 800808e:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(CO->em,
 8008090:	685d      	ldr	r5, [r3, #4]
                     &OD_errorStatusBits[0],
                     ODL_errorStatusBits_stringLength,
                     &OD_errorRegister,
                     &OD_preDefinedErrorField[0],
                     ODL_preDefinedErrorField_arrayLength,
                     CO->CANmodule[0],
 8008092:	4b64      	ldr	r3, [pc, #400]	; (8008224 <CO_CANopenInit+0x2a4>)
 8008094:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(CO->em,
 8008096:	681b      	ldr	r3, [r3, #0]
                     CO_RXCAN_EMERG,
                     CO->CANmodule[0],
 8008098:	4a62      	ldr	r2, [pc, #392]	; (8008224 <CO_CANopenInit+0x2a4>)
 800809a:	6812      	ldr	r2, [r2, #0]
    err = CO_EM_init(CO->em,
 800809c:	6812      	ldr	r2, [r2, #0]
 800809e:	7df9      	ldrb	r1, [r7, #23]
 80080a0:	b289      	uxth	r1, r1
 80080a2:	3180      	adds	r1, #128	; 0x80
 80080a4:	b289      	uxth	r1, r1
 80080a6:	9108      	str	r1, [sp, #32]
 80080a8:	2101      	movs	r1, #1
 80080aa:	9107      	str	r1, [sp, #28]
 80080ac:	9206      	str	r2, [sp, #24]
 80080ae:	2202      	movs	r2, #2
 80080b0:	9205      	str	r2, [sp, #20]
 80080b2:	9304      	str	r3, [sp, #16]
 80080b4:	2308      	movs	r3, #8
 80080b6:	9303      	str	r3, [sp, #12]
 80080b8:	4b5d      	ldr	r3, [pc, #372]	; (8008230 <CO_CANopenInit+0x2b0>)
 80080ba:	9302      	str	r3, [sp, #8]
 80080bc:	4b5d      	ldr	r3, [pc, #372]	; (8008234 <CO_CANopenInit+0x2b4>)
 80080be:	9301      	str	r3, [sp, #4]
 80080c0:	230a      	movs	r3, #10
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	4b5c      	ldr	r3, [pc, #368]	; (8008238 <CO_CANopenInit+0x2b8>)
 80080c6:	462a      	mov	r2, r5
 80080c8:	4621      	mov	r1, r4
 80080ca:	f7fa fa01 	bl	80024d0 <CO_EM_init>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                     CO_TXCAN_EMERG,
                     (uint16_t)CO_CAN_ID_EMERGENCY + nodeId);

    if (err) return err;
 80080d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <CO_CANopenInit+0x162>
 80080dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80080e0:	e1b4      	b.n	800844c <CO_CANopenInit+0x4cc>

    /* NMT_Heartbeat */
    err = CO_NMT_init(CO->NMT,
 80080e2:	4b50      	ldr	r3, [pc, #320]	; (8008224 <CO_CANopenInit+0x2a4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691c      	ldr	r4, [r3, #16]
                      CO->emPr,
 80080e8:	4b4e      	ldr	r3, [pc, #312]	; (8008224 <CO_CANopenInit+0x2a4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(CO->NMT,
 80080ec:	68dd      	ldr	r5, [r3, #12]
                      nodeId,
                      500,
                      CO->CANmodule[0],
 80080ee:	4b4d      	ldr	r3, [pc, #308]	; (8008224 <CO_CANopenInit+0x2a4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(CO->NMT,
 80080f2:	681b      	ldr	r3, [r3, #0]
                      CO_RXCAN_NMT,
                      CO_CAN_ID_NMT_SERVICE,
                      CO->CANmodule[0],
 80080f4:	4a4b      	ldr	r2, [pc, #300]	; (8008224 <CO_CANopenInit+0x2a4>)
 80080f6:	6812      	ldr	r2, [r2, #0]
    err = CO_NMT_init(CO->NMT,
 80080f8:	6812      	ldr	r2, [r2, #0]
                      CO_TXCAN_NMT,
                      CO_CAN_ID_NMT_SERVICE,
                      CO->CANmodule[0],
 80080fa:	494a      	ldr	r1, [pc, #296]	; (8008224 <CO_CANopenInit+0x2a4>)
 80080fc:	6809      	ldr	r1, [r1, #0]
    err = CO_NMT_init(CO->NMT,
 80080fe:	6809      	ldr	r1, [r1, #0]
 8008100:	7df8      	ldrb	r0, [r7, #23]
 8008102:	b280      	uxth	r0, r0
 8008104:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
 8008108:	b280      	uxth	r0, r0
 800810a:	7dfe      	ldrb	r6, [r7, #23]
 800810c:	9008      	str	r0, [sp, #32]
 800810e:	2008      	movs	r0, #8
 8008110:	9007      	str	r0, [sp, #28]
 8008112:	9106      	str	r1, [sp, #24]
 8008114:	2100      	movs	r1, #0
 8008116:	9105      	str	r1, [sp, #20]
 8008118:	2100      	movs	r1, #0
 800811a:	9104      	str	r1, [sp, #16]
 800811c:	9203      	str	r2, [sp, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	9202      	str	r2, [sp, #8]
 8008122:	2200      	movs	r2, #0
 8008124:	9201      	str	r2, [sp, #4]
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800812c:	4632      	mov	r2, r6
 800812e:	4629      	mov	r1, r5
 8008130:	4620      	mov	r0, r4
 8008132:	f7fb f88b 	bl	800324c <CO_NMT_init>
 8008136:	4603      	mov	r3, r0
 8008138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                      CO_TXCAN_HB,
                      CO_CAN_ID_HEARTBEAT + nodeId);

    if (err) return err;
 800813c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <CO_CANopenInit+0x1ca>
 8008144:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008148:	e180      	b.n	800844c <CO_CANopenInit+0x4cc>

#if CO_NO_SYNC == 1
    /* SYNC */
    err = CO_SYNC_init(CO->SYNC,
 800814a:	4b36      	ldr	r3, [pc, #216]	; (8008224 <CO_CANopenInit+0x2a4>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	695d      	ldr	r5, [r3, #20]
                       CO->em,
 8008150:	4b34      	ldr	r3, [pc, #208]	; (8008224 <CO_CANopenInit+0x2a4>)
 8008152:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(CO->SYNC,
 8008154:	689e      	ldr	r6, [r3, #8]
                       CO->SDO[0],
 8008156:	4b33      	ldr	r3, [pc, #204]	; (8008224 <CO_CANopenInit+0x2a4>)
 8008158:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(CO->SYNC,
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	613b      	str	r3, [r7, #16]
                       &CO->NMT->operatingState,
 800815e:	4b31      	ldr	r3, [pc, #196]	; (8008224 <CO_CANopenInit+0x2a4>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	691b      	ldr	r3, [r3, #16]
    err = CO_SYNC_init(CO->SYNC,
 8008164:	f103 0c0c 	add.w	ip, r3, #12
 8008168:	4b2d      	ldr	r3, [pc, #180]	; (8008220 <CO_CANopenInit+0x2a0>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	4a2c      	ldr	r2, [pc, #176]	; (8008220 <CO_CANopenInit+0x2a0>)
 800816e:	68d2      	ldr	r2, [r2, #12]
 8008170:	492b      	ldr	r1, [pc, #172]	; (8008220 <CO_CANopenInit+0x2a0>)
 8008172:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
 8008176:	60f9      	str	r1, [r7, #12]
                       OD_COB_ID_SYNCMessage,
                       OD_communicationCyclePeriod,
                       OD_synchronousCounterOverflowValue,
                       CO->CANmodule[0],
 8008178:	482a      	ldr	r0, [pc, #168]	; (8008224 <CO_CANopenInit+0x2a4>)
 800817a:	6800      	ldr	r0, [r0, #0]
    err = CO_SYNC_init(CO->SYNC,
 800817c:	6800      	ldr	r0, [r0, #0]
                       CO_RXCAN_SYNC,
                       CO->CANmodule[0],
 800817e:	4c29      	ldr	r4, [pc, #164]	; (8008224 <CO_CANopenInit+0x2a4>)
 8008180:	6824      	ldr	r4, [r4, #0]
    err = CO_SYNC_init(CO->SYNC,
 8008182:	6824      	ldr	r4, [r4, #0]
 8008184:	2100      	movs	r1, #0
 8008186:	9106      	str	r1, [sp, #24]
 8008188:	9405      	str	r4, [sp, #20]
 800818a:	2401      	movs	r4, #1
 800818c:	9404      	str	r4, [sp, #16]
 800818e:	9003      	str	r0, [sp, #12]
 8008190:	68f9      	ldr	r1, [r7, #12]
 8008192:	9102      	str	r1, [sp, #8]
 8008194:	9201      	str	r2, [sp, #4]
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	4663      	mov	r3, ip
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	f7fe fe80 	bl	8006ea4 <CO_SYNC_init>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                       CO_TXCAN_SYNC);

    if (err) return err;
 80081aa:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <CO_CANopenInit+0x238>
 80081b2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80081b6:	e149      	b.n	800844c <CO_CANopenInit+0x4cc>
#endif

#if CO_NO_TIME == 1
    /* TIME */
    err = CO_TIME_init(CO->TIME,
 80081b8:	4b1a      	ldr	r3, [pc, #104]	; (8008224 <CO_CANopenInit+0x2a4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6998      	ldr	r0, [r3, #24]
                       CO->em,
 80081be:	4b19      	ldr	r3, [pc, #100]	; (8008224 <CO_CANopenInit+0x2a4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
    err = CO_TIME_init(CO->TIME,
 80081c2:	689c      	ldr	r4, [r3, #8]
                       CO->SDO[0],
 80081c4:	4b17      	ldr	r3, [pc, #92]	; (8008224 <CO_CANopenInit+0x2a4>)
 80081c6:	681b      	ldr	r3, [r3, #0]
    err = CO_TIME_init(CO->TIME,
 80081c8:	685d      	ldr	r5, [r3, #4]
                       &CO->NMT->operatingState,
 80081ca:	4b16      	ldr	r3, [pc, #88]	; (8008224 <CO_CANopenInit+0x2a4>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	691b      	ldr	r3, [r3, #16]
    err = CO_TIME_init(CO->TIME,
 80081d0:	f103 060c 	add.w	r6, r3, #12
 80081d4:	4b12      	ldr	r3, [pc, #72]	; (8008220 <CO_CANopenInit+0x2a0>)
 80081d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d8:	613b      	str	r3, [r7, #16]
                       OD_COB_ID_TIME,
                       0,
                       CO->CANmodule[0],
 80081da:	4a12      	ldr	r2, [pc, #72]	; (8008224 <CO_CANopenInit+0x2a4>)
 80081dc:	6812      	ldr	r2, [r2, #0]
    err = CO_TIME_init(CO->TIME,
 80081de:	6812      	ldr	r2, [r2, #0]
                       CO_RXCAN_TIME,
                       CO->CANmodule[0],
 80081e0:	4910      	ldr	r1, [pc, #64]	; (8008224 <CO_CANopenInit+0x2a4>)
 80081e2:	6809      	ldr	r1, [r1, #0]
    err = CO_TIME_init(CO->TIME,
 80081e4:	6809      	ldr	r1, [r1, #0]
 80081e6:	2302      	movs	r3, #2
 80081e8:	9305      	str	r3, [sp, #20]
 80081ea:	9104      	str	r1, [sp, #16]
 80081ec:	2103      	movs	r1, #3
 80081ee:	9103      	str	r1, [sp, #12]
 80081f0:	9202      	str	r2, [sp, #8]
 80081f2:	2200      	movs	r2, #0
 80081f4:	9201      	str	r2, [sp, #4]
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	4633      	mov	r3, r6
 80081fc:	462a      	mov	r2, r5
 80081fe:	4621      	mov	r1, r4
 8008200:	f7ff f82a 	bl	8007258 <CO_TIME_init>
 8008204:	4603      	mov	r3, r0
 8008206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                       CO_TXCAN_TIME);

    if (err) return err;
 800820a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <CO_CANopenInit+0x298>
 8008212:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008216:	e119      	b.n	800844c <CO_CANopenInit+0x4cc>
#endif

    /* RPDO */
    for (i = 0; i < CO_NO_RPDO; i++) {
 8008218:	2300      	movs	r3, #0
 800821a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800821c:	e079      	b.n	8008312 <CO_CANopenInit+0x392>
 800821e:	bf00      	nop
 8008220:	200001c4 	.word	0x200001c4
 8008224:	20000adc 	.word	0x20000adc
 8008228:	20000ae8 	.word	0x20000ae8
 800822c:	08018bbc 	.word	0x08018bbc
 8008230:	20000074 	.word	0x20000074
 8008234:	2000006c 	.word	0x2000006c
 8008238:	200000ac 	.word	0x200000ac
        CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
 800823c:	4b85      	ldr	r3, [pc, #532]	; (8008454 <CO_CANopenInit+0x4d4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	61fb      	str	r3, [r7, #28]
        uint16_t CANdevRxIdx = CO_RXCAN_RPDO + i;
 8008244:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008246:	3304      	adds	r3, #4
 8008248:	837b      	strh	r3, [r7, #26]

        err = CO_RPDO_init(CO->RPDO[i],
 800824a:	4b82      	ldr	r3, [pc, #520]	; (8008454 <CO_CANopenInit+0x4d4>)
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008252:	3306      	adds	r3, #6
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	613b      	str	r3, [r7, #16]
                           CO->em,
 800825c:	4b7d      	ldr	r3, [pc, #500]	; (8008454 <CO_CANopenInit+0x4d4>)
 800825e:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(CO->RPDO[i],
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	60fb      	str	r3, [r7, #12]
                           CO->SDO[0],
 8008264:	4b7b      	ldr	r3, [pc, #492]	; (8008454 <CO_CANopenInit+0x4d4>)
 8008266:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(CO->RPDO[i],
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	60bb      	str	r3, [r7, #8]
                           (void *)CO->SYNC,
 800826c:	4b79      	ldr	r3, [pc, #484]	; (8008454 <CO_CANopenInit+0x4d4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	607b      	str	r3, [r7, #4]
                           &CO->NMT->operatingState,
 8008274:	4b77      	ldr	r3, [pc, #476]	; (8008454 <CO_CANopenInit+0x4d4>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
        err = CO_RPDO_init(CO->RPDO[i],
 800827a:	f103 000c 	add.w	r0, r3, #12
 800827e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008282:	2b03      	cmp	r3, #3
 8008284:	dc06      	bgt.n	8008294 <CO_CANopenInit+0x314>
                           nodeId,
                           ((i < 4) ? (CO_CAN_ID_RPDO_1 + i * 0x100) : 0),
 8008286:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800828a:	3302      	adds	r3, #2
        err = CO_RPDO_init(CO->RPDO[i],
 800828c:	b29b      	uxth	r3, r3
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	b29a      	uxth	r2, r3
 8008292:	e000      	b.n	8008296 <CO_CANopenInit+0x316>
 8008294:	2200      	movs	r2, #0
                           0,
                           (CO_RPDOCommPar_t*)&OD_RPDOCommunicationParameter[i],
 8008296:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 800829a:	460b      	mov	r3, r1
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	440b      	add	r3, r1
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	3370      	adds	r3, #112	; 0x70
 80082a4:	496c      	ldr	r1, [pc, #432]	; (8008458 <CO_CANopenInit+0x4d8>)
 80082a6:	185c      	adds	r4, r3, r1
                           (CO_RPDOMapPar_t *)&OD_RPDOMappingParameter[i],
 80082a8:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 80082ac:	460b      	mov	r3, r1
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	440b      	add	r3, r1
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	33a0      	adds	r3, #160	; 0xa0
 80082b6:	4968      	ldr	r1, [pc, #416]	; (8008458 <CO_CANopenInit+0x4d8>)
 80082b8:	440b      	add	r3, r1
        err = CO_RPDO_init(CO->RPDO[i],
 80082ba:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80082bc:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 80082c0:	b289      	uxth	r1, r1
 80082c2:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 80082c4:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
 80082c8:	b2ad      	uxth	r5, r5
 80082ca:	8b7e      	ldrh	r6, [r7, #26]
 80082cc:	9609      	str	r6, [sp, #36]	; 0x24
 80082ce:	69fe      	ldr	r6, [r7, #28]
 80082d0:	9608      	str	r6, [sp, #32]
 80082d2:	9507      	str	r5, [sp, #28]
 80082d4:	9106      	str	r1, [sp, #24]
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	9404      	str	r4, [sp, #16]
 80082da:	2300      	movs	r3, #0
 80082dc:	9303      	str	r3, [sp, #12]
 80082de:	9202      	str	r2, [sp, #8]
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	9000      	str	r0, [sp, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	68f9      	ldr	r1, [r7, #12]
 80082ec:	6938      	ldr	r0, [r7, #16]
 80082ee:	f7fc f8c5 	bl	800447c <CO_RPDO_init>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                           OD_H1400_RXPDO_1_PARAM + i,
                           OD_H1600_RXPDO_1_MAPPING + i,
                           CANdevRx,
                           CANdevRxIdx);

        if (err) return err;
 80082f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <CO_CANopenInit+0x386>
 8008300:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008304:	e0a2      	b.n	800844c <CO_CANopenInit+0x4cc>
    for (i = 0; i < CO_NO_RPDO; i++) {
 8008306:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800830a:	b29b      	uxth	r3, r3
 800830c:	3301      	adds	r3, #1
 800830e:	b29b      	uxth	r3, r3
 8008310:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008312:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008316:	2b03      	cmp	r3, #3
 8008318:	dd90      	ble.n	800823c <CO_CANopenInit+0x2bc>
    }

    /* TPDO */
    for (i = 0; i < CO_NO_TPDO; i++) {
 800831a:	2300      	movs	r3, #0
 800831c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800831e:	e06e      	b.n	80083fe <CO_CANopenInit+0x47e>
        err = CO_TPDO_init(CO->TPDO[i],
 8008320:	4b4c      	ldr	r3, [pc, #304]	; (8008454 <CO_CANopenInit+0x4d4>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008328:	330a      	adds	r3, #10
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	613b      	str	r3, [r7, #16]
                           CO->em,
 8008332:	4b48      	ldr	r3, [pc, #288]	; (8008454 <CO_CANopenInit+0x4d4>)
 8008334:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	60fb      	str	r3, [r7, #12]
                           CO->SDO[0],
 800833a:	4b46      	ldr	r3, [pc, #280]	; (8008454 <CO_CANopenInit+0x4d4>)
 800833c:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	60bb      	str	r3, [r7, #8]
                           (void *)CO->SYNC,
 8008342:	4b44      	ldr	r3, [pc, #272]	; (8008454 <CO_CANopenInit+0x4d4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	607b      	str	r3, [r7, #4]
                           &CO->NMT->operatingState,
 800834a:	4b42      	ldr	r3, [pc, #264]	; (8008454 <CO_CANopenInit+0x4d4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	691b      	ldr	r3, [r3, #16]
        err = CO_TPDO_init(CO->TPDO[i],
 8008350:	f103 000c 	add.w	r0, r3, #12
 8008354:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008358:	2b03      	cmp	r3, #3
 800835a:	dc06      	bgt.n	800836a <CO_CANopenInit+0x3ea>
                           nodeId,
                           ((i < 4) ? (CO_CAN_ID_TPDO_1 + i * 0x100) : 0),
 800835c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800835e:	021b      	lsls	r3, r3, #8
 8008360:	b29b      	uxth	r3, r3
        err = CO_TPDO_init(CO->TPDO[i],
 8008362:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008366:	b29a      	uxth	r2, r3
 8008368:	e000      	b.n	800836c <CO_CANopenInit+0x3ec>
 800836a:	2200      	movs	r2, #0
                           0,
                           (CO_TPDOCommPar_t*)&OD_TPDOCommunicationParameter[i],
 800836c:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8008370:	460b      	mov	r3, r1
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	440b      	add	r3, r1
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800837c:	4936      	ldr	r1, [pc, #216]	; (8008458 <CO_CANopenInit+0x4d8>)
 800837e:	185c      	adds	r4, r3, r1
                           (CO_TPDOMapPar_t *)&OD_TPDOMappingParameter[i],
 8008380:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8008384:	460b      	mov	r3, r1
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	440b      	add	r3, r1
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008390:	4931      	ldr	r1, [pc, #196]	; (8008458 <CO_CANopenInit+0x4d8>)
 8008392:	440b      	add	r3, r1
 8008394:	603b      	str	r3, [r7, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 8008396:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8008398:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 800839c:	b289      	uxth	r1, r1
 800839e:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 80083a0:	f505 55d0 	add.w	r5, r5, #6656	; 0x1a00
 80083a4:	b2ad      	uxth	r5, r5
                           OD_H1800_TXPDO_1_PARAM + i,
                           OD_H1A00_TXPDO_1_MAPPING + i,
                           CO->CANmodule[0],
 80083a6:	4e2b      	ldr	r6, [pc, #172]	; (8008454 <CO_CANopenInit+0x4d4>)
 80083a8:	6836      	ldr	r6, [r6, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 80083aa:	6836      	ldr	r6, [r6, #0]
 80083ac:	f8b7 c02e 	ldrh.w	ip, [r7, #46]	; 0x2e
 80083b0:	f10c 0c03 	add.w	ip, ip, #3
 80083b4:	fa1f f38c 	uxth.w	r3, ip
 80083b8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ba:	9608      	str	r6, [sp, #32]
 80083bc:	9507      	str	r5, [sp, #28]
 80083be:	9106      	str	r1, [sp, #24]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	9305      	str	r3, [sp, #20]
 80083c4:	9404      	str	r4, [sp, #16]
 80083c6:	2300      	movs	r3, #0
 80083c8:	9303      	str	r3, [sp, #12]
 80083ca:	9202      	str	r2, [sp, #8]
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	9301      	str	r3, [sp, #4]
 80083d0:	9000      	str	r0, [sp, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	68f9      	ldr	r1, [r7, #12]
 80083d8:	6938      	ldr	r0, [r7, #16]
 80083da:	f7fc f8c7 	bl	800456c <CO_TPDO_init>
 80083de:	4603      	mov	r3, r0
 80083e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                           CO_TXCAN_TPDO + i);

        if (err) return err;
 80083e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <CO_CANopenInit+0x472>
 80083ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80083f0:	e02c      	b.n	800844c <CO_CANopenInit+0x4cc>
    for (i = 0; i < CO_NO_TPDO; i++) {
 80083f2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	3301      	adds	r3, #1
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80083fe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008402:	2b03      	cmp	r3, #3
 8008404:	dd8c      	ble.n	8008320 <CO_CANopenInit+0x3a0>
    }

    /* Heartbeat consumer */
    err = CO_HBconsumer_init(CO->HBcons,
 8008406:	4b13      	ldr	r3, [pc, #76]	; (8008454 <CO_CANopenInit+0x4d4>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
                             CO->em,
 800840c:	4b11      	ldr	r3, [pc, #68]	; (8008454 <CO_CANopenInit+0x4d4>)
 800840e:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(CO->HBcons,
 8008410:	6899      	ldr	r1, [r3, #8]
                             CO->SDO[0],
 8008412:	4b10      	ldr	r3, [pc, #64]	; (8008454 <CO_CANopenInit+0x4d4>)
 8008414:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(CO->HBcons,
 8008416:	685c      	ldr	r4, [r3, #4]
 8008418:	4b10      	ldr	r3, [pc, #64]	; (800845c <CO_CANopenInit+0x4dc>)
 800841a:	681b      	ldr	r3, [r3, #0]
                             &OD_consumerHeartbeatTime[0],
                             CO_HBcons_monitoredNodes,
                             CO_NO_HB_CONS,
                             CO->CANmodule[0],
 800841c:	4a0d      	ldr	r2, [pc, #52]	; (8008454 <CO_CANopenInit+0x4d4>)
 800841e:	6812      	ldr	r2, [r2, #0]
    err = CO_HBconsumer_init(CO->HBcons,
 8008420:	6812      	ldr	r2, [r2, #0]
 8008422:	2509      	movs	r5, #9
 8008424:	9503      	str	r5, [sp, #12]
 8008426:	9202      	str	r2, [sp, #8]
 8008428:	2201      	movs	r2, #1
 800842a:	9201      	str	r2, [sp, #4]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <CO_CANopenInit+0x4e0>)
 8008430:	4622      	mov	r2, r4
 8008432:	f7fa fc07 	bl	8002c44 <CO_HBconsumer_init>
 8008436:	4603      	mov	r3, r0
 8008438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             CO_RXCAN_CONS_HB);

    if (err) return err;
 800843c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <CO_CANopenInit+0x4ca>
 8008444:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008448:	e000      	b.n	800844c <CO_CANopenInit+0x4cc>
                      OD_INDEX_TRACE_CONFIG + i,
                      OD_INDEX_TRACE + i);
    }
#endif

    return CO_ERROR_NO;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3734      	adds	r7, #52	; 0x34
 8008450:	46bd      	mov	sp, r7
 8008452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008454:	20000adc 	.word	0x20000adc
 8008458:	200001c4 	.word	0x200001c4
 800845c:	20000aec 	.word	0x20000aec
 8008460:	200001f8 	.word	0x200001f8

08008464 <CO_process>:

/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 8008464:	b590      	push	{r4, r7, lr}
 8008466:	b08b      	sub	sp, #44	; 0x2c
 8008468:	af04      	add	r7, sp, #16
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
    uint8_t i;
    bool_t NMTisPreOrOperational = false;
 8008470:	2300      	movs	r3, #0
 8008472:	75bb      	strb	r3, [r7, #22]
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8008474:	2300      	movs	r3, #0
 8008476:	757b      	strb	r3, [r7, #21]

    if (co->NMT->operatingState == CO_NMT_PRE_OPERATIONAL ||
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8008480:	2b7f      	cmp	r3, #127	; 0x7f
 8008482:	d005      	beq.n	8008490 <CO_process+0x2c>
        co->NMT->operatingState == CO_NMT_OPERATIONAL)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f993 300c 	ldrsb.w	r3, [r3, #12]
    if (co->NMT->operatingState == CO_NMT_PRE_OPERATIONAL ||
 800848c:	2b05      	cmp	r3, #5
 800848e:	d101      	bne.n	8008494 <CO_process+0x30>
        NMTisPreOrOperational = true;
 8008490:	2301      	movs	r3, #1
 8008492:	75bb      	strb	r3, [r7, #22]

    /* SDOserver */
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8008494:	2300      	movs	r3, #0
 8008496:	75fb      	strb	r3, [r7, #23]
 8008498:	e00c      	b.n	80084b4 <CO_process+0x50>
        CO_SDO_process(co->SDO[i],
 800849a:	7dfb      	ldrb	r3, [r7, #23]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	6858      	ldr	r0, [r3, #4]
 80084a4:	7db9      	ldrb	r1, [r7, #22]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	f7fd fa49 	bl	8005940 <CO_SDO_process>
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
 80084b0:	3301      	adds	r3, #1
 80084b2:	75fb      	strb	r3, [r7, #23]
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0ef      	beq.n	800849a <CO_process+0x36>
                       timeDifference_us,
                       timerNext_us);
    }

    /* Emergency */
    CO_EM_process(co->emPr,
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	68d8      	ldr	r0, [r3, #12]
 80084be:	4b18      	ldr	r3, [pc, #96]	; (8008520 <CO_process+0xbc>)
 80084c0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80084c2:	7db9      	ldrb	r1, [r7, #22]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	4613      	mov	r3, r2
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	f7fa f8c0 	bl	8002650 <CO_EM_process>
                  timeDifference_us,
                  OD_inhibitTimeEMCY,
                  timerNext_us);

    /* NMT_Heartbeat */
    reset = CO_NMT_process(co->NMT,
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6918      	ldr	r0, [r3, #16]
 80084d4:	4b12      	ldr	r3, [pc, #72]	; (8008520 <CO_process+0xbc>)
 80084d6:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 80084da:	4b11      	ldr	r3, [pc, #68]	; (8008520 <CO_process+0xbc>)
 80084dc:	f8d3 4210 	ldr.w	r4, [r3, #528]	; 0x210
 80084e0:	4b10      	ldr	r3, [pc, #64]	; (8008524 <CO_process+0xc0>)
 80084e2:	791b      	ldrb	r3, [r3, #4]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	9202      	str	r2, [sp, #8]
 80084e8:	4a0f      	ldr	r2, [pc, #60]	; (8008528 <CO_process+0xc4>)
 80084ea:	9201      	str	r2, [sp, #4]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	4623      	mov	r3, r4
 80084f0:	460a      	mov	r2, r1
 80084f2:	68b9      	ldr	r1, [r7, #8]
 80084f4:	f7fa ff61 	bl	80033ba <CO_NMT_process>
 80084f8:	4603      	mov	r3, r0
 80084fa:	757b      	strb	r3, [r7, #21]
                           OD_errorBehavior,
                           timerNext_us);

#if CO_NO_TIME == 1
    /* TIME */
    CO_TIME_process(co->TIME,
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	68b9      	ldr	r1, [r7, #8]
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe ff42 	bl	800738c <CO_TIME_process>
                    timeDifference_us);
#endif

    /* Heartbeat consumer */
    CO_HBconsumer_process(co->HBcons,
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800850c:	7db9      	ldrb	r1, [r7, #22]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	f7fa fd1d 	bl	8002f50 <CO_HBconsumer_process>
                    CO_GTWA_ENABLE,
                    timeDifference_us,
                    timerNext_us);
#endif

    return reset;
 8008516:	7d7b      	ldrb	r3, [r7, #21]
}
 8008518:	4618      	mov	r0, r3
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	bd90      	pop	{r4, r7, pc}
 8008520:	200001c4 	.word	0x200001c4
 8008524:	20000068 	.word	0x20000068
 8008528:	20000221 	.word	0x20000221

0800852c <CO_process_SYNC>:
/******************************************************************************/
#if CO_NO_SYNC == 1
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
    const CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6958      	ldr	r0, [r3, #20]
 800853c:	4b10      	ldr	r3, [pc, #64]	; (8008580 <CO_process_SYNC+0x54>)
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	f7fe fd78 	bl	8007038 <CO_SYNC_process>
 8008548:	4603      	mov	r3, r0
 800854a:	75bb      	strb	r3, [r7, #22]
                                   timeDifference_us,
                                   OD_synchronousWindowLength,
                                   timerNext_us);

    bool_t syncWas = false;
 800854c:	2300      	movs	r3, #0
 800854e:	75fb      	strb	r3, [r7, #23]

    switch (sync_process) {
 8008550:	7dbb      	ldrb	r3, [r7, #22]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d008      	beq.n	8008568 <CO_process_SYNC+0x3c>
 8008556:	2b02      	cmp	r3, #2
 8008558:	dc0d      	bgt.n	8008576 <CO_process_SYNC+0x4a>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <CO_process_SYNC+0x48>
 800855e:	2b01      	cmp	r3, #1
 8008560:	d109      	bne.n	8008576 <CO_process_SYNC+0x4a>
    case CO_SYNC_NONE:
        break;
    case CO_SYNC_RECEIVED:
        syncWas = true;
 8008562:	2301      	movs	r3, #1
 8008564:	75fb      	strb	r3, [r7, #23]
        break;
 8008566:	e006      	b.n	8008576 <CO_process_SYNC+0x4a>
    case CO_SYNC_OUTSIDE_WINDOW:
        CO_CANclearPendingSyncPDOs(co->CANmodule[0]);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fec1 	bl	80092f4 <CO_CANclearPendingSyncPDOs>
        break;
 8008572:	e000      	b.n	8008576 <CO_process_SYNC+0x4a>
        break;
 8008574:	bf00      	nop
    }

    return syncWas;
 8008576:	7dfb      	ldrb	r3, [r7, #23]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	200001c4 	.word	0x200001c4

08008584 <CO_process_RPDO>:


/******************************************************************************/
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
    int16_t i;

    for (i = 0; i < CO_NO_RPDO; i++) {
 8008590:	2300      	movs	r3, #0
 8008592:	81fb      	strh	r3, [r7, #14]
 8008594:	e011      	b.n	80085ba <CO_process_RPDO+0x36>
        CO_RPDO_process(co->RPDO[i], syncWas);
 8008596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	3306      	adds	r3, #6
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	78fa      	ldrb	r2, [r7, #3]
 80085a6:	4611      	mov	r1, r2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fc fa11 	bl	80049d0 <CO_RPDO_process>
    for (i = 0; i < CO_NO_RPDO; i++) {
 80085ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	3301      	adds	r3, #1
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	81fb      	strh	r3, [r7, #14]
 80085ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80085be:	2b03      	cmp	r3, #3
 80085c0:	dde9      	ble.n	8008596 <CO_process_RPDO+0x12>
    }
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <CO_process_TPDO>:
/******************************************************************************/
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 80085cc:	b590      	push	{r4, r7, lr}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	460b      	mov	r3, r1
 80085da:	72fb      	strb	r3, [r7, #11]
    int16_t i;

    /* Verify PDO Change Of State and process PDOs */
    for (i = 0; i < CO_NO_TPDO; i++) {
 80085dc:	2300      	movs	r3, #0
 80085de:	82fb      	strh	r3, [r7, #22]
 80085e0:	e02e      	b.n	8008640 <CO_process_TPDO+0x74>
        if (!co->TPDO[i]->sendRequest)
 80085e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	330a      	adds	r3, #10
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	7edb      	ldrb	r3, [r3, #27]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d112      	bne.n	800861c <CO_process_TPDO+0x50>
            co->TPDO[i]->sendRequest = CO_TPDOisCOS(co->TPDO[i]);
 80085f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	330a      	adds	r3, #10
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	6859      	ldr	r1, [r3, #4]
 8008604:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	330a      	adds	r3, #10
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	685c      	ldr	r4, [r3, #4]
 8008612:	4608      	mov	r0, r1
 8008614:	f7fc f842 	bl	800469c <CO_TPDOisCOS>
 8008618:	4603      	mov	r3, r0
 800861a:	76e3      	strb	r3, [r4, #27]
        CO_TPDO_process(co->TPDO[i], syncWas, timeDifference_us, timerNext_us);
 800861c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	330a      	adds	r3, #10
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	6858      	ldr	r0, [r3, #4]
 800862a:	7af9      	ldrb	r1, [r7, #11]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	f7fc fad4 	bl	8004bdc <CO_TPDO_process>
    for (i = 0; i < CO_NO_TPDO; i++) {
 8008634:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008638:	b29b      	uxth	r3, r3
 800863a:	3301      	adds	r3, #1
 800863c:	b29b      	uxth	r3, r3
 800863e:	82fb      	strh	r3, [r7, #22]
 8008640:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008644:	2b03      	cmp	r3, #3
 8008646:	ddcc      	ble.n	80085e2 <CO_process_TPDO+0x16>
    }
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	bd90      	pop	{r4, r7, pc}
	...

08008654 <MCD_reset>:
	int16_t ret = (1 << 10) | (1 << 12);
	pmc->statusWord |= ret;
}

void MCD_reset(MotionCtrlDef_t* pmc)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
	g_MotionType = MOTION_UNKNOWN_MODE;
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <MCD_reset+0x44>)
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]

	pmc->statusWord = DS402_buildStatusWordByStatus(pmc->statusWord, DS402_Status_NotReadyToSwitchON);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	885b      	ldrh	r3, [r3, #2]
 8008666:	2101      	movs	r1, #1
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff f825 	bl	80076b8 <DS402_buildStatusWordByStatus>
 800866e:	4603      	mov	r3, r0
 8008670:	461a      	mov	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	805a      	strh	r2, [r3, #2]
	pmc->controlWord = 0;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	801a      	strh	r2, [r3, #0]

	pmc->mode = DS402_OperMode_NoMode;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	22ff      	movs	r2, #255	; 0xff
 8008680:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pmc->displayMode = DS402_OperMode_NoMode;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	22ff      	movs	r2, #255	; 0xff
 8008688:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	HOME_reset();
 800868c:	f7ff f9ac 	bl	80079e8 <HOME_reset>
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	20000af0 	.word	0x20000af0

0800869c <MCD_setSwtichOnDisabled>:

/*Called by node's operational routine*/
void MCD_setSwtichOnDisabled(MotionCtrlDef_t* pmc)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	pmc->statusWord = DS402_buildStatusWordByStatus(pmc->statusWord, DS402_Status_SwitchONDisabled);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	885b      	ldrh	r3, [r3, #2]
 80086a8:	2102      	movs	r1, #2
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff f804 	bl	80076b8 <DS402_buildStatusWordByStatus>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	805a      	strh	r2, [r3, #2]
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <MCD_Init>:

void MCD_Init(MotionCtrlDef_t* pmc)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	MCD_reset(pmc);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff ffc3 	bl	8008654 <MCD_reset>

	/*Initialize the home, pp, ip mode callback*/
	HOME_Init(g_NodeDriveProfile.home_offset, 17, g_NodeDriveProfile.home_speed, 4*g_NodeDriveProfile.home_speed);
 80086ce:	4b0e      	ldr	r3, [pc, #56]	; (8008708 <MCD_Init+0x48>)
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	4618      	mov	r0, r3
 80086d4:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <MCD_Init+0x48>)
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <MCD_Init+0x48>)
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	2111      	movs	r1, #17
 80086e0:	f7ff f9ae 	bl	8007a40 <HOME_Init>

	/*Profile position model initialize*/
	PP_Init();
 80086e4:	f7fe ff22 	bl	800752c <PP_Init>

	/*Trajectory position blocks*/
	TPB_Init();
 80086e8:	f003 fb58 	bl	800bd9c <TPB_Init>
	pmc->statusWord = DS402_buildStatusWordByStatus(pmc->statusWord, DS402_Status_NotReadyToSwitchON);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	885b      	ldrh	r3, [r3, #2]
 80086f0:	2101      	movs	r1, #1
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe ffe0 	bl	80076b8 <DS402_buildStatusWordByStatus>
 80086f8:	4603      	mov	r3, r0
 80086fa:	461a      	mov	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	805a      	strh	r2, [r3, #2]
}
 8008700:	bf00      	nop
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	20000af4 	.word	0x20000af4

0800870c <MCD_changeMode>:

/* Motor control driver, change mode
 * mode: received from host
 * displaymode: set right mode if initialize successfully */
void MCD_changeMode(MotionCtrlDef_t* pmc)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	if (pmc->mode == DS402_OperMode_Homing ) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800871a:	2b06      	cmp	r3, #6
 800871c:	d102      	bne.n	8008724 <MCD_changeMode+0x18>
		HOME_active();
 800871e:	f7ff f9cd 	bl	8007abc <HOME_active>
 8008722:	e009      	b.n	8008738 <MCD_changeMode+0x2c>
	}else if (pmc->mode == DS402_OperMode_ProfilePosition){
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800872a:	2b01      	cmp	r3, #1
 800872c:	d104      	bne.n	8008738 <MCD_changeMode+0x2c>
		PP_active(pmc->controlWord);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe ff38 	bl	80075a8 <PP_active>
	}
	pmc->displayMode = pmc->mode;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <MCD_OnProfileUpdate>:

void MCD_OnProfileUpdate(Node_DriveProfile_t *profile)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
	/*Reset the home and pp*/
	HOME_setProfile(profile->home_offset, 17, profile->home_speed, 4*profile->home_speed);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	4618      	mov	r0, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	2111      	movs	r1, #17
 8008766:	f7ff f94f 	bl	8007a08 <HOME_setProfile>
	MT_setProfile(profile);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f001 fe74 	bl	800a458 <MT_setProfile>
}
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <MCD_handleModeAction>:

void MCD_handleModeAction(MotionCtrlDef_t* pmc)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
	if (pmc->displayMode == DS402_OperMode_Homing){
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008786:	2b06      	cmp	r3, #6
 8008788:	d105      	bne.n	8008796 <MCD_handleModeAction+0x1e>
		HOME_exec(pmc->controlWord);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff f9a4 	bl	8007adc <HOME_exec>
		/*Bit 12 Set-point acknowledge */

		/*Bit 13 Following error  */
		PP_exec(pmc->controlWord);
	}
}
 8008794:	e009      	b.n	80087aa <MCD_handleModeAction+0x32>
	}else if (pmc->displayMode == DS402_OperMode_ProfilePosition){
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800879c:	2b01      	cmp	r3, #1
 800879e:	d104      	bne.n	80087aa <MCD_handleModeAction+0x32>
		PP_exec(pmc->controlWord);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe ff17 	bl	80075d8 <PP_exec>
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <MCD_changeStatus>:

void MCD_changeStatus(MotionCtrlDef_t* pmc, DS402_Status_t status)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70fb      	strb	r3, [r7, #3]
	pmc->statusWord = DS402_buildStatusWordByStatus(pmc->statusWord, status);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	885b      	ldrh	r3, [r3, #2]
 80087c2:	78fa      	ldrb	r2, [r7, #3]
 80087c4:	4611      	mov	r1, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe ff76 	bl	80076b8 <DS402_buildStatusWordByStatus>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	805a      	strh	r2, [r3, #2]
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <MCD_OnControlWordUpdate>:

void MCD_OnControlWordUpdate(MotionCtrlDef_t* pmc)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
	DS402_Status_t curStatus = DS402_getStatus(pmc->statusWord);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	885b      	ldrh	r3, [r3, #2]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff f805 	bl	80077f8 <DS402_getStatus>
 80087ee:	4603      	mov	r3, r0
 80087f0:	73fb      	strb	r3, [r7, #15]

	DS402_Status_t newStatus = DS402_getNewStatusByControlWord(curStatus, pmc->controlWord);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	881a      	ldrh	r2, [r3, #0]
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff f83b 	bl	8007876 <DS402_getNewStatusByControlWord>
 8008800:	4603      	mov	r3, r0
 8008802:	73bb      	strb	r3, [r7, #14]
	if (newStatus != curStatus) {
 8008804:	7bba      	ldrb	r2, [r7, #14]
 8008806:	7bfb      	ldrb	r3, [r7, #15]
 8008808:	429a      	cmp	r2, r3
 800880a:	d004      	beq.n	8008816 <MCD_OnControlWordUpdate+0x3a>
		/*Change current status*/
		MCD_changeStatus(pmc, newStatus);
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff ffce 	bl	80087b2 <MCD_changeStatus>
	}

	if (newStatus == DS402_Status_OperationEnable) {
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	2b05      	cmp	r3, #5
 800881a:	d10d      	bne.n	8008838 <MCD_OnControlWordUpdate+0x5c>

		if (pmc->mode != pmc->displayMode) {
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008828:	429a      	cmp	r2, r3
 800882a:	d002      	beq.n	8008832 <MCD_OnControlWordUpdate+0x56>
			/*Change current mode*/
			MCD_changeMode(pmc);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff ff6d 	bl	800870c <MCD_changeMode>
		}

		MCD_handleModeAction(pmc);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7ff ffa0 	bl	8008778 <MCD_handleModeAction>
	}
}
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <MCD_OnCommandSerialNumberUpdate>:

void MCD_OnCommandSerialNumberUpdate()
{
 8008840:	b480      	push	{r7}
 8008842:	af00      	add	r7, sp, #0
	//int32_t commandSerialNumber = g_MotorDriverData.commandSerialNumber;
	//TPB_commandSerialNumberUpdate(commandSerialNumber);
}
 8008844:	bf00      	nop
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <MCD_OnTargetUpdate>:

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"

void MCD_OnTargetUpdate()
{
 800884e:	b480      	push	{r7}
 8008850:	af00      	add	r7, sp, #0
	//printf("Received the target pos: %ld\n", g_MotionCtrl.targetPos);
	//float ftarget = *(float*)&g_MotorDriverData.targetPos;
	//TPB_positionUpdate(ftarget);
}
 8008852:	bf00      	nop
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <MCD_OnVelocityUpdate>:

void MCD_OnVelocityUpdate()
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
	//float fvelocity = *(float*)&g_MotorDriverData.profileVel;
	//TPB_velocityUpdate(fvelocity);
}
 8008860:	bf00      	nop
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <MCD_OnAccelerationUpdate>:

void MCD_OnAccelerationUpdate()
{
 800886a:	b480      	push	{r7}
 800886c:	af00      	add	r7, sp, #0
	//float facceleration = *(float*)&g_MotorDriverData.acce;
	//TPB_accelerationUpdate(facceleration);
}
 800886e:	bf00      	nop
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <NmtState2Str>:
Node_DriveProfile_t g_NodeDriveProfile;
extern MotionCtrlDef_t g_MotionCtrl;

/* return string description of NMT state. */
static char *NmtState2Str(CO_NMT_internalState_t state)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 8008882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008886:	2b7f      	cmp	r3, #127	; 0x7f
 8008888:	d00c      	beq.n	80088a4 <NmtState2Str+0x2c>
 800888a:	2b7f      	cmp	r3, #127	; 0x7f
 800888c:	dc10      	bgt.n	80088b0 <NmtState2Str+0x38>
 800888e:	2b05      	cmp	r3, #5
 8008890:	d00a      	beq.n	80088a8 <NmtState2Str+0x30>
 8008892:	2b05      	cmp	r3, #5
 8008894:	dc0c      	bgt.n	80088b0 <NmtState2Str+0x38>
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <NmtState2Str+0x28>
 800889a:	2b04      	cmp	r3, #4
 800889c:	d006      	beq.n	80088ac <NmtState2Str+0x34>
 800889e:	e007      	b.n	80088b0 <NmtState2Str+0x38>
        case CO_NMT_INITIALIZING:    return "initializing";
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <NmtState2Str+0x48>)
 80088a2:	e006      	b.n	80088b2 <NmtState2Str+0x3a>
        case CO_NMT_PRE_OPERATIONAL: return "pre-operational";
 80088a4:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <NmtState2Str+0x4c>)
 80088a6:	e004      	b.n	80088b2 <NmtState2Str+0x3a>
        case CO_NMT_OPERATIONAL:     return "operational";
 80088a8:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <NmtState2Str+0x50>)
 80088aa:	e002      	b.n	80088b2 <NmtState2Str+0x3a>
        case CO_NMT_STOPPED:         return "stopped";
 80088ac:	4b07      	ldr	r3, [pc, #28]	; (80088cc <NmtState2Str+0x54>)
 80088ae:	e000      	b.n	80088b2 <NmtState2Str+0x3a>
        default:                     return "unknown";
 80088b0:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <NmtState2Str+0x58>)
    }
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	0801824c 	.word	0x0801824c
 80088c4:	0801825c 	.word	0x0801825c
 80088c8:	0801826c 	.word	0x0801826c
 80088cc:	08018278 	.word	0x08018278
 80088d0:	08018280 	.word	0x08018280

080088d4 <NODE_NMTCallbackPre>:

void NODE_NMTCallbackPre(void* obj)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
	/*called by NMT received isr*/
	CO_NMT_StateChangingSignal = 1;
 80088dc:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <NODE_NMTCallbackPre+0x1c>)
 80088de:	2201      	movs	r2, #1
 80088e0:	701a      	strb	r2, [r3, #0]
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	20000af1 	.word	0x20000af1

080088f4 <NODE_NMTCallback>:

void NODE_NMTCallback(CO_NMT_internalState_t state)
{
 80088f4:	b590      	push	{r4, r7, lr}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	71fb      	strb	r3, [r7, #7]
	printf("Node NM state(%d): %s\n", state, NmtState2Str(state));
 80088fe:	f997 4007 	ldrsb.w	r4, [r7, #7]
 8008902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff ffb6 	bl	8008878 <NmtState2Str>
 800890c:	4603      	mov	r3, r0
 800890e:	461a      	mov	r2, r3
 8008910:	4621      	mov	r1, r4
 8008912:	4809      	ldr	r0, [pc, #36]	; (8008938 <NODE_NMTCallback+0x44>)
 8008914:	f00e fbe0 	bl	80170d8 <iprintf>
	if (state == CO_NMT_OPERATIONAL){
 8008918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800891c:	2b05      	cmp	r3, #5
 800891e:	d107      	bne.n	8008930 <NODE_NMTCallback+0x3c>
		/*Reset motion*/
		MT_Reset();
 8008920:	f001 fd64 	bl	800a3ec <MT_Reset>

		/*Reset motion controller*/
		MCD_reset(&g_MotionCtrl);
 8008924:	4805      	ldr	r0, [pc, #20]	; (800893c <NODE_NMTCallback+0x48>)
 8008926:	f7ff fe95 	bl	8008654 <MCD_reset>

		/*Push to switch on disabled the mc driver*/
		MCD_setSwtichOnDisabled(&g_MotionCtrl);
 800892a:	4804      	ldr	r0, [pc, #16]	; (800893c <NODE_NMTCallback+0x48>)
 800892c:	f7ff feb6 	bl	800869c <MCD_setSwtichOnDisabled>
	}
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	bd90      	pop	{r4, r7, pc}
 8008938:	08018288 	.word	0x08018288
 800893c:	20000a44 	.word	0x20000a44

08008940 <NODE_OnMasterHBTimeoutCallback>:

void NODE_OnMasterHBTimeoutCallback(uint8_t nodeId, uint8_t idx, void *object)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	603a      	str	r2, [r7, #0]
 800894a:	71fb      	strb	r3, [r7, #7]
 800894c:	460b      	mov	r3, r1
 800894e:	71bb      	strb	r3, [r7, #6]
	printf("Lost communication with master.\n");
 8008950:	4808      	ldr	r0, [pc, #32]	; (8008974 <NODE_OnMasterHBTimeoutCallback+0x34>)
 8008952:	f00e fc47 	bl	80171e4 <puts>
	MT_Reset();
 8008956:	f001 fd49 	bl	800a3ec <MT_Reset>

	MCD_reset(&g_MotionCtrl);
 800895a:	4807      	ldr	r0, [pc, #28]	; (8008978 <NODE_OnMasterHBTimeoutCallback+0x38>)
 800895c:	f7ff fe7a 	bl	8008654 <MCD_reset>

	CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8008960:	4b06      	ldr	r3, [pc, #24]	; (800897c <NODE_OnMasterHBTimeoutCallback+0x3c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	227f      	movs	r2, #127	; 0x7f
 8008968:	731a      	strb	r2, [r3, #12]
}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	080182a0 	.word	0x080182a0
 8008978:	20000a44 	.word	0x20000a44
 800897c:	20000adc 	.word	0x20000adc

08008980 <NODE_OnMasterHBStartedCallback>:

void NODE_OnMasterHBStartedCallback(uint8_t nodeId, uint8_t idx, void *object)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	603a      	str	r2, [r7, #0]
 800898a:	71fb      	strb	r3, [r7, #7]
 800898c:	460b      	mov	r3, r1
 800898e:	71bb      	strb	r3, [r7, #6]
	printf("Master heartbeat started.\n");
 8008990:	4803      	ldr	r0, [pc, #12]	; (80089a0 <NODE_OnMasterHBStartedCallback+0x20>)
 8008992:	f00e fc27 	bl	80171e4 <puts>
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	080182c0 	.word	0x080182c0

080089a4 <NODE_OnProfileUpdate>:

CO_SDO_abortCode_t NODE_OnProfileUpdate(CO_ODF_arg_t *ODF_arg)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]

	if (ODF_arg != NULL && ODF_arg->index == 0xC120 && ODF_arg->subIndex == 4) {
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d03d      	beq.n	8008a32 <NODE_OnProfileUpdate+0x8e>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	8a9b      	ldrh	r3, [r3, #20]
 80089ba:	f24c 1220 	movw	r2, #49440	; 0xc120
 80089be:	4293      	cmp	r3, r2
 80089c0:	d137      	bne.n	8008a32 <NODE_OnProfileUpdate+0x8e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	7d9b      	ldrb	r3, [r3, #22]
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d133      	bne.n	8008a32 <NODE_OnProfileUpdate+0x8e>
		// ds402 profile
		// Update the version
		CO_OD_ROM.ds402Profile.version = (uint32_t)(*(uint32_t*)&ODF_arg->data[0]);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1a      	ldr	r2, [pc, #104]	; (8008a3c <NODE_OnProfileUpdate+0x98>)
 80089d2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c

		printf("Node profile update(%08lx)\n", CO_OD_ROM.ds402Profile.version);
 80089d6:	4b19      	ldr	r3, [pc, #100]	; (8008a3c <NODE_OnProfileUpdate+0x98>)
 80089d8:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80089dc:	4619      	mov	r1, r3
 80089de:	4818      	ldr	r0, [pc, #96]	; (8008a40 <NODE_OnProfileUpdate+0x9c>)
 80089e0:	f00e fb7a 	bl	80170d8 <iprintf>

		// Update the driver profile
		memcpy(&g_NodeDriveProfile, (unsigned char*)&ODF_arg->data[4], sizeof(Node_DriveProfile_t));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	3304      	adds	r3, #4
 80089ea:	2220      	movs	r2, #32
 80089ec:	4619      	mov	r1, r3
 80089ee:	4815      	ldr	r0, [pc, #84]	; (8008a44 <NODE_OnProfileUpdate+0xa0>)
 80089f0:	f00e fa66 	bl	8016ec0 <memcpy>

		g_MotionCtrl.profileVel = g_NodeDriveProfile.speed;
 80089f4:	4b13      	ldr	r3, [pc, #76]	; (8008a44 <NODE_OnProfileUpdate+0xa0>)
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	4a13      	ldr	r2, [pc, #76]	; (8008a48 <NODE_OnProfileUpdate+0xa4>)
 80089fa:	6153      	str	r3, [r2, #20]
		g_MotionCtrl.acce = g_NodeDriveProfile.acce_ratio * g_NodeDriveProfile.speed;
 80089fc:	4b11      	ldr	r3, [pc, #68]	; (8008a44 <NODE_OnProfileUpdate+0xa0>)
 80089fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8008a02:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <NODE_OnProfileUpdate+0xa0>)
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a16:	ee17 2a90 	vmov	r2, s15
 8008a1a:	4b0b      	ldr	r3, [pc, #44]	; (8008a48 <NODE_OnProfileUpdate+0xa4>)
 8008a1c:	619a      	str	r2, [r3, #24]
		g_MotionCtrl.dece = g_MotionCtrl.acce;
 8008a1e:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <NODE_OnProfileUpdate+0xa4>)
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	4a09      	ldr	r2, [pc, #36]	; (8008a48 <NODE_OnProfileUpdate+0xa4>)
 8008a24:	61d3      	str	r3, [r2, #28]

		g_NodeDriveProfile.updatePositionDuration = 50; // 50ms report actual position
 8008a26:	4b07      	ldr	r3, [pc, #28]	; (8008a44 <NODE_OnProfileUpdate+0xa0>)
 8008a28:	2232      	movs	r2, #50	; 0x32
 8008a2a:	839a      	strh	r2, [r3, #28]
		MCD_OnProfileUpdate(&g_NodeDriveProfile);
 8008a2c:	4805      	ldr	r0, [pc, #20]	; (8008a44 <NODE_OnProfileUpdate+0xa0>)
 8008a2e:	f7ff fe8d 	bl	800874c <MCD_OnProfileUpdate>
	}

	return abort;
 8008a32:	68fb      	ldr	r3, [r7, #12]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	200001c4 	.word	0x200001c4
 8008a40:	080182dc 	.word	0x080182dc
 8008a44:	20000af4 	.word	0x20000af4
 8008a48:	20000a44 	.word	0x20000a44

08008a4c <NODE_OnControlWordUpdate>:

CO_SDO_abortCode_t NODE_OnControlWordUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]
	MCD_OnControlWordUpdate(&g_MotionCtrl);
 8008a58:	4803      	ldr	r0, [pc, #12]	; (8008a68 <NODE_OnControlWordUpdate+0x1c>)
 8008a5a:	f7ff febf 	bl	80087dc <MCD_OnControlWordUpdate>
	return abort;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	20000a44 	.word	0x20000a44

08008a6c <NODE_OnTargetUpdate>:

CO_SDO_abortCode_t NODE_OnTargetUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
	MCD_OnTargetUpdate();
 8008a78:	f7ff fee9 	bl	800884e <MCD_OnTargetUpdate>
	return abort;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <NODE_OnCommandSerialNumberUpdate>:
	MCD_changeMode(&g_MotionCtrl);
	return abort;
}

CO_SDO_abortCode_t NODE_OnCommandSerialNumberUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
	MCD_OnCommandSerialNumberUpdate();
 8008a92:	f7ff fed5 	bl	8008840 <MCD_OnCommandSerialNumberUpdate>
	return abort;
 8008a96:	68fb      	ldr	r3, [r7, #12]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <NODE_OnVelocityUpdate>:

CO_SDO_abortCode_t NODE_OnVelocityUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]
	MCD_OnVelocityUpdate();
 8008aac:	f7ff fed6 	bl	800885c <MCD_OnVelocityUpdate>
	return abort;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <NODE_OnAccelerationUpdate>:

CO_SDO_abortCode_t NODE_OnAccelerationUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	60fb      	str	r3, [r7, #12]
	MCD_OnAccelerationUpdate();
 8008ac6:	f7ff fed0 	bl	800886a <MCD_OnAccelerationUpdate>
	return abort;
 8008aca:	68fb      	ldr	r3, [r7, #12]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <NODE_new>:

uint8_t NODE_new()
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
	uint32_t COMem;
	CO_ReturnError_t ret = CO_new(&COMem);
 8008ada:	463b      	mov	r3, r7
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff f8ad 	bl	8007c3c <CO_new>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	71fb      	strb	r3, [r7, #7]
	if (ret) {
 8008ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d008      	beq.n	8008b00 <NODE_new+0x2c>
		LOG_Print(2, "CO new failed: %ld\n", ret);
 8008aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008af2:	461a      	mov	r2, r3
 8008af4:	4905      	ldr	r1, [pc, #20]	; (8008b0c <NODE_new+0x38>)
 8008af6:	2002      	movs	r0, #2
 8008af8:	f000 fe04 	bl	8009704 <LOG_Print>
		return ret;
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	e000      	b.n	8008b02 <NODE_new+0x2e>
	}

	return CO_ERROR_NO;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	080182f8 	.word	0x080182f8

08008b10 <NODE_Init>:

uint8_t NODE_Init(void* canDevice, uint8_t nodeId)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
	CO_ReturnError_t ret;

    ret = CO_CANinit(canDevice, 250);
 8008b1c:	21fa      	movs	r1, #250	; 0xfa
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7ff fa00 	bl	8007f24 <CO_CANinit>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8008b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d008      	beq.n	8008b42 <NODE_Init+0x32>
		LOG_Print(2, "CO CAN module init failed: %ld\n", ret);
 8008b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b34:	461a      	mov	r2, r3
 8008b36:	497d      	ldr	r1, [pc, #500]	; (8008d2c <NODE_Init+0x21c>)
 8008b38:	2002      	movs	r0, #2
 8008b3a:	f000 fde3 	bl	8009704 <LOG_Print>
		return ret;
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	e0ef      	b.n	8008d22 <NODE_Init+0x212>
	}

	ret = CO_CANopenInit(nodeId);
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff fa1b 	bl	8007f80 <CO_CANopenInit>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8008b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d008      	beq.n	8008b68 <NODE_Init+0x58>
		LOG_Print(2, "CO CAN node init failed: %ld\n", ret);
 8008b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	4974      	ldr	r1, [pc, #464]	; (8008d30 <NODE_Init+0x220>)
 8008b5e:	2002      	movs	r0, #2
 8008b60:	f000 fdd0 	bl	8009704 <LOG_Print>
		return ret;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	e0dc      	b.n	8008d22 <NODE_Init+0x212>
	}

	/*Motion control drive intialize*/
	MCD_Init();
 8008b68:	f7ff fdaa 	bl	80086c0 <MCD_Init>

	/* CO node management*/
	/* Implement a simple node management*/
	CO_NMT_initCallbackChanged(CO->NMT, NODE_NMTCallback);
 8008b6c:	4b71      	ldr	r3, [pc, #452]	; (8008d34 <NODE_Init+0x224>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	4971      	ldr	r1, [pc, #452]	; (8008d38 <NODE_Init+0x228>)
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fa fc06 	bl	8003386 <CO_NMT_initCallbackChanged>
	CO_NMT_initCallbackPre(CO->NMT, NULL, NODE_NMTCallbackPre);
 8008b7a:	4b6e      	ldr	r3, [pc, #440]	; (8008d34 <NODE_Init+0x224>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	4a6e      	ldr	r2, [pc, #440]	; (8008d3c <NODE_Init+0x22c>)
 8008b82:	2100      	movs	r1, #0
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fa fbe9 	bl	800335c <CO_NMT_initCallbackPre>

	/* Integrate master heartbeat timeout callback*/
	CO_HBconsumer_initCallbackTimeout(CO->HBcons, 0, NULL, NODE_OnMasterHBTimeoutCallback);
 8008b8a:	4b6a      	ldr	r3, [pc, #424]	; (8008d34 <NODE_Init+0x224>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008b90:	4b6b      	ldr	r3, [pc, #428]	; (8008d40 <NODE_Init+0x230>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	2100      	movs	r1, #0
 8008b96:	f7fa f9b6 	bl	8002f06 <CO_HBconsumer_initCallbackTimeout>

	/* Integrate master heartbeat start callback*/
	CO_HBconsumer_initCallbackHeartbeatStarted(CO->HBcons, 0, NULL, NODE_OnMasterHBStartedCallback);
 8008b9a:	4b66      	ldr	r3, [pc, #408]	; (8008d34 <NODE_Init+0x224>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008ba0:	4b68      	ldr	r3, [pc, #416]	; (8008d44 <NODE_Init+0x234>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	f7fa f989 	bl	8002ebc <CO_HBconsumer_initCallbackHeartbeatStarted>

	/* Register 0xC120 od entry download callback*/
	uint16_t entryNo = CO_OD_find(CO->SDO[0], 0xC120);
 8008baa:	4b62      	ldr	r3, [pc, #392]	; (8008d34 <NODE_Init+0x224>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f24c 1120 	movw	r1, #49440	; 0xc120
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fc fb3d 	bl	8005234 <CO_OD_find>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF){
 8008bbe:	89bb      	ldrh	r3, [r7, #12]
 8008bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d00c      	beq.n	8008be2 <NODE_Init+0xd2>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnProfileUpdate;
 8008bc8:	4b5a      	ldr	r3, [pc, #360]	; (8008d34 <NODE_Init+0x224>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008bd2:	89ba      	ldrh	r2, [r7, #12]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	4a5a      	ldr	r2, [pc, #360]	; (8008d48 <NODE_Init+0x238>)
 8008be0:	601a      	str	r2, [r3, #0]
	}

	/* Register 0x6040 od entry control word update callback*/
	entryNo = CO_OD_find(CO->SDO[0], 0x6040);
 8008be2:	4b54      	ldr	r3, [pc, #336]	; (8008d34 <NODE_Init+0x224>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f246 0140 	movw	r1, #24640	; 0x6040
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fc fb21 	bl	8005234 <CO_OD_find>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008bf6:	89bb      	ldrh	r3, [r7, #12]
 8008bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d00c      	beq.n	8008c1a <NODE_Init+0x10a>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnControlWordUpdate;
 8008c00:	4b4c      	ldr	r3, [pc, #304]	; (8008d34 <NODE_Init+0x224>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008c0a:	89ba      	ldrh	r2, [r7, #12]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	4a4d      	ldr	r2, [pc, #308]	; (8008d4c <NODE_Init+0x23c>)
 8008c18:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0x607A);
 8008c1a:	4b46      	ldr	r3, [pc, #280]	; (8008d34 <NODE_Init+0x224>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f246 017a 	movw	r1, #24698	; 0x607a
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fc fb05 	bl	8005234 <CO_OD_find>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008c2e:	89bb      	ldrh	r3, [r7, #12]
 8008c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00c      	beq.n	8008c52 <NODE_Init+0x142>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnTargetUpdate;
 8008c38:	4b3e      	ldr	r3, [pc, #248]	; (8008d34 <NODE_Init+0x224>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008c42:	89ba      	ldrh	r2, [r7, #12]
 8008c44:	4613      	mov	r3, r2
 8008c46:	005b      	lsls	r3, r3, #1
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	4a40      	ldr	r2, [pc, #256]	; (8008d50 <NODE_Init+0x240>)
 8008c50:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0x6081);
 8008c52:	4b38      	ldr	r3, [pc, #224]	; (8008d34 <NODE_Init+0x224>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f246 0181 	movw	r1, #24705	; 0x6081
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fc fae9 	bl	8005234 <CO_OD_find>
 8008c62:	4603      	mov	r3, r0
 8008c64:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008c66:	89bb      	ldrh	r3, [r7, #12]
 8008c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d00c      	beq.n	8008c8a <NODE_Init+0x17a>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnVelocityUpdate;
 8008c70:	4b30      	ldr	r3, [pc, #192]	; (8008d34 <NODE_Init+0x224>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008c7a:	89ba      	ldrh	r2, [r7, #12]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	440b      	add	r3, r1
 8008c86:	4a33      	ldr	r2, [pc, #204]	; (8008d54 <NODE_Init+0x244>)
 8008c88:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0x6083);
 8008c8a:	4b2a      	ldr	r3, [pc, #168]	; (8008d34 <NODE_Init+0x224>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f246 0183 	movw	r1, #24707	; 0x6083
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fc facd 	bl	8005234 <CO_OD_find>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008c9e:	89bb      	ldrh	r3, [r7, #12]
 8008ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d00c      	beq.n	8008cc2 <NODE_Init+0x1b2>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnAccelerationUpdate;
 8008ca8:	4b22      	ldr	r3, [pc, #136]	; (8008d34 <NODE_Init+0x224>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008cb2:	89ba      	ldrh	r2, [r7, #12]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	440b      	add	r3, r1
 8008cbe:	4a26      	ldr	r2, [pc, #152]	; (8008d58 <NODE_Init+0x248>)
 8008cc0:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0xC101);
 8008cc2:	4b1c      	ldr	r3, [pc, #112]	; (8008d34 <NODE_Init+0x224>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f24c 1101 	movw	r1, #49409	; 0xc101
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fc fab1 	bl	8005234 <CO_OD_find>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008cd6:	89bb      	ldrh	r3, [r7, #12]
 8008cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d00c      	beq.n	8008cfa <NODE_Init+0x1ea>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnCommandSerialNumberUpdate;
 8008ce0:	4b14      	ldr	r3, [pc, #80]	; (8008d34 <NODE_Init+0x224>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008cea:	89ba      	ldrh	r2, [r7, #12]
 8008cec:	4613      	mov	r3, r2
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	440b      	add	r3, r1
 8008cf6:	4a19      	ldr	r2, [pc, #100]	; (8008d5c <NODE_Init+0x24c>)
 8008cf8:	601a      	str	r2, [r3, #0]
	}
	/* CO node start the CAN driver*/
	CO_CANsetNormalMode(CO->CANmodule[0]);
 8008cfa:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <NODE_Init+0x224>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 f867 	bl	8008dd4 <CO_CANsetNormalMode>
	if (!CO->CANmodule[0]->CANnormal){
 8008d06:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <NODE_Init+0x224>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	7c9b      	ldrb	r3, [r3, #18]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d105      	bne.n	8008d20 <NODE_Init+0x210>
		LOG_Print(2, "CAN module initialize and start failed.\n");
 8008d14:	4912      	ldr	r1, [pc, #72]	; (8008d60 <NODE_Init+0x250>)
 8008d16:	2002      	movs	r0, #2
 8008d18:	f000 fcf4 	bl	8009704 <LOG_Print>
		return CO_ERROR_SYSCALL;
 8008d1c:	23ef      	movs	r3, #239	; 0xef
 8008d1e:	e000      	b.n	8008d22 <NODE_Init+0x212>
	}

	return CO_ERROR_NO;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	0801830c 	.word	0x0801830c
 8008d30:	0801832c 	.word	0x0801832c
 8008d34:	20000adc 	.word	0x20000adc
 8008d38:	080088f5 	.word	0x080088f5
 8008d3c:	080088d5 	.word	0x080088d5
 8008d40:	08008941 	.word	0x08008941
 8008d44:	08008981 	.word	0x08008981
 8008d48:	080089a5 	.word	0x080089a5
 8008d4c:	08008a4d 	.word	0x08008a4d
 8008d50:	08008a6d 	.word	0x08008a6d
 8008d54:	08008aa1 	.word	0x08008aa1
 8008d58:	08008abb 	.word	0x08008abb
 8008d5c:	08008a87 	.word	0x08008a87
 8008d60:	0801834c 	.word	0x0801834c

08008d64 <NODE_process>:

void NODE_process(uint16_t timeDifference_us, bool_t syncWas)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	460a      	mov	r2, r1
 8008d6e:	80fb      	strh	r3, [r7, #6]
 8008d70:	4613      	mov	r3, r2
 8008d72:	717b      	strb	r3, [r7, #5]
	if (CO_NMT_StateChangingSignal){
 8008d74:	4b10      	ldr	r3, [pc, #64]	; (8008db8 <NODE_process+0x54>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <NODE_process+0x2e>
		CO_NMT_StateChangingSignal = 0;
 8008d7c:	4b0e      	ldr	r3, [pc, #56]	; (8008db8 <NODE_process+0x54>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	701a      	strb	r2, [r3, #0]
		NODE_NMTCallback(CO->NMT->operatingState);
 8008d82:	4b0e      	ldr	r3, [pc, #56]	; (8008dbc <NODE_process+0x58>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7ff fdb1 	bl	80088f4 <NODE_NMTCallback>
	}

	CO_process_RPDO(CO, true);
 8008d92:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <NODE_process+0x58>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2101      	movs	r1, #1
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7ff fbf3 	bl	8008584 <CO_process_RPDO>

	/*Process TPDO*/
	uint32_t next_time;
	CO_process_TPDO(CO, syncWas, timeDifference_us, &next_time);
 8008d9e:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <NODE_process+0x58>)
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	88fa      	ldrh	r2, [r7, #6]
 8008da4:	f107 030c 	add.w	r3, r7, #12
 8008da8:	7979      	ldrb	r1, [r7, #5]
 8008daa:	f7ff fc0f 	bl	80085cc <CO_process_TPDO>
}
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000af1 	.word	0x20000af1
 8008dbc:	20000adc 	.word	0x20000adc

08008dc0 <CO_CANsetConfigurationMode>:
#include "CO_OD.h"

static CAN_TxHeaderTypeDef TxHeader;

/******************************************************************************/
void CO_CANsetConfigurationMode(void *CANptr){
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <CO_CANsetNormalMode>:


/******************************************************************************/
void CO_CANsetNormalMode(CO_CANmodule_t *CANmodule){
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */

  if (HAL_CAN_ActivateNotification(CANmodule->CANptr,
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2113      	movs	r1, #19
 8008de2:	4618      	mov	r0, r3
 8008de4:	f006 f8b9 	bl	800ef5a <HAL_CAN_ActivateNotification>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <CO_CANsetNormalMode+0x20>
		  CAN_IT_RX_FIFO0_MSG_PENDING |
		  CAN_IT_RX_FIFO1_MSG_PENDING |
		  CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
    CANmodule->CANnormal = false;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	749a      	strb	r2, [r3, #18]
  }

  if (HAL_CAN_Start(CANmodule->CANptr) != HAL_OK){
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f005 fdd7 	bl	800e9ac <HAL_CAN_Start>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <CO_CANsetNormalMode+0x38>
	CANmodule->CANnormal = false;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	749a      	strb	r2, [r3, #18]
  }else{
    CANmodule->CANnormal = true;
  }
}
 8008e0a:	e002      	b.n	8008e12 <CO_CANsetNormalMode+0x3e>
    CANmodule->CANnormal = true;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	749a      	strb	r2, [r3, #18]
}
 8008e12:	bf00      	nop
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <CO_CANmodule_init>:
        CO_CANrx_t              rxArray[],
        uint16_t                rxSize,
        CO_CANtx_t              txArray[],
        uint16_t                txSize,
        uint16_t                CANbitRate)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b094      	sub	sp, #80	; 0x50
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	807b      	strh	r3, [r7, #2]
    uint16_t i;

    /* verify arguments */
    if(CANmodule==NULL || rxArray==NULL || txArray==NULL){
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d005      	beq.n	8008e3c <CO_CANmodule_init+0x20>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <CO_CANmodule_init+0x20>
 8008e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8008e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e40:	e145      	b.n	80090ce <CO_CANmodule_init+0x2b2>
    }

    /* Configure object variables */
    CANmodule->CANptr = CANptr;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	601a      	str	r2, [r3, #0]
    CANmodule->rxArray = rxArray;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	887a      	ldrh	r2, [r7, #2]
 8008e52:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e58:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8008e60:	821a      	strh	r2, [r3, #16]
    CANmodule->CANnormal = false;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	749a      	strb	r2, [r3, #18]

    CANmodule->useCANrxFilters = false; /* Use standard id, none id filter */
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	74da      	strb	r2, [r3, #19]

    CANmodule->bufferInhibitFlag = false;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	751a      	strb	r2, [r3, #20]
    CANmodule->firstCANtxMessage = true;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2201      	movs	r2, #1
 8008e78:	755a      	strb	r2, [r3, #21]
    CANmodule->CANtxCount = 0U;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	82da      	strh	r2, [r3, #22]
    CANmodule->errOld = 0U;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	619a      	str	r2, [r3, #24]
    CANmodule->em = NULL;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	61da      	str	r2, [r3, #28]

    for(i=0U; i<rxSize; i++){
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008e92:	e031      	b.n	8008ef8 <CO_CANmodule_init+0xdc>
        rxArray[i].ident = 0U;
 8008e94:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008e98:	4613      	mov	r3, r2
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	4413      	add	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8008eaa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008eae:	4613      	mov	r3, r2
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ec0:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8008ec2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	461a      	mov	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8008ed8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008edc:	4613      	mov	r3, r2
 8008ede:	005b      	lsls	r3, r3, #1
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4413      	add	r3, r2
 8008eea:	2200      	movs	r2, #0
 8008eec:	609a      	str	r2, [r3, #8]
    for(i=0U; i<rxSize; i++){
 8008eee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008ef8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008efc:	887b      	ldrh	r3, [r7, #2]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d3c8      	bcc.n	8008e94 <CO_CANmodule_init+0x78>
    }

    for(i=0U; i<txSize; i++){
 8008f02:	2300      	movs	r3, #0
 8008f04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008f08:	e00b      	b.n	8008f22 <CO_CANmodule_init+0x106>
        txArray[i].bufferFull = false;
 8008f0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008f0e:	011b      	lsls	r3, r3, #4
 8008f10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f12:	4413      	add	r3, r2
 8008f14:	2200      	movs	r2, #0
 8008f16:	735a      	strb	r2, [r3, #13]
    for(i=0U; i<txSize; i++){
 8008f18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008f22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008f26:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d3ed      	bcc.n	8008f0a <CO_CANmodule_init+0xee>
    }

    /*STM32 CAN initialize*/
    CO_CANmodule_disable(CANmodule);
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 f8d4 	bl	80090dc <CO_CANmodule_disable>
    HAL_CAN_MspDeInit(CANmodule->CANptr);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7f7 ffb7 	bl	8000eac <HAL_CAN_MspDeInit>

    /*ReInitialize msp gpio and nvic*/
    HAL_CAN_MspInit(CANmodule->CANptr);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7f7 ff4a 	bl	8000ddc <HAL_CAN_MspInit>

    /* Time rate calc with http://www.bittiming.can-wiki.info/
     * The base MCU F405, CAN system clock: 42M
     * */
    uint32_t Prescaler;
    uint32_t seg1 = CAN_BS1_10TQ;
 8008f48:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8008f4c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t seg2 = CAN_BS2_1TQ;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	643b      	str	r3, [r7, #64]	; 0x40

    switch(CANbitRate){
 8008f52:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8008f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f5a:	d01d      	beq.n	8008f98 <CO_CANmodule_init+0x17c>
 8008f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f60:	dc5f      	bgt.n	8009022 <CO_CANmodule_init+0x206>
 8008f62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008f66:	d020      	beq.n	8008faa <CO_CANmodule_init+0x18e>
 8008f68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008f6c:	dc59      	bgt.n	8009022 <CO_CANmodule_init+0x206>
 8008f6e:	2bfa      	cmp	r3, #250	; 0xfa
 8008f70:	d024      	beq.n	8008fbc <CO_CANmodule_init+0x1a0>
 8008f72:	2bfa      	cmp	r3, #250	; 0xfa
 8008f74:	dc55      	bgt.n	8009022 <CO_CANmodule_init+0x206>
 8008f76:	2b7d      	cmp	r3, #125	; 0x7d
 8008f78:	d029      	beq.n	8008fce <CO_CANmodule_init+0x1b2>
 8008f7a:	2b7d      	cmp	r3, #125	; 0x7d
 8008f7c:	dc51      	bgt.n	8009022 <CO_CANmodule_init+0x206>
 8008f7e:	2b64      	cmp	r3, #100	; 0x64
 8008f80:	d02e      	beq.n	8008fe0 <CO_CANmodule_init+0x1c4>
 8008f82:	2b64      	cmp	r3, #100	; 0x64
 8008f84:	dc4d      	bgt.n	8009022 <CO_CANmodule_init+0x206>
 8008f86:	2b32      	cmp	r3, #50	; 0x32
 8008f88:	d032      	beq.n	8008ff0 <CO_CANmodule_init+0x1d4>
 8008f8a:	2b32      	cmp	r3, #50	; 0x32
 8008f8c:	dc49      	bgt.n	8009022 <CO_CANmodule_init+0x206>
 8008f8e:	2b0a      	cmp	r3, #10
 8008f90:	d03e      	beq.n	8009010 <CO_CANmodule_init+0x1f4>
 8008f92:	2b14      	cmp	r3, #20
 8008f94:	d034      	beq.n	8009000 <CO_CANmodule_init+0x1e4>
 8008f96:	e044      	b.n	8009022 <CO_CANmodule_init+0x206>
    case 1000: {
    	Prescaler = 3;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_11TQ;
 8008f9c:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8008fa0:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_2TQ;
 8008fa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008fa6:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8008fa8:	e042      	b.n	8009030 <CO_CANmodule_init+0x214>
    }
    case 500:  {
    	Prescaler = 5;
 8008faa:	2305      	movs	r3, #5
 8008fac:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_13TQ;
 8008fae:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8008fb2:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_2TQ;
 8008fb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008fb8:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8008fba:	e039      	b.n	8009030 <CO_CANmodule_init+0x214>
    }
    case 250:  {
    	Prescaler = 10;
 8008fbc:	230a      	movs	r3, #10
 8008fbe:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_13TQ;
 8008fc0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8008fc4:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_2TQ;
 8008fc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008fca:	643b      	str	r3, [r7, #64]	; 0x40
    	break;   // default is 8
 8008fcc:	e030      	b.n	8009030 <CO_CANmodule_init+0x214>
    }
    case 125:  {
    	Prescaler = 20;
 8008fce:	2314      	movs	r3, #20
 8008fd0:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_13TQ;
 8008fd2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8008fd6:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_2TQ;
 8008fd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008fdc:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8008fde:	e027      	b.n	8009030 <CO_CANmodule_init+0x214>
    }
    case 100:  {
    	Prescaler = 35;
 8008fe0:	2323      	movs	r3, #35	; 0x23
 8008fe2:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 8008fe4:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8008fe8:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 8008fea:	2300      	movs	r3, #0
 8008fec:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8008fee:	e01f      	b.n	8009030 <CO_CANmodule_init+0x214>
    }
    case 50:   {
    	Prescaler = 70;
 8008ff0:	2346      	movs	r3, #70	; 0x46
 8008ff2:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 8008ff4:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8008ff8:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8008ffe:	e017      	b.n	8009030 <CO_CANmodule_init+0x214>
    }
    case 20:   {
    	Prescaler = 175;
 8009000:	23af      	movs	r3, #175	; 0xaf
 8009002:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 8009004:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8009008:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 800900a:	2300      	movs	r3, #0
 800900c:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 800900e:	e00f      	b.n	8009030 <CO_CANmodule_init+0x214>
    }
    case 10:   {
    	Prescaler = 350;
 8009010:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8009014:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 8009016:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800901a:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 800901c:	2300      	movs	r3, #0
 800901e:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8009020:	e006      	b.n	8009030 <CO_CANmodule_init+0x214>
    }
    default: {// default setting
    	Prescaler = 7;
 8009022:	2307      	movs	r3, #7
 8009024:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 8009026:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800902a:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 800902c:	2300      	movs	r3, #0
 800902e:	643b      	str	r3, [r7, #64]	; 0x40
    }
    }

    /*Target baudrate 500K, now accept 250K compatible with FDCAN*/

    CAN_HandleTypeDef* canHandle = (CAN_HandleTypeDef*)CANmodule->CANptr;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
    canHandle->Instance = CAN1;
 8009036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009038:	4a27      	ldr	r2, [pc, #156]	; (80090d8 <CO_CANmodule_init+0x2bc>)
 800903a:	601a      	str	r2, [r3, #0]
    canHandle->Init.Prescaler = Prescaler;
 800903c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009040:	605a      	str	r2, [r3, #4]
    canHandle->Init.Mode = CAN_MODE_NORMAL;
 8009042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009044:	2200      	movs	r2, #0
 8009046:	609a      	str	r2, [r3, #8]
    canHandle->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904a:	2200      	movs	r2, #0
 800904c:	60da      	str	r2, [r3, #12]
    canHandle->Init.TimeSeg1 = seg1;
 800904e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009050:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009052:	611a      	str	r2, [r3, #16]
    canHandle->Init.TimeSeg2 = seg2;
 8009054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009056:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009058:	615a      	str	r2, [r3, #20]
    canHandle->Init.TimeTriggeredMode = DISABLE;
 800905a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905c:	2200      	movs	r2, #0
 800905e:	761a      	strb	r2, [r3, #24]
    canHandle->Init.AutoBusOff = ENABLE;
 8009060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009062:	2201      	movs	r2, #1
 8009064:	765a      	strb	r2, [r3, #25]
    canHandle->Init.AutoWakeUp = ENABLE;
 8009066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009068:	2201      	movs	r2, #1
 800906a:	769a      	strb	r2, [r3, #26]
    canHandle->Init.AutoRetransmission = ENABLE;
 800906c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906e:	2201      	movs	r2, #1
 8009070:	76da      	strb	r2, [r3, #27]
    canHandle->Init.ReceiveFifoLocked = DISABLE;
 8009072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009074:	2200      	movs	r2, #0
 8009076:	771a      	strb	r2, [r3, #28]
    canHandle->Init.TransmitFifoPriority = DISABLE;
 8009078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907a:	2200      	movs	r2, #0
 800907c:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(canHandle) != HAL_OK)
 800907e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009080:	f005 fab8 	bl	800e5f4 <HAL_CAN_Init>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <CO_CANmodule_init+0x272>
    {
      Error_Handler();
 800908a:	f7f8 fac9 	bl	8001620 <Error_Handler>
    }

    CAN_FilterTypeDef filter;
    filter.FilterBank = 0;
 800908e:	2300      	movs	r3, #0
 8009090:	62bb      	str	r3, [r7, #40]	; 0x28
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8009092:	2300      	movs	r3, #0
 8009094:	627b      	str	r3, [r7, #36]	; 0x24
    filter.FilterIdHigh = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	617b      	str	r3, [r7, #20]
    filter.FilterIdLow = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	61bb      	str	r3, [r7, #24]
    filter.FilterMaskIdHigh = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	61fb      	str	r3, [r7, #28]
    filter.FilterMaskIdLow = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	623b      	str	r3, [r7, #32]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80090aa:	2301      	movs	r3, #1
 80090ac:	633b      	str	r3, [r7, #48]	; 0x30
    filter.FilterActivation = CAN_FILTER_ENABLE;
 80090ae:	2301      	movs	r3, #1
 80090b0:	637b      	str	r3, [r7, #52]	; 0x34
    filter.SlaveStartFilterBank = 14;
 80090b2:	230e      	movs	r3, #14
 80090b4:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(canHandle, &filter) != HAL_OK) {
 80090b6:	f107 0314 	add.w	r3, r7, #20
 80090ba:	4619      	mov	r1, r3
 80090bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090be:	f005 fb95 	bl	800e7ec <HAL_CAN_ConfigFilter>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <CO_CANmodule_init+0x2b0>
    	Error_Handler();
 80090c8:	f7f8 faaa 	bl	8001620 <Error_Handler>
    }

    return CO_ERROR_NO;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3750      	adds	r7, #80	; 0x50
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	40006400 	.word	0x40006400

080090dc <CO_CANmodule_disable>:


/******************************************************************************/
void CO_CANmodule_disable(CO_CANmodule_t *CANmodule){
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
    /* turn off the module */
  CANmodule->CANnormal = false;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	749a      	strb	r2, [r3, #18]
  HAL_CAN_DeactivateNotification(CANmodule->CANptr,
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2113      	movs	r1, #19
 80090f0:	4618      	mov	r0, r3
 80090f2:	f005 ff58 	bl	800efa6 <HAL_CAN_DeactivateNotification>
		  CAN_IT_RX_FIFO0_MSG_PENDING |
		  		  CAN_IT_RX_FIFO1_MSG_PENDING |
		  		  CAN_IT_TX_MAILBOX_EMPTY);
  HAL_CAN_Stop(CANmodule->CANptr);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f005 fc9a 	bl	800ea34 <HAL_CAN_Stop>
}
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <CO_CANrxBufferInit>:
        uint16_t                ident,
        uint16_t                mask,
        bool_t                  rtr,
        void                   *object,
        void                  (*CANrx_callback)(void *object, void *message))
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	4608      	mov	r0, r1
 8009112:	4611      	mov	r1, r2
 8009114:	461a      	mov	r2, r3
 8009116:	4603      	mov	r3, r0
 8009118:	817b      	strh	r3, [r7, #10]
 800911a:	460b      	mov	r3, r1
 800911c:	813b      	strh	r3, [r7, #8]
 800911e:	4613      	mov	r3, r2
 8009120:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8009122:	2300      	movs	r3, #0
 8009124:	75fb      	strb	r3, [r7, #23]

    if((CANmodule!=NULL) && (object!=NULL) && (CANrx_callback!=NULL) && (index < CANmodule->rxSize)){
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d039      	beq.n	80091a0 <CO_CANrxBufferInit+0x98>
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	2b00      	cmp	r3, #0
 8009130:	d036      	beq.n	80091a0 <CO_CANrxBufferInit+0x98>
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	2b00      	cmp	r3, #0
 8009136:	d033      	beq.n	80091a0 <CO_CANrxBufferInit+0x98>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	891b      	ldrh	r3, [r3, #8]
 800913c:	897a      	ldrh	r2, [r7, #10]
 800913e:	429a      	cmp	r2, r3
 8009140:	d22e      	bcs.n	80091a0 <CO_CANrxBufferInit+0x98>
        /* buffer, which will be configured */
        CO_CANrx_t *buffer = &CANmodule->rxArray[index];
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6859      	ldr	r1, [r3, #4]
 8009146:	897a      	ldrh	r2, [r7, #10]
 8009148:	4613      	mov	r3, r2
 800914a:	005b      	lsls	r3, r3, #1
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	440b      	add	r3, r1
 8009152:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009158:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800915e:	609a      	str	r2, [r3, #8]

        /* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
        buffer->ident = ident << 2;
 8009160:	893b      	ldrh	r3, [r7, #8]
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	b29a      	uxth	r2, r3
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	801a      	strh	r2, [r3, #0]
        if (rtr) buffer->ident |= 0x02;
 800916a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d006      	beq.n	8009180 <CO_CANrxBufferInit+0x78>
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	f043 0302 	orr.w	r3, r3, #2
 800917a:	b29a      	uxth	r2, r3
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	801a      	strh	r2, [r3, #0]
        buffer->mask = ((mask & 0x07FF) << 2) | 0x02;
 8009180:	88fb      	ldrh	r3, [r7, #6]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	b21a      	sxth	r2, r3
 8009186:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 800918a:	4013      	ands	r3, r2
 800918c:	b21b      	sxth	r3, r3
 800918e:	f043 0302 	orr.w	r3, r3, #2
 8009192:	b21b      	sxth	r3, r3
 8009194:	b29a      	uxth	r2, r3
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if(CANmodule->useCANrxFilters){
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	7cdb      	ldrb	r3, [r3, #19]
    if((CANmodule!=NULL) && (object!=NULL) && (CANrx_callback!=NULL) && (index < CANmodule->rxSize)){
 800919e:	e001      	b.n	80091a4 <CO_CANrxBufferInit+0x9c>

        }
    }
    else{
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80091a0:	23ff      	movs	r3, #255	; 0xff
 80091a2:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 80091a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	371c      	adds	r7, #28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <CO_CANtxBufferInit>:
        uint16_t                index,
        uint16_t                ident,
        bool_t                  rtr,
        uint8_t                 noOfBytes,
        bool_t                  syncFlag)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	4608      	mov	r0, r1
 80091be:	4611      	mov	r1, r2
 80091c0:	461a      	mov	r2, r3
 80091c2:	4603      	mov	r3, r0
 80091c4:	817b      	strh	r3, [r7, #10]
 80091c6:	460b      	mov	r3, r1
 80091c8:	813b      	strh	r3, [r7, #8]
 80091ca:	4613      	mov	r3, r2
 80091cc:	71fb      	strb	r3, [r7, #7]
    CO_CANtx_t *buffer = NULL;
 80091ce:	2300      	movs	r3, #0
 80091d0:	617b      	str	r3, [r7, #20]

    if((CANmodule != NULL) && (index < CANmodule->txSize)){
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d026      	beq.n	8009226 <CO_CANtxBufferInit+0x72>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8a1b      	ldrh	r3, [r3, #16]
 80091dc:	897a      	ldrh	r2, [r7, #10]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d221      	bcs.n	8009226 <CO_CANtxBufferInit+0x72>
        /* get specific buffer */
        buffer = &CANmodule->txArray[index];
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	68da      	ldr	r2, [r3, #12]
 80091e6:	897b      	ldrh	r3, [r7, #10]
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	4413      	add	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.
         * Microcontroller specific. */
        buffer->ident = (ident & 0x07FF) << 2;
 80091ee:	893b      	ldrh	r3, [r7, #8]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	461a      	mov	r2, r3
 80091f4:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 80091f8:	4013      	ands	r3, r2
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	6013      	str	r3, [r2, #0]
        if (rtr) buffer->ident |= 0x02;
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <CO_CANtxBufferInit+0x5c>
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f043 0202 	orr.w	r2, r3, #2
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	601a      	str	r2, [r3, #0]

        buffer->DLC = noOfBytes;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009216:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2200      	movs	r2, #0
 800921c:	735a      	strb	r2, [r3, #13]
        buffer->syncFlag = syncFlag;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009224:	739a      	strb	r2, [r3, #14]
    }

    return buffer;
 8009226:	697b      	ldr	r3, [r7, #20]
}
 8009228:	4618      	mov	r0, r3
 800922a:	371c      	adds	r7, #28
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t CO_CANsend(CO_CANmodule_t *CANmodule, CO_CANtx_t *buffer)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
    }*/

    CO_LOCK_CAN_SEND();

    /* if CAN TX buffer is free, copy message to it */
    if(CANmodule->CANtxCount == 0 && (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0)){
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	8adb      	ldrh	r3, [r3, #22]
 8009246:	b29b      	uxth	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d13c      	bne.n	80092c6 <CO_CANsend+0x92>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4618      	mov	r0, r3
 8009252:	f005 fd13 	bl	800ec7c <HAL_CAN_GetTxMailboxesFreeLevel>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d034      	beq.n	80092c6 <CO_CANsend+0x92>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	7b9b      	ldrb	r3, [r3, #14]
 8009260:	b2da      	uxtb	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	751a      	strb	r2, [r3, #20]
        /* copy message and txRequest */

        TxHeader.StdId   = (buffer->ident >> 2) & 0x7FF;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	089b      	lsrs	r3, r3, #2
 800926c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009270:	4a1f      	ldr	r2, [pc, #124]	; (80092f0 <CO_CANsend+0xbc>)
 8009272:	6013      	str	r3, [r2, #0]
        TxHeader.DLC     = buffer->DLC;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	791b      	ldrb	r3, [r3, #4]
 8009278:	461a      	mov	r2, r3
 800927a:	4b1d      	ldr	r3, [pc, #116]	; (80092f0 <CO_CANsend+0xbc>)
 800927c:	611a      	str	r2, [r3, #16]
        TxHeader.ExtId   = 0;
 800927e:	4b1c      	ldr	r3, [pc, #112]	; (80092f0 <CO_CANsend+0xbc>)
 8009280:	2200      	movs	r2, #0
 8009282:	605a      	str	r2, [r3, #4]
        TxHeader.IDE     = CAN_ID_STD;
 8009284:	4b1a      	ldr	r3, [pc, #104]	; (80092f0 <CO_CANsend+0xbc>)
 8009286:	2200      	movs	r2, #0
 8009288:	609a      	str	r2, [r3, #8]
        TxHeader.RTR     = buffer->ident & 0x02;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	4a17      	ldr	r2, [pc, #92]	; (80092f0 <CO_CANsend+0xbc>)
 8009294:	60d3      	str	r3, [r2, #12]

        uint32_t mailBox;
        if (HAL_CAN_AddTxMessage(CANmodule->CANptr, &TxHeader, &buffer->data[0], &mailBox) != HAL_OK){
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	1d5a      	adds	r2, r3, #5
 800929e:	f107 0308 	add.w	r3, r7, #8
 80092a2:	4913      	ldr	r1, [pc, #76]	; (80092f0 <CO_CANsend+0xbc>)
 80092a4:	f005 fc0f 	bl	800eac6 <HAL_CAN_AddTxMessage>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d007      	beq.n	80092be <CO_CANsend+0x8a>
          err = HAL_CAN_GetError(CANmodule->CANptr);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f006 f8c3 	bl	800f43e <HAL_CAN_GetError>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]
    if(CANmodule->CANtxCount == 0 && (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0)){
 80092bc:	e012      	b.n	80092e4 <CO_CANsend+0xb0>
        }else{
        	/* First CAN message (bootup) was sent successfully */
        	CANmodule->firstCANtxMessage = false;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	755a      	strb	r2, [r3, #21]
    if(CANmodule->CANtxCount == 0 && (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0)){
 80092c4:	e00e      	b.n	80092e4 <CO_CANsend+0xb0>
        }

    }
    /* if no buffer is free, message will be sent by interrupt */
    else{
    	if (!buffer->bufferFull){
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	7b5b      	ldrb	r3, [r3, #13]
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d109      	bne.n	80092e4 <CO_CANsend+0xb0>
    		buffer->bufferFull = true;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2201      	movs	r2, #1
 80092d4:	735a      	strb	r2, [r3, #13]
    		CANmodule->CANtxCount++;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	8adb      	ldrh	r3, [r3, #22]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	3301      	adds	r3, #1
 80092de:	b29a      	uxth	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	82da      	strh	r2, [r3, #22]
    	}
    }
    CO_UNLOCK_CAN_SEND();

    return err;
 80092e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20000b14 	.word	0x20000b14

080092f4 <CO_CANclearPendingSyncPDOs>:


/******************************************************************************/
void CO_CANclearPendingSyncPDOs(CO_CANmodule_t *CANmodule){
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 80092fc:	2300      	movs	r3, #0
 80092fe:	617b      	str	r3, [r7, #20]

    CO_LOCK_CAN_SEND();
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if(/*messageIsOnCanBuffer && */CANmodule->bufferInhibitFlag){
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	7d1b      	ldrb	r3, [r3, #20]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <CO_CANclearPendingSyncPDOs+0x20>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	751a      	strb	r2, [r3, #20]
        tpdoDeleted = 1U;
 8009310:	2301      	movs	r3, #1
 8009312:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if(CANmodule->CANtxCount != 0U){
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	8adb      	ldrh	r3, [r3, #22]
 8009318:	b29b      	uxth	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d025      	beq.n	800936a <CO_CANclearPendingSyncPDOs+0x76>
        uint16_t i;
        CO_CANtx_t *buffer = &CANmodule->txArray[0];
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	60fb      	str	r3, [r7, #12]
        for(i = CANmodule->txSize; i > 0U; i--){
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	8a1b      	ldrh	r3, [r3, #16]
 8009328:	827b      	strh	r3, [r7, #18]
 800932a:	e01b      	b.n	8009364 <CO_CANclearPendingSyncPDOs+0x70>
            if(buffer->bufferFull){
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	7b5b      	ldrb	r3, [r3, #13]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	d010      	beq.n	8009358 <CO_CANclearPendingSyncPDOs+0x64>
                if(buffer->syncFlag){
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	7b9b      	ldrb	r3, [r3, #14]
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00b      	beq.n	8009358 <CO_CANclearPendingSyncPDOs+0x64>
                    buffer->bufferFull = false;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	735a      	strb	r2, [r3, #13]
                    CANmodule->CANtxCount--;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	8adb      	ldrh	r3, [r3, #22]
 800934a:	b29b      	uxth	r3, r3
 800934c:	3b01      	subs	r3, #1
 800934e:	b29a      	uxth	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	82da      	strh	r2, [r3, #22]
                    tpdoDeleted = 2U;
 8009354:	2302      	movs	r3, #2
 8009356:	617b      	str	r3, [r7, #20]
                }
            }
            buffer++;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3310      	adds	r3, #16
 800935c:	60fb      	str	r3, [r7, #12]
        for(i = CANmodule->txSize; i > 0U; i--){
 800935e:	8a7b      	ldrh	r3, [r7, #18]
 8009360:	3b01      	subs	r3, #1
 8009362:	827b      	strh	r3, [r7, #18]
 8009364:	8a7b      	ldrh	r3, [r7, #18]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e0      	bne.n	800932c <CO_CANclearPendingSyncPDOs+0x38>
        }
    }
    CO_UNLOCK_CAN_SEND();


    if(tpdoDeleted != 0U){
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d007      	beq.n	8009380 <CO_CANclearPendingSyncPDOs+0x8c>
        CO_errorReport((CO_EM_t*)CANmodule->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	69d8      	ldr	r0, [r3, #28]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 800937a:	2115      	movs	r1, #21
 800937c:	f7f9 fab9 	bl	80028f2 <CO_errorReport>
    }
}
 8009380:	bf00      	nop
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <CO_CANpolling_Tx>:


void CO_CANpolling_Tx(CO_CANmodule_t *CANmodule)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
	/*No pending tx msg*/
	if (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) == 0)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4618      	mov	r0, r3
 8009396:	f005 fc71 	bl	800ec7c <HAL_CAN_GetTxMailboxesFreeLevel>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d05c      	beq.n	800945a <CO_CANpolling_Tx+0xd2>
		return;

	/* Clear flag from previous message */
	CANmodule->bufferInhibitFlag = false;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	751a      	strb	r2, [r3, #20]

	/* Are there any new messages waiting to be send */
	if(CANmodule->CANtxCount > 0U) {
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	8adb      	ldrh	r3, [r3, #22]
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d055      	beq.n	800945c <CO_CANpolling_Tx+0xd4>
		uint16_t i;             /* index of transmitting message */

		/* first buffer */
		CO_CANtx_t *buffer = &CANmodule->txArray[0];
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	613b      	str	r3, [r7, #16]

		/* search through whole array of pointers to transmit message buffers. */
		for(i = CANmodule->txSize; i > 0U; i--) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	8a1b      	ldrh	r3, [r3, #16]
 80093ba:	82fb      	strh	r3, [r7, #22]
 80093bc:	e041      	b.n	8009442 <CO_CANpolling_Tx+0xba>
			/* if message buffer is full, send it. */
			if(buffer->bufferFull) {
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	7b5b      	ldrb	r3, [r3, #13]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d036      	beq.n	8009436 <CO_CANpolling_Tx+0xae>

				/* Copy message to CAN buffer */
				CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	7b9b      	ldrb	r3, [r3, #14]
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	751a      	strb	r2, [r3, #20]

				uint32_t mailBox;

		        TxHeader.StdId   = (buffer->ident >> 2) & 0x7FF;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	089b      	lsrs	r3, r3, #2
 80093d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093dc:	4a21      	ldr	r2, [pc, #132]	; (8009464 <CO_CANpolling_Tx+0xdc>)
 80093de:	6013      	str	r3, [r2, #0]
		        TxHeader.DLC     = buffer->DLC;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	791b      	ldrb	r3, [r3, #4]
 80093e4:	461a      	mov	r2, r3
 80093e6:	4b1f      	ldr	r3, [pc, #124]	; (8009464 <CO_CANpolling_Tx+0xdc>)
 80093e8:	611a      	str	r2, [r3, #16]
		        TxHeader.ExtId   = 0;
 80093ea:	4b1e      	ldr	r3, [pc, #120]	; (8009464 <CO_CANpolling_Tx+0xdc>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	605a      	str	r2, [r3, #4]
		        TxHeader.IDE     = CAN_ID_STD;
 80093f0:	4b1c      	ldr	r3, [pc, #112]	; (8009464 <CO_CANpolling_Tx+0xdc>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	609a      	str	r2, [r3, #8]
		        TxHeader.RTR     = buffer->ident & 0x02;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	4a19      	ldr	r2, [pc, #100]	; (8009464 <CO_CANpolling_Tx+0xdc>)
 8009400:	60d3      	str	r3, [r2, #12]

		        if (HAL_CAN_AddTxMessage(CANmodule->CANptr, &TxHeader, &buffer->data[0], &mailBox) == HAL_OK){
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6818      	ldr	r0, [r3, #0]
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	1d5a      	adds	r2, r3, #5
 800940a:	f107 030c 	add.w	r3, r7, #12
 800940e:	4915      	ldr	r1, [pc, #84]	; (8009464 <CO_CANpolling_Tx+0xdc>)
 8009410:	f005 fb59 	bl	800eac6 <HAL_CAN_AddTxMessage>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d117      	bne.n	800944a <CO_CANpolling_Tx+0xc2>
		        	/* First CAN message (bootup) was sent successfully */
		        	CANmodule->firstCANtxMessage = false;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	755a      	strb	r2, [r3, #21]

		        	buffer->bufferFull = false;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2200      	movs	r2, #0
 8009424:	735a      	strb	r2, [r3, #13]
                	CANmodule->CANtxCount--;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	8adb      	ldrh	r3, [r3, #22]
 800942a:	b29b      	uxth	r3, r3
 800942c:	3b01      	subs	r3, #1
 800942e:	b29a      	uxth	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	82da      	strh	r2, [r3, #22]
                }

				break;                      /* exit for loop */
 8009434:	e009      	b.n	800944a <CO_CANpolling_Tx+0xc2>
			} else {
				/*do nothing*/;
			}
			buffer++;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	3310      	adds	r3, #16
 800943a:	613b      	str	r3, [r7, #16]
		for(i = CANmodule->txSize; i > 0U; i--) {
 800943c:	8afb      	ldrh	r3, [r7, #22]
 800943e:	3b01      	subs	r3, #1
 8009440:	82fb      	strh	r3, [r7, #22]
 8009442:	8afb      	ldrh	r3, [r7, #22]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1ba      	bne.n	80093be <CO_CANpolling_Tx+0x36>
 8009448:	e000      	b.n	800944c <CO_CANpolling_Tx+0xc4>
				break;                      /* exit for loop */
 800944a:	bf00      	nop
		}/* end of for loop */

		/* Clear counter if no more messages */
		if(i == 0U) {
 800944c:	8afb      	ldrh	r3, [r7, #22]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d104      	bne.n	800945c <CO_CANpolling_Tx+0xd4>
			CANmodule->CANtxCount = 0U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	82da      	strh	r2, [r3, #22]
 8009458:	e000      	b.n	800945c <CO_CANpolling_Tx+0xd4>
		return;
 800945a:	bf00      	nop
		}else {
			/*do nothing*/;
		}
	}
}
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20000b14 	.word	0x20000b14

08009468 <CO_CANverifyErrors>:
/******************************************************************************/
void CO_CANverifyErrors(CO_CANmodule_t *CANmodule)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
    CO_EM_t* em = (CO_EM_t*)CANmodule->em;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	69db      	ldr	r3, [r3, #28]
 8009474:	617b      	str	r3, [r7, #20]

    /* get error counters from module. Id possible, function may use different way to
     * determine errors. */
    uint32_t err = ((CAN_HandleTypeDef*)(CANmodule->CANptr))->ErrorCode;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947c:	613b      	str	r3, [r7, #16]

    if(CANmodule->errOld != err){
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	429a      	cmp	r2, r3
 8009486:	d070      	beq.n	800956a <CO_CANverifyErrors+0x102>
        CANmodule->errOld = err;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	619a      	str	r2, [r3, #24]

        if(err & HAL_CAN_ERROR_BOF){
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f003 0304 	and.w	r3, r3, #4
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <CO_CANverifyErrors+0x40>
        	/* bus off, 离线状态 */
            CO_errorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, err);
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f248 1240 	movw	r2, #33088	; 0x8140
 800949e:	2112      	movs	r1, #18
 80094a0:	6978      	ldr	r0, [r7, #20]
 80094a2:	f7f9 fa26 	bl	80028f2 <CO_errorReport>
 80094a6:	e049      	b.n	800953c <CO_CANverifyErrors+0xd4>
        }
        else{
        	/* not bus off, 在线恢复 */
            CO_errorReset(em, CO_EM_CAN_TX_BUS_OFF, err);
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	2112      	movs	r1, #18
 80094ac:	6978      	ldr	r0, [r7, #20]
 80094ae:	f7f9 faa6 	bl	80029fe <CO_errorReset>

            if(err & HAL_CAN_ERROR_EWG){
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d006      	beq.n	80094ca <CO_CANverifyErrors+0x62>
            	/* bus warning */
                CO_errorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, err);
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	2200      	movs	r2, #0
 80094c0:	2101      	movs	r1, #1
 80094c2:	6978      	ldr	r0, [r7, #20]
 80094c4:	f7f9 fa15 	bl	80028f2 <CO_errorReport>
 80094c8:	e030      	b.n	800952c <CO_CANverifyErrors+0xc4>

            }else if(err & HAL_CAN_ERROR_EPV){
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d013      	beq.n	80094fc <CO_CANverifyErrors+0x94>
            	/* RX/TX bus passive, 被动错误 */
                CO_errorReport(em, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, err);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f248 1220 	movw	r2, #33056	; 0x8120
 80094da:	2106      	movs	r1, #6
 80094dc:	6978      	ldr	r0, [r7, #20]
 80094de:	f7f9 fa08 	bl	80028f2 <CO_errorReport>

                if(!CANmodule->firstCANtxMessage){
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	7d5b      	ldrb	r3, [r3, #21]
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d11f      	bne.n	800952c <CO_CANverifyErrors+0xc4>
                	CO_errorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, err);
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f248 1220 	movw	r2, #33056	; 0x8120
 80094f2:	2107      	movs	r1, #7
 80094f4:	6978      	ldr	r0, [r7, #20]
 80094f6:	f7f9 f9fc 	bl	80028f2 <CO_errorReport>
 80094fa:	e017      	b.n	800952c <CO_CANverifyErrors+0xc4>
                }
            }
            else{
                CO_errorReset(em, CO_EM_CAN_RX_BUS_PASSIVE, err);
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	2106      	movs	r1, #6
 8009500:	6978      	ldr	r0, [r7, #20]
 8009502:	f7f9 fa7c 	bl	80029fe <CO_errorReset>

                bool_t isError = CO_isError(em, CO_EM_CAN_TX_BUS_PASSIVE);
 8009506:	2107      	movs	r1, #7
 8009508:	6978      	ldr	r0, [r7, #20]
 800950a:	f7f9 fb00 	bl	8002b0e <CO_isError>
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]
                if(isError){
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d009      	beq.n	800952c <CO_CANverifyErrors+0xc4>
                    CO_errorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, err);
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	2107      	movs	r1, #7
 800951c:	6978      	ldr	r0, [r7, #20]
 800951e:	f7f9 fa6e 	bl	80029fe <CO_errorReset>
                    CO_errorReset(em, CO_EM_CAN_TX_OVERFLOW, err);
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	2114      	movs	r1, #20
 8009526:	6978      	ldr	r0, [r7, #20]
 8009528:	f7f9 fa69 	bl	80029fe <CO_errorReset>
                }
            }

            if(err == HAL_CAN_ERROR_NONE){       /* no error */
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d104      	bne.n	800953c <CO_CANverifyErrors+0xd4>
                CO_errorReset(em, CO_EM_CAN_BUS_WARNING, err);
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	2101      	movs	r1, #1
 8009536:	6978      	ldr	r0, [r7, #20]
 8009538:	f7f9 fa61 	bl	80029fe <CO_errorReset>
            }
        }

        if((err & HAL_CAN_ERROR_RX_FOV0) || (err & HAL_CAN_ERROR_RX_FOV1)){
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009542:	2b00      	cmp	r3, #0
 8009544:	d104      	bne.n	8009550 <CO_CANverifyErrors+0xe8>
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800954c:	2b00      	cmp	r3, #0
 800954e:	d007      	beq.n	8009560 <CO_CANverifyErrors+0xf8>
        	/* CAN RX bus overflow */
            CO_errorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, err);
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f248 1210 	movw	r2, #33040	; 0x8110
 8009556:	2113      	movs	r1, #19
 8009558:	6978      	ldr	r0, [r7, #20]
 800955a:	f7f9 f9ca 	bl	80028f2 <CO_errorReport>
        }else{
        	CO_errorReset(em, CO_EM_CAN_RXB_OVERFLOW, err);
        }
    }
}
 800955e:	e004      	b.n	800956a <CO_CANverifyErrors+0x102>
        	CO_errorReset(em, CO_EM_CAN_RXB_OVERFLOW, err);
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	2113      	movs	r1, #19
 8009564:	6978      	ldr	r0, [r7, #20]
 8009566:	f7f9 fa4a 	bl	80029fe <CO_errorReset>
}
 800956a:	bf00      	nop
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <CO_CANinterrupt>:


/******************************************************************************/
void CO_CANinterrupt(CO_CANmodule_t *CANmodule, uint32_t RxFifo)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b090      	sub	sp, #64	; 0x40
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]
    /* receive interrupt */
    if(1){
        CO_CANrxMsg_t rcvMsg;      /* pointer to received message in CAN module */
        uint16_t index;             /* index of received message */

        CO_CANrx_t *buffer = NULL;  /* receive message buffer from CO_CANmodule_t object. */
 800957c:	2300      	movs	r3, #0
 800957e:	63bb      	str	r3, [r7, #56]	; 0x38
        bool_t msgMatched = false;
 8009580:	2300      	movs	r3, #0
 8009582:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        HAL_CAN_GetRxMessage(CANmodule->CANptr, RxFifo, &rcvMsg.header, &rcvMsg.data[0]);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6818      	ldr	r0, [r3, #0]
 800958a:	f107 0308 	add.w	r3, r7, #8
 800958e:	3321      	adds	r3, #33	; 0x21
 8009590:	f107 0208 	add.w	r2, r7, #8
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	f005 fba6 	bl	800ece6 <HAL_CAN_GetRxMessage>

        rcvMsg.DLC   = rcvMsg.header.DLC;
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	b2db      	uxtb	r3, r3
 800959e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        rcvMsg.ident = rcvMsg.header.StdId;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	627b      	str	r3, [r7, #36]	; 0x24

        /*Expand with CANopen rx/tx buffer setting*/
        rcvMsg.ident <<= 2;
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24
        rcvMsg.ident |= rcvMsg.header.RTR;
 80095ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24
				cobId, nodeId,
				rcvMsg.header.DLC,
				rcvMsg.data[0]);
		*/

        if(CANmodule->useCANrxFilters){
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	7cdb      	ldrb	r3, [r3, #19]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d01c      	beq.n	80095f8 <CO_CANinterrupt+0x86>
            /* CAN module filters are used. Message with known 11-bit identifier has */
            /* been received */
            index = 0;  /* get index of the received message here. Or something similar */
 80095be:	2300      	movs	r3, #0
 80095c0:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(index < CANmodule->rxSize){
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	891b      	ldrh	r3, [r3, #8]
 80095c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d232      	bcs.n	8009632 <CO_CANinterrupt+0xc0>
                buffer = &CANmodule->rxArray[index];
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6859      	ldr	r1, [r3, #4]
 80095d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80095d2:	4613      	mov	r3, r2
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	4413      	add	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	440b      	add	r3, r1
 80095dc:	63bb      	str	r3, [r7, #56]	; 0x38
                /* verify also RTR */
                if(((rcvMsg.ident ^ buffer->ident) & buffer->mask) == 0U){
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095e2:	8812      	ldrh	r2, [r2, #0]
 80095e4:	4053      	eors	r3, r2
 80095e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095e8:	8852      	ldrh	r2, [r2, #2]
 80095ea:	4013      	ands	r3, r2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d120      	bne.n	8009632 <CO_CANinterrupt+0xc0>
                    msgMatched = true;
 80095f0:	2301      	movs	r3, #1
 80095f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80095f6:	e01c      	b.n	8009632 <CO_CANinterrupt+0xc0>
            }
        }
        else{
            /* CAN module filters are not used, message with any standard 11-bit identifier */
            /* has been received. Search rxArray form CANmodule for the same CAN-ID. */
            buffer = &CANmodule->rxArray[0];
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	63bb      	str	r3, [r7, #56]	; 0x38
            for(index = CANmodule->rxSize; index > 0U; index--){
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	891b      	ldrh	r3, [r3, #8]
 8009602:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009604:	e012      	b.n	800962c <CO_CANinterrupt+0xba>
                if(((rcvMsg.ident ^ buffer->ident) & buffer->mask) == 0U){
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800960a:	8812      	ldrh	r2, [r2, #0]
 800960c:	4053      	eors	r3, r2
 800960e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009610:	8852      	ldrh	r2, [r2, #2]
 8009612:	4013      	ands	r3, r2
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <CO_CANinterrupt+0xae>
                    msgMatched = true;
 8009618:	2301      	movs	r3, #1
 800961a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    break;
 800961e:	e008      	b.n	8009632 <CO_CANinterrupt+0xc0>
                }
                buffer++;
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	330c      	adds	r3, #12
 8009624:	63bb      	str	r3, [r7, #56]	; 0x38
            for(index = CANmodule->rxSize; index > 0U; index--){
 8009626:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009628:	3b01      	subs	r3, #1
 800962a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800962c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e9      	bne.n	8009606 <CO_CANinterrupt+0x94>
            }
        }

        /* Call specific function, which will process the message */
        if(msgMatched && (buffer != NULL) && (buffer->CANrx_callback != NULL)){
 8009632:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00e      	beq.n	8009658 <CO_CANinterrupt+0xe6>
 800963a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00b      	beq.n	8009658 <CO_CANinterrupt+0xe6>
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d007      	beq.n	8009658 <CO_CANinterrupt+0xe6>
            buffer->CANrx_callback(buffer->object, (void*) &rcvMsg);
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800964e:	6852      	ldr	r2, [r2, #4]
 8009650:	f107 0108 	add.w	r1, r7, #8
 8009654:	4610      	mov	r0, r2
 8009656:	4798      	blx	r3
        }
    }
    else{
        /* some other interrupt reason */
    }
}
 8009658:	bf00      	nop
 800965a:	3740      	adds	r7, #64	; 0x40
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) > 0){
 8009668:	e006      	b.n	8009678 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		CO_CANinterrupt(CO->CANmodule[0], CAN_RX_FIFO0);
 800966a:	4b09      	ldr	r3, [pc, #36]	; (8009690 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2100      	movs	r1, #0
 8009672:	4618      	mov	r0, r3
 8009674:	f7ff ff7d 	bl	8009572 <CO_CANinterrupt>
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) > 0){
 8009678:	2100      	movs	r1, #0
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f005 fc45 	bl	800ef0a <HAL_CAN_GetRxFifoFillLevel>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1f1      	bne.n	800966a <HAL_CAN_RxFifo0MsgPendingCallback+0xa>
	}
}
 8009686:	bf00      	nop
 8009688:	bf00      	nop
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	20000adc 	.word	0x20000adc

08009694 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0){
 800969c:	e006      	b.n	80096ac <HAL_CAN_RxFifo1MsgPendingCallback+0x18>
		CO_CANinterrupt(CO->CANmodule[0], CAN_RX_FIFO1);
 800969e:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2101      	movs	r1, #1
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff ff63 	bl	8009572 <CO_CANinterrupt>
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0){
 80096ac:	2101      	movs	r1, #1
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f005 fc2b 	bl	800ef0a <HAL_CAN_GetRxFifoFillLevel>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1f1      	bne.n	800969e <HAL_CAN_RxFifo1MsgPendingCallback+0xa>
	}
}
 80096ba:	bf00      	nop
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20000adc 	.word	0x20000adc

080096c8 <LOG_Init>:
uint8_t g_LogLevel;
uint8_t g_LogOn;
uint8_t g_LogOutput;

void LOG_Init(uint8_t level, uint8_t on, uint8_t output)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	71fb      	strb	r3, [r7, #7]
 80096d2:	460b      	mov	r3, r1
 80096d4:	71bb      	strb	r3, [r7, #6]
 80096d6:	4613      	mov	r3, r2
 80096d8:	717b      	strb	r3, [r7, #5]
	g_LogLevel = level;
 80096da:	4a07      	ldr	r2, [pc, #28]	; (80096f8 <LOG_Init+0x30>)
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	7013      	strb	r3, [r2, #0]
	g_LogOn = on;
 80096e0:	4a06      	ldr	r2, [pc, #24]	; (80096fc <LOG_Init+0x34>)
 80096e2:	79bb      	ldrb	r3, [r7, #6]
 80096e4:	7013      	strb	r3, [r2, #0]
	g_LogOutput = output;
 80096e6:	4a06      	ldr	r2, [pc, #24]	; (8009700 <LOG_Init+0x38>)
 80096e8:	797b      	ldrb	r3, [r7, #5]
 80096ea:	7013      	strb	r3, [r2, #0]
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	20000b2c 	.word	0x20000b2c
 80096fc:	20000b2d 	.word	0x20000b2d
 8009700:	20000b2e 	.word	0x20000b2e

08009704 <LOG_Print>:
	if (level > LOG_DbgLevel) return;
	g_LogLevel = level;
}

void LOG_Print(uint8_t level, const char* fmt, ...)
{
 8009704:	b40e      	push	{r1, r2, r3}
 8009706:	b580      	push	{r7, lr}
 8009708:	b095      	sub	sp, #84	; 0x54
 800970a:	af00      	add	r7, sp, #0
 800970c:	4603      	mov	r3, r0
 800970e:	71fb      	strb	r3, [r7, #7]
	if (!g_LogOn) return;
 8009710:	4b1e      	ldr	r3, [pc, #120]	; (800978c <LOG_Print+0x88>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d030      	beq.n	800977a <LOG_Print+0x76>
	if (level > g_LogLevel) return;
 8009718:	4b1d      	ldr	r3, [pc, #116]	; (8009790 <LOG_Print+0x8c>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	79fa      	ldrb	r2, [r7, #7]
 800971e:	429a      	cmp	r2, r3
 8009720:	d82d      	bhi.n	800977e <LOG_Print+0x7a>

	va_list v1;
	va_start(v1, fmt);
 8009722:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009726:	64fb      	str	r3, [r7, #76]	; 0x4c

	char buffer[64];
	memset(buffer, 0, 64);
 8009728:	f107 030c 	add.w	r3, r7, #12
 800972c:	2240      	movs	r2, #64	; 0x40
 800972e:	2100      	movs	r1, #0
 8009730:	4618      	mov	r0, r3
 8009732:	f00d fbd3 	bl	8016edc <memset>

	vsnprintf(buffer, 64, fmt, v1);
 8009736:	f107 000c 	add.w	r0, r7, #12
 800973a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800973c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800973e:	2140      	movs	r1, #64	; 0x40
 8009740:	f00d fe1a 	bl	8017378 <vsniprintf>

	if (g_LogOutput == LOG_MonOut){
 8009744:	4b13      	ldr	r3, [pc, #76]	; (8009794 <LOG_Print+0x90>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d105      	bne.n	8009758 <LOG_Print+0x54>
		// print to rdi monito
		printf(buffer);
 800974c:	f107 030c 	add.w	r3, r7, #12
 8009750:	4618      	mov	r0, r3
 8009752:	f00d fcc1 	bl	80170d8 <iprintf>
 8009756:	e013      	b.n	8009780 <LOG_Print+0x7c>
	}else if (g_LogOutput == LOG_USARTOut) {
 8009758:	4b0e      	ldr	r3, [pc, #56]	; (8009794 <LOG_Print+0x90>)
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d10f      	bne.n	8009780 <LOG_Print+0x7c>
		// print to usart
		JNT_dbgOutput(buffer, strlen(buffer));
 8009760:	f107 030c 	add.w	r3, r7, #12
 8009764:	4618      	mov	r0, r3
 8009766:	f7f6 fd33 	bl	80001d0 <strlen>
 800976a:	4602      	mov	r2, r0
 800976c:	f107 030c 	add.w	r3, r7, #12
 8009770:	4611      	mov	r1, r2
 8009772:	4618      	mov	r0, r3
 8009774:	f000 fb1c 	bl	8009db0 <JNT_dbgOutput>
 8009778:	e002      	b.n	8009780 <LOG_Print+0x7c>
	if (!g_LogOn) return;
 800977a:	bf00      	nop
 800977c:	e000      	b.n	8009780 <LOG_Print+0x7c>
	if (level > g_LogLevel) return;
 800977e:	bf00      	nop
	}
	va_end(v1);
}
 8009780:	3754      	adds	r7, #84	; 0x54
 8009782:	46bd      	mov	sp, r7
 8009784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009788:	b003      	add	sp, #12
 800978a:	4770      	bx	lr
 800978c:	20000b2d 	.word	0x20000b2d
 8009790:	20000b2c 	.word	0x20000b2c
 8009794:	20000b2e 	.word	0x20000b2e

08009798 <AS5048A_Init>:

#define SPI_AS5048A_CS_LOW()   HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET)
#define SPI_AS5048A_CS_HIGH()  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET)

void AS5048A_Init()
{
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0

}
 800979c:	bf00      	nop
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
	...

080097a8 <AS5048A_SPI_WriteData>:

static uint16_t AS5048A_SPI_WriteData(uint16_t data, uint16_t *rx)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	4603      	mov	r3, r0
 80097b0:	6039      	str	r1, [r7, #0]
 80097b2:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	SPI_AS5048A_CS_LOW();
 80097b4:	2200      	movs	r2, #0
 80097b6:	2101      	movs	r1, #1
 80097b8:	480c      	ldr	r0, [pc, #48]	; (80097ec <AS5048A_SPI_WriteData+0x44>)
 80097ba:	f006 fda3 	bl	8010304 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&data, (uint8_t*)rx, 1, HAL_MAX_DELAY);
 80097be:	1db9      	adds	r1, r7, #6
 80097c0:	f04f 33ff 	mov.w	r3, #4294967295
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	2301      	movs	r3, #1
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	4809      	ldr	r0, [pc, #36]	; (80097f0 <AS5048A_SPI_WriteData+0x48>)
 80097cc:	f007 fad6 	bl	8010d7c <HAL_SPI_TransmitReceive>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]
	SPI_AS5048A_CS_HIGH();
 80097d4:	2201      	movs	r2, #1
 80097d6:	2101      	movs	r1, #1
 80097d8:	4804      	ldr	r0, [pc, #16]	; (80097ec <AS5048A_SPI_WriteData+0x44>)
 80097da:	f006 fd93 	bl	8010304 <HAL_GPIO_WritePin>

	return status;
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	b29b      	uxth	r3, r3
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	40020800 	.word	0x40020800
 80097f0:	20000760 	.word	0x20000760

080097f4 <parity_even>:

static uint8_t parity_even(uint16_t v)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	80fb      	strh	r3, [r7, #6]
	if (v == 0) return 0;
 80097fe:	88fb      	ldrh	r3, [r7, #6]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <parity_even+0x14>
 8009804:	2300      	movs	r3, #0
 8009806:	e01c      	b.n	8009842 <parity_even+0x4e>

    v ^= v >> 8;
 8009808:	88fb      	ldrh	r3, [r7, #6]
 800980a:	0a1b      	lsrs	r3, r3, #8
 800980c:	b29a      	uxth	r2, r3
 800980e:	88fb      	ldrh	r3, [r7, #6]
 8009810:	4053      	eors	r3, r2
 8009812:	80fb      	strh	r3, [r7, #6]
    v ^= v >> 4;
 8009814:	88fb      	ldrh	r3, [r7, #6]
 8009816:	091b      	lsrs	r3, r3, #4
 8009818:	b29a      	uxth	r2, r3
 800981a:	88fb      	ldrh	r3, [r7, #6]
 800981c:	4053      	eors	r3, r2
 800981e:	80fb      	strh	r3, [r7, #6]
    v ^= v >> 2;
 8009820:	88fb      	ldrh	r3, [r7, #6]
 8009822:	089b      	lsrs	r3, r3, #2
 8009824:	b29a      	uxth	r2, r3
 8009826:	88fb      	ldrh	r3, [r7, #6]
 8009828:	4053      	eors	r3, r2
 800982a:	80fb      	strh	r3, [r7, #6]
    v ^= v >> 1;
 800982c:	88fb      	ldrh	r3, [r7, #6]
 800982e:	085b      	lsrs	r3, r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	88fb      	ldrh	r3, [r7, #6]
 8009834:	4053      	eors	r3, r2
 8009836:	80fb      	strh	r3, [r7, #6]

    return v & 1;
 8009838:	88fb      	ldrh	r3, [r7, #6]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	b2db      	uxtb	r3, r3
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <AS5048A_ClearAndNop>:

static void AS5048A_ClearAndNop()
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
	uint16_t res = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	80bb      	strh	r3, [r7, #4]
	uint16_t command = CMD_CLEAR;
 8009858:	f244 0301 	movw	r3, #16385	; 0x4001
 800985c:	80fb      	strh	r3, [r7, #6]

	command |= ((uint16_t)parity_even(command) << 15);
 800985e:	88fb      	ldrh	r3, [r7, #6]
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff ffc7 	bl	80097f4 <parity_even>
 8009866:	4603      	mov	r3, r0
 8009868:	03db      	lsls	r3, r3, #15
 800986a:	b21a      	sxth	r2, r3
 800986c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009870:	4313      	orrs	r3, r2
 8009872:	b21b      	sxth	r3, r3
 8009874:	80fb      	strh	r3, [r7, #6]
	AS5048A_SPI_WriteData(command, &res);
 8009876:	1d3a      	adds	r2, r7, #4
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff ff93 	bl	80097a8 <AS5048A_SPI_WriteData>

	res = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	80bb      	strh	r3, [r7, #4]
	AS5048A_SPI_WriteData(command, &res);
 8009886:	1d3a      	adds	r2, r7, #4
 8009888:	88fb      	ldrh	r3, [r7, #6]
 800988a:	4611      	mov	r1, r2
 800988c:	4618      	mov	r0, r3
 800988e:	f7ff ff8b 	bl	80097a8 <AS5048A_SPI_WriteData>
}
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <AS5048A_ReadReg>:

uint16_t AS5048A_ReadReg(uint16_t cmd, uint16_t *val)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	4603      	mov	r3, r0
 80098a2:	6039      	str	r1, [r7, #0]
 80098a4:	80fb      	strh	r3, [r7, #6]
	uint16_t status;

	uint16_t rx;
	uint16_t command = 0x4000;
 80098a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80098aa:	81bb      	strh	r3, [r7, #12]

	command = command | cmd;
 80098ac:	89ba      	ldrh	r2, [r7, #12]
 80098ae:	88fb      	ldrh	r3, [r7, #6]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	81bb      	strh	r3, [r7, #12]
	command |= ((uint16_t)parity_even(command) << 15);
 80098b4:	89bb      	ldrh	r3, [r7, #12]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7ff ff9c 	bl	80097f4 <parity_even>
 80098bc:	4603      	mov	r3, r0
 80098be:	03db      	lsls	r3, r3, #15
 80098c0:	b21a      	sxth	r2, r3
 80098c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	b21b      	sxth	r3, r3
 80098ca:	81bb      	strh	r3, [r7, #12]

	status = AS5048A_SPI_WriteData(command, &rx);
 80098cc:	f107 020a 	add.w	r2, r7, #10
 80098d0:	89bb      	ldrh	r3, [r7, #12]
 80098d2:	4611      	mov	r1, r2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff ff67 	bl	80097a8 <AS5048A_SPI_WriteData>
 80098da:	4603      	mov	r3, r0
 80098dc:	81fb      	strh	r3, [r7, #14]

	if (status != HAL_OK)
 80098de:	89fb      	ldrh	r3, [r7, #14]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <AS5048A_ReadReg+0x50>
		return REG_ERROR;
 80098e4:	f641 7301 	movw	r3, #7937	; 0x1f01
 80098e8:	e01b      	b.n	8009922 <AS5048A_ReadReg+0x88>

	command = CMD_NOP;
 80098ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80098ee:	81bb      	strh	r3, [r7, #12]
	status = AS5048A_SPI_WriteData(command, val);
 80098f0:	89bb      	ldrh	r3, [r7, #12]
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff ff57 	bl	80097a8 <AS5048A_SPI_WriteData>
 80098fa:	4603      	mov	r3, r0
 80098fc:	81fb      	strh	r3, [r7, #14]
	if (status != HAL_OK)
 80098fe:	89fb      	ldrh	r3, [r7, #14]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <AS5048A_ReadReg+0x70>
		return REG_ERROR;
 8009904:	f641 7301 	movw	r3, #7937	; 0x1f01
 8009908:	e00b      	b.n	8009922 <AS5048A_ReadReg+0x88>

	if ((*val & 0x4000) != 0){
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d004      	beq.n	8009920 <AS5048A_ReadReg+0x86>
		AS5048A_ClearAndNop();
 8009916:	f7ff ff9a 	bl	800984e <AS5048A_ClearAndNop>
		status = READ_ERROR;
 800991a:	f641 7302 	movw	r3, #7938	; 0x1f02
 800991e:	81fb      	strh	r3, [r7, #14]
	}

	return status;
 8009920:	89fb      	ldrh	r3, [r7, #14]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <AS5048A_ReadValue>:

	return HAL_OK;
}

uint16_t AS5048A_ReadValue(uint16_t cmd, uint16_t *value)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	4603      	mov	r3, r0
 8009932:	6039      	str	r1, [r7, #0]
 8009934:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t rx;

	status = AS5048A_ReadReg(cmd, &rx);
 8009936:	f107 0208 	add.w	r2, r7, #8
 800993a:	88fb      	ldrh	r3, [r7, #6]
 800993c:	4611      	mov	r1, r2
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff ffab 	bl	800989a <AS5048A_ReadReg>
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]

	uint16_t data = rx & 0x3fff;
 8009948:	893b      	ldrh	r3, [r7, #8]
 800994a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800994e:	81bb      	strh	r3, [r7, #12]
	uint16_t error = parity_even(data) ^ (rx >> 15);
 8009950:	89bb      	ldrh	r3, [r7, #12]
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff ff4e 	bl	80097f4 <parity_even>
 8009958:	4603      	mov	r3, r0
 800995a:	b29a      	uxth	r2, r3
 800995c:	893b      	ldrh	r3, [r7, #8]
 800995e:	0bdb      	lsrs	r3, r3, #15
 8009960:	b29b      	uxth	r3, r3
 8009962:	4053      	eors	r3, r2
 8009964:	817b      	strh	r3, [r7, #10]

	if (error){
 8009966:	897b      	ldrh	r3, [r7, #10]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d005      	beq.n	8009978 <AS5048A_ReadValue+0x4e>
		*value = 0;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	2200      	movs	r2, #0
 8009970:	801a      	strh	r2, [r3, #0]
		return EVEN_ERROR;
 8009972:	f641 6301 	movw	r3, #7681	; 0x1e01
 8009976:	e004      	b.n	8009982 <AS5048A_ReadValue+0x58>
	}else{
		*value = data;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	89ba      	ldrh	r2, [r7, #12]
 800997c:	801a      	strh	r2, [r3, #0]
	}

	return status;
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	b29b      	uxth	r3, r3
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <AS5048A_ReadAngle>:

uint16_t AS5048A_ReadAngle(uint16_t *angle)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  uint16_t status;
  status = AS5048A_ReadValue(CMD_ANGLE, angle);
 8009992:	6879      	ldr	r1, [r7, #4]
 8009994:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8009998:	f7ff ffc7 	bl	800992a <AS5048A_ReadValue>
 800999c:	4603      	mov	r3, r0
 800999e:	81fb      	strh	r3, [r7, #14]

  return status;
 80099a0:	89fb      	ldrh	r3, [r7, #14]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <RND_Init>:
}Round_Inc_t;

Round_Inc_t      g_RoundRecord;

void RND_Init(uint16_t angle)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	4603      	mov	r3, r0
 80099b4:	80fb      	strh	r3, [r7, #6]
	// Set the home angle
	g_RoundRecord.homeAngle = angle;
 80099b6:	4a21      	ldr	r2, [pc, #132]	; (8009a3c <RND_Init+0x90>)
 80099b8:	88fb      	ldrh	r3, [r7, #6]
 80099ba:	8153      	strh	r3, [r2, #10]

	g_RoundRecord.quat[0] = angle;
 80099bc:	4a1f      	ldr	r2, [pc, #124]	; (8009a3c <RND_Init+0x90>)
 80099be:	88fb      	ldrh	r3, [r7, #6]
 80099c0:	8013      	strh	r3, [r2, #0]
	g_RoundRecord.quat[1] = (g_RoundRecord.quat[0] + RES_QUADRANT) % (ANGLE_RESOLUTION);
 80099c2:	4b1e      	ldr	r3, [pc, #120]	; (8009a3c <RND_Init+0x90>)
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ca:	425a      	negs	r2, r3
 80099cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80099d0:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80099d4:	bf58      	it	pl
 80099d6:	4253      	negpl	r3, r2
 80099d8:	b29a      	uxth	r2, r3
 80099da:	4b18      	ldr	r3, [pc, #96]	; (8009a3c <RND_Init+0x90>)
 80099dc:	805a      	strh	r2, [r3, #2]
	g_RoundRecord.quat[2] = (g_RoundRecord.quat[1] + RES_QUADRANT) % (ANGLE_RESOLUTION);
 80099de:	4b17      	ldr	r3, [pc, #92]	; (8009a3c <RND_Init+0x90>)
 80099e0:	885b      	ldrh	r3, [r3, #2]
 80099e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099e6:	425a      	negs	r2, r3
 80099e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80099ec:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80099f0:	bf58      	it	pl
 80099f2:	4253      	negpl	r3, r2
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	4b11      	ldr	r3, [pc, #68]	; (8009a3c <RND_Init+0x90>)
 80099f8:	809a      	strh	r2, [r3, #4]
	g_RoundRecord.quat[3] = (g_RoundRecord.quat[2] + RES_QUADRANT) % (ANGLE_RESOLUTION);
 80099fa:	4b10      	ldr	r3, [pc, #64]	; (8009a3c <RND_Init+0x90>)
 80099fc:	889b      	ldrh	r3, [r3, #4]
 80099fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a02:	425a      	negs	r2, r3
 8009a04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009a08:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009a0c:	bf58      	it	pl
 8009a0e:	4253      	negpl	r3, r2
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <RND_Init+0x90>)
 8009a14:	80da      	strh	r2, [r3, #6]
	g_RoundRecord.quat[4] = (angle) % (ANGLE_RESOLUTION);
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <RND_Init+0x90>)
 8009a20:	811a      	strh	r2, [r3, #8]

	// 4象限, homeAngle 设置为第0象限
	g_RoundRecord.quadRant = 0;
 8009a22:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <RND_Init+0x90>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	81da      	strh	r2, [r3, #14]

	// 初始象限增加值为0
	g_RoundRecord.RantInc = 0;
 8009a28:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <RND_Init+0x90>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	819a      	strh	r2, [r3, #12]
}
 8009a2e:	bf00      	nop
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	20000b30 	.word	0x20000b30

08009a40 <RND_Input>:

void RND_Input(uint16_t angle)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	80fb      	strh	r3, [r7, #6]
	// 当前在第几象限
	int16_t rant = -1;
 8009a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a4e:	81fb      	strh	r3, [r7, #14]

	for (int16_t i = 0; i < 4; i++){
 8009a50:	2300      	movs	r3, #0
 8009a52:	81bb      	strh	r3, [r7, #12]
 8009a54:	e03e      	b.n	8009ad4 <RND_Input+0x94>
		if (angle >= g_RoundRecord.quat[i] && angle < g_RoundRecord.quat[i+1]){
 8009a56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009a5a:	4a56      	ldr	r2, [pc, #344]	; (8009bb4 <RND_Input+0x174>)
 8009a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a60:	88fa      	ldrh	r2, [r7, #6]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d30b      	bcc.n	8009a7e <RND_Input+0x3e>
 8009a66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	4a51      	ldr	r2, [pc, #324]	; (8009bb4 <RND_Input+0x174>)
 8009a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a72:	88fa      	ldrh	r2, [r7, #6]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d202      	bcs.n	8009a7e <RND_Input+0x3e>
			rant = i;
 8009a78:	89bb      	ldrh	r3, [r7, #12]
 8009a7a:	81fb      	strh	r3, [r7, #14]
			break;
 8009a7c:	e02e      	b.n	8009adc <RND_Input+0x9c>
		}

		if (g_RoundRecord.quat[i] > g_RoundRecord.quat[i+1]){
 8009a7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009a82:	4a4c      	ldr	r2, [pc, #304]	; (8009bb4 <RND_Input+0x174>)
 8009a84:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8009a88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	4949      	ldr	r1, [pc, #292]	; (8009bb4 <RND_Input+0x174>)
 8009a90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d917      	bls.n	8009ac8 <RND_Input+0x88>
			if ((angle >= g_RoundRecord.quat[i] && angle <= ANGLE_RESOLUTION) ||
 8009a98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009a9c:	4a45      	ldr	r2, [pc, #276]	; (8009bb4 <RND_Input+0x174>)
 8009a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aa2:	88fa      	ldrh	r2, [r7, #6]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d303      	bcc.n	8009ab0 <RND_Input+0x70>
 8009aa8:	88fb      	ldrh	r3, [r7, #6]
 8009aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009aae:	d908      	bls.n	8009ac2 <RND_Input+0x82>
				(angle >= 0 && angle < g_RoundRecord.quat[i+1])){
 8009ab0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	4a3f      	ldr	r2, [pc, #252]	; (8009bb4 <RND_Input+0x174>)
 8009ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			if ((angle >= g_RoundRecord.quat[i] && angle <= ANGLE_RESOLUTION) ||
 8009abc:	88fa      	ldrh	r2, [r7, #6]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d202      	bcs.n	8009ac8 <RND_Input+0x88>
				rant = i;
 8009ac2:	89bb      	ldrh	r3, [r7, #12]
 8009ac4:	81fb      	strh	r3, [r7, #14]
				break;
 8009ac6:	e009      	b.n	8009adc <RND_Input+0x9c>
	for (int16_t i = 0; i < 4; i++){
 8009ac8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3301      	adds	r3, #1
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	81bb      	strh	r3, [r7, #12]
 8009ad4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	ddbc      	ble.n	8009a56 <RND_Input+0x16>
			}
		}
	}

	if (abs(g_RoundRecord.quadRant - rant) == 2){
 8009adc:	4b35      	ldr	r3, [pc, #212]	; (8009bb4 <RND_Input+0x174>)
 8009ade:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	bfb8      	it	lt
 8009aee:	425b      	neglt	r3, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d103      	bne.n	8009afc <RND_Input+0xbc>
		// 转速太快, 失步, 或角度数据读取不出
		printf("Lost steps too much.\n");
 8009af4:	4830      	ldr	r0, [pc, #192]	; (8009bb8 <RND_Input+0x178>)
 8009af6:	f00d fb75 	bl	80171e4 <puts>
		return;
 8009afa:	e058      	b.n	8009bae <RND_Input+0x16e>
	}

	if (rant == -1) {
 8009afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b04:	d107      	bne.n	8009b16 <RND_Input+0xd6>
		printf("Not an effective angle, %d, home: %d\n", angle, g_RoundRecord.homeAngle);
 8009b06:	88fb      	ldrh	r3, [r7, #6]
 8009b08:	4a2a      	ldr	r2, [pc, #168]	; (8009bb4 <RND_Input+0x174>)
 8009b0a:	8952      	ldrh	r2, [r2, #10]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	482b      	ldr	r0, [pc, #172]	; (8009bbc <RND_Input+0x17c>)
 8009b10:	f00d fae2 	bl	80170d8 <iprintf>
		return;
 8009b14:	e04b      	b.n	8009bae <RND_Input+0x16e>
	}

	// 计算象限增加值
	if (rant == g_RoundRecord.quadRant - 1)
 8009b16:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009b1a:	4b26      	ldr	r3, [pc, #152]	; (8009bb4 <RND_Input+0x174>)
 8009b1c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d109      	bne.n	8009b3a <RND_Input+0xfa>
		g_RoundRecord.RantInc --;
 8009b26:	4b23      	ldr	r3, [pc, #140]	; (8009bb4 <RND_Input+0x174>)
 8009b28:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	b21a      	sxth	r2, r3
 8009b34:	4b1f      	ldr	r3, [pc, #124]	; (8009bb4 <RND_Input+0x174>)
 8009b36:	819a      	strh	r2, [r3, #12]
 8009b38:	e036      	b.n	8009ba8 <RND_Input+0x168>
	else if (rant == g_RoundRecord.quadRant + 1)
 8009b3a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009b3e:	4b1d      	ldr	r3, [pc, #116]	; (8009bb4 <RND_Input+0x174>)
 8009b40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009b44:	3301      	adds	r3, #1
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d109      	bne.n	8009b5e <RND_Input+0x11e>
		g_RoundRecord.RantInc ++;
 8009b4a:	4b1a      	ldr	r3, [pc, #104]	; (8009bb4 <RND_Input+0x174>)
 8009b4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	3301      	adds	r3, #1
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	b21a      	sxth	r2, r3
 8009b58:	4b16      	ldr	r3, [pc, #88]	; (8009bb4 <RND_Input+0x174>)
 8009b5a:	819a      	strh	r2, [r3, #12]
 8009b5c:	e024      	b.n	8009ba8 <RND_Input+0x168>
	else {
		if (g_RoundRecord.quadRant == 0 && rant == 3)
 8009b5e:	4b15      	ldr	r3, [pc, #84]	; (8009bb4 <RND_Input+0x174>)
 8009b60:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10d      	bne.n	8009b84 <RND_Input+0x144>
 8009b68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d109      	bne.n	8009b84 <RND_Input+0x144>
			g_RoundRecord.RantInc --;
 8009b70:	4b10      	ldr	r3, [pc, #64]	; (8009bb4 <RND_Input+0x174>)
 8009b72:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	b21a      	sxth	r2, r3
 8009b7e:	4b0d      	ldr	r3, [pc, #52]	; (8009bb4 <RND_Input+0x174>)
 8009b80:	819a      	strh	r2, [r3, #12]
 8009b82:	e011      	b.n	8009ba8 <RND_Input+0x168>
		else if (g_RoundRecord.quadRant == 3 && rant == 0)
 8009b84:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <RND_Input+0x174>)
 8009b86:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d10c      	bne.n	8009ba8 <RND_Input+0x168>
 8009b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d108      	bne.n	8009ba8 <RND_Input+0x168>
			g_RoundRecord.RantInc ++;
 8009b96:	4b07      	ldr	r3, [pc, #28]	; (8009bb4 <RND_Input+0x174>)
 8009b98:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	b21a      	sxth	r2, r3
 8009ba4:	4b03      	ldr	r3, [pc, #12]	; (8009bb4 <RND_Input+0x174>)
 8009ba6:	819a      	strh	r2, [r3, #12]
	}

	// 象限设置
	g_RoundRecord.quadRant = rant;
 8009ba8:	4a02      	ldr	r2, [pc, #8]	; (8009bb4 <RND_Input+0x174>)
 8009baa:	89fb      	ldrh	r3, [r7, #14]
 8009bac:	81d3      	strh	r3, [r2, #14]
}
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	20000b30 	.word	0x20000b30
 8009bb8:	08018378 	.word	0x08018378
 8009bbc:	08018390 	.word	0x08018390

08009bc0 <RND_GetCrossAngle>:

/*
 * 角度传感器，逆时针 角度增大
 * */
int32_t RND_GetCrossAngle(uint16_t angle)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b089      	sub	sp, #36	; 0x24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	80fb      	strh	r3, [r7, #6]
	int32_t delta;
	int32_t side;

	int32_t home   = g_RoundRecord.homeAngle;
 8009bca:	4b51      	ldr	r3, [pc, #324]	; (8009d10 <RND_GetCrossAngle+0x150>)
 8009bcc:	895b      	ldrh	r3, [r3, #10]
 8009bce:	613b      	str	r3, [r7, #16]
	int32_t homePi = (home + ANGLE_RESOLUTION / 2) % ANGLE_RESOLUTION;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009bd6:	425a      	negs	r2, r3
 8009bd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009bdc:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009be0:	bf58      	it	pl
 8009be2:	4253      	negpl	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]

	if (home > homePi) {
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	dd23      	ble.n	8009c36 <RND_GetCrossAngle+0x76>
		// home 在0点右边
		if ((angle >= 0 && angle < homePi) || (angle >= home && angle <= ANGLE_RESOLUTION)) {
 8009bee:	88fb      	ldrh	r3, [r7, #6]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	dc07      	bgt.n	8009c06 <RND_GetCrossAngle+0x46>
 8009bf6:	88fb      	ldrh	r3, [r7, #6]
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	dc13      	bgt.n	8009c26 <RND_GetCrossAngle+0x66>
 8009bfe:	88fb      	ldrh	r3, [r7, #6]
 8009c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c04:	d80f      	bhi.n	8009c26 <RND_GetCrossAngle+0x66>
			// angle 在 home的左边
			delta = (angle + ANGLE_RESOLUTION - home) % ANGLE_RESOLUTION;
 8009c06:	88fb      	ldrh	r3, [r7, #6]
 8009c08:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	425a      	negs	r2, r3
 8009c12:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009c16:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009c1a:	bf58      	it	pl
 8009c1c:	4253      	negpl	r3, r2
 8009c1e:	61fb      	str	r3, [r7, #28]
			side = 1;
 8009c20:	2301      	movs	r3, #1
 8009c22:	61bb      	str	r3, [r7, #24]
 8009c24:	e026      	b.n	8009c74 <RND_GetCrossAngle+0xb4>
		}else {
			// angle 在 home的左边
			delta = home - angle;
 8009c26:	88fb      	ldrh	r3, [r7, #6]
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	61fb      	str	r3, [r7, #28]
			side = -1;
 8009c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c32:	61bb      	str	r3, [r7, #24]
 8009c34:	e01e      	b.n	8009c74 <RND_GetCrossAngle+0xb4>
		}
	}else {
		// home 在 0 点的左边
		if (angle >= home && angle < homePi) {
 8009c36:	88fb      	ldrh	r3, [r7, #6]
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	dc0a      	bgt.n	8009c54 <RND_GetCrossAngle+0x94>
 8009c3e:	88fb      	ldrh	r3, [r7, #6]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	dd06      	ble.n	8009c54 <RND_GetCrossAngle+0x94>
			// angle 在 home的左边
			delta = angle - home;
 8009c46:	88fa      	ldrh	r2, [r7, #6]
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	61fb      	str	r3, [r7, #28]
			side = 1;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	e00f      	b.n	8009c74 <RND_GetCrossAngle+0xb4>
		}else {
			// angle 在 home的右边
			delta = (home - angle + ANGLE_RESOLUTION) % ANGLE_RESOLUTION;
 8009c54:	88fb      	ldrh	r3, [r7, #6]
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8009c5e:	425a      	negs	r2, r3
 8009c60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009c64:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009c68:	bf58      	it	pl
 8009c6a:	4253      	negpl	r3, r2
 8009c6c:	61fb      	str	r3, [r7, #28]
			side = -1;
 8009c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c72:	61bb      	str	r3, [r7, #24]
		}
	}

	delta *= side;
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	69ba      	ldr	r2, [r7, #24]
 8009c78:	fb02 f303 	mul.w	r3, r2, r3
 8009c7c:	61fb      	str	r3, [r7, #28]

	int32_t round;
	if (g_RoundRecord.RantInc >= 0){
 8009c7e:	4b24      	ldr	r3, [pc, #144]	; (8009d10 <RND_GetCrossAngle+0x150>)
 8009c80:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	db09      	blt.n	8009c9c <RND_GetCrossAngle+0xdc>
		round = g_RoundRecord.RantInc / 4;
 8009c88:	4b21      	ldr	r3, [pc, #132]	; (8009d10 <RND_GetCrossAngle+0x150>)
 8009c8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	da00      	bge.n	8009c94 <RND_GetCrossAngle+0xd4>
 8009c92:	3303      	adds	r3, #3
 8009c94:	109b      	asrs	r3, r3, #2
 8009c96:	b21b      	sxth	r3, r3
 8009c98:	617b      	str	r3, [r7, #20]
 8009c9a:	e008      	b.n	8009cae <RND_GetCrossAngle+0xee>
	}else{
		round = (g_RoundRecord.RantInc + 1) / 4;
 8009c9c:	4b1c      	ldr	r3, [pc, #112]	; (8009d10 <RND_GetCrossAngle+0x150>)
 8009c9e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	da00      	bge.n	8009caa <RND_GetCrossAngle+0xea>
 8009ca8:	3303      	adds	r3, #3
 8009caa:	109b      	asrs	r3, r3, #2
 8009cac:	617b      	str	r3, [r7, #20]
	}

	if (g_RoundRecord.RantInc > 0) {
 8009cae:	4b18      	ldr	r3, [pc, #96]	; (8009d10 <RND_GetCrossAngle+0x150>)
 8009cb0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	dd0f      	ble.n	8009cd8 <RND_GetCrossAngle+0x118>
		if (delta >= 0) {
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	db05      	blt.n	8009cca <RND_GetCrossAngle+0x10a>
			delta += round * ANGLE_RESOLUTION;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	039b      	lsls	r3, r3, #14
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	61fb      	str	r3, [r7, #28]
 8009cc8:	e01b      	b.n	8009d02 <RND_GetCrossAngle+0x142>
		}else {
			delta += (round + 1)* ANGLE_RESOLUTION;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	039b      	lsls	r3, r3, #14
 8009cd0:	69fa      	ldr	r2, [r7, #28]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	61fb      	str	r3, [r7, #28]
 8009cd6:	e014      	b.n	8009d02 <RND_GetCrossAngle+0x142>
		}
	}else if (g_RoundRecord.RantInc < -1) {
 8009cd8:	4b0d      	ldr	r3, [pc, #52]	; (8009d10 <RND_GetCrossAngle+0x150>)
 8009cda:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce2:	da0e      	bge.n	8009d02 <RND_GetCrossAngle+0x142>
		if (delta < 0){
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	da05      	bge.n	8009cf6 <RND_GetCrossAngle+0x136>
			delta += round * ANGLE_RESOLUTION;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	039b      	lsls	r3, r3, #14
 8009cee:	69fa      	ldr	r2, [r7, #28]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	61fb      	str	r3, [r7, #28]
 8009cf4:	e005      	b.n	8009d02 <RND_GetCrossAngle+0x142>
		}else {
			delta += (round - 1)* ANGLE_RESOLUTION;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	039b      	lsls	r3, r3, #14
 8009cfc:	69fa      	ldr	r2, [r7, #28]
 8009cfe:	4413      	add	r3, r2
 8009d00:	61fb      	str	r3, [r7, #28]
		}
	}

	return delta;
 8009d02:	69fb      	ldr	r3, [r7, #28]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3724      	adds	r7, #36	; 0x24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	20000b30 	.word	0x20000b30

08009d14 <RND_GetIncSteps>:

	return round;
}

int32_t RND_GetIncSteps(uint16_t angle, float ms)
{
 8009d14:	b5b0      	push	{r4, r5, r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	ed87 0a00 	vstr	s0, [r7]
 8009d20:	80fb      	strh	r3, [r7, #6]
	float ca = (float)RND_GetCrossAngle(angle);
 8009d22:	88fb      	ldrh	r3, [r7, #6]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff ff4b 	bl	8009bc0 <RND_GetCrossAngle>
 8009d2a:	ee07 0a90 	vmov	s15, r0
 8009d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d32:	edc7 7a03 	vstr	s15, [r7, #12]

	// 一圈 = 200 * 细分，
	int32_t steps = ca * (200.0 * ms) / (float)ANGLE_RESOLUTION;
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f7f6 fc06 	bl	8000548 <__aeabi_f2d>
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	460d      	mov	r5, r1
 8009d40:	6838      	ldr	r0, [r7, #0]
 8009d42:	f7f6 fc01 	bl	8000548 <__aeabi_f2d>
 8009d46:	f04f 0200 	mov.w	r2, #0
 8009d4a:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <RND_GetIncSteps+0x74>)
 8009d4c:	f7f6 fc54 	bl	80005f8 <__aeabi_dmul>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4620      	mov	r0, r4
 8009d56:	4629      	mov	r1, r5
 8009d58:	f7f6 fc4e 	bl	80005f8 <__aeabi_dmul>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4610      	mov	r0, r2
 8009d62:	4619      	mov	r1, r3
 8009d64:	f04f 0200 	mov.w	r2, #0
 8009d68:	4b08      	ldr	r3, [pc, #32]	; (8009d8c <RND_GetIncSteps+0x78>)
 8009d6a:	f7f6 fd6f 	bl	800084c <__aeabi_ddiv>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4610      	mov	r0, r2
 8009d74:	4619      	mov	r1, r3
 8009d76:	f7f6 fe51 	bl	8000a1c <__aeabi_d2iz>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	60bb      	str	r3, [r7, #8]
	return steps;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bdb0      	pop	{r4, r5, r7, pc}
 8009d88:	40690000 	.word	0x40690000
 8009d8c:	40d00000 	.word	0x40d00000

08009d90 <_ZN14TMC5160Stepper11rms_currentEt>:
	public:
		TMC5160Stepper(uint16_t pinCS, float RS = default_RS, int8_t link_index = -1);
		TMC5160Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link_index = -1);
		TMC5160Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link_index = -1);

		void rms_current(uint16_t mA) { TMC2160Stepper::rms_current(mA); }
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	807b      	strh	r3, [r7, #2]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	887a      	ldrh	r2, [r7, #2]
 8009da0:	4611      	mov	r1, r2
 8009da2:	4618      	mov	r0, r3
 8009da4:	f003 f924 	bl	800cff0 <_ZN14TMC2160Stepper11rms_currentEt>
 8009da8:	bf00      	nop
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <JNT_dbgOutput>:

	return paramsSz;
}

void JNT_dbgOutput(char* str, size_t cnt)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
	  msg.type = (uint8_t)'-'; //MSG_STRING_TYPE;
	  msg.code = (uint8_t)'-'; //JNT_LOGFEEDBACK;
	  msg.len  = (uint8_t)'-'; //cnt;
	  msg.crc  = (uint8_t)'-'; //msg.len ^ 0x1E;
      */
	  msg.type = MSG_STRING_TYPE;
 8009dba:	2322      	movs	r3, #34	; 0x22
 8009dbc:	733b      	strb	r3, [r7, #12]
	  msg.code = JNT_LOGFEEDBACK;
 8009dbe:	23f1      	movs	r3, #241	; 0xf1
 8009dc0:	737b      	strb	r3, [r7, #13]
	  msg.len  = cnt;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	73bb      	strb	r3, [r7, #14]
	  msg.crc  = msg.len ^ 0x1E;
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	f083 031e 	eor.w	r3, r3, #30
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	73fb      	strb	r3, [r7, #15]

	  FUART_sendMsg(&msg, (uint8_t*)str, msg.len);
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	f107 030c 	add.w	r3, r7, #12
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f004 f959 	bl	800e094 <FUART_sendMsg>
	//}
}
 8009de2:	bf00      	nop
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <PIDProfile_Step>:
/* External outputs (root outports fed by signals with default storage) */
PIDExtY rtPIDY;

/* Model step function */
void PIDProfile_Step(real32_T ts, real32_T curPos)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b087      	sub	sp, #28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	ed87 0a01 	vstr	s0, [r7, #4]
 8009df6:	edc7 0a00 	vstr	s1, [r7]

  /* Sum: '<Root>/Sum' incorporates:
   *  Inport: '<Root>/CurrentPos'
   *  Inport: '<Root>/TargetPos'
   */
  rtb_perr = rtPIDU.TargetPos - curPos;
 8009dfa:	4b40      	ldr	r3, [pc, #256]	; (8009efc <PIDProfile_Step+0x110>)
 8009dfc:	ed93 7a00 	vldr	s14, [r3]
 8009e00:	edd7 7a00 	vldr	s15, [r7]
 8009e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e08:	edc7 7a04 	vstr	s15, [r7, #16]
  /* Gain: '<S36>/Filter Coefficient' incorporates:
   *  DiscreteIntegrator: '<S28>/Filter'
   *  Gain: '<S27>/Derivative Gain'
   *  Sum: '<S28>/SumD'
   */
  rtb_FilterCoefficient = (rtPID.Kd * rtb_perr - rtPIDDW.Filter_DSTATE) * rtPID.DerFilter;
 8009e0c:	4b3c      	ldr	r3, [pc, #240]	; (8009f00 <PIDProfile_Step+0x114>)
 8009e0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009e12:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e1a:	4b3a      	ldr	r3, [pc, #232]	; (8009f04 <PIDProfile_Step+0x118>)
 8009e1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e24:	4b36      	ldr	r3, [pc, #216]	; (8009f00 <PIDProfile_Step+0x114>)
 8009e26:	edd3 7a03 	vldr	s15, [r3, #12]
 8009e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e2e:	edc7 7a03 	vstr	s15, [r7, #12]
  /* Outport: '<Root>/CmdPos' incorporates:
   *  DiscreteIntegrator: '<S33>/Integrator'
   *  Gain: '<S38>/Proportional Gain'
   *  Sum: '<S42>/Sum'
   */
  rtPIDY.CmdPos = (rtPID.Kp * rtb_perr + rtPIDDW.Integrator_DSTATE) +
 8009e32:	4b33      	ldr	r3, [pc, #204]	; (8009f00 <PIDProfile_Step+0x114>)
 8009e34:	ed93 7a00 	vldr	s14, [r3]
 8009e38:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e40:	4b30      	ldr	r3, [pc, #192]	; (8009f04 <PIDProfile_Step+0x118>)
 8009e42:	edd3 7a00 	vldr	s15, [r3]
 8009e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e52:	4b2d      	ldr	r3, [pc, #180]	; (8009f08 <PIDProfile_Step+0x11c>)
 8009e54:	edc3 7a00 	vstr	s15, [r3]
	rtb_FilterCoefficient;

  /* Update for DiscreteIntegrator: '<S33>/Integrator' incorporates:
   *  Gain: '<S30>/Integral Gain'
   */
  rtPIDDW.Integrator_DSTATE += rtPID.Ki * rtb_perr * ts;
 8009e58:	4b2a      	ldr	r3, [pc, #168]	; (8009f04 <PIDProfile_Step+0x118>)
 8009e5a:	ed93 7a00 	vldr	s14, [r3]
 8009e5e:	4b28      	ldr	r3, [pc, #160]	; (8009f00 <PIDProfile_Step+0x114>)
 8009e60:	edd3 6a01 	vldr	s13, [r3, #4]
 8009e64:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009e6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e78:	4b22      	ldr	r3, [pc, #136]	; (8009f04 <PIDProfile_Step+0x118>)
 8009e7a:	edc3 7a00 	vstr	s15, [r3]

  /* Update for DiscreteIntegrator: '<S28>/Filter' */
  rtPIDDW.Filter_DSTATE += ts * rtb_FilterCoefficient;
 8009e7e:	4b21      	ldr	r3, [pc, #132]	; (8009f04 <PIDProfile_Step+0x118>)
 8009e80:	ed93 7a01 	vldr	s14, [r3, #4]
 8009e84:	edd7 6a01 	vldr	s13, [r7, #4]
 8009e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e94:	4b1b      	ldr	r3, [pc, #108]	; (8009f04 <PIDProfile_Step+0x118>)
 8009e96:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Calculate the cmd velocity*/
  real32_T cv = rtb_perr / ts;
 8009e9a:	edd7 6a04 	vldr	s13, [r7, #16]
 8009e9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea6:	edc7 7a05 	vstr	s15, [r7, #20]

  if (cv > rtPIDU.MaxVel)
 8009eaa:	4b14      	ldr	r3, [pc, #80]	; (8009efc <PIDProfile_Step+0x110>)
 8009eac:	edd3 7a01 	vldr	s15, [r3, #4]
 8009eb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8009eb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ebc:	dd02      	ble.n	8009ec4 <PIDProfile_Step+0xd8>
	  cv = rtPIDU.MaxVel;
 8009ebe:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <PIDProfile_Step+0x110>)
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	617b      	str	r3, [r7, #20]

  if (cv < -rtPIDU.MaxVel)
 8009ec4:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <PIDProfile_Step+0x110>)
 8009ec6:	edd3 7a01 	vldr	s15, [r3, #4]
 8009eca:	eef1 7a67 	vneg.f32	s15, s15
 8009ece:	ed97 7a05 	vldr	s14, [r7, #20]
 8009ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eda:	d506      	bpl.n	8009eea <PIDProfile_Step+0xfe>
	  cv = -rtPIDU.MaxVel;
 8009edc:	4b07      	ldr	r3, [pc, #28]	; (8009efc <PIDProfile_Step+0x110>)
 8009ede:	edd3 7a01 	vldr	s15, [r3, #4]
 8009ee2:	eef1 7a67 	vneg.f32	s15, s15
 8009ee6:	edc7 7a05 	vstr	s15, [r7, #20]

  rtPIDY.CmdVel = cv;
 8009eea:	4a07      	ldr	r2, [pc, #28]	; (8009f08 <PIDProfile_Step+0x11c>)
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	6053      	str	r3, [r2, #4]
}
 8009ef0:	bf00      	nop
 8009ef2:	371c      	adds	r7, #28
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	20000b58 	.word	0x20000b58
 8009f00:	20000b40 	.word	0x20000b40
 8009f04:	20000b50 	.word	0x20000b50
 8009f08:	20000b68 	.word	0x20000b68

08009f0c <PIDProfile_Start>:

void PIDProfile_Start(real32_T targetPos, real32_T maxVel, real32_T maxAcce, real32_T maxJerk)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	ed87 0a03 	vstr	s0, [r7, #12]
 8009f16:	edc7 0a02 	vstr	s1, [r7, #8]
 8009f1a:	ed87 1a01 	vstr	s2, [r7, #4]
 8009f1e:	edc7 1a00 	vstr	s3, [r7]
	rtPIDU.TargetPos = targetPos;
 8009f22:	4a0f      	ldr	r2, [pc, #60]	; (8009f60 <PIDProfile_Start+0x54>)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6013      	str	r3, [r2, #0]
	rtPIDU.MaxVel    = maxVel;
 8009f28:	4a0d      	ldr	r2, [pc, #52]	; (8009f60 <PIDProfile_Start+0x54>)
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	6053      	str	r3, [r2, #4]
	rtPIDU.MaxAcce   = maxAcce;
 8009f2e:	4a0c      	ldr	r2, [pc, #48]	; (8009f60 <PIDProfile_Start+0x54>)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6093      	str	r3, [r2, #8]
	rtPIDU.MaxJerk   = maxJerk;
 8009f34:	4a0a      	ldr	r2, [pc, #40]	; (8009f60 <PIDProfile_Start+0x54>)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	60d3      	str	r3, [r2, #12]

	/* Initialize the output value*/
	rtPIDY.CmdPos = 0.0f;
 8009f3a:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <PIDProfile_Start+0x58>)
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	601a      	str	r2, [r3, #0]
	rtPIDY.CmdVel = 0.0f;
 8009f42:	4b08      	ldr	r3, [pc, #32]	; (8009f64 <PIDProfile_Start+0x58>)
 8009f44:	f04f 0200 	mov.w	r2, #0
 8009f48:	605a      	str	r2, [r3, #4]
	rtPIDY.CmdAcce = 0.0f;
 8009f4a:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <PIDProfile_Start+0x58>)
 8009f4c:	f04f 0200 	mov.w	r2, #0
 8009f50:	609a      	str	r2, [r3, #8]

}
 8009f52:	bf00      	nop
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	20000b58 	.word	0x20000b58
 8009f64:	20000b68 	.word	0x20000b68

08009f68 <PIDProfile_Initialize>:

void PIDProfile_Initialize(real32_T Kp, real32_T Ki, real32_T Kd, real32_T dc)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009f72:	edc7 0a02 	vstr	s1, [r7, #8]
 8009f76:	ed87 1a01 	vstr	s2, [r7, #4]
 8009f7a:	edc7 1a00 	vstr	s3, [r7]
	rtPID.Kp = Kp;
 8009f7e:	4a09      	ldr	r2, [pc, #36]	; (8009fa4 <PIDProfile_Initialize+0x3c>)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6013      	str	r3, [r2, #0]
	rtPID.Ki = Ki;
 8009f84:	4a07      	ldr	r2, [pc, #28]	; (8009fa4 <PIDProfile_Initialize+0x3c>)
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	6053      	str	r3, [r2, #4]
	rtPID.Kd = Kd;
 8009f8a:	4a06      	ldr	r2, [pc, #24]	; (8009fa4 <PIDProfile_Initialize+0x3c>)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6093      	str	r3, [r2, #8]
	rtPID.DerFilter = dc;
 8009f90:	4a04      	ldr	r2, [pc, #16]	; (8009fa4 <PIDProfile_Initialize+0x3c>)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	60d3      	str	r3, [r2, #12]
}
 8009f96:	bf00      	nop
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	20000b40 	.word	0x20000b40

08009fa8 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	bfb8      	it	lt
 8009fb6:	425b      	neglt	r3, r3
 8009fb8:	4618      	mov	r0, r3
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <MOTOR_Init>:

MOTOR_Model_t MOTOR_Model;
extern int32_t g_IncSteps;

void MOTOR_Init()
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	af00      	add	r7, sp, #0
	MOTOR_Model.driver = NULL;
 8009fc8:	4b08      	ldr	r3, [pc, #32]	; (8009fec <MOTOR_Init+0x28>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	601a      	str	r2, [r3, #0]
	MOTOR_Model.target   = g_IncSteps;
 8009fce:	4b08      	ldr	r3, [pc, #32]	; (8009ff0 <MOTOR_Init+0x2c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a06      	ldr	r2, [pc, #24]	; (8009fec <MOTOR_Init+0x28>)
 8009fd4:	6053      	str	r3, [r2, #4]
	MOTOR_Model.speed    = 0;
 8009fd6:	4b05      	ldr	r3, [pc, #20]	; (8009fec <MOTOR_Init+0x28>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	609a      	str	r2, [r3, #8]
	MOTOR_Model.polarity = 1;
 8009fdc:	4b03      	ldr	r3, [pc, #12]	; (8009fec <MOTOR_Init+0x28>)
 8009fde:	2201      	movs	r2, #1
 8009fe0:	731a      	strb	r2, [r3, #12]
}
 8009fe2:	bf00      	nop
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	20000b74 	.word	0x20000b74
 8009ff0:	200006e4 	.word	0x200006e4

08009ff4 <MOTOR_bindDriver>:

#if (USE_TMC5160 == 1)
void MOTOR_bindDriver(TMC5160Stepper* driver)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
	MOTOR_Model.driver = driver;
 8009ffc:	4a79      	ldr	r2, [pc, #484]	; (800a1e4 <MOTOR_bindDriver+0x1f0>)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6013      	str	r3, [r2, #0]

	/* Driver En pin*/
	HAL_GPIO_WritePin(GPIOC, DRV_ENN_Pin, GPIO_PIN_RESET);
 800a002:	2200      	movs	r2, #0
 800a004:	2110      	movs	r1, #16
 800a006:	4878      	ldr	r0, [pc, #480]	; (800a1e8 <MOTOR_bindDriver+0x1f4>)
 800a008:	f006 f97c 	bl	8010304 <HAL_GPIO_WritePin>

	  /* Start TMC external CLK, 12M*/
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800a00c:	2104      	movs	r1, #4
 800a00e:	4877      	ldr	r0, [pc, #476]	; (800a1ec <MOTOR_bindDriver+0x1f8>)
 800a010:	f007 f9b2 	bl	8011378 <HAL_TIM_PWM_Start>

	/* Simple delay*/
	osDelay(10);
 800a014:	200a      	movs	r0, #10
 800a016:	f009 fadd 	bl	80135d4 <osDelay>

	printf("Init Pos: %ld\n", g_IncSteps);
 800a01a:	4b75      	ldr	r3, [pc, #468]	; (800a1f0 <MOTOR_bindDriver+0x1fc>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4619      	mov	r1, r3
 800a020:	4874      	ldr	r0, [pc, #464]	; (800a1f4 <MOTOR_bindDriver+0x200>)
 800a022:	f00d f859 	bl	80170d8 <iprintf>

	driver->GSTAT(0);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2100      	movs	r1, #0
 800a02a:	4618      	mov	r0, r3
 800a02c:	f003 ff19 	bl	800de62 <_ZN10TMCStepper5GSTATEh>

	int32_t chopconf = driver->CHOPCONF();
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4618      	mov	r0, r3
 800a034:	f002 f83e 	bl	800c0b4 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800a038:	4603      	mov	r3, r0
 800a03a:	617b      	str	r3, [r7, #20]
	printf("TMC5160 chop conf: 0x%08x\n", (unsigned int)chopconf);
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	4619      	mov	r1, r3
 800a040:	486d      	ldr	r0, [pc, #436]	; (800a1f8 <MOTOR_bindDriver+0x204>)
 800a042:	f00d f849 	bl	80170d8 <iprintf>

	/* Read vel actual*/
	int32_t va = driver->VACTUAL();
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4618      	mov	r0, r3
 800a04a:	f003 fa19 	bl	800d480 <_ZN14TMC5130Stepper7VACTUALEv>
 800a04e:	6138      	str	r0, [r7, #16]
	printf("TMC5160 vactual: %ld\n", va);
 800a050:	6939      	ldr	r1, [r7, #16]
 800a052:	486a      	ldr	r0, [pc, #424]	; (800a1fc <MOTOR_bindDriver+0x208>)
 800a054:	f00d f840 	bl	80170d8 <iprintf>

	driver->defaults();
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f003 fbc5 	bl	800d7e8 <_ZN14TMC5160Stepper8defaultsEv>
	driver->push();
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f003 fc3e 	bl	800d8e0 <_ZN14TMC5160Stepper4pushEv>
    driver->begin();
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4618      	mov	r0, r3
 800a068:	f003 f90a 	bl	800d280 <_ZN14TMC5130Stepper5beginEv>

    uint8_t conn = driver->test_connection();
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4618      	mov	r0, r3
 800a070:	f003 fda8 	bl	800dbc4 <_ZN10TMCStepper15test_connectionEv>
 800a074:	4603      	mov	r3, r0
 800a076:	73fb      	strb	r3, [r7, #15]
    if (conn != 0){
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <MOTOR_bindDriver+0x94>
	  printf("TMC5160 not connected, ret: %d\n", conn);
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
 800a080:	4619      	mov	r1, r3
 800a082:	485f      	ldr	r0, [pc, #380]	; (800a200 <MOTOR_bindDriver+0x20c>)
 800a084:	f00d f828 	bl	80170d8 <iprintf>
    }

    uint8_t version = driver->version();
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f003 f971 	bl	800d372 <_ZN14TMC5130Stepper7versionEv>
 800a090:	4603      	mov	r3, r0
 800a092:	73bb      	strb	r3, [r7, #14]
    printf("TMC driver version: 0x%02x\n", version);
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	4619      	mov	r1, r3
 800a098:	485a      	ldr	r0, [pc, #360]	; (800a204 <MOTOR_bindDriver+0x210>)
 800a09a:	f00d f81d 	bl	80170d8 <iprintf>

    driver->chm(0); // Standard mode (spreadCycle)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f002 f89b 	bl	800c1de <_ZN14TMC2130Stepper3chmEb>

    /* CHOPPER_DEFAULT_24V, (4,5,0), tuned to: 4,5,2*/
    driver->toff(4); // 0: shutdown, 1: only with tbl>=2, DcStep: no less than 3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2104      	movs	r1, #4
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f002 f827 	bl	800c100 <_ZN14TMC2130Stepper4toffEh>
    driver->hend(5);
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3314      	adds	r3, #20
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2105      	movs	r1, #5
 800a0be:	4610      	mov	r0, r2
 800a0c0:	4798      	blx	r3
    driver->hstrt(0);
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	331c      	adds	r3, #28
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	4798      	blx	r3

    driver->tbl(2); // blank_time(36)
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	332c      	adds	r3, #44	; 0x2c
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2102      	movs	r1, #2
 800a0de:	4610      	mov	r0, r2
 800a0e0:	4798      	blx	r3

    driver->pwm_freq(1);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f002 fb23 	bl	800c732 <_ZN14TMC2160Stepper8pwm_freqEh>
    driver->TPOWERDOWN(10);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	210a      	movs	r1, #10
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f003 fec7 	bl	800de84 <_ZN10TMCStepper10TPOWERDOWNEh>
    //driver->pwm_autoscale(true);
    driver->TPWMTHRS(2000);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f003 fed6 	bl	800deae <_ZN10TMCStepper8TPWMTHRSEm>

    driver->blank_time(24);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2118      	movs	r1, #24
 800a106:	4618      	mov	r0, r3
 800a108:	f003 fe62 	bl	800ddd0 <_ZN10TMCStepper10blank_timeEh>

    /*Work current*/
    driver->rms_current(g_WorkCurrent); // mA
 800a10c:	4b3e      	ldr	r3, [pc, #248]	; (800a208 <MOTOR_bindDriver+0x214>)
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7ff fe3c 	bl	8009d90 <_ZN14TMC5160Stepper11rms_currentEt>
    driver->intpol(1);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2101      	movs	r1, #1
 800a11c:	4618      	mov	r0, r3
 800a11e:	f002 f8e5 	bl	800c2ec <_ZN14TMC2130Stepper6intpolEb>

    driver->microsteps(MICRO_STEPS);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2120      	movs	r1, #32
 800a126:	4618      	mov	r0, r3
 800a128:	f003 fd68 	bl	800dbfc <_ZN10TMCStepper10microstepsEt>
    driver->TCOOLTHRS(400000); // 20bit max
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4937      	ldr	r1, [pc, #220]	; (800a20c <MOTOR_bindDriver+0x218>)
 800a130:	4618      	mov	r0, r3
 800a132:	f002 fd9d 	bl	800cc70 <_ZN14TMC2130Stepper9TCOOLTHRSEm>
    driver->THIGH(1200);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800a13c:	4618      	mov	r0, r3
 800a13e:	f002 fdbe 	bl	800ccbe <_ZN14TMC2130Stepper5THIGHEm>
    driver->semin(5);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2105      	movs	r1, #5
 800a146:	4618      	mov	r0, r3
 800a148:	f002 f98f 	bl	800c46a <_ZN14TMC2130Stepper5seminEh>
    driver->semax(2);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2102      	movs	r1, #2
 800a150:	4618      	mov	r0, r3
 800a152:	f002 f9af 	bl	800c4b4 <_ZN14TMC2130Stepper5semaxEh>
    driver->sedn(0b01);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2101      	movs	r1, #1
 800a15a:	4618      	mov	r0, r3
 800a15c:	f002 f9cf 	bl	800c4fe <_ZN14TMC2130Stepper4sednEh>
    driver->sgt(STALL_VALUE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	213f      	movs	r1, #63	; 0x3f
 800a164:	4618      	mov	r0, r3
 800a166:	f002 f9ef 	bl	800c548 <_ZN14TMC2130Stepper3sgtEa>
    driver->irun(28);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	211c      	movs	r1, #28
 800a16e:	4618      	mov	r0, r3
 800a170:	f002 faae 	bl	800c6d0 <_ZN10TMCStepper4irunEh>
    driver->VDCMIN(800000);
    driver.dc_time(96);
    HAL_GPIO_WritePin(DCEN_GPIO_Port, DCEN_Pin, GPIO_PIN_SET);
   */

    bool enable = driver->isEnabled();
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4618      	mov	r0, r3
 800a178:	f002 fd3d 	bl	800cbf6 <_ZN14TMC2130Stepper9isEnabledEv>
 800a17c:	4603      	mov	r3, r0
 800a17e:	737b      	strb	r3, [r7, #13]
    if (enable){
 800a180:	7b7b      	ldrb	r3, [r7, #13]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <MOTOR_bindDriver+0x198>
	    printf("driver enable\n");
 800a186:	4822      	ldr	r0, [pc, #136]	; (800a210 <MOTOR_bindDriver+0x21c>)
 800a188:	f00d f82c 	bl	80171e4 <puts>
    }

    bool sdmode = driver->sd_mode();
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4618      	mov	r0, r3
 800a190:	f003 f8dc 	bl	800d34c <_ZN14TMC5130Stepper7sd_modeEv>
 800a194:	4603      	mov	r3, r0
 800a196:	733b      	strb	r3, [r7, #12]
    if (sdmode){
 800a198:	7b3b      	ldrb	r3, [r7, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d002      	beq.n	800a1a4 <MOTOR_bindDriver+0x1b0>
	    printf("driver use sdmode\n");
 800a19e:	481d      	ldr	r0, [pc, #116]	; (800a214 <MOTOR_bindDriver+0x220>)
 800a1a0:	f00d f820 	bl	80171e4 <puts>
    }

    uint8_t state = driver->GSTAT();
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f003 fe4a 	bl	800de40 <_ZN10TMCStepper5GSTATEv>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	72fb      	strb	r3, [r7, #11]
    printf("driver state: %d\n", state);
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	4818      	ldr	r0, [pc, #96]	; (800a218 <MOTOR_bindDriver+0x224>)
 800a1b6:	f00c ff8f 	bl	80170d8 <iprintf>

    uint16_t ms = driver->microsteps();
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f003 fdcd 	bl	800dd5c <_ZN10TMCStepper10microstepsEv>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	813b      	strh	r3, [r7, #8]
    printf("motor micro steps: %d\n", ms);
 800a1c6:	893b      	ldrh	r3, [r7, #8]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4814      	ldr	r0, [pc, #80]	; (800a21c <MOTOR_bindDriver+0x228>)
 800a1cc:	f00c ff84 	bl	80170d8 <iprintf>

	Stepper_Init(ms);
 800a1d0:	893b      	ldrh	r3, [r7, #8]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f001 fe81 	bl	800bedc <Stepper_Init>
}
 800a1da:	bf00      	nop
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20000b74 	.word	0x20000b74
 800a1e8:	40020800 	.word	0x40020800
 800a1ec:	200008bc 	.word	0x200008bc
 800a1f0:	200006e4 	.word	0x200006e4
 800a1f4:	080183b8 	.word	0x080183b8
 800a1f8:	080183c8 	.word	0x080183c8
 800a1fc:	080183e4 	.word	0x080183e4
 800a200:	080183fc 	.word	0x080183fc
 800a204:	0801841c 	.word	0x0801841c
 800a208:	200005a0 	.word	0x200005a0
 800a20c:	00061a80 	.word	0x00061a80
 800a210:	08018438 	.word	0x08018438
 800a214:	08018448 	.word	0x08018448
 800a218:	0801845c 	.word	0x0801845c
 800a21c:	08018470 	.word	0x08018470

0800a220 <MOTOR_run>:
	}
}
#endif

void MOTOR_run()
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
	Stepper_Run();
 800a224:	f001 fefc 	bl	800c020 <Stepper_Run>
}
 800a228:	bf00      	nop
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <MOTOR_stop>:

void MOTOR_stop()
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
	MOTOR_Model.speed = 0;
 800a230:	4b03      	ldr	r3, [pc, #12]	; (800a240 <MOTOR_stop+0x14>)
 800a232:	2200      	movs	r2, #0
 800a234:	609a      	str	r2, [r3, #8]
	Stepper_Stop();
 800a236:	f001 fee1 	bl	800bffc <Stepper_Stop>
}
 800a23a:	bf00      	nop
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20000b74 	.word	0x20000b74

0800a244 <MOTOR_loop>:

void MOTOR_loop(uint32_t ticks)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
	/*Check the driver status*/
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <MOTOR_setPolarity>:

void MOTOR_setPolarity(int8_t polarity)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	71fb      	strb	r3, [r7, #7]
	MOTOR_Model.polarity = polarity;
 800a262:	4a04      	ldr	r2, [pc, #16]	; (800a274 <MOTOR_setPolarity+0x1c>)
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	7313      	strb	r3, [r2, #12]
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	20000b74 	.word	0x20000b74

0800a278 <MOTOR_setSpeed>:

	return MOTOR_DIR_BACKWARD;
}

void MOTOR_setSpeed(int32_t speed)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
	if (MOTOR_Model.polarity == 1){
 800a280:	4b13      	ldr	r3, [pc, #76]	; (800a2d0 <MOTOR_setSpeed+0x58>)
 800a282:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d10a      	bne.n	800a2a0 <MOTOR_setSpeed+0x28>
		if (speed > 0)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	dd03      	ble.n	800a298 <MOTOR_setSpeed+0x20>
			Stepper_SetDir(STEPPER_Dir_CW);
 800a290:	2001      	movs	r0, #1
 800a292:	f001 fe59 	bl	800bf48 <Stepper_SetDir>
 800a296:	e00d      	b.n	800a2b4 <MOTOR_setSpeed+0x3c>
		else
			Stepper_SetDir(STEPPER_Dir_CCW);
 800a298:	2000      	movs	r0, #0
 800a29a:	f001 fe55 	bl	800bf48 <Stepper_SetDir>
 800a29e:	e009      	b.n	800a2b4 <MOTOR_setSpeed+0x3c>
	}else{
		if (speed > 0)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	dd03      	ble.n	800a2ae <MOTOR_setSpeed+0x36>
			Stepper_SetDir(STEPPER_Dir_CW);
 800a2a6:	2001      	movs	r0, #1
 800a2a8:	f001 fe4e 	bl	800bf48 <Stepper_SetDir>
 800a2ac:	e002      	b.n	800a2b4 <MOTOR_setSpeed+0x3c>
		else
			Stepper_SetDir(STEPPER_Dir_CCW);
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	f001 fe4a 	bl	800bf48 <Stepper_SetDir>
	}

	MOTOR_Model.speed = speed;
 800a2b4:	4a06      	ldr	r2, [pc, #24]	; (800a2d0 <MOTOR_setSpeed+0x58>)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6093      	str	r3, [r2, #8]
	Stepper_SetSpeed(abs(speed));
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7ff fe74 	bl	8009fa8 <_ZSt3absl>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f001 fe6e 	bl	800bfa4 <Stepper_SetSpeed>
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	20000b74 	.word	0x20000b74

0800a2d4 <MOTOR_getSpeed>:

int32_t MOTOR_getSpeed()
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	af00      	add	r7, sp, #0
	return MOTOR_Model.speed;
 800a2d8:	4b03      	ldr	r3, [pc, #12]	; (800a2e8 <MOTOR_getSpeed+0x14>)
 800a2da:	689b      	ldr	r3, [r3, #8]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	20000b74 	.word	0x20000b74

0800a2ec <MOTOR_setRelTarget>:

void MOTOR_setRelTarget(int32_t target)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
	MOTOR_Model.target = g_IncSteps + MOTOR_Model.polarity * target;
 800a2f4:	4b08      	ldr	r3, [pc, #32]	; (800a318 <MOTOR_setRelTarget+0x2c>)
 800a2f6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	fb03 f202 	mul.w	r2, r3, r2
 800a302:	4b06      	ldr	r3, [pc, #24]	; (800a31c <MOTOR_setRelTarget+0x30>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4413      	add	r3, r2
 800a308:	4a03      	ldr	r2, [pc, #12]	; (800a318 <MOTOR_setRelTarget+0x2c>)
 800a30a:	6053      	str	r3, [r2, #4]
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	20000b74 	.word	0x20000b74
 800a31c:	200006e4 	.word	0x200006e4

0800a320 <MOTOR_setAbsTarget>:

void MOTOR_setAbsTarget(int32_t target)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
	MOTOR_Model.target = MOTOR_Model.polarity * target;
 800a328:	4b07      	ldr	r3, [pc, #28]	; (800a348 <MOTOR_setAbsTarget+0x28>)
 800a32a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a32e:	461a      	mov	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	fb02 f303 	mul.w	r3, r2, r3
 800a336:	4a04      	ldr	r2, [pc, #16]	; (800a348 <MOTOR_setAbsTarget+0x28>)
 800a338:	6053      	str	r3, [r2, #4]
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	20000b74 	.word	0x20000b74

0800a34c <MOTOR_getTarget>:

int32_t MOTOR_getTarget()
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
	return MOTOR_Model.target;
 800a350:	4b03      	ldr	r3, [pc, #12]	; (800a360 <MOTOR_getTarget+0x14>)
 800a352:	685b      	ldr	r3, [r3, #4]
}
 800a354:	4618      	mov	r0, r3
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	20000b74 	.word	0x20000b74

0800a364 <MOTOR_getPosDiff>:

int32_t MOTOR_getPosDiff()
{
 800a364:	b480      	push	{r7}
 800a366:	af00      	add	r7, sp, #0
	return /*MOTOR_Model.polarity * */ (MOTOR_Model.target - g_IncSteps);
 800a368:	4b04      	ldr	r3, [pc, #16]	; (800a37c <MOTOR_getPosDiff+0x18>)
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	4b04      	ldr	r3, [pc, #16]	; (800a380 <MOTOR_getPosDiff+0x1c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	1ad3      	subs	r3, r2, r3
}
 800a372:	4618      	mov	r0, r3
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	20000b74 	.word	0x20000b74
 800a380:	200006e4 	.word	0x200006e4

0800a384 <_Z8MT_Clearv>:
	uint32_t estimate_time;  // ms
	uint32_t use_time;       // ms
}MT_ResultBlock;

void MT_Clear()
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
	g_MotionDriveHandle.target = g_IncSteps;
 800a388:	4b15      	ldr	r3, [pc, #84]	; (800a3e0 <_Z8MT_Clearv+0x5c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a15      	ldr	r2, [pc, #84]	; (800a3e4 <_Z8MT_Clearv+0x60>)
 800a38e:	6013      	str	r3, [r2, #0]

	g_MotionDriveHandle.switchPoint = 0;
 800a390:	4b14      	ldr	r3, [pc, #80]	; (800a3e4 <_Z8MT_Clearv+0x60>)
 800a392:	2200      	movs	r2, #0
 800a394:	605a      	str	r2, [r3, #4]
	g_MotionDriveHandle.homePoint = 0;
 800a396:	4b13      	ldr	r3, [pc, #76]	; (800a3e4 <_Z8MT_Clearv+0x60>)
 800a398:	2200      	movs	r2, #0
 800a39a:	609a      	str	r2, [r3, #8]

	g_MotionDriveHandle.adMode = MT_ADMode_Normal;
 800a39c:	4b11      	ldr	r3, [pc, #68]	; (800a3e4 <_Z8MT_Clearv+0x60>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	731a      	strb	r2, [r3, #12]
	g_MotionDriveHandle.lock   = 0;
 800a3a2:	4b10      	ldr	r3, [pc, #64]	; (800a3e4 <_Z8MT_Clearv+0x60>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/*Default settings*/
	g_MotionDriveHandle.reachWindow = 8;
 800a3aa:	4b0e      	ldr	r3, [pc, #56]	; (800a3e4 <_Z8MT_Clearv+0x60>)
 800a3ac:	2208      	movs	r2, #8
 800a3ae:	611a      	str	r2, [r3, #16]

	g_MotionDriveHandle.state = MTS_Idle;
 800a3b0:	4b0c      	ldr	r3, [pc, #48]	; (800a3e4 <_Z8MT_Clearv+0x60>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	g_MotionDriveHandle.reqblock.state = MRS_Empty;
 800a3b8:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <_Z8MT_Clearv+0x60>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	g_MotionDriveHandle.reachCB = NULL;
 800a3c0:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <_Z8MT_Clearv+0x60>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	621a      	str	r2, [r3, #32]
	g_MotionDriveHandle.motionStartPreCB = NULL;
 800a3c6:	4b07      	ldr	r3, [pc, #28]	; (800a3e4 <_Z8MT_Clearv+0x60>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	625a      	str	r2, [r3, #36]	; 0x24

	g_MotionDriveHandle.correctingState  = MCRT_Stop;
 800a3cc:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <_Z8MT_Clearv+0x60>)
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/*Initialize the profile parameters*/
	MT_setProfile(&g_NodeDriveProfile);
 800a3d4:	4804      	ldr	r0, [pc, #16]	; (800a3e8 <_Z8MT_Clearv+0x64>)
 800a3d6:	f000 f83f 	bl	800a458 <MT_setProfile>
}
 800a3da:	bf00      	nop
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	200006e4 	.word	0x200006e4
 800a3e4:	20000b84 	.word	0x20000b84
 800a3e8:	20000af4 	.word	0x20000af4

0800a3ec <MT_Reset>:

void MT_Reset()
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	af00      	add	r7, sp, #0
	MT_Clear();
 800a3f0:	f7ff ffc8 	bl	800a384 <_Z8MT_Clearv>

	/*Reset the queue and list*/
	if (g_MotionDriveHandle.msgQueue){
 800a3f4:	4b05      	ldr	r3, [pc, #20]	; (800a40c <MT_Reset+0x20>)
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d005      	beq.n	800a408 <MT_Reset+0x1c>
		xQueueReset( g_MotionDriveHandle.msgQueue);
 800a3fc:	4b03      	ldr	r3, [pc, #12]	; (800a40c <MT_Reset+0x20>)
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	2100      	movs	r1, #0
 800a402:	4618      	mov	r0, r3
 800a404:	f009 f9fc 	bl	8013800 <xQueueGenericReset>
	}
}
 800a408:	bf00      	nop
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	20000b84 	.word	0x20000b84

0800a410 <MT_Begin>:

void MT_Begin()
{
 800a410:	b580      	push	{r7, lr}
 800a412:	af00      	add	r7, sp, #0
	MT_Reset();
 800a414:	f7ff ffea 	bl	800a3ec <MT_Reset>

	/*Start motor PWM timer*/
	HAL_TIM_Base_Start_IT(&htim5);
 800a418:	4802      	ldr	r0, [pc, #8]	; (800a424 <MT_Begin+0x14>)
 800a41a:	f006 ff32 	bl	8011282 <HAL_TIM_Base_Start_IT>
}
 800a41e:	bf00      	nop
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	2000087c 	.word	0x2000087c

0800a428 <MT_Loop>:

void MT_Loop(uint32_t ticks)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
	/*Synchronize the current steps*/
	g_MotionCtrl.currentPos = g_IncSteps;
 800a430:	4b07      	ldr	r3, [pc, #28]	; (800a450 <MT_Loop+0x28>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a07      	ldr	r2, [pc, #28]	; (800a454 <MT_Loop+0x2c>)
 800a436:	6053      	str	r3, [r2, #4]

	/*Synchronize the current velocity*/
	g_MotionCtrl.currentVel = MOTOR_getSpeed();
 800a438:	f7ff ff4c 	bl	800a2d4 <MOTOR_getSpeed>
 800a43c:	4603      	mov	r3, r0
 800a43e:	4a05      	ldr	r2, [pc, #20]	; (800a454 <MT_Loop+0x2c>)
 800a440:	6093      	str	r3, [r2, #8]

	/*Check motor status routine*/
	MOTOR_loop(ticks);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff fefe 	bl	800a244 <MOTOR_loop>
}
 800a448:	bf00      	nop
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	200006e4 	.word	0x200006e4
 800a454:	20000a44 	.word	0x20000a44

0800a458 <MT_setProfile>:

void MT_setProfile(Node_DriveProfile_t* profile)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
	MOTOR_setPolarity(-1);
 800a460:	f04f 30ff 	mov.w	r0, #4294967295
 800a464:	f7ff fef8 	bl	800a258 <MOTOR_setPolarity>
	MOTOR_setAbsTarget(g_IncSteps);
 800a468:	4b07      	ldr	r3, [pc, #28]	; (800a488 <MT_setProfile+0x30>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7ff ff57 	bl	800a320 <MOTOR_setAbsTarget>
	g_MotionDriveHandle.switchdir = profile->switchdir; // default 0
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	785b      	ldrb	r3, [r3, #1]
 800a476:	b25a      	sxtb	r2, r3
 800a478:	4b04      	ldr	r3, [pc, #16]	; (800a48c <MT_setProfile+0x34>)
 800a47a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 800a47e:	bf00      	nop
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	200006e4 	.word	0x200006e4
 800a48c:	20000b84 	.word	0x20000b84

0800a490 <MT_Init>:

void MT_Init(QueueHandle_t msgQueue)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
	MT_Reset();
 800a498:	f7ff ffa8 	bl	800a3ec <MT_Reset>

	g_MotionDriveHandle.msgQueue = msgQueue;
 800a49c:	4a0b      	ldr	r2, [pc, #44]	; (800a4cc <MT_Init+0x3c>)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6193      	str	r3, [r2, #24]
	g_MotionDriveHandle.reqblock.state = MRS_Empty;
 800a4a2:	4b0a      	ldr	r3, [pc, #40]	; (800a4cc <MT_Init+0x3c>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	/* Initialize position profile model*/
	PosProfile_Initialize();
 800a4aa:	f001 fb4d 	bl	800bb48 <PosProfile_Initialize>

	/* Initialize pid profile*/
	PIDProfile_Initialize(0.49f, 1.21f, -0.28f, 1.76f);
 800a4ae:	eddf 1a08 	vldr	s3, [pc, #32]	; 800a4d0 <MT_Init+0x40>
 800a4b2:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800a4d4 <MT_Init+0x44>
 800a4b6:	eddf 0a08 	vldr	s1, [pc, #32]	; 800a4d8 <MT_Init+0x48>
 800a4ba:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a4dc <MT_Init+0x4c>
 800a4be:	f7ff fd53 	bl	8009f68 <PIDProfile_Initialize>
}
 800a4c2:	bf00      	nop
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20000b84 	.word	0x20000b84
 800a4d0:	3fe147ae 	.word	0x3fe147ae
 800a4d4:	be8f5c29 	.word	0xbe8f5c29
 800a4d8:	3f9ae148 	.word	0x3f9ae148
 800a4dc:	3efae148 	.word	0x3efae148

0800a4e0 <MT_setReachCallback>:

void MT_setReachCallback(void (*pFunct)(int32_t position))
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	g_MotionDriveHandle.reachCB = pFunct;
 800a4e8:	4a04      	ldr	r2, [pc, #16]	; (800a4fc <MT_setReachCallback+0x1c>)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6213      	str	r3, [r2, #32]
}
 800a4ee:	bf00      	nop
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20000b84 	.word	0x20000b84

0800a500 <MT_setMotionStartPreCallback>:

void MT_setMotionStartPreCallback(void (*pFunct)())
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
	g_MotionDriveHandle.motionStartPreCB = pFunct;
 800a508:	4a04      	ldr	r2, [pc, #16]	; (800a51c <MT_setMotionStartPreCallback+0x1c>)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	20000b84 	.word	0x20000b84

0800a520 <MT_setReachWindow>:

/*32 multiples number for window is the best*/
void MT_setReachWindow(int32_t window)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
	vPortEnterCritical();
 800a528:	f00b fd7c 	bl	8016024 <vPortEnterCritical>
	g_MotionDriveHandle.reachWindow = window;
 800a52c:	4a04      	ldr	r2, [pc, #16]	; (800a540 <MT_setReachWindow+0x20>)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6113      	str	r3, [r2, #16]
	vPortExitCritical();
 800a532:	f00b fda7 	bl	8016084 <vPortExitCritical>
}
 800a536:	bf00      	nop
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20000b84 	.word	0x20000b84

0800a544 <_Z8MT_StartP14MotionMsgItem_m>:

void MT_Start(MotionMsgItem_t* pitem, uint32_t ticks)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
	real32_T ts = (real32_T)ticks / 1000.0f;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	ee07 3a90 	vmov	s15, r3
 800a554:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a558:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800a6cc <_Z8MT_StartP14MotionMsgItem_m+0x188>
 800a55c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a560:	edc7 7a07 	vstr	s15, [r7, #28]

	/*Current velocity from motor model*/
	real32_T curVel = (real32_T)MOTOR_getSpeed();
 800a564:	f7ff feb6 	bl	800a2d4 <MOTOR_getSpeed>
 800a568:	ee07 0a90 	vmov	s15, r0
 800a56c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a570:	edc7 7a06 	vstr	s15, [r7, #24]

	uint32_t maxJerk = pitem->acceleration;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	edd3 7a03 	vldr	s15, [r3, #12]
 800a57a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a57e:	ee17 3a90 	vmov	r3, s15
 800a582:	617b      	str	r3, [r7, #20]

	if (pitem->code == MMC_MotionHalt){
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	f240 2206 	movw	r2, #518	; 0x206
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d11c      	bne.n	800a5ca <_Z8MT_StartP14MotionMsgItem_m+0x86>
		/*Act halt definition, use halt deceleration
		 * start halt motion*/
		PosProfile_StartHalt(curVel, maxJerk, ts);
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59a:	ed97 1a07 	vldr	s2, [r7, #28]
 800a59e:	eef0 0a67 	vmov.f32	s1, s15
 800a5a2:	ed97 0a06 	vldr	s0, [r7, #24]
 800a5a6:	f001 fb49 	bl	800bc3c <PosProfile_StartHalt>
		pitem->position = PosProfile_GetTargetPos();
 800a5aa:	f001 fbc3 	bl	800bd34 <PosProfile_GetTargetPos>
 800a5ae:	eef0 7a40 	vmov.f32	s15, s0
 800a5b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5b6:	ee17 2a90 	vmov	r2, s15
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	605a      	str	r2, [r3, #4]
		MOTOR_setRelTarget(pitem->position);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7ff fe92 	bl	800a2ec <MOTOR_setRelTarget>
 800a5c8:	e055      	b.n	800a676 <_Z8MT_StartP14MotionMsgItem_m+0x132>
	}else{
		/*0x6083  accelerate*/
		real32_T maxAcce = pitem->acceleration / 200.0F;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	ed93 7a03 	vldr	s14, [r3, #12]
 800a5d0:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800a6d0 <_Z8MT_StartP14MotionMsgItem_m+0x18c>
 800a5d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5d8:	edc7 7a04 	vstr	s15, [r7, #16]

		/*0x6081  profile velocity*/
		real32_T maxVel  = pitem->velocity / 200.0F;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	ed93 7a02 	vldr	s14, [r3, #8]
 800a5e2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a6d0 <_Z8MT_StartP14MotionMsgItem_m+0x18c>
 800a5e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5ea:	edc7 7a03 	vstr	s15, [r7, #12]

		if (pitem->abs)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	7c9b      	ldrb	r3, [r3, #18]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d005      	beq.n	800a602 <_Z8MT_StartP14MotionMsgItem_m+0xbe>
			MOTOR_setAbsTarget(pitem->position);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff fe90 	bl	800a320 <MOTOR_setAbsTarget>
 800a600:	e004      	b.n	800a60c <_Z8MT_StartP14MotionMsgItem_m+0xc8>
		else
			MOTOR_setRelTarget(pitem->position);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	4618      	mov	r0, r3
 800a608:	f7ff fe70 	bl	800a2ec <MOTOR_setRelTarget>

		pitem->position = MOTOR_getPosDiff();
 800a60c:	f7ff feaa 	bl	800a364 <MOTOR_getPosDiff>
 800a610:	4602      	mov	r2, r0
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	605a      	str	r2, [r3, #4]

		/*Motion start from current pos to request position*/
		PosProfile_Start(pitem->position/200.0f,
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	ee07 3a90 	vmov	s15, r3
 800a61e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a622:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800a6d0 <_Z8MT_StartP14MotionMsgItem_m+0x18c>
 800a626:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a62a:	edd7 7a06 	vldr	s15, [r7, #24]
 800a62e:	ed9f 6a28 	vldr	s12, [pc, #160]	; 800a6d0 <_Z8MT_StartP14MotionMsgItem_m+0x18c>
 800a632:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	ee07 3a90 	vmov	s15, r3
 800a63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a640:	eddf 5a23 	vldr	s11, [pc, #140]	; 800a6d0 <_Z8MT_StartP14MotionMsgItem_m+0x18c>
 800a644:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800a648:	ed97 3a07 	vldr	s6, [r7, #28]
 800a64c:	eef0 2a46 	vmov.f32	s5, s12
 800a650:	ed97 2a04 	vldr	s4, [r7, #16]
 800a654:	edd7 1a03 	vldr	s3, [r7, #12]
 800a658:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 800a6d4 <_Z8MT_StartP14MotionMsgItem_m+0x190>
 800a65c:	eef0 0a66 	vmov.f32	s1, s13
 800a660:	eeb0 0a47 	vmov.f32	s0, s14
 800a664:	f001 fa82 	bl	800bb6c <PosProfile_Start>
						 curVel/200.0f, 0,
						 maxVel, maxAcce, maxJerk/200.0F, ts);

		/*Acknowledge a motion request*/
		if (g_MotionDriveHandle.motionStartPreCB){
 800a668:	4b1b      	ldr	r3, [pc, #108]	; (800a6d8 <_Z8MT_StartP14MotionMsgItem_m+0x194>)
 800a66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <_Z8MT_StartP14MotionMsgItem_m+0x132>
			g_MotionDriveHandle.motionStartPreCB();
 800a670:	4b19      	ldr	r3, [pc, #100]	; (800a6d8 <_Z8MT_StartP14MotionMsgItem_m+0x194>)
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	4798      	blx	r3
		}
	}

	/*Setting the current motion request, start inhibit timer*/
	g_MotionDriveHandle.reqblock.state = MRS_Running;
 800a676:	4b18      	ldr	r3, [pc, #96]	; (800a6d8 <_Z8MT_StartP14MotionMsgItem_m+0x194>)
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	g_MotionDriveHandle.reqblock.inhibittime = 0;
 800a67e:	4b16      	ldr	r3, [pc, #88]	; (800a6d8 <_Z8MT_StartP14MotionMsgItem_m+0x194>)
 800a680:	2200      	movs	r2, #0
 800a682:	635a      	str	r2, [r3, #52]	; 0x34
	g_MotionDriveHandle.reqblock.reachcounter = 0;
 800a684:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <_Z8MT_StartP14MotionMsgItem_m+0x194>)
 800a686:	2200      	movs	r2, #0
 800a688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	/*Stop the PID correcting*/
	g_MotionDriveHandle.correctingState = MCRT_Stop;
 800a68c:	4b12      	ldr	r3, [pc, #72]	; (800a6d8 <_Z8MT_StartP14MotionMsgItem_m+0x194>)
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/*Reset the motion state*/
	if (pitem->code == MMC_TargetSet)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	881b      	ldrh	r3, [r3, #0]
 800a698:	f240 2201 	movw	r2, #513	; 0x201
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d104      	bne.n	800a6aa <_Z8MT_StartP14MotionMsgItem_m+0x166>
		g_MotionDriveHandle.state = MTS_Running;
 800a6a0:	4b0d      	ldr	r3, [pc, #52]	; (800a6d8 <_Z8MT_StartP14MotionMsgItem_m+0x194>)
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a6a8:	e009      	b.n	800a6be <_Z8MT_StartP14MotionMsgItem_m+0x17a>
	else if (pitem->code == MMC_MotionUpdated)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	881b      	ldrh	r3, [r3, #0]
 800a6ae:	f240 2205 	movw	r2, #517	; 0x205
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d103      	bne.n	800a6be <_Z8MT_StartP14MotionMsgItem_m+0x17a>
		g_MotionDriveHandle.state = MTS_Updated;
 800a6b6:	4b08      	ldr	r3, [pc, #32]	; (800a6d8 <_Z8MT_StartP14MotionMsgItem_m+0x194>)
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	/*Start motor*/
	MOTOR_run();
 800a6be:	f7ff fdaf 	bl	800a220 <MOTOR_run>
}
 800a6c2:	bf00      	nop
 800a6c4:	3720      	adds	r7, #32
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	447a0000 	.word	0x447a0000
 800a6d0:	43480000 	.word	0x43480000
 800a6d4:	00000000 	.word	0x00000000
 800a6d8:	20000b84 	.word	0x20000b84

0800a6dc <_Z14MT_ProfileStepP16MT_RequestBlock_m>:

void MT_ProfileStep(MT_RequestBlock* req, uint32_t ticks)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
	int32_t perr = MOTOR_getPosDiff();
 800a6e6:	f7ff fe3d 	bl	800a364 <MOTOR_getPosDiff>
 800a6ea:	60f8      	str	r0, [r7, #12]

	PosProfile_Step(perr);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6f6:	eeb0 0a67 	vmov.f32	s0, s15
 800a6fa:	f000 fb1d 	bl	800ad38 <PosProfile_Step>
	MOTOR_setSpeed((int32_t)roundf(rtY.CmdVel * 200.0f));
 800a6fe:	4b0e      	ldr	r3, [pc, #56]	; (800a738 <_Z14MT_ProfileStepP16MT_RequestBlock_m+0x5c>)
 800a700:	edd3 7a01 	vldr	s15, [r3, #4]
 800a704:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a73c <_Z14MT_ProfileStepP16MT_RequestBlock_m+0x60>
 800a708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a70c:	eeb0 0a67 	vmov.f32	s0, s15
 800a710:	f00c fa56 	bl	8016bc0 <roundf>
 800a714:	eef0 7a40 	vmov.f32	s15, s0
 800a718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a71c:	ee17 0a90 	vmov	r0, s15
 800a720:	f7ff fdaa 	bl	800a278 <MOTOR_setSpeed>

	req->inhibittime += ticks;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	441a      	add	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	609a      	str	r2, [r3, #8]
}
 800a730:	bf00      	nop
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	20000c00 	.word	0x20000c00
 800a73c:	43480000 	.word	0x43480000

0800a740 <_Z11MT_OverTimeP16MT_RequestBlock_>:

boolean_T MT_OverTime(MT_RequestBlock* req)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
	return PosProfile_StepOver(req->inhibittime);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f001 fb0d 	bl	800bd6c <PosProfile_StepOver>
 800a752:	4603      	mov	r3, r0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <_Z8MT_ReachP16MT_RequestBlock_>:

void MT_Reach(MT_RequestBlock* req)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
	MOTOR_stop();
 800a764:	f7ff fd62 	bl	800a22c <MOTOR_stop>

	if (g_MotionDriveHandle.state != MTS_Halting){
 800a768:	4b0c      	ldr	r3, [pc, #48]	; (800a79c <_Z8MT_ReachP16MT_RequestBlock_+0x40>)
 800a76a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a76e:	2b03      	cmp	r3, #3
 800a770:	d009      	beq.n	800a786 <_Z8MT_ReachP16MT_RequestBlock_+0x2a>
		if (g_MotionDriveHandle.reachCB){
 800a772:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <_Z8MT_ReachP16MT_RequestBlock_+0x40>)
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d005      	beq.n	800a786 <_Z8MT_ReachP16MT_RequestBlock_+0x2a>
			g_MotionDriveHandle.reachCB(g_IncSteps);
 800a77a:	4b08      	ldr	r3, [pc, #32]	; (800a79c <_Z8MT_ReachP16MT_RequestBlock_+0x40>)
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	4a08      	ldr	r2, [pc, #32]	; (800a7a0 <_Z8MT_ReachP16MT_RequestBlock_+0x44>)
 800a780:	6812      	ldr	r2, [r2, #0]
 800a782:	4610      	mov	r0, r2
 800a784:	4798      	blx	r3
		}
	}

	g_MotionDriveHandle.state = MTS_Idle;
 800a786:	4b05      	ldr	r3, [pc, #20]	; (800a79c <_Z8MT_ReachP16MT_RequestBlock_+0x40>)
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	req->state = MRS_Empty;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	731a      	strb	r2, [r3, #12]
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	20000b84 	.word	0x20000b84
 800a7a0:	200006e4 	.word	0x200006e4

0800a7a4 <_Z10MT_IsReachP16MT_RequestBlock_>:

boolean_T MT_IsReach(MT_RequestBlock* req)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
	if (g_MotionDriveHandle.state == MTS_Halting){
 800a7ac:	4b17      	ldr	r3, [pc, #92]	; (800a80c <_Z10MT_IsReachP16MT_RequestBlock_+0x68>)
 800a7ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	d101      	bne.n	800a7ba <_Z10MT_IsReachP16MT_RequestBlock_+0x16>
		/*do motor stop*/
		return true;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e024      	b.n	800a804 <_Z10MT_IsReachP16MT_RequestBlock_+0x60>
	}

	int32_t diff = abs(MOTOR_getPosDiff());
 800a7ba:	f7ff fdd3 	bl	800a364 <MOTOR_getPosDiff>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7ff fbf1 	bl	8009fa8 <_ZSt3absl>
 800a7c6:	60f8      	str	r0, [r7, #12]
	if (diff <= g_MotionDriveHandle.reachWindow){
 800a7c8:	4b10      	ldr	r3, [pc, #64]	; (800a80c <_Z10MT_IsReachP16MT_RequestBlock_+0x68>)
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	dc14      	bgt.n	800a7fc <_Z10MT_IsReachP16MT_RequestBlock_+0x58>
		if (++(req->reachcounter) > REACH_OVER_COUNT)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	3301      	adds	r3, #1
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	b25a      	sxtb	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	735a      	strb	r2, [r3, #13]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800a7ea:	2b05      	cmp	r3, #5
 800a7ec:	bfcc      	ite	gt
 800a7ee:	2301      	movgt	r3, #1
 800a7f0:	2300      	movle	r3, #0
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d004      	beq.n	800a802 <_Z10MT_IsReachP16MT_RequestBlock_+0x5e>
			return true;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e003      	b.n	800a804 <_Z10MT_IsReachP16MT_RequestBlock_+0x60>
	}else{
		/*Reset reach counter*/
		req->reachcounter = 0;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	735a      	strb	r2, [r3, #13]
	}

	return false;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20000b84 	.word	0x20000b84

0800a810 <_Z17MT_CorrectingStepm>:

void MT_CorrectingStep(uint32_t ticks)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
	real32_T ts = ticks/1000.0f;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	ee07 3a90 	vmov	s15, r3
 800a81e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a822:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800a860 <_Z17MT_CorrectingStepm+0x50>
 800a826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a82a:	edc7 7a03 	vstr	s15, [r7, #12]

	PIDProfile_Step(ts, g_IncSteps);
 800a82e:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <_Z17MT_CorrectingStepm+0x54>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a83a:	eef0 0a67 	vmov.f32	s1, s15
 800a83e:	ed97 0a03 	vldr	s0, [r7, #12]
 800a842:	f7ff fad3 	bl	8009dec <PIDProfile_Step>
	MOTOR_setSpeed((int32_t)(rtPIDY.CmdVel));
 800a846:	4b08      	ldr	r3, [pc, #32]	; (800a868 <_Z17MT_CorrectingStepm+0x58>)
 800a848:	edd3 7a01 	vldr	s15, [r3, #4]
 800a84c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a850:	ee17 0a90 	vmov	r0, s15
 800a854:	f7ff fd10 	bl	800a278 <MOTOR_setSpeed>
}
 800a858:	bf00      	nop
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	447a0000 	.word	0x447a0000
 800a864:	200006e4 	.word	0x200006e4
 800a868:	20000b68 	.word	0x20000b68

0800a86c <_Z13MT_CorrectingP16MT_RequestBlock_m>:

void MT_Correcting(MT_RequestBlock* req, uint32_t ticks)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
	int32_t diff = abs(MOTOR_getPosDiff());
 800a876:	f7ff fd75 	bl	800a364 <MOTOR_getPosDiff>
 800a87a:	4603      	mov	r3, r0
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7ff fb93 	bl	8009fa8 <_ZSt3absl>
 800a882:	60f8      	str	r0, [r7, #12]
	if (diff > g_MotionDriveHandle.reachWindow){
 800a884:	4b15      	ldr	r3, [pc, #84]	; (800a8dc <_Z13MT_CorrectingP16MT_RequestBlock_m+0x70>)
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	dd1a      	ble.n	800a8c4 <_Z13MT_CorrectingP16MT_RequestBlock_m+0x58>
		if (g_MotionDriveHandle.correctingState == MCRT_Stop){
 800a88e:	4b13      	ldr	r3, [pc, #76]	; (800a8dc <_Z13MT_CorrectingP16MT_RequestBlock_m+0x70>)
 800a890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a894:	2b01      	cmp	r3, #1
 800a896:	d115      	bne.n	800a8c4 <_Z13MT_CorrectingP16MT_RequestBlock_m+0x58>

			/*Correcting PID start, from current pos to target position*/
			PIDProfile_Start(MOTOR_getTarget(), 1200.0f, 1000.0f, 1000.0f);
 800a898:	f7ff fd58 	bl	800a34c <MOTOR_getTarget>
 800a89c:	ee07 0a90 	vmov	s15, r0
 800a8a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8a4:	eddf 1a0e 	vldr	s3, [pc, #56]	; 800a8e0 <_Z13MT_CorrectingP16MT_RequestBlock_m+0x74>
 800a8a8:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 800a8e0 <_Z13MT_CorrectingP16MT_RequestBlock_m+0x74>
 800a8ac:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800a8e4 <_Z13MT_CorrectingP16MT_RequestBlock_m+0x78>
 800a8b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a8b4:	f7ff fb2a 	bl	8009f0c <PIDProfile_Start>
			g_MotionDriveHandle.correctingState = MCRT_Act;
 800a8b8:	4b08      	ldr	r3, [pc, #32]	; (800a8dc <_Z13MT_CorrectingP16MT_RequestBlock_m+0x70>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			MOTOR_run();
 800a8c0:	f7ff fcae 	bl	800a220 <MOTOR_run>
		}
	}

	if (g_MotionDriveHandle.correctingState == MCRT_Act){
 800a8c4:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <_Z13MT_CorrectingP16MT_RequestBlock_m+0x70>)
 800a8c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d102      	bne.n	800a8d4 <_Z13MT_CorrectingP16MT_RequestBlock_m+0x68>
		MT_CorrectingStep(ticks);
 800a8ce:	6838      	ldr	r0, [r7, #0]
 800a8d0:	f7ff ff9e 	bl	800a810 <_Z17MT_CorrectingStepm>
	}
}
 800a8d4:	bf00      	nop
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	20000b84 	.word	0x20000b84
 800a8e0:	447a0000 	.word	0x447a0000
 800a8e4:	44960000 	.word	0x44960000

0800a8e8 <MT_Halt>:

void MT_Halt(uint32_t dece)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
	/* Use the deceleration defined in 0x6084 to halt*/
	g_MotionDriveHandle.state = MTS_Halting;
 800a8f0:	4b18      	ldr	r3, [pc, #96]	; (800a954 <MT_Halt+0x6c>)
 800a8f2:	2203      	movs	r2, #3
 800a8f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	/* Clear motion item queue*/
	if (uxQueueGetQueueNumber(g_MotionDriveHandle.msgQueue) > 0){
 800a8f8:	4b16      	ldr	r3, [pc, #88]	; (800a954 <MT_Halt+0x6c>)
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f009 fd85 	bl	801440c <uxQueueGetQueueNumber>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	bf14      	ite	ne
 800a908:	2301      	movne	r3, #1
 800a90a:	2300      	moveq	r3, #0
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d005      	beq.n	800a91e <MT_Halt+0x36>
		xQueueReset(g_MotionDriveHandle.msgQueue);
 800a912:	4b10      	ldr	r3, [pc, #64]	; (800a954 <MT_Halt+0x6c>)
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	2100      	movs	r1, #0
 800a918:	4618      	mov	r0, r3
 800a91a:	f008 ff71 	bl	8013800 <xQueueGenericReset>
	}

	MotionMsgItem_t item;

	item.position = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	613b      	str	r3, [r7, #16]
	item.velocity = 0;
 800a922:	f04f 0300 	mov.w	r3, #0
 800a926:	617b      	str	r3, [r7, #20]
	item.acceleration = dece;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a932:	edc7 7a06 	vstr	s15, [r7, #24]
	item.code = MMC_MotionHalt;
 800a936:	f240 2306 	movw	r3, #518	; 0x206
 800a93a:	81bb      	strh	r3, [r7, #12]

	xQueueSend(g_MotionDriveHandle.msgQueue, &item, 0);
 800a93c:	4b05      	ldr	r3, [pc, #20]	; (800a954 <MT_Halt+0x6c>)
 800a93e:	6998      	ldr	r0, [r3, #24]
 800a940:	f107 010c 	add.w	r1, r7, #12
 800a944:	2300      	movs	r3, #0
 800a946:	2200      	movs	r2, #0
 800a948:	f009 f8d0 	bl	8013aec <xQueueGenericSend>
}
 800a94c:	bf00      	nop
 800a94e:	3720      	adds	r7, #32
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20000b84 	.word	0x20000b84

0800a958 <MT_UpdateTask>:

void MT_UpdateTask(uint8_t absolute, int32_t target, int32_t vel, uint32_t acce)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b08a      	sub	sp, #40	; 0x28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60b9      	str	r1, [r7, #8]
 800a960:	607a      	str	r2, [r7, #4]
 800a962:	603b      	str	r3, [r7, #0]
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]
	/* Update current motion task*/
	g_MotionDriveHandle.state = MTS_Updated;
 800a968:	4b1c      	ldr	r3, [pc, #112]	; (800a9dc <MT_UpdateTask+0x84>)
 800a96a:	2202      	movs	r2, #2
 800a96c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	/* Clear motion item queue*/
	if (uxQueueGetQueueNumber(g_MotionDriveHandle.msgQueue) > 0){
 800a970:	4b1a      	ldr	r3, [pc, #104]	; (800a9dc <MT_UpdateTask+0x84>)
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	4618      	mov	r0, r3
 800a976:	f009 fd49 	bl	801440c <uxQueueGetQueueNumber>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	bf14      	ite	ne
 800a980:	2301      	movne	r3, #1
 800a982:	2300      	moveq	r3, #0
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d005      	beq.n	800a996 <MT_UpdateTask+0x3e>
		xQueueReset(g_MotionDriveHandle.msgQueue);
 800a98a:	4b14      	ldr	r3, [pc, #80]	; (800a9dc <MT_UpdateTask+0x84>)
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	2100      	movs	r1, #0
 800a990:	4618      	mov	r0, r3
 800a992:	f008 ff35 	bl	8013800 <xQueueGenericReset>
	}

	MotionMsgItem_t item;

	item.position = target;
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	61bb      	str	r3, [r7, #24]
	item.velocity = vel;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	ee07 3a90 	vmov	s15, r3
 800a9a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9a4:	edc7 7a07 	vstr	s15, [r7, #28]
	item.acceleration = acce;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b2:	edc7 7a08 	vstr	s15, [r7, #32]
	item.code = MMC_MotionUpdated;
 800a9b6:	f240 2305 	movw	r3, #517	; 0x205
 800a9ba:	82bb      	strh	r3, [r7, #20]
	item.abs  = absolute;
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	xQueueSend(g_MotionDriveHandle.msgQueue, &item, 0);
 800a9c2:	4b06      	ldr	r3, [pc, #24]	; (800a9dc <MT_UpdateTask+0x84>)
 800a9c4:	6998      	ldr	r0, [r3, #24]
 800a9c6:	f107 0114 	add.w	r1, r7, #20
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f009 f88d 	bl	8013aec <xQueueGenericSend>
}
 800a9d2:	bf00      	nop
 800a9d4:	3728      	adds	r7, #40	; 0x28
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	20000b84 	.word	0x20000b84

0800a9e0 <MT_NewTask>:

void MT_NewTask(uint8_t absolute, int32_t target, int32_t vel, uint32_t acce)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	; 0x28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60b9      	str	r1, [r7, #8]
 800a9e8:	607a      	str	r2, [r7, #4]
 800a9ea:	603b      	str	r3, [r7, #0]
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	73fb      	strb	r3, [r7, #15]
	/* Create new motion task and insert into msg queue*/
	MotionMsgItem_t item;

	item.position = target;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	61bb      	str	r3, [r7, #24]
	item.velocity = vel;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	ee07 3a90 	vmov	s15, r3
 800a9fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9fe:	edc7 7a07 	vstr	s15, [r7, #28]
	item.acceleration = acce;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	ee07 3a90 	vmov	s15, r3
 800aa08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0c:	edc7 7a08 	vstr	s15, [r7, #32]
	item.code = MMC_TargetSet;
 800aa10:	f240 2301 	movw	r3, #513	; 0x201
 800aa14:	82bb      	strh	r3, [r7, #20]
	item.abs  = absolute;
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	xQueueSend(g_MotionDriveHandle.msgQueue, &item, 0);
 800aa1c:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <MT_NewTask+0x54>)
 800aa1e:	6998      	ldr	r0, [r3, #24]
 800aa20:	f107 0114 	add.w	r1, r7, #20
 800aa24:	2300      	movs	r3, #0
 800aa26:	2200      	movs	r2, #0
 800aa28:	f009 f860 	bl	8013aec <xQueueGenericSend>
}
 800aa2c:	bf00      	nop
 800aa2e:	3728      	adds	r7, #40	; 0x28
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	20000b84 	.word	0x20000b84

0800aa38 <MT_process_v3>:

void MT_process_v3(uint32_t ticks)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08a      	sub	sp, #40	; 0x28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
	MotionMsgItem_t item;

	if (g_MotionDriveHandle.state == MTS_Idle ||
 800aa40:	4b35      	ldr	r3, [pc, #212]	; (800ab18 <MT_process_v3+0xe0>)
 800aa42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d009      	beq.n	800aa5e <MT_process_v3+0x26>
		g_MotionDriveHandle.state == MTS_Halting ||
 800aa4a:	4b33      	ldr	r3, [pc, #204]	; (800ab18 <MT_process_v3+0xe0>)
 800aa4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (g_MotionDriveHandle.state == MTS_Idle ||
 800aa50:	2b03      	cmp	r3, #3
 800aa52:	d004      	beq.n	800aa5e <MT_process_v3+0x26>
		g_MotionDriveHandle.state == MTS_Updated){
 800aa54:	4b30      	ldr	r3, [pc, #192]	; (800ab18 <MT_process_v3+0xe0>)
 800aa56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
		g_MotionDriveHandle.state == MTS_Halting ||
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d122      	bne.n	800aaa4 <MT_process_v3+0x6c>
		/*High priority motion*/
		BaseType_t xTaskWokenByReceive = pdFALSE;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	60fb      	str	r3, [r7, #12]
		BaseType_t result = xQueueReceiveFromISR(g_MotionDriveHandle.msgQueue, &item, &xTaskWokenByReceive);
 800aa62:	4b2d      	ldr	r3, [pc, #180]	; (800ab18 <MT_process_v3+0xe0>)
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	f107 020c 	add.w	r2, r7, #12
 800aa6a:	f107 0110 	add.w	r1, r7, #16
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f009 fc4c 	bl	801430c <xQueueReceiveFromISR>
 800aa74:	6278      	str	r0, [r7, #36]	; 0x24
		if (result == pdPASS) {
 800aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d105      	bne.n	800aa88 <MT_process_v3+0x50>
			/*Motion plan and run*/
			MT_Start(&item, ticks);
 800aa7c:	f107 0310 	add.w	r3, r7, #16
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7ff fd5e 	bl	800a544 <_Z8MT_StartP14MotionMsgItem_m>
		}

		if(xTaskWokenByReceive == pdTRUE) {
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d10a      	bne.n	800aaa4 <MT_process_v3+0x6c>
			portYIELD_FROM_ISR (xTaskWokenByReceive);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d007      	beq.n	800aaa4 <MT_process_v3+0x6c>
 800aa94:	4b21      	ldr	r3, [pc, #132]	; (800ab1c <MT_process_v3+0xe4>)
 800aa96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa9a:	601a      	str	r2, [r3, #0]
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	f3bf 8f6f 	isb	sy
		}
	}

	/*step*/
	if (g_MotionDriveHandle.state == MTS_Halting ||
 800aaa4:	4b1c      	ldr	r3, [pc, #112]	; (800ab18 <MT_process_v3+0xe0>)
 800aaa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d009      	beq.n	800aac2 <MT_process_v3+0x8a>
		g_MotionDriveHandle.state == MTS_Updated ||
 800aaae:	4b1a      	ldr	r3, [pc, #104]	; (800ab18 <MT_process_v3+0xe0>)
 800aab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (g_MotionDriveHandle.state == MTS_Halting ||
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d004      	beq.n	800aac2 <MT_process_v3+0x8a>
		g_MotionDriveHandle.state == MTS_Running){
 800aab8:	4b17      	ldr	r3, [pc, #92]	; (800ab18 <MT_process_v3+0xe0>)
 800aaba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
		g_MotionDriveHandle.state == MTS_Updated ||
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d123      	bne.n	800ab0a <MT_process_v3+0xd2>

		if (g_MotionDriveHandle.reqblock.state != MRS_Empty){
 800aac2:	4b15      	ldr	r3, [pc, #84]	; (800ab18 <MT_process_v3+0xe0>)
 800aac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d01e      	beq.n	800ab0a <MT_process_v3+0xd2>
			if (!MT_OverTime(&g_MotionDriveHandle.reqblock)){
 800aacc:	4814      	ldr	r0, [pc, #80]	; (800ab20 <MT_process_v3+0xe8>)
 800aace:	f7ff fe37 	bl	800a740 <_Z11MT_OverTimeP16MT_RequestBlock_>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bf0c      	ite	eq
 800aad8:	2301      	moveq	r3, #1
 800aada:	2300      	movne	r3, #0
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d004      	beq.n	800aaec <MT_process_v3+0xb4>
				MT_ProfileStep(&g_MotionDriveHandle.reqblock, ticks);
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	480e      	ldr	r0, [pc, #56]	; (800ab20 <MT_process_v3+0xe8>)
 800aae6:	f7ff fdf9 	bl	800a6dc <_Z14MT_ProfileStepP16MT_RequestBlock_m>
				return;
 800aaea:	e012      	b.n	800ab12 <MT_process_v3+0xda>
			}else{
				if (MT_IsReach(&g_MotionDriveHandle.reqblock)){
 800aaec:	480c      	ldr	r0, [pc, #48]	; (800ab20 <MT_process_v3+0xe8>)
 800aaee:	f7ff fe59 	bl	800a7a4 <_Z10MT_IsReachP16MT_RequestBlock_>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bf14      	ite	ne
 800aaf8:	2301      	movne	r3, #1
 800aafa:	2300      	moveq	r3, #0
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <MT_process_v3+0xd2>
					MT_Reach(&g_MotionDriveHandle.reqblock);
 800ab02:	4807      	ldr	r0, [pc, #28]	; (800ab20 <MT_process_v3+0xe8>)
 800ab04:	f7ff fe2a 	bl	800a75c <_Z8MT_ReachP16MT_RequestBlock_>
					return;
 800ab08:	e003      	b.n	800ab12 <MT_process_v3+0xda>
			}
		}
	}

	/*prepare a correcting phase, and correcting step*/
	MT_Correcting(&g_MotionDriveHandle.reqblock, ticks);
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	4804      	ldr	r0, [pc, #16]	; (800ab20 <MT_process_v3+0xe8>)
 800ab0e:	f7ff fead 	bl	800a86c <_Z13MT_CorrectingP16MT_RequestBlock_m>
}
 800ab12:	3728      	adds	r7, #40	; 0x28
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	20000b84 	.word	0x20000b84
 800ab1c:	e000ed04 	.word	0xe000ed04
 800ab20:	20000bb0 	.word	0x20000bb0

0800ab24 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetInf(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800ab2a:	2340      	movs	r3, #64	; 0x40
 800ab2c:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800ab2e:	f04f 0200 	mov.w	r2, #0
 800ab32:	f04f 0300 	mov.w	r3, #0
 800ab36:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b20      	cmp	r3, #32
 800ab3e:	d10b      	bne.n	800ab58 <rtGetInf+0x34>
    inf = rtGetInfF();
 800ab40:	f000 f820 	bl	800ab84 <rtGetInfF>
 800ab44:	ee10 3a10 	vmov	r3, s0
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7f5 fcfd 	bl	8000548 <__aeabi_f2d>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ab56:	e007      	b.n	800ab68 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800ab58:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <rtGetInf+0x5c>)
 800ab5a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800ab60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab64:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800ab68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ab6c:	ec43 2b17 	vmov	d7, r2, r3
}
 800ab70:	eeb0 0a47 	vmov.f32	s0, s14
 800ab74:	eef0 0a67 	vmov.f32	s1, s15
 800ab78:	3718      	adds	r7, #24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	7ff00000 	.word	0x7ff00000

0800ab84 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetInfF(void)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800ab8a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800ab8e:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	ee07 3a90 	vmov	s15, r3
}
 800ab96:	eeb0 0a67 	vmov.f32	s0, s15
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetMinusInf(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800abaa:	2340      	movs	r3, #64	; 0x40
 800abac:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800abae:	f04f 0200 	mov.w	r2, #0
 800abb2:	f04f 0300 	mov.w	r3, #0
 800abb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2b20      	cmp	r3, #32
 800abbe:	d10b      	bne.n	800abd8 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800abc0:	f000 f820 	bl	800ac04 <rtGetMinusInfF>
 800abc4:	ee10 3a10 	vmov	r3, s0
 800abc8:	4618      	mov	r0, r3
 800abca:	f7f5 fcbd 	bl	8000548 <__aeabi_f2d>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800abd6:	e007      	b.n	800abe8 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800abd8:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <rtGetMinusInf+0x5c>)
 800abda:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800abdc:	2300      	movs	r3, #0
 800abde:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800abe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abe4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800abe8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800abec:	ec43 2b17 	vmov	d7, r2, r3
}
 800abf0:	eeb0 0a47 	vmov.f32	s0, s14
 800abf4:	eef0 0a67 	vmov.f32	s1, s15
 800abf8:	3718      	adds	r7, #24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	fff00000 	.word	0xfff00000

0800ac04 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetMinusInfF(void)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800ac0a:	4b06      	ldr	r3, [pc, #24]	; (800ac24 <rtGetMinusInfF+0x20>)
 800ac0c:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	ee07 3a90 	vmov	s15, r3
}
 800ac14:	eeb0 0a67 	vmov.f32	s0, s15
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	ff800000 	.word	0xff800000

0800ac28 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetNaN(void)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b086      	sub	sp, #24
 800ac2c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800ac2e:	2340      	movs	r3, #64	; 0x40
 800ac30:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800ac32:	f04f 0200 	mov.w	r2, #0
 800ac36:	f04f 0300 	mov.w	r3, #0
 800ac3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b20      	cmp	r3, #32
 800ac42:	d10b      	bne.n	800ac5c <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800ac44:	f000 f820 	bl	800ac88 <rtGetNaNF>
 800ac48:	ee10 3a10 	vmov	r3, s0
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7f5 fc7b 	bl	8000548 <__aeabi_f2d>
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ac5a:	e007      	b.n	800ac6c <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800ac5c:	4b09      	ldr	r3, [pc, #36]	; (800ac84 <rtGetNaN+0x5c>)
 800ac5e:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800ac60:	2300      	movs	r3, #0
 800ac62:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800ac64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac68:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800ac6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ac70:	ec43 2b17 	vmov	d7, r2, r3
}
 800ac74:	eeb0 0a47 	vmov.f32	s0, s14
 800ac78:	eef0 0a67 	vmov.f32	s1, s15
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	fff80000 	.word	0xfff80000

0800ac88 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetNaNF(void)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800ac8e:	f04f 0300 	mov.w	r3, #0
 800ac92:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <rtGetNaNF+0x24>)
 800ac96:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	ee07 3a90 	vmov	s15, r3
}
 800ac9e:	eeb0 0a67 	vmov.f32	s0, s15
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	ffc00000 	.word	0xffc00000

0800acb0 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
static void rt_InitInfAndNaN(size_t realSize)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800acb8:	f7ff ffb6 	bl	800ac28 <rtGetNaN>
 800acbc:	eeb0 7a40 	vmov.f32	s14, s0
 800acc0:	eef0 7a60 	vmov.f32	s15, s1
 800acc4:	4b16      	ldr	r3, [pc, #88]	; (800ad20 <rt_InitInfAndNaN+0x70>)
 800acc6:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800acca:	f7ff ffdd 	bl	800ac88 <rtGetNaNF>
 800acce:	eef0 7a40 	vmov.f32	s15, s0
 800acd2:	4b14      	ldr	r3, [pc, #80]	; (800ad24 <rt_InitInfAndNaN+0x74>)
 800acd4:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800acd8:	f7ff ff24 	bl	800ab24 <rtGetInf>
 800acdc:	eeb0 7a40 	vmov.f32	s14, s0
 800ace0:	eef0 7a60 	vmov.f32	s15, s1
 800ace4:	4b10      	ldr	r3, [pc, #64]	; (800ad28 <rt_InitInfAndNaN+0x78>)
 800ace6:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800acea:	f7ff ff4b 	bl	800ab84 <rtGetInfF>
 800acee:	eef0 7a40 	vmov.f32	s15, s0
 800acf2:	4b0e      	ldr	r3, [pc, #56]	; (800ad2c <rt_InitInfAndNaN+0x7c>)
 800acf4:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800acf8:	f7ff ff54 	bl	800aba4 <rtGetMinusInf>
 800acfc:	eeb0 7a40 	vmov.f32	s14, s0
 800ad00:	eef0 7a60 	vmov.f32	s15, s1
 800ad04:	4b0a      	ldr	r3, [pc, #40]	; (800ad30 <rt_InitInfAndNaN+0x80>)
 800ad06:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800ad0a:	f7ff ff7b 	bl	800ac04 <rtGetMinusInfF>
 800ad0e:	eef0 7a40 	vmov.f32	s15, s0
 800ad12:	4b08      	ldr	r3, [pc, #32]	; (800ad34 <rt_InitInfAndNaN+0x84>)
 800ad14:	edc3 7a00 	vstr	s15, [r3]
}
 800ad18:	bf00      	nop
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	20000c60 	.word	0x20000c60
 800ad24:	20000c70 	.word	0x20000c70
 800ad28:	20000c50 	.word	0x20000c50
 800ad2c:	20000c68 	.word	0x20000c68
 800ad30:	20000c58 	.word	0x20000c58
 800ad34:	20000c6c 	.word	0x20000c6c

0800ad38 <PosProfile_Step>:
  return y;
}

/* Model step function */
void PosProfile_Step(real32_T curPos)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T jerk = 0.0f;
 800ad42:	f04f 0300 	mov.w	r3, #0
 800ad46:	60fb      	str	r3, [r7, #12]

  /* DiscreteIntegrator: '<S1>/Pos Integrator' incorporates:
   *  Inport: '<Root>/InitPos'
   */
  if (rtDW.PosIntegrator_IC_LOADING != 0) {
 800ad48:	4ba2      	ldr	r3, [pc, #648]	; (800afd4 <PosProfile_Step+0x29c>)
 800ad4a:	7d1b      	ldrb	r3, [r3, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d003      	beq.n	800ad58 <PosProfile_Step+0x20>
    rtDW.PosIntegrator_DSTATE = rtU.InitPos;
 800ad50:	4ba1      	ldr	r3, [pc, #644]	; (800afd8 <PosProfile_Step+0x2a0>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a9f      	ldr	r2, [pc, #636]	; (800afd4 <PosProfile_Step+0x29c>)
 800ad56:	6013      	str	r3, [r2, #0]
  }

  /* Outport: '<Root>/CmdPos' incorporates:
   *  DiscreteIntegrator: '<S1>/Pos Integrator'
   */
  rtY.CmdPos = rtDW.PosIntegrator_DSTATE;
 800ad58:	4b9e      	ldr	r3, [pc, #632]	; (800afd4 <PosProfile_Step+0x29c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a9f      	ldr	r2, [pc, #636]	; (800afdc <PosProfile_Step+0x2a4>)
 800ad5e:	6013      	str	r3, [r2, #0]

  /* DiscreteIntegrator: '<S1>/Vel Integrator' incorporates:
   *  Inport: '<Root>/InitVel'
   */
  if (rtDW.VelIntegrator_IC_LOADING != 0) {
 800ad60:	4b9c      	ldr	r3, [pc, #624]	; (800afd4 <PosProfile_Step+0x29c>)
 800ad62:	7d5b      	ldrb	r3, [r3, #21]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d003      	beq.n	800ad70 <PosProfile_Step+0x38>
    rtDW.VelIntegrator_DSTATE = rtU.InitVel;
 800ad68:	4b9b      	ldr	r3, [pc, #620]	; (800afd8 <PosProfile_Step+0x2a0>)
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	4a99      	ldr	r2, [pc, #612]	; (800afd4 <PosProfile_Step+0x29c>)
 800ad6e:	6053      	str	r3, [r2, #4]
  }

  /* Outport: '<Root>/CmdVel' incorporates:
   *  DiscreteIntegrator: '<S1>/Vel Integrator'
   */
  rtY.CmdVel = rtDW.VelIntegrator_DSTATE;
 800ad70:	4b98      	ldr	r3, [pc, #608]	; (800afd4 <PosProfile_Step+0x29c>)
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	4a99      	ldr	r2, [pc, #612]	; (800afdc <PosProfile_Step+0x2a4>)
 800ad76:	6053      	str	r3, [r2, #4]

  /* Update for DiscreteIntegrator: '<S1>/Pos Integrator' incorporates:
   *  DiscreteIntegrator: '<S1>/Vel Integrator'
   */
  rtDW.PosIntegrator_IC_LOADING = 0U;
 800ad78:	4b96      	ldr	r3, [pc, #600]	; (800afd4 <PosProfile_Step+0x29c>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	751a      	strb	r2, [r3, #20]
  rtDW.PosIntegrator_DSTATE += rtU.Ts * rtDW.VelIntegrator_DSTATE;
 800ad7e:	4b95      	ldr	r3, [pc, #596]	; (800afd4 <PosProfile_Step+0x29c>)
 800ad80:	ed93 7a00 	vldr	s14, [r3]
 800ad84:	4b94      	ldr	r3, [pc, #592]	; (800afd8 <PosProfile_Step+0x2a0>)
 800ad86:	edd3 6a07 	vldr	s13, [r3, #28]
 800ad8a:	4b92      	ldr	r3, [pc, #584]	; (800afd4 <PosProfile_Step+0x29c>)
 800ad8c:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad98:	4b8e      	ldr	r3, [pc, #568]	; (800afd4 <PosProfile_Step+0x29c>)
 800ad9a:	edc3 7a00 	vstr	s15, [r3]

  /* Update for DiscreteIntegrator: '<S1>/Vel Integrator' incorporates:
   *  DiscreteIntegrator: '<S1>/Acce Integrator'
   */
  rtDW.VelIntegrator_IC_LOADING = 0U;
 800ad9e:	4b8d      	ldr	r3, [pc, #564]	; (800afd4 <PosProfile_Step+0x29c>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	755a      	strb	r2, [r3, #21]
  rtDW.VelIntegrator_DSTATE += rtU.Ts * rtDW.AcceIntegrator_DSTATE;
 800ada4:	4b8b      	ldr	r3, [pc, #556]	; (800afd4 <PosProfile_Step+0x29c>)
 800ada6:	ed93 7a01 	vldr	s14, [r3, #4]
 800adaa:	4b8b      	ldr	r3, [pc, #556]	; (800afd8 <PosProfile_Step+0x2a0>)
 800adac:	edd3 6a07 	vldr	s13, [r3, #28]
 800adb0:	4b88      	ldr	r3, [pc, #544]	; (800afd4 <PosProfile_Step+0x29c>)
 800adb2:	edd3 7a02 	vldr	s15, [r3, #8]
 800adb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800adba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adbe:	4b85      	ldr	r3, [pc, #532]	; (800afd4 <PosProfile_Step+0x29c>)
 800adc0:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Correct velocity*/

  if (!rtDW.t_not_empty) {
 800adc4:	4b83      	ldr	r3, [pc, #524]	; (800afd4 <PosProfile_Step+0x29c>)
 800adc6:	7d9b      	ldrb	r3, [r3, #22]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10d      	bne.n	800ade8 <PosProfile_Step+0xb0>
      rtDW.t = rtU.Ts / 2.0F;
 800adcc:	4b82      	ldr	r3, [pc, #520]	; (800afd8 <PosProfile_Step+0x2a0>)
 800adce:	ed93 7a07 	vldr	s14, [r3, #28]
 800add2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800add6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800adda:	4b7e      	ldr	r3, [pc, #504]	; (800afd4 <PosProfile_Step+0x29c>)
 800addc:	edc3 7a03 	vstr	s15, [r3, #12]
      rtDW.t_not_empty = true;
 800ade0:	4b7c      	ldr	r3, [pc, #496]	; (800afd4 <PosProfile_Step+0x29c>)
 800ade2:	2201      	movs	r2, #1
 800ade4:	759a      	strb	r2, [r3, #22]
 800ade6:	e00a      	b.n	800adfe <PosProfile_Step+0xc6>
  } else {
      rtDW.t += rtU.Ts;
 800ade8:	4b7a      	ldr	r3, [pc, #488]	; (800afd4 <PosProfile_Step+0x29c>)
 800adea:	ed93 7a03 	vldr	s14, [r3, #12]
 800adee:	4b7a      	ldr	r3, [pc, #488]	; (800afd8 <PosProfile_Step+0x2a0>)
 800adf0:	edd3 7a07 	vldr	s15, [r3, #28]
 800adf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adf8:	4b76      	ldr	r3, [pc, #472]	; (800afd4 <PosProfile_Step+0x29c>)
 800adfa:	edc3 7a03 	vstr	s15, [r3, #12]

  /* MATLAB Function: '<S1>/ppmode' incorporates:
   *  Inport: '<Root>/MaxJerk'
   */

  if (rtDW.t >= 0.0F && rtDW.t < PosPPhase[0].timing.Tj1){
 800adfe:	4b75      	ldr	r3, [pc, #468]	; (800afd4 <PosProfile_Step+0x29c>)
 800ae00:	edd3 7a03 	vldr	s15, [r3, #12]
 800ae04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ae08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0c:	db17      	blt.n	800ae3e <PosProfile_Step+0x106>
 800ae0e:	4b71      	ldr	r3, [pc, #452]	; (800afd4 <PosProfile_Step+0x29c>)
 800ae10:	ed93 7a03 	vldr	s14, [r3, #12]
 800ae14:	4b72      	ldr	r3, [pc, #456]	; (800afe0 <PosProfile_Step+0x2a8>)
 800ae16:	edd3 7a03 	vldr	s15, [r3, #12]
 800ae1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae22:	d50c      	bpl.n	800ae3e <PosProfile_Step+0x106>
	  /* Phase 0 - 1*/
	  jerk = -1.0f * PosPPhase[0].dir * rtU.MaxJerk;
 800ae24:	4b6e      	ldr	r3, [pc, #440]	; (800afe0 <PosProfile_Step+0x2a8>)
 800ae26:	edd3 7a08 	vldr	s15, [r3, #32]
 800ae2a:	eeb1 7a67 	vneg.f32	s14, s15
 800ae2e:	4b6a      	ldr	r3, [pc, #424]	; (800afd8 <PosProfile_Step+0x2a0>)
 800ae30:	edd3 7a06 	vldr	s15, [r3, #24]
 800ae34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae38:	edc7 7a03 	vstr	s15, [r7, #12]
 800ae3c:	e174      	b.n	800b128 <PosProfile_Step+0x3f0>
  } else if (rtDW.t >= PosPPhase[0].timing.Tj1 && rtDW.t < PosPPhase[0].timing.Ta){
 800ae3e:	4b65      	ldr	r3, [pc, #404]	; (800afd4 <PosProfile_Step+0x29c>)
 800ae40:	ed93 7a03 	vldr	s14, [r3, #12]
 800ae44:	4b66      	ldr	r3, [pc, #408]	; (800afe0 <PosProfile_Step+0x2a8>)
 800ae46:	edd3 7a03 	vldr	s15, [r3, #12]
 800ae4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae52:	db15      	blt.n	800ae80 <PosProfile_Step+0x148>
 800ae54:	4b5f      	ldr	r3, [pc, #380]	; (800afd4 <PosProfile_Step+0x29c>)
 800ae56:	ed93 7a03 	vldr	s14, [r3, #12]
 800ae5a:	4b61      	ldr	r3, [pc, #388]	; (800afe0 <PosProfile_Step+0x2a8>)
 800ae5c:	edd3 7a02 	vldr	s15, [r3, #8]
 800ae60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae68:	d50a      	bpl.n	800ae80 <PosProfile_Step+0x148>
	  /* Phase 0 - 2*/
	  jerk = PosPPhase[0].dir * rtU.MaxJerk;
 800ae6a:	4b5d      	ldr	r3, [pc, #372]	; (800afe0 <PosProfile_Step+0x2a8>)
 800ae6c:	ed93 7a08 	vldr	s14, [r3, #32]
 800ae70:	4b59      	ldr	r3, [pc, #356]	; (800afd8 <PosProfile_Step+0x2a0>)
 800ae72:	edd3 7a06 	vldr	s15, [r3, #24]
 800ae76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae7a:	edc7 7a03 	vstr	s15, [r7, #12]
 800ae7e:	e153      	b.n	800b128 <PosProfile_Step+0x3f0>
  } else if ((rtDW.t >= PosPPhase[0].timing.Ta) && (rtDW.t < PosPPhase[0].timing.T + PosPPhase[1].timing.Tj1)) {
 800ae80:	4b54      	ldr	r3, [pc, #336]	; (800afd4 <PosProfile_Step+0x29c>)
 800ae82:	ed93 7a03 	vldr	s14, [r3, #12]
 800ae86:	4b56      	ldr	r3, [pc, #344]	; (800afe0 <PosProfile_Step+0x2a8>)
 800ae88:	edd3 7a02 	vldr	s15, [r3, #8]
 800ae8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae94:	db1a      	blt.n	800aecc <PosProfile_Step+0x194>
 800ae96:	4b4f      	ldr	r3, [pc, #316]	; (800afd4 <PosProfile_Step+0x29c>)
 800ae98:	ed93 7a03 	vldr	s14, [r3, #12]
 800ae9c:	4b50      	ldr	r3, [pc, #320]	; (800afe0 <PosProfile_Step+0x2a8>)
 800ae9e:	edd3 6a00 	vldr	s13, [r3]
 800aea2:	4b4f      	ldr	r3, [pc, #316]	; (800afe0 <PosProfile_Step+0x2a8>)
 800aea4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800aea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aeb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb4:	d50a      	bpl.n	800aecc <PosProfile_Step+0x194>
	  /*Phase 1 - 1*/
	  jerk = PosPPhase[1].dir * rtU.MaxJerk;
 800aeb6:	4b4a      	ldr	r3, [pc, #296]	; (800afe0 <PosProfile_Step+0x2a8>)
 800aeb8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800aebc:	4b46      	ldr	r3, [pc, #280]	; (800afd8 <PosProfile_Step+0x2a0>)
 800aebe:	edd3 7a06 	vldr	s15, [r3, #24]
 800aec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec6:	edc7 7a03 	vstr	s15, [r7, #12]
 800aeca:	e12d      	b.n	800b128 <PosProfile_Step+0x3f0>
  } else if ((rtDW.t >= PosPPhase[0].timing.T + PosPPhase[1].timing.Tj1) && (rtDW.t < (PosPPhase[0].timing.T + PosPPhase[1].timing.Ta - PosPPhase[1].timing.Tj1))) {
 800aecc:	4b41      	ldr	r3, [pc, #260]	; (800afd4 <PosProfile_Step+0x29c>)
 800aece:	ed93 7a03 	vldr	s14, [r3, #12]
 800aed2:	4b43      	ldr	r3, [pc, #268]	; (800afe0 <PosProfile_Step+0x2a8>)
 800aed4:	edd3 6a00 	vldr	s13, [r3]
 800aed8:	4b41      	ldr	r3, [pc, #260]	; (800afe0 <PosProfile_Step+0x2a8>)
 800aeda:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800aede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeea:	db18      	blt.n	800af1e <PosProfile_Step+0x1e6>
 800aeec:	4b39      	ldr	r3, [pc, #228]	; (800afd4 <PosProfile_Step+0x29c>)
 800aeee:	ed93 7a03 	vldr	s14, [r3, #12]
 800aef2:	4b3b      	ldr	r3, [pc, #236]	; (800afe0 <PosProfile_Step+0x2a8>)
 800aef4:	edd3 6a00 	vldr	s13, [r3]
 800aef8:	4b39      	ldr	r3, [pc, #228]	; (800afe0 <PosProfile_Step+0x2a8>)
 800aefa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800aefe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800af02:	4b37      	ldr	r3, [pc, #220]	; (800afe0 <PosProfile_Step+0x2a8>)
 800af04:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800af08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800af0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af14:	d503      	bpl.n	800af1e <PosProfile_Step+0x1e6>
	  /*Phase 1 - 2*/
	  jerk = 0.0F;
 800af16:	f04f 0300 	mov.w	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e104      	b.n	800b128 <PosProfile_Step+0x3f0>
  } else if ((rtDW.t >= (PosPPhase[0].timing.T + PosPPhase[1].timing.Ta - PosPPhase[1].timing.Tj1)) && (rtDW.t < PosPPhase[0].timing.T + PosPPhase[1].timing.Ta)) {
 800af1e:	4b2d      	ldr	r3, [pc, #180]	; (800afd4 <PosProfile_Step+0x29c>)
 800af20:	ed93 7a03 	vldr	s14, [r3, #12]
 800af24:	4b2e      	ldr	r3, [pc, #184]	; (800afe0 <PosProfile_Step+0x2a8>)
 800af26:	edd3 6a00 	vldr	s13, [r3]
 800af2a:	4b2d      	ldr	r3, [pc, #180]	; (800afe0 <PosProfile_Step+0x2a8>)
 800af2c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800af30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800af34:	4b2a      	ldr	r3, [pc, #168]	; (800afe0 <PosProfile_Step+0x2a8>)
 800af36:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800af3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800af3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af46:	db1c      	blt.n	800af82 <PosProfile_Step+0x24a>
 800af48:	4b22      	ldr	r3, [pc, #136]	; (800afd4 <PosProfile_Step+0x29c>)
 800af4a:	ed93 7a03 	vldr	s14, [r3, #12]
 800af4e:	4b24      	ldr	r3, [pc, #144]	; (800afe0 <PosProfile_Step+0x2a8>)
 800af50:	edd3 6a00 	vldr	s13, [r3]
 800af54:	4b22      	ldr	r3, [pc, #136]	; (800afe0 <PosProfile_Step+0x2a8>)
 800af56:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800af5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af66:	d50c      	bpl.n	800af82 <PosProfile_Step+0x24a>
	  /*Phase 1 - 3*/
	  jerk = -1.0F * PosPPhase[1].dir * rtU.MaxJerk;
 800af68:	4b1d      	ldr	r3, [pc, #116]	; (800afe0 <PosProfile_Step+0x2a8>)
 800af6a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800af6e:	eeb1 7a67 	vneg.f32	s14, s15
 800af72:	4b19      	ldr	r3, [pc, #100]	; (800afd8 <PosProfile_Step+0x2a0>)
 800af74:	edd3 7a06 	vldr	s15, [r3, #24]
 800af78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7c:	edc7 7a03 	vstr	s15, [r7, #12]
 800af80:	e0d2      	b.n	800b128 <PosProfile_Step+0x3f0>
  } else if ((rtDW.t >= PosPPhase[0].timing.T + PosPPhase[1].timing.Ta) && (rtDW.t < PosPPhase[0].timing.T + PosPPhase[1].timing.Ta + PosPPhase[1].timing.Tv)) {
 800af82:	4b14      	ldr	r3, [pc, #80]	; (800afd4 <PosProfile_Step+0x29c>)
 800af84:	ed93 7a03 	vldr	s14, [r3, #12]
 800af88:	4b15      	ldr	r3, [pc, #84]	; (800afe0 <PosProfile_Step+0x2a8>)
 800af8a:	edd3 6a00 	vldr	s13, [r3]
 800af8e:	4b14      	ldr	r3, [pc, #80]	; (800afe0 <PosProfile_Step+0x2a8>)
 800af90:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800af94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa0:	db20      	blt.n	800afe4 <PosProfile_Step+0x2ac>
 800afa2:	4b0c      	ldr	r3, [pc, #48]	; (800afd4 <PosProfile_Step+0x29c>)
 800afa4:	ed93 7a03 	vldr	s14, [r3, #12]
 800afa8:	4b0d      	ldr	r3, [pc, #52]	; (800afe0 <PosProfile_Step+0x2a8>)
 800afaa:	edd3 6a00 	vldr	s13, [r3]
 800afae:	4b0c      	ldr	r3, [pc, #48]	; (800afe0 <PosProfile_Step+0x2a8>)
 800afb0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800afb4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800afb8:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <PosProfile_Step+0x2a8>)
 800afba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800afbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800afc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afca:	d50b      	bpl.n	800afe4 <PosProfile_Step+0x2ac>
	  /*Phase 1 - 4*/
	  jerk = 0.0F;
 800afcc:	f04f 0300 	mov.w	r3, #0
 800afd0:	60fb      	str	r3, [r7, #12]
 800afd2:	e0a9      	b.n	800b128 <PosProfile_Step+0x3f0>
 800afd4:	20000bc8 	.word	0x20000bc8
 800afd8:	20000be0 	.word	0x20000be0
 800afdc:	20000c00 	.word	0x20000c00
 800afe0:	20000c08 	.word	0x20000c08
  } else if ((rtDW.t >= (PosPPhase[0].timing.T + PosPPhase[1].timing.T - PosPPhase[1].timing.Td)) && (rtDW.t < (PosPPhase[0].timing.T + PosPPhase[1].timing.T - PosPPhase[1].timing.Td + PosPPhase[1].timing.Tj2))){
 800afe4:	4b5b      	ldr	r3, [pc, #364]	; (800b154 <PosProfile_Step+0x41c>)
 800afe6:	ed93 7a03 	vldr	s14, [r3, #12]
 800afea:	4b5b      	ldr	r3, [pc, #364]	; (800b158 <PosProfile_Step+0x420>)
 800afec:	edd3 6a00 	vldr	s13, [r3]
 800aff0:	4b59      	ldr	r3, [pc, #356]	; (800b158 <PosProfile_Step+0x420>)
 800aff2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800aff6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800affa:	4b57      	ldr	r3, [pc, #348]	; (800b158 <PosProfile_Step+0x420>)
 800affc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b000:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b004:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b00c:	db26      	blt.n	800b05c <PosProfile_Step+0x324>
 800b00e:	4b51      	ldr	r3, [pc, #324]	; (800b154 <PosProfile_Step+0x41c>)
 800b010:	ed93 7a03 	vldr	s14, [r3, #12]
 800b014:	4b50      	ldr	r3, [pc, #320]	; (800b158 <PosProfile_Step+0x420>)
 800b016:	edd3 6a00 	vldr	s13, [r3]
 800b01a:	4b4f      	ldr	r3, [pc, #316]	; (800b158 <PosProfile_Step+0x420>)
 800b01c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b020:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b024:	4b4c      	ldr	r3, [pc, #304]	; (800b158 <PosProfile_Step+0x420>)
 800b026:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b02a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b02e:	4b4a      	ldr	r3, [pc, #296]	; (800b158 <PosProfile_Step+0x420>)
 800b030:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b040:	d50c      	bpl.n	800b05c <PosProfile_Step+0x324>
	  /*Phase 1 - 5*/
	  jerk = -1.0F * PosPPhase[1].dir * rtU.MaxJerk;
 800b042:	4b45      	ldr	r3, [pc, #276]	; (800b158 <PosProfile_Step+0x420>)
 800b044:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b048:	eeb1 7a67 	vneg.f32	s14, s15
 800b04c:	4b43      	ldr	r3, [pc, #268]	; (800b15c <PosProfile_Step+0x424>)
 800b04e:	edd3 7a06 	vldr	s15, [r3, #24]
 800b052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b056:	edc7 7a03 	vstr	s15, [r7, #12]
 800b05a:	e065      	b.n	800b128 <PosProfile_Step+0x3f0>
  } else if ((rtDW.t >= (PosPPhase[0].timing.T + PosPPhase[1].timing.T - PosPPhase[1].timing.Td + PosPPhase[1].timing.Tj2)) && (rtDW.t < (PosPPhase[0].timing.T + PosPPhase[1].timing.T - PosPPhase[1].timing.Tj2))) {
 800b05c:	4b3d      	ldr	r3, [pc, #244]	; (800b154 <PosProfile_Step+0x41c>)
 800b05e:	ed93 7a03 	vldr	s14, [r3, #12]
 800b062:	4b3d      	ldr	r3, [pc, #244]	; (800b158 <PosProfile_Step+0x420>)
 800b064:	edd3 6a00 	vldr	s13, [r3]
 800b068:	4b3b      	ldr	r3, [pc, #236]	; (800b158 <PosProfile_Step+0x420>)
 800b06a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b06e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b072:	4b39      	ldr	r3, [pc, #228]	; (800b158 <PosProfile_Step+0x420>)
 800b074:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b078:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b07c:	4b36      	ldr	r3, [pc, #216]	; (800b158 <PosProfile_Step+0x420>)
 800b07e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b08e:	db18      	blt.n	800b0c2 <PosProfile_Step+0x38a>
 800b090:	4b30      	ldr	r3, [pc, #192]	; (800b154 <PosProfile_Step+0x41c>)
 800b092:	ed93 7a03 	vldr	s14, [r3, #12]
 800b096:	4b30      	ldr	r3, [pc, #192]	; (800b158 <PosProfile_Step+0x420>)
 800b098:	edd3 6a00 	vldr	s13, [r3]
 800b09c:	4b2e      	ldr	r3, [pc, #184]	; (800b158 <PosProfile_Step+0x420>)
 800b09e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b0a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b0a6:	4b2c      	ldr	r3, [pc, #176]	; (800b158 <PosProfile_Step+0x420>)
 800b0a8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b0ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b0b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b8:	d503      	bpl.n	800b0c2 <PosProfile_Step+0x38a>
	  /*Phase 1 - 6*/
	  jerk = 0.0F;
 800b0ba:	f04f 0300 	mov.w	r3, #0
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	e032      	b.n	800b128 <PosProfile_Step+0x3f0>
  } else if (rtDW.t >= (PosPPhase[0].timing.T + PosPPhase[1].timing.T - PosPPhase[1].timing.Tj2) && rtDW.t < PosPPhase[0].timing.T + PosPPhase[1].timing.T) {
 800b0c2:	4b24      	ldr	r3, [pc, #144]	; (800b154 <PosProfile_Step+0x41c>)
 800b0c4:	ed93 7a03 	vldr	s14, [r3, #12]
 800b0c8:	4b23      	ldr	r3, [pc, #140]	; (800b158 <PosProfile_Step+0x420>)
 800b0ca:	edd3 6a00 	vldr	s13, [r3]
 800b0ce:	4b22      	ldr	r3, [pc, #136]	; (800b158 <PosProfile_Step+0x420>)
 800b0d0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b0d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b0d8:	4b1f      	ldr	r3, [pc, #124]	; (800b158 <PosProfile_Step+0x420>)
 800b0da:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b0de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b0e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ea:	db1a      	blt.n	800b122 <PosProfile_Step+0x3ea>
 800b0ec:	4b19      	ldr	r3, [pc, #100]	; (800b154 <PosProfile_Step+0x41c>)
 800b0ee:	ed93 7a03 	vldr	s14, [r3, #12]
 800b0f2:	4b19      	ldr	r3, [pc, #100]	; (800b158 <PosProfile_Step+0x420>)
 800b0f4:	edd3 6a00 	vldr	s13, [r3]
 800b0f8:	4b17      	ldr	r3, [pc, #92]	; (800b158 <PosProfile_Step+0x420>)
 800b0fa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b10a:	d50a      	bpl.n	800b122 <PosProfile_Step+0x3ea>
	  /*Phase 1 - 7*/
	  jerk = PosPPhase[1].dir * rtU.MaxJerk;
 800b10c:	4b12      	ldr	r3, [pc, #72]	; (800b158 <PosProfile_Step+0x420>)
 800b10e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800b112:	4b12      	ldr	r3, [pc, #72]	; (800b15c <PosProfile_Step+0x424>)
 800b114:	edd3 7a06 	vldr	s15, [r3, #24]
 800b118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11c:	edc7 7a03 	vstr	s15, [r7, #12]
 800b120:	e002      	b.n	800b128 <PosProfile_Step+0x3f0>
  } else {
	  /*Phase end*/
	  jerk = 0.0F;
 800b122:	f04f 0300 	mov.w	r3, #0
 800b126:	60fb      	str	r3, [r7, #12]
  }

  /* Update for DiscreteIntegrator: '<S1>/Acce Integrator' */
  rtDW.AcceIntegrator_DSTATE += rtU.Ts * jerk;
 800b128:	4b0a      	ldr	r3, [pc, #40]	; (800b154 <PosProfile_Step+0x41c>)
 800b12a:	ed93 7a02 	vldr	s14, [r3, #8]
 800b12e:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <PosProfile_Step+0x424>)
 800b130:	edd3 6a07 	vldr	s13, [r3, #28]
 800b134:	edd7 7a03 	vldr	s15, [r7, #12]
 800b138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b13c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b140:	4b04      	ldr	r3, [pc, #16]	; (800b154 <PosProfile_Step+0x41c>)
 800b142:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800b146:	bf00      	nop
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	20000bc8 	.word	0x20000bc8
 800b158:	20000c08 	.word	0x20000c08
 800b15c:	20000be0 	.word	0x20000be0

0800b160 <PosProfile_CalcPhase1Timing>:

void PosProfile_CalcPhase1Timing(real32_T distance, real32_T curVel, real32_T targetVel, real32_T maxVel, real32_T maxAcce, real32_T jerk)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	ed2d 8b02 	vpush	{d8}
 800b166:	b094      	sub	sp, #80	; 0x50
 800b168:	af00      	add	r7, sp, #0
 800b16a:	ed87 0a05 	vstr	s0, [r7, #20]
 800b16e:	edc7 0a04 	vstr	s1, [r7, #16]
 800b172:	ed87 1a03 	vstr	s2, [r7, #12]
 800b176:	edc7 1a02 	vstr	s3, [r7, #8]
 800b17a:	ed87 2a01 	vstr	s4, [r7, #4]
 800b17e:	edc7 2a00 	vstr	s5, [r7]
   *  Inport: '<Root>/MaxVel'
   *  Inport: '<Root>/TargetPos'
   *  Inport: '<Root>/TargetVel'
   *  Inport: '<Root>/Ts'
   */
  amax = maxAcce;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	64fb      	str	r3, [r7, #76]	; 0x4c

  velminus = maxVel - curVel;
 800b186:	ed97 7a02 	vldr	s14, [r7, #8]
 800b18a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b18e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b192:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  Ta_tmp = maxAcce * maxAcce;
 800b196:	edd7 7a01 	vldr	s15, [r7, #4]
 800b19a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b19e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (velminus * jerk < Ta_tmp) {
 800b1a2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b1a6:	edd7 7a00 	vldr	s15, [r7]
 800b1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ae:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b1b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ba:	dd29      	ble.n	800b210 <PosProfile_CalcPhase1Timing+0xb0>
	if (curVel > maxVel) {
 800b1bc:	ed97 7a04 	vldr	s14, [r7, #16]
 800b1c0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b1c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1cc:	dd08      	ble.n	800b1e0 <PosProfile_CalcPhase1Timing+0x80>
	  PosPPhase[1].timing.Tj1 = 0.0f;
 800b1ce:	4bd8      	ldr	r3, [pc, #864]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b1d0:	f04f 0200 	mov.w	r2, #0
 800b1d4:	631a      	str	r2, [r3, #48]	; 0x30
	  PosPPhase[1].timing.Ta = 0.0F;
 800b1d6:	4bd6      	ldr	r3, [pc, #856]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b1d8:	f04f 0200 	mov.w	r2, #0
 800b1dc:	62da      	str	r2, [r3, #44]	; 0x2c
 800b1de:	e02e      	b.n	800b23e <PosProfile_CalcPhase1Timing+0xde>
	} else {
	  PosPPhase[1].timing.Tj1 = sqrtf(velminus / jerk);
 800b1e0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b1e4:	edd7 7a00 	vldr	s15, [r7]
 800b1e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b1ec:	eeb0 0a66 	vmov.f32	s0, s13
 800b1f0:	f00b fd0a 	bl	8016c08 <sqrtf>
 800b1f4:	eef0 7a40 	vmov.f32	s15, s0
 800b1f8:	4bcd      	ldr	r3, [pc, #820]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b1fa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	  PosPPhase[1].timing.Ta = 2.0F * PosPPhase[1].timing.Tj1;
 800b1fe:	4bcc      	ldr	r3, [pc, #816]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b200:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b204:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b208:	4bc9      	ldr	r3, [pc, #804]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b20a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 800b20e:	e016      	b.n	800b23e <PosProfile_CalcPhase1Timing+0xde>
	}
  } else {
	  PosPPhase[1].timing.Tj1 = maxAcce / jerk;
 800b210:	edd7 6a01 	vldr	s13, [r7, #4]
 800b214:	ed97 7a00 	vldr	s14, [r7]
 800b218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b21c:	4bc4      	ldr	r3, [pc, #784]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b21e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	  PosPPhase[1].timing.Ta = velminus / maxAcce + PosPPhase[1].timing.Tj1;
 800b222:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800b226:	edd7 7a01 	vldr	s15, [r7, #4]
 800b22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b22e:	4bc0      	ldr	r3, [pc, #768]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b230:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b234:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b238:	4bbd      	ldr	r3, [pc, #756]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b23a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  }

  velminus = maxVel - targetVel;
 800b23e:	ed97 7a02 	vldr	s14, [r7, #8]
 800b242:	edd7 7a03 	vldr	s15, [r7, #12]
 800b246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b24a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  if (velminus * jerk < Ta_tmp) {
 800b24e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b252:	edd7 7a00 	vldr	s15, [r7]
 800b256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b25a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b25e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b266:	dd17      	ble.n	800b298 <PosProfile_CalcPhase1Timing+0x138>
	  PosPPhase[1].timing.Tj2 = sqrtf(velminus / jerk);
 800b268:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b26c:	edd7 7a00 	vldr	s15, [r7]
 800b270:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b274:	eeb0 0a66 	vmov.f32	s0, s13
 800b278:	f00b fcc6 	bl	8016c08 <sqrtf>
 800b27c:	eef0 7a40 	vmov.f32	s15, s0
 800b280:	4bab      	ldr	r3, [pc, #684]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b282:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	  PosPPhase[1].timing.Td = 2.0F * PosPPhase[1].timing.Tj2;
 800b286:	4baa      	ldr	r3, [pc, #680]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b288:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b28c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b290:	4ba7      	ldr	r3, [pc, #668]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b292:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 800b296:	e016      	b.n	800b2c6 <PosProfile_CalcPhase1Timing+0x166>
  } else {
	  PosPPhase[1].timing.Tj2 = maxAcce / jerk;
 800b298:	edd7 6a01 	vldr	s13, [r7, #4]
 800b29c:	ed97 7a00 	vldr	s14, [r7]
 800b2a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2a4:	4ba2      	ldr	r3, [pc, #648]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b2a6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	  PosPPhase[1].timing.Td = velminus / maxAcce + PosPPhase[1].timing.Tj2;
 800b2aa:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800b2ae:	edd7 7a01 	vldr	s15, [r7, #4]
 800b2b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2b6:	4b9e      	ldr	r3, [pc, #632]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b2b8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b2bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2c0:	4b9b      	ldr	r3, [pc, #620]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b2c2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  /* T = Tv + Ta + Td */
  /* Make sure the targetPos great than initPos
   * assert(rtU.TargetPos > rtU.InitPos);*/

  PosPPhase[1].timing.Tv = (distance / maxVel - (curVel / maxVel + 1.0F) * (PosPPhase[1].timing.Ta / 2.0F))
 800b2c6:	edd7 6a05 	vldr	s13, [r7, #20]
 800b2ca:	edd7 7a02 	vldr	s15, [r7, #8]
 800b2ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2d2:	ed97 6a04 	vldr	s12, [r7, #16]
 800b2d6:	edd7 6a02 	vldr	s13, [r7, #8]
 800b2da:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b2de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2e2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800b2e6:	4b92      	ldr	r3, [pc, #584]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b2e8:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 800b2ec:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b2f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2f8:	ee37 7a67 	vsub.f32	s14, s14, s15
	- (targetVel / maxVel + 1.0F) * (PosPPhase[1].timing.Td / 2.0F);
 800b2fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b300:	edd7 6a02 	vldr	s13, [r7, #8]
 800b304:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b308:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b30c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800b310:	4b87      	ldr	r3, [pc, #540]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b312:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 800b316:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b322:	ee77 7a67 	vsub.f32	s15, s14, s15
  PosPPhase[1].timing.Tv = (distance / maxVel - (curVel / maxVel + 1.0F) * (PosPPhase[1].timing.Ta / 2.0F))
 800b326:	4b82      	ldr	r3, [pc, #520]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b328:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  if (PosPPhase[1].timing.Tv <= 0.0F) {
 800b32c:	4b80      	ldr	r3, [pc, #512]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b32e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b33a:	f200 8247 	bhi.w	800b7cc <PosProfile_CalcPhase1Timing+0x66c>

	  /*Cannot acceed the max velocity*/
	  PosPPhase[1].timing.Tv = 0.0F;
 800b33e:	4b7c      	ldr	r3, [pc, #496]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b340:	f04f 0200 	mov.w	r2, #0
 800b344:	629a      	str	r2, [r3, #40]	; 0x28

	  /* Recalc timing*/
	  jerkp2 = jerk * jerk;
 800b346:	edd7 7a00 	vldr	s15, [r7]
 800b34a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b34e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	  real32_T curVelp2 = curVel * curVel;
 800b352:	edd7 7a04 	vldr	s15, [r7, #16]
 800b356:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b35a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  real32_T targetVelp2 = targetVel * targetVel;
 800b35e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b362:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b366:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	  velsum = curVel + targetVel;
 800b36a:	ed97 7a04 	vldr	s14, [r7, #16]
 800b36e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b372:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b376:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	  accep2 = maxAcce * maxAcce;
 800b37a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b37e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b382:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  accep4 = accep2 * accep2;
 800b386:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b38a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b38e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	  delta = (distance * 4.0F - 2.0F * maxAcce / jerk * velsum) *
 800b392:	edd7 7a05 	vldr	s15, [r7, #20]
 800b396:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b39a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b39e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b3a2:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800b3a6:	edd7 7a00 	vldr	s15, [r7]
 800b3aa:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800b3ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b3b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b3b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b3ba:	edd7 7a01 	vldr	s15, [r7, #4]
 800b3be:	ee27 7a27 	vmul.f32	s14, s14, s15
			  maxAcce + ((curVelp2 + targetVelp2) * 2.0F + accep4 / jerkp2);
 800b3c2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b3c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b3ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b3d2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b3d6:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 800b3da:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800b3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
	  delta = (distance * 4.0F - 2.0F * maxAcce / jerk * velsum) *
 800b3e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3e6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	  PosPPhase[1].timing.Tj1 = maxAcce / jerk;
 800b3ea:	edd7 6a01 	vldr	s13, [r7, #4]
 800b3ee:	ed97 7a00 	vldr	s14, [r7]
 800b3f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3f6:	4b4e      	ldr	r3, [pc, #312]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b3f8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	  PosPPhase[1].timing.Td = sqrtf(delta);
 800b3fc:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 800b400:	f00b fc02 	bl	8016c08 <sqrtf>
 800b404:	eef0 7a40 	vmov.f32	s15, s0
 800b408:	4b49      	ldr	r3, [pc, #292]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b40a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	  Ta_tmp /= jerk;
 800b40e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800b412:	ed97 7a00 	vldr	s14, [r7]
 800b416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b41a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	  PosPPhase[1].timing.Ta = ((Ta_tmp - 2.0F * curVel) + PosPPhase[1].timing.Td) / 2.0F / maxAcce;
 800b41e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b422:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b426:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b42a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b42e:	4b40      	ldr	r3, [pc, #256]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b430:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b434:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b438:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b43c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b440:	ed97 7a01 	vldr	s14, [r7, #4]
 800b444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b448:	4b39      	ldr	r3, [pc, #228]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b44a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	  PosPPhase[1].timing.Tj2 = maxAcce / jerk;
 800b44e:	edd7 6a01 	vldr	s13, [r7, #4]
 800b452:	ed97 7a00 	vldr	s14, [r7]
 800b456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b45a:	4b35      	ldr	r3, [pc, #212]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b45c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	  PosPPhase[1].timing.Td = ((Ta_tmp - 2.0F * targetVel) + PosPPhase[1].timing.Td) / 2.0F / maxAcce;
 800b460:	edd7 7a03 	vldr	s15, [r7, #12]
 800b464:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b468:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b46c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b470:	4b2f      	ldr	r3, [pc, #188]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b472:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b47a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b47e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b482:	ed97 7a01 	vldr	s14, [r7, #4]
 800b486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b48a:	4b29      	ldr	r3, [pc, #164]	; (800b530 <PosProfile_CalcPhase1Timing+0x3d0>)
 800b48c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	  real32_T amaxp2 = amax * amax;
 800b490:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b494:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b498:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  while ((PosPPhase[1].timing.Ta < 2.0F * PosPPhase[1].timing.Tj1) || (PosPPhase[1].timing.Td < 2.0F * PosPPhase[1].timing.Tj2)) {
 800b49c:	e0c8      	b.n	800b630 <PosProfile_CalcPhase1Timing+0x4d0>
		  amax -= maxAcce * 0.1F;
 800b49e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4a2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800b534 <PosProfile_CalcPhase1Timing+0x3d4>
 800b4a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4aa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b4ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4b2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		  amaxp2 = amax * amax;
 800b4b6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b4ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b4be:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		  if (amax > 0.0F) {
 800b4c2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b4c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ce:	dd33      	ble.n	800b538 <PosProfile_CalcPhase1Timing+0x3d8>
			  delta = ((curVelp2 + targetVelp2) * 2.0F + amaxp2*amaxp2 / jerkp2) +
 800b4d0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b4d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b4d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b4e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b4e4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b4e8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800b4ec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b4f0:	ee37 7a27 	vadd.f32	s14, s14, s15
					   (distance * 4.0F - 2.0F * amax / jerk * velsum) * amax;
 800b4f4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b4f8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800b4fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b500:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b504:	ee77 5aa7 	vadd.f32	s11, s15, s15
 800b508:	edd7 7a00 	vldr	s15, [r7]
 800b50c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b510:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b514:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b518:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b51c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b520:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  delta = ((curVelp2 + targetVelp2) * 2.0F + amaxp2*amaxp2 / jerkp2) +
 800b524:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b528:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 800b52c:	e032      	b.n	800b594 <PosProfile_CalcPhase1Timing+0x434>
 800b52e:	bf00      	nop
 800b530:	20000c08 	.word	0x20000c08
 800b534:	3dcccccd 	.word	0x3dcccccd
		  } else {
			  delta = ((curVelp2 + targetVelp2) * 2.0F + amaxp2*amaxp2 / jerkp2) -
 800b538:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b53c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b540:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b544:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b548:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b54c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b550:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800b554:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b558:	ee37 7a27 	vadd.f32	s14, s14, s15
					   (distance * 4.0F - 2.0F * amax / jerk * velsum) * amax;
 800b55c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b560:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800b564:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b568:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b56c:	ee77 5aa7 	vadd.f32	s11, s15, s15
 800b570:	edd7 7a00 	vldr	s15, [r7]
 800b574:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b578:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b57c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b580:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b584:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b588:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  delta = ((curVelp2 + targetVelp2) * 2.0F + amaxp2*amaxp2 / jerkp2) -
 800b58c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b590:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		  }

		  real32_T sqrtdelta = sqrtf(delta);
 800b594:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 800b598:	f00b fb36 	bl	8016c08 <sqrtf>
 800b59c:	ed87 0a07 	vstr	s0, [r7, #28]
		  PosPPhase[1].timing.Tj1 = amax / jerk;
 800b5a0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800b5a4:	ed97 7a00 	vldr	s14, [r7]
 800b5a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5ac:	4b9a      	ldr	r3, [pc, #616]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b5ae:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  PosPPhase[1].timing.Ta = ((amaxp2 / jerk - 2.0F * curVel) + sqrtdelta) / 2.0F / amax;
 800b5b2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b5b6:	edd7 7a00 	vldr	s15, [r7]
 800b5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5be:	edd7 7a04 	vldr	s15, [r7, #16]
 800b5c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b5c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b5ca:	edd7 7a07 	vldr	s15, [r7, #28]
 800b5ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5d2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b5d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b5da:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b5de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5e2:	4b8d      	ldr	r3, [pc, #564]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b5e4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  PosPPhase[1].timing.Tj2 = amax / jerk;
 800b5e8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800b5ec:	ed97 7a00 	vldr	s14, [r7]
 800b5f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5f4:	4b88      	ldr	r3, [pc, #544]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b5f6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		  PosPPhase[1].timing.Td = ((amaxp2 / jerk - 2.0F * targetVel) + sqrtdelta) / 2.0F / amax;
 800b5fa:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b5fe:	edd7 7a00 	vldr	s15, [r7]
 800b602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b606:	edd7 7a03 	vldr	s15, [r7, #12]
 800b60a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b60e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b612:	edd7 7a07 	vldr	s15, [r7, #28]
 800b616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b61a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b61e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b622:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b62a:	4b7b      	ldr	r3, [pc, #492]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b62c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	  while ((PosPPhase[1].timing.Ta < 2.0F * PosPPhase[1].timing.Tj1) || (PosPPhase[1].timing.Td < 2.0F * PosPPhase[1].timing.Tj2)) {
 800b630:	4b79      	ldr	r3, [pc, #484]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b632:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b636:	4b78      	ldr	r3, [pc, #480]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b638:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b63c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b648:	f53f af29 	bmi.w	800b49e <PosProfile_CalcPhase1Timing+0x33e>
 800b64c:	4b72      	ldr	r3, [pc, #456]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b64e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800b652:	4b71      	ldr	r3, [pc, #452]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b654:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b658:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b65c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b664:	f53f af1b 	bmi.w	800b49e <PosProfile_CalcPhase1Timing+0x33e>
	  }

	  if ((PosPPhase[1].timing.Ta < 0.0F) || (PosPPhase[1].timing.Td < 0.0F)) {
 800b668:	4b6b      	ldr	r3, [pc, #428]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b66a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b66e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b676:	d408      	bmi.n	800b68a <PosProfile_CalcPhase1Timing+0x52a>
 800b678:	4b67      	ldr	r3, [pc, #412]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b67a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b67e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b686:	f140 80a1 	bpl.w	800b7cc <PosProfile_CalcPhase1Timing+0x66c>

		  velminus = targetVel - curVel;
 800b68a:	ed97 7a03 	vldr	s14, [r7, #12]
 800b68e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b692:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b696:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		  real32_T decelgap = 0.0;
 800b69a:	f04f 0300 	mov.w	r3, #0
 800b69e:	623b      	str	r3, [r7, #32]

		  if (curVel > targetVel) {
 800b6a0:	ed97 7a04 	vldr	s14, [r7, #16]
 800b6a4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b0:	dd46      	ble.n	800b740 <PosProfile_CalcPhase1Timing+0x5e0>
			  /*仅包含减速段*/
			  PosPPhase[1].timing.Ta = 0.0F;
 800b6b2:	4b59      	ldr	r3, [pc, #356]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b6b4:	f04f 0200 	mov.w	r2, #0
 800b6b8:	62da      	str	r2, [r3, #44]	; 0x2c
			  PosPPhase[1].timing.Tj1 = 0.0F;
 800b6ba:	4b57      	ldr	r3, [pc, #348]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b6bc:	f04f 0200 	mov.w	r2, #0
 800b6c0:	631a      	str	r2, [r3, #48]	; 0x30
			  PosPPhase[1].timing.Td = distance * 2.0F / velsum;
 800b6c2:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6c6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b6ca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b6ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6d2:	4b51      	ldr	r3, [pc, #324]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b6d4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			  decelgap = jerk*(jerk*distance*distance + velsum*velsum*velminus);
 800b6d8:	ed97 7a00 	vldr	s14, [r7]
 800b6dc:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6e4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b6f0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b6f4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b6f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b700:	ed97 7a00 	vldr	s14, [r7]
 800b704:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b708:	edc7 7a08 	vstr	s15, [r7, #32]
			  PosPPhase[1].timing.Tj2 = (distance * jerk - sqrtf(decelgap)) / jerk / velsum;
 800b70c:	ed97 7a05 	vldr	s14, [r7, #20]
 800b710:	edd7 7a00 	vldr	s15, [r7]
 800b714:	ee27 8a27 	vmul.f32	s16, s14, s15
 800b718:	ed97 0a08 	vldr	s0, [r7, #32]
 800b71c:	f00b fa74 	bl	8016c08 <sqrtf>
 800b720:	eef0 7a40 	vmov.f32	s15, s0
 800b724:	ee38 7a67 	vsub.f32	s14, s16, s15
 800b728:	edd7 7a00 	vldr	s15, [r7]
 800b72c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b730:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b738:	4b37      	ldr	r3, [pc, #220]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b73a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 800b73e:	e045      	b.n	800b7cc <PosProfile_CalcPhase1Timing+0x66c>
		  } else {
			  PosPPhase[1].timing.Td = 0.0F;
 800b740:	4b35      	ldr	r3, [pc, #212]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b742:	f04f 0200 	mov.w	r2, #0
 800b746:	635a      	str	r2, [r3, #52]	; 0x34
			  PosPPhase[1].timing.Tj2 = 0.0F;
 800b748:	4b33      	ldr	r3, [pc, #204]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b74a:	f04f 0200 	mov.w	r2, #0
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38
			  PosPPhase[1].timing.Ta = distance * 2.0F / velsum;
 800b750:	edd7 7a05 	vldr	s15, [r7, #20]
 800b754:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b758:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b75c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b760:	4b2d      	ldr	r3, [pc, #180]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b762:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			  decelgap = jerk*(jerk*distance*distance - velsum*velsum*velminus);
 800b766:	ed97 7a00 	vldr	s14, [r7]
 800b76a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b76e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b772:	edd7 7a05 	vldr	s15, [r7, #20]
 800b776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b77a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b77e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b782:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b78a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b78e:	ed97 7a00 	vldr	s14, [r7]
 800b792:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b796:	edc7 7a08 	vstr	s15, [r7, #32]
			  PosPPhase[1].timing.Tj1 = (distance * jerk - sqrtf(decelgap)) / jerk / velsum;
 800b79a:	ed97 7a05 	vldr	s14, [r7, #20]
 800b79e:	edd7 7a00 	vldr	s15, [r7]
 800b7a2:	ee27 8a27 	vmul.f32	s16, s14, s15
 800b7a6:	ed97 0a08 	vldr	s0, [r7, #32]
 800b7aa:	f00b fa2d 	bl	8016c08 <sqrtf>
 800b7ae:	eef0 7a40 	vmov.f32	s15, s0
 800b7b2:	ee38 7a67 	vsub.f32	s14, s16, s15
 800b7b6:	edd7 7a00 	vldr	s15, [r7]
 800b7ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b7be:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b7c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7c6:	4b14      	ldr	r3, [pc, #80]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b7c8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  /* All time phase calculate end
   * T = Tv + Ta + Td
   * Ta >= 2*Tj1
   * Td >= 2*Tj2
   * */
  PosPPhase[1].timing.T = PosPPhase[1].timing.Tv + PosPPhase[1].timing.Ta + PosPPhase[1].timing.Td;
 800b7cc:	4b12      	ldr	r3, [pc, #72]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b7ce:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800b7d2:	4b11      	ldr	r3, [pc, #68]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b7d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b7d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b7dc:	4b0e      	ldr	r3, [pc, #56]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b7de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b7e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b7e8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  PosPPhase[1].tms = (PosPPhase[1].timing.T * 1000.0F);
 800b7ec:	4b0a      	ldr	r3, [pc, #40]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b7ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b7f2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800b81c <PosProfile_CalcPhase1Timing+0x6bc>
 800b7f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7fe:	ee17 2a90 	vmov	r2, s15
 800b802:	4b05      	ldr	r3, [pc, #20]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b804:	63da      	str	r2, [r3, #60]	; 0x3c
  PosPPhase[1].dist = distance;
 800b806:	4a04      	ldr	r2, [pc, #16]	; (800b818 <PosProfile_CalcPhase1Timing+0x6b8>)
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800b80c:	bf00      	nop
 800b80e:	3750      	adds	r7, #80	; 0x50
 800b810:	46bd      	mov	sp, r7
 800b812:	ecbd 8b02 	vpop	{d8}
 800b816:	bd80      	pop	{r7, pc}
 800b818:	20000c08 	.word	0x20000c08
 800b81c:	447a0000 	.word	0x447a0000

0800b820 <PosProfile_CalcPhase0Timing>:

void PosProfile_CalcPhase0Timing(real32_T curVel, real32_T jerk)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	ed87 0a01 	vstr	s0, [r7, #4]
 800b82a:	edc7 0a00 	vstr	s1, [r7]
	/*assert curVel < 0*/
	PosPPhase[0].timing.Tj1 = sqrtf( curVel / jerk );
 800b82e:	ed97 7a01 	vldr	s14, [r7, #4]
 800b832:	edd7 7a00 	vldr	s15, [r7]
 800b836:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b83a:	eeb0 0a66 	vmov.f32	s0, s13
 800b83e:	f00b f9e3 	bl	8016c08 <sqrtf>
 800b842:	eef0 7a40 	vmov.f32	s15, s0
 800b846:	4b22      	ldr	r3, [pc, #136]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b848:	edc3 7a03 	vstr	s15, [r3, #12]
	PosPPhase[0].timing.Ta  = 2.0f * PosPPhase[0].timing.Tj1;
 800b84c:	4b20      	ldr	r3, [pc, #128]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b84e:	edd3 7a03 	vldr	s15, [r3, #12]
 800b852:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b856:	4b1e      	ldr	r3, [pc, #120]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b858:	edc3 7a02 	vstr	s15, [r3, #8]
	PosPPhase[0].timing.T   = PosPPhase[0].timing.Ta;
 800b85c:	4b1c      	ldr	r3, [pc, #112]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	4a1b      	ldr	r2, [pc, #108]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b862:	6013      	str	r3, [r2, #0]

	PosPPhase[0].dist       = 1.5f * curVel * PosPPhase[0].timing.Tj1 -
 800b864:	edd7 7a01 	vldr	s15, [r7, #4]
 800b868:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800b86c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b870:	4b17      	ldr	r3, [pc, #92]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b872:	edd3 7a03 	vldr	s15, [r3, #12]
 800b876:	ee27 7a27 	vmul.f32	s14, s14, s15
			                  0.5f * jerk * PosPPhase[0].timing.Tj1 * PosPPhase[0].timing.Tj1 * PosPPhase[0].timing.Tj1;
 800b87a:	edd7 7a00 	vldr	s15, [r7]
 800b87e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b882:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b886:	4b12      	ldr	r3, [pc, #72]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b888:	edd3 7a03 	vldr	s15, [r3, #12]
 800b88c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b890:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b892:	edd3 7a03 	vldr	s15, [r3, #12]
 800b896:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b89a:	4b0d      	ldr	r3, [pc, #52]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b89c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b8a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	PosPPhase[0].dist       = 1.5f * curVel * PosPPhase[0].timing.Tj1 -
 800b8a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8a8:	4b09      	ldr	r3, [pc, #36]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b8aa:	edc3 7a07 	vstr	s15, [r3, #28]
	PosPPhase[0].tms        = PosPPhase[0].timing.T * 1000;
 800b8ae:	4b08      	ldr	r3, [pc, #32]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b8b0:	edd3 7a00 	vldr	s15, [r3]
 800b8b4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800b8d4 <PosProfile_CalcPhase0Timing+0xb4>
 800b8b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8c0:	ee17 2a90 	vmov	r2, s15
 800b8c4:	4b02      	ldr	r3, [pc, #8]	; (800b8d0 <PosProfile_CalcPhase0Timing+0xb0>)
 800b8c6:	619a      	str	r2, [r3, #24]
}
 800b8c8:	bf00      	nop
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	20000c08 	.word	0x20000c08
 800b8d4:	447a0000 	.word	0x447a0000

0800b8d8 <PosProfile_Prepare>:

void PosProfile_Prepare(real32_T distance, real32_T curVel, real32_T targetVel, real32_T maxVel, real32_T maxAcce, real32_T maxJerk)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08a      	sub	sp, #40	; 0x28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	ed87 0a05 	vstr	s0, [r7, #20]
 800b8e2:	edc7 0a04 	vstr	s1, [r7, #16]
 800b8e6:	ed87 1a03 	vstr	s2, [r7, #12]
 800b8ea:	edc7 1a02 	vstr	s3, [r7, #8]
 800b8ee:	ed87 2a01 	vstr	s4, [r7, #4]
 800b8f2:	edc7 2a00 	vstr	s5, [r7]
	/* calc two profile phase
	 * set the direction of profile*/
	if ((curVel < 0 && targetVel > 0) || (curVel > 0 && targetVel < 0)){
 800b8f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b8fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b902:	d507      	bpl.n	800b914 <PosProfile_Prepare+0x3c>
 800b904:	edd7 7a03 	vldr	s15, [r7, #12]
 800b908:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b910:	f300 8110 	bgt.w	800bb34 <PosProfile_Prepare+0x25c>
 800b914:	edd7 7a04 	vldr	s15, [r7, #16]
 800b918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b920:	dd07      	ble.n	800b932 <PosProfile_Prepare+0x5a>
 800b922:	edd7 7a03 	vldr	s15, [r7, #12]
 800b926:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b92e:	f100 8101 	bmi.w	800bb34 <PosProfile_Prepare+0x25c>
	/*           - distance                               + distance    */
	/* reverse target pos ------ origin pos ------- positive target pos */
	/*             dir -1                                 dir +1        */
	/*          velocity < 0                            velocity > 0    */

	int8_T hasTurn = 0;
 800b932:	2300      	movs	r3, #0
 800b934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (distance > 0 && curVel < 0){
 800b938:	edd7 7a05 	vldr	s15, [r7, #20]
 800b93c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b944:	dd10      	ble.n	800b968 <PosProfile_Prepare+0x90>
 800b946:	edd7 7a04 	vldr	s15, [r7, #16]
 800b94a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b952:	d509      	bpl.n	800b968 <PosProfile_Prepare+0x90>
		hasTurn = 1;
 800b954:	2301      	movs	r3, #1
 800b956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		PosPPhase[0].dir = -1.0f;
 800b95a:	4b78      	ldr	r3, [pc, #480]	; (800bb3c <PosProfile_Prepare+0x264>)
 800b95c:	4a78      	ldr	r2, [pc, #480]	; (800bb40 <PosProfile_Prepare+0x268>)
 800b95e:	621a      	str	r2, [r3, #32]
		PosPPhase[1].dir = 1.0f;
 800b960:	4b76      	ldr	r3, [pc, #472]	; (800bb3c <PosProfile_Prepare+0x264>)
 800b962:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b966:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (distance < 0 && curVel > 0){
 800b968:	edd7 7a05 	vldr	s15, [r7, #20]
 800b96c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b974:	d510      	bpl.n	800b998 <PosProfile_Prepare+0xc0>
 800b976:	edd7 7a04 	vldr	s15, [r7, #16]
 800b97a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b982:	dd09      	ble.n	800b998 <PosProfile_Prepare+0xc0>
		hasTurn = 1;
 800b984:	2301      	movs	r3, #1
 800b986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		PosPPhase[0].dir = 1.0f;
 800b98a:	4b6c      	ldr	r3, [pc, #432]	; (800bb3c <PosProfile_Prepare+0x264>)
 800b98c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b990:	621a      	str	r2, [r3, #32]
		PosPPhase[1].dir = -1.0f;
 800b992:	4b6a      	ldr	r3, [pc, #424]	; (800bb3c <PosProfile_Prepare+0x264>)
 800b994:	4a6a      	ldr	r2, [pc, #424]	; (800bb40 <PosProfile_Prepare+0x268>)
 800b996:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (!hasTurn){
 800b998:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d157      	bne.n	800ba50 <PosProfile_Prepare+0x178>
		real32_T velerr = velerr = (targetVel > curVel)? (curVel - targetVel):(targetVel - curVel);
 800b9a0:	ed97 7a03 	vldr	s14, [r7, #12]
 800b9a4:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b0:	dd06      	ble.n	800b9c0 <PosProfile_Prepare+0xe8>
 800b9b2:	ed97 7a04 	vldr	s14, [r7, #16]
 800b9b6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9be:	e005      	b.n	800b9cc <PosProfile_Prepare+0xf4>
 800b9c0:	ed97 7a03 	vldr	s14, [r7, #12]
 800b9c4:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9cc:	edc7 7a08 	vstr	s15, [r7, #32]

		/*jmax * (jmax*abs(q1 - q0)^2 + (v1 + v0)^2*(v1 - v0));*/
		/*means the distance too short to plan caused of cur velocity*/
		real32_T cond = ( maxJerk * distance * distance + (curVel+targetVel) * (curVel+targetVel) * velerr);
 800b9d0:	ed97 7a00 	vldr	s14, [r7]
 800b9d4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9dc:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9e4:	edd7 6a04 	vldr	s13, [r7, #16]
 800b9e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b9f0:	ed97 6a04 	vldr	s12, [r7, #16]
 800b9f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9f8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b9fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ba00:	edd7 7a08 	vldr	s15, [r7, #32]
 800ba04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba0c:	edc7 7a07 	vstr	s15, [r7, #28]
		if (cond < 0){
 800ba10:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1c:	d518      	bpl.n	800ba50 <PosProfile_Prepare+0x178>
			hasTurn = 1;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (curVel < 0){
 800ba24:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba30:	d507      	bpl.n	800ba42 <PosProfile_Prepare+0x16a>
				PosPPhase[0].dir = -1.0f;
 800ba32:	4b42      	ldr	r3, [pc, #264]	; (800bb3c <PosProfile_Prepare+0x264>)
 800ba34:	4a42      	ldr	r2, [pc, #264]	; (800bb40 <PosProfile_Prepare+0x268>)
 800ba36:	621a      	str	r2, [r3, #32]
				PosPPhase[1].dir = 1.0f;
 800ba38:	4b40      	ldr	r3, [pc, #256]	; (800bb3c <PosProfile_Prepare+0x264>)
 800ba3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ba3e:	645a      	str	r2, [r3, #68]	; 0x44
 800ba40:	e006      	b.n	800ba50 <PosProfile_Prepare+0x178>
			}else{
				PosPPhase[0].dir = 1.0f;
 800ba42:	4b3e      	ldr	r3, [pc, #248]	; (800bb3c <PosProfile_Prepare+0x264>)
 800ba44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ba48:	621a      	str	r2, [r3, #32]
				PosPPhase[1].dir = -1.0f;
 800ba4a:	4b3c      	ldr	r3, [pc, #240]	; (800bb3c <PosProfile_Prepare+0x264>)
 800ba4c:	4a3c      	ldr	r2, [pc, #240]	; (800bb40 <PosProfile_Prepare+0x268>)
 800ba4e:	645a      	str	r2, [r3, #68]	; 0x44
			}
		}
	}

	if (hasTurn){
 800ba50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d030      	beq.n	800baba <PosProfile_Prepare+0x1e2>
		PosProfile_CalcPhase0Timing(abs(curVel), maxJerk);
 800ba58:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba60:	ee17 3a90 	vmov	r3, s15
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	bfb8      	it	lt
 800ba68:	425b      	neglt	r3, r3
 800ba6a:	ee07 3a90 	vmov	s15, r3
 800ba6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba72:	edd7 0a00 	vldr	s1, [r7]
 800ba76:	eeb0 0a67 	vmov.f32	s0, s15
 800ba7a:	f7ff fed1 	bl	800b820 <PosProfile_CalcPhase0Timing>

		/*the next phase calc slice timing, and all parameters are positive*/
		distance = fabsf(distance) + PosPPhase[0].dist;
 800ba7e:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba82:	eeb0 7ae7 	vabs.f32	s14, s15
 800ba86:	4b2d      	ldr	r3, [pc, #180]	; (800bb3c <PosProfile_Prepare+0x264>)
 800ba88:	edd3 7a07 	vldr	s15, [r3, #28]
 800ba8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba90:	edc7 7a05 	vstr	s15, [r7, #20]
		PosProfile_CalcPhase1Timing(distance,
 800ba94:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba98:	eef0 7ae7 	vabs.f32	s15, s15
 800ba9c:	edd7 2a00 	vldr	s5, [r7]
 800baa0:	ed97 2a01 	vldr	s4, [r7, #4]
 800baa4:	edd7 1a02 	vldr	s3, [r7, #8]
 800baa8:	eeb0 1a67 	vmov.f32	s2, s15
 800baac:	eddf 0a25 	vldr	s1, [pc, #148]	; 800bb44 <PosProfile_Prepare+0x26c>
 800bab0:	ed97 0a05 	vldr	s0, [r7, #20]
 800bab4:	f7ff fb54 	bl	800b160 <PosProfile_CalcPhase1Timing>
 800bab8:	e03d      	b.n	800bb36 <PosProfile_Prepare+0x25e>
									0.0f,
									fabsf(targetVel),
									maxVel, maxAcce, maxJerk);
	}else{
		if (distance > 0)
 800baba:	edd7 7a05 	vldr	s15, [r7, #20]
 800babe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac6:	dd0d      	ble.n	800bae4 <PosProfile_Prepare+0x20c>
			PosPPhase[1].dir = (curVel >= 0.0f) ? 1.0f : -1.0f;
 800bac8:	edd7 7a04 	vldr	s15, [r7, #16]
 800bacc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad4:	db02      	blt.n	800badc <PosProfile_Prepare+0x204>
 800bad6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bada:	e000      	b.n	800bade <PosProfile_Prepare+0x206>
 800badc:	4b18      	ldr	r3, [pc, #96]	; (800bb40 <PosProfile_Prepare+0x268>)
 800bade:	4a17      	ldr	r2, [pc, #92]	; (800bb3c <PosProfile_Prepare+0x264>)
 800bae0:	6453      	str	r3, [r2, #68]	; 0x44
 800bae2:	e00c      	b.n	800bafe <PosProfile_Prepare+0x226>
		else
			PosPPhase[1].dir = (curVel <= 0.0f) ? -1.0f : 1.0f;
 800bae4:	edd7 7a04 	vldr	s15, [r7, #16]
 800bae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800baec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf0:	d801      	bhi.n	800baf6 <PosProfile_Prepare+0x21e>
 800baf2:	4b13      	ldr	r3, [pc, #76]	; (800bb40 <PosProfile_Prepare+0x268>)
 800baf4:	e001      	b.n	800bafa <PosProfile_Prepare+0x222>
 800baf6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bafa:	4a10      	ldr	r2, [pc, #64]	; (800bb3c <PosProfile_Prepare+0x264>)
 800bafc:	6453      	str	r3, [r2, #68]	; 0x44

		PosProfile_CalcPhase1Timing(fabsf(distance),
 800bafe:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb02:	eeb0 7ae7 	vabs.f32	s14, s15
 800bb06:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb0a:	eef0 6ae7 	vabs.f32	s13, s15
 800bb0e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb12:	eef0 7ae7 	vabs.f32	s15, s15
 800bb16:	edd7 2a00 	vldr	s5, [r7]
 800bb1a:	ed97 2a01 	vldr	s4, [r7, #4]
 800bb1e:	edd7 1a02 	vldr	s3, [r7, #8]
 800bb22:	eeb0 1a67 	vmov.f32	s2, s15
 800bb26:	eef0 0a66 	vmov.f32	s1, s13
 800bb2a:	eeb0 0a47 	vmov.f32	s0, s14
 800bb2e:	f7ff fb17 	bl	800b160 <PosProfile_CalcPhase1Timing>
 800bb32:	e000      	b.n	800bb36 <PosProfile_Prepare+0x25e>
		return;
 800bb34:	bf00      	nop
									fabsf(curVel),
									fabsf(targetVel),
									maxVel, maxAcce, maxJerk);
	}
}
 800bb36:	3728      	adds	r7, #40	; 0x28
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	20000c08 	.word	0x20000c08
 800bb40:	bf800000 	.word	0xbf800000
 800bb44:	00000000 	.word	0x00000000

0800bb48 <PosProfile_Initialize>:

/* Model initialize function */
void PosProfile_Initialize(void)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 800bb4c:	2008      	movs	r0, #8
 800bb4e:	f7ff f8af 	bl	800acb0 <rt_InitInfAndNaN>

  /* InitializeConditions for DiscreteIntegrator: '<S1>/Pos Integrator' */
  rtDW.PosIntegrator_IC_LOADING = 1U;
 800bb52:	4b05      	ldr	r3, [pc, #20]	; (800bb68 <PosProfile_Initialize+0x20>)
 800bb54:	2201      	movs	r2, #1
 800bb56:	751a      	strb	r2, [r3, #20]

  /* InitializeConditions for DiscreteIntegrator: '<S1>/Vel Integrator' */
  rtDW.VelIntegrator_IC_LOADING = 1U;
 800bb58:	4b03      	ldr	r3, [pc, #12]	; (800bb68 <PosProfile_Initialize+0x20>)
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	755a      	strb	r2, [r3, #21]

  /* Initialize the ts counter*/
  rtDW.t_not_empty = false;
 800bb5e:	4b02      	ldr	r3, [pc, #8]	; (800bb68 <PosProfile_Initialize+0x20>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	759a      	strb	r2, [r3, #22]
}
 800bb64:	bf00      	nop
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20000bc8 	.word	0x20000bc8

0800bb6c <PosProfile_Start>:
 * maxAcce:   max acceleration
 * maxJerk:   max jerk
 * ts:        profile per step time stamp
 * */
void PosProfile_Start(real32_T distance, real32_T curVel, real32_T targetVel, real32_T maxVel, real32_T maxAcce, real32_T maxJerk, real32_T ts)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	ed87 0a07 	vstr	s0, [r7, #28]
 800bb76:	edc7 0a06 	vstr	s1, [r7, #24]
 800bb7a:	ed87 1a05 	vstr	s2, [r7, #20]
 800bb7e:	edc7 1a04 	vstr	s3, [r7, #16]
 800bb82:	ed87 2a03 	vstr	s4, [r7, #12]
 800bb86:	edc7 2a02 	vstr	s5, [r7, #8]
 800bb8a:	ed87 3a01 	vstr	s6, [r7, #4]
	rtU.InitPos   = 0.0F;
 800bb8e:	4b27      	ldr	r3, [pc, #156]	; (800bc2c <PosProfile_Start+0xc0>)
 800bb90:	f04f 0200 	mov.w	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]
	rtU.TargetPos = distance;
 800bb96:	4a25      	ldr	r2, [pc, #148]	; (800bc2c <PosProfile_Start+0xc0>)
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	6053      	str	r3, [r2, #4]

	rtU.InitVel   = curVel;
 800bb9c:	4a23      	ldr	r2, [pc, #140]	; (800bc2c <PosProfile_Start+0xc0>)
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	60d3      	str	r3, [r2, #12]
	rtU.TargetVel = targetVel;
 800bba2:	4a22      	ldr	r2, [pc, #136]	; (800bc2c <PosProfile_Start+0xc0>)
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	6113      	str	r3, [r2, #16]

	rtU.MaxVel  = maxVel;
 800bba8:	4a20      	ldr	r2, [pc, #128]	; (800bc2c <PosProfile_Start+0xc0>)
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	6093      	str	r3, [r2, #8]
	rtU.MaxAcce = maxAcce;
 800bbae:	4a1f      	ldr	r2, [pc, #124]	; (800bc2c <PosProfile_Start+0xc0>)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6153      	str	r3, [r2, #20]
	rtU.MaxJerk = maxJerk;
 800bbb4:	4a1d      	ldr	r2, [pc, #116]	; (800bc2c <PosProfile_Start+0xc0>)
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	6193      	str	r3, [r2, #24]

	/*Time space per profile discrete step*/
	rtU.Ts = ts;
 800bbba:	4a1c      	ldr	r2, [pc, #112]	; (800bc2c <PosProfile_Start+0xc0>)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	61d3      	str	r3, [r2, #28]

	/* InitializeConditions for DiscreteIntegrator: '<S1>/Pos Integrator' */
	rtDW.PosIntegrator_IC_LOADING = 1U;
 800bbc0:	4b1b      	ldr	r3, [pc, #108]	; (800bc30 <PosProfile_Start+0xc4>)
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	751a      	strb	r2, [r3, #20]
    rtDW.PosIntegrator_DSTATE = rtU.InitPos;
 800bbc6:	4b19      	ldr	r3, [pc, #100]	; (800bc2c <PosProfile_Start+0xc0>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a19      	ldr	r2, [pc, #100]	; (800bc30 <PosProfile_Start+0xc4>)
 800bbcc:	6013      	str	r3, [r2, #0]

	/* InitializeConditions for DiscreteIntegrator: '<S1>/Vel Integrator' */
	rtDW.VelIntegrator_IC_LOADING = 1U;
 800bbce:	4b18      	ldr	r3, [pc, #96]	; (800bc30 <PosProfile_Start+0xc4>)
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	755a      	strb	r2, [r3, #21]
    rtDW.VelIntegrator_DSTATE = rtU.InitVel;
 800bbd4:	4b15      	ldr	r3, [pc, #84]	; (800bc2c <PosProfile_Start+0xc0>)
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	4a15      	ldr	r2, [pc, #84]	; (800bc30 <PosProfile_Start+0xc4>)
 800bbda:	6053      	str	r3, [r2, #4]

    rtDW.AcceIntegrator_DSTATE = 0.0F;
 800bbdc:	4b14      	ldr	r3, [pc, #80]	; (800bc30 <PosProfile_Start+0xc4>)
 800bbde:	f04f 0200 	mov.w	r2, #0
 800bbe2:	609a      	str	r2, [r3, #8]

    /* Reset the ts counter*/
    rtDW.t_not_empty = false;
 800bbe4:	4b12      	ldr	r3, [pc, #72]	; (800bc30 <PosProfile_Start+0xc4>)
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	759a      	strb	r2, [r3, #22]

    /* Velocity tranc error*/
    rtDW.VelTrancErr = 0.0F;
 800bbea:	4b11      	ldr	r3, [pc, #68]	; (800bc30 <PosProfile_Start+0xc4>)
 800bbec:	f04f 0200 	mov.w	r2, #0
 800bbf0:	611a      	str	r2, [r3, #16]

    memset(&PosPPhase[0], 0 ,sizeof(PosPPhase_T));
 800bbf2:	2224      	movs	r2, #36	; 0x24
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	480f      	ldr	r0, [pc, #60]	; (800bc34 <PosProfile_Start+0xc8>)
 800bbf8:	f00b f970 	bl	8016edc <memset>
    memset(&PosPPhase[1], 0 ,sizeof(PosPPhase_T));
 800bbfc:	2224      	movs	r2, #36	; 0x24
 800bbfe:	2100      	movs	r1, #0
 800bc00:	480d      	ldr	r0, [pc, #52]	; (800bc38 <PosProfile_Start+0xcc>)
 800bc02:	f00b f96b 	bl	8016edc <memset>

    PosProfile_Prepare(distance, curVel, targetVel, maxVel, maxAcce, maxJerk);
 800bc06:	edd7 2a02 	vldr	s5, [r7, #8]
 800bc0a:	ed97 2a03 	vldr	s4, [r7, #12]
 800bc0e:	edd7 1a04 	vldr	s3, [r7, #16]
 800bc12:	ed97 1a05 	vldr	s2, [r7, #20]
 800bc16:	edd7 0a06 	vldr	s1, [r7, #24]
 800bc1a:	ed97 0a07 	vldr	s0, [r7, #28]
 800bc1e:	f7ff fe5b 	bl	800b8d8 <PosProfile_Prepare>
}
 800bc22:	bf00      	nop
 800bc24:	3720      	adds	r7, #32
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20000be0 	.word	0x20000be0
 800bc30:	20000bc8 	.word	0x20000bc8
 800bc34:	20000c08 	.word	0x20000c08
 800bc38:	20000c2c 	.word	0x20000c2c

0800bc3c <PosProfile_StartHalt>:

void PosProfile_StartHalt(real32_T curVel, real32_T maxJerk, real32_T ts)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	ed87 0a03 	vstr	s0, [r7, #12]
 800bc46:	edc7 0a02 	vstr	s1, [r7, #8]
 800bc4a:	ed87 1a01 	vstr	s2, [r7, #4]
	rtU.InitPos   = 0.0F;
 800bc4e:	4b34      	ldr	r3, [pc, #208]	; (800bd20 <PosProfile_StartHalt+0xe4>)
 800bc50:	f04f 0200 	mov.w	r2, #0
 800bc54:	601a      	str	r2, [r3, #0]
	rtU.TargetPos = 0.0F;
 800bc56:	4b32      	ldr	r3, [pc, #200]	; (800bd20 <PosProfile_StartHalt+0xe4>)
 800bc58:	f04f 0200 	mov.w	r2, #0
 800bc5c:	605a      	str	r2, [r3, #4]

	rtU.InitVel   = curVel;
 800bc5e:	4a30      	ldr	r2, [pc, #192]	; (800bd20 <PosProfile_StartHalt+0xe4>)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	60d3      	str	r3, [r2, #12]
	rtU.TargetVel = 0.0F;
 800bc64:	4b2e      	ldr	r3, [pc, #184]	; (800bd20 <PosProfile_StartHalt+0xe4>)
 800bc66:	f04f 0200 	mov.w	r2, #0
 800bc6a:	611a      	str	r2, [r3, #16]

	rtU.MaxVel  = curVel;
 800bc6c:	4a2c      	ldr	r2, [pc, #176]	; (800bd20 <PosProfile_StartHalt+0xe4>)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6093      	str	r3, [r2, #8]
	rtU.MaxAcce = maxJerk;
 800bc72:	4a2b      	ldr	r2, [pc, #172]	; (800bd20 <PosProfile_StartHalt+0xe4>)
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	6153      	str	r3, [r2, #20]
	rtU.MaxJerk = maxJerk;
 800bc78:	4a29      	ldr	r2, [pc, #164]	; (800bd20 <PosProfile_StartHalt+0xe4>)
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	6193      	str	r3, [r2, #24]

	/*Time space per profile discrete step*/
	rtU.Ts = ts;
 800bc7e:	4a28      	ldr	r2, [pc, #160]	; (800bd20 <PosProfile_StartHalt+0xe4>)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	61d3      	str	r3, [r2, #28]

	/* InitializeConditions for DiscreteIntegrator: '<S1>/Pos Integrator' */
	rtDW.PosIntegrator_IC_LOADING = 1U;
 800bc84:	4b27      	ldr	r3, [pc, #156]	; (800bd24 <PosProfile_StartHalt+0xe8>)
 800bc86:	2201      	movs	r2, #1
 800bc88:	751a      	strb	r2, [r3, #20]
    rtDW.PosIntegrator_DSTATE = rtU.InitPos;
 800bc8a:	4b25      	ldr	r3, [pc, #148]	; (800bd20 <PosProfile_StartHalt+0xe4>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a25      	ldr	r2, [pc, #148]	; (800bd24 <PosProfile_StartHalt+0xe8>)
 800bc90:	6013      	str	r3, [r2, #0]

	/* InitializeConditions for DiscreteIntegrator: '<S1>/Vel Integrator' */
	rtDW.VelIntegrator_IC_LOADING = 1U;
 800bc92:	4b24      	ldr	r3, [pc, #144]	; (800bd24 <PosProfile_StartHalt+0xe8>)
 800bc94:	2201      	movs	r2, #1
 800bc96:	755a      	strb	r2, [r3, #21]
    rtDW.VelIntegrator_DSTATE = rtU.InitVel;
 800bc98:	4b21      	ldr	r3, [pc, #132]	; (800bd20 <PosProfile_StartHalt+0xe4>)
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	4a21      	ldr	r2, [pc, #132]	; (800bd24 <PosProfile_StartHalt+0xe8>)
 800bc9e:	6053      	str	r3, [r2, #4]

    /* Reset the ts counter*/
    rtDW.t_not_empty = false;
 800bca0:	4b20      	ldr	r3, [pc, #128]	; (800bd24 <PosProfile_StartHalt+0xe8>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	759a      	strb	r2, [r3, #22]

    /* Velocity tranc error*/
    rtDW.VelTrancErr = 0.0F;
 800bca6:	4b1f      	ldr	r3, [pc, #124]	; (800bd24 <PosProfile_StartHalt+0xe8>)
 800bca8:	f04f 0200 	mov.w	r2, #0
 800bcac:	611a      	str	r2, [r3, #16]

    memset(&PosPPhase[0], 0 ,sizeof(PosPPhase_T));
 800bcae:	2224      	movs	r2, #36	; 0x24
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	481d      	ldr	r0, [pc, #116]	; (800bd28 <PosProfile_StartHalt+0xec>)
 800bcb4:	f00b f912 	bl	8016edc <memset>
    memset(&PosPPhase[1], 0 ,sizeof(PosPPhase_T));
 800bcb8:	2224      	movs	r2, #36	; 0x24
 800bcba:	2100      	movs	r1, #0
 800bcbc:	481b      	ldr	r0, [pc, #108]	; (800bd2c <PosProfile_StartHalt+0xf0>)
 800bcbe:	f00b f90d 	bl	8016edc <memset>

    PosPPhase[0].dir = (curVel < 0.0F) ? -1.0F : 1.0F;
 800bcc2:	edd7 7a03 	vldr	s15, [r7, #12]
 800bcc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcce:	d501      	bpl.n	800bcd4 <PosProfile_StartHalt+0x98>
 800bcd0:	4b17      	ldr	r3, [pc, #92]	; (800bd30 <PosProfile_StartHalt+0xf4>)
 800bcd2:	e001      	b.n	800bcd8 <PosProfile_StartHalt+0x9c>
 800bcd4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bcd8:	4a13      	ldr	r2, [pc, #76]	; (800bd28 <PosProfile_StartHalt+0xec>)
 800bcda:	6213      	str	r3, [r2, #32]
    PosProfile_CalcPhase0Timing(abs(curVel), maxJerk);
 800bcdc:	edd7 7a03 	vldr	s15, [r7, #12]
 800bce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bce4:	ee17 3a90 	vmov	r3, s15
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	bfb8      	it	lt
 800bcec:	425b      	neglt	r3, r3
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcf6:	edd7 0a02 	vldr	s1, [r7, #8]
 800bcfa:	eeb0 0a67 	vmov.f32	s0, s15
 800bcfe:	f7ff fd8f 	bl	800b820 <PosProfile_CalcPhase0Timing>

    rtU.TargetPos = PosPPhase[0].dir * PosPPhase[0].dist;
 800bd02:	4b09      	ldr	r3, [pc, #36]	; (800bd28 <PosProfile_StartHalt+0xec>)
 800bd04:	ed93 7a08 	vldr	s14, [r3, #32]
 800bd08:	4b07      	ldr	r3, [pc, #28]	; (800bd28 <PosProfile_StartHalt+0xec>)
 800bd0a:	edd3 7a07 	vldr	s15, [r3, #28]
 800bd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd12:	4b03      	ldr	r3, [pc, #12]	; (800bd20 <PosProfile_StartHalt+0xe4>)
 800bd14:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800bd18:	bf00      	nop
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20000be0 	.word	0x20000be0
 800bd24:	20000bc8 	.word	0x20000bc8
 800bd28:	20000c08 	.word	0x20000c08
 800bd2c:	20000c2c 	.word	0x20000c2c
 800bd30:	bf800000 	.word	0xbf800000

0800bd34 <PosProfile_GetTargetPos>:

real32_T PosProfile_GetTargetPos()
{
 800bd34:	b480      	push	{r7}
 800bd36:	af00      	add	r7, sp, #0
	return PosPPhase[0].dist * PosPPhase[0].dir + PosPPhase[1].dist * PosPPhase[1].dir;
 800bd38:	4b0b      	ldr	r3, [pc, #44]	; (800bd68 <PosProfile_GetTargetPos+0x34>)
 800bd3a:	ed93 7a07 	vldr	s14, [r3, #28]
 800bd3e:	4b0a      	ldr	r3, [pc, #40]	; (800bd68 <PosProfile_GetTargetPos+0x34>)
 800bd40:	edd3 7a08 	vldr	s15, [r3, #32]
 800bd44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd48:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <PosProfile_GetTargetPos+0x34>)
 800bd4a:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800bd4e:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <PosProfile_GetTargetPos+0x34>)
 800bd50:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800bd54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd58:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800bd5c:	eeb0 0a67 	vmov.f32	s0, s15
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	20000c08 	.word	0x20000c08

0800bd6c <PosProfile_StepOver>:

boolean_T PosProfile_StepOver(uint32_T ticks)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
	if (ticks >= (PosPPhase[0].tms + PosPPhase[1].tms)){
 800bd74:	4b08      	ldr	r3, [pc, #32]	; (800bd98 <PosProfile_StepOver+0x2c>)
 800bd76:	699a      	ldr	r2, [r3, #24]
 800bd78:	4b07      	ldr	r3, [pc, #28]	; (800bd98 <PosProfile_StepOver+0x2c>)
 800bd7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7c:	4413      	add	r3, r2
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d301      	bcc.n	800bd88 <PosProfile_StepOver+0x1c>
		return true;
 800bd84:	2301      	movs	r3, #1
 800bd86:	e000      	b.n	800bd8a <PosProfile_StepOver+0x1e>
	}
	return false;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	20000c08 	.word	0x20000c08

0800bd9c <TPB_Init>:

extern MT_MotionDrive_t g_MotionDriveHandle;
extern Node_DriveProfile_t g_NodeDriveProfile;

void TPB_Init()
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	af00      	add	r7, sp, #0
	g_BlocksChain.pair = 0;
 800bda0:	4b09      	ldr	r3, [pc, #36]	; (800bdc8 <TPB_Init+0x2c>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	g_BlocksChain.tickcount = 0;
 800bda8:	4b07      	ldr	r3, [pc, #28]	; (800bdc8 <TPB_Init+0x2c>)
 800bdaa:	2200      	movs	r2, #0
 800bdac:	629a      	str	r2, [r3, #40]	; 0x28
	memset(&g_BlocksChain.curBlock, 0, sizeof(TPBlock));
 800bdae:	2214      	movs	r2, #20
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4805      	ldr	r0, [pc, #20]	; (800bdc8 <TPB_Init+0x2c>)
 800bdb4:	f00b f892 	bl	8016edc <memset>
	memset(&g_BlocksChain.lastBlock, 0, sizeof(TPBlock));
 800bdb8:	2214      	movs	r2, #20
 800bdba:	2100      	movs	r1, #0
 800bdbc:	4803      	ldr	r0, [pc, #12]	; (800bdcc <TPB_Init+0x30>)
 800bdbe:	f00b f88d 	bl	8016edc <memset>
}
 800bdc2:	bf00      	nop
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20000c74 	.word	0x20000c74
 800bdcc:	20000c88 	.word	0x20000c88

0800bdd0 <_ZN11SW_SPIClassC1Ettt>:
#include "spi.h"

#define SPI_TMC5160_CS_LOW()   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET)
#define SPI_TMC5160_CS_HIGH()  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET)

SW_SPIClass::SW_SPIClass(uint16_t mosi, uint16_t miso, uint16_t sck) :
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	4608      	mov	r0, r1
 800bdda:	4611      	mov	r1, r2
 800bddc:	461a      	mov	r2, r3
 800bdde:	4603      	mov	r3, r0
 800bde0:	817b      	strh	r3, [r7, #10]
 800bde2:	460b      	mov	r3, r1
 800bde4:	813b      	strh	r3, [r7, #8]
 800bde6:	4613      	mov	r3, r2
 800bde8:	80fb      	strh	r3, [r7, #6]
  mosi_pin(mosi),
  miso_pin(miso),
  sck_pin(sck)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	897a      	ldrh	r2, [r7, #10]
 800bdee:	801a      	strh	r2, [r3, #0]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	893a      	ldrh	r2, [r7, #8]
 800bdf4:	805a      	strh	r2, [r3, #2]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	88fa      	ldrh	r2, [r7, #6]
 800bdfa:	809a      	strh	r2, [r3, #4]
  {}
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4618      	mov	r0, r3
 800be00:	3714      	adds	r7, #20
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <_ZN11SW_SPIClass4initEv>:

void SW_SPIClass::init() {
 800be0a:	b480      	push	{r7}
 800be0c:	b083      	sub	sp, #12
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
}
 800be12:	bf00      	nop
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
	...

0800be20 <_ZN11SW_SPIClass11switchCSpinEb>:

void SW_SPIClass::switchCSpin(bool state)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	460b      	mov	r3, r1
 800be2a:	70fb      	strb	r3, [r7, #3]
	if (state){
 800be2c:	78fb      	ldrb	r3, [r7, #3]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d008      	beq.n	800be44 <_ZN11SW_SPIClass11switchCSpinEb+0x24>
		SPI_TMC5160_CS_HIGH();
 800be32:	2201      	movs	r2, #1
 800be34:	2102      	movs	r1, #2
 800be36:	4809      	ldr	r0, [pc, #36]	; (800be5c <_ZN11SW_SPIClass11switchCSpinEb+0x3c>)
 800be38:	f004 fa64 	bl	8010304 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800be3c:	2002      	movs	r0, #2
 800be3e:	f002 fbb5 	bl	800e5ac <HAL_Delay>
	}else{
		SPI_TMC5160_CS_LOW();
		HAL_Delay(2);
	}
}
 800be42:	e007      	b.n	800be54 <_ZN11SW_SPIClass11switchCSpinEb+0x34>
		SPI_TMC5160_CS_LOW();
 800be44:	2200      	movs	r2, #0
 800be46:	2102      	movs	r1, #2
 800be48:	4804      	ldr	r0, [pc, #16]	; (800be5c <_ZN11SW_SPIClass11switchCSpinEb+0x3c>)
 800be4a:	f004 fa5b 	bl	8010304 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800be4e:	2002      	movs	r0, #2
 800be50:	f002 fbac 	bl	800e5ac <HAL_Delay>
}
 800be54:	bf00      	nop
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	40020000 	.word	0x40020000

0800be60 <_ZN11SW_SPIClass8transferEh>:

uint8_t SW_SPIClass::transfer(uint8_t ulVal)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af02      	add	r7, sp, #8
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	70fb      	strb	r3, [r7, #3]
  uint8_t rx;

  HAL_StatusTypeDef status;
  //SPI_TMC5160_CS_LOW();
  status = HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&ulVal, (uint8_t*)&rx, 1, HAL_MAX_DELAY);
 800be6c:	f107 020e 	add.w	r2, r7, #14
 800be70:	1cf9      	adds	r1, r7, #3
 800be72:	f04f 33ff 	mov.w	r3, #4294967295
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	2301      	movs	r3, #1
 800be7a:	4807      	ldr	r0, [pc, #28]	; (800be98 <_ZN11SW_SPIClass8transferEh+0x38>)
 800be7c:	f004 ff7e 	bl	8010d7c <HAL_SPI_TransmitReceive>
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]
  //SPI_TMC5160_CS_HIGH();

  if (status != HAL_OK)
 800be84:	7bfb      	ldrb	r3, [r7, #15]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <_ZN11SW_SPIClass8transferEh+0x2e>
	  return 0;
 800be8a:	2300      	movs	r3, #0
 800be8c:	e000      	b.n	800be90 <_ZN11SW_SPIClass8transferEh+0x30>

  return rx;
 800be8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20000708 	.word	0x20000708

0800be9c <discard_current_block>:
}Stepper_Run_Data_t;

Stepper_Run_Data_t  g_StepperData;

/*完成当前block*/
static void discard_current_block() {
 800be9c:	b580      	push	{r7, lr}
 800be9e:	af00      	add	r7, sp, #0
  current_block = NULL;
 800bea0:	4b0a      	ldr	r3, [pc, #40]	; (800becc <discard_current_block+0x30>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	601a      	str	r2, [r3, #0]

  acceleration_time = 0;
 800bea6:	4b0a      	ldr	r3, [pc, #40]	; (800bed0 <discard_current_block+0x34>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]
  deceleration_time = 0;
 800beac:	4b09      	ldr	r3, [pc, #36]	; (800bed4 <discard_current_block+0x38>)
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]

  if (g_StepperData.motionFinishedCB != NULL){
 800beb2:	4b09      	ldr	r3, [pc, #36]	; (800bed8 <discard_current_block+0x3c>)
 800beb4:	69db      	ldr	r3, [r3, #28]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d006      	beq.n	800bec8 <discard_current_block+0x2c>
	// Interpolation motion finished
	g_StepperData.motionFinishedCB(SCURVE_MOTION_TYPE);
 800beba:	4b07      	ldr	r3, [pc, #28]	; (800bed8 <discard_current_block+0x3c>)
 800bebc:	69db      	ldr	r3, [r3, #28]
 800bebe:	2001      	movs	r0, #1
 800bec0:	4798      	blx	r3
	g_StepperData.motionFinishedCB = NULL;
 800bec2:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <discard_current_block+0x3c>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	61da      	str	r2, [r3, #28]
  }
}
 800bec8:	bf00      	nop
 800beca:	bd80      	pop	{r7, pc}
 800becc:	20000cb0 	.word	0x20000cb0
 800bed0:	20000ca4 	.word	0x20000ca4
 800bed4:	20000ca8 	.word	0x20000ca8
 800bed8:	20000cb4 	.word	0x20000cb4

0800bedc <Stepper_Init>:
/*
 * Stepper motor Initialize
 * microsteps
 */
void Stepper_Init(uint8_t microsteps)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	4603      	mov	r3, r0
 800bee4:	71fb      	strb	r3, [r7, #7]
	g_StepperData.micros = microsteps;
 800bee6:	4a17      	ldr	r2, [pc, #92]	; (800bf44 <Stepper_Init+0x68>)
 800bee8:	79fb      	ldrb	r3, [r7, #7]
 800beea:	7313      	strb	r3, [r2, #12]
	g_StepperData.dir    = STEPPER_Dir_CW;  // clockwise
 800beec:	4b15      	ldr	r3, [pc, #84]	; (800bf44 <Stepper_Init+0x68>)
 800beee:	2201      	movs	r2, #1
 800bef0:	735a      	strb	r2, [r3, #13]

	g_StepperData.mode = RUN_Mode_Normal;
 800bef2:	4b14      	ldr	r3, [pc, #80]	; (800bf44 <Stepper_Init+0x68>)
 800bef4:	2201      	movs	r2, #1
 800bef6:	821a      	strh	r2, [r3, #16]
	g_StepperData.state = STEPPER_State_Stop;
 800bef8:	4b12      	ldr	r3, [pc, #72]	; (800bf44 <Stepper_Init+0x68>)
 800befa:	2202      	movs	r2, #2
 800befc:	81da      	strh	r2, [r3, #14]

	g_StepperData.currentPos = 0;
 800befe:	4b11      	ldr	r3, [pc, #68]	; (800bf44 <Stepper_Init+0x68>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	605a      	str	r2, [r3, #4]
	g_StepperData.targetPos = 0;
 800bf04:	4b0f      	ldr	r3, [pc, #60]	; (800bf44 <Stepper_Init+0x68>)
 800bf06:	2200      	movs	r2, #0
 800bf08:	601a      	str	r2, [r3, #0]

	g_StepperData.currentAngle = 0;
 800bf0a:	4b0e      	ldr	r3, [pc, #56]	; (800bf44 <Stepper_Init+0x68>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	829a      	strh	r2, [r3, #20]
	g_StepperData.targetAngle = 0;
 800bf10:	4b0c      	ldr	r3, [pc, #48]	; (800bf44 <Stepper_Init+0x68>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	825a      	strh	r2, [r3, #18]

	g_StepperData.steps = 0;
 800bf16:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <Stepper_Init+0x68>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	609a      	str	r2, [r3, #8]

	g_StepperData.motion = NULL;
 800bf1c:	4b09      	ldr	r3, [pc, #36]	; (800bf44 <Stepper_Init+0x68>)
 800bf1e:	2200      	movs	r2, #0
 800bf20:	619a      	str	r2, [r3, #24]
	g_StepperData.motionFinishedCB = NULL;
 800bf22:	4b08      	ldr	r3, [pc, #32]	; (800bf44 <Stepper_Init+0x68>)
 800bf24:	2200      	movs	r2, #0
 800bf26:	61da      	str	r2, [r3, #28]

	Stepper_SetSpeed(0);
 800bf28:	2000      	movs	r0, #0
 800bf2a:	f000 f83b 	bl	800bfa4 <Stepper_SetSpeed>
	Stepper_SetDir(g_StepperData.dir);
 800bf2e:	4b05      	ldr	r3, [pc, #20]	; (800bf44 <Stepper_Init+0x68>)
 800bf30:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 f807 	bl	800bf48 <Stepper_SetDir>
}
 800bf3a:	bf00      	nop
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	20000cb4 	.word	0x20000cb4

0800bf48 <Stepper_SetDir>:

/*
 *  Set stepper motor direction
 */
void Stepper_SetDir(uint32_t dir)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
	if (dir == STEPPER_Dir_CW) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d10a      	bne.n	800bf6c <Stepper_SetDir+0x24>
		g_StepperData.dir = dir;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	b25a      	sxtb	r2, r3
 800bf5a:	4b0f      	ldr	r3, [pc, #60]	; (800bf98 <Stepper_SetDir+0x50>)
 800bf5c:	735a      	strb	r2, [r3, #13]
		HAL_GPIO_WritePin(Stepper_Dir_GPIO_Port, Stepper_Dir_Pin, GPIO_PIN_SET);
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf64:	480d      	ldr	r0, [pc, #52]	; (800bf9c <Stepper_SetDir+0x54>)
 800bf66:	f004 f9cd 	bl	8010304 <HAL_GPIO_WritePin>
 800bf6a:	e00c      	b.n	800bf86 <Stepper_SetDir+0x3e>
	}else if (dir == STEPPER_Dir_CCW) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d109      	bne.n	800bf86 <Stepper_SetDir+0x3e>
		g_StepperData.dir = dir;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	b25a      	sxtb	r2, r3
 800bf76:	4b08      	ldr	r3, [pc, #32]	; (800bf98 <Stepper_SetDir+0x50>)
 800bf78:	735a      	strb	r2, [r3, #13]
		HAL_GPIO_WritePin(Stepper_Dir_GPIO_Port, Stepper_Dir_Pin, GPIO_PIN_RESET);
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf80:	4806      	ldr	r0, [pc, #24]	; (800bf9c <Stepper_SetDir+0x54>)
 800bf82:	f004 f9bf 	bl	8010304 <HAL_GPIO_WritePin>
	}

    last_direction_bits = dir;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	4b05      	ldr	r3, [pc, #20]	; (800bfa0 <Stepper_SetDir+0x58>)
 800bf8c:	701a      	strb	r2, [r3, #0]
}
 800bf8e:	bf00      	nop
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	20000cb4 	.word	0x20000cb4
 800bf9c:	40020800 	.word	0x40020800
 800bfa0:	20000cac 	.word	0x20000cac

0800bfa4 <Stepper_SetSpeed>:

/*
 *  Set stepper motor speed
 */
void Stepper_SetSpeed(uint32_t speed)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
	if (speed >= 120000) return;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4a10      	ldr	r2, [pc, #64]	; (800bff0 <Stepper_SetSpeed+0x4c>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d816      	bhi.n	800bfe2 <Stepper_SetSpeed+0x3e>

	/* Maximum 16bit speed, 120000*/
	/*Speed calc, steps(speed) per 1 second
	 * 2M tim1 frequency, 160MHz/80Prescaler */
	uint32_t prescaler = 2000000;
 800bfb4:	4b0f      	ldr	r3, [pc, #60]	; (800bff4 <Stepper_SetSpeed+0x50>)
 800bfb6:	60bb      	str	r3, [r7, #8]
	uint32_t period = prescaler;
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	60fb      	str	r3, [r7, #12]

	if (speed != 0)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d005      	beq.n	800bfce <Stepper_SetSpeed+0x2a>
		period = (prescaler / speed) - 1;
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	60fb      	str	r3, [r7, #12]

	htim1.Instance->ARR = period;
 800bfce:	4b0a      	ldr	r3, [pc, #40]	; (800bff8 <Stepper_SetSpeed+0x54>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR1 = period >> 1;  // pulse width
 800bfd6:	4b08      	ldr	r3, [pc, #32]	; (800bff8 <Stepper_SetSpeed+0x54>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	0852      	lsrs	r2, r2, #1
 800bfde:	635a      	str	r2, [r3, #52]	; 0x34
 800bfe0:	e000      	b.n	800bfe4 <Stepper_SetSpeed+0x40>
	if (speed >= 120000) return;
 800bfe2:	bf00      	nop
}
 800bfe4:	3714      	adds	r7, #20
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	0001d4bf 	.word	0x0001d4bf
 800bff4:	001e8480 	.word	0x001e8480
 800bff8:	200007fc 	.word	0x200007fc

0800bffc <Stepper_Stop>:
	Stepper_RunSteps(steps);
}

/* Stepper motor stop*/
void Stepper_Stop()
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
	g_StepperData.state = STEPPER_State_Stop;
 800c000:	4b05      	ldr	r3, [pc, #20]	; (800c018 <Stepper_Stop+0x1c>)
 800c002:	2202      	movs	r2, #2
 800c004:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800c006:	2100      	movs	r1, #0
 800c008:	4804      	ldr	r0, [pc, #16]	; (800c01c <Stepper_Stop+0x20>)
 800c00a:	f005 fa77 	bl	80114fc <HAL_TIM_PWM_Stop_IT>

	//Clear all of blocks
	discard_current_block();
 800c00e:	f7ff ff45 	bl	800be9c <discard_current_block>
}
 800c012:	bf00      	nop
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	20000cb4 	.word	0x20000cb4
 800c01c:	200007fc 	.word	0x200007fc

0800c020 <Stepper_Run>:
	return g_StepperData.state;
}

/* Stepper motor run*/
void Stepper_Run()
{
 800c020:	b580      	push	{r7, lr}
 800c022:	af00      	add	r7, sp, #0
	g_StepperData.mode  = RUN_Mode_Normal;
 800c024:	4b05      	ldr	r3, [pc, #20]	; (800c03c <Stepper_Run+0x1c>)
 800c026:	2201      	movs	r2, #1
 800c028:	821a      	strh	r2, [r3, #16]
	g_StepperData.state = STEPPER_State_Running;
 800c02a:	4b04      	ldr	r3, [pc, #16]	; (800c03c <Stepper_Run+0x1c>)
 800c02c:	2201      	movs	r2, #1
 800c02e:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800c030:	2100      	movs	r1, #0
 800c032:	4803      	ldr	r0, [pc, #12]	; (800c040 <Stepper_Run+0x20>)
 800c034:	f005 f9de 	bl	80113f4 <HAL_TIM_PWM_Start_IT>
}
 800c038:	bf00      	nop
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20000cb4 	.word	0x20000cb4
 800c040:	200007fc 	.word	0x200007fc

0800c044 <Stepper_StepsISR>:
}


/* Per step interrupt service routine*/
void Stepper_StepsISR()
{
 800c044:	b580      	push	{r7, lr}
 800c046:	af00      	add	r7, sp, #0
	// record the count
	if (g_StepperData.dir == STEPPER_Dir_CW){
 800c048:	4b0b      	ldr	r3, [pc, #44]	; (800c078 <Stepper_StepsISR+0x34>)
 800c04a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d105      	bne.n	800c05e <Stepper_StepsISR+0x1a>
		g_StepperData.steps --;
 800c052:	4b09      	ldr	r3, [pc, #36]	; (800c078 <Stepper_StepsISR+0x34>)
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	3b01      	subs	r3, #1
 800c058:	4a07      	ldr	r2, [pc, #28]	; (800c078 <Stepper_StepsISR+0x34>)
 800c05a:	6093      	str	r3, [r2, #8]
 800c05c:	e004      	b.n	800c068 <Stepper_StepsISR+0x24>
	}else{
		g_StepperData.steps ++;
 800c05e:	4b06      	ldr	r3, [pc, #24]	; (800c078 <Stepper_StepsISR+0x34>)
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	3301      	adds	r3, #1
 800c064:	4a04      	ldr	r2, [pc, #16]	; (800c078 <Stepper_StepsISR+0x34>)
 800c066:	6093      	str	r3, [r2, #8]
	}

	if (g_StepperData.steps == 0){
 800c068:	4b03      	ldr	r3, [pc, #12]	; (800c078 <Stepper_StepsISR+0x34>)
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <Stepper_StepsISR+0x30>
		Stepper_Stop();
 800c070:	f7ff ffc4 	bl	800bffc <Stepper_Stop>
	}
}
 800c074:	bf00      	nop
 800c076:	bd80      	pop	{r7, pc}
 800c078:	20000cb4 	.word	0x20000cb4

0800c07c <HAL_TIM_PWM_PulseFinishedCallback>:

/*
 * User defined cb, Stepper Tim channel:
 **/
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a08      	ldr	r2, [pc, #32]	; (800c0ac <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d10a      	bne.n	800c0a4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		// check the channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	7f1b      	ldrb	r3, [r3, #28]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d106      	bne.n	800c0a4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>

			/*Per step call back stepsisr*/
			if (g_StepperData.mode == RUN_Mode_StepsControl){
 800c096:	4b06      	ldr	r3, [pc, #24]	; (800c0b0 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 800c098:	8a1b      	ldrh	r3, [r3, #16]
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d102      	bne.n	800c0a4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
				Stepper_StepsISR();
 800c09e:	f7ff ffd1 	bl	800c044 <Stepper_StepsISR>
				return;
 800c0a2:	bf00      	nop
			}

			/**/
		}
	}
}
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	40010000 	.word	0x40010000
 800c0b0:	20000cb4 	.word	0x20000cb4

0800c0b4 <_ZN14TMC2130Stepper8CHOPCONFEv>:
#include "TMC_MACROS.h"

#define SET_REG(SETTING) CHOPCONF_register.SETTING = B; write(CHOPCONF_register.address, CHOPCONF_register.sr)

// CHOPCONF
uint32_t TMC2130Stepper::CHOPCONF() {
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
	return read(CHOPCONF_register.address);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	216c      	movs	r1, #108	; 0x6c
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	4798      	blx	r3
 800c0ca:	4603      	mov	r3, r0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <_ZN14TMC2130Stepper8CHOPCONFEm>:
void TMC2130Stepper::CHOPCONF(uint32_t input) {
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
	CHOPCONF_register.sr = input;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	f8c3 2025 	str.w	r2, [r3, #37]	; 0x25
	write(CHOPCONF_register.address, CHOPCONF_register.sr);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c0f2:	216c      	movs	r1, #108	; 0x6c
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	4798      	blx	r3
}
 800c0f8:	bf00      	nop
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <_ZN14TMC2130Stepper4toffEh>:

void TMC2130Stepper::toff(		uint8_t B )	{ SET_REG(toff);	}
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	460b      	mov	r3, r1
 800c10a:	70fb      	strb	r3, [r7, #3]
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	f003 030f 	and.w	r3, r3, #15
 800c112:	b2d9      	uxtb	r1, r3
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800c11a:	f361 0303 	bfi	r3, r1, #0, #4
 800c11e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c12e:	216c      	movs	r1, #108	; 0x6c
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	4798      	blx	r3
 800c134:	bf00      	nop
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <_ZN14TMC2130Stepper5hstrtEh>:
void TMC2130Stepper::hstrt(		uint8_t B )	{ SET_REG(hstrt);	}
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	460b      	mov	r3, r1
 800c146:	70fb      	strb	r3, [r7, #3]
 800c148:	78fb      	ldrb	r3, [r7, #3]
 800c14a:	f003 0307 	and.w	r3, r3, #7
 800c14e:	b2d9      	uxtb	r1, r3
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800c156:	f361 1306 	bfi	r3, r1, #4, #3
 800c15a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c16a:	216c      	movs	r1, #108	; 0x6c
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	4798      	blx	r3
 800c170:	bf00      	nop
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <_ZN14TMC2130Stepper4hendEh>:
void TMC2130Stepper::hend(		uint8_t B )	{ SET_REG(hend);	}
 800c178:	b590      	push	{r4, r7, lr}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	70fb      	strb	r3, [r7, #3]
 800c184:	78fb      	ldrb	r3, [r7, #3]
 800c186:	f003 030f 	and.w	r3, r3, #15
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f002 0101 	and.w	r1, r2, #1
 800c192:	01cc      	lsls	r4, r1, #7
 800c194:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 800c198:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800c19c:	4608      	mov	r0, r1
 800c19e:	4621      	mov	r1, r4
 800c1a0:	4301      	orrs	r1, r0
 800c1a2:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
 800c1a6:	0852      	lsrs	r2, r2, #1
 800c1a8:	b2d2      	uxtb	r2, r2
 800c1aa:	f002 0207 	and.w	r2, r2, #7
 800c1ae:	f002 0007 	and.w	r0, r2, #7
 800c1b2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800c1b6:	f022 0207 	bic.w	r2, r2, #7
 800c1ba:	4611      	mov	r1, r2
 800c1bc:	4602      	mov	r2, r0
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c1d0:	216c      	movs	r1, #108	; 0x6c
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	4798      	blx	r3
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd90      	pop	{r4, r7, pc}

0800c1de <_ZN14TMC2130Stepper3chmEb>:
//void TMC2130Stepper::fd(		uint8_t B )	{ SET_REG(fd);		}
void TMC2130Stepper::disfdcc(	bool 	B )	{ SET_REG(disfdcc);	}
void TMC2130Stepper::rndtf(		bool 	B )	{ SET_REG(rndtf);	}
void TMC2130Stepper::chm(		bool 	B )	{ SET_REG(chm);		}
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b082      	sub	sp, #8
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	70fb      	strb	r3, [r7, #3]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800c1f0:	78f9      	ldrb	r1, [r7, #3]
 800c1f2:	f361 1386 	bfi	r3, r1, #6, #1
 800c1f6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c206:	216c      	movs	r1, #108	; 0x6c
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	4798      	blx	r3
 800c20c:	bf00      	nop
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <_ZN14TMC2130Stepper3tblEh>:
void TMC2130Stepper::tbl(		uint8_t B )	{ SET_REG(tbl);		}
 800c214:	b590      	push	{r4, r7, lr}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70fb      	strb	r3, [r7, #3]
 800c220:	78fb      	ldrb	r3, [r7, #3]
 800c222:	f003 0303 	and.w	r3, r3, #3
 800c226:	b2da      	uxtb	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f002 0101 	and.w	r1, r2, #1
 800c22e:	01cc      	lsls	r4, r1, #7
 800c230:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 800c234:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800c238:	4608      	mov	r0, r1
 800c23a:	4621      	mov	r1, r4
 800c23c:	4301      	orrs	r1, r0
 800c23e:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
 800c242:	0852      	lsrs	r2, r2, #1
 800c244:	b2d2      	uxtb	r2, r2
 800c246:	f002 0201 	and.w	r2, r2, #1
 800c24a:	f002 0001 	and.w	r0, r2, #1
 800c24e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800c252:	f022 0201 	bic.w	r2, r2, #1
 800c256:	4611      	mov	r1, r2
 800c258:	4602      	mov	r2, r0
 800c25a:	430a      	orrs	r2, r1
 800c25c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c26c:	216c      	movs	r1, #108	; 0x6c
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	4798      	blx	r3
 800c272:	bf00      	nop
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	bd90      	pop	{r4, r7, pc}

0800c27a <_ZN14TMC2130Stepper6vsenseEb>:
void TMC2130Stepper::vsense(	bool 	B )	{ SET_REG(vsense);	}
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b082      	sub	sp, #8
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	460b      	mov	r3, r1
 800c284:	70fb      	strb	r3, [r7, #3]
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
 800c28c:	78f9      	ldrb	r1, [r7, #3]
 800c28e:	f361 0341 	bfi	r3, r1, #1, #1
 800c292:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c2a2:	216c      	movs	r1, #108	; 0x6c
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	4798      	blx	r3
 800c2a8:	bf00      	nop
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <_ZN14TMC2130Stepper4mresEh>:
void TMC2130Stepper::vhighfs(	bool 	B )	{ SET_REG(vhighfs);	}
void TMC2130Stepper::vhighchm(	bool 	B )	{ SET_REG(vhighchm);}
void TMC2130Stepper::sync(		uint8_t B )	{ SET_REG(sync);	}
void TMC2130Stepper::mres(		uint8_t B )	{ SET_REG(mres);	}
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	f003 030f 	and.w	r3, r3, #15
 800c2c2:	b2d9      	uxtb	r1, r3
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800c2ca:	f361 0303 	bfi	r3, r1, #0, #4
 800c2ce:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c2de:	216c      	movs	r1, #108	; 0x6c
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	4798      	blx	r3
 800c2e4:	bf00      	nop
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <_ZN14TMC2130Stepper6intpolEb>:
void TMC2130Stepper::intpol(	bool 	B )	{ SET_REG(intpol);	}
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70fb      	strb	r3, [r7, #3]
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800c2fe:	78f9      	ldrb	r1, [r7, #3]
 800c300:	f361 1304 	bfi	r3, r1, #4, #1
 800c304:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c314:	216c      	movs	r1, #108	; 0x6c
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	4798      	blx	r3
 800c31a:	bf00      	nop
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <_ZN14TMC2130Stepper4toffEv>:
void TMC2130Stepper::dedge(		bool 	B )	{ SET_REG(dedge);	}
void TMC2130Stepper::diss2g(	bool 	B )	{ SET_REG(diss2g);	}

uint8_t TMC2130Stepper::toff()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;	}
 800c322:	b580      	push	{r7, lr}
 800c324:	b084      	sub	sp, #16
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	2300      	movs	r3, #0
 800c32c:	60fb      	str	r3, [r7, #12]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f7ff fec0 	bl	800c0b4 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c334:	4603      	mov	r3, r0
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	7b3b      	ldrb	r3, [r7, #12]
 800c33a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <_ZN14TMC2130Stepper5hstrtEv>:
uint8_t TMC2130Stepper::hstrt()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;	}
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	2300      	movs	r3, #0
 800c352:	60fb      	str	r3, [r7, #12]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff fead 	bl	800c0b4 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c35a:	4603      	mov	r3, r0
 800c35c:	60fb      	str	r3, [r7, #12]
 800c35e:	7b3b      	ldrb	r3, [r7, #12]
 800c360:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c364:	b2db      	uxtb	r3, r3
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <_ZN14TMC2130Stepper4hendEv>:
uint8_t TMC2130Stepper::hend()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;	}
 800c36e:	b580      	push	{r7, lr}
 800c370:	b084      	sub	sp, #16
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
 800c376:	2300      	movs	r3, #0
 800c378:	60fb      	str	r3, [r7, #12]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f7ff fe9a 	bl	800c0b4 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c380:	4603      	mov	r3, r0
 800c382:	60fb      	str	r3, [r7, #12]
 800c384:	89bb      	ldrh	r3, [r7, #12]
 800c386:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <_ZN14TMC2130Stepper3tblEv>:
//uint8_t TMC2130Stepper::fd()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.fd;		}
bool 	TMC2130Stepper::disfdcc()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.disfdcc;	}
bool 	TMC2130Stepper::rndtf()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.rndtf;	}
bool 	TMC2130Stepper::chm()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.chm;		}
uint8_t TMC2130Stepper::tbl()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;		}
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	2300      	movs	r3, #0
 800c39e:	60fb      	str	r3, [r7, #12]
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f7ff fe87 	bl	800c0b4 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	60fb      	str	r3, [r7, #12]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <_ZN14TMC2130Stepper6vsenseEv>:
bool 	TMC2130Stepper::vsense()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;	}
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	60fb      	str	r3, [r7, #12]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7ff fe74 	bl	800c0b4 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	60fb      	str	r3, [r7, #12]
 800c3d0:	7bbb      	ldrb	r3, [r7, #14]
 800c3d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <_ZN14TMC2130Stepper4mresEv>:
bool 	TMC2130Stepper::vhighfs()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighfs;	}
bool 	TMC2130Stepper::vhighchm()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighchm;}
uint8_t TMC2130Stepper::sync()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.sync;	}
uint8_t TMC2130Stepper::mres()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;	}
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	60fb      	str	r3, [r7, #12]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f7ff fe61 	bl	800c0b4 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	60fb      	str	r3, [r7, #12]
 800c3f6:	7bfb      	ldrb	r3, [r7, #15]
 800c3f8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <_ZN14TMC2130Stepper8COOLCONFEm>:
#define SET_REG(SETTING) COOLCONF_register.SETTING = B; write(COOLCONF_register.address, COOLCONF_register.sr);
#define GET_REG(SETTING) return COOLCONF_register.SETTING;

// COOLCONF
uint32_t TMC2130Stepper::COOLCONF() { return COOLCONF_register.sr; }
void TMC2130Stepper::COOLCONF(uint32_t input) {
 800c406:	b590      	push	{r4, r7, lr}
 800c408:	b083      	sub	sp, #12
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	6039      	str	r1, [r7, #0]
	COOLCONF_register.sr = input;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
 800c41c:	0209      	lsls	r1, r1, #8
 800c41e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c420:	b2c0      	uxtb	r0, r0
 800c422:	4301      	orrs	r1, r0
 800c424:	6299      	str	r1, [r3, #40]	; 0x28
 800c426:	0e12      	lsrs	r2, r2, #24
 800c428:	f002 0201 	and.w	r2, r2, #1
 800c42c:	f002 0001 	and.w	r0, r2, #1
 800c430:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c434:	f022 0201 	bic.w	r2, r2, #1
 800c438:	4611      	mov	r1, r2
 800c43a:	4602      	mov	r2, r0
 800c43c:	430a      	orrs	r2, r1
 800c43e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	write(COOLCONF_register.address, COOLCONF_register.sr);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681c      	ldr	r4, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c44c:	0a12      	lsrs	r2, r2, #8
 800c44e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	061b      	lsls	r3, r3, #24
 800c458:	4313      	orrs	r3, r2
 800c45a:	461a      	mov	r2, r3
 800c45c:	216d      	movs	r1, #109	; 0x6d
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	47a0      	blx	r4
}
 800c462:	bf00      	nop
 800c464:	370c      	adds	r7, #12
 800c466:	46bd      	mov	sp, r7
 800c468:	bd90      	pop	{r4, r7, pc}

0800c46a <_ZN14TMC2130Stepper5seminEh>:

void TMC2130Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 800c46a:	b590      	push	{r4, r7, lr}
 800c46c:	b083      	sub	sp, #12
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
 800c472:	460b      	mov	r3, r1
 800c474:	70fb      	strb	r3, [r7, #3]
 800c476:	78fb      	ldrb	r3, [r7, #3]
 800c478:	f003 030f 	and.w	r3, r3, #15
 800c47c:	b2d9      	uxtb	r1, r3
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 800c484:	f361 0303 	bfi	r3, r1, #0, #4
 800c488:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681c      	ldr	r4, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c496:	0a12      	lsrs	r2, r2, #8
 800c498:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c49c:	f003 0301 	and.w	r3, r3, #1
 800c4a0:	061b      	lsls	r3, r3, #24
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	216d      	movs	r1, #109	; 0x6d
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	47a0      	blx	r4
 800c4ac:	bf00      	nop
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd90      	pop	{r4, r7, pc}

0800c4b4 <_ZN14TMC2130Stepper5semaxEh>:
void TMC2130Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2130Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 800c4b4:	b590      	push	{r4, r7, lr}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	70fb      	strb	r3, [r7, #3]
 800c4c0:	78fb      	ldrb	r3, [r7, #3]
 800c4c2:	f003 030f 	and.w	r3, r3, #15
 800c4c6:	b2d9      	uxtb	r1, r3
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800c4ce:	f361 0303 	bfi	r3, r1, #0, #4
 800c4d2:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681c      	ldr	r4, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c4e0:	0a12      	lsrs	r2, r2, #8
 800c4e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	061b      	lsls	r3, r3, #24
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	216d      	movs	r1, #109	; 0x6d
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	47a0      	blx	r4
 800c4f6:	bf00      	nop
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd90      	pop	{r4, r7, pc}

0800c4fe <_ZN14TMC2130Stepper4sednEh>:
void TMC2130Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 800c4fe:	b590      	push	{r4, r7, lr}
 800c500:	b083      	sub	sp, #12
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	460b      	mov	r3, r1
 800c508:	70fb      	strb	r3, [r7, #3]
 800c50a:	78fb      	ldrb	r3, [r7, #3]
 800c50c:	f003 0303 	and.w	r3, r3, #3
 800c510:	b2d9      	uxtb	r1, r3
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800c518:	f361 1346 	bfi	r3, r1, #5, #2
 800c51c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681c      	ldr	r4, [r3, #0]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c52a:	0a12      	lsrs	r2, r2, #8
 800c52c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c530:	f003 0301 	and.w	r3, r3, #1
 800c534:	061b      	lsls	r3, r3, #24
 800c536:	4313      	orrs	r3, r2
 800c538:	461a      	mov	r2, r3
 800c53a:	216d      	movs	r1, #109	; 0x6d
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	47a0      	blx	r4
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	bd90      	pop	{r4, r7, pc}

0800c548 <_ZN14TMC2130Stepper3sgtEa>:
void TMC2130Stepper::seimin(bool 	B )	{ SET_REG(seimin);	}
void TMC2130Stepper::sgt(	int8_t  B )	{ SET_REG(sgt);		}
 800c548:	b590      	push	{r4, r7, lr}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	70fb      	strb	r3, [r7, #3]
 800c554:	78fb      	ldrb	r3, [r7, #3]
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	b25b      	sxtb	r3, r3
 800c55a:	105b      	asrs	r3, r3, #1
 800c55c:	b259      	sxtb	r1, r3
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 800c564:	f361 0306 	bfi	r3, r1, #0, #7
 800c568:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681c      	ldr	r4, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c576:	0a12      	lsrs	r2, r2, #8
 800c578:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c57c:	f003 0301 	and.w	r3, r3, #1
 800c580:	061b      	lsls	r3, r3, #24
 800c582:	4313      	orrs	r3, r2
 800c584:	461a      	mov	r2, r3
 800c586:	216d      	movs	r1, #109	; 0x6d
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	47a0      	blx	r4
 800c58c:	bf00      	nop
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	bd90      	pop	{r4, r7, pc}

0800c594 <_ZN14TMC2160Stepper8DRV_CONFEm>:
#define SET_REG(SETTING) DRV_CONF_register.SETTING = B; write(DRV_CONF_register.address, DRV_CONF_register.sr);
#define GET_REG(SETTING) return DRV_CONF_register.SETTING;

// W: DRV_CONF
uint32_t TMC2160Stepper::DRV_CONF() { return DRV_CONF_register.sr; }
void TMC2160Stepper::DRV_CONF(uint32_t input) {
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
	DRV_CONF_register.sr = input;
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	f3c3 0115 	ubfx	r1, r3, #0, #22
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c5a8:	f361 0315 	bfi	r3, r1, #0, #22
 800c5ac:	6413      	str	r3, [r2, #64]	; 0x40
	write(DRV_CONF_register.address, DRV_CONF_register.sr);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c5ba:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800c5be:	210a      	movs	r1, #10
 800c5c0:	4798      	blx	r3
}
 800c5c2:	bf00      	nop
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <_ZN14TMC2130Stepper10DRV_STATUSEv>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

#define GET_REG(NS, SETTING) NS::DRV_STATUS_t r{0}; r.sr = DRV_STATUS(); return r.SETTING

uint32_t TMC2130Stepper::DRV_STATUS() { return read(DRV_STATUS_t::address); }
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	216f      	movs	r1, #111	; 0x6f
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	4798      	blx	r3
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <_ZN14TMC5130Stepper7ENCMODEEm>:

// ENCMODE
uint32_t TMC5130Stepper::ENCMODE() {
	return read(ENCMODE_register.address);
}
void TMC5130Stepper::ENCMODE(uint32_t input) {
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b082      	sub	sp, #8
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	6039      	str	r1, [r7, #0]
	ENCMODE_register.sr = input;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5fa:	b299      	uxth	r1, r3
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	f8b2 306c 	ldrh.w	r3, [r2, #108]	; 0x6c
 800c602:	f361 030a 	bfi	r3, r1, #0, #11
 800c606:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
	write(ENCMODE_register.address, ENCMODE_register.sr);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 800c618:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800c61c:	b292      	uxth	r2, r2
 800c61e:	2138      	movs	r1, #56	; 0x38
 800c620:	4798      	blx	r3
}
 800c622:	bf00      	nop
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <_ZN14TMC2130Stepper5GCONFEm>:

// GCONF
uint32_t TMC2130Stepper::GCONF() {
	return read(GCONF_register.address);
}
void TMC2130Stepper::GCONF(uint32_t input) {
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b082      	sub	sp, #8
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
 800c632:	6039      	str	r1, [r7, #0]
	GCONF_register.sr = input;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	f3c3 0111 	ubfx	r1, r3, #0, #18
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	6953      	ldr	r3, [r2, #20]
 800c63e:	f361 2319 	bfi	r3, r1, #8, #18
 800c642:	6153      	str	r3, [r2, #20]
	write(GCONF_register.address, GCONF_register.sr);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	6952      	ldr	r2, [r2, #20]
 800c64e:	f3c2 2211 	ubfx	r2, r2, #8, #18
 800c652:	2100      	movs	r1, #0
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	4798      	blx	r3
}
 800c658:	bf00      	nop
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <_ZN10TMCStepper10IHOLD_IRUNEm>:
#define SET_REG(SETTING) IHOLD_IRUN_register.SETTING = B; write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
#define GET_REG(SETTING) return IHOLD_IRUN_register.SETTING;

// IHOLD_IRUN
uint32_t TMCStepper::IHOLD_IRUN() { return IHOLD_IRUN_register.sr; }
void TMCStepper::IHOLD_IRUN(uint32_t input) {
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
	IHOLD_IRUN_register.sr = input;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	6853      	ldr	r3, [r2, #4]
 800c674:	f361 0313 	bfi	r3, r1, #0, #20
 800c678:	6053      	str	r3, [r2, #4]
	write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	6852      	ldr	r2, [r2, #4]
 800c684:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c688:	2110      	movs	r1, #16
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	4798      	blx	r3
}
 800c68e:	bf00      	nop
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <_ZN10TMCStepper5iholdEh>:

void 	TMCStepper::ihold(uint8_t B) 		{ SET_REG(ihold);		}
 800c696:	b580      	push	{r7, lr}
 800c698:	b082      	sub	sp, #8
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	460b      	mov	r3, r1
 800c6a0:	70fb      	strb	r3, [r7, #3]
 800c6a2:	78fb      	ldrb	r3, [r7, #3]
 800c6a4:	f003 031f 	and.w	r3, r3, #31
 800c6a8:	b2d9      	uxtb	r1, r3
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	7913      	ldrb	r3, [r2, #4]
 800c6ae:	f361 0304 	bfi	r3, r1, #0, #5
 800c6b2:	7113      	strb	r3, [r2, #4]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	6852      	ldr	r2, [r2, #4]
 800c6be:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c6c2:	2110      	movs	r1, #16
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	4798      	blx	r3
 800c6c8:	bf00      	nop
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <_ZN10TMCStepper4irunEh>:
void 	TMCStepper::irun(uint8_t B)  		{ SET_REG(irun); 		}
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	70fb      	strb	r3, [r7, #3]
 800c6dc:	78fb      	ldrb	r3, [r7, #3]
 800c6de:	f003 031f 	and.w	r3, r3, #31
 800c6e2:	b2d9      	uxtb	r1, r3
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	7953      	ldrb	r3, [r2, #5]
 800c6e8:	f361 0304 	bfi	r3, r1, #0, #5
 800c6ec:	7153      	strb	r3, [r2, #5]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	6852      	ldr	r2, [r2, #4]
 800c6f8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c6fc:	2110      	movs	r1, #16
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	4798      	blx	r3
 800c702:	bf00      	nop
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <_ZN14TMC2160Stepper7PWMCONFEm>:
uint8_t TMC2130Stepper::freewheel()		{ GET_REG(freewheel);		}

uint32_t TMC2160Stepper::PWMCONF() {
	return PWMCONF_register.sr;
}
void TMC2160Stepper::PWMCONF(uint32_t input) {
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b082      	sub	sp, #8
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	6039      	str	r1, [r7, #0]
	PWMCONF_register.sr = input;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	683a      	ldr	r2, [r7, #0]
 800c718:	645a      	str	r2, [r3, #68]	; 0x44
	write(PWMCONF_register.address, PWMCONF_register.sr);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c726:	2170      	movs	r1, #112	; 0x70
 800c728:	4798      	blx	r3
}
 800c72a:	bf00      	nop
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <_ZN14TMC2160Stepper8pwm_freqEh>:

void TMC2160Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
 800c732:	b580      	push	{r7, lr}
 800c734:	b082      	sub	sp, #8
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
 800c73a:	460b      	mov	r3, r1
 800c73c:	70fb      	strb	r3, [r7, #3]
 800c73e:	78fb      	ldrb	r3, [r7, #3]
 800c740:	f003 0303 	and.w	r3, r3, #3
 800c744:	b2d9      	uxtb	r1, r3
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 800c74c:	f361 0301 	bfi	r3, r1, #0, #2
 800c750:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c760:	2170      	movs	r1, #112	; 0x70
 800c762:	4798      	blx	r3
 800c764:	bf00      	nop
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <_ZN14TMC2160Stepper10SHORT_CONFEm>:

#define SET_REG(SETTING) SHORT_CONF_register.SETTING = B; write(SHORT_CONF_register.address, SHORT_CONF_register.sr)
#define GET_REG(SETTING) return SHORT_CONF_register.SETTING

uint32_t TMC2160Stepper::SHORT_CONF() { return SHORT_CONF_register.sr; }
void TMC2160Stepper::SHORT_CONF(uint32_t input) {
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
	SHORT_CONF_register.sr = input;
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	f3c3 0112 	ubfx	r1, r3, #0, #19
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800c780:	f361 231a 	bfi	r3, r1, #8, #19
 800c784:	63d3      	str	r3, [r2, #60]	; 0x3c
	write(SHORT_CONF_register.address, SHORT_CONF_register.sr);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c792:	f3c2 2212 	ubfx	r2, r2, #8, #19
 800c796:	2109      	movs	r1, #9
 800c798:	4798      	blx	r3
}
 800c79a:	bf00      	nop
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <_ZN14TMC5130Stepper7SW_MODEEm>:

// SW_MODE
uint32_t TMC5130Stepper::SW_MODE() {
	return read(SW_MODE_register.address);
}
void TMC5130Stepper::SW_MODE(uint32_t input) {
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	6039      	str	r1, [r7, #0]
	SW_MODE_register.sr = input;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7b2:	b299      	uxth	r1, r3
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	f8b2 306a 	ldrh.w	r3, [r2, #106]	; 0x6a
 800c7ba:	f361 030b 	bfi	r3, r1, #0, #12
 800c7be:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
	write(SW_MODE_register.address, SW_MODE_register.sr);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 800c7d0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800c7d4:	b292      	uxth	r2, r2
 800c7d6:	2134      	movs	r1, #52	; 0x34
 800c7d8:	4798      	blx	r3
}
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
	...

0800c7e4 <_ZN10TMCStepperC1Ef>:
		uint32_t MSCURACT();
		int16_t cur_a();
		int16_t cur_b();

	protected:
		TMCStepper(float RS) : Rsense(RS) {};
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	ed87 0a00 	vstr	s0, [r7]
 800c7f0:	4a10      	ldr	r2, [pc, #64]	; (800c834 <_ZN10TMCStepperC1Ef+0x50>)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3304      	adds	r3, #4
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	460a      	mov	r2, r1
 800c7fe:	801a      	strh	r2, [r3, #0]
 800c800:	460a      	mov	r2, r1
 800c802:	709a      	strb	r2, [r3, #2]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	71da      	strb	r2, [r3, #7]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	811a      	strh	r2, [r3, #8]
 800c810:	7a9a      	ldrb	r2, [r3, #10]
 800c812:	f022 020f 	bic.w	r2, r2, #15
 800c816:	729a      	strb	r2, [r3, #10]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	60da      	str	r2, [r3, #12]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800c824:	611a      	str	r2, [r3, #16]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4618      	mov	r0, r3
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	08018f30 	.word	0x08018f30

0800c838 <_ZN14TMC2130StepperC1Etfttta>:

    if (link > chain_length)
      chain_length = link;
  }

TMC2130Stepper::TMC2130Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
 800c838:	b590      	push	{r4, r7, lr}
 800c83a:	b087      	sub	sp, #28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	4608      	mov	r0, r1
 800c842:	ed87 0a01 	vstr	s0, [r7, #4]
 800c846:	4611      	mov	r1, r2
 800c848:	461a      	mov	r2, r3
 800c84a:	4603      	mov	r3, r0
 800c84c:	817b      	strh	r3, [r7, #10]
 800c84e:	460b      	mov	r3, r1
 800c850:	813b      	strh	r3, [r7, #8]
 800c852:	4613      	mov	r3, r2
 800c854:	807b      	strh	r3, [r7, #2]
  TMCStepper(RS),
  _pinCS(pinCS),
  link_index(link)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	ed97 0a01 	vldr	s0, [r7, #4]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7ff ffc1 	bl	800c7e4 <_ZN10TMCStepperC1Ef>
 800c862:	4a3d      	ldr	r2, [pc, #244]	; (800c958 <_ZN14TMC2130StepperC1Etfttta+0x120>)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	601a      	str	r2, [r3, #0]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	3315      	adds	r3, #21
 800c86c:	2200      	movs	r2, #0
 800c86e:	801a      	strh	r2, [r3, #0]
 800c870:	709a      	strb	r2, [r3, #2]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2200      	movs	r2, #0
 800c876:	831a      	strh	r2, [r3, #24]
 800c878:	7e9a      	ldrb	r2, [r3, #26]
 800c87a:	f022 020f 	bic.w	r2, r2, #15
 800c87e:	769a      	strb	r2, [r3, #26]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2200      	movs	r2, #0
 800c884:	76da      	strb	r2, [r3, #27]
 800c886:	2200      	movs	r2, #0
 800c888:	771a      	strb	r2, [r3, #28]
 800c88a:	7f5a      	ldrb	r2, [r3, #29]
 800c88c:	f022 020f 	bic.w	r2, r2, #15
 800c890:	775a      	strb	r2, [r3, #29]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	83da      	strh	r2, [r3, #30]
 800c898:	8c1a      	ldrh	r2, [r3, #32]
 800c89a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800c89e:	f022 0201 	bic.w	r2, r2, #1
 800c8a2:	841a      	strh	r2, [r3, #32]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	845a      	strh	r2, [r3, #34]	; 0x22
 800c8aa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c8ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800c8b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8ba:	b2d2      	uxtb	r2, r2
 800c8bc:	625a      	str	r2, [r3, #36]	; 0x24
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8c8:	b2d2      	uxtb	r2, r2
 800c8ca:	629a      	str	r2, [r3, #40]	; 0x28
 800c8cc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c8d0:	f022 0201 	bic.w	r2, r2, #1
 800c8d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	332d      	adds	r3, #45	; 0x2d
 800c8dc:	2200      	movs	r2, #0
 800c8de:	801a      	strh	r2, [r3, #0]
 800c8e0:	709a      	strb	r2, [r3, #2]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	3330      	adds	r3, #48	; 0x30
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	460a      	mov	r2, r1
 800c8ea:	801a      	strh	r2, [r3, #0]
 800c8ec:	460a      	mov	r2, r1
 800c8ee:	709a      	strb	r2, [r3, #2]
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 800c8f6:	f36f 0301 	bfc	r3, #0, #2
 800c8fa:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	897a      	ldrh	r2, [r7, #10]
 800c902:	869a      	strh	r2, [r3, #52]	; 0x34
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	639a      	str	r2, [r3, #56]	; 0x38
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  {
    SW_SPIClass *SW_SPI_Obj = new SW_SPIClass(pinMOSI, pinMISO, pinSCK);
 800c914:	2006      	movs	r0, #6
 800c916:	f00a f925 	bl	8016b64 <_Znwj>
 800c91a:	4603      	mov	r3, r0
 800c91c:	461c      	mov	r4, r3
 800c91e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c920:	887a      	ldrh	r2, [r7, #2]
 800c922:	8939      	ldrh	r1, [r7, #8]
 800c924:	4620      	mov	r0, r4
 800c926:	f7ff fa53 	bl	800bdd0 <_ZN11SW_SPIClassC1Ettt>
 800c92a:	617c      	str	r4, [r7, #20]
    TMC_SW_SPI = SW_SPI_Obj;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	697a      	ldr	r2, [r7, #20]
 800c930:	639a      	str	r2, [r3, #56]	; 0x38
    defaults();
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f000 f814 	bl	800c960 <_ZN14TMC2130Stepper8defaultsEv>

    if (link > chain_length)
 800c938:	4b08      	ldr	r3, [pc, #32]	; (800c95c <_ZN14TMC2130StepperC1Etfttta+0x124>)
 800c93a:	f993 3000 	ldrsb.w	r3, [r3]
 800c93e:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 800c942:	429a      	cmp	r2, r3
 800c944:	dd03      	ble.n	800c94e <_ZN14TMC2130StepperC1Etfttta+0x116>
      chain_length = link;
 800c946:	4a05      	ldr	r2, [pc, #20]	; (800c95c <_ZN14TMC2130StepperC1Etfttta+0x124>)
 800c948:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c94c:	7013      	strb	r3, [r2, #0]
  }
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	4618      	mov	r0, r3
 800c952:	371c      	adds	r7, #28
 800c954:	46bd      	mov	sp, r7
 800c956:	bd90      	pop	{r4, r7, pc}
 800c958:	08018ef4 	.word	0x08018ef4
 800c95c:	20000cd4 	.word	0x20000cd4

0800c960 <_ZN14TMC2130Stepper8defaultsEv>:

void TMC2130Stepper::defaults() {
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c96c:	4904      	ldr	r1, [pc, #16]	; (800c980 <_ZN14TMC2130Stepper8defaultsEv+0x20>)
 800c96e:	f361 0315 	bfi	r3, r1, #0, #22
 800c972:	6313      	str	r3, [r2, #48]	; 0x30
}
 800c974:	bf00      	nop
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	00050480 	.word	0x00050480

0800c984 <_ZN14TMC2130Stepper11switchCSpinEb>:
void TMC2130Stepper::setSPISpeed(uint32_t speed) {
  spi_speed = speed;
}

__attribute__((weak))
void TMC2130Stepper::switchCSpin(bool state) {
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70fb      	strb	r3, [r7, #3]
// gpio write CS
  if (TMC_SW_SPI != nullptr){
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c994:	2b00      	cmp	r3, #0
 800c996:	d006      	beq.n	800c9a6 <_ZN14TMC2130Stepper11switchCSpinEb+0x22>
	  TMC_SW_SPI->switchCSpin(state);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c99c:	78fa      	ldrb	r2, [r7, #3]
 800c99e:	4611      	mov	r1, r2
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7ff fa3d 	bl	800be20 <_ZN11SW_SPIClass11switchCSpinEb>
  }
}
 800c9a6:	bf00      	nop
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <_ZN14TMC2130Stepper16beginTransactionEv>:

__attribute__((weak))
void TMC2130Stepper::beginTransaction() {
 800c9ae:	b480      	push	{r7}
 800c9b0:	b083      	sub	sp, #12
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
  }
}
 800c9b6:	bf00      	nop
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <_ZN14TMC2130Stepper14endTransactionEv>:
__attribute__((weak))
void TMC2130Stepper::endTransaction() {
 800c9c2:	b480      	push	{r7}
 800c9c4:	b083      	sub	sp, #12
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.endTransaction();
  }
}
 800c9ca:	bf00      	nop
 800c9cc:	370c      	adds	r7, #12
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <_ZN14TMC2130Stepper8transferEh>:

__attribute__((weak))
uint8_t TMC2130Stepper::transfer(const uint8_t data) {
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b084      	sub	sp, #16
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	460b      	mov	r3, r1
 800c9e0:	70fb      	strb	r3, [r7, #3]
  uint8_t out = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	73fb      	strb	r3, [r7, #15]
  if (TMC_SW_SPI != nullptr) {
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d008      	beq.n	800ca00 <_ZN14TMC2130Stepper8transferEh+0x2a>
    out = TMC_SW_SPI->transfer(data);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f2:	78fa      	ldrb	r2, [r7, #3]
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7ff fa32 	bl	800be60 <_ZN11SW_SPIClass8transferEh>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	73fb      	strb	r3, [r7, #15]
  }
  else {
    //out = SPI.transfer(data);
  }
  return out;
 800ca00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <_ZN14TMC2130Stepper18transferEmptyBytesEh>:

void TMC2130Stepper::transferEmptyBytes(const uint8_t n) {
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b084      	sub	sp, #16
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
 800ca12:	460b      	mov	r3, r1
 800ca14:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i = 0; i < n; i++) {
 800ca16:	2300      	movs	r3, #0
 800ca18:	73fb      	strb	r3, [r7, #15]
 800ca1a:	7bfa      	ldrb	r2, [r7, #15]
 800ca1c:	78fb      	ldrb	r3, [r7, #3]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d207      	bcs.n	800ca32 <_ZN14TMC2130Stepper18transferEmptyBytesEh+0x28>
    transfer(0x00);
 800ca22:	2100      	movs	r1, #0
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7ff ffd6 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>
  for (uint8_t i = 0; i < n; i++) {
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	73fb      	strb	r3, [r7, #15]
 800ca30:	e7f3      	b.n	800ca1a <_ZN14TMC2130Stepper18transferEmptyBytesEh+0x10>
  }
}
 800ca32:	bf00      	nop
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
	...

0800ca3c <_ZN14TMC2130Stepper4readEh>:

__attribute__((weak))
uint32_t TMC2130Stepper::read(uint8_t addressByte) {
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	460b      	mov	r3, r1
 800ca46:	70fb      	strb	r3, [r7, #3]
  uint32_t out = 0UL;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	60bb      	str	r3, [r7, #8]
  int8_t i = 1;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	73fb      	strb	r3, [r7, #15]

  beginTransaction();
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7ff ffac 	bl	800c9ae <_ZN14TMC2130Stepper16beginTransactionEv>
  switchCSpin(LOW);
 800ca56:	2100      	movs	r1, #0
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f7ff ff93 	bl	800c984 <_ZN14TMC2130Stepper11switchCSpinEb>
  transfer(addressByte);
 800ca5e:	78fb      	ldrb	r3, [r7, #3]
 800ca60:	4619      	mov	r1, r3
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f7ff ffb7 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>
  // Clear SPI
  transferEmptyBytes(4);
 800ca68:	2104      	movs	r1, #4
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7ff ffcd 	bl	800ca0a <_ZN14TMC2130Stepper18transferEmptyBytesEh>

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 800ca76:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	da0a      	bge.n	800ca94 <_ZN14TMC2130Stepper4readEh+0x58>
    transferEmptyBytes(5);
 800ca7e:	2105      	movs	r1, #5
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff ffc2 	bl	800ca0a <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 800ca86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	73fb      	strb	r3, [r7, #15]
  while(i < link_index) {
 800ca92:	e7ed      	b.n	800ca70 <_ZN14TMC2130Stepper4readEh+0x34>
  }

  switchCSpin(HIGH);
 800ca94:	2101      	movs	r1, #1
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7ff ff74 	bl	800c984 <_ZN14TMC2130Stepper11switchCSpinEb>
  switchCSpin(LOW);
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff ff70 	bl	800c984 <_ZN14TMC2130Stepper11switchCSpinEb>

  // Shift data from target link into the last one...
  while(i < chain_length) {
 800caa4:	4b28      	ldr	r3, [pc, #160]	; (800cb48 <_ZN14TMC2130Stepper4readEh+0x10c>)
 800caa6:	f993 3000 	ldrsb.w	r3, [r3]
 800caaa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800caae:	429a      	cmp	r2, r3
 800cab0:	da0a      	bge.n	800cac8 <_ZN14TMC2130Stepper4readEh+0x8c>
    transferEmptyBytes(5);
 800cab2:	2105      	movs	r1, #5
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f7ff ffa8 	bl	800ca0a <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 800caba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	3301      	adds	r3, #1
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	73fb      	strb	r3, [r7, #15]
  while(i < chain_length) {
 800cac6:	e7ed      	b.n	800caa4 <_ZN14TMC2130Stepper4readEh+0x68>
  }

  // ...and once more to MCU
  status_response = transfer(addressByte); // Send the address byte again
 800cac8:	78fb      	ldrb	r3, [r7, #3]
 800caca:	4619      	mov	r1, r3
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff ff82 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>
 800cad2:	4603      	mov	r3, r0
 800cad4:	461a      	mov	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	751a      	strb	r2, [r3, #20]
  out  = transfer(0x00);
 800cada:	2100      	movs	r1, #0
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7ff ff7a 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>
 800cae2:	4603      	mov	r3, r0
 800cae4:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	021b      	lsls	r3, r3, #8
 800caea:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 800caec:	2100      	movs	r1, #0
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7ff ff71 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>
 800caf4:	4603      	mov	r3, r0
 800caf6:	461a      	mov	r2, r3
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	021b      	lsls	r3, r3, #8
 800cb02:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 800cb04:	2100      	movs	r1, #0
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7ff ff65 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	461a      	mov	r2, r3
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	021b      	lsls	r3, r3, #8
 800cb1a:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f7ff ff59 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>
 800cb24:	4603      	mov	r3, r0
 800cb26:	461a      	mov	r2, r3
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	60bb      	str	r3, [r7, #8]

  endTransaction();
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f7ff ff47 	bl	800c9c2 <_ZN14TMC2130Stepper14endTransactionEv>
  switchCSpin(HIGH);
 800cb34:	2101      	movs	r1, #1
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff ff24 	bl	800c984 <_ZN14TMC2130Stepper11switchCSpinEb>
  return out;
 800cb3c:	68bb      	ldr	r3, [r7, #8]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	20000cd4 	.word	0x20000cd4

0800cb4c <_ZN14TMC2130Stepper5writeEhm>:

__attribute__((weak))
void TMC2130Stepper::write(uint8_t addressByte, uint32_t config) {
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b086      	sub	sp, #24
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	460b      	mov	r3, r1
 800cb56:	607a      	str	r2, [r7, #4]
 800cb58:	72fb      	strb	r3, [r7, #11]
  addressByte |= TMC_WRITE;
 800cb5a:	7afb      	ldrb	r3, [r7, #11]
 800cb5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb60:	72fb      	strb	r3, [r7, #11]
  int8_t i = 1;
 800cb62:	2301      	movs	r3, #1
 800cb64:	75fb      	strb	r3, [r7, #23]

  beginTransaction();
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f7ff ff21 	bl	800c9ae <_ZN14TMC2130Stepper16beginTransactionEv>
  switchCSpin(LOW);
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7ff ff08 	bl	800c984 <_ZN14TMC2130Stepper11switchCSpinEb>
  status_response = transfer(addressByte);
 800cb74:	7afb      	ldrb	r3, [r7, #11]
 800cb76:	4619      	mov	r1, r3
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f7ff ff2c 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	461a      	mov	r2, r3
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	751a      	strb	r2, [r3, #20]
  transfer(config>>24);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	0e1b      	lsrs	r3, r3, #24
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f7ff ff21 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>
  transfer(config>>16);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	0c1b      	lsrs	r3, r3, #16
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f7ff ff1a 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>
  transfer(config>>8);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	0a1b      	lsrs	r3, r3, #8
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	4619      	mov	r1, r3
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f7ff ff13 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>
  transfer(config);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f7ff ff0d 	bl	800c9d6 <_ZN14TMC2130Stepper8transferEh>

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 800cbc2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	da0a      	bge.n	800cbe0 <_ZN14TMC2130Stepper5writeEhm+0x94>
    transferEmptyBytes(5);
 800cbca:	2105      	movs	r1, #5
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f7ff ff1c 	bl	800ca0a <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 800cbd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	3301      	adds	r3, #1
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	75fb      	strb	r3, [r7, #23]
  while(i < link_index) {
 800cbde:	e7ed      	b.n	800cbbc <_ZN14TMC2130Stepper5writeEhm+0x70>
  }

  endTransaction();
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f7ff feee 	bl	800c9c2 <_ZN14TMC2130Stepper14endTransactionEv>
  switchCSpin(HIGH);
 800cbe6:	2101      	movs	r1, #1
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f7ff fecb 	bl	800c984 <_ZN14TMC2130Stepper11switchCSpinEb>
}
 800cbee:	bf00      	nop
 800cbf0:	3718      	adds	r7, #24
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <_ZN14TMC2130Stepper9isEnabledEv>:

/**
 *  Helper functions
 */

bool TMC2130Stepper::isEnabled() { return !drv_enn_cfg6() && toff(); }
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b082      	sub	sp, #8
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f823 	bl	800cc4a <_ZN14TMC2130Stepper12drv_enn_cfg6Ev>
 800cc04:	4603      	mov	r3, r0
 800cc06:	f083 0301 	eor.w	r3, r3, #1
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d007      	beq.n	800cc20 <_ZN14TMC2130Stepper9isEnabledEv+0x2a>
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f7ff fb86 	bl	800c322 <_ZN14TMC2130Stepper4toffEv>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d001      	beq.n	800cc20 <_ZN14TMC2130Stepper9isEnabledEv+0x2a>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e000      	b.n	800cc22 <_ZN14TMC2130Stepper9isEnabledEv+0x2c>
 800cc20:	2300      	movs	r3, #0
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <_ZN14TMC2130Stepper4IOINEv>:
  ENCM_CTRL(ENCM_CTRL_register.sr);
}

///////////////////////////////////////////////////////////////////////////////////////
// R: IOIN
uint32_t  TMC2130Stepper::IOIN()    { return read(IOIN_t::address); }
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b082      	sub	sp, #8
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	3304      	adds	r3, #4
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2104      	movs	r1, #4
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	4798      	blx	r3
 800cc40:	4603      	mov	r3, r0
 800cc42:	4618      	mov	r0, r3
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <_ZN14TMC2130Stepper12drv_enn_cfg6Ev>:
bool TMC2130Stepper::step()         { IOIN_t r{0}; r.sr = IOIN(); return r.step; }
bool TMC2130Stepper::dir()          { IOIN_t r{0}; r.sr = IOIN(); return r.dir; }
bool TMC2130Stepper::dcen_cfg4()    { IOIN_t r{0}; r.sr = IOIN(); return r.dcen_cfg4; }
bool TMC2130Stepper::dcin_cfg5()    { IOIN_t r{0}; r.sr = IOIN(); return r.dcin_cfg5; }
bool TMC2130Stepper::drv_enn_cfg6() { IOIN_t r{0}; r.sr = IOIN(); return r.drv_enn_cfg6; }
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b084      	sub	sp, #16
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	2300      	movs	r3, #0
 800cc54:	60fb      	str	r3, [r7, #12]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7ff ffe7 	bl	800cc2a <_ZN14TMC2130Stepper4IOINEv>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	60fb      	str	r3, [r7, #12]
 800cc60:	7b3b      	ldrb	r3, [r7, #12]
 800cc62:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <_ZN14TMC2130Stepper9TCOOLTHRSEm>:
bool TMC2130Stepper::dco()          { IOIN_t r{0}; r.sr = IOIN(); return r.dco; }
uint8_t TMC2130Stepper::version()   { IOIN_t r{0}; r.sr = IOIN(); return r.version; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TCOOLTHRS
uint32_t TMC2130Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2130Stepper::TCOOLTHRS(uint32_t input) {
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	b291      	uxth	r1, r2
 800cc84:	2000      	movs	r0, #0
 800cc86:	4301      	orrs	r1, r0
 800cc88:	8319      	strh	r1, [r3, #24]
 800cc8a:	0c12      	lsrs	r2, r2, #16
 800cc8c:	f002 020f 	and.w	r2, r2, #15
 800cc90:	f002 000f 	and.w	r0, r2, #15
 800cc94:	7e9a      	ldrb	r2, [r3, #26]
 800cc96:	f022 020f 	bic.w	r2, r2, #15
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	430a      	orrs	r2, r1
 800cca0:	769a      	strb	r2, [r3, #26]
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	6992      	ldr	r2, [r2, #24]
 800ccac:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ccb0:	2114      	movs	r1, #20
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	4798      	blx	r3
}
 800ccb6:	bf00      	nop
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <_ZN14TMC2130Stepper5THIGHEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: THIGH
uint32_t TMC2130Stepper::THIGH() { return THIGH_register.sr; }
void TMC2130Stepper::THIGH(uint32_t input) {
 800ccbe:	b590      	push	{r4, r7, lr}
 800ccc0:	b083      	sub	sp, #12
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	6039      	str	r1, [r7, #0]
  THIGH_register.sr = input;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	b2d1      	uxtb	r1, r2
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	4301      	orrs	r1, r0
 800ccd6:	76d9      	strb	r1, [r3, #27]
 800ccd8:	0a11      	lsrs	r1, r2, #8
 800ccda:	b2c9      	uxtb	r1, r1
 800ccdc:	2000      	movs	r0, #0
 800ccde:	4301      	orrs	r1, r0
 800cce0:	7719      	strb	r1, [r3, #28]
 800cce2:	0c12      	lsrs	r2, r2, #16
 800cce4:	f002 020f 	and.w	r2, r2, #15
 800cce8:	f002 000f 	and.w	r0, r2, #15
 800ccec:	7f5a      	ldrb	r2, [r3, #29]
 800ccee:	f022 020f 	bic.w	r2, r2, #15
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	430a      	orrs	r2, r1
 800ccf8:	775a      	strb	r2, [r3, #29]
  write(THIGH_register.address, THIGH_register.sr);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681c      	ldr	r4, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	7eda      	ldrb	r2, [r3, #27]
 800cd04:	8b9b      	ldrh	r3, [r3, #28]
 800cd06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd0a:	021b      	lsls	r3, r3, #8
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	461a      	mov	r2, r3
 800cd10:	2115      	movs	r1, #21
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	47a0      	blx	r4
}
 800cd16:	bf00      	nop
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd90      	pop	{r4, r7, pc}

0800cd1e <_ZN14TMC2130Stepper7XDIRECTEm>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: XDIRECT
uint32_t TMC2130Stepper::XDIRECT() {
  return read(XDIRECT_register.address);
}
void TMC2130Stepper::XDIRECT(uint32_t input) {
 800cd1e:	b590      	push	{r4, r7, lr}
 800cd20:	b083      	sub	sp, #12
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	6039      	str	r1, [r7, #0]
  XDIRECT_register.sr = input;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	b291      	uxth	r1, r2
 800cd32:	2000      	movs	r0, #0
 800cd34:	4301      	orrs	r1, r0
 800cd36:	83d9      	strh	r1, [r3, #30]
 800cd38:	0c12      	lsrs	r2, r2, #16
 800cd3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd3e:	f3c2 0008 	ubfx	r0, r2, #0, #9
 800cd42:	8c1a      	ldrh	r2, [r3, #32]
 800cd44:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800cd48:	f022 0201 	bic.w	r2, r2, #1
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	4602      	mov	r2, r0
 800cd50:	430a      	orrs	r2, r1
 800cd52:	841a      	strh	r2, [r3, #32]
  write(XDIRECT_register.address, XDIRECT_register.sr);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681c      	ldr	r4, [r3, #0]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	8bda      	ldrh	r2, [r3, #30]
 800cd5e:	8c1b      	ldrh	r3, [r3, #32]
 800cd60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd64:	041b      	lsls	r3, r3, #16
 800cd66:	4313      	orrs	r3, r2
 800cd68:	461a      	mov	r2, r3
 800cd6a:	212d      	movs	r1, #45	; 0x2d
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	47a0      	blx	r4
}
 800cd70:	bf00      	nop
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd90      	pop	{r4, r7, pc}

0800cd78 <_ZN14TMC2130Stepper6VDCMINEm>:
int16_t TMC2130Stepper::coil_A()        { XDIRECT_t r{0}; r.sr = XDIRECT(); return r.coil_A; }
int16_t TMC2130Stepper::coil_B()        { XDIRECT_t r{0}; r.sr = XDIRECT(); return r.coil_B; }
///////////////////////////////////////////////////////////////////////////////////////
// W: VDCMIN
uint32_t TMC2130Stepper::VDCMIN() { return VDCMIN_register.sr; }
void TMC2130Stepper::VDCMIN(uint32_t input) {
 800cd78:	b590      	push	{r4, r7, lr}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  VDCMIN_register.sr = input;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	b291      	uxth	r1, r2
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	4301      	orrs	r1, r0
 800cd90:	8459      	strh	r1, [r3, #34]	; 0x22
 800cd92:	0c12      	lsrs	r2, r2, #16
 800cd94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd98:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 800cd9c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800cda0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800cda4:	4611      	mov	r1, r2
 800cda6:	4602      	mov	r2, r0
 800cda8:	430a      	orrs	r2, r1
 800cdaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  write(VDCMIN_register.address, VDCMIN_register.sr);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	681c      	ldr	r4, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800cdb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cdbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc0:	041b      	lsls	r3, r3, #16
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	2133      	movs	r1, #51	; 0x33
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	47a0      	blx	r4
}
 800cdcc:	bf00      	nop
 800cdce:	370c      	adds	r7, #12
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd90      	pop	{r4, r7, pc}

0800cdd4 <_ZN14TMC2130Stepper6DCCTRLEm>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: DCCTRL
void TMC2130Stepper::DCCTRL(uint32_t input) {
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
	DCCTRL_register.sr = input;
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cde8:	f361 231f 	bfi	r3, r1, #8, #24
 800cdec:	62d3      	str	r3, [r2, #44]	; 0x2c
	write(DCCTRL_register.address, DCCTRL_register.sr);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cdf8:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800cdfc:	216e      	movs	r1, #110	; 0x6e
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	4798      	blx	r3
}
 800ce02:	bf00      	nop
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
	...

0800ce0c <_ZN14TMC2160StepperC1Etfttta>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2130Stepper(pinCS, RS, link)
  { defaults(); }
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
 800ce0c:	b590      	push	{r4, r7, lr}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af02      	add	r7, sp, #8
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	4608      	mov	r0, r1
 800ce16:	ed87 0a01 	vstr	s0, [r7, #4]
 800ce1a:	4611      	mov	r1, r2
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	4603      	mov	r3, r0
 800ce20:	817b      	strh	r3, [r7, #10]
 800ce22:	460b      	mov	r3, r1
 800ce24:	813b      	strh	r3, [r7, #8]
 800ce26:	4613      	mov	r3, r2
 800ce28:	807b      	strh	r3, [r7, #2]
  TMC2130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	887c      	ldrh	r4, [r7, #2]
 800ce2e:	893a      	ldrh	r2, [r7, #8]
 800ce30:	8979      	ldrh	r1, [r7, #10]
 800ce32:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	8c3b      	ldrh	r3, [r7, #32]
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	4623      	mov	r3, r4
 800ce3e:	ed97 0a01 	vldr	s0, [r7, #4]
 800ce42:	f7ff fcf9 	bl	800c838 <_ZN14TMC2130StepperC1Etfttta>
 800ce46:	4a0f      	ldr	r2, [pc, #60]	; (800ce84 <_ZN14TMC2160StepperC1Etfttta+0x78>)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	601a      	str	r2, [r3, #0]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	333d      	adds	r3, #61	; 0x3d
 800ce50:	2200      	movs	r2, #0
 800ce52:	801a      	strh	r2, [r3, #0]
 800ce54:	709a      	strb	r2, [r3, #2]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	3340      	adds	r3, #64	; 0x40
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	460a      	mov	r2, r1
 800ce5e:	801a      	strh	r2, [r3, #0]
 800ce60:	460a      	mov	r2, r1
 800ce62:	709a      	strb	r2, [r3, #2]
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	645a      	str	r2, [r3, #68]	; 0x44
  { defaults(); }
 800ce72:	68f8      	ldr	r0, [r7, #12]
 800ce74:	f000 f858 	bl	800cf28 <_ZN14TMC2160Stepper8defaultsEv>
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3714      	adds	r7, #20
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd90      	pop	{r4, r7, pc}
 800ce82:	bf00      	nop
 800ce84:	08018f6c 	.word	0x08018f6c

0800ce88 <_ZN14TMC2160Stepper5beginEv>:
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
  TMC2130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC2160Stepper::begin() {
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  //set pins
  //pinMode(_pinCS, OUTPUT);
  switchCSpin(HIGH);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2101      	movs	r1, #1
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7ff fd75 	bl	800c984 <_ZN14TMC2130Stepper11switchCSpinEb>

  if (TMC_SW_SPI != nullptr) TMC_SW_SPI->init();
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d004      	beq.n	800ceac <_ZN14TMC2160Stepper5beginEv+0x24>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fe ffaf 	bl	800be0a <_ZN11SW_SPIClass4initEv>

  GCONF(GCONF_register.sr);
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	695b      	ldr	r3, [r3, #20]
 800ceb2:	f3c3 2311 	ubfx	r3, r3, #8, #18
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	4610      	mov	r0, r2
 800ceba:	f7ff fbb6 	bl	800c62a <_ZN14TMC2130Stepper5GCONFEm>
  CHOPCONF(CHOPCONF_register.sr);
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 800cec6:	4619      	mov	r1, r3
 800cec8:	4610      	mov	r0, r2
 800ceca:	f7ff f903 	bl	800c0d4 <_ZN14TMC2130Stepper8CHOPCONFEm>
  COOLCONF(COOLCONF_register.sr);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ced4:	0a12      	lsrs	r2, r2, #8
 800ced6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	061b      	lsls	r3, r3, #24
 800cee0:	4313      	orrs	r3, r2
 800cee2:	4619      	mov	r1, r3
 800cee4:	f7ff fa8f 	bl	800c406 <_ZN14TMC2130Stepper8COOLCONFEm>
  PWMCONF(PWMCONF_register.sr);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceec:	4619      	mov	r1, r3
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7ff fc0b 	bl	800c70a <_ZN14TMC2160Stepper7PWMCONFEm>
  IHOLD_IRUN(IHOLD_IRUN_register.sr);
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cefe:	4619      	mov	r1, r3
 800cf00:	4610      	mov	r0, r2
 800cf02:	f7ff fbad 	bl	800c660 <_ZN10TMCStepper10IHOLD_IRUNEm>

  toff(8); //off_time(8);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2108      	movs	r1, #8
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7ff f8f8 	bl	800c100 <_ZN14TMC2130Stepper4toffEh>
  tbl(1); //blank_time(24);
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	332c      	adds	r3, #44	; 0x2c
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	4610      	mov	r0, r2
 800cf1e:	4798      	blx	r3
}
 800cf20:	bf00      	nop
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <_ZN14TMC2160Stepper8defaultsEv>:

void TMC2160Stepper::defaults() {
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
 800cf36:	2106      	movs	r1, #6
 800cf38:	f361 0303 	bfi	r3, r1, #0, #4
 800cf3c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  SHORT_CONF_register.s2g_level = 6;
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800cf46:	2106      	movs	r1, #6
 800cf48:	f361 0303 	bfi	r3, r1, #0, #4
 800cf4c:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
  SHORT_CONF_register.shortfilter = 0b01;
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800cf56:	2101      	movs	r1, #1
 800cf58:	f361 0301 	bfi	r3, r1, #0, #2
 800cf5c:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  SHORT_CONF_register.shortdelay = 0;
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800cf66:	f36f 0382 	bfc	r3, #2, #1
 800cf6a:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  DRV_CONF_register.bbmtime = 0;
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cf74:	f36f 0304 	bfc	r3, #0, #5
 800cf78:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
  DRV_CONF_register.bbmclks = 4;
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cf82:	2104      	movs	r1, #4
 800cf84:	f361 0303 	bfi	r3, r1, #0, #4
 800cf88:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  DRV_CONF_register.otselect = 0b00;
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800cf92:	f36f 0301 	bfc	r3, #0, #2
 800cf96:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.drvstrength = 0b10;
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800cfa0:	2102      	movs	r1, #2
 800cfa2:	f361 0383 	bfi	r3, r1, #2, #2
 800cfa6:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.filt_isense = 0b00;
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800cfb0:	f36f 1305 	bfc	r3, #4, #2
 800cfb4:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  TPOWERDOWN_register.sr = 10;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	220a      	movs	r2, #10
 800cfbc:	71da      	strb	r2, [r3, #7]
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfc2:	b2d2      	uxtb	r2, r2
 800cfc4:	f042 4282 	orr.w	r2, r2, #1090519040	; 0x41000000
 800cfc8:	f442 32a8 	orr.w	r2, r2, #86016	; 0x15000
 800cfcc:	625a      	str	r2, [r3, #36]	; 0x24
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f042 0210 	orr.w	r2, r2, #16
 800cfd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  PWMCONF_register.sr = 0xC40C001E;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a04      	ldr	r2, [pc, #16]	; (800cfec <_ZN14TMC2160Stepper8defaultsEv+0xc4>)
 800cfdc:	645a      	str	r2, [r3, #68]	; 0x44
}
 800cfde:	bf00      	nop
 800cfe0:	370c      	adds	r7, #12
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	c40c001e 	.word	0xc40c001e

0800cff0 <_ZN14TMC2160Stepper11rms_currentEt>:
                 32 * 256 * sqrt(2) * I_rms * R_sense    |
  GLOBALSCALER = ------------------------------------    |
                           (CS + 1) * V_fs               | V_fs = 0.325

*/
void TMC2160Stepper::rms_current(uint16_t mA) {
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b08a      	sub	sp, #40	; 0x28
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	460b      	mov	r3, r1
 800cffa:	817b      	strh	r3, [r7, #10]
  constexpr uint32_t V_fs = 325; // 0.325 * 1000
 800cffc:	f240 1345 	movw	r3, #325	; 0x145
 800d000:	61fb      	str	r3, [r7, #28]
  uint8_t CS = 31;
 800d002:	231f      	movs	r3, #31
 800d004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t scaler = 0; // = 256
 800d008:	2300      	movs	r3, #0
 800d00a:	623b      	str	r3, [r7, #32]

  const uint16_t RS_scaled = Rsense * 0xFFFF; // Scale to 16b
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	edd3 7a03 	vldr	s15, [r3, #12]
 800d012:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800d0e8 <_ZN14TMC2160Stepper11rms_currentEt+0xf8>
 800d016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d01a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d01e:	ee17 3a90 	vmov	r3, s15
 800d022:	837b      	strh	r3, [r7, #26]
  uint32_t numerator = 11585; // 32 * 256 * sqrt(2)
 800d024:	f642 5341 	movw	r3, #11585	; 0x2d41
 800d028:	617b      	str	r3, [r7, #20]
  numerator *= RS_scaled;
 800d02a:	8b7a      	ldrh	r2, [r7, #26]
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	fb02 f303 	mul.w	r3, r2, r3
 800d032:	617b      	str	r3, [r7, #20]
  numerator >>= 8;
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	0a1b      	lsrs	r3, r3, #8
 800d038:	617b      	str	r3, [r7, #20]
  numerator *= mA;
 800d03a:	897a      	ldrh	r2, [r7, #10]
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	fb02 f303 	mul.w	r3, r2, r3
 800d042:	617b      	str	r3, [r7, #20]

  do {
    uint32_t denominator = V_fs * 0xFFFF >> 8;
 800d044:	4b29      	ldr	r3, [pc, #164]	; (800d0ec <_ZN14TMC2160Stepper11rms_currentEt+0xfc>)
 800d046:	613b      	str	r3, [r7, #16]
    denominator *= CS+1;
 800d048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d04c:	3301      	adds	r3, #1
 800d04e:	461a      	mov	r2, r3
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	fb02 f303 	mul.w	r3, r2, r3
 800d056:	613b      	str	r3, [r7, #16]
    scaler = numerator / denominator;
 800d058:	697a      	ldr	r2, [r7, #20]
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d060:	623b      	str	r3, [r7, #32]

    if (scaler > 255) scaler = 0; // Maximum
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	2bff      	cmp	r3, #255	; 0xff
 800d066:	d902      	bls.n	800d06e <_ZN14TMC2160Stepper11rms_currentEt+0x7e>
 800d068:	2300      	movs	r3, #0
 800d06a:	623b      	str	r3, [r7, #32]
 800d06c:	e007      	b.n	800d07e <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
    else if (scaler < 128) CS--;  // Try again with smaller CS
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	2b7f      	cmp	r3, #127	; 0x7f
 800d072:	d804      	bhi.n	800d07e <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
 800d074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d078:	3b01      	subs	r3, #1
 800d07a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while(0 < scaler && scaler < 128);
 800d07e:	6a3b      	ldr	r3, [r7, #32]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d003      	beq.n	800d08c <_ZN14TMC2160Stepper11rms_currentEt+0x9c>
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	2b7f      	cmp	r3, #127	; 0x7f
 800d088:	d800      	bhi.n	800d08c <_ZN14TMC2160Stepper11rms_currentEt+0x9c>
  do {
 800d08a:	e7db      	b.n	800d044 <_ZN14TMC2160Stepper11rms_currentEt+0x54>


  if (CS > 31)
 800d08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d090:	2b1f      	cmp	r3, #31
 800d092:	d902      	bls.n	800d09a <_ZN14TMC2160Stepper11rms_currentEt+0xaa>
    CS = 31;
 800d094:	231f      	movs	r3, #31
 800d096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  GLOBAL_SCALER(scaler);
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	4619      	mov	r1, r3
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f000 f825 	bl	800d0f0 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>
  irun(CS);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d0ac:	4611      	mov	r1, r2
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7ff fb0e 	bl	800c6d0 <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0ba:	ee07 3a90 	vmov	s15, r3
 800d0be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	edd3 7a04 	vldr	s15, [r3, #16]
 800d0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0d0:	edc7 7a01 	vstr	s15, [r7, #4]
 800d0d4:	793b      	ldrb	r3, [r7, #4]
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	4619      	mov	r1, r3
 800d0da:	4610      	mov	r0, r2
 800d0dc:	f7ff fadb 	bl	800c696 <_ZN10TMCStepper5iholdEh>
}
 800d0e0:	bf00      	nop
 800d0e2:	3728      	adds	r7, #40	; 0x28
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	477fff00 	.word	0x477fff00
 800d0ec:	000144fe 	.word	0x000144fe

0800d0f0 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>:
bool    TMC2160Stepper::dco_cfg6()       { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.dco_cfg6; }
uint8_t TMC2160Stepper::version()        { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.version; }

// W: GLOBAL_SCALER
uint8_t TMC2160Stepper::GLOBAL_SCALER() { return GLOBAL_SCALER_register.sr; }
void TMC2160Stepper::GLOBAL_SCALER(uint8_t input) {
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	70fb      	strb	r3, [r7, #3]
  GLOBAL_SCALER_register.sr = input;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	78fa      	ldrb	r2, [r7, #3]
 800d100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  write(GLOBAL_SCALER_register.address, GLOBAL_SCALER_register.sr);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800d112:	210b      	movs	r1, #11
 800d114:	4798      	blx	r3
}
 800d116:	bf00      	nop
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
	...

0800d120 <_ZN14TMC5130StepperC1Etfttta>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2160Stepper(pinCS, RS, link)
  { defaults(); }
TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link):
 800d120:	b590      	push	{r4, r7, lr}
 800d122:	b087      	sub	sp, #28
 800d124:	af02      	add	r7, sp, #8
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	4608      	mov	r0, r1
 800d12a:	ed87 0a01 	vstr	s0, [r7, #4]
 800d12e:	4611      	mov	r1, r2
 800d130:	461a      	mov	r2, r3
 800d132:	4603      	mov	r3, r0
 800d134:	817b      	strh	r3, [r7, #10]
 800d136:	460b      	mov	r3, r1
 800d138:	813b      	strh	r3, [r7, #8]
 800d13a:	4613      	mov	r3, r2
 800d13c:	807b      	strh	r3, [r7, #2]
  TMC2160Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	887c      	ldrh	r4, [r7, #2]
 800d142:	893a      	ldrh	r2, [r7, #8]
 800d144:	8979      	ldrh	r1, [r7, #10]
 800d146:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800d14a:	9301      	str	r3, [sp, #4]
 800d14c:	8c3b      	ldrh	r3, [r7, #32]
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	4623      	mov	r3, r4
 800d152:	ed97 0a01 	vldr	s0, [r7, #4]
 800d156:	f7ff fe59 	bl	800ce0c <_ZN14TMC2160StepperC1Etfttta>
 800d15a:	4a48      	ldr	r2, [pc, #288]	; (800d27c <_ZN14TMC5130StepperC1Etfttta+0x15c>)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	601a      	str	r2, [r3, #0]
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 800d166:	f36f 030b 	bfc	r3, #0, #12
 800d16a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 800d174:	f36f 0300 	bfc	r3, #0, #1
 800d178:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800d184:	2200      	movs	r2, #0
 800d186:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800d190:	2200      	movs	r2, #0
 800d192:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	f892 304f 	ldrb.w	r3, [r2, #79]	; 0x4f
 800d19c:	f36f 0301 	bfc	r3, #0, #2
 800d1a0:	f882 304f 	strb.w	r3, [r2, #79]	; 0x4f
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	651a      	str	r2, [r3, #80]	; 0x50
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800d1b2:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800d1b6:	f022 0203 	bic.w	r2, r2, #3
 800d1ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800d1da:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800d1de:	f022 020f 	bic.w	r2, r2, #15
 800d1e2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800d1f6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800d1fa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800d1fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2200      	movs	r2, #0
 800d214:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2200      	movs	r2, #0
 800d222:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800d226:	2200      	movs	r2, #0
 800d228:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800d22c:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800d230:	f022 0203 	bic.w	r2, r2, #3
 800d234:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	f8b2 306a 	ldrh.w	r3, [r2, #106]	; 0x6a
 800d246:	f36f 030b 	bfc	r3, #0, #12
 800d24a:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	f8b2 306c 	ldrh.w	r3, [r2, #108]	; 0x6c
 800d254:	f36f 030a 	bfc	r3, #0, #11
 800d258:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800d264:	2200      	movs	r2, #0
 800d266:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  { defaults(); }
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	f000 f81c 	bl	800d2a8 <_ZN14TMC5130Stepper8defaultsEv>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	4618      	mov	r0, r3
 800d274:	3714      	adds	r7, #20
 800d276:	46bd      	mov	sp, r7
 800d278:	bd90      	pop	{r4, r7, pc}
 800d27a:	bf00      	nop
 800d27c:	08018fa8 	.word	0x08018fa8

0800d280 <_ZN14TMC5130Stepper5beginEv>:
TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
  TMC2160Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5130Stepper::begin() {
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  TMC2160Stepper::begin();
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7ff fdfc 	bl	800ce88 <_ZN14TMC2160Stepper5beginEv>

  XTARGET(0);
 800d290:	2100      	movs	r1, #0
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fa4e 	bl	800d734 <_ZN14TMC5130Stepper7XTARGETEl>
  XACTUAL(0);
 800d298:	2100      	movs	r1, #0
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 f8e0 	bl	800d460 <_ZN14TMC5130Stepper7XACTUALEl>
  //while (( RAMP_STAT() & cfg.VZERO_bm) != cfg.VZERO_bm) {}
}
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <_ZN14TMC5130Stepper8defaultsEv>:

void TMC5130Stepper::defaults() {
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  OUTPUT_register.sr = 1;
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 800d2b6:	f043 0301 	orr.w	r3, r3, #1
 800d2ba:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
  ENC_CONST_register.sr = 65536;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f042 0201 	orr.w	r2, r2, #1
 800d2cc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4a04      	ldr	r2, [pc, #16]	; (800d2e4 <_ZN14TMC5130Stepper8defaultsEv+0x3c>)
 800d2d4:	645a      	str	r2, [r3, #68]	; 0x44
}
 800d2d6:	bf00      	nop
 800d2d8:	370c      	adds	r7, #12
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	00050480 	.word	0x00050480

0800d2e8 <_ZN14TMC5130Stepper9SLAVECONFEt>:
// R: IFCNT
uint8_t TMC5130Stepper::IFCNT() { return read(IFCNT_t::address); }
///////////////////////////////////////////////////////////////////////////////////////
// W: SLAVECONF
uint16_t TMC5130Stepper::SLAVECONF() { return SLAVECONF_register.sr; }
void TMC5130Stepper::SLAVECONF(uint16_t input) {
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	807b      	strh	r3, [r7, #2]
  SLAVECONF_register.sr = input;
 800d2f4:	887b      	ldrh	r3, [r7, #2]
 800d2f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2fa:	b299      	uxth	r1, r3
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 800d302:	f361 030b 	bfi	r3, r1, #0, #12
 800d306:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
  write(SLAVECONF_register.address, SLAVECONF_register.sr);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800d318:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800d31c:	b292      	uxth	r2, r2
 800d31e:	2103      	movs	r1, #3
 800d320:	4798      	blx	r3
}
 800d322:	bf00      	nop
 800d324:	3708      	adds	r7, #8
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <_ZN14TMC5130Stepper4IOINEv>:
///////////////////////////////////////////////////////////////////////////////////////
// R: IOIN
uint32_t  TMC5130Stepper::IOIN() {
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b082      	sub	sp, #8
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
  return read(TMC5130_n::IOIN_t::address);
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	3304      	adds	r3, #4
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2104      	movs	r1, #4
 800d33e:	4610      	mov	r0, r2
 800d340:	4798      	blx	r3
 800d342:	4603      	mov	r3, r0
}
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <_ZN14TMC5130Stepper7sd_modeEv>:
bool    TMC5130Stepper::refr_dir()       { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.refr_dir; }
bool    TMC5130Stepper::encb_dcen_cfg4() { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.encb_dcen_cfg4; }
bool    TMC5130Stepper::enca_dcin_cfg5() { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.enca_dcin_cfg5; }
bool    TMC5130Stepper::drv_enn_cfg6()   { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.drv_enn_cfg6; }
bool    TMC5130Stepper::enc_n_dco()      { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.enc_n_dco; }
bool    TMC5130Stepper::sd_mode()        { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.sd_mode; }
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	2300      	movs	r3, #0
 800d356:	60fb      	str	r3, [r7, #12]
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7ff ffe6 	bl	800d32a <_ZN14TMC5130Stepper4IOINEv>
 800d35e:	4603      	mov	r3, r0
 800d360:	60fb      	str	r3, [r7, #12]
 800d362:	7b3b      	ldrb	r3, [r7, #12]
 800d364:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	4618      	mov	r0, r3
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}

0800d372 <_ZN14TMC5130Stepper7versionEv>:
bool    TMC5130Stepper::swcomp_in()      { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.swcomp_in; }
uint8_t   TMC5130Stepper::version()      { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.version; }
 800d372:	b580      	push	{r7, lr}
 800d374:	b084      	sub	sp, #16
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
 800d37a:	2300      	movs	r3, #0
 800d37c:	60fb      	str	r3, [r7, #12]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f7ff ffd3 	bl	800d32a <_ZN14TMC5130Stepper4IOINEv>
 800d384:	4603      	mov	r3, r0
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	7bfb      	ldrb	r3, [r7, #15]
 800d38a:	4618      	mov	r0, r3
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <_ZN14TMC5130Stepper10TMC_OUTPUTEb>:
///////////////////////////////////////////////////////////////////////////////////////
// W: OUTPUT
bool TMC5130Stepper::TMC_OUTPUT() { return OUTPUT_register.sr; }
void TMC5130Stepper::TMC_OUTPUT(bool input) {
 800d392:	b580      	push	{r7, lr}
 800d394:	b082      	sub	sp, #8
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
 800d39a:	460b      	mov	r3, r1
 800d39c:	70fb      	strb	r3, [r7, #3]
  OUTPUT_register.sr = input;
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 800d3a4:	78f9      	ldrb	r1, [r7, #3]
 800d3a6:	f361 0300 	bfi	r3, r1, #0, #1
 800d3aa:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
  write(OUTPUT_register.address, OUTPUT_register.sr);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 800d3bc:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800d3c0:	b2d2      	uxtb	r2, r2
 800d3c2:	2104      	movs	r1, #4
 800d3c4:	4798      	blx	r3
}
 800d3c6:	bf00      	nop
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <_ZN14TMC5130Stepper9X_COMPAREEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: X_COMPARE
uint32_t TMC5130Stepper::X_COMPARE() { return X_COMPARE_register.sr; }
void TMC5130Stepper::X_COMPARE(uint32_t input) {
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b082      	sub	sp, #8
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
 800d3d6:	6039      	str	r1, [r7, #0]
  X_COMPARE_register.sr = input;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	f8c3 204b 	str.w	r2, [r3, #75]	; 0x4b
  write(X_COMPARE_register.address, X_COMPARE_register.sr);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	f8d2 204b 	ldr.w	r2, [r2, #75]	; 0x4b
 800d3ee:	2105      	movs	r1, #5
 800d3f0:	4798      	blx	r3
}
 800d3f2:	bf00      	nop
 800d3f4:	3708      	adds	r7, #8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <_ZN14TMC5130Stepper8RAMPMODEEv>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: RAMPMODE
uint8_t TMC5130Stepper::RAMPMODE() { return read(RAMPMODE_register.address); }
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b082      	sub	sp, #8
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3304      	adds	r3, #4
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2120      	movs	r1, #32
 800d40e:	4610      	mov	r0, r2
 800d410:	4798      	blx	r3
 800d412:	4603      	mov	r3, r0
 800d414:	b2db      	uxtb	r3, r3
 800d416:	4618      	mov	r0, r3
 800d418:	3708      	adds	r7, #8
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <_ZN14TMC5130Stepper8RAMPMODEEh>:
void TMC5130Stepper::RAMPMODE(uint8_t input) {
 800d41e:	b580      	push	{r7, lr}
 800d420:	b082      	sub	sp, #8
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	460b      	mov	r3, r1
 800d428:	70fb      	strb	r3, [r7, #3]
  RAMPMODE_register.sr = input;
 800d42a:	78fb      	ldrb	r3, [r7, #3]
 800d42c:	f003 0303 	and.w	r3, r3, #3
 800d430:	b2d9      	uxtb	r1, r3
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	f892 304f 	ldrb.w	r3, [r2, #79]	; 0x4f
 800d438:	f361 0301 	bfi	r3, r1, #0, #2
 800d43c:	f882 304f 	strb.w	r3, [r2, #79]	; 0x4f
  write(RAMPMODE_register.address, RAMPMODE_register.sr);
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
 800d44e:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800d452:	b2d2      	uxtb	r2, r2
 800d454:	2120      	movs	r1, #32
 800d456:	4798      	blx	r3
}
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <_ZN14TMC5130Stepper7XACTUALEl>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: XACTUAL
int32_t TMC5130Stepper::XACTUAL() { return read(XACTUAL_register.address); }
void TMC5130Stepper::XACTUAL(int32_t input) {
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  write(XACTUAL_register.address, input);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	2121      	movs	r1, #33	; 0x21
 800d476:	4798      	blx	r3
}
 800d478:	bf00      	nop
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <_ZN14TMC5130Stepper7VACTUALEv>:
///////////////////////////////////////////////////////////////////////////////////////
// R: VACTUAL
int32_t TMC5130Stepper::VACTUAL() {
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  uint32_t int24 = read(VACTUAL_t::address);
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	3304      	adds	r3, #4
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2122      	movs	r1, #34	; 0x22
 800d494:	4610      	mov	r0, r2
 800d496:	4798      	blx	r3
 800d498:	60f8      	str	r0, [r7, #12]
  if((int24 >> 23) & 0x01) {
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d003      	beq.n	800d4ac <_ZN14TMC5130Stepper7VACTUALEv+0x2c>
    int24 |= 0xFF000000;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4aa:	60fb      	str	r3, [r7, #12]
  }
  return int24;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <_ZN14TMC5130Stepper6VSTARTEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: VSTART
uint32_t TMC5130Stepper::VSTART() { return VSTART_register.sr; }
void TMC5130Stepper::VSTART(uint32_t input) {
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b082      	sub	sp, #8
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	6039      	str	r1, [r7, #0]
  VSTART_register.sr = input;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	b291      	uxth	r1, r2
 800d4ca:	2000      	movs	r0, #0
 800d4cc:	4301      	orrs	r1, r0
 800d4ce:	f8a3 1054 	strh.w	r1, [r3, #84]	; 0x54
 800d4d2:	0c12      	lsrs	r2, r2, #16
 800d4d4:	f002 0203 	and.w	r2, r2, #3
 800d4d8:	f002 0003 	and.w	r0, r2, #3
 800d4dc:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800d4e0:	f022 0203 	bic.w	r2, r2, #3
 800d4e4:	4611      	mov	r1, r2
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	430a      	orrs	r2, r1
 800d4ea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  write(VSTART_register.address, VSTART_register.sr);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d4fa:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800d4fe:	2123      	movs	r1, #35	; 0x23
 800d500:	4798      	blx	r3
}
 800d502:	bf00      	nop
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <_ZN14TMC5130Stepper2A1Et>:
///////////////////////////////////////////////////////////////////////////////////////
// W: A1
uint16_t TMC5130Stepper::A1() { return A1_register.sr; }
void TMC5130Stepper::A1(uint16_t input) {
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b082      	sub	sp, #8
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	460b      	mov	r3, r1
 800d514:	807b      	strh	r3, [r7, #2]
  A1_register.sr = input;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	887a      	ldrh	r2, [r7, #2]
 800d51a:	f8a3 2057 	strh.w	r2, [r3, #87]	; 0x57
  write(A1_register.address, A1_register.sr);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	f8b2 2057 	ldrh.w	r2, [r2, #87]	; 0x57
 800d52c:	b292      	uxth	r2, r2
 800d52e:	2124      	movs	r1, #36	; 0x24
 800d530:	4798      	blx	r3
}
 800d532:	bf00      	nop
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <_ZN14TMC5130Stepper2V1Em>:
///////////////////////////////////////////////////////////////////////////////////////
// W: V1
uint32_t TMC5130Stepper::V1() { return V1_register.sr; }
void TMC5130Stepper::V1(uint32_t input) {
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b082      	sub	sp, #8
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
 800d542:	6039      	str	r1, [r7, #0]
  V1_register.sr = input;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	b2d1      	uxtb	r1, r2
 800d54e:	2000      	movs	r0, #0
 800d550:	4301      	orrs	r1, r0
 800d552:	f883 1059 	strb.w	r1, [r3, #89]	; 0x59
 800d556:	0a11      	lsrs	r1, r2, #8
 800d558:	b2c9      	uxtb	r1, r1
 800d55a:	2000      	movs	r0, #0
 800d55c:	4301      	orrs	r1, r0
 800d55e:	f883 105a 	strb.w	r1, [r3, #90]	; 0x5a
 800d562:	0c12      	lsrs	r2, r2, #16
 800d564:	f002 020f 	and.w	r2, r2, #15
 800d568:	f002 000f 	and.w	r0, r2, #15
 800d56c:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800d570:	f022 020f 	bic.w	r2, r2, #15
 800d574:	4611      	mov	r1, r2
 800d576:	4602      	mov	r2, r0
 800d578:	430a      	orrs	r2, r1
 800d57a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  write(V1_register.address, V1_register.sr);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d58a:	f3c2 2213 	ubfx	r2, r2, #8, #20
 800d58e:	2125      	movs	r1, #37	; 0x25
 800d590:	4798      	blx	r3
}
 800d592:	bf00      	nop
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <_ZN14TMC5130Stepper4AMAXEt>:
///////////////////////////////////////////////////////////////////////////////////////
// W: AMAX
uint16_t TMC5130Stepper::AMAX() { return AMAX_register.sr; }
void TMC5130Stepper::AMAX(uint16_t input) {
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b082      	sub	sp, #8
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	807b      	strh	r3, [r7, #2]
  AMAX_register.sr = input;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	887a      	ldrh	r2, [r7, #2]
 800d5aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  write(AMAX_register.address, AMAX_register.sr);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800d5bc:	2126      	movs	r1, #38	; 0x26
 800d5be:	4798      	blx	r3
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <_ZN14TMC5130Stepper4VMAXEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: VMAX
uint32_t TMC5130Stepper::VMAX() { return VMAX_register.sr; }
void TMC5130Stepper::VMAX(uint32_t input) {
 800d5c8:	b590      	push	{r4, r7, lr}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  VMAX_register.sr = input;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	b291      	uxth	r1, r2
 800d5dc:	2000      	movs	r0, #0
 800d5de:	4301      	orrs	r1, r0
 800d5e0:	f8a3 105e 	strh.w	r1, [r3, #94]	; 0x5e
 800d5e4:	0c12      	lsrs	r2, r2, #16
 800d5e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d5ea:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 800d5ee:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800d5f2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	430a      	orrs	r2, r1
 800d5fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  write(VMAX_register.address, VMAX_register.sr);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	681c      	ldr	r4, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800d60e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d616:	041b      	lsls	r3, r3, #16
 800d618:	4313      	orrs	r3, r2
 800d61a:	461a      	mov	r2, r3
 800d61c:	2127      	movs	r1, #39	; 0x27
 800d61e:	47a0      	blx	r4
}
 800d620:	bf00      	nop
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	bd90      	pop	{r4, r7, pc}

0800d628 <_ZN14TMC5130Stepper4DMAXEt>:
///////////////////////////////////////////////////////////////////////////////////////
// W: DMAX
uint16_t TMC5130Stepper::DMAX() { return DMAX_register.sr; }
void TMC5130Stepper::DMAX(uint16_t input) {
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	460b      	mov	r3, r1
 800d632:	807b      	strh	r3, [r7, #2]
  DMAX_register.sr = input;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	887a      	ldrh	r2, [r7, #2]
 800d638:	f8a3 2061 	strh.w	r2, [r3, #97]	; 0x61
  write(DMAX_register.address, DMAX_register.sr);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	f8b2 2061 	ldrh.w	r2, [r2, #97]	; 0x61
 800d64a:	b292      	uxth	r2, r2
 800d64c:	2128      	movs	r1, #40	; 0x28
 800d64e:	4798      	blx	r3
}
 800d650:	bf00      	nop
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <_ZN14TMC5130Stepper2D1Et>:
///////////////////////////////////////////////////////////////////////////////////////
// W: D1
uint16_t TMC5130Stepper::D1() { return D1_register.sr; }
void TMC5130Stepper::D1(uint16_t input) {
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	460b      	mov	r3, r1
 800d662:	807b      	strh	r3, [r7, #2]
  D1_register.sr = input;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	887a      	ldrh	r2, [r7, #2]
 800d668:	f8a3 2063 	strh.w	r2, [r3, #99]	; 0x63
  write(D1_register.address, D1_register.sr);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	f8b2 2063 	ldrh.w	r2, [r2, #99]	; 0x63
 800d67a:	b292      	uxth	r2, r2
 800d67c:	212a      	movs	r1, #42	; 0x2a
 800d67e:	4798      	blx	r3
}
 800d680:	bf00      	nop
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <_ZN14TMC5130Stepper5VSTOPEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: VSTOP
uint32_t TMC5130Stepper::VSTOP() { return VSTOP_register.sr; }
void TMC5130Stepper::VSTOP(uint32_t input) {
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  if (input == 0 && RAMPMODE() == 0) return;
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d107      	bne.n	800d6a8 <_ZN14TMC5130Stepper5VSTOPEm+0x20>
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f7ff feae 	bl	800d3fa <_ZN14TMC5130Stepper8RAMPMODEEv>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d101      	bne.n	800d6a8 <_ZN14TMC5130Stepper5VSTOPEm+0x20>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e000      	b.n	800d6aa <_ZN14TMC5130Stepper5VSTOPEm+0x22>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d127      	bne.n	800d6fe <_ZN14TMC5130Stepper5VSTOPEm+0x76>
  VSTOP_register.sr = input;
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	b2d1      	uxtb	r1, r2
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	4301      	orrs	r1, r0
 800d6bc:	f883 1065 	strb.w	r1, [r3, #101]	; 0x65
 800d6c0:	0a11      	lsrs	r1, r2, #8
 800d6c2:	b2c9      	uxtb	r1, r1
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	4301      	orrs	r1, r0
 800d6c8:	f883 1066 	strb.w	r1, [r3, #102]	; 0x66
 800d6cc:	0c12      	lsrs	r2, r2, #16
 800d6ce:	f002 0203 	and.w	r2, r2, #3
 800d6d2:	f002 0003 	and.w	r0, r2, #3
 800d6d6:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800d6da:	f022 0203 	bic.w	r2, r2, #3
 800d6de:	4611      	mov	r1, r2
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	430a      	orrs	r2, r1
 800d6e4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
  write(VSTOP_register.address, VSTOP_register.sr);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d6f4:	f3c2 2211 	ubfx	r2, r2, #8, #18
 800d6f8:	212b      	movs	r1, #43	; 0x2b
 800d6fa:	4798      	blx	r3
 800d6fc:	e000      	b.n	800d700 <_ZN14TMC5130Stepper5VSTOPEm+0x78>
  if (input == 0 && RAMPMODE() == 0) return;
 800d6fe:	bf00      	nop
}
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <_ZN14TMC5130Stepper9TZEROWAITEt>:
///////////////////////////////////////////////////////////////////////////////////////
// W: TZEROWAIT
uint16_t TMC5130Stepper::TZEROWAIT() { return TZEROWAIT_register.sr; }
void TMC5130Stepper::TZEROWAIT(uint16_t input) {
 800d706:	b580      	push	{r7, lr}
 800d708:	b082      	sub	sp, #8
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
 800d70e:	460b      	mov	r3, r1
 800d710:	807b      	strh	r3, [r7, #2]
  TZEROWAIT_register.sr = input;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	887a      	ldrh	r2, [r7, #2]
 800d716:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  write(TZEROWAIT_register.address, TZEROWAIT_register.sr);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800d728:	212c      	movs	r1, #44	; 0x2c
 800d72a:	4798      	blx	r3
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <_ZN14TMC5130Stepper7XTARGETEl>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: XTARGET
int32_t TMC5130Stepper::XTARGET() { return read(XTARGET_t::address); }
void TMC5130Stepper::XTARGET(int32_t input) {
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  write(XTARGET_t::address, input);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	212d      	movs	r1, #45	; 0x2d
 800d74a:	4798      	blx	r3
}
 800d74c:	bf00      	nop
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <_ZN14TMC5130Stepper9ENC_CONSTEm>:
  write(X_ENC_t::address, input);
}
///////////////////////////////////////////////////////////////////////////////////////
// W: ENC_CONST
uint32_t TMC5130Stepper::ENC_CONST() { return ENC_CONST_register.sr; }
void TMC5130Stepper::ENC_CONST(uint32_t input) {
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  ENC_CONST_register.sr = input;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	683a      	ldr	r2, [r7, #0]
 800d762:	f8c3 206e 	str.w	r2, [r3, #110]	; 0x6e
  write(ENC_CONST_register.address, ENC_CONST_register.sr);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	f8d2 206e 	ldr.w	r2, [r2, #110]	; 0x6e
 800d774:	213a      	movs	r1, #58	; 0x3a
 800d776:	4798      	blx	r3
}
 800d778:	bf00      	nop
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <_ZN14TMC5160StepperC1Etfttta>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC5130Stepper(pinCS, RS, link)
  { defaults(); }
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
 800d780:	b590      	push	{r4, r7, lr}
 800d782:	b087      	sub	sp, #28
 800d784:	af02      	add	r7, sp, #8
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	4608      	mov	r0, r1
 800d78a:	ed87 0a01 	vstr	s0, [r7, #4]
 800d78e:	4611      	mov	r1, r2
 800d790:	461a      	mov	r2, r3
 800d792:	4603      	mov	r3, r0
 800d794:	817b      	strh	r3, [r7, #10]
 800d796:	460b      	mov	r3, r1
 800d798:	813b      	strh	r3, [r7, #8]
 800d79a:	4613      	mov	r3, r2
 800d79c:	807b      	strh	r3, [r7, #2]
  TMC5130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	887c      	ldrh	r4, [r7, #2]
 800d7a2:	893a      	ldrh	r2, [r7, #8]
 800d7a4:	8979      	ldrh	r1, [r7, #10]
 800d7a6:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800d7aa:	9301      	str	r3, [sp, #4]
 800d7ac:	8c3b      	ldrh	r3, [r7, #32]
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	4623      	mov	r3, r4
 800d7b2:	ed97 0a01 	vldr	s0, [r7, #4]
 800d7b6:	f7ff fcb3 	bl	800d120 <_ZN14TMC5130StepperC1Etfttta>
 800d7ba:	4a0a      	ldr	r2, [pc, #40]	; (800d7e4 <_ZN14TMC5160StepperC1Etfttta+0x64>)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	601a      	str	r2, [r3, #0]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800d7c8:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800d7cc:	f022 020f 	bic.w	r2, r2, #15
 800d7d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  { defaults(); }
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f000 f807 	bl	800d7e8 <_ZN14TMC5160Stepper8defaultsEv>
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd90      	pop	{r4, r7, pc}
 800d7e4:	08018fe4 	.word	0x08018fe4

0800d7e8 <_ZN14TMC5160Stepper8defaultsEv>:
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
  TMC5130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5160Stepper::defaults() {
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
 800d7f6:	2106      	movs	r1, #6
 800d7f8:	f361 0303 	bfi	r3, r1, #0, #4
 800d7fc:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  SHORT_CONF_register.s2g_level = 6;
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800d806:	2106      	movs	r1, #6
 800d808:	f361 0303 	bfi	r3, r1, #0, #4
 800d80c:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
  SHORT_CONF_register.shortfilter = 0b01;
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800d816:	2101      	movs	r1, #1
 800d818:	f361 0301 	bfi	r3, r1, #0, #2
 800d81c:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  SHORT_CONF_register.shortdelay = 0;
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800d826:	f36f 0382 	bfc	r3, #2, #1
 800d82a:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  DRV_CONF_register.bbmtime = 0;
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d834:	f36f 0304 	bfc	r3, #0, #5
 800d838:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
  DRV_CONF_register.bbmclks = 4;
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d842:	2104      	movs	r1, #4
 800d844:	f361 0303 	bfi	r3, r1, #0, #4
 800d848:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  DRV_CONF_register.otselect = 0b00;
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d852:	f36f 0301 	bfc	r3, #0, #2
 800d856:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.drvstrength = 0b10;
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d860:	2102      	movs	r1, #2
 800d862:	f361 0383 	bfi	r3, r1, #2, #2
 800d866:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.filt_isense = 0b00;
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d870:	f36f 1305 	bfc	r3, #4, #2
 800d874:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  TPOWERDOWN_register.sr = 10;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	220a      	movs	r2, #10
 800d87c:	71da      	strb	r2, [r3, #7]
  VSTOP_register.sr = 1;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	f042 0201 	orr.w	r2, r2, #1
 800d886:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800d890:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800d894:	f022 0203 	bic.w	r2, r2, #3
 800d898:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
  ENC_CONST_register.sr = 65536;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f042 0201 	orr.w	r2, r2, #1
 800d8aa:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8b2:	b2d2      	uxtb	r2, r2
 800d8b4:	f042 4282 	orr.w	r2, r2, #1090519040	; 0x41000000
 800d8b8:	f442 32a8 	orr.w	r2, r2, #86016	; 0x15000
 800d8bc:	625a      	str	r2, [r3, #36]	; 0x24
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f042 0210 	orr.w	r2, r2, #16
 800d8c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  PWMCONF_register.sr = 0xC40C001E;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a04      	ldr	r2, [pc, #16]	; (800d8dc <_ZN14TMC5160Stepper8defaultsEv+0xf4>)
 800d8cc:	645a      	str	r2, [r3, #68]	; 0x44
}
 800d8ce:	bf00      	nop
 800d8d0:	370c      	adds	r7, #12
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop
 800d8dc:	c40c001e 	.word	0xc40c001e

0800d8e0 <_ZN14TMC5160Stepper4pushEv>:

void TMC5160Stepper::push() {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
    IHOLD_IRUN(IHOLD_IRUN_register.sr);
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	f7fe feb3 	bl	800c660 <_ZN10TMCStepper10IHOLD_IRUNEm>
    TPOWERDOWN(TPOWERDOWN_register.sr);
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	79db      	ldrb	r3, [r3, #7]
 800d900:	4619      	mov	r1, r3
 800d902:	4610      	mov	r0, r2
 800d904:	f000 fabe 	bl	800de84 <_ZN10TMCStepper10TPOWERDOWNEh>
    TPWMTHRS(TPWMTHRS_register.sr);
 800d908:	687a      	ldr	r2, [r7, #4]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d912:	4619      	mov	r1, r3
 800d914:	4610      	mov	r0, r2
 800d916:	f000 faca 	bl	800deae <_ZN10TMCStepper8TPWMTHRSEm>
    GCONF(GCONF_register.sr);
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	f3c3 2311 	ubfx	r3, r3, #8, #18
 800d924:	4619      	mov	r1, r3
 800d926:	4610      	mov	r0, r2
 800d928:	f7fe fe7f 	bl	800c62a <_ZN14TMC2130Stepper5GCONFEm>
    TCOOLTHRS(TCOOLTHRS_register.sr);
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	699b      	ldr	r3, [r3, #24]
 800d932:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d936:	4619      	mov	r1, r3
 800d938:	4610      	mov	r0, r2
 800d93a:	f7ff f999 	bl	800cc70 <_ZN14TMC2130Stepper9TCOOLTHRSEm>
    THIGH(THIGH_register.sr);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	7eda      	ldrb	r2, [r3, #27]
 800d944:	8b9b      	ldrh	r3, [r3, #28]
 800d946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d94a:	021b      	lsls	r3, r3, #8
 800d94c:	4313      	orrs	r3, r2
 800d94e:	4619      	mov	r1, r3
 800d950:	f7ff f9b5 	bl	800ccbe <_ZN14TMC2130Stepper5THIGHEm>
    XDIRECT(XDIRECT_register.sr);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	8bda      	ldrh	r2, [r3, #30]
 800d95a:	8c1b      	ldrh	r3, [r3, #32]
 800d95c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d960:	041b      	lsls	r3, r3, #16
 800d962:	4313      	orrs	r3, r2
 800d964:	4619      	mov	r1, r3
 800d966:	f7ff f9da 	bl	800cd1e <_ZN14TMC2130Stepper7XDIRECTEm>
    VDCMIN(VDCMIN_register.sr);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800d970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d978:	041b      	lsls	r3, r3, #16
 800d97a:	4313      	orrs	r3, r2
 800d97c:	4619      	mov	r1, r3
 800d97e:	f7ff f9fb 	bl	800cd78 <_ZN14TMC2130Stepper6VDCMINEm>
    CHOPCONF(CHOPCONF_register.sr);
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 800d98a:	4619      	mov	r1, r3
 800d98c:	4610      	mov	r0, r2
 800d98e:	f7fe fba1 	bl	800c0d4 <_ZN14TMC2130Stepper8CHOPCONFEm>
    COOLCONF(COOLCONF_register.sr);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d998:	0a12      	lsrs	r2, r2, #8
 800d99a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	061b      	lsls	r3, r3, #24
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	f7fe fd2d 	bl	800c406 <_ZN14TMC2130Stepper8COOLCONFEm>
    DCCTRL(DCCTRL_register.sr);
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	4610      	mov	r0, r2
 800d9ba:	f7ff fa0b 	bl	800cdd4 <_ZN14TMC2130Stepper6DCCTRLEm>
    PWMCONF(PWMCONF_register.sr);
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	4610      	mov	r0, r2
 800d9c8:	f7fe fe9f 	bl	800c70a <_ZN14TMC2160Stepper7PWMCONFEm>
    SHORT_CONF(SHORT_CONF_register.sr);
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d2:	f3c3 2312 	ubfx	r3, r3, #8, #19
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	4610      	mov	r0, r2
 800d9da:	f7fe fec7 	bl	800c76c <_ZN14TMC2160Stepper10SHORT_CONFEm>
    DRV_CONF(DRV_CONF_register.sr);
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f7fe fdd2 	bl	800c594 <_ZN14TMC2160Stepper8DRV_CONFEm>
    GLOBAL_SCALER(GLOBAL_SCALER_register.sr);
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	4610      	mov	r0, r2
 800d9fc:	f7ff fb78 	bl	800d0f0 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>
    SLAVECONF(SLAVECONF_register.sr);
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	4619      	mov	r1, r3
 800da10:	4610      	mov	r0, r2
 800da12:	f7ff fc69 	bl	800d2e8 <_ZN14TMC5130Stepper9SLAVECONFEt>
    TMC_OUTPUT(OUTPUT_register.sr);
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800da1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800da22:	b2db      	uxtb	r3, r3
 800da24:	4619      	mov	r1, r3
 800da26:	4610      	mov	r0, r2
 800da28:	f7ff fcb3 	bl	800d392 <_ZN14TMC5130Stepper10TMC_OUTPUTEb>
    X_COMPARE(X_COMPARE_register.sr);
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 304b 	ldr.w	r3, [r3, #75]	; 0x4b
 800da34:	4619      	mov	r1, r3
 800da36:	4610      	mov	r0, r2
 800da38:	f7ff fcc9 	bl	800d3ce <_ZN14TMC5130Stepper9X_COMPAREEm>
    RAMPMODE(RAMPMODE_register.sr);
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800da44:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	4619      	mov	r1, r3
 800da4c:	4610      	mov	r0, r2
 800da4e:	f7ff fce6 	bl	800d41e <_ZN14TMC5130Stepper8RAMPMODEEh>
    XACTUAL(XACTUAL_register.sr);
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da58:	4619      	mov	r1, r3
 800da5a:	4610      	mov	r0, r2
 800da5c:	f7ff fd00 	bl	800d460 <_ZN14TMC5130Stepper7XACTUALEl>
    VSTART(VSTART_register.sr);
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da66:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800da6a:	4619      	mov	r1, r3
 800da6c:	4610      	mov	r0, r2
 800da6e:	f7ff fd22 	bl	800d4b6 <_ZN14TMC5130Stepper6VSTARTEm>
    A1(A1_register.sr);
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8b3 3057 	ldrh.w	r3, [r3, #87]	; 0x57
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	4619      	mov	r1, r3
 800da7e:	4610      	mov	r0, r2
 800da80:	f7ff fd43 	bl	800d50a <_ZN14TMC5130Stepper2A1Et>
    V1(V1_register.sr);
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da8a:	f3c3 2313 	ubfx	r3, r3, #8, #20
 800da8e:	4619      	mov	r1, r3
 800da90:	4610      	mov	r0, r2
 800da92:	f7ff fd52 	bl	800d53a <_ZN14TMC5130Stepper2V1Em>
    AMAX(AMAX_register.sr);
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da9e:	4619      	mov	r1, r3
 800daa0:	4610      	mov	r0, r2
 800daa2:	f7ff fd7a 	bl	800d59a <_ZN14TMC5130Stepper4AMAXEt>
    VMAX(VMAX_register.sr);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800daae:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800dab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dab6:	041b      	lsls	r3, r3, #16
 800dab8:	4313      	orrs	r3, r2
 800daba:	4619      	mov	r1, r3
 800dabc:	f7ff fd84 	bl	800d5c8 <_ZN14TMC5130Stepper4VMAXEm>
    DMAX(DMAX_register.sr);
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8b3 3061 	ldrh.w	r3, [r3, #97]	; 0x61
 800dac8:	b29b      	uxth	r3, r3
 800daca:	4619      	mov	r1, r3
 800dacc:	4610      	mov	r0, r2
 800dace:	f7ff fdab 	bl	800d628 <_ZN14TMC5130Stepper4DMAXEt>
    D1(D1_register.sr);
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8b3 3063 	ldrh.w	r3, [r3, #99]	; 0x63
 800dada:	b29b      	uxth	r3, r3
 800dadc:	4619      	mov	r1, r3
 800dade:	4610      	mov	r0, r2
 800dae0:	f7ff fdba 	bl	800d658 <_ZN14TMC5130Stepper2D1Et>
    VSTOP(VSTOP_register.sr);
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daea:	f3c3 2311 	ubfx	r3, r3, #8, #18
 800daee:	4619      	mov	r1, r3
 800daf0:	4610      	mov	r0, r2
 800daf2:	f7ff fdc9 	bl	800d688 <_ZN14TMC5130Stepper5VSTOPEm>
    TZEROWAIT(TZEROWAIT_register.sr);
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dafe:	4619      	mov	r1, r3
 800db00:	4610      	mov	r0, r2
 800db02:	f7ff fe00 	bl	800d706 <_ZN14TMC5130Stepper9TZEROWAITEt>
    SW_MODE(SW_MODE_register.sr);
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db12:	b29b      	uxth	r3, r3
 800db14:	4619      	mov	r1, r3
 800db16:	4610      	mov	r0, r2
 800db18:	f7fe fe43 	bl	800c7a2 <_ZN14TMC5130Stepper7SW_MODEEm>
    ENCMODE(ENCMODE_register.sr);
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800db24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db28:	b29b      	uxth	r3, r3
 800db2a:	4619      	mov	r1, r3
 800db2c:	4610      	mov	r0, r2
 800db2e:	f7fe fd5c 	bl	800c5ea <_ZN14TMC5130Stepper7ENCMODEEm>
    ENC_CONST(ENC_CONST_register.sr);
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 306e 	ldr.w	r3, [r3, #110]	; 0x6e
 800db3a:	4619      	mov	r1, r3
 800db3c:	4610      	mov	r0, r2
 800db3e:	f7ff fe09 	bl	800d754 <_ZN14TMC5130Stepper9ENC_CONSTEm>
	ENC_DEVIATION(ENC_DEVIATION_register.sr);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 800db48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800db4c:	f003 030f 	and.w	r3, r3, #15
 800db50:	041b      	lsls	r3, r3, #16
 800db52:	4313      	orrs	r3, r2
 800db54:	4619      	mov	r1, r3
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 f804 	bl	800db64 <_ZN14TMC5160Stepper13ENC_DEVIATIONEm>
}
 800db5c:	bf00      	nop
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <_ZN14TMC5160Stepper13ENC_DEVIATIONEm>:
	write(ENC_STATUS_t::address, input & 0x3);
}

// W: ENC_DEVIATION
uint32_t TMC5160Stepper::ENC_DEVIATION() { return ENC_DEVIATION_register.sr; }
void TMC5160Stepper::ENC_DEVIATION(uint32_t input) {
 800db64:	b590      	push	{r4, r7, lr}
 800db66:	b083      	sub	sp, #12
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
	ENC_DEVIATION_register.sr = input;
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	b291      	uxth	r1, r2
 800db78:	2000      	movs	r0, #0
 800db7a:	4301      	orrs	r1, r0
 800db7c:	f8a3 1072 	strh.w	r1, [r3, #114]	; 0x72
 800db80:	0c12      	lsrs	r2, r2, #16
 800db82:	f002 020f 	and.w	r2, r2, #15
 800db86:	f002 000f 	and.w	r0, r2, #15
 800db8a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800db8e:	f022 020f 	bic.w	r2, r2, #15
 800db92:	4611      	mov	r1, r2
 800db94:	4602      	mov	r2, r0
 800db96:	430a      	orrs	r2, r1
 800db98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	write(ENC_DEVIATION_register.address, ENC_DEVIATION_register.sr);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	681c      	ldr	r4, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 800dbaa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800dbae:	f003 030f 	and.w	r3, r3, #15
 800dbb2:	041b      	lsls	r3, r3, #16
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	213d      	movs	r1, #61	; 0x3d
 800dbba:	47a0      	blx	r4
}
 800dbbc:	bf00      	nop
 800dbbe:	370c      	adds	r7, #12
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd90      	pop	{r4, r7, pc}

0800dbc4 <_ZN10TMCStepper15test_connectionEv>:

uint16_t TMCStepper::rms_current() {
  return cs2rms(irun());
}

uint8_t TMCStepper::test_connection() {
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  uint32_t drv_status = DRV_STATUS();
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	3310      	adds	r3, #16
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	4798      	blx	r3
 800dbd8:	60f8      	str	r0, [r7, #12]
  switch (drv_status) {
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d005      	beq.n	800dbec <_ZN10TMCStepper15test_connectionEv+0x28>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe6:	d103      	bne.n	800dbf0 <_ZN10TMCStepper15test_connectionEv+0x2c>
      case 0xFFFFFFFF: return 1;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e002      	b.n	800dbf2 <_ZN10TMCStepper15test_connectionEv+0x2e>
      case 0: return 2;
 800dbec:	2302      	movs	r3, #2
 800dbee:	e000      	b.n	800dbf2 <_ZN10TMCStepper15test_connectionEv+0x2e>
      default: return 0;
 800dbf0:	2300      	movs	r3, #0
  }
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
	...

0800dbfc <_ZN10TMCStepper10microstepsEt>:
int8_t TMCStepper::hysteresis_end() { return hend()-3; };

void TMCStepper::hysteresis_start(uint8_t value) { hstrt(value-1); }
uint8_t TMCStepper::hysteresis_start() { return hstrt()+1; }

void TMCStepper::microsteps(uint16_t ms) {
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	460b      	mov	r3, r1
 800dc06:	807b      	strh	r3, [r7, #2]
  switch(ms) {
 800dc08:	887b      	ldrh	r3, [r7, #2]
 800dc0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc0e:	d058      	beq.n	800dcc2 <_ZN10TMCStepper10microstepsEt+0xc6>
 800dc10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc14:	f300 809d 	bgt.w	800dd52 <_ZN10TMCStepper10microstepsEt+0x156>
 800dc18:	2b80      	cmp	r3, #128	; 0x80
 800dc1a:	d05a      	beq.n	800dcd2 <_ZN10TMCStepper10microstepsEt+0xd6>
 800dc1c:	2b80      	cmp	r3, #128	; 0x80
 800dc1e:	f300 8098 	bgt.w	800dd52 <_ZN10TMCStepper10microstepsEt+0x156>
 800dc22:	2b20      	cmp	r3, #32
 800dc24:	dc4a      	bgt.n	800dcbc <_ZN10TMCStepper10microstepsEt+0xc0>
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f2c0 8093 	blt.w	800dd52 <_ZN10TMCStepper10microstepsEt+0x156>
 800dc2c:	2b20      	cmp	r3, #32
 800dc2e:	f200 8090 	bhi.w	800dd52 <_ZN10TMCStepper10microstepsEt+0x156>
 800dc32:	a201      	add	r2, pc, #4	; (adr r2, 800dc38 <_ZN10TMCStepper10microstepsEt+0x3c>)
 800dc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc38:	0800dd43 	.word	0x0800dd43
 800dc3c:	0800dd53 	.word	0x0800dd53
 800dc40:	0800dd33 	.word	0x0800dd33
 800dc44:	0800dd53 	.word	0x0800dd53
 800dc48:	0800dd23 	.word	0x0800dd23
 800dc4c:	0800dd53 	.word	0x0800dd53
 800dc50:	0800dd53 	.word	0x0800dd53
 800dc54:	0800dd53 	.word	0x0800dd53
 800dc58:	0800dd13 	.word	0x0800dd13
 800dc5c:	0800dd53 	.word	0x0800dd53
 800dc60:	0800dd53 	.word	0x0800dd53
 800dc64:	0800dd53 	.word	0x0800dd53
 800dc68:	0800dd53 	.word	0x0800dd53
 800dc6c:	0800dd53 	.word	0x0800dd53
 800dc70:	0800dd53 	.word	0x0800dd53
 800dc74:	0800dd53 	.word	0x0800dd53
 800dc78:	0800dd03 	.word	0x0800dd03
 800dc7c:	0800dd53 	.word	0x0800dd53
 800dc80:	0800dd53 	.word	0x0800dd53
 800dc84:	0800dd53 	.word	0x0800dd53
 800dc88:	0800dd53 	.word	0x0800dd53
 800dc8c:	0800dd53 	.word	0x0800dd53
 800dc90:	0800dd53 	.word	0x0800dd53
 800dc94:	0800dd53 	.word	0x0800dd53
 800dc98:	0800dd53 	.word	0x0800dd53
 800dc9c:	0800dd53 	.word	0x0800dd53
 800dca0:	0800dd53 	.word	0x0800dd53
 800dca4:	0800dd53 	.word	0x0800dd53
 800dca8:	0800dd53 	.word	0x0800dd53
 800dcac:	0800dd53 	.word	0x0800dd53
 800dcb0:	0800dd53 	.word	0x0800dd53
 800dcb4:	0800dd53 	.word	0x0800dd53
 800dcb8:	0800dcf3 	.word	0x0800dcf3
 800dcbc:	2b40      	cmp	r3, #64	; 0x40
 800dcbe:	d010      	beq.n	800dce2 <_ZN10TMCStepper10microstepsEt+0xe6>
    case  16: mres(4); break;
    case   8: mres(5); break;
    case   4: mres(6); break;
    case   2: mres(7); break;
    case   0: mres(8); break;
    default: break;
 800dcc0:	e047      	b.n	800dd52 <_ZN10TMCStepper10microstepsEt+0x156>
    case 256: mres(0); break;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	3324      	adds	r3, #36	; 0x24
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2100      	movs	r1, #0
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	4798      	blx	r3
 800dcd0:	e040      	b.n	800dd54 <_ZN10TMCStepper10microstepsEt+0x158>
    case 128: mres(1); break;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	3324      	adds	r3, #36	; 0x24
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2101      	movs	r1, #1
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	4798      	blx	r3
 800dce0:	e038      	b.n	800dd54 <_ZN10TMCStepper10microstepsEt+0x158>
    case  64: mres(2); break;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	3324      	adds	r3, #36	; 0x24
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2102      	movs	r1, #2
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	4798      	blx	r3
 800dcf0:	e030      	b.n	800dd54 <_ZN10TMCStepper10microstepsEt+0x158>
    case  32: mres(3); break;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	3324      	adds	r3, #36	; 0x24
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2103      	movs	r1, #3
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	4798      	blx	r3
 800dd00:	e028      	b.n	800dd54 <_ZN10TMCStepper10microstepsEt+0x158>
    case  16: mres(4); break;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	3324      	adds	r3, #36	; 0x24
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2104      	movs	r1, #4
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	4798      	blx	r3
 800dd10:	e020      	b.n	800dd54 <_ZN10TMCStepper10microstepsEt+0x158>
    case   8: mres(5); break;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	3324      	adds	r3, #36	; 0x24
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2105      	movs	r1, #5
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	4798      	blx	r3
 800dd20:	e018      	b.n	800dd54 <_ZN10TMCStepper10microstepsEt+0x158>
    case   4: mres(6); break;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	3324      	adds	r3, #36	; 0x24
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	2106      	movs	r1, #6
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	4798      	blx	r3
 800dd30:	e010      	b.n	800dd54 <_ZN10TMCStepper10microstepsEt+0x158>
    case   2: mres(7); break;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	3324      	adds	r3, #36	; 0x24
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2107      	movs	r1, #7
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	4798      	blx	r3
 800dd40:	e008      	b.n	800dd54 <_ZN10TMCStepper10microstepsEt+0x158>
    case   0: mres(8); break;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	3324      	adds	r3, #36	; 0x24
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2108      	movs	r1, #8
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	4798      	blx	r3
 800dd50:	e000      	b.n	800dd54 <_ZN10TMCStepper10microstepsEt+0x158>
    default: break;
 800dd52:	bf00      	nop
  }
}
 800dd54:	bf00      	nop
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <_ZN10TMCStepper10microstepsEv>:

uint16_t TMCStepper::microsteps() {
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  switch(mres()) {
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3328      	adds	r3, #40	; 0x28
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	4798      	blx	r3
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b08      	cmp	r3, #8
 800dd74:	d827      	bhi.n	800ddc6 <_ZN10TMCStepper10microstepsEv+0x6a>
 800dd76:	a201      	add	r2, pc, #4	; (adr r2, 800dd7c <_ZN10TMCStepper10microstepsEv+0x20>)
 800dd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7c:	0800dda1 	.word	0x0800dda1
 800dd80:	0800dda7 	.word	0x0800dda7
 800dd84:	0800ddab 	.word	0x0800ddab
 800dd88:	0800ddaf 	.word	0x0800ddaf
 800dd8c:	0800ddb3 	.word	0x0800ddb3
 800dd90:	0800ddb7 	.word	0x0800ddb7
 800dd94:	0800ddbb 	.word	0x0800ddbb
 800dd98:	0800ddbf 	.word	0x0800ddbf
 800dd9c:	0800ddc3 	.word	0x0800ddc3
    case 0: return 256;
 800dda0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dda4:	e010      	b.n	800ddc8 <_ZN10TMCStepper10microstepsEv+0x6c>
    case 1: return 128;
 800dda6:	2380      	movs	r3, #128	; 0x80
 800dda8:	e00e      	b.n	800ddc8 <_ZN10TMCStepper10microstepsEv+0x6c>
    case 2: return  64;
 800ddaa:	2340      	movs	r3, #64	; 0x40
 800ddac:	e00c      	b.n	800ddc8 <_ZN10TMCStepper10microstepsEv+0x6c>
    case 3: return  32;
 800ddae:	2320      	movs	r3, #32
 800ddb0:	e00a      	b.n	800ddc8 <_ZN10TMCStepper10microstepsEv+0x6c>
    case 4: return  16;
 800ddb2:	2310      	movs	r3, #16
 800ddb4:	e008      	b.n	800ddc8 <_ZN10TMCStepper10microstepsEv+0x6c>
    case 5: return   8;
 800ddb6:	2308      	movs	r3, #8
 800ddb8:	e006      	b.n	800ddc8 <_ZN10TMCStepper10microstepsEv+0x6c>
    case 6: return   4;
 800ddba:	2304      	movs	r3, #4
 800ddbc:	e004      	b.n	800ddc8 <_ZN10TMCStepper10microstepsEv+0x6c>
    case 7: return   2;
 800ddbe:	2302      	movs	r3, #2
 800ddc0:	e002      	b.n	800ddc8 <_ZN10TMCStepper10microstepsEv+0x6c>
    case 8: return   0;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	e000      	b.n	800ddc8 <_ZN10TMCStepper10microstepsEv+0x6c>
  }
  return 0;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <_ZN10TMCStepper10blank_timeEh>:

void TMCStepper::blank_time(uint8_t value) {
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	460b      	mov	r3, r1
 800ddda:	70fb      	strb	r3, [r7, #3]
  switch (value) {
 800dddc:	78fb      	ldrb	r3, [r7, #3]
 800ddde:	2b36      	cmp	r3, #54	; 0x36
 800dde0:	d022      	beq.n	800de28 <_ZN10TMCStepper10blank_timeEh+0x58>
 800dde2:	2b36      	cmp	r3, #54	; 0x36
 800dde4:	dc28      	bgt.n	800de38 <_ZN10TMCStepper10blank_timeEh+0x68>
 800dde6:	2b24      	cmp	r3, #36	; 0x24
 800dde8:	d016      	beq.n	800de18 <_ZN10TMCStepper10blank_timeEh+0x48>
 800ddea:	2b24      	cmp	r3, #36	; 0x24
 800ddec:	dc24      	bgt.n	800de38 <_ZN10TMCStepper10blank_timeEh+0x68>
 800ddee:	2b10      	cmp	r3, #16
 800ddf0:	d002      	beq.n	800ddf8 <_ZN10TMCStepper10blank_timeEh+0x28>
 800ddf2:	2b18      	cmp	r3, #24
 800ddf4:	d008      	beq.n	800de08 <_ZN10TMCStepper10blank_timeEh+0x38>
    case 16: tbl(0b00); break;
    case 24: tbl(0b01); break;
    case 36: tbl(0b10); break;
    case 54: tbl(0b11); break;
  }
}
 800ddf6:	e01f      	b.n	800de38 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 16: tbl(0b00); break;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	332c      	adds	r3, #44	; 0x2c
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2100      	movs	r1, #0
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	4798      	blx	r3
 800de06:	e017      	b.n	800de38 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 24: tbl(0b01); break;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	332c      	adds	r3, #44	; 0x2c
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2101      	movs	r1, #1
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	4798      	blx	r3
 800de16:	e00f      	b.n	800de38 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 36: tbl(0b10); break;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	332c      	adds	r3, #44	; 0x2c
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2102      	movs	r1, #2
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	4798      	blx	r3
 800de26:	e007      	b.n	800de38 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 54: tbl(0b11); break;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	332c      	adds	r3, #44	; 0x2c
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2103      	movs	r1, #3
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	4798      	blx	r3
 800de36:	bf00      	nop
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <_ZN10TMCStepper5GSTATEv>:
  return 0;
}

///////////////////////////////////////////////////////////////////////////////////////
// R+C: GSTAT
uint8_t TMCStepper::GSTAT()  { return read(GSTAT_t::address); }
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	3304      	adds	r3, #4
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2101      	movs	r1, #1
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	4798      	blx	r3
 800de56:	4603      	mov	r3, r0
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	4618      	mov	r0, r3
 800de5c:	3708      	adds	r7, #8
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <_ZN10TMCStepper5GSTATEh>:
void  TMCStepper::GSTAT(uint8_t){ write(GSTAT_t::address, 0b111); }
 800de62:	b580      	push	{r7, lr}
 800de64:	b082      	sub	sp, #8
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
 800de6a:	460b      	mov	r3, r1
 800de6c:	70fb      	strb	r3, [r7, #3]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2207      	movs	r2, #7
 800de76:	2101      	movs	r1, #1
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	4798      	blx	r3
 800de7c:	bf00      	nop
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <_ZN10TMCStepper10TPOWERDOWNEh>:
bool  TMCStepper::drv_err()  { GSTAT_t r; r.sr = GSTAT(); return r.drv_err; }
bool  TMCStepper::uv_cp()    { GSTAT_t r; r.sr = GSTAT(); return r.uv_cp; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPOWERDOWN
uint8_t TMCStepper::TPOWERDOWN() { return TPOWERDOWN_register.sr; }
void TMCStepper::TPOWERDOWN(uint8_t input) {
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	460b      	mov	r3, r1
 800de8e:	70fb      	strb	r3, [r7, #3]
  TPOWERDOWN_register.sr = input;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	78fa      	ldrb	r2, [r7, #3]
 800de94:	71da      	strb	r2, [r3, #7]
  write(TPOWERDOWN_register.address, TPOWERDOWN_register.sr);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	79d2      	ldrb	r2, [r2, #7]
 800dea0:	2111      	movs	r1, #17
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	4798      	blx	r3
}
 800dea6:	bf00      	nop
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <_ZN10TMCStepper8TPWMTHRSEm>:
// R: TSTEP
uint32_t TMCStepper::TSTEP() { return read(TSTEP_t::address); }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPWMTHRS
uint32_t TMCStepper::TPWMTHRS() { return TPWMTHRS_register.sr; }
void TMCStepper::TPWMTHRS(uint32_t input) {
 800deae:	b580      	push	{r7, lr}
 800deb0:	b082      	sub	sp, #8
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
 800deb6:	6039      	str	r1, [r7, #0]
  TPWMTHRS_register.sr = input;
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	b291      	uxth	r1, r2
 800dec2:	2000      	movs	r0, #0
 800dec4:	4301      	orrs	r1, r0
 800dec6:	8119      	strh	r1, [r3, #8]
 800dec8:	0c12      	lsrs	r2, r2, #16
 800deca:	f002 020f 	and.w	r2, r2, #15
 800dece:	f002 000f 	and.w	r0, r2, #15
 800ded2:	7a9a      	ldrb	r2, [r3, #10]
 800ded4:	f022 020f 	bic.w	r2, r2, #15
 800ded8:	4611      	mov	r1, r2
 800deda:	4602      	mov	r2, r0
 800dedc:	430a      	orrs	r2, r1
 800dede:	729a      	strb	r2, [r3, #10]
  write(TPWMTHRS_register.address, TPWMTHRS_register.sr);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	6892      	ldr	r2, [r2, #8]
 800deea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800deee:	2113      	movs	r1, #19
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	4798      	blx	r3
}
 800def4:	bf00      	nop
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <CO_fifo_getOccupied>:
 *
 * @param fifo This object
 *
 * @return number of occupied bytes
 */
static inline size_t CO_fifo_getOccupied(CO_fifo_t *fifo) {
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - fifo->readPtr;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	689a      	ldr	r2, [r3, #8]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	1ad3      	subs	r3, r2, r3
 800df0e:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2b00      	cmp	r3, #0
 800df14:	da04      	bge.n	800df20 <CO_fifo_getOccupied+0x24>
        sizeOccupied += fifo->bufSize;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	685a      	ldr	r2, [r3, #4]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	4413      	add	r3, r2
 800df1e:	60fb      	str	r3, [r7, #12]
    }

    return (size_t) sizeOccupied;
 800df20:	68fb      	ldr	r3, [r7, #12]
}
 800df22:	4618      	mov	r0, r3
 800df24:	3714      	adds	r7, #20
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
	...

0800df30 <FUART_Init>:
CO_fifo_t g_txFifo;
SemaphoreHandle_t g_txMutex = NULL;
SemaphoreHandle_t g_rxMutex = NULL;

void FUART_Init()
{
 800df30:	b580      	push	{r7, lr}
 800df32:	af00      	add	r7, sp, #0
	CO_fifo_init(&g_rxFifo, g_RxFifoBuf, RXFIFO_BUFSIZE);
 800df34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df38:	490b      	ldr	r1, [pc, #44]	; (800df68 <FUART_Init+0x38>)
 800df3a:	480c      	ldr	r0, [pc, #48]	; (800df6c <FUART_Init+0x3c>)
 800df3c:	f000 f9a2 	bl	800e284 <CO_fifo_init>
	CO_fifo_init(&g_txFifo, g_TxFifoBuf, TXFIFO_BUFSIZE);
 800df40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df44:	490a      	ldr	r1, [pc, #40]	; (800df70 <FUART_Init+0x40>)
 800df46:	480b      	ldr	r0, [pc, #44]	; (800df74 <FUART_Init+0x44>)
 800df48:	f000 f99c 	bl	800e284 <CO_fifo_init>

	g_txMutex = xSemaphoreCreateMutex();
 800df4c:	2001      	movs	r0, #1
 800df4e:	f005 fdb4 	bl	8013aba <xQueueCreateMutex>
 800df52:	4603      	mov	r3, r0
 800df54:	4a08      	ldr	r2, [pc, #32]	; (800df78 <FUART_Init+0x48>)
 800df56:	6013      	str	r3, [r2, #0]
	g_rxMutex = xSemaphoreCreateMutex();
 800df58:	2001      	movs	r0, #1
 800df5a:	f005 fdae 	bl	8013aba <xQueueCreateMutex>
 800df5e:	4603      	mov	r3, r0
 800df60:	4a06      	ldr	r2, [pc, #24]	; (800df7c <FUART_Init+0x4c>)
 800df62:	6013      	str	r3, [r2, #0]
}
 800df64:	bf00      	nop
 800df66:	bd80      	pop	{r7, pc}
 800df68:	20000cd8 	.word	0x20000cd8
 800df6c:	200024d8 	.word	0x200024d8
 800df70:	200014d8 	.word	0x200014d8
 800df74:	200024ec 	.word	0x200024ec
 800df78:	20002500 	.word	0x20002500
 800df7c:	20002504 	.word	0x20002504

0800df80 <FUART_beginReceive>:

void FUART_beginReceive(UART_HandleTypeDef* uart)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart, (uint8_t*)g_UARTRxDMABuf, UART_RXDMA_BUFSIZE);
 800df88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800df8c:	4903      	ldr	r1, [pc, #12]	; (800df9c <FUART_beginReceive+0x1c>)
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f004 f9ac 	bl	80122ec <HAL_UART_Receive_DMA>
}
 800df94:	bf00      	nop
 800df96:	3708      	adds	r7, #8
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	200020d8 	.word	0x200020d8

0800dfa0 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t>:

void FUART_pushMsgToFifo(Joint_Msg_t *msg, uint8_t *data, size_t datalen, CO_fifo_t* fifo)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
 800dfac:	603b      	str	r3, [r7, #0]
	// Enter critical section
	if (xSemaphoreTake(g_txMutex,  (TickType_t) 0)) {
 800dfae:	4b14      	ldr	r3, [pc, #80]	; (800e000 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x60>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2100      	movs	r1, #0
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f006 f89d 	bl	80140f4 <xQueueSemaphoreTake>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	bf14      	ite	ne
 800dfc0:	2301      	movne	r3, #1
 800dfc2:	2300      	moveq	r3, #0
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d016      	beq.n	800dff8 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x58>
		CO_fifo_write(fifo, (const char *)msg, JOINT_MSG_LEN, NULL);
 800dfca:	2300      	movs	r3, #0
 800dfcc:	2204      	movs	r2, #4
 800dfce:	68f9      	ldr	r1, [r7, #12]
 800dfd0:	6838      	ldr	r0, [r7, #0]
 800dfd2:	f000 f979 	bl	800e2c8 <CO_fifo_write>
		if (msg->len > 0){
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	789b      	ldrb	r3, [r3, #2]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d005      	beq.n	800dfea <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x4a>
			CO_fifo_write(fifo, (const char *)data, datalen, NULL);
 800dfde:	2300      	movs	r3, #0
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	68b9      	ldr	r1, [r7, #8]
 800dfe4:	6838      	ldr	r0, [r7, #0]
 800dfe6:	f000 f96f 	bl	800e2c8 <CO_fifo_write>
		}
		xSemaphoreGive(g_txMutex);
 800dfea:	4b05      	ldr	r3, [pc, #20]	; (800e000 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x60>)
 800dfec:	6818      	ldr	r0, [r3, #0]
 800dfee:	2300      	movs	r3, #0
 800dff0:	2200      	movs	r2, #0
 800dff2:	2100      	movs	r1, #0
 800dff4:	f005 fd7a 	bl	8013aec <xQueueGenericSend>
	}
	// Exit critical
}
 800dff8:	bf00      	nop
 800dffa:	3710      	adds	r7, #16
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	20002500 	.word	0x20002500

0800e004 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh>:

static size_t internalPeekMsgFromFifo(CO_fifo_t* fifo, uint8_t *buf)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
	size_t len = CO_fifo_getOccupied(fifo);
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7ff ff74 	bl	800defc <CO_fifo_getOccupied>
 800e014:	60f8      	str	r0, [r7, #12]
	if (len < JOINT_MSG_LEN){
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2b03      	cmp	r3, #3
 800e01a:	d801      	bhi.n	800e020 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x1c>
		return 0;
 800e01c:	2300      	movs	r3, #0
 800e01e:	e035      	b.n	800e08c <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x88>
	}

	// read message hdr
	CO_fifo_altBegin(fifo, 0);
 800e020:	2100      	movs	r1, #0
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 f9a4 	bl	800e370 <CO_fifo_altBegin>
	CO_fifo_altRead(fifo, (char*)buf, JOINT_MSG_LEN);
 800e028:	2204      	movs	r2, #4
 800e02a:	6839      	ldr	r1, [r7, #0]
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 fa0e 	bl	800e44e <CO_fifo_altRead>
	Joint_Msg_t* msg = (Joint_Msg_t*)buf;
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	60bb      	str	r3, [r7, #8]
	if (msg->len > 0){
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	789b      	ldrb	r3, [r3, #2]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d01f      	beq.n	800e07e <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x7a>
		if (len < (uint16_t)(msg->len + JOINT_MSG_LEN)){
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	789b      	ldrb	r3, [r3, #2]
 800e042:	b29b      	uxth	r3, r3
 800e044:	3304      	adds	r3, #4
 800e046:	b29b      	uxth	r3, r3
 800e048:	461a      	mov	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d201      	bcs.n	800e054 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x50>
			// message not ready yet
			return 0;
 800e050:	2300      	movs	r3, #0
 800e052:	e01b      	b.n	800e08c <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x88>
		}

		// read message params from fifo
		CO_fifo_altBegin(fifo, JOINT_MSG_LEN);
 800e054:	2104      	movs	r1, #4
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f98a 	bl	800e370 <CO_fifo_altBegin>
		CO_fifo_altRead(fifo, (char*)(buf + JOINT_MSG_LEN), msg->len);
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	1d19      	adds	r1, r3, #4
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	789b      	ldrb	r3, [r3, #2]
 800e064:	461a      	mov	r2, r3
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 f9f1 	bl	800e44e <CO_fifo_altRead>
		CO_fifo_altFinish(fifo, NULL);
 800e06c:	2100      	movs	r1, #0
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 f9b4 	bl	800e3dc <CO_fifo_altFinish>
		len = msg->len + JOINT_MSG_LEN;
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	789b      	ldrb	r3, [r3, #2]
 800e078:	3304      	adds	r3, #4
 800e07a:	60fb      	str	r3, [r7, #12]
 800e07c:	e005      	b.n	800e08a <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x86>
	}else {
		CO_fifo_altFinish(fifo, NULL);
 800e07e:	2100      	movs	r1, #0
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f000 f9ab 	bl	800e3dc <CO_fifo_altFinish>
		len = JOINT_MSG_LEN;
 800e086:	2304      	movs	r3, #4
 800e088:	60fb      	str	r3, [r7, #12]
	}

	return len;
 800e08a:	68fb      	ldr	r3, [r7, #12]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <FUART_sendMsg>:

void FUART_sendMsg(Joint_Msg_t *msg, uint8_t *data, size_t len)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	607a      	str	r2, [r7, #4]
	// Check UART transmit busy
	if (huart1.gState != HAL_UART_STATE_READY || (huart1.Instance->CR3 & USART_CR3_DMAT)){
 800e0a0:	4b23      	ldr	r3, [pc, #140]	; (800e130 <FUART_sendMsg+0x9c>)
 800e0a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	2b20      	cmp	r3, #32
 800e0aa:	d106      	bne.n	800e0ba <FUART_sendMsg+0x26>
 800e0ac:	4b20      	ldr	r3, [pc, #128]	; (800e130 <FUART_sendMsg+0x9c>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	695b      	ldr	r3, [r3, #20]
 800e0b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d001      	beq.n	800e0be <FUART_sendMsg+0x2a>
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e000      	b.n	800e0c0 <FUART_sendMsg+0x2c>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d006      	beq.n	800e0d2 <FUART_sendMsg+0x3e>
		FUART_pushMsgToFifo(msg, data, len, &g_txFifo);
 800e0c4:	4b1b      	ldr	r3, [pc, #108]	; (800e134 <FUART_sendMsg+0xa0>)
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	68b9      	ldr	r1, [r7, #8]
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f7ff ff68 	bl	800dfa0 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t>
		return;
 800e0d0:	e02b      	b.n	800e12a <FUART_sendMsg+0x96>
	}

	// UART Transmit
	if (xSemaphoreTake(g_txMutex, (TickType_t)0)){
 800e0d2:	4b19      	ldr	r3, [pc, #100]	; (800e138 <FUART_sendMsg+0xa4>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f006 f80b 	bl	80140f4 <xQueueSemaphoreTake>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	bf14      	ite	ne
 800e0e4:	2301      	movne	r3, #1
 800e0e6:	2300      	moveq	r3, #0
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d01d      	beq.n	800e12a <FUART_sendMsg+0x96>
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	461a      	mov	r2, r3
		memcpy(g_UARTTxDMABuf, msg, JOINT_MSG_LEN);
 800e0f4:	4b11      	ldr	r3, [pc, #68]	; (800e13c <FUART_sendMsg+0xa8>)
 800e0f6:	601a      	str	r2, [r3, #0]
		if (msg->len > 0){
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	789b      	ldrb	r3, [r3, #2]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d004      	beq.n	800e10a <FUART_sendMsg+0x76>
			memcpy(&g_UARTTxDMABuf[JOINT_MSG_LEN], data, len);
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	68b9      	ldr	r1, [r7, #8]
 800e104:	480e      	ldr	r0, [pc, #56]	; (800e140 <FUART_sendMsg+0xac>)
 800e106:	f008 fedb 	bl	8016ec0 <memcpy>
		}
		HAL_UART_Transmit_DMA(&huart1, g_UARTTxDMABuf, len + JOINT_MSG_LEN);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	3304      	adds	r3, #4
 800e110:	b29b      	uxth	r3, r3
 800e112:	461a      	mov	r2, r3
 800e114:	4909      	ldr	r1, [pc, #36]	; (800e13c <FUART_sendMsg+0xa8>)
 800e116:	4806      	ldr	r0, [pc, #24]	; (800e130 <FUART_sendMsg+0x9c>)
 800e118:	f004 f87c 	bl	8012214 <HAL_UART_Transmit_DMA>
		xSemaphoreGive(g_txMutex);
 800e11c:	4b06      	ldr	r3, [pc, #24]	; (800e138 <FUART_sendMsg+0xa4>)
 800e11e:	6818      	ldr	r0, [r3, #0]
 800e120:	2300      	movs	r3, #0
 800e122:	2200      	movs	r2, #0
 800e124:	2100      	movs	r1, #0
 800e126:	f005 fce1 	bl	8013aec <xQueueGenericSend>
	}
}
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	2000093c 	.word	0x2000093c
 800e134:	200024ec 	.word	0x200024ec
 800e138:	20002500 	.word	0x20002500
 800e13c:	20001cd8 	.word	0x20001cd8
 800e140:	20001cdc 	.word	0x20001cdc

0800e144 <HAL_UART_TxCpltCallback>:
//
// UART callback functions
//

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a1e      	ldr	r2, [pc, #120]	; (800e1cc <HAL_UART_TxCpltCallback+0x88>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d136      	bne.n	800e1c4 <HAL_UART_TxCpltCallback+0x80>

		// Move to next message
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e156:	2300      	movs	r3, #0
 800e158:	60bb      	str	r3, [r7, #8]
		if (xSemaphoreTakeFromISR(g_txMutex, &xHigherPriorityTaskWoken)){
 800e15a:	4b1d      	ldr	r3, [pc, #116]	; (800e1d0 <HAL_UART_TxCpltCallback+0x8c>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f107 0208 	add.w	r2, r7, #8
 800e162:	2100      	movs	r1, #0
 800e164:	4618      	mov	r0, r3
 800e166:	f006 f8d1 	bl	801430c <xQueueReceiveFromISR>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	bf14      	ite	ne
 800e170:	2301      	movne	r3, #1
 800e172:	2300      	moveq	r3, #0
 800e174:	b2db      	uxtb	r3, r3
 800e176:	2b00      	cmp	r3, #0
 800e178:	d016      	beq.n	800e1a8 <HAL_UART_TxCpltCallback+0x64>
			size_t len = internalPeekMsgFromFifo(&g_txFifo, g_UARTTxDMABuf);
 800e17a:	4916      	ldr	r1, [pc, #88]	; (800e1d4 <HAL_UART_TxCpltCallback+0x90>)
 800e17c:	4816      	ldr	r0, [pc, #88]	; (800e1d8 <HAL_UART_TxCpltCallback+0x94>)
 800e17e:	f7ff ff41 	bl	800e004 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh>
 800e182:	60f8      	str	r0, [r7, #12]
			if (len > 0) {
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d006      	beq.n	800e198 <HAL_UART_TxCpltCallback+0x54>
				HAL_UART_Transmit_DMA(&huart1, g_UARTTxDMABuf, len);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	461a      	mov	r2, r3
 800e190:	4910      	ldr	r1, [pc, #64]	; (800e1d4 <HAL_UART_TxCpltCallback+0x90>)
 800e192:	4812      	ldr	r0, [pc, #72]	; (800e1dc <HAL_UART_TxCpltCallback+0x98>)
 800e194:	f004 f83e 	bl	8012214 <HAL_UART_Transmit_DMA>
			}
			xSemaphoreGiveFromISR(g_txMutex, &xHigherPriorityTaskWoken);
 800e198:	4b0d      	ldr	r3, [pc, #52]	; (800e1d0 <HAL_UART_TxCpltCallback+0x8c>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f107 0208 	add.w	r2, r7, #8
 800e1a0:	4611      	mov	r1, r2
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f005 fe38 	bl	8013e18 <xQueueGiveFromISR>
		}

		if (xHigherPriorityTaskWoken == pdTRUE){
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d10a      	bne.n	800e1c4 <HAL_UART_TxCpltCallback+0x80>
			portYIELD_FROM_ISR (xHigherPriorityTaskWoken);
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d007      	beq.n	800e1c4 <HAL_UART_TxCpltCallback+0x80>
 800e1b4:	4b0a      	ldr	r3, [pc, #40]	; (800e1e0 <HAL_UART_TxCpltCallback+0x9c>)
 800e1b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ba:	601a      	str	r2, [r3, #0]
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	f3bf 8f6f 	isb	sy
		}

	}
}
 800e1c4:	bf00      	nop
 800e1c6:	3710      	adds	r7, #16
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	40011000 	.word	0x40011000
 800e1d0:	20002500 	.word	0x20002500
 800e1d4:	20001cd8 	.word	0x20001cd8
 800e1d8:	200024ec 	.word	0x200024ec
 800e1dc:	2000093c 	.word	0x2000093c
 800e1e0:	e000ed04 	.word	0xe000ed04

0800e1e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
		// Do nothing
	}
}
 800e1ec:	bf00      	nop
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b086      	sub	sp, #24
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a1d      	ldr	r2, [pc, #116]	; (800e27c <HAL_UART_ErrorCallback+0x84>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d134      	bne.n	800e274 <HAL_UART_ErrorCallback+0x7c>
		uint32_t tmp1 = 0U, tmp2 = 0U;
 800e20a:	2300      	movs	r3, #0
 800e20c:	617b      	str	r3, [r7, #20]
 800e20e:	2300      	movs	r3, #0
 800e210:	613b      	str	r3, [r7, #16]
		tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f003 0308 	and.w	r3, r3, #8
 800e21c:	2b08      	cmp	r3, #8
 800e21e:	bf0c      	ite	eq
 800e220:	2301      	moveq	r3, #1
 800e222:	2300      	movne	r3, #0
 800e224:	b2db      	uxtb	r3, r3
 800e226:	617b      	str	r3, [r7, #20]
		tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	f003 0301 	and.w	r3, r3, #1
 800e232:	613b      	str	r3, [r7, #16]

		if (tmp1 != RESET && tmp2 != RESET) {
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d01c      	beq.n	800e274 <HAL_UART_ErrorCallback+0x7c>
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d019      	beq.n	800e274 <HAL_UART_ErrorCallback+0x7c>
			printf("Usart1 happens over run error.\n");
 800e240:	480f      	ldr	r0, [pc, #60]	; (800e280 <HAL_UART_ErrorCallback+0x88>)
 800e242:	f008 ffcf 	bl	80171e4 <puts>

		    volatile uint8_t sysRxChar; // clear the regular interrupt
	        sysRxChar = (uint8_t) huart->Instance->DR; // not sure whether it is correct, but it does not work
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	73fb      	strb	r3, [r7, #15]
	        (void) sysRxChar;
 800e250:	7bfb      	ldrb	r3, [r7, #15]

	        __HAL_UART_CLEAR_OREFLAG(huart);
 800e252:	2300      	movs	r3, #0
 800e254:	60bb      	str	r3, [r7, #8]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	60bb      	str	r3, [r7, #8]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	60bb      	str	r3, [r7, #8]
 800e266:	68bb      	ldr	r3, [r7, #8]
	        huart->ErrorCode &= ~HAL_UART_ERROR_ORE;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e26c:	f023 0208 	bic.w	r2, r3, #8
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
}
 800e274:	bf00      	nop
 800e276:	3718      	adds	r7, #24
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	40011000 	.word	0x40011000
 800e280:	08018488 	.word	0x08018488

0800e284 <CO_fifo_init>:
#define DELIM_COMMENT '#'
#endif /* CO_CONFIG_FIFO_ASCII_COMMANDS == 1 */


/******************************************************************************/
void CO_fifo_init(CO_fifo_t *fifo, char *buf, size_t bufSize) {
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]

    if (fifo == NULL || buf == NULL || bufSize < 2) {
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d012      	beq.n	800e2bc <CO_fifo_init+0x38>
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d00f      	beq.n	800e2bc <CO_fifo_init+0x38>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d90c      	bls.n	800e2bc <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	68ba      	ldr	r2, [r7, #8]
 800e2b2:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	605a      	str	r2, [r3, #4]

    return;
 800e2ba:	e000      	b.n	800e2be <CO_fifo_init+0x3a>
        return;
 800e2bc:	bf00      	nop
}
 800e2be:	3714      	adds	r7, #20
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <CO_fifo_write>:
 ******************************************************************************/
size_t CO_fifo_write(CO_fifo_t *fifo,
                     const char *buf,
                     size_t count,
                     uint16_t *crc)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b089      	sub	sp, #36	; 0x24
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
 800e2d4:	603b      	str	r3, [r7, #0]
    size_t i;
    char *bufDest;

    if (fifo == NULL || buf == NULL) {
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d002      	beq.n	800e2e2 <CO_fifo_write+0x1a>
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d101      	bne.n	800e2e6 <CO_fifo_write+0x1e>
        return 0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	e03e      	b.n	800e364 <CO_fifo_write+0x9c>
    }

    bufDest = &fifo->buf[fifo->writePtr];
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	61fb      	str	r3, [r7, #28]
 800e2f6:	e02f      	b.n	800e358 <CO_fifo_write+0x90>
        size_t writePtrNext = fifo->writePtr + 1;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	617b      	str	r3, [r7, #20]

        /* is circular buffer full */
        if (writePtrNext == fifo->readPtr ||
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	697a      	ldr	r2, [r7, #20]
 800e306:	429a      	cmp	r2, r3
 800e308:	d029      	beq.n	800e35e <CO_fifo_write+0x96>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	685b      	ldr	r3, [r3, #4]
        if (writePtrNext == fifo->readPtr ||
 800e30e:	697a      	ldr	r2, [r7, #20]
 800e310:	429a      	cmp	r2, r3
 800e312:	d103      	bne.n	800e31c <CO_fifo_write+0x54>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d020      	beq.n	800e35e <CO_fifo_write+0x96>
            break;
        }

        *bufDest = *buf;
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	781a      	ldrb	r2, [r3, #0]
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	701a      	strb	r2, [r3, #0]
            CO_fifo_crc16_ccitt(crc, *buf);
        }
#endif

        /* increment variables */
        if (writePtrNext == fifo->bufSize) {
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	697a      	ldr	r2, [r7, #20]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d106      	bne.n	800e33c <CO_fifo_write+0x74>
            fifo->writePtr = 0;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	609a      	str	r2, [r3, #8]
            bufDest = &fifo->buf[0];
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	61bb      	str	r3, [r7, #24]
 800e33a:	e007      	b.n	800e34c <CO_fifo_write+0x84>
        }
        else {
            fifo->writePtr++;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	1c5a      	adds	r2, r3, #1
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	609a      	str	r2, [r3, #8]
            bufDest++;
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	3301      	adds	r3, #1
 800e34a:	61bb      	str	r3, [r7, #24]
        }
        buf++;
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	3301      	adds	r3, #1
 800e350:	60bb      	str	r3, [r7, #8]
    for (i = count; i > 0; i--) {
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	3b01      	subs	r3, #1
 800e356:	61fb      	str	r3, [r7, #28]
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1cc      	bne.n	800e2f8 <CO_fifo_write+0x30>
    }

    return count - i;
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	1ad3      	subs	r3, r2, r3
}
 800e364:	4618      	mov	r0, r3
 800e366:	3724      	adds	r7, #36	; 0x24
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <CO_fifo_altBegin>:
}


#if CO_CONFIG_FIFO_ALT_READ == 1
/******************************************************************************/
size_t CO_fifo_altBegin(CO_fifo_t *fifo, size_t offset) {
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
    size_t i;

    if (fifo == NULL) {
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d101      	bne.n	800e384 <CO_fifo_altBegin+0x14>
        return 0;
 800e380:	2300      	movs	r3, #0
 800e382:	e025      	b.n	800e3d0 <CO_fifo_altBegin+0x60>
    }

    fifo->altReadPtr = fifo->readPtr;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	68da      	ldr	r2, [r3, #12]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	611a      	str	r2, [r3, #16]
    for (i = offset; i > 0; i--) {
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	60fb      	str	r3, [r7, #12]
 800e390:	e016      	b.n	800e3c0 <CO_fifo_altBegin+0x50>
        /* is circular buffer empty */
        if (fifo->altReadPtr == fifo->writePtr) {
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	691a      	ldr	r2, [r3, #16]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d014      	beq.n	800e3c8 <CO_fifo_altBegin+0x58>
            break;
        }

        /* increment variable */
        if (++fifo->altReadPtr == fifo->bufSize) {
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	1c5a      	adds	r2, r3, #1
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	611a      	str	r2, [r3, #16]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	691a      	ldr	r2, [r3, #16]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d102      	bne.n	800e3ba <CO_fifo_altBegin+0x4a>
            fifo->altReadPtr = 0;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	611a      	str	r2, [r3, #16]
    for (i = offset; i > 0; i--) {
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	60fb      	str	r3, [r7, #12]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1e5      	bne.n	800e392 <CO_fifo_altBegin+0x22>
 800e3c6:	e000      	b.n	800e3ca <CO_fifo_altBegin+0x5a>
            break;
 800e3c8:	bf00      	nop
        }
    }

    return offset - i;
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	1ad3      	subs	r3, r2, r3
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3714      	adds	r7, #20
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <CO_fifo_altFinish>:

void CO_fifo_altFinish(CO_fifo_t *fifo, uint16_t *crc) {
 800e3dc:	b480      	push	{r7}
 800e3de:	b085      	sub	sp, #20
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]

    if (fifo == NULL) {
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d02a      	beq.n	800e442 <CO_fifo_altFinish+0x66>
        return;
    }

    if (crc == NULL) {
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d104      	bne.n	800e3fc <CO_fifo_altFinish+0x20>
        fifo->readPtr = fifo->altReadPtr;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	691a      	ldr	r2, [r3, #16]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	60da      	str	r2, [r3, #12]
 800e3fa:	e023      	b.n	800e444 <CO_fifo_altFinish+0x68>
    }
    else {
        const char *bufSrc = &fifo->buf[fifo->readPtr];
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	4413      	add	r3, r2
 800e406:	60fb      	str	r3, [r7, #12]
        while (fifo->readPtr != fifo->altReadPtr) {
 800e408:	e014      	b.n	800e434 <CO_fifo_altFinish+0x58>
#if CO_CONFIG_FIFO_CRC16_CCITT > 0
            CO_fifo_crc16_ccitt(crc, *bufSrc);
#endif
            /* increment variable */
            if (++fifo->readPtr == fifo->bufSize) {
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	1c5a      	adds	r2, r3, #1
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	60da      	str	r2, [r3, #12]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	68da      	ldr	r2, [r3, #12]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d106      	bne.n	800e42e <CO_fifo_altFinish+0x52>
                fifo->readPtr = 0;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	60da      	str	r2, [r3, #12]
                bufSrc = &fifo->buf[0];
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	60fb      	str	r3, [r7, #12]
 800e42c:	e002      	b.n	800e434 <CO_fifo_altFinish+0x58>
            }
            else {
                bufSrc++;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	3301      	adds	r3, #1
 800e432:	60fb      	str	r3, [r7, #12]
        while (fifo->readPtr != fifo->altReadPtr) {
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	68da      	ldr	r2, [r3, #12]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	691b      	ldr	r3, [r3, #16]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d1e4      	bne.n	800e40a <CO_fifo_altFinish+0x2e>
 800e440:	e000      	b.n	800e444 <CO_fifo_altFinish+0x68>
        return;
 800e442:	bf00      	nop
            }
        }
    }
}
 800e444:	3714      	adds	r7, #20
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr

0800e44e <CO_fifo_altRead>:

size_t CO_fifo_altRead(CO_fifo_t *fifo, char *buf, size_t count) {
 800e44e:	b480      	push	{r7}
 800e450:	b089      	sub	sp, #36	; 0x24
 800e452:	af00      	add	r7, sp, #0
 800e454:	60f8      	str	r0, [r7, #12]
 800e456:	60b9      	str	r1, [r7, #8]
 800e458:	607a      	str	r2, [r7, #4]
    size_t i;
    const char *bufSrc;

    bufSrc = &fifo->buf[fifo->altReadPtr];
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	691b      	ldr	r3, [r3, #16]
 800e462:	4413      	add	r3, r2
 800e464:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	61fb      	str	r3, [r7, #28]
 800e46a:	e025      	b.n	800e4b8 <CO_fifo_altRead+0x6a>
        const char c = *bufSrc;
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	75fb      	strb	r3, [r7, #23]

        /* is there no more data */
        if (fifo->altReadPtr == fifo->writePtr) {
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	691a      	ldr	r2, [r3, #16]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	689b      	ldr	r3, [r3, #8]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d020      	beq.n	800e4c0 <CO_fifo_altRead+0x72>
            break;
        }

        *(buf++) = c;
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	1c5a      	adds	r2, r3, #1
 800e482:	60ba      	str	r2, [r7, #8]
 800e484:	7dfa      	ldrb	r2, [r7, #23]
 800e486:	701a      	strb	r2, [r3, #0]

        /* increment variables */
        if (++fifo->altReadPtr == fifo->bufSize) {
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	611a      	str	r2, [r3, #16]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	691a      	ldr	r2, [r3, #16]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d106      	bne.n	800e4ac <CO_fifo_altRead+0x5e>
            fifo->altReadPtr = 0;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	611a      	str	r2, [r3, #16]
            bufSrc = &fifo->buf[0];
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	61bb      	str	r3, [r7, #24]
 800e4aa:	e002      	b.n	800e4b2 <CO_fifo_altRead+0x64>
        }
        else {
            bufSrc++;
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	3b01      	subs	r3, #1
 800e4b6:	61fb      	str	r3, [r7, #28]
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1d6      	bne.n	800e46c <CO_fifo_altRead+0x1e>
 800e4be:	e000      	b.n	800e4c2 <CO_fifo_altRead+0x74>
            break;
 800e4c0:	bf00      	nop
        }
    }

    return count - i;
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	1ad3      	subs	r3, r2, r3
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3724      	adds	r7, #36	; 0x24
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e4d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e50c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e4d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e4da:	e003      	b.n	800e4e4 <LoopCopyDataInit>

0800e4dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e4dc:	4b0c      	ldr	r3, [pc, #48]	; (800e510 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e4de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e4e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e4e2:	3104      	adds	r1, #4

0800e4e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e4e4:	480b      	ldr	r0, [pc, #44]	; (800e514 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e4e6:	4b0c      	ldr	r3, [pc, #48]	; (800e518 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e4e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e4ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e4ec:	d3f6      	bcc.n	800e4dc <CopyDataInit>
  ldr  r2, =_sbss
 800e4ee:	4a0b      	ldr	r2, [pc, #44]	; (800e51c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e4f0:	e002      	b.n	800e4f8 <LoopFillZerobss>

0800e4f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e4f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e4f4:	f842 3b04 	str.w	r3, [r2], #4

0800e4f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e4f8:	4b09      	ldr	r3, [pc, #36]	; (800e520 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e4fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e4fc:	d3f9      	bcc.n	800e4f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e4fe:	f7f3 fb0f 	bl	8001b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e502:	f008 fcad 	bl	8016e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e506:	f7f2 ffd9 	bl	80014bc <main>
  bx  lr    
 800e50a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e50c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e510:	080190e8 	.word	0x080190e8
  ldr  r0, =_sdata
 800e514:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e518:	20000620 	.word	0x20000620
  ldr  r2, =_sbss
 800e51c:	20000620 	.word	0x20000620
  ldr  r3, = _ebss
 800e520:	20006f14 	.word	0x20006f14

0800e524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e524:	e7fe      	b.n	800e524 <ADC_IRQHandler>
	...

0800e528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e52c:	4b0e      	ldr	r3, [pc, #56]	; (800e568 <HAL_Init+0x40>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a0d      	ldr	r2, [pc, #52]	; (800e568 <HAL_Init+0x40>)
 800e532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e538:	4b0b      	ldr	r3, [pc, #44]	; (800e568 <HAL_Init+0x40>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a0a      	ldr	r2, [pc, #40]	; (800e568 <HAL_Init+0x40>)
 800e53e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e544:	4b08      	ldr	r3, [pc, #32]	; (800e568 <HAL_Init+0x40>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a07      	ldr	r2, [pc, #28]	; (800e568 <HAL_Init+0x40>)
 800e54a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e54e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e550:	2003      	movs	r0, #3
 800e552:	f001 f852 	bl	800f5fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e556:	2000      	movs	r0, #0
 800e558:	f7f3 f99e 	bl	8001898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e55c:	f7f3 f974 	bl	8001848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e560:	2300      	movs	r3, #0
}
 800e562:	4618      	mov	r0, r3
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	40023c00 	.word	0x40023c00

0800e56c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e56c:	b480      	push	{r7}
 800e56e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e570:	4b06      	ldr	r3, [pc, #24]	; (800e58c <HAL_IncTick+0x20>)
 800e572:	781b      	ldrb	r3, [r3, #0]
 800e574:	461a      	mov	r2, r3
 800e576:	4b06      	ldr	r3, [pc, #24]	; (800e590 <HAL_IncTick+0x24>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4413      	add	r3, r2
 800e57c:	4a04      	ldr	r2, [pc, #16]	; (800e590 <HAL_IncTick+0x24>)
 800e57e:	6013      	str	r3, [r2, #0]
}
 800e580:	bf00      	nop
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	200005a8 	.word	0x200005a8
 800e590:	20002508 	.word	0x20002508

0800e594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e594:	b480      	push	{r7}
 800e596:	af00      	add	r7, sp, #0
  return uwTick;
 800e598:	4b03      	ldr	r3, [pc, #12]	; (800e5a8 <HAL_GetTick+0x14>)
 800e59a:	681b      	ldr	r3, [r3, #0]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	20002508 	.word	0x20002508

0800e5ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e5b4:	f7ff ffee 	bl	800e594 <HAL_GetTick>
 800e5b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c4:	d005      	beq.n	800e5d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e5c6:	4b0a      	ldr	r3, [pc, #40]	; (800e5f0 <HAL_Delay+0x44>)
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e5d2:	bf00      	nop
 800e5d4:	f7ff ffde 	bl	800e594 <HAL_GetTick>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	1ad3      	subs	r3, r2, r3
 800e5de:	68fa      	ldr	r2, [r7, #12]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d8f7      	bhi.n	800e5d4 <HAL_Delay+0x28>
  {
  }
}
 800e5e4:	bf00      	nop
 800e5e6:	bf00      	nop
 800e5e8:	3710      	adds	r7, #16
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	200005a8 	.word	0x200005a8

0800e5f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d101      	bne.n	800e606 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800e602:	2301      	movs	r3, #1
 800e604:	e0ed      	b.n	800e7e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d102      	bne.n	800e618 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f7f2 fbe2 	bl	8000ddc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f022 0202 	bic.w	r2, r2, #2
 800e626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e628:	f7ff ffb4 	bl	800e594 <HAL_GetTick>
 800e62c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e62e:	e012      	b.n	800e656 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e630:	f7ff ffb0 	bl	800e594 <HAL_GetTick>
 800e634:	4602      	mov	r2, r0
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	2b0a      	cmp	r3, #10
 800e63c:	d90b      	bls.n	800e656 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e642:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2205      	movs	r2, #5
 800e64e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e652:	2301      	movs	r3, #1
 800e654:	e0c5      	b.n	800e7e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	f003 0302 	and.w	r3, r3, #2
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1e5      	bne.n	800e630 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f042 0201 	orr.w	r2, r2, #1
 800e672:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e674:	f7ff ff8e 	bl	800e594 <HAL_GetTick>
 800e678:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e67a:	e012      	b.n	800e6a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e67c:	f7ff ff8a 	bl	800e594 <HAL_GetTick>
 800e680:	4602      	mov	r2, r0
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	2b0a      	cmp	r3, #10
 800e688:	d90b      	bls.n	800e6a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e68e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2205      	movs	r2, #5
 800e69a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e09f      	b.n	800e7e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	f003 0301 	and.w	r3, r3, #1
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d0e5      	beq.n	800e67c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	7e1b      	ldrb	r3, [r3, #24]
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d108      	bne.n	800e6ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e6c6:	601a      	str	r2, [r3, #0]
 800e6c8:	e007      	b.n	800e6da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e6d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	7e5b      	ldrb	r3, [r3, #25]
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d108      	bne.n	800e6f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e6f0:	601a      	str	r2, [r3, #0]
 800e6f2:	e007      	b.n	800e704 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e702:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	7e9b      	ldrb	r3, [r3, #26]
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d108      	bne.n	800e71e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f042 0220 	orr.w	r2, r2, #32
 800e71a:	601a      	str	r2, [r3, #0]
 800e71c:	e007      	b.n	800e72e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f022 0220 	bic.w	r2, r2, #32
 800e72c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	7edb      	ldrb	r3, [r3, #27]
 800e732:	2b01      	cmp	r3, #1
 800e734:	d108      	bne.n	800e748 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f022 0210 	bic.w	r2, r2, #16
 800e744:	601a      	str	r2, [r3, #0]
 800e746:	e007      	b.n	800e758 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f042 0210 	orr.w	r2, r2, #16
 800e756:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	7f1b      	ldrb	r3, [r3, #28]
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d108      	bne.n	800e772 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f042 0208 	orr.w	r2, r2, #8
 800e76e:	601a      	str	r2, [r3, #0]
 800e770:	e007      	b.n	800e782 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f022 0208 	bic.w	r2, r2, #8
 800e780:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	7f5b      	ldrb	r3, [r3, #29]
 800e786:	2b01      	cmp	r3, #1
 800e788:	d108      	bne.n	800e79c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f042 0204 	orr.w	r2, r2, #4
 800e798:	601a      	str	r2, [r3, #0]
 800e79a:	e007      	b.n	800e7ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f022 0204 	bic.w	r2, r2, #4
 800e7aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	689a      	ldr	r2, [r3, #8]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	431a      	orrs	r2, r3
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	431a      	orrs	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	695b      	ldr	r3, [r3, #20]
 800e7c0:	ea42 0103 	orr.w	r1, r2, r3
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	1e5a      	subs	r2, r3, #1
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	430a      	orrs	r2, r1
 800e7d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800e7e0:	2300      	movs	r3, #0
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3710      	adds	r7, #16
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
	...

0800e7ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b087      	sub	sp, #28
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e802:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800e804:	7cfb      	ldrb	r3, [r7, #19]
 800e806:	2b01      	cmp	r3, #1
 800e808:	d003      	beq.n	800e812 <HAL_CAN_ConfigFilter+0x26>
 800e80a:	7cfb      	ldrb	r3, [r7, #19]
 800e80c:	2b02      	cmp	r3, #2
 800e80e:	f040 80be 	bne.w	800e98e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800e812:	4b65      	ldr	r3, [pc, #404]	; (800e9a8 <HAL_CAN_ConfigFilter+0x1bc>)
 800e814:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e81c:	f043 0201 	orr.w	r2, r3, #1
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e82c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e840:	021b      	lsls	r3, r3, #8
 800e842:	431a      	orrs	r2, r3
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	695b      	ldr	r3, [r3, #20]
 800e84e:	f003 031f 	and.w	r3, r3, #31
 800e852:	2201      	movs	r2, #1
 800e854:	fa02 f303 	lsl.w	r3, r2, r3
 800e858:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	43db      	mvns	r3, r3
 800e864:	401a      	ands	r2, r3
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	69db      	ldr	r3, [r3, #28]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d123      	bne.n	800e8bc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	43db      	mvns	r3, r3
 800e87e:	401a      	ands	r2, r3
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e892:	683a      	ldr	r2, [r7, #0]
 800e894:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800e896:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	3248      	adds	r2, #72	; 0x48
 800e89c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e8b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e8b2:	6979      	ldr	r1, [r7, #20]
 800e8b4:	3348      	adds	r3, #72	; 0x48
 800e8b6:	00db      	lsls	r3, r3, #3
 800e8b8:	440b      	add	r3, r1
 800e8ba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	69db      	ldr	r3, [r3, #28]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d122      	bne.n	800e90a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	431a      	orrs	r2, r3
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e8e0:	683a      	ldr	r2, [r7, #0]
 800e8e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800e8e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	3248      	adds	r2, #72	; 0x48
 800e8ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e8fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e900:	6979      	ldr	r1, [r7, #20]
 800e902:	3348      	adds	r3, #72	; 0x48
 800e904:	00db      	lsls	r3, r3, #3
 800e906:	440b      	add	r3, r1
 800e908:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	699b      	ldr	r3, [r3, #24]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d109      	bne.n	800e926 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	43db      	mvns	r3, r3
 800e91c:	401a      	ands	r2, r3
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e924:	e007      	b.n	800e936 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	431a      	orrs	r2, r3
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	691b      	ldr	r3, [r3, #16]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d109      	bne.n	800e952 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	43db      	mvns	r3, r3
 800e948:	401a      	ands	r2, r3
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800e950:	e007      	b.n	800e962 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	431a      	orrs	r2, r3
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	6a1b      	ldr	r3, [r3, #32]
 800e966:	2b01      	cmp	r3, #1
 800e968:	d107      	bne.n	800e97a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	431a      	orrs	r2, r3
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e980:	f023 0201 	bic.w	r2, r3, #1
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800e98a:	2300      	movs	r3, #0
 800e98c:	e006      	b.n	800e99c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e992:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e99a:	2301      	movs	r3, #1
  }
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	371c      	adds	r7, #28
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr
 800e9a8:	40006400 	.word	0x40006400

0800e9ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d12e      	bne.n	800ea1e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2202      	movs	r2, #2
 800e9c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f022 0201 	bic.w	r2, r2, #1
 800e9d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e9d8:	f7ff fddc 	bl	800e594 <HAL_GetTick>
 800e9dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800e9de:	e012      	b.n	800ea06 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e9e0:	f7ff fdd8 	bl	800e594 <HAL_GetTick>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	1ad3      	subs	r3, r2, r3
 800e9ea:	2b0a      	cmp	r3, #10
 800e9ec:	d90b      	bls.n	800ea06 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2205      	movs	r2, #5
 800e9fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ea02:	2301      	movs	r3, #1
 800ea04:	e012      	b.n	800ea2c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	f003 0301 	and.w	r3, r3, #1
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1e5      	bne.n	800e9e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	e006      	b.n	800ea2c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ea2a:	2301      	movs	r3, #1
  }
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3710      	adds	r7, #16
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	2b02      	cmp	r3, #2
 800ea46:	d133      	bne.n	800eab0 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f042 0201 	orr.w	r2, r2, #1
 800ea56:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ea58:	f7ff fd9c 	bl	800e594 <HAL_GetTick>
 800ea5c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ea5e:	e012      	b.n	800ea86 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ea60:	f7ff fd98 	bl	800e594 <HAL_GetTick>
 800ea64:	4602      	mov	r2, r0
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	1ad3      	subs	r3, r2, r3
 800ea6a:	2b0a      	cmp	r3, #10
 800ea6c:	d90b      	bls.n	800ea86 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2205      	movs	r2, #5
 800ea7e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ea82:	2301      	movs	r3, #1
 800ea84:	e01b      	b.n	800eabe <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	f003 0301 	and.w	r3, r3, #1
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d0e5      	beq.n	800ea60 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f022 0202 	bic.w	r2, r2, #2
 800eaa2:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800eaac:	2300      	movs	r3, #0
 800eaae:	e006      	b.n	800eabe <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800eabc:	2301      	movs	r3, #1
  }
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800eac6:	b480      	push	{r7}
 800eac8:	b089      	sub	sp, #36	; 0x24
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	60f8      	str	r0, [r7, #12]
 800eace:	60b9      	str	r1, [r7, #8]
 800ead0:	607a      	str	r2, [r7, #4]
 800ead2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eada:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800eae4:	7ffb      	ldrb	r3, [r7, #31]
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d003      	beq.n	800eaf2 <HAL_CAN_AddTxMessage+0x2c>
 800eaea:	7ffb      	ldrb	r3, [r7, #31]
 800eaec:	2b02      	cmp	r3, #2
 800eaee:	f040 80b8 	bne.w	800ec62 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10a      	bne.n	800eb12 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800eafc:	69bb      	ldr	r3, [r7, #24]
 800eafe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d105      	bne.n	800eb12 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800eb06:	69bb      	ldr	r3, [r7, #24]
 800eb08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f000 80a0 	beq.w	800ec52 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	0e1b      	lsrs	r3, r3, #24
 800eb16:	f003 0303 	and.w	r3, r3, #3
 800eb1a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	2b02      	cmp	r3, #2
 800eb20:	d907      	bls.n	800eb32 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e09e      	b.n	800ec70 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800eb32:	2201      	movs	r2, #1
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	409a      	lsls	r2, r3
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	689b      	ldr	r3, [r3, #8]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10d      	bne.n	800eb60 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800eb4e:	68f9      	ldr	r1, [r7, #12]
 800eb50:	6809      	ldr	r1, [r1, #0]
 800eb52:	431a      	orrs	r2, r3
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	3318      	adds	r3, #24
 800eb58:	011b      	lsls	r3, r3, #4
 800eb5a:	440b      	add	r3, r1
 800eb5c:	601a      	str	r2, [r3, #0]
 800eb5e:	e00f      	b.n	800eb80 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800eb6a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800eb70:	68f9      	ldr	r1, [r7, #12]
 800eb72:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800eb74:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	3318      	adds	r3, #24
 800eb7a:	011b      	lsls	r3, r3, #4
 800eb7c:	440b      	add	r3, r1
 800eb7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6819      	ldr	r1, [r3, #0]
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	691a      	ldr	r2, [r3, #16]
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	3318      	adds	r3, #24
 800eb8c:	011b      	lsls	r3, r3, #4
 800eb8e:	440b      	add	r3, r1
 800eb90:	3304      	adds	r3, #4
 800eb92:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	7d1b      	ldrb	r3, [r3, #20]
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d111      	bne.n	800ebc0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	3318      	adds	r3, #24
 800eba4:	011b      	lsls	r3, r3, #4
 800eba6:	4413      	add	r3, r2
 800eba8:	3304      	adds	r3, #4
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	68fa      	ldr	r2, [r7, #12]
 800ebae:	6811      	ldr	r1, [r2, #0]
 800ebb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	3318      	adds	r3, #24
 800ebb8:	011b      	lsls	r3, r3, #4
 800ebba:	440b      	add	r3, r1
 800ebbc:	3304      	adds	r3, #4
 800ebbe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	3307      	adds	r3, #7
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	061a      	lsls	r2, r3, #24
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	3306      	adds	r3, #6
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	041b      	lsls	r3, r3, #16
 800ebd0:	431a      	orrs	r2, r3
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	3305      	adds	r3, #5
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	021b      	lsls	r3, r3, #8
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	3204      	adds	r2, #4
 800ebe0:	7812      	ldrb	r2, [r2, #0]
 800ebe2:	4610      	mov	r0, r2
 800ebe4:	68fa      	ldr	r2, [r7, #12]
 800ebe6:	6811      	ldr	r1, [r2, #0]
 800ebe8:	ea43 0200 	orr.w	r2, r3, r0
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	011b      	lsls	r3, r3, #4
 800ebf0:	440b      	add	r3, r1
 800ebf2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800ebf6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	3303      	adds	r3, #3
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	061a      	lsls	r2, r3, #24
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	3302      	adds	r3, #2
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	041b      	lsls	r3, r3, #16
 800ec08:	431a      	orrs	r2, r3
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	021b      	lsls	r3, r3, #8
 800ec12:	4313      	orrs	r3, r2
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	7812      	ldrb	r2, [r2, #0]
 800ec18:	4610      	mov	r0, r2
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	6811      	ldr	r1, [r2, #0]
 800ec1e:	ea43 0200 	orr.w	r2, r3, r0
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	011b      	lsls	r3, r3, #4
 800ec26:	440b      	add	r3, r1
 800ec28:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800ec2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	3318      	adds	r3, #24
 800ec36:	011b      	lsls	r3, r3, #4
 800ec38:	4413      	add	r3, r2
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68fa      	ldr	r2, [r7, #12]
 800ec3e:	6811      	ldr	r1, [r2, #0]
 800ec40:	f043 0201 	orr.w	r2, r3, #1
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	3318      	adds	r3, #24
 800ec48:	011b      	lsls	r3, r3, #4
 800ec4a:	440b      	add	r3, r1
 800ec4c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	e00e      	b.n	800ec70 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e006      	b.n	800ec70 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ec6e:	2301      	movs	r3, #1
  }
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3724      	adds	r7, #36	; 0x24
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b085      	sub	sp, #20
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800ec84:	2300      	movs	r3, #0
 800ec86:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ec8e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800ec90:	7afb      	ldrb	r3, [r7, #11]
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d002      	beq.n	800ec9c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800ec96:	7afb      	ldrb	r3, [r7, #11]
 800ec98:	2b02      	cmp	r3, #2
 800ec9a:	d11d      	bne.n	800ecd8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d002      	beq.n	800ecb0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	3301      	adds	r3, #1
 800ecae:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	689b      	ldr	r3, [r3, #8]
 800ecb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d002      	beq.n	800ecc4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d002      	beq.n	800ecd8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3714      	adds	r7, #20
 800ecde:	46bd      	mov	sp, r7
 800ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece4:	4770      	bx	lr

0800ece6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800ece6:	b480      	push	{r7}
 800ece8:	b087      	sub	sp, #28
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	60f8      	str	r0, [r7, #12]
 800ecee:	60b9      	str	r1, [r7, #8]
 800ecf0:	607a      	str	r2, [r7, #4]
 800ecf2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ecfa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800ecfc:	7dfb      	ldrb	r3, [r7, #23]
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d003      	beq.n	800ed0a <HAL_CAN_GetRxMessage+0x24>
 800ed02:	7dfb      	ldrb	r3, [r7, #23]
 800ed04:	2b02      	cmp	r3, #2
 800ed06:	f040 80f3 	bne.w	800eef0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10e      	bne.n	800ed2e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	68db      	ldr	r3, [r3, #12]
 800ed16:	f003 0303 	and.w	r3, r3, #3
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d116      	bne.n	800ed4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e0e7      	b.n	800eefe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	f003 0303 	and.w	r3, r3, #3
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d107      	bne.n	800ed4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ed48:	2301      	movs	r3, #1
 800ed4a:	e0d8      	b.n	800eefe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	331b      	adds	r3, #27
 800ed54:	011b      	lsls	r3, r3, #4
 800ed56:	4413      	add	r3, r2
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f003 0204 	and.w	r2, r3, #4
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d10c      	bne.n	800ed84 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	331b      	adds	r3, #27
 800ed72:	011b      	lsls	r3, r3, #4
 800ed74:	4413      	add	r3, r2
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	0d5b      	lsrs	r3, r3, #21
 800ed7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	601a      	str	r2, [r3, #0]
 800ed82:	e00b      	b.n	800ed9c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	331b      	adds	r3, #27
 800ed8c:	011b      	lsls	r3, r3, #4
 800ed8e:	4413      	add	r3, r2
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	08db      	lsrs	r3, r3, #3
 800ed94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	331b      	adds	r3, #27
 800eda4:	011b      	lsls	r3, r3, #4
 800eda6:	4413      	add	r3, r2
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f003 0202 	and.w	r2, r3, #2
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	331b      	adds	r3, #27
 800edba:	011b      	lsls	r3, r3, #4
 800edbc:	4413      	add	r3, r2
 800edbe:	3304      	adds	r3, #4
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f003 020f 	and.w	r2, r3, #15
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681a      	ldr	r2, [r3, #0]
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	331b      	adds	r3, #27
 800edd2:	011b      	lsls	r3, r3, #4
 800edd4:	4413      	add	r3, r2
 800edd6:	3304      	adds	r3, #4
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	0a1b      	lsrs	r3, r3, #8
 800eddc:	b2da      	uxtb	r2, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	331b      	adds	r3, #27
 800edea:	011b      	lsls	r3, r3, #4
 800edec:	4413      	add	r3, r2
 800edee:	3304      	adds	r3, #4
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	0c1b      	lsrs	r3, r3, #16
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	011b      	lsls	r3, r3, #4
 800ee02:	4413      	add	r3, r2
 800ee04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	b2da      	uxtb	r2, r3
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	011b      	lsls	r3, r3, #4
 800ee18:	4413      	add	r3, r2
 800ee1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	0a1a      	lsrs	r2, r3, #8
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	3301      	adds	r3, #1
 800ee26:	b2d2      	uxtb	r2, r2
 800ee28:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	011b      	lsls	r3, r3, #4
 800ee32:	4413      	add	r3, r2
 800ee34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	0c1a      	lsrs	r2, r3, #16
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	3302      	adds	r3, #2
 800ee40:	b2d2      	uxtb	r2, r2
 800ee42:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	011b      	lsls	r3, r3, #4
 800ee4c:	4413      	add	r3, r2
 800ee4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	0e1a      	lsrs	r2, r3, #24
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	3303      	adds	r3, #3
 800ee5a:	b2d2      	uxtb	r2, r2
 800ee5c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	011b      	lsls	r3, r3, #4
 800ee66:	4413      	add	r3, r2
 800ee68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	3304      	adds	r3, #4
 800ee72:	b2d2      	uxtb	r2, r2
 800ee74:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	011b      	lsls	r3, r3, #4
 800ee7e:	4413      	add	r3, r2
 800ee80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	0a1a      	lsrs	r2, r3, #8
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	3305      	adds	r3, #5
 800ee8c:	b2d2      	uxtb	r2, r2
 800ee8e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	011b      	lsls	r3, r3, #4
 800ee98:	4413      	add	r3, r2
 800ee9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	0c1a      	lsrs	r2, r3, #16
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	3306      	adds	r3, #6
 800eea6:	b2d2      	uxtb	r2, r2
 800eea8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	011b      	lsls	r3, r3, #4
 800eeb2:	4413      	add	r3, r2
 800eeb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	0e1a      	lsrs	r2, r3, #24
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	3307      	adds	r3, #7
 800eec0:	b2d2      	uxtb	r2, r2
 800eec2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d108      	bne.n	800eedc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	68da      	ldr	r2, [r3, #12]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f042 0220 	orr.w	r2, r2, #32
 800eed8:	60da      	str	r2, [r3, #12]
 800eeda:	e007      	b.n	800eeec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	691a      	ldr	r2, [r3, #16]
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f042 0220 	orr.w	r2, r2, #32
 800eeea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800eeec:	2300      	movs	r3, #0
 800eeee:	e006      	b.n	800eefe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800eefc:	2301      	movs	r3, #1
  }
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	371c      	adds	r7, #28
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr

0800ef0a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800ef0a:	b480      	push	{r7}
 800ef0c:	b085      	sub	sp, #20
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
 800ef12:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800ef14:	2300      	movs	r3, #0
 800ef16:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef1e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800ef20:	7afb      	ldrb	r3, [r7, #11]
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d002      	beq.n	800ef2c <HAL_CAN_GetRxFifoFillLevel+0x22>
 800ef26:	7afb      	ldrb	r3, [r7, #11]
 800ef28:	2b02      	cmp	r3, #2
 800ef2a:	d10f      	bne.n	800ef4c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d106      	bne.n	800ef40 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	f003 0303 	and.w	r3, r3, #3
 800ef3c:	60fb      	str	r3, [r7, #12]
 800ef3e:	e005      	b.n	800ef4c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	f003 0303 	and.w	r3, r3, #3
 800ef4a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3714      	adds	r7, #20
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr

0800ef5a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800ef5a:	b480      	push	{r7}
 800ef5c:	b085      	sub	sp, #20
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
 800ef62:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef6a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800ef6c:	7bfb      	ldrb	r3, [r7, #15]
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d002      	beq.n	800ef78 <HAL_CAN_ActivateNotification+0x1e>
 800ef72:	7bfb      	ldrb	r3, [r7, #15]
 800ef74:	2b02      	cmp	r3, #2
 800ef76:	d109      	bne.n	800ef8c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6959      	ldr	r1, [r3, #20]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	683a      	ldr	r2, [r7, #0]
 800ef84:	430a      	orrs	r2, r1
 800ef86:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	e006      	b.n	800ef9a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ef98:	2301      	movs	r3, #1
  }
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3714      	adds	r7, #20
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr

0800efa6 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800efa6:	b480      	push	{r7}
 800efa8:	b085      	sub	sp, #20
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800efb6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800efb8:	7bfb      	ldrb	r3, [r7, #15]
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d002      	beq.n	800efc4 <HAL_CAN_DeactivateNotification+0x1e>
 800efbe:	7bfb      	ldrb	r3, [r7, #15]
 800efc0:	2b02      	cmp	r3, #2
 800efc2:	d10a      	bne.n	800efda <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	6959      	ldr	r1, [r3, #20]
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	43da      	mvns	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	400a      	ands	r2, r1
 800efd4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800efd6:	2300      	movs	r3, #0
 800efd8:	e006      	b.n	800efe8 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800efe6:	2301      	movs	r3, #1
  }
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3714      	adds	r7, #20
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr

0800eff4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b08a      	sub	sp, #40	; 0x28
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800effc:	2300      	movs	r3, #0
 800effe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	689b      	ldr	r3, [r3, #8]
 800f016:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	691b      	ldr	r3, [r3, #16]
 800f026:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	699b      	ldr	r3, [r3, #24]
 800f02e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800f030:	6a3b      	ldr	r3, [r7, #32]
 800f032:	f003 0301 	and.w	r3, r3, #1
 800f036:	2b00      	cmp	r3, #0
 800f038:	d07c      	beq.n	800f134 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	f003 0301 	and.w	r3, r3, #1
 800f040:	2b00      	cmp	r3, #0
 800f042:	d023      	beq.n	800f08c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2201      	movs	r2, #1
 800f04a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	f003 0302 	and.w	r3, r3, #2
 800f052:	2b00      	cmp	r3, #0
 800f054:	d003      	beq.n	800f05e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f983 	bl	800f362 <HAL_CAN_TxMailbox0CompleteCallback>
 800f05c:	e016      	b.n	800f08c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	f003 0304 	and.w	r3, r3, #4
 800f064:	2b00      	cmp	r3, #0
 800f066:	d004      	beq.n	800f072 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800f068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f06e:	627b      	str	r3, [r7, #36]	; 0x24
 800f070:	e00c      	b.n	800f08c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	f003 0308 	and.w	r3, r3, #8
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d004      	beq.n	800f086 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f082:	627b      	str	r3, [r7, #36]	; 0x24
 800f084:	e002      	b.n	800f08c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 f989 	bl	800f39e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f092:	2b00      	cmp	r3, #0
 800f094:	d024      	beq.n	800f0e0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f09e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d003      	beq.n	800f0b2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f000 f963 	bl	800f376 <HAL_CAN_TxMailbox1CompleteCallback>
 800f0b0:	e016      	b.n	800f0e0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d004      	beq.n	800f0c6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800f0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f0c2:	627b      	str	r3, [r7, #36]	; 0x24
 800f0c4:	e00c      	b.n	800f0e0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d004      	beq.n	800f0da <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f0d6:	627b      	str	r3, [r7, #36]	; 0x24
 800f0d8:	e002      	b.n	800f0e0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 f969 	bl	800f3b2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800f0e0:	69bb      	ldr	r3, [r7, #24]
 800f0e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d024      	beq.n	800f134 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f0f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800f0f4:	69bb      	ldr	r3, [r7, #24]
 800f0f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d003      	beq.n	800f106 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f943 	bl	800f38a <HAL_CAN_TxMailbox2CompleteCallback>
 800f104:	e016      	b.n	800f134 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d004      	beq.n	800f11a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f116:	627b      	str	r3, [r7, #36]	; 0x24
 800f118:	e00c      	b.n	800f134 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f120:	2b00      	cmp	r3, #0
 800f122:	d004      	beq.n	800f12e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f12a:	627b      	str	r3, [r7, #36]	; 0x24
 800f12c:	e002      	b.n	800f134 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f000 f949 	bl	800f3c6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800f134:	6a3b      	ldr	r3, [r7, #32]
 800f136:	f003 0308 	and.w	r3, r3, #8
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d00c      	beq.n	800f158 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	f003 0310 	and.w	r3, r3, #16
 800f144:	2b00      	cmp	r3, #0
 800f146:	d007      	beq.n	800f158 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f14e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2210      	movs	r2, #16
 800f156:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800f158:	6a3b      	ldr	r3, [r7, #32]
 800f15a:	f003 0304 	and.w	r3, r3, #4
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00b      	beq.n	800f17a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	f003 0308 	and.w	r3, r3, #8
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d006      	beq.n	800f17a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2208      	movs	r2, #8
 800f172:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 f930 	bl	800f3da <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800f17a:	6a3b      	ldr	r3, [r7, #32]
 800f17c:	f003 0302 	and.w	r3, r3, #2
 800f180:	2b00      	cmp	r3, #0
 800f182:	d009      	beq.n	800f198 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	68db      	ldr	r3, [r3, #12]
 800f18a:	f003 0303 	and.w	r3, r3, #3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d002      	beq.n	800f198 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7fa fa64 	bl	8009660 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800f198:	6a3b      	ldr	r3, [r7, #32]
 800f19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00c      	beq.n	800f1bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	f003 0310 	and.w	r3, r3, #16
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d007      	beq.n	800f1bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800f1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f1b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2210      	movs	r2, #16
 800f1ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800f1bc:	6a3b      	ldr	r3, [r7, #32]
 800f1be:	f003 0320 	and.w	r3, r3, #32
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d00b      	beq.n	800f1de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f003 0308 	and.w	r3, r3, #8
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d006      	beq.n	800f1de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2208      	movs	r2, #8
 800f1d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 f908 	bl	800f3ee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800f1de:	6a3b      	ldr	r3, [r7, #32]
 800f1e0:	f003 0310 	and.w	r3, r3, #16
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d009      	beq.n	800f1fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	691b      	ldr	r3, [r3, #16]
 800f1ee:	f003 0303 	and.w	r3, r3, #3
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d002      	beq.n	800f1fc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7fa fa4c 	bl	8009694 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800f1fc:	6a3b      	ldr	r3, [r7, #32]
 800f1fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00b      	beq.n	800f21e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	f003 0310 	and.w	r3, r3, #16
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d006      	beq.n	800f21e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	2210      	movs	r2, #16
 800f216:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 f8f2 	bl	800f402 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800f21e:	6a3b      	ldr	r3, [r7, #32]
 800f220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00b      	beq.n	800f240 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	f003 0308 	and.w	r3, r3, #8
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d006      	beq.n	800f240 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2208      	movs	r2, #8
 800f238:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 f8eb 	bl	800f416 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800f240:	6a3b      	ldr	r3, [r7, #32]
 800f242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f246:	2b00      	cmp	r3, #0
 800f248:	d07b      	beq.n	800f342 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	f003 0304 	and.w	r3, r3, #4
 800f250:	2b00      	cmp	r3, #0
 800f252:	d072      	beq.n	800f33a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f254:	6a3b      	ldr	r3, [r7, #32]
 800f256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d008      	beq.n	800f270 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f264:	2b00      	cmp	r3, #0
 800f266:	d003      	beq.n	800f270 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800f268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26a:	f043 0301 	orr.w	r3, r3, #1
 800f26e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f270:	6a3b      	ldr	r3, [r7, #32]
 800f272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f276:	2b00      	cmp	r3, #0
 800f278:	d008      	beq.n	800f28c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f280:	2b00      	cmp	r3, #0
 800f282:	d003      	beq.n	800f28c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f286:	f043 0302 	orr.w	r3, r3, #2
 800f28a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f28c:	6a3b      	ldr	r3, [r7, #32]
 800f28e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f292:	2b00      	cmp	r3, #0
 800f294:	d008      	beq.n	800f2a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d003      	beq.n	800f2a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a2:	f043 0304 	orr.w	r3, r3, #4
 800f2a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f2a8:	6a3b      	ldr	r3, [r7, #32]
 800f2aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d043      	beq.n	800f33a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d03e      	beq.n	800f33a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f2c2:	2b60      	cmp	r3, #96	; 0x60
 800f2c4:	d02b      	beq.n	800f31e <HAL_CAN_IRQHandler+0x32a>
 800f2c6:	2b60      	cmp	r3, #96	; 0x60
 800f2c8:	d82e      	bhi.n	800f328 <HAL_CAN_IRQHandler+0x334>
 800f2ca:	2b50      	cmp	r3, #80	; 0x50
 800f2cc:	d022      	beq.n	800f314 <HAL_CAN_IRQHandler+0x320>
 800f2ce:	2b50      	cmp	r3, #80	; 0x50
 800f2d0:	d82a      	bhi.n	800f328 <HAL_CAN_IRQHandler+0x334>
 800f2d2:	2b40      	cmp	r3, #64	; 0x40
 800f2d4:	d019      	beq.n	800f30a <HAL_CAN_IRQHandler+0x316>
 800f2d6:	2b40      	cmp	r3, #64	; 0x40
 800f2d8:	d826      	bhi.n	800f328 <HAL_CAN_IRQHandler+0x334>
 800f2da:	2b30      	cmp	r3, #48	; 0x30
 800f2dc:	d010      	beq.n	800f300 <HAL_CAN_IRQHandler+0x30c>
 800f2de:	2b30      	cmp	r3, #48	; 0x30
 800f2e0:	d822      	bhi.n	800f328 <HAL_CAN_IRQHandler+0x334>
 800f2e2:	2b10      	cmp	r3, #16
 800f2e4:	d002      	beq.n	800f2ec <HAL_CAN_IRQHandler+0x2f8>
 800f2e6:	2b20      	cmp	r3, #32
 800f2e8:	d005      	beq.n	800f2f6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800f2ea:	e01d      	b.n	800f328 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	f043 0308 	orr.w	r3, r3, #8
 800f2f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f2f4:	e019      	b.n	800f32a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800f2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f8:	f043 0310 	orr.w	r3, r3, #16
 800f2fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f2fe:	e014      	b.n	800f32a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800f300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f302:	f043 0320 	orr.w	r3, r3, #32
 800f306:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f308:	e00f      	b.n	800f32a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800f30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f310:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f312:	e00a      	b.n	800f32a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800f314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f31a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f31c:	e005      	b.n	800f32a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800f31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f324:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f326:	e000      	b.n	800f32a <HAL_CAN_IRQHandler+0x336>
            break;
 800f328:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	699a      	ldr	r2, [r3, #24]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f338:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2204      	movs	r2, #4
 800f340:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800f342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f344:	2b00      	cmp	r3, #0
 800f346:	d008      	beq.n	800f35a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34e:	431a      	orrs	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 f868 	bl	800f42a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800f35a:	bf00      	nop
 800f35c:	3728      	adds	r7, #40	; 0x28
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}

0800f362 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f362:	b480      	push	{r7}
 800f364:	b083      	sub	sp, #12
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800f36a:	bf00      	nop
 800f36c:	370c      	adds	r7, #12
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr

0800f376 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f376:	b480      	push	{r7}
 800f378:	b083      	sub	sp, #12
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800f37e:	bf00      	nop
 800f380:	370c      	adds	r7, #12
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f38a:	b480      	push	{r7}
 800f38c:	b083      	sub	sp, #12
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800f392:	bf00      	nop
 800f394:	370c      	adds	r7, #12
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr

0800f39e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f39e:	b480      	push	{r7}
 800f3a0:	b083      	sub	sp, #12
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800f3a6:	bf00      	nop
 800f3a8:	370c      	adds	r7, #12
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f3b2:	b480      	push	{r7}
 800f3b4:	b083      	sub	sp, #12
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800f3ba:	bf00      	nop
 800f3bc:	370c      	adds	r7, #12
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr

0800f3c6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f3c6:	b480      	push	{r7}
 800f3c8:	b083      	sub	sp, #12
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800f3ce:	bf00      	nop
 800f3d0:	370c      	adds	r7, #12
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr

0800f3da <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800f3da:	b480      	push	{r7}
 800f3dc:	b083      	sub	sp, #12
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800f3e2:	bf00      	nop
 800f3e4:	370c      	adds	r7, #12
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr

0800f3ee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800f3ee:	b480      	push	{r7}
 800f3f0:	b083      	sub	sp, #12
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800f3f6:	bf00      	nop
 800f3f8:	370c      	adds	r7, #12
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr

0800f402 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800f402:	b480      	push	{r7}
 800f404:	b083      	sub	sp, #12
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800f40a:	bf00      	nop
 800f40c:	370c      	adds	r7, #12
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr

0800f416 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800f416:	b480      	push	{r7}
 800f418:	b083      	sub	sp, #12
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800f41e:	bf00      	nop
 800f420:	370c      	adds	r7, #12
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr

0800f42a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800f42a:	b480      	push	{r7}
 800f42c:	b083      	sub	sp, #12
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800f432:	bf00      	nop
 800f434:	370c      	adds	r7, #12
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr

0800f43e <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 800f43e:	b480      	push	{r7}
 800f440:	b083      	sub	sp, #12
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	370c      	adds	r7, #12
 800f44e:	46bd      	mov	sp, r7
 800f450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f454:	4770      	bx	lr
	...

0800f458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f003 0307 	and.w	r3, r3, #7
 800f466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f468:	4b0c      	ldr	r3, [pc, #48]	; (800f49c <__NVIC_SetPriorityGrouping+0x44>)
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f46e:	68ba      	ldr	r2, [r7, #8]
 800f470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f474:	4013      	ands	r3, r2
 800f476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f48a:	4a04      	ldr	r2, [pc, #16]	; (800f49c <__NVIC_SetPriorityGrouping+0x44>)
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	60d3      	str	r3, [r2, #12]
}
 800f490:	bf00      	nop
 800f492:	3714      	adds	r7, #20
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr
 800f49c:	e000ed00 	.word	0xe000ed00

0800f4a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f4a4:	4b04      	ldr	r3, [pc, #16]	; (800f4b8 <__NVIC_GetPriorityGrouping+0x18>)
 800f4a6:	68db      	ldr	r3, [r3, #12]
 800f4a8:	0a1b      	lsrs	r3, r3, #8
 800f4aa:	f003 0307 	and.w	r3, r3, #7
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	e000ed00 	.word	0xe000ed00

0800f4bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b083      	sub	sp, #12
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f4c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	db0b      	blt.n	800f4e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f4ce:	79fb      	ldrb	r3, [r7, #7]
 800f4d0:	f003 021f 	and.w	r2, r3, #31
 800f4d4:	4907      	ldr	r1, [pc, #28]	; (800f4f4 <__NVIC_EnableIRQ+0x38>)
 800f4d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f4da:	095b      	lsrs	r3, r3, #5
 800f4dc:	2001      	movs	r0, #1
 800f4de:	fa00 f202 	lsl.w	r2, r0, r2
 800f4e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f4e6:	bf00      	nop
 800f4e8:	370c      	adds	r7, #12
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop
 800f4f4:	e000e100 	.word	0xe000e100

0800f4f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b083      	sub	sp, #12
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	4603      	mov	r3, r0
 800f500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f506:	2b00      	cmp	r3, #0
 800f508:	db12      	blt.n	800f530 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f50a:	79fb      	ldrb	r3, [r7, #7]
 800f50c:	f003 021f 	and.w	r2, r3, #31
 800f510:	490a      	ldr	r1, [pc, #40]	; (800f53c <__NVIC_DisableIRQ+0x44>)
 800f512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f516:	095b      	lsrs	r3, r3, #5
 800f518:	2001      	movs	r0, #1
 800f51a:	fa00 f202 	lsl.w	r2, r0, r2
 800f51e:	3320      	adds	r3, #32
 800f520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800f524:	f3bf 8f4f 	dsb	sy
}
 800f528:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f52a:	f3bf 8f6f 	isb	sy
}
 800f52e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800f530:	bf00      	nop
 800f532:	370c      	adds	r7, #12
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr
 800f53c:	e000e100 	.word	0xe000e100

0800f540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
 800f546:	4603      	mov	r3, r0
 800f548:	6039      	str	r1, [r7, #0]
 800f54a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f54c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f550:	2b00      	cmp	r3, #0
 800f552:	db0a      	blt.n	800f56a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	b2da      	uxtb	r2, r3
 800f558:	490c      	ldr	r1, [pc, #48]	; (800f58c <__NVIC_SetPriority+0x4c>)
 800f55a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f55e:	0112      	lsls	r2, r2, #4
 800f560:	b2d2      	uxtb	r2, r2
 800f562:	440b      	add	r3, r1
 800f564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f568:	e00a      	b.n	800f580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	b2da      	uxtb	r2, r3
 800f56e:	4908      	ldr	r1, [pc, #32]	; (800f590 <__NVIC_SetPriority+0x50>)
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	f003 030f 	and.w	r3, r3, #15
 800f576:	3b04      	subs	r3, #4
 800f578:	0112      	lsls	r2, r2, #4
 800f57a:	b2d2      	uxtb	r2, r2
 800f57c:	440b      	add	r3, r1
 800f57e:	761a      	strb	r2, [r3, #24]
}
 800f580:	bf00      	nop
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr
 800f58c:	e000e100 	.word	0xe000e100
 800f590:	e000ed00 	.word	0xe000ed00

0800f594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f594:	b480      	push	{r7}
 800f596:	b089      	sub	sp, #36	; 0x24
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f003 0307 	and.w	r3, r3, #7
 800f5a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	f1c3 0307 	rsb	r3, r3, #7
 800f5ae:	2b04      	cmp	r3, #4
 800f5b0:	bf28      	it	cs
 800f5b2:	2304      	movcs	r3, #4
 800f5b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	3304      	adds	r3, #4
 800f5ba:	2b06      	cmp	r3, #6
 800f5bc:	d902      	bls.n	800f5c4 <NVIC_EncodePriority+0x30>
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	3b03      	subs	r3, #3
 800f5c2:	e000      	b.n	800f5c6 <NVIC_EncodePriority+0x32>
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800f5d2:	43da      	mvns	r2, r3
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	401a      	ands	r2, r3
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f5dc:	f04f 31ff 	mov.w	r1, #4294967295
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	fa01 f303 	lsl.w	r3, r1, r3
 800f5e6:	43d9      	mvns	r1, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f5ec:	4313      	orrs	r3, r2
         );
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3724      	adds	r7, #36	; 0x24
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr

0800f5fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b082      	sub	sp, #8
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f7ff ff28 	bl	800f458 <__NVIC_SetPriorityGrouping>
}
 800f608:	bf00      	nop
 800f60a:	3708      	adds	r7, #8
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f610:	b580      	push	{r7, lr}
 800f612:	b086      	sub	sp, #24
 800f614:	af00      	add	r7, sp, #0
 800f616:	4603      	mov	r3, r0
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
 800f61c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f61e:	2300      	movs	r3, #0
 800f620:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f622:	f7ff ff3d 	bl	800f4a0 <__NVIC_GetPriorityGrouping>
 800f626:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	68b9      	ldr	r1, [r7, #8]
 800f62c:	6978      	ldr	r0, [r7, #20]
 800f62e:	f7ff ffb1 	bl	800f594 <NVIC_EncodePriority>
 800f632:	4602      	mov	r2, r0
 800f634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f638:	4611      	mov	r1, r2
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7ff ff80 	bl	800f540 <__NVIC_SetPriority>
}
 800f640:	bf00      	nop
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	4603      	mov	r3, r0
 800f650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f656:	4618      	mov	r0, r3
 800f658:	f7ff ff30 	bl	800f4bc <__NVIC_EnableIRQ>
}
 800f65c:	bf00      	nop
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	4603      	mov	r3, r0
 800f66c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800f66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f672:	4618      	mov	r0, r3
 800f674:	f7ff ff40 	bl	800f4f8 <__NVIC_DisableIRQ>
}
 800f678:	bf00      	nop
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f688:	2300      	movs	r3, #0
 800f68a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f68c:	f7fe ff82 	bl	800e594 <HAL_GetTick>
 800f690:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d101      	bne.n	800f69c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f698:	2301      	movs	r3, #1
 800f69a:	e099      	b.n	800f7d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2202      	movs	r2, #2
 800f6a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f022 0201 	bic.w	r2, r2, #1
 800f6ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f6bc:	e00f      	b.n	800f6de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f6be:	f7fe ff69 	bl	800e594 <HAL_GetTick>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	1ad3      	subs	r3, r2, r3
 800f6c8:	2b05      	cmp	r3, #5
 800f6ca:	d908      	bls.n	800f6de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2220      	movs	r2, #32
 800f6d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2203      	movs	r2, #3
 800f6d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f6da:	2303      	movs	r3, #3
 800f6dc:	e078      	b.n	800f7d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d1e8      	bne.n	800f6be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f6f4:	697a      	ldr	r2, [r7, #20]
 800f6f6:	4b38      	ldr	r3, [pc, #224]	; (800f7d8 <HAL_DMA_Init+0x158>)
 800f6f8:	4013      	ands	r3, r2
 800f6fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	685a      	ldr	r2, [r3, #4]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f70a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	699b      	ldr	r3, [r3, #24]
 800f71c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6a1b      	ldr	r3, [r3, #32]
 800f728:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f72a:	697a      	ldr	r2, [r7, #20]
 800f72c:	4313      	orrs	r3, r2
 800f72e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f734:	2b04      	cmp	r3, #4
 800f736:	d107      	bne.n	800f748 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f740:	4313      	orrs	r3, r2
 800f742:	697a      	ldr	r2, [r7, #20]
 800f744:	4313      	orrs	r3, r2
 800f746:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	695b      	ldr	r3, [r3, #20]
 800f756:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	f023 0307 	bic.w	r3, r3, #7
 800f75e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f764:	697a      	ldr	r2, [r7, #20]
 800f766:	4313      	orrs	r3, r2
 800f768:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f76e:	2b04      	cmp	r3, #4
 800f770:	d117      	bne.n	800f7a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f776:	697a      	ldr	r2, [r7, #20]
 800f778:	4313      	orrs	r3, r2
 800f77a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f780:	2b00      	cmp	r3, #0
 800f782:	d00e      	beq.n	800f7a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 fa91 	bl	800fcac <DMA_CheckFifoParam>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d008      	beq.n	800f7a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2240      	movs	r2, #64	; 0x40
 800f794:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2201      	movs	r2, #1
 800f79a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f79e:	2301      	movs	r3, #1
 800f7a0:	e016      	b.n	800f7d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	697a      	ldr	r2, [r7, #20]
 800f7a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 fa48 	bl	800fc40 <DMA_CalcBaseAndBitshift>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7b8:	223f      	movs	r2, #63	; 0x3f
 800f7ba:	409a      	lsls	r2, r3
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2201      	movs	r2, #1
 800f7ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f7ce:	2300      	movs	r3, #0
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3718      	adds	r7, #24
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	f010803f 	.word	0xf010803f

0800f7dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b086      	sub	sp, #24
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
 800f7e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f7fa:	2b01      	cmp	r3, #1
 800f7fc:	d101      	bne.n	800f802 <HAL_DMA_Start_IT+0x26>
 800f7fe:	2302      	movs	r3, #2
 800f800:	e040      	b.n	800f884 <HAL_DMA_Start_IT+0xa8>
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2201      	movs	r2, #1
 800f806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f810:	b2db      	uxtb	r3, r3
 800f812:	2b01      	cmp	r3, #1
 800f814:	d12f      	bne.n	800f876 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2202      	movs	r2, #2
 800f81a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2200      	movs	r2, #0
 800f822:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	687a      	ldr	r2, [r7, #4]
 800f828:	68b9      	ldr	r1, [r7, #8]
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f000 f9da 	bl	800fbe4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f834:	223f      	movs	r2, #63	; 0x3f
 800f836:	409a      	lsls	r2, r3
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	f042 0216 	orr.w	r2, r2, #22
 800f84a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f850:	2b00      	cmp	r3, #0
 800f852:	d007      	beq.n	800f864 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f042 0208 	orr.w	r2, r2, #8
 800f862:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	f042 0201 	orr.w	r2, r2, #1
 800f872:	601a      	str	r2, [r3, #0]
 800f874:	e005      	b.n	800f882 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2200      	movs	r2, #0
 800f87a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f87e:	2302      	movs	r3, #2
 800f880:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f882:	7dfb      	ldrb	r3, [r7, #23]
}
 800f884:	4618      	mov	r0, r3
 800f886:	3718      	adds	r7, #24
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f88c:	b480      	push	{r7}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	2b02      	cmp	r3, #2
 800f89e:	d004      	beq.n	800f8aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2280      	movs	r2, #128	; 0x80
 800f8a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e00c      	b.n	800f8c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2205      	movs	r2, #5
 800f8ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f022 0201 	bic.w	r2, r2, #1
 800f8c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f8c2:	2300      	movs	r3, #0
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	370c      	adds	r7, #12
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr

0800f8d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b086      	sub	sp, #24
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f8dc:	4b8e      	ldr	r3, [pc, #568]	; (800fb18 <HAL_DMA_IRQHandler+0x248>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a8e      	ldr	r2, [pc, #568]	; (800fb1c <HAL_DMA_IRQHandler+0x24c>)
 800f8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8e6:	0a9b      	lsrs	r3, r3, #10
 800f8e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8fa:	2208      	movs	r2, #8
 800f8fc:	409a      	lsls	r2, r3
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	4013      	ands	r3, r2
 800f902:	2b00      	cmp	r3, #0
 800f904:	d01a      	beq.n	800f93c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f003 0304 	and.w	r3, r3, #4
 800f910:	2b00      	cmp	r3, #0
 800f912:	d013      	beq.n	800f93c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f022 0204 	bic.w	r2, r2, #4
 800f922:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f928:	2208      	movs	r2, #8
 800f92a:	409a      	lsls	r2, r3
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f934:	f043 0201 	orr.w	r2, r3, #1
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f940:	2201      	movs	r2, #1
 800f942:	409a      	lsls	r2, r3
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	4013      	ands	r3, r2
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d012      	beq.n	800f972 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	695b      	ldr	r3, [r3, #20]
 800f952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00b      	beq.n	800f972 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f95e:	2201      	movs	r2, #1
 800f960:	409a      	lsls	r2, r3
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f96a:	f043 0202 	orr.w	r2, r3, #2
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f976:	2204      	movs	r2, #4
 800f978:	409a      	lsls	r2, r3
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	4013      	ands	r3, r2
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d012      	beq.n	800f9a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f003 0302 	and.w	r3, r3, #2
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d00b      	beq.n	800f9a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f994:	2204      	movs	r2, #4
 800f996:	409a      	lsls	r2, r3
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9a0:	f043 0204 	orr.w	r2, r3, #4
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9ac:	2210      	movs	r2, #16
 800f9ae:	409a      	lsls	r2, r3
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	4013      	ands	r3, r2
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d043      	beq.n	800fa40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f003 0308 	and.w	r3, r3, #8
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d03c      	beq.n	800fa40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9ca:	2210      	movs	r2, #16
 800f9cc:	409a      	lsls	r2, r3
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d018      	beq.n	800fa12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d108      	bne.n	800fa00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d024      	beq.n	800fa40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	4798      	blx	r3
 800f9fe:	e01f      	b.n	800fa40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d01b      	beq.n	800fa40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	4798      	blx	r3
 800fa10:	e016      	b.n	800fa40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d107      	bne.n	800fa30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f022 0208 	bic.w	r2, r2, #8
 800fa2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d003      	beq.n	800fa40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa44:	2220      	movs	r2, #32
 800fa46:	409a      	lsls	r2, r3
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	4013      	ands	r3, r2
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f000 808f 	beq.w	800fb70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f003 0310 	and.w	r3, r3, #16
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 8087 	beq.w	800fb70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa66:	2220      	movs	r2, #32
 800fa68:	409a      	lsls	r2, r3
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	2b05      	cmp	r3, #5
 800fa78:	d136      	bne.n	800fae8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f022 0216 	bic.w	r2, r2, #22
 800fa88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	695a      	ldr	r2, [r3, #20]
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d103      	bne.n	800faaa <HAL_DMA_IRQHandler+0x1da>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d007      	beq.n	800faba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f022 0208 	bic.w	r2, r2, #8
 800fab8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fabe:	223f      	movs	r2, #63	; 0x3f
 800fac0:	409a      	lsls	r2, r3
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2200      	movs	r2, #0
 800faca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2201      	movs	r2, #1
 800fad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d07e      	beq.n	800fbdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	4798      	blx	r3
        }
        return;
 800fae6:	e079      	b.n	800fbdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d01d      	beq.n	800fb32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d10d      	bne.n	800fb20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d031      	beq.n	800fb70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	4798      	blx	r3
 800fb14:	e02c      	b.n	800fb70 <HAL_DMA_IRQHandler+0x2a0>
 800fb16:	bf00      	nop
 800fb18:	2000000c 	.word	0x2000000c
 800fb1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d023      	beq.n	800fb70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	4798      	blx	r3
 800fb30:	e01e      	b.n	800fb70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d10f      	bne.n	800fb60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f022 0210 	bic.w	r2, r2, #16
 800fb4e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2200      	movs	r2, #0
 800fb54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d003      	beq.n	800fb70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d032      	beq.n	800fbde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb7c:	f003 0301 	and.w	r3, r3, #1
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d022      	beq.n	800fbca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2205      	movs	r2, #5
 800fb88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f022 0201 	bic.w	r2, r2, #1
 800fb9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	60bb      	str	r3, [r7, #8]
 800fba2:	697a      	ldr	r2, [r7, #20]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d307      	bcc.n	800fbb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f003 0301 	and.w	r3, r3, #1
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1f2      	bne.n	800fb9c <HAL_DMA_IRQHandler+0x2cc>
 800fbb6:	e000      	b.n	800fbba <HAL_DMA_IRQHandler+0x2ea>
          break;
 800fbb8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d005      	beq.n	800fbde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	4798      	blx	r3
 800fbda:	e000      	b.n	800fbde <HAL_DMA_IRQHandler+0x30e>
        return;
 800fbdc:	bf00      	nop
    }
  }
}
 800fbde:	3718      	adds	r7, #24
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
 800fbf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fc00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	683a      	ldr	r2, [r7, #0]
 800fc08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	2b40      	cmp	r3, #64	; 0x40
 800fc10:	d108      	bne.n	800fc24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	68ba      	ldr	r2, [r7, #8]
 800fc20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800fc22:	e007      	b.n	800fc34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	68ba      	ldr	r2, [r7, #8]
 800fc2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	60da      	str	r2, [r3, #12]
}
 800fc34:	bf00      	nop
 800fc36:	3714      	adds	r7, #20
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr

0800fc40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b085      	sub	sp, #20
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	3b10      	subs	r3, #16
 800fc50:	4a14      	ldr	r2, [pc, #80]	; (800fca4 <DMA_CalcBaseAndBitshift+0x64>)
 800fc52:	fba2 2303 	umull	r2, r3, r2, r3
 800fc56:	091b      	lsrs	r3, r3, #4
 800fc58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800fc5a:	4a13      	ldr	r2, [pc, #76]	; (800fca8 <DMA_CalcBaseAndBitshift+0x68>)
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	4413      	add	r3, r2
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	461a      	mov	r2, r3
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2b03      	cmp	r3, #3
 800fc6c:	d909      	bls.n	800fc82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fc76:	f023 0303 	bic.w	r3, r3, #3
 800fc7a:	1d1a      	adds	r2, r3, #4
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	659a      	str	r2, [r3, #88]	; 0x58
 800fc80:	e007      	b.n	800fc92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fc8a:	f023 0303 	bic.w	r3, r3, #3
 800fc8e:	687a      	ldr	r2, [r7, #4]
 800fc90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3714      	adds	r7, #20
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop
 800fca4:	aaaaaaab 	.word	0xaaaaaaab
 800fca8:	08019018 	.word	0x08019018

0800fcac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	699b      	ldr	r3, [r3, #24]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d11f      	bne.n	800fd06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	2b03      	cmp	r3, #3
 800fcca:	d856      	bhi.n	800fd7a <DMA_CheckFifoParam+0xce>
 800fccc:	a201      	add	r2, pc, #4	; (adr r2, 800fcd4 <DMA_CheckFifoParam+0x28>)
 800fcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcd2:	bf00      	nop
 800fcd4:	0800fce5 	.word	0x0800fce5
 800fcd8:	0800fcf7 	.word	0x0800fcf7
 800fcdc:	0800fce5 	.word	0x0800fce5
 800fce0:	0800fd7b 	.word	0x0800fd7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d046      	beq.n	800fd7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fcf4:	e043      	b.n	800fd7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fcfe:	d140      	bne.n	800fd82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800fd00:	2301      	movs	r3, #1
 800fd02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fd04:	e03d      	b.n	800fd82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	699b      	ldr	r3, [r3, #24]
 800fd0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd0e:	d121      	bne.n	800fd54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	2b03      	cmp	r3, #3
 800fd14:	d837      	bhi.n	800fd86 <DMA_CheckFifoParam+0xda>
 800fd16:	a201      	add	r2, pc, #4	; (adr r2, 800fd1c <DMA_CheckFifoParam+0x70>)
 800fd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd1c:	0800fd2d 	.word	0x0800fd2d
 800fd20:	0800fd33 	.word	0x0800fd33
 800fd24:	0800fd2d 	.word	0x0800fd2d
 800fd28:	0800fd45 	.word	0x0800fd45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	73fb      	strb	r3, [r7, #15]
      break;
 800fd30:	e030      	b.n	800fd94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d025      	beq.n	800fd8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fd42:	e022      	b.n	800fd8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fd4c:	d11f      	bne.n	800fd8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800fd4e:	2301      	movs	r3, #1
 800fd50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800fd52:	e01c      	b.n	800fd8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	2b02      	cmp	r3, #2
 800fd58:	d903      	bls.n	800fd62 <DMA_CheckFifoParam+0xb6>
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	2b03      	cmp	r3, #3
 800fd5e:	d003      	beq.n	800fd68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fd60:	e018      	b.n	800fd94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800fd62:	2301      	movs	r3, #1
 800fd64:	73fb      	strb	r3, [r7, #15]
      break;
 800fd66:	e015      	b.n	800fd94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d00e      	beq.n	800fd92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800fd74:	2301      	movs	r3, #1
 800fd76:	73fb      	strb	r3, [r7, #15]
      break;
 800fd78:	e00b      	b.n	800fd92 <DMA_CheckFifoParam+0xe6>
      break;
 800fd7a:	bf00      	nop
 800fd7c:	e00a      	b.n	800fd94 <DMA_CheckFifoParam+0xe8>
      break;
 800fd7e:	bf00      	nop
 800fd80:	e008      	b.n	800fd94 <DMA_CheckFifoParam+0xe8>
      break;
 800fd82:	bf00      	nop
 800fd84:	e006      	b.n	800fd94 <DMA_CheckFifoParam+0xe8>
      break;
 800fd86:	bf00      	nop
 800fd88:	e004      	b.n	800fd94 <DMA_CheckFifoParam+0xe8>
      break;
 800fd8a:	bf00      	nop
 800fd8c:	e002      	b.n	800fd94 <DMA_CheckFifoParam+0xe8>
      break;   
 800fd8e:	bf00      	nop
 800fd90:	e000      	b.n	800fd94 <DMA_CheckFifoParam+0xe8>
      break;
 800fd92:	bf00      	nop
    }
  } 
  
  return status; 
 800fd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3714      	adds	r7, #20
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr
 800fda2:	bf00      	nop

0800fda4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b089      	sub	sp, #36	; 0x24
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fdba:	2300      	movs	r3, #0
 800fdbc:	61fb      	str	r3, [r7, #28]
 800fdbe:	e16b      	b.n	8010098 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	fa02 f303 	lsl.w	r3, r2, r3
 800fdc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	697a      	ldr	r2, [r7, #20]
 800fdd0:	4013      	ands	r3, r2
 800fdd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fdd4:	693a      	ldr	r2, [r7, #16]
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	f040 815a 	bne.w	8010092 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	2b01      	cmp	r3, #1
 800fde4:	d00b      	beq.n	800fdfe <HAL_GPIO_Init+0x5a>
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	2b02      	cmp	r3, #2
 800fdec:	d007      	beq.n	800fdfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fdf2:	2b11      	cmp	r3, #17
 800fdf4:	d003      	beq.n	800fdfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	2b12      	cmp	r3, #18
 800fdfc:	d130      	bne.n	800fe60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	005b      	lsls	r3, r3, #1
 800fe08:	2203      	movs	r2, #3
 800fe0a:	fa02 f303 	lsl.w	r3, r2, r3
 800fe0e:	43db      	mvns	r3, r3
 800fe10:	69ba      	ldr	r2, [r7, #24]
 800fe12:	4013      	ands	r3, r2
 800fe14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	68da      	ldr	r2, [r3, #12]
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	005b      	lsls	r3, r3, #1
 800fe1e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe22:	69ba      	ldr	r2, [r7, #24]
 800fe24:	4313      	orrs	r3, r2
 800fe26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	69ba      	ldr	r2, [r7, #24]
 800fe2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fe34:	2201      	movs	r2, #1
 800fe36:	69fb      	ldr	r3, [r7, #28]
 800fe38:	fa02 f303 	lsl.w	r3, r2, r3
 800fe3c:	43db      	mvns	r3, r3
 800fe3e:	69ba      	ldr	r2, [r7, #24]
 800fe40:	4013      	ands	r3, r2
 800fe42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	091b      	lsrs	r3, r3, #4
 800fe4a:	f003 0201 	and.w	r2, r3, #1
 800fe4e:	69fb      	ldr	r3, [r7, #28]
 800fe50:	fa02 f303 	lsl.w	r3, r2, r3
 800fe54:	69ba      	ldr	r2, [r7, #24]
 800fe56:	4313      	orrs	r3, r2
 800fe58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	69ba      	ldr	r2, [r7, #24]
 800fe5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	005b      	lsls	r3, r3, #1
 800fe6a:	2203      	movs	r2, #3
 800fe6c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe70:	43db      	mvns	r3, r3
 800fe72:	69ba      	ldr	r2, [r7, #24]
 800fe74:	4013      	ands	r3, r2
 800fe76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	689a      	ldr	r2, [r3, #8]
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	005b      	lsls	r3, r3, #1
 800fe80:	fa02 f303 	lsl.w	r3, r2, r3
 800fe84:	69ba      	ldr	r2, [r7, #24]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	69ba      	ldr	r2, [r7, #24]
 800fe8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	2b02      	cmp	r3, #2
 800fe96:	d003      	beq.n	800fea0 <HAL_GPIO_Init+0xfc>
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	2b12      	cmp	r3, #18
 800fe9e:	d123      	bne.n	800fee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	08da      	lsrs	r2, r3, #3
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	3208      	adds	r2, #8
 800fea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	f003 0307 	and.w	r3, r3, #7
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	220f      	movs	r2, #15
 800feb8:	fa02 f303 	lsl.w	r3, r2, r3
 800febc:	43db      	mvns	r3, r3
 800febe:	69ba      	ldr	r2, [r7, #24]
 800fec0:	4013      	ands	r3, r2
 800fec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	691a      	ldr	r2, [r3, #16]
 800fec8:	69fb      	ldr	r3, [r7, #28]
 800feca:	f003 0307 	and.w	r3, r3, #7
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	fa02 f303 	lsl.w	r3, r2, r3
 800fed4:	69ba      	ldr	r2, [r7, #24]
 800fed6:	4313      	orrs	r3, r2
 800fed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	08da      	lsrs	r2, r3, #3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	3208      	adds	r2, #8
 800fee2:	69b9      	ldr	r1, [r7, #24]
 800fee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	005b      	lsls	r3, r3, #1
 800fef2:	2203      	movs	r2, #3
 800fef4:	fa02 f303 	lsl.w	r3, r2, r3
 800fef8:	43db      	mvns	r3, r3
 800fefa:	69ba      	ldr	r2, [r7, #24]
 800fefc:	4013      	ands	r3, r2
 800fefe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	f003 0203 	and.w	r2, r3, #3
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	005b      	lsls	r3, r3, #1
 800ff0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff10:	69ba      	ldr	r2, [r7, #24]
 800ff12:	4313      	orrs	r3, r2
 800ff14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	69ba      	ldr	r2, [r7, #24]
 800ff1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	f000 80b4 	beq.w	8010092 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	60fb      	str	r3, [r7, #12]
 800ff2e:	4b60      	ldr	r3, [pc, #384]	; (80100b0 <HAL_GPIO_Init+0x30c>)
 800ff30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff32:	4a5f      	ldr	r2, [pc, #380]	; (80100b0 <HAL_GPIO_Init+0x30c>)
 800ff34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ff38:	6453      	str	r3, [r2, #68]	; 0x44
 800ff3a:	4b5d      	ldr	r3, [pc, #372]	; (80100b0 <HAL_GPIO_Init+0x30c>)
 800ff3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff42:	60fb      	str	r3, [r7, #12]
 800ff44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ff46:	4a5b      	ldr	r2, [pc, #364]	; (80100b4 <HAL_GPIO_Init+0x310>)
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	089b      	lsrs	r3, r3, #2
 800ff4c:	3302      	adds	r3, #2
 800ff4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	f003 0303 	and.w	r3, r3, #3
 800ff5a:	009b      	lsls	r3, r3, #2
 800ff5c:	220f      	movs	r2, #15
 800ff5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ff62:	43db      	mvns	r3, r3
 800ff64:	69ba      	ldr	r2, [r7, #24]
 800ff66:	4013      	ands	r3, r2
 800ff68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4a52      	ldr	r2, [pc, #328]	; (80100b8 <HAL_GPIO_Init+0x314>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d02b      	beq.n	800ffca <HAL_GPIO_Init+0x226>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	4a51      	ldr	r2, [pc, #324]	; (80100bc <HAL_GPIO_Init+0x318>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d025      	beq.n	800ffc6 <HAL_GPIO_Init+0x222>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	4a50      	ldr	r2, [pc, #320]	; (80100c0 <HAL_GPIO_Init+0x31c>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d01f      	beq.n	800ffc2 <HAL_GPIO_Init+0x21e>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	4a4f      	ldr	r2, [pc, #316]	; (80100c4 <HAL_GPIO_Init+0x320>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d019      	beq.n	800ffbe <HAL_GPIO_Init+0x21a>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4a4e      	ldr	r2, [pc, #312]	; (80100c8 <HAL_GPIO_Init+0x324>)
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d013      	beq.n	800ffba <HAL_GPIO_Init+0x216>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	4a4d      	ldr	r2, [pc, #308]	; (80100cc <HAL_GPIO_Init+0x328>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d00d      	beq.n	800ffb6 <HAL_GPIO_Init+0x212>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4a4c      	ldr	r2, [pc, #304]	; (80100d0 <HAL_GPIO_Init+0x32c>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d007      	beq.n	800ffb2 <HAL_GPIO_Init+0x20e>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	4a4b      	ldr	r2, [pc, #300]	; (80100d4 <HAL_GPIO_Init+0x330>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d101      	bne.n	800ffae <HAL_GPIO_Init+0x20a>
 800ffaa:	2307      	movs	r3, #7
 800ffac:	e00e      	b.n	800ffcc <HAL_GPIO_Init+0x228>
 800ffae:	2308      	movs	r3, #8
 800ffb0:	e00c      	b.n	800ffcc <HAL_GPIO_Init+0x228>
 800ffb2:	2306      	movs	r3, #6
 800ffb4:	e00a      	b.n	800ffcc <HAL_GPIO_Init+0x228>
 800ffb6:	2305      	movs	r3, #5
 800ffb8:	e008      	b.n	800ffcc <HAL_GPIO_Init+0x228>
 800ffba:	2304      	movs	r3, #4
 800ffbc:	e006      	b.n	800ffcc <HAL_GPIO_Init+0x228>
 800ffbe:	2303      	movs	r3, #3
 800ffc0:	e004      	b.n	800ffcc <HAL_GPIO_Init+0x228>
 800ffc2:	2302      	movs	r3, #2
 800ffc4:	e002      	b.n	800ffcc <HAL_GPIO_Init+0x228>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	e000      	b.n	800ffcc <HAL_GPIO_Init+0x228>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	69fa      	ldr	r2, [r7, #28]
 800ffce:	f002 0203 	and.w	r2, r2, #3
 800ffd2:	0092      	lsls	r2, r2, #2
 800ffd4:	4093      	lsls	r3, r2
 800ffd6:	69ba      	ldr	r2, [r7, #24]
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ffdc:	4935      	ldr	r1, [pc, #212]	; (80100b4 <HAL_GPIO_Init+0x310>)
 800ffde:	69fb      	ldr	r3, [r7, #28]
 800ffe0:	089b      	lsrs	r3, r3, #2
 800ffe2:	3302      	adds	r3, #2
 800ffe4:	69ba      	ldr	r2, [r7, #24]
 800ffe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ffea:	4b3b      	ldr	r3, [pc, #236]	; (80100d8 <HAL_GPIO_Init+0x334>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	43db      	mvns	r3, r3
 800fff4:	69ba      	ldr	r2, [r7, #24]
 800fff6:	4013      	ands	r3, r2
 800fff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010002:	2b00      	cmp	r3, #0
 8010004:	d003      	beq.n	801000e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8010006:	69ba      	ldr	r2, [r7, #24]
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	4313      	orrs	r3, r2
 801000c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801000e:	4a32      	ldr	r2, [pc, #200]	; (80100d8 <HAL_GPIO_Init+0x334>)
 8010010:	69bb      	ldr	r3, [r7, #24]
 8010012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010014:	4b30      	ldr	r3, [pc, #192]	; (80100d8 <HAL_GPIO_Init+0x334>)
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	43db      	mvns	r3, r3
 801001e:	69ba      	ldr	r2, [r7, #24]
 8010020:	4013      	ands	r3, r2
 8010022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801002c:	2b00      	cmp	r3, #0
 801002e:	d003      	beq.n	8010038 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010030:	69ba      	ldr	r2, [r7, #24]
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	4313      	orrs	r3, r2
 8010036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010038:	4a27      	ldr	r2, [pc, #156]	; (80100d8 <HAL_GPIO_Init+0x334>)
 801003a:	69bb      	ldr	r3, [r7, #24]
 801003c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801003e:	4b26      	ldr	r3, [pc, #152]	; (80100d8 <HAL_GPIO_Init+0x334>)
 8010040:	689b      	ldr	r3, [r3, #8]
 8010042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	43db      	mvns	r3, r3
 8010048:	69ba      	ldr	r2, [r7, #24]
 801004a:	4013      	ands	r3, r2
 801004c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010056:	2b00      	cmp	r3, #0
 8010058:	d003      	beq.n	8010062 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801005a:	69ba      	ldr	r2, [r7, #24]
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	4313      	orrs	r3, r2
 8010060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010062:	4a1d      	ldr	r2, [pc, #116]	; (80100d8 <HAL_GPIO_Init+0x334>)
 8010064:	69bb      	ldr	r3, [r7, #24]
 8010066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010068:	4b1b      	ldr	r3, [pc, #108]	; (80100d8 <HAL_GPIO_Init+0x334>)
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	43db      	mvns	r3, r3
 8010072:	69ba      	ldr	r2, [r7, #24]
 8010074:	4013      	ands	r3, r2
 8010076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010080:	2b00      	cmp	r3, #0
 8010082:	d003      	beq.n	801008c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8010084:	69ba      	ldr	r2, [r7, #24]
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	4313      	orrs	r3, r2
 801008a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801008c:	4a12      	ldr	r2, [pc, #72]	; (80100d8 <HAL_GPIO_Init+0x334>)
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010092:	69fb      	ldr	r3, [r7, #28]
 8010094:	3301      	adds	r3, #1
 8010096:	61fb      	str	r3, [r7, #28]
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	2b0f      	cmp	r3, #15
 801009c:	f67f ae90 	bls.w	800fdc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80100a0:	bf00      	nop
 80100a2:	bf00      	nop
 80100a4:	3724      	adds	r7, #36	; 0x24
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	40023800 	.word	0x40023800
 80100b4:	40013800 	.word	0x40013800
 80100b8:	40020000 	.word	0x40020000
 80100bc:	40020400 	.word	0x40020400
 80100c0:	40020800 	.word	0x40020800
 80100c4:	40020c00 	.word	0x40020c00
 80100c8:	40021000 	.word	0x40021000
 80100cc:	40021400 	.word	0x40021400
 80100d0:	40021800 	.word	0x40021800
 80100d4:	40021c00 	.word	0x40021c00
 80100d8:	40013c00 	.word	0x40013c00

080100dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80100dc:	b480      	push	{r7}
 80100de:	b087      	sub	sp, #28
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80100e6:	2300      	movs	r3, #0
 80100e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80100ea:	2300      	movs	r3, #0
 80100ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80100ee:	2300      	movs	r3, #0
 80100f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80100f2:	2300      	movs	r3, #0
 80100f4:	617b      	str	r3, [r7, #20]
 80100f6:	e0cd      	b.n	8010294 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80100f8:	2201      	movs	r2, #1
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010100:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8010102:	683a      	ldr	r2, [r7, #0]
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	4013      	ands	r3, r2
 8010108:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	429a      	cmp	r2, r3
 8010110:	f040 80bd 	bne.w	801028e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8010114:	4a65      	ldr	r2, [pc, #404]	; (80102ac <HAL_GPIO_DeInit+0x1d0>)
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	089b      	lsrs	r3, r3, #2
 801011a:	3302      	adds	r3, #2
 801011c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010120:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	f003 0303 	and.w	r3, r3, #3
 8010128:	009b      	lsls	r3, r3, #2
 801012a:	220f      	movs	r2, #15
 801012c:	fa02 f303 	lsl.w	r3, r2, r3
 8010130:	68ba      	ldr	r2, [r7, #8]
 8010132:	4013      	ands	r3, r2
 8010134:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4a5d      	ldr	r2, [pc, #372]	; (80102b0 <HAL_GPIO_DeInit+0x1d4>)
 801013a:	4293      	cmp	r3, r2
 801013c:	d02b      	beq.n	8010196 <HAL_GPIO_DeInit+0xba>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4a5c      	ldr	r2, [pc, #368]	; (80102b4 <HAL_GPIO_DeInit+0x1d8>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d025      	beq.n	8010192 <HAL_GPIO_DeInit+0xb6>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	4a5b      	ldr	r2, [pc, #364]	; (80102b8 <HAL_GPIO_DeInit+0x1dc>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d01f      	beq.n	801018e <HAL_GPIO_DeInit+0xb2>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	4a5a      	ldr	r2, [pc, #360]	; (80102bc <HAL_GPIO_DeInit+0x1e0>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d019      	beq.n	801018a <HAL_GPIO_DeInit+0xae>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4a59      	ldr	r2, [pc, #356]	; (80102c0 <HAL_GPIO_DeInit+0x1e4>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d013      	beq.n	8010186 <HAL_GPIO_DeInit+0xaa>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	4a58      	ldr	r2, [pc, #352]	; (80102c4 <HAL_GPIO_DeInit+0x1e8>)
 8010162:	4293      	cmp	r3, r2
 8010164:	d00d      	beq.n	8010182 <HAL_GPIO_DeInit+0xa6>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	4a57      	ldr	r2, [pc, #348]	; (80102c8 <HAL_GPIO_DeInit+0x1ec>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d007      	beq.n	801017e <HAL_GPIO_DeInit+0xa2>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4a56      	ldr	r2, [pc, #344]	; (80102cc <HAL_GPIO_DeInit+0x1f0>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d101      	bne.n	801017a <HAL_GPIO_DeInit+0x9e>
 8010176:	2307      	movs	r3, #7
 8010178:	e00e      	b.n	8010198 <HAL_GPIO_DeInit+0xbc>
 801017a:	2308      	movs	r3, #8
 801017c:	e00c      	b.n	8010198 <HAL_GPIO_DeInit+0xbc>
 801017e:	2306      	movs	r3, #6
 8010180:	e00a      	b.n	8010198 <HAL_GPIO_DeInit+0xbc>
 8010182:	2305      	movs	r3, #5
 8010184:	e008      	b.n	8010198 <HAL_GPIO_DeInit+0xbc>
 8010186:	2304      	movs	r3, #4
 8010188:	e006      	b.n	8010198 <HAL_GPIO_DeInit+0xbc>
 801018a:	2303      	movs	r3, #3
 801018c:	e004      	b.n	8010198 <HAL_GPIO_DeInit+0xbc>
 801018e:	2302      	movs	r3, #2
 8010190:	e002      	b.n	8010198 <HAL_GPIO_DeInit+0xbc>
 8010192:	2301      	movs	r3, #1
 8010194:	e000      	b.n	8010198 <HAL_GPIO_DeInit+0xbc>
 8010196:	2300      	movs	r3, #0
 8010198:	697a      	ldr	r2, [r7, #20]
 801019a:	f002 0203 	and.w	r2, r2, #3
 801019e:	0092      	lsls	r2, r2, #2
 80101a0:	4093      	lsls	r3, r2
 80101a2:	68ba      	ldr	r2, [r7, #8]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d132      	bne.n	801020e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80101a8:	4b49      	ldr	r3, [pc, #292]	; (80102d0 <HAL_GPIO_DeInit+0x1f4>)
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	43db      	mvns	r3, r3
 80101b0:	4947      	ldr	r1, [pc, #284]	; (80102d0 <HAL_GPIO_DeInit+0x1f4>)
 80101b2:	4013      	ands	r3, r2
 80101b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80101b6:	4b46      	ldr	r3, [pc, #280]	; (80102d0 <HAL_GPIO_DeInit+0x1f4>)
 80101b8:	685a      	ldr	r2, [r3, #4]
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	43db      	mvns	r3, r3
 80101be:	4944      	ldr	r1, [pc, #272]	; (80102d0 <HAL_GPIO_DeInit+0x1f4>)
 80101c0:	4013      	ands	r3, r2
 80101c2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80101c4:	4b42      	ldr	r3, [pc, #264]	; (80102d0 <HAL_GPIO_DeInit+0x1f4>)
 80101c6:	689a      	ldr	r2, [r3, #8]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	43db      	mvns	r3, r3
 80101cc:	4940      	ldr	r1, [pc, #256]	; (80102d0 <HAL_GPIO_DeInit+0x1f4>)
 80101ce:	4013      	ands	r3, r2
 80101d0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80101d2:	4b3f      	ldr	r3, [pc, #252]	; (80102d0 <HAL_GPIO_DeInit+0x1f4>)
 80101d4:	68da      	ldr	r2, [r3, #12]
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	43db      	mvns	r3, r3
 80101da:	493d      	ldr	r1, [pc, #244]	; (80102d0 <HAL_GPIO_DeInit+0x1f4>)
 80101dc:	4013      	ands	r3, r2
 80101de:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	f003 0303 	and.w	r3, r3, #3
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	220f      	movs	r2, #15
 80101ea:	fa02 f303 	lsl.w	r3, r2, r3
 80101ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80101f0:	4a2e      	ldr	r2, [pc, #184]	; (80102ac <HAL_GPIO_DeInit+0x1d0>)
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	089b      	lsrs	r3, r3, #2
 80101f6:	3302      	adds	r3, #2
 80101f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	43da      	mvns	r2, r3
 8010200:	482a      	ldr	r0, [pc, #168]	; (80102ac <HAL_GPIO_DeInit+0x1d0>)
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	089b      	lsrs	r3, r3, #2
 8010206:	400a      	ands	r2, r1
 8010208:	3302      	adds	r3, #2
 801020a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681a      	ldr	r2, [r3, #0]
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	005b      	lsls	r3, r3, #1
 8010216:	2103      	movs	r1, #3
 8010218:	fa01 f303 	lsl.w	r3, r1, r3
 801021c:	43db      	mvns	r3, r3
 801021e:	401a      	ands	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	08da      	lsrs	r2, r3, #3
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	3208      	adds	r2, #8
 801022c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	f003 0307 	and.w	r3, r3, #7
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	220f      	movs	r2, #15
 801023a:	fa02 f303 	lsl.w	r3, r2, r3
 801023e:	43db      	mvns	r3, r3
 8010240:	697a      	ldr	r2, [r7, #20]
 8010242:	08d2      	lsrs	r2, r2, #3
 8010244:	4019      	ands	r1, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	3208      	adds	r2, #8
 801024a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	68da      	ldr	r2, [r3, #12]
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	005b      	lsls	r3, r3, #1
 8010256:	2103      	movs	r1, #3
 8010258:	fa01 f303 	lsl.w	r3, r1, r3
 801025c:	43db      	mvns	r3, r3
 801025e:	401a      	ands	r2, r3
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	685a      	ldr	r2, [r3, #4]
 8010268:	2101      	movs	r1, #1
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	fa01 f303 	lsl.w	r3, r1, r3
 8010270:	43db      	mvns	r3, r3
 8010272:	401a      	ands	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	689a      	ldr	r2, [r3, #8]
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	005b      	lsls	r3, r3, #1
 8010280:	2103      	movs	r1, #3
 8010282:	fa01 f303 	lsl.w	r3, r1, r3
 8010286:	43db      	mvns	r3, r3
 8010288:	401a      	ands	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	3301      	adds	r3, #1
 8010292:	617b      	str	r3, [r7, #20]
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	2b0f      	cmp	r3, #15
 8010298:	f67f af2e 	bls.w	80100f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801029c:	bf00      	nop
 801029e:	bf00      	nop
 80102a0:	371c      	adds	r7, #28
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr
 80102aa:	bf00      	nop
 80102ac:	40013800 	.word	0x40013800
 80102b0:	40020000 	.word	0x40020000
 80102b4:	40020400 	.word	0x40020400
 80102b8:	40020800 	.word	0x40020800
 80102bc:	40020c00 	.word	0x40020c00
 80102c0:	40021000 	.word	0x40021000
 80102c4:	40021400 	.word	0x40021400
 80102c8:	40021800 	.word	0x40021800
 80102cc:	40021c00 	.word	0x40021c00
 80102d0:	40013c00 	.word	0x40013c00

080102d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	460b      	mov	r3, r1
 80102de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	691a      	ldr	r2, [r3, #16]
 80102e4:	887b      	ldrh	r3, [r7, #2]
 80102e6:	4013      	ands	r3, r2
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d002      	beq.n	80102f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80102ec:	2301      	movs	r3, #1
 80102ee:	73fb      	strb	r3, [r7, #15]
 80102f0:	e001      	b.n	80102f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80102f2:	2300      	movs	r3, #0
 80102f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80102f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3714      	adds	r7, #20
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr

08010304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	460b      	mov	r3, r1
 801030e:	807b      	strh	r3, [r7, #2]
 8010310:	4613      	mov	r3, r2
 8010312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010314:	787b      	ldrb	r3, [r7, #1]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d003      	beq.n	8010322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801031a:	887a      	ldrh	r2, [r7, #2]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010320:	e003      	b.n	801032a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010322:	887b      	ldrh	r3, [r7, #2]
 8010324:	041a      	lsls	r2, r3, #16
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	619a      	str	r2, [r3, #24]
}
 801032a:	bf00      	nop
 801032c:	370c      	adds	r7, #12
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr

08010336 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010336:	b480      	push	{r7}
 8010338:	b083      	sub	sp, #12
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
 801033e:	460b      	mov	r3, r1
 8010340:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	695a      	ldr	r2, [r3, #20]
 8010346:	887b      	ldrh	r3, [r7, #2]
 8010348:	401a      	ands	r2, r3
 801034a:	887b      	ldrh	r3, [r7, #2]
 801034c:	429a      	cmp	r2, r3
 801034e:	d104      	bne.n	801035a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8010350:	887b      	ldrh	r3, [r7, #2]
 8010352:	041a      	lsls	r2, r3, #16
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8010358:	e002      	b.n	8010360 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 801035a:	887a      	ldrh	r2, [r7, #2]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	619a      	str	r2, [r3, #24]
}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	4603      	mov	r3, r0
 8010374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010376:	4b08      	ldr	r3, [pc, #32]	; (8010398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010378:	695a      	ldr	r2, [r3, #20]
 801037a:	88fb      	ldrh	r3, [r7, #6]
 801037c:	4013      	ands	r3, r2
 801037e:	2b00      	cmp	r3, #0
 8010380:	d006      	beq.n	8010390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010382:	4a05      	ldr	r2, [pc, #20]	; (8010398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010384:	88fb      	ldrh	r3, [r7, #6]
 8010386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010388:	88fb      	ldrh	r3, [r7, #6]
 801038a:	4618      	mov	r0, r3
 801038c:	f000 f806 	bl	801039c <HAL_GPIO_EXTI_Callback>
  }
}
 8010390:	bf00      	nop
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	40013c00 	.word	0x40013c00

0801039c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	4603      	mov	r3, r0
 80103a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80103a6:	bf00      	nop
 80103a8:	370c      	adds	r7, #12
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr
	...

080103b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b086      	sub	sp, #24
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d101      	bne.n	80103c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80103c2:	2301      	movs	r3, #1
 80103c4:	e25e      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f003 0301 	and.w	r3, r3, #1
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d075      	beq.n	80104be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80103d2:	4b88      	ldr	r3, [pc, #544]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 80103d4:	689b      	ldr	r3, [r3, #8]
 80103d6:	f003 030c 	and.w	r3, r3, #12
 80103da:	2b04      	cmp	r3, #4
 80103dc:	d00c      	beq.n	80103f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80103de:	4b85      	ldr	r3, [pc, #532]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 80103e0:	689b      	ldr	r3, [r3, #8]
 80103e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80103e6:	2b08      	cmp	r3, #8
 80103e8:	d112      	bne.n	8010410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80103ea:	4b82      	ldr	r3, [pc, #520]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80103f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80103f6:	d10b      	bne.n	8010410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80103f8:	4b7e      	ldr	r3, [pc, #504]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010400:	2b00      	cmp	r3, #0
 8010402:	d05b      	beq.n	80104bc <HAL_RCC_OscConfig+0x108>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d157      	bne.n	80104bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801040c:	2301      	movs	r3, #1
 801040e:	e239      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010418:	d106      	bne.n	8010428 <HAL_RCC_OscConfig+0x74>
 801041a:	4b76      	ldr	r3, [pc, #472]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	4a75      	ldr	r2, [pc, #468]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010424:	6013      	str	r3, [r2, #0]
 8010426:	e01d      	b.n	8010464 <HAL_RCC_OscConfig+0xb0>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010430:	d10c      	bne.n	801044c <HAL_RCC_OscConfig+0x98>
 8010432:	4b70      	ldr	r3, [pc, #448]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4a6f      	ldr	r2, [pc, #444]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801043c:	6013      	str	r3, [r2, #0]
 801043e:	4b6d      	ldr	r3, [pc, #436]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	4a6c      	ldr	r2, [pc, #432]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010448:	6013      	str	r3, [r2, #0]
 801044a:	e00b      	b.n	8010464 <HAL_RCC_OscConfig+0xb0>
 801044c:	4b69      	ldr	r3, [pc, #420]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	4a68      	ldr	r2, [pc, #416]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010456:	6013      	str	r3, [r2, #0]
 8010458:	4b66      	ldr	r3, [pc, #408]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4a65      	ldr	r2, [pc, #404]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 801045e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	685b      	ldr	r3, [r3, #4]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d013      	beq.n	8010494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801046c:	f7fe f892 	bl	800e594 <HAL_GetTick>
 8010470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010472:	e008      	b.n	8010486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010474:	f7fe f88e 	bl	800e594 <HAL_GetTick>
 8010478:	4602      	mov	r2, r0
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	1ad3      	subs	r3, r2, r3
 801047e:	2b64      	cmp	r3, #100	; 0x64
 8010480:	d901      	bls.n	8010486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8010482:	2303      	movs	r3, #3
 8010484:	e1fe      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010486:	4b5b      	ldr	r3, [pc, #364]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801048e:	2b00      	cmp	r3, #0
 8010490:	d0f0      	beq.n	8010474 <HAL_RCC_OscConfig+0xc0>
 8010492:	e014      	b.n	80104be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010494:	f7fe f87e 	bl	800e594 <HAL_GetTick>
 8010498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801049a:	e008      	b.n	80104ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801049c:	f7fe f87a 	bl	800e594 <HAL_GetTick>
 80104a0:	4602      	mov	r2, r0
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	1ad3      	subs	r3, r2, r3
 80104a6:	2b64      	cmp	r3, #100	; 0x64
 80104a8:	d901      	bls.n	80104ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80104aa:	2303      	movs	r3, #3
 80104ac:	e1ea      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80104ae:	4b51      	ldr	r3, [pc, #324]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d1f0      	bne.n	801049c <HAL_RCC_OscConfig+0xe8>
 80104ba:	e000      	b.n	80104be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80104bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f003 0302 	and.w	r3, r3, #2
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d063      	beq.n	8010592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80104ca:	4b4a      	ldr	r3, [pc, #296]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	f003 030c 	and.w	r3, r3, #12
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d00b      	beq.n	80104ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80104d6:	4b47      	ldr	r3, [pc, #284]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80104de:	2b08      	cmp	r3, #8
 80104e0:	d11c      	bne.n	801051c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80104e2:	4b44      	ldr	r3, [pc, #272]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d116      	bne.n	801051c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80104ee:	4b41      	ldr	r3, [pc, #260]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f003 0302 	and.w	r3, r3, #2
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d005      	beq.n	8010506 <HAL_RCC_OscConfig+0x152>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	2b01      	cmp	r3, #1
 8010500:	d001      	beq.n	8010506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8010502:	2301      	movs	r3, #1
 8010504:	e1be      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010506:	4b3b      	ldr	r3, [pc, #236]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	691b      	ldr	r3, [r3, #16]
 8010512:	00db      	lsls	r3, r3, #3
 8010514:	4937      	ldr	r1, [pc, #220]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010516:	4313      	orrs	r3, r2
 8010518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801051a:	e03a      	b.n	8010592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d020      	beq.n	8010566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010524:	4b34      	ldr	r3, [pc, #208]	; (80105f8 <HAL_RCC_OscConfig+0x244>)
 8010526:	2201      	movs	r2, #1
 8010528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801052a:	f7fe f833 	bl	800e594 <HAL_GetTick>
 801052e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010530:	e008      	b.n	8010544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010532:	f7fe f82f 	bl	800e594 <HAL_GetTick>
 8010536:	4602      	mov	r2, r0
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	1ad3      	subs	r3, r2, r3
 801053c:	2b02      	cmp	r3, #2
 801053e:	d901      	bls.n	8010544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010540:	2303      	movs	r3, #3
 8010542:	e19f      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010544:	4b2b      	ldr	r3, [pc, #172]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f003 0302 	and.w	r3, r3, #2
 801054c:	2b00      	cmp	r3, #0
 801054e:	d0f0      	beq.n	8010532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010550:	4b28      	ldr	r3, [pc, #160]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	691b      	ldr	r3, [r3, #16]
 801055c:	00db      	lsls	r3, r3, #3
 801055e:	4925      	ldr	r1, [pc, #148]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010560:	4313      	orrs	r3, r2
 8010562:	600b      	str	r3, [r1, #0]
 8010564:	e015      	b.n	8010592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010566:	4b24      	ldr	r3, [pc, #144]	; (80105f8 <HAL_RCC_OscConfig+0x244>)
 8010568:	2200      	movs	r2, #0
 801056a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801056c:	f7fe f812 	bl	800e594 <HAL_GetTick>
 8010570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010572:	e008      	b.n	8010586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010574:	f7fe f80e 	bl	800e594 <HAL_GetTick>
 8010578:	4602      	mov	r2, r0
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	1ad3      	subs	r3, r2, r3
 801057e:	2b02      	cmp	r3, #2
 8010580:	d901      	bls.n	8010586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8010582:	2303      	movs	r3, #3
 8010584:	e17e      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010586:	4b1b      	ldr	r3, [pc, #108]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f003 0302 	and.w	r3, r3, #2
 801058e:	2b00      	cmp	r3, #0
 8010590:	d1f0      	bne.n	8010574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f003 0308 	and.w	r3, r3, #8
 801059a:	2b00      	cmp	r3, #0
 801059c:	d036      	beq.n	801060c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	695b      	ldr	r3, [r3, #20]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d016      	beq.n	80105d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80105a6:	4b15      	ldr	r3, [pc, #84]	; (80105fc <HAL_RCC_OscConfig+0x248>)
 80105a8:	2201      	movs	r2, #1
 80105aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80105ac:	f7fd fff2 	bl	800e594 <HAL_GetTick>
 80105b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80105b2:	e008      	b.n	80105c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80105b4:	f7fd ffee 	bl	800e594 <HAL_GetTick>
 80105b8:	4602      	mov	r2, r0
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	1ad3      	subs	r3, r2, r3
 80105be:	2b02      	cmp	r3, #2
 80105c0:	d901      	bls.n	80105c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80105c2:	2303      	movs	r3, #3
 80105c4:	e15e      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80105c6:	4b0b      	ldr	r3, [pc, #44]	; (80105f4 <HAL_RCC_OscConfig+0x240>)
 80105c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105ca:	f003 0302 	and.w	r3, r3, #2
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d0f0      	beq.n	80105b4 <HAL_RCC_OscConfig+0x200>
 80105d2:	e01b      	b.n	801060c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80105d4:	4b09      	ldr	r3, [pc, #36]	; (80105fc <HAL_RCC_OscConfig+0x248>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80105da:	f7fd ffdb 	bl	800e594 <HAL_GetTick>
 80105de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80105e0:	e00e      	b.n	8010600 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80105e2:	f7fd ffd7 	bl	800e594 <HAL_GetTick>
 80105e6:	4602      	mov	r2, r0
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	1ad3      	subs	r3, r2, r3
 80105ec:	2b02      	cmp	r3, #2
 80105ee:	d907      	bls.n	8010600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80105f0:	2303      	movs	r3, #3
 80105f2:	e147      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
 80105f4:	40023800 	.word	0x40023800
 80105f8:	42470000 	.word	0x42470000
 80105fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010600:	4b88      	ldr	r3, [pc, #544]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 8010602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010604:	f003 0302 	and.w	r3, r3, #2
 8010608:	2b00      	cmp	r3, #0
 801060a:	d1ea      	bne.n	80105e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f003 0304 	and.w	r3, r3, #4
 8010614:	2b00      	cmp	r3, #0
 8010616:	f000 8097 	beq.w	8010748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801061a:	2300      	movs	r3, #0
 801061c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801061e:	4b81      	ldr	r3, [pc, #516]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 8010620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010626:	2b00      	cmp	r3, #0
 8010628:	d10f      	bne.n	801064a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801062a:	2300      	movs	r3, #0
 801062c:	60bb      	str	r3, [r7, #8]
 801062e:	4b7d      	ldr	r3, [pc, #500]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 8010630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010632:	4a7c      	ldr	r2, [pc, #496]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 8010634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010638:	6413      	str	r3, [r2, #64]	; 0x40
 801063a:	4b7a      	ldr	r3, [pc, #488]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 801063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010642:	60bb      	str	r3, [r7, #8]
 8010644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010646:	2301      	movs	r3, #1
 8010648:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801064a:	4b77      	ldr	r3, [pc, #476]	; (8010828 <HAL_RCC_OscConfig+0x474>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010652:	2b00      	cmp	r3, #0
 8010654:	d118      	bne.n	8010688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010656:	4b74      	ldr	r3, [pc, #464]	; (8010828 <HAL_RCC_OscConfig+0x474>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	4a73      	ldr	r2, [pc, #460]	; (8010828 <HAL_RCC_OscConfig+0x474>)
 801065c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010662:	f7fd ff97 	bl	800e594 <HAL_GetTick>
 8010666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010668:	e008      	b.n	801067c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801066a:	f7fd ff93 	bl	800e594 <HAL_GetTick>
 801066e:	4602      	mov	r2, r0
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	1ad3      	subs	r3, r2, r3
 8010674:	2b02      	cmp	r3, #2
 8010676:	d901      	bls.n	801067c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8010678:	2303      	movs	r3, #3
 801067a:	e103      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801067c:	4b6a      	ldr	r3, [pc, #424]	; (8010828 <HAL_RCC_OscConfig+0x474>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010684:	2b00      	cmp	r3, #0
 8010686:	d0f0      	beq.n	801066a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	689b      	ldr	r3, [r3, #8]
 801068c:	2b01      	cmp	r3, #1
 801068e:	d106      	bne.n	801069e <HAL_RCC_OscConfig+0x2ea>
 8010690:	4b64      	ldr	r3, [pc, #400]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 8010692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010694:	4a63      	ldr	r2, [pc, #396]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 8010696:	f043 0301 	orr.w	r3, r3, #1
 801069a:	6713      	str	r3, [r2, #112]	; 0x70
 801069c:	e01c      	b.n	80106d8 <HAL_RCC_OscConfig+0x324>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	689b      	ldr	r3, [r3, #8]
 80106a2:	2b05      	cmp	r3, #5
 80106a4:	d10c      	bne.n	80106c0 <HAL_RCC_OscConfig+0x30c>
 80106a6:	4b5f      	ldr	r3, [pc, #380]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 80106a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106aa:	4a5e      	ldr	r2, [pc, #376]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 80106ac:	f043 0304 	orr.w	r3, r3, #4
 80106b0:	6713      	str	r3, [r2, #112]	; 0x70
 80106b2:	4b5c      	ldr	r3, [pc, #368]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 80106b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106b6:	4a5b      	ldr	r2, [pc, #364]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 80106b8:	f043 0301 	orr.w	r3, r3, #1
 80106bc:	6713      	str	r3, [r2, #112]	; 0x70
 80106be:	e00b      	b.n	80106d8 <HAL_RCC_OscConfig+0x324>
 80106c0:	4b58      	ldr	r3, [pc, #352]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 80106c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106c4:	4a57      	ldr	r2, [pc, #348]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 80106c6:	f023 0301 	bic.w	r3, r3, #1
 80106ca:	6713      	str	r3, [r2, #112]	; 0x70
 80106cc:	4b55      	ldr	r3, [pc, #340]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 80106ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106d0:	4a54      	ldr	r2, [pc, #336]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 80106d2:	f023 0304 	bic.w	r3, r3, #4
 80106d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	689b      	ldr	r3, [r3, #8]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d015      	beq.n	801070c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80106e0:	f7fd ff58 	bl	800e594 <HAL_GetTick>
 80106e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80106e6:	e00a      	b.n	80106fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80106e8:	f7fd ff54 	bl	800e594 <HAL_GetTick>
 80106ec:	4602      	mov	r2, r0
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80106f6:	4293      	cmp	r3, r2
 80106f8:	d901      	bls.n	80106fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80106fa:	2303      	movs	r3, #3
 80106fc:	e0c2      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80106fe:	4b49      	ldr	r3, [pc, #292]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 8010700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010702:	f003 0302 	and.w	r3, r3, #2
 8010706:	2b00      	cmp	r3, #0
 8010708:	d0ee      	beq.n	80106e8 <HAL_RCC_OscConfig+0x334>
 801070a:	e014      	b.n	8010736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801070c:	f7fd ff42 	bl	800e594 <HAL_GetTick>
 8010710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010712:	e00a      	b.n	801072a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010714:	f7fd ff3e 	bl	800e594 <HAL_GetTick>
 8010718:	4602      	mov	r2, r0
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	1ad3      	subs	r3, r2, r3
 801071e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010722:	4293      	cmp	r3, r2
 8010724:	d901      	bls.n	801072a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8010726:	2303      	movs	r3, #3
 8010728:	e0ac      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801072a:	4b3e      	ldr	r3, [pc, #248]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 801072c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801072e:	f003 0302 	and.w	r3, r3, #2
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1ee      	bne.n	8010714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010736:	7dfb      	ldrb	r3, [r7, #23]
 8010738:	2b01      	cmp	r3, #1
 801073a:	d105      	bne.n	8010748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801073c:	4b39      	ldr	r3, [pc, #228]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 801073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010740:	4a38      	ldr	r2, [pc, #224]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 8010742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010746:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	699b      	ldr	r3, [r3, #24]
 801074c:	2b00      	cmp	r3, #0
 801074e:	f000 8098 	beq.w	8010882 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010752:	4b34      	ldr	r3, [pc, #208]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 8010754:	689b      	ldr	r3, [r3, #8]
 8010756:	f003 030c 	and.w	r3, r3, #12
 801075a:	2b08      	cmp	r3, #8
 801075c:	d05c      	beq.n	8010818 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	699b      	ldr	r3, [r3, #24]
 8010762:	2b02      	cmp	r3, #2
 8010764:	d141      	bne.n	80107ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010766:	4b31      	ldr	r3, [pc, #196]	; (801082c <HAL_RCC_OscConfig+0x478>)
 8010768:	2200      	movs	r2, #0
 801076a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801076c:	f7fd ff12 	bl	800e594 <HAL_GetTick>
 8010770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010772:	e008      	b.n	8010786 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010774:	f7fd ff0e 	bl	800e594 <HAL_GetTick>
 8010778:	4602      	mov	r2, r0
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	1ad3      	subs	r3, r2, r3
 801077e:	2b02      	cmp	r3, #2
 8010780:	d901      	bls.n	8010786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8010782:	2303      	movs	r3, #3
 8010784:	e07e      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010786:	4b27      	ldr	r3, [pc, #156]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801078e:	2b00      	cmp	r3, #0
 8010790:	d1f0      	bne.n	8010774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	69da      	ldr	r2, [r3, #28]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6a1b      	ldr	r3, [r3, #32]
 801079a:	431a      	orrs	r2, r3
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a0:	019b      	lsls	r3, r3, #6
 80107a2:	431a      	orrs	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107a8:	085b      	lsrs	r3, r3, #1
 80107aa:	3b01      	subs	r3, #1
 80107ac:	041b      	lsls	r3, r3, #16
 80107ae:	431a      	orrs	r2, r3
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b4:	061b      	lsls	r3, r3, #24
 80107b6:	491b      	ldr	r1, [pc, #108]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 80107b8:	4313      	orrs	r3, r2
 80107ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80107bc:	4b1b      	ldr	r3, [pc, #108]	; (801082c <HAL_RCC_OscConfig+0x478>)
 80107be:	2201      	movs	r2, #1
 80107c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80107c2:	f7fd fee7 	bl	800e594 <HAL_GetTick>
 80107c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80107c8:	e008      	b.n	80107dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80107ca:	f7fd fee3 	bl	800e594 <HAL_GetTick>
 80107ce:	4602      	mov	r2, r0
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	1ad3      	subs	r3, r2, r3
 80107d4:	2b02      	cmp	r3, #2
 80107d6:	d901      	bls.n	80107dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80107d8:	2303      	movs	r3, #3
 80107da:	e053      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80107dc:	4b11      	ldr	r3, [pc, #68]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d0f0      	beq.n	80107ca <HAL_RCC_OscConfig+0x416>
 80107e8:	e04b      	b.n	8010882 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80107ea:	4b10      	ldr	r3, [pc, #64]	; (801082c <HAL_RCC_OscConfig+0x478>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80107f0:	f7fd fed0 	bl	800e594 <HAL_GetTick>
 80107f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80107f6:	e008      	b.n	801080a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80107f8:	f7fd fecc 	bl	800e594 <HAL_GetTick>
 80107fc:	4602      	mov	r2, r0
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	1ad3      	subs	r3, r2, r3
 8010802:	2b02      	cmp	r3, #2
 8010804:	d901      	bls.n	801080a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8010806:	2303      	movs	r3, #3
 8010808:	e03c      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801080a:	4b06      	ldr	r3, [pc, #24]	; (8010824 <HAL_RCC_OscConfig+0x470>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010812:	2b00      	cmp	r3, #0
 8010814:	d1f0      	bne.n	80107f8 <HAL_RCC_OscConfig+0x444>
 8010816:	e034      	b.n	8010882 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	699b      	ldr	r3, [r3, #24]
 801081c:	2b01      	cmp	r3, #1
 801081e:	d107      	bne.n	8010830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8010820:	2301      	movs	r3, #1
 8010822:	e02f      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
 8010824:	40023800 	.word	0x40023800
 8010828:	40007000 	.word	0x40007000
 801082c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010830:	4b16      	ldr	r3, [pc, #88]	; (801088c <HAL_RCC_OscConfig+0x4d8>)
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	69db      	ldr	r3, [r3, #28]
 8010840:	429a      	cmp	r2, r3
 8010842:	d11c      	bne.n	801087e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801084e:	429a      	cmp	r2, r3
 8010850:	d115      	bne.n	801087e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010852:	68fa      	ldr	r2, [r7, #12]
 8010854:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010858:	4013      	ands	r3, r2
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801085e:	4293      	cmp	r3, r2
 8010860:	d10d      	bne.n	801087e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801086c:	429a      	cmp	r2, r3
 801086e:	d106      	bne.n	801087e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801087a:	429a      	cmp	r2, r3
 801087c:	d001      	beq.n	8010882 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 801087e:	2301      	movs	r3, #1
 8010880:	e000      	b.n	8010884 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8010882:	2300      	movs	r3, #0
}
 8010884:	4618      	mov	r0, r3
 8010886:	3718      	adds	r7, #24
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	40023800 	.word	0x40023800

08010890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d101      	bne.n	80108a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80108a0:	2301      	movs	r3, #1
 80108a2:	e0cc      	b.n	8010a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80108a4:	4b68      	ldr	r3, [pc, #416]	; (8010a48 <HAL_RCC_ClockConfig+0x1b8>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	f003 030f 	and.w	r3, r3, #15
 80108ac:	683a      	ldr	r2, [r7, #0]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d90c      	bls.n	80108cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80108b2:	4b65      	ldr	r3, [pc, #404]	; (8010a48 <HAL_RCC_ClockConfig+0x1b8>)
 80108b4:	683a      	ldr	r2, [r7, #0]
 80108b6:	b2d2      	uxtb	r2, r2
 80108b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80108ba:	4b63      	ldr	r3, [pc, #396]	; (8010a48 <HAL_RCC_ClockConfig+0x1b8>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f003 030f 	and.w	r3, r3, #15
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d001      	beq.n	80108cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80108c8:	2301      	movs	r3, #1
 80108ca:	e0b8      	b.n	8010a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	f003 0302 	and.w	r3, r3, #2
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d020      	beq.n	801091a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f003 0304 	and.w	r3, r3, #4
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d005      	beq.n	80108f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80108e4:	4b59      	ldr	r3, [pc, #356]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 80108e6:	689b      	ldr	r3, [r3, #8]
 80108e8:	4a58      	ldr	r2, [pc, #352]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 80108ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80108ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f003 0308 	and.w	r3, r3, #8
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d005      	beq.n	8010908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80108fc:	4b53      	ldr	r3, [pc, #332]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 80108fe:	689b      	ldr	r3, [r3, #8]
 8010900:	4a52      	ldr	r2, [pc, #328]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 8010902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010908:	4b50      	ldr	r3, [pc, #320]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	689b      	ldr	r3, [r3, #8]
 8010914:	494d      	ldr	r1, [pc, #308]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 8010916:	4313      	orrs	r3, r2
 8010918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f003 0301 	and.w	r3, r3, #1
 8010922:	2b00      	cmp	r3, #0
 8010924:	d044      	beq.n	80109b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	2b01      	cmp	r3, #1
 801092c:	d107      	bne.n	801093e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801092e:	4b47      	ldr	r3, [pc, #284]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010936:	2b00      	cmp	r3, #0
 8010938:	d119      	bne.n	801096e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801093a:	2301      	movs	r3, #1
 801093c:	e07f      	b.n	8010a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	2b02      	cmp	r3, #2
 8010944:	d003      	beq.n	801094e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801094a:	2b03      	cmp	r3, #3
 801094c:	d107      	bne.n	801095e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801094e:	4b3f      	ldr	r3, [pc, #252]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010956:	2b00      	cmp	r3, #0
 8010958:	d109      	bne.n	801096e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801095a:	2301      	movs	r3, #1
 801095c:	e06f      	b.n	8010a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801095e:	4b3b      	ldr	r3, [pc, #236]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f003 0302 	and.w	r3, r3, #2
 8010966:	2b00      	cmp	r3, #0
 8010968:	d101      	bne.n	801096e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801096a:	2301      	movs	r3, #1
 801096c:	e067      	b.n	8010a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801096e:	4b37      	ldr	r3, [pc, #220]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 8010970:	689b      	ldr	r3, [r3, #8]
 8010972:	f023 0203 	bic.w	r2, r3, #3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	4934      	ldr	r1, [pc, #208]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 801097c:	4313      	orrs	r3, r2
 801097e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010980:	f7fd fe08 	bl	800e594 <HAL_GetTick>
 8010984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010986:	e00a      	b.n	801099e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010988:	f7fd fe04 	bl	800e594 <HAL_GetTick>
 801098c:	4602      	mov	r2, r0
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	1ad3      	subs	r3, r2, r3
 8010992:	f241 3288 	movw	r2, #5000	; 0x1388
 8010996:	4293      	cmp	r3, r2
 8010998:	d901      	bls.n	801099e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801099a:	2303      	movs	r3, #3
 801099c:	e04f      	b.n	8010a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801099e:	4b2b      	ldr	r3, [pc, #172]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 80109a0:	689b      	ldr	r3, [r3, #8]
 80109a2:	f003 020c 	and.w	r2, r3, #12
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d1eb      	bne.n	8010988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80109b0:	4b25      	ldr	r3, [pc, #148]	; (8010a48 <HAL_RCC_ClockConfig+0x1b8>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f003 030f 	and.w	r3, r3, #15
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d20c      	bcs.n	80109d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80109be:	4b22      	ldr	r3, [pc, #136]	; (8010a48 <HAL_RCC_ClockConfig+0x1b8>)
 80109c0:	683a      	ldr	r2, [r7, #0]
 80109c2:	b2d2      	uxtb	r2, r2
 80109c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80109c6:	4b20      	ldr	r3, [pc, #128]	; (8010a48 <HAL_RCC_ClockConfig+0x1b8>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f003 030f 	and.w	r3, r3, #15
 80109ce:	683a      	ldr	r2, [r7, #0]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d001      	beq.n	80109d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80109d4:	2301      	movs	r3, #1
 80109d6:	e032      	b.n	8010a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f003 0304 	and.w	r3, r3, #4
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d008      	beq.n	80109f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80109e4:	4b19      	ldr	r3, [pc, #100]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 80109e6:	689b      	ldr	r3, [r3, #8]
 80109e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	4916      	ldr	r1, [pc, #88]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 80109f2:	4313      	orrs	r3, r2
 80109f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	f003 0308 	and.w	r3, r3, #8
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d009      	beq.n	8010a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010a02:	4b12      	ldr	r3, [pc, #72]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 8010a04:	689b      	ldr	r3, [r3, #8]
 8010a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	691b      	ldr	r3, [r3, #16]
 8010a0e:	00db      	lsls	r3, r3, #3
 8010a10:	490e      	ldr	r1, [pc, #56]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 8010a12:	4313      	orrs	r3, r2
 8010a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010a16:	f000 f821 	bl	8010a5c <HAL_RCC_GetSysClockFreq>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	4b0b      	ldr	r3, [pc, #44]	; (8010a4c <HAL_RCC_ClockConfig+0x1bc>)
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	091b      	lsrs	r3, r3, #4
 8010a22:	f003 030f 	and.w	r3, r3, #15
 8010a26:	490a      	ldr	r1, [pc, #40]	; (8010a50 <HAL_RCC_ClockConfig+0x1c0>)
 8010a28:	5ccb      	ldrb	r3, [r1, r3]
 8010a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8010a2e:	4a09      	ldr	r2, [pc, #36]	; (8010a54 <HAL_RCC_ClockConfig+0x1c4>)
 8010a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010a32:	4b09      	ldr	r3, [pc, #36]	; (8010a58 <HAL_RCC_ClockConfig+0x1c8>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7f0 ff2e 	bl	8001898 <HAL_InitTick>

  return HAL_OK;
 8010a3c:	2300      	movs	r3, #0
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop
 8010a48:	40023c00 	.word	0x40023c00
 8010a4c:	40023800 	.word	0x40023800
 8010a50:	08018574 	.word	0x08018574
 8010a54:	2000000c 	.word	0x2000000c
 8010a58:	200005a4 	.word	0x200005a4

08010a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010a60:	b090      	sub	sp, #64	; 0x40
 8010a62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010a64:	2300      	movs	r3, #0
 8010a66:	637b      	str	r3, [r7, #52]	; 0x34
 8010a68:	2300      	movs	r3, #0
 8010a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8010a70:	2300      	movs	r3, #0
 8010a72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010a74:	4b59      	ldr	r3, [pc, #356]	; (8010bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8010a76:	689b      	ldr	r3, [r3, #8]
 8010a78:	f003 030c 	and.w	r3, r3, #12
 8010a7c:	2b08      	cmp	r3, #8
 8010a7e:	d00d      	beq.n	8010a9c <HAL_RCC_GetSysClockFreq+0x40>
 8010a80:	2b08      	cmp	r3, #8
 8010a82:	f200 80a1 	bhi.w	8010bc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d002      	beq.n	8010a90 <HAL_RCC_GetSysClockFreq+0x34>
 8010a8a:	2b04      	cmp	r3, #4
 8010a8c:	d003      	beq.n	8010a96 <HAL_RCC_GetSysClockFreq+0x3a>
 8010a8e:	e09b      	b.n	8010bc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010a90:	4b53      	ldr	r3, [pc, #332]	; (8010be0 <HAL_RCC_GetSysClockFreq+0x184>)
 8010a92:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8010a94:	e09b      	b.n	8010bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010a96:	4b53      	ldr	r3, [pc, #332]	; (8010be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8010a98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010a9a:	e098      	b.n	8010bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010a9c:	4b4f      	ldr	r3, [pc, #316]	; (8010bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010aa4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010aa6:	4b4d      	ldr	r3, [pc, #308]	; (8010bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d028      	beq.n	8010b04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010ab2:	4b4a      	ldr	r3, [pc, #296]	; (8010bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	099b      	lsrs	r3, r3, #6
 8010ab8:	2200      	movs	r2, #0
 8010aba:	623b      	str	r3, [r7, #32]
 8010abc:	627a      	str	r2, [r7, #36]	; 0x24
 8010abe:	6a3b      	ldr	r3, [r7, #32]
 8010ac0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8010ac4:	2100      	movs	r1, #0
 8010ac6:	4b47      	ldr	r3, [pc, #284]	; (8010be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8010ac8:	fb03 f201 	mul.w	r2, r3, r1
 8010acc:	2300      	movs	r3, #0
 8010ace:	fb00 f303 	mul.w	r3, r0, r3
 8010ad2:	4413      	add	r3, r2
 8010ad4:	4a43      	ldr	r2, [pc, #268]	; (8010be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8010ad6:	fba0 1202 	umull	r1, r2, r0, r2
 8010ada:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010adc:	460a      	mov	r2, r1
 8010ade:	62ba      	str	r2, [r7, #40]	; 0x28
 8010ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ae2:	4413      	add	r3, r2
 8010ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae8:	2200      	movs	r2, #0
 8010aea:	61bb      	str	r3, [r7, #24]
 8010aec:	61fa      	str	r2, [r7, #28]
 8010aee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010af2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010af6:	f7ef ffb9 	bl	8000a6c <__aeabi_uldivmod>
 8010afa:	4602      	mov	r2, r0
 8010afc:	460b      	mov	r3, r1
 8010afe:	4613      	mov	r3, r2
 8010b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b02:	e053      	b.n	8010bac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010b04:	4b35      	ldr	r3, [pc, #212]	; (8010bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8010b06:	685b      	ldr	r3, [r3, #4]
 8010b08:	099b      	lsrs	r3, r3, #6
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	613b      	str	r3, [r7, #16]
 8010b0e:	617a      	str	r2, [r7, #20]
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8010b16:	f04f 0b00 	mov.w	fp, #0
 8010b1a:	4652      	mov	r2, sl
 8010b1c:	465b      	mov	r3, fp
 8010b1e:	f04f 0000 	mov.w	r0, #0
 8010b22:	f04f 0100 	mov.w	r1, #0
 8010b26:	0159      	lsls	r1, r3, #5
 8010b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010b2c:	0150      	lsls	r0, r2, #5
 8010b2e:	4602      	mov	r2, r0
 8010b30:	460b      	mov	r3, r1
 8010b32:	ebb2 080a 	subs.w	r8, r2, sl
 8010b36:	eb63 090b 	sbc.w	r9, r3, fp
 8010b3a:	f04f 0200 	mov.w	r2, #0
 8010b3e:	f04f 0300 	mov.w	r3, #0
 8010b42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8010b46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8010b4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8010b4e:	ebb2 0408 	subs.w	r4, r2, r8
 8010b52:	eb63 0509 	sbc.w	r5, r3, r9
 8010b56:	f04f 0200 	mov.w	r2, #0
 8010b5a:	f04f 0300 	mov.w	r3, #0
 8010b5e:	00eb      	lsls	r3, r5, #3
 8010b60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010b64:	00e2      	lsls	r2, r4, #3
 8010b66:	4614      	mov	r4, r2
 8010b68:	461d      	mov	r5, r3
 8010b6a:	eb14 030a 	adds.w	r3, r4, sl
 8010b6e:	603b      	str	r3, [r7, #0]
 8010b70:	eb45 030b 	adc.w	r3, r5, fp
 8010b74:	607b      	str	r3, [r7, #4]
 8010b76:	f04f 0200 	mov.w	r2, #0
 8010b7a:	f04f 0300 	mov.w	r3, #0
 8010b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010b82:	4629      	mov	r1, r5
 8010b84:	028b      	lsls	r3, r1, #10
 8010b86:	4621      	mov	r1, r4
 8010b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010b8c:	4621      	mov	r1, r4
 8010b8e:	028a      	lsls	r2, r1, #10
 8010b90:	4610      	mov	r0, r2
 8010b92:	4619      	mov	r1, r3
 8010b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b96:	2200      	movs	r2, #0
 8010b98:	60bb      	str	r3, [r7, #8]
 8010b9a:	60fa      	str	r2, [r7, #12]
 8010b9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010ba0:	f7ef ff64 	bl	8000a6c <__aeabi_uldivmod>
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	460b      	mov	r3, r1
 8010ba8:	4613      	mov	r3, r2
 8010baa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010bac:	4b0b      	ldr	r3, [pc, #44]	; (8010bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	0c1b      	lsrs	r3, r3, #16
 8010bb2:	f003 0303 	and.w	r3, r3, #3
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	005b      	lsls	r3, r3, #1
 8010bba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8010bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010bc6:	e002      	b.n	8010bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010bc8:	4b05      	ldr	r3, [pc, #20]	; (8010be0 <HAL_RCC_GetSysClockFreq+0x184>)
 8010bca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3740      	adds	r7, #64	; 0x40
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010bda:	bf00      	nop
 8010bdc:	40023800 	.word	0x40023800
 8010be0:	00f42400 	.word	0x00f42400
 8010be4:	017d7840 	.word	0x017d7840

08010be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010be8:	b480      	push	{r7}
 8010bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010bec:	4b03      	ldr	r3, [pc, #12]	; (8010bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8010bee:	681b      	ldr	r3, [r3, #0]
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop
 8010bfc:	2000000c 	.word	0x2000000c

08010c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010c04:	f7ff fff0 	bl	8010be8 <HAL_RCC_GetHCLKFreq>
 8010c08:	4602      	mov	r2, r0
 8010c0a:	4b05      	ldr	r3, [pc, #20]	; (8010c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010c0c:	689b      	ldr	r3, [r3, #8]
 8010c0e:	0a9b      	lsrs	r3, r3, #10
 8010c10:	f003 0307 	and.w	r3, r3, #7
 8010c14:	4903      	ldr	r1, [pc, #12]	; (8010c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010c16:	5ccb      	ldrb	r3, [r1, r3]
 8010c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	40023800 	.word	0x40023800
 8010c24:	08018584 	.word	0x08018584

08010c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010c2c:	f7ff ffdc 	bl	8010be8 <HAL_RCC_GetHCLKFreq>
 8010c30:	4602      	mov	r2, r0
 8010c32:	4b05      	ldr	r3, [pc, #20]	; (8010c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010c34:	689b      	ldr	r3, [r3, #8]
 8010c36:	0b5b      	lsrs	r3, r3, #13
 8010c38:	f003 0307 	and.w	r3, r3, #7
 8010c3c:	4903      	ldr	r1, [pc, #12]	; (8010c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8010c3e:	5ccb      	ldrb	r3, [r1, r3]
 8010c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	40023800 	.word	0x40023800
 8010c4c:	08018584 	.word	0x08018584

08010c50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	220f      	movs	r2, #15
 8010c5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010c60:	4b12      	ldr	r3, [pc, #72]	; (8010cac <HAL_RCC_GetClockConfig+0x5c>)
 8010c62:	689b      	ldr	r3, [r3, #8]
 8010c64:	f003 0203 	and.w	r2, r3, #3
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010c6c:	4b0f      	ldr	r3, [pc, #60]	; (8010cac <HAL_RCC_GetClockConfig+0x5c>)
 8010c6e:	689b      	ldr	r3, [r3, #8]
 8010c70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010c78:	4b0c      	ldr	r3, [pc, #48]	; (8010cac <HAL_RCC_GetClockConfig+0x5c>)
 8010c7a:	689b      	ldr	r3, [r3, #8]
 8010c7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010c84:	4b09      	ldr	r3, [pc, #36]	; (8010cac <HAL_RCC_GetClockConfig+0x5c>)
 8010c86:	689b      	ldr	r3, [r3, #8]
 8010c88:	08db      	lsrs	r3, r3, #3
 8010c8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010c92:	4b07      	ldr	r3, [pc, #28]	; (8010cb0 <HAL_RCC_GetClockConfig+0x60>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	f003 020f 	and.w	r2, r3, #15
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	601a      	str	r2, [r3, #0]
}
 8010c9e:	bf00      	nop
 8010ca0:	370c      	adds	r7, #12
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	40023800 	.word	0x40023800
 8010cb0:	40023c00 	.word	0x40023c00

08010cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d101      	bne.n	8010cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e056      	b.n	8010d74 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d106      	bne.n	8010ce6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7f0 fd13 	bl	800170c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2202      	movs	r2, #2
 8010cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	681a      	ldr	r2, [r3, #0]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010cfc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	685a      	ldr	r2, [r3, #4]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	689b      	ldr	r3, [r3, #8]
 8010d06:	431a      	orrs	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	431a      	orrs	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	691b      	ldr	r3, [r3, #16]
 8010d12:	431a      	orrs	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	695b      	ldr	r3, [r3, #20]
 8010d18:	431a      	orrs	r2, r3
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	699b      	ldr	r3, [r3, #24]
 8010d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010d22:	431a      	orrs	r2, r3
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	69db      	ldr	r3, [r3, #28]
 8010d28:	431a      	orrs	r2, r3
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6a1b      	ldr	r3, [r3, #32]
 8010d2e:	ea42 0103 	orr.w	r1, r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	430a      	orrs	r2, r1
 8010d3c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	699b      	ldr	r3, [r3, #24]
 8010d42:	0c1b      	lsrs	r3, r3, #16
 8010d44:	f003 0104 	and.w	r1, r3, #4
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	430a      	orrs	r2, r1
 8010d52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	69da      	ldr	r2, [r3, #28]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010d62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2200      	movs	r2, #0
 8010d68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2201      	movs	r2, #1
 8010d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010d72:	2300      	movs	r3, #0
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3708      	adds	r7, #8
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b08c      	sub	sp, #48	; 0x30
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	607a      	str	r2, [r7, #4]
 8010d88:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d101      	bne.n	8010da2 <HAL_SPI_TransmitReceive+0x26>
 8010d9e:	2302      	movs	r3, #2
 8010da0:	e18a      	b.n	80110b8 <HAL_SPI_TransmitReceive+0x33c>
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2201      	movs	r2, #1
 8010da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010daa:	f7fd fbf3 	bl	800e594 <HAL_GetTick>
 8010dae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010dc0:	887b      	ldrh	r3, [r7, #2]
 8010dc2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d00f      	beq.n	8010dec <HAL_SPI_TransmitReceive+0x70>
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010dd2:	d107      	bne.n	8010de4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	689b      	ldr	r3, [r3, #8]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d103      	bne.n	8010de4 <HAL_SPI_TransmitReceive+0x68>
 8010ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010de0:	2b04      	cmp	r3, #4
 8010de2:	d003      	beq.n	8010dec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010de4:	2302      	movs	r3, #2
 8010de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010dea:	e15b      	b.n	80110a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d005      	beq.n	8010dfe <HAL_SPI_TransmitReceive+0x82>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d002      	beq.n	8010dfe <HAL_SPI_TransmitReceive+0x82>
 8010df8:	887b      	ldrh	r3, [r7, #2]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d103      	bne.n	8010e06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010e04:	e14e      	b.n	80110a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010e0c:	b2db      	uxtb	r3, r3
 8010e0e:	2b04      	cmp	r3, #4
 8010e10:	d003      	beq.n	8010e1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	2205      	movs	r2, #5
 8010e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	887a      	ldrh	r2, [r7, #2]
 8010e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	887a      	ldrh	r2, [r7, #2]
 8010e30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	68ba      	ldr	r2, [r7, #8]
 8010e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	887a      	ldrh	r2, [r7, #2]
 8010e3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	887a      	ldrh	r2, [r7, #2]
 8010e42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2200      	movs	r2, #0
 8010e48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e5a:	2b40      	cmp	r3, #64	; 0x40
 8010e5c:	d007      	beq.n	8010e6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e76:	d178      	bne.n	8010f6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d002      	beq.n	8010e86 <HAL_SPI_TransmitReceive+0x10a>
 8010e80:	8b7b      	ldrh	r3, [r7, #26]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d166      	bne.n	8010f54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e8a:	881a      	ldrh	r2, [r3, #0]
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e96:	1c9a      	adds	r2, r3, #2
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	3b01      	subs	r3, #1
 8010ea4:	b29a      	uxth	r2, r3
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010eaa:	e053      	b.n	8010f54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	689b      	ldr	r3, [r3, #8]
 8010eb2:	f003 0302 	and.w	r3, r3, #2
 8010eb6:	2b02      	cmp	r3, #2
 8010eb8:	d11b      	bne.n	8010ef2 <HAL_SPI_TransmitReceive+0x176>
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d016      	beq.n	8010ef2 <HAL_SPI_TransmitReceive+0x176>
 8010ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec6:	2b01      	cmp	r3, #1
 8010ec8:	d113      	bne.n	8010ef2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ece:	881a      	ldrh	r2, [r3, #0]
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eda:	1c9a      	adds	r2, r3, #2
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	3b01      	subs	r3, #1
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	689b      	ldr	r3, [r3, #8]
 8010ef8:	f003 0301 	and.w	r3, r3, #1
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	d119      	bne.n	8010f34 <HAL_SPI_TransmitReceive+0x1b8>
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d014      	beq.n	8010f34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	68da      	ldr	r2, [r3, #12]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f14:	b292      	uxth	r2, r2
 8010f16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f1c:	1c9a      	adds	r2, r3, #2
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	3b01      	subs	r3, #1
 8010f2a:	b29a      	uxth	r2, r3
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010f30:	2301      	movs	r3, #1
 8010f32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010f34:	f7fd fb2e 	bl	800e594 <HAL_GetTick>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3c:	1ad3      	subs	r3, r2, r3
 8010f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d807      	bhi.n	8010f54 <HAL_SPI_TransmitReceive+0x1d8>
 8010f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f4a:	d003      	beq.n	8010f54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8010f4c:	2303      	movs	r3, #3
 8010f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010f52:	e0a7      	b.n	80110a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d1a6      	bne.n	8010eac <HAL_SPI_TransmitReceive+0x130>
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d1a1      	bne.n	8010eac <HAL_SPI_TransmitReceive+0x130>
 8010f68:	e07c      	b.n	8011064 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d002      	beq.n	8010f78 <HAL_SPI_TransmitReceive+0x1fc>
 8010f72:	8b7b      	ldrh	r3, [r7, #26]
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d16b      	bne.n	8011050 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	330c      	adds	r3, #12
 8010f82:	7812      	ldrb	r2, [r2, #0]
 8010f84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f8a:	1c5a      	adds	r2, r3, #1
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	3b01      	subs	r3, #1
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010f9e:	e057      	b.n	8011050 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	689b      	ldr	r3, [r3, #8]
 8010fa6:	f003 0302 	and.w	r3, r3, #2
 8010faa:	2b02      	cmp	r3, #2
 8010fac:	d11c      	bne.n	8010fe8 <HAL_SPI_TransmitReceive+0x26c>
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d017      	beq.n	8010fe8 <HAL_SPI_TransmitReceive+0x26c>
 8010fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d114      	bne.n	8010fe8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	330c      	adds	r3, #12
 8010fc8:	7812      	ldrb	r2, [r2, #0]
 8010fca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fd0:	1c5a      	adds	r2, r3, #1
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	689b      	ldr	r3, [r3, #8]
 8010fee:	f003 0301 	and.w	r3, r3, #1
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d119      	bne.n	801102a <HAL_SPI_TransmitReceive+0x2ae>
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d014      	beq.n	801102a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	68da      	ldr	r2, [r3, #12]
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801100a:	b2d2      	uxtb	r2, r2
 801100c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011012:	1c5a      	adds	r2, r3, #1
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801101c:	b29b      	uxth	r3, r3
 801101e:	3b01      	subs	r3, #1
 8011020:	b29a      	uxth	r2, r3
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011026:	2301      	movs	r3, #1
 8011028:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801102a:	f7fd fab3 	bl	800e594 <HAL_GetTick>
 801102e:	4602      	mov	r2, r0
 8011030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011032:	1ad3      	subs	r3, r2, r3
 8011034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011036:	429a      	cmp	r2, r3
 8011038:	d803      	bhi.n	8011042 <HAL_SPI_TransmitReceive+0x2c6>
 801103a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011040:	d102      	bne.n	8011048 <HAL_SPI_TransmitReceive+0x2cc>
 8011042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011044:	2b00      	cmp	r3, #0
 8011046:	d103      	bne.n	8011050 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8011048:	2303      	movs	r3, #3
 801104a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801104e:	e029      	b.n	80110a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011054:	b29b      	uxth	r3, r3
 8011056:	2b00      	cmp	r3, #0
 8011058:	d1a2      	bne.n	8010fa0 <HAL_SPI_TransmitReceive+0x224>
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801105e:	b29b      	uxth	r3, r3
 8011060:	2b00      	cmp	r3, #0
 8011062:	d19d      	bne.n	8010fa0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011066:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011068:	68f8      	ldr	r0, [r7, #12]
 801106a:	f000 f893 	bl	8011194 <SPI_EndRxTxTransaction>
 801106e:	4603      	mov	r3, r0
 8011070:	2b00      	cmp	r3, #0
 8011072:	d006      	beq.n	8011082 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8011074:	2301      	movs	r3, #1
 8011076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2220      	movs	r2, #32
 801107e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8011080:	e010      	b.n	80110a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	689b      	ldr	r3, [r3, #8]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d10b      	bne.n	80110a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801108a:	2300      	movs	r3, #0
 801108c:	617b      	str	r3, [r7, #20]
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	617b      	str	r3, [r7, #20]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	689b      	ldr	r3, [r3, #8]
 801109c:	617b      	str	r3, [r7, #20]
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	e000      	b.n	80110a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80110a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2201      	movs	r2, #1
 80110a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2200      	movs	r2, #0
 80110b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80110b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3730      	adds	r7, #48	; 0x30
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b084      	sub	sp, #16
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	60b9      	str	r1, [r7, #8]
 80110ca:	603b      	str	r3, [r7, #0]
 80110cc:	4613      	mov	r3, r2
 80110ce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80110d0:	e04c      	b.n	801116c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110d8:	d048      	beq.n	801116c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80110da:	f7fd fa5b 	bl	800e594 <HAL_GetTick>
 80110de:	4602      	mov	r2, r0
 80110e0:	69bb      	ldr	r3, [r7, #24]
 80110e2:	1ad3      	subs	r3, r2, r3
 80110e4:	683a      	ldr	r2, [r7, #0]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d902      	bls.n	80110f0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d13d      	bne.n	801116c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	685a      	ldr	r2, [r3, #4]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80110fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011108:	d111      	bne.n	801112e <SPI_WaitFlagStateUntilTimeout+0x6e>
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	689b      	ldr	r3, [r3, #8]
 801110e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011112:	d004      	beq.n	801111e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	689b      	ldr	r3, [r3, #8]
 8011118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801111c:	d107      	bne.n	801112e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801112c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011136:	d10f      	bne.n	8011158 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011146:	601a      	str	r2, [r3, #0]
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011156:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2201      	movs	r2, #1
 801115c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2200      	movs	r2, #0
 8011164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8011168:	2303      	movs	r3, #3
 801116a:	e00f      	b.n	801118c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	689a      	ldr	r2, [r3, #8]
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	4013      	ands	r3, r2
 8011176:	68ba      	ldr	r2, [r7, #8]
 8011178:	429a      	cmp	r2, r3
 801117a:	bf0c      	ite	eq
 801117c:	2301      	moveq	r3, #1
 801117e:	2300      	movne	r3, #0
 8011180:	b2db      	uxtb	r3, r3
 8011182:	461a      	mov	r2, r3
 8011184:	79fb      	ldrb	r3, [r7, #7]
 8011186:	429a      	cmp	r2, r3
 8011188:	d1a3      	bne.n	80110d2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 801118a:	2300      	movs	r3, #0
}
 801118c:	4618      	mov	r0, r3
 801118e:	3710      	adds	r7, #16
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b088      	sub	sp, #32
 8011198:	af02      	add	r7, sp, #8
 801119a:	60f8      	str	r0, [r7, #12]
 801119c:	60b9      	str	r1, [r7, #8]
 801119e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80111a0:	4b1b      	ldr	r3, [pc, #108]	; (8011210 <SPI_EndRxTxTransaction+0x7c>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	4a1b      	ldr	r2, [pc, #108]	; (8011214 <SPI_EndRxTxTransaction+0x80>)
 80111a6:	fba2 2303 	umull	r2, r3, r2, r3
 80111aa:	0d5b      	lsrs	r3, r3, #21
 80111ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80111b0:	fb02 f303 	mul.w	r3, r2, r3
 80111b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80111be:	d112      	bne.n	80111e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	9300      	str	r3, [sp, #0]
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	2200      	movs	r2, #0
 80111c8:	2180      	movs	r1, #128	; 0x80
 80111ca:	68f8      	ldr	r0, [r7, #12]
 80111cc:	f7ff ff78 	bl	80110c0 <SPI_WaitFlagStateUntilTimeout>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d016      	beq.n	8011204 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111da:	f043 0220 	orr.w	r2, r3, #32
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80111e2:	2303      	movs	r3, #3
 80111e4:	e00f      	b.n	8011206 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d00a      	beq.n	8011202 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	3b01      	subs	r3, #1
 80111f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	689b      	ldr	r3, [r3, #8]
 80111f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111fc:	2b80      	cmp	r3, #128	; 0x80
 80111fe:	d0f2      	beq.n	80111e6 <SPI_EndRxTxTransaction+0x52>
 8011200:	e000      	b.n	8011204 <SPI_EndRxTxTransaction+0x70>
        break;
 8011202:	bf00      	nop
  }

  return HAL_OK;
 8011204:	2300      	movs	r3, #0
}
 8011206:	4618      	mov	r0, r3
 8011208:	3718      	adds	r7, #24
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
 801120e:	bf00      	nop
 8011210:	2000000c 	.word	0x2000000c
 8011214:	165e9f81 	.word	0x165e9f81

08011218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d101      	bne.n	801122a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011226:	2301      	movs	r3, #1
 8011228:	e01d      	b.n	8011266 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011230:	b2db      	uxtb	r3, r3
 8011232:	2b00      	cmp	r3, #0
 8011234:	d106      	bne.n	8011244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2200      	movs	r2, #0
 801123a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 f815 	bl	801126e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2202      	movs	r2, #2
 8011248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	3304      	adds	r3, #4
 8011254:	4619      	mov	r1, r3
 8011256:	4610      	mov	r0, r2
 8011258:	f000 fc36 	bl	8011ac8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2201      	movs	r2, #1
 8011260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011264:	2300      	movs	r3, #0
}
 8011266:	4618      	mov	r0, r3
 8011268:	3708      	adds	r7, #8
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}

0801126e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801126e:	b480      	push	{r7}
 8011270:	b083      	sub	sp, #12
 8011272:	af00      	add	r7, sp, #0
 8011274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011276:	bf00      	nop
 8011278:	370c      	adds	r7, #12
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr

08011282 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011282:	b480      	push	{r7}
 8011284:	b085      	sub	sp, #20
 8011286:	af00      	add	r7, sp, #0
 8011288:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	68da      	ldr	r2, [r3, #12]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f042 0201 	orr.w	r2, r2, #1
 8011298:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	689b      	ldr	r3, [r3, #8]
 80112a0:	f003 0307 	and.w	r3, r3, #7
 80112a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	2b06      	cmp	r3, #6
 80112aa:	d007      	beq.n	80112bc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f042 0201 	orr.w	r2, r2, #1
 80112ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80112bc:	2300      	movs	r3, #0
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3714      	adds	r7, #20
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr

080112ca <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80112ca:	b580      	push	{r7, lr}
 80112cc:	b082      	sub	sp, #8
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d101      	bne.n	80112dc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80112d8:	2301      	movs	r3, #1
 80112da:	e01d      	b.n	8011318 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80112e2:	b2db      	uxtb	r3, r3
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d106      	bne.n	80112f6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2200      	movs	r2, #0
 80112ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f7f0 fe85 	bl	8002000 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2202      	movs	r2, #2
 80112fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	3304      	adds	r3, #4
 8011306:	4619      	mov	r1, r3
 8011308:	4610      	mov	r0, r2
 801130a:	f000 fbdd 	bl	8011ac8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2201      	movs	r2, #1
 8011312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011316:	2300      	movs	r3, #0
}
 8011318:	4618      	mov	r0, r3
 801131a:	3708      	adds	r7, #8
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}

08011320 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d101      	bne.n	8011332 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801132e:	2301      	movs	r3, #1
 8011330:	e01d      	b.n	801136e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011338:	b2db      	uxtb	r3, r3
 801133a:	2b00      	cmp	r3, #0
 801133c:	d106      	bne.n	801134c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f7f0 fdf6 	bl	8001f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2202      	movs	r2, #2
 8011350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	3304      	adds	r3, #4
 801135c:	4619      	mov	r1, r3
 801135e:	4610      	mov	r0, r2
 8011360:	f000 fbb2 	bl	8011ac8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2201      	movs	r2, #1
 8011368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801136c:	2300      	movs	r3, #0
}
 801136e:	4618      	mov	r0, r3
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
	...

08011378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	2201      	movs	r2, #1
 8011388:	6839      	ldr	r1, [r7, #0]
 801138a:	4618      	mov	r0, r3
 801138c:	f000 fdec 	bl	8011f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	4a15      	ldr	r2, [pc, #84]	; (80113ec <HAL_TIM_PWM_Start+0x74>)
 8011396:	4293      	cmp	r3, r2
 8011398:	d004      	beq.n	80113a4 <HAL_TIM_PWM_Start+0x2c>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	4a14      	ldr	r2, [pc, #80]	; (80113f0 <HAL_TIM_PWM_Start+0x78>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d101      	bne.n	80113a8 <HAL_TIM_PWM_Start+0x30>
 80113a4:	2301      	movs	r3, #1
 80113a6:	e000      	b.n	80113aa <HAL_TIM_PWM_Start+0x32>
 80113a8:	2300      	movs	r3, #0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d007      	beq.n	80113be <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80113bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	689b      	ldr	r3, [r3, #8]
 80113c4:	f003 0307 	and.w	r3, r3, #7
 80113c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2b06      	cmp	r3, #6
 80113ce:	d007      	beq.n	80113e0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f042 0201 	orr.w	r2, r2, #1
 80113de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80113e0:	2300      	movs	r3, #0
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	3710      	adds	r7, #16
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	40010000 	.word	0x40010000
 80113f0:	40010400 	.word	0x40010400

080113f4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b084      	sub	sp, #16
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	2b0c      	cmp	r3, #12
 8011402:	d841      	bhi.n	8011488 <HAL_TIM_PWM_Start_IT+0x94>
 8011404:	a201      	add	r2, pc, #4	; (adr r2, 801140c <HAL_TIM_PWM_Start_IT+0x18>)
 8011406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801140a:	bf00      	nop
 801140c:	08011441 	.word	0x08011441
 8011410:	08011489 	.word	0x08011489
 8011414:	08011489 	.word	0x08011489
 8011418:	08011489 	.word	0x08011489
 801141c:	08011453 	.word	0x08011453
 8011420:	08011489 	.word	0x08011489
 8011424:	08011489 	.word	0x08011489
 8011428:	08011489 	.word	0x08011489
 801142c:	08011465 	.word	0x08011465
 8011430:	08011489 	.word	0x08011489
 8011434:	08011489 	.word	0x08011489
 8011438:	08011489 	.word	0x08011489
 801143c:	08011477 	.word	0x08011477
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	68da      	ldr	r2, [r3, #12]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f042 0202 	orr.w	r2, r2, #2
 801144e:	60da      	str	r2, [r3, #12]
      break;
 8011450:	e01b      	b.n	801148a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	68da      	ldr	r2, [r3, #12]
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f042 0204 	orr.w	r2, r2, #4
 8011460:	60da      	str	r2, [r3, #12]
      break;
 8011462:	e012      	b.n	801148a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	68da      	ldr	r2, [r3, #12]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f042 0208 	orr.w	r2, r2, #8
 8011472:	60da      	str	r2, [r3, #12]
      break;
 8011474:	e009      	b.n	801148a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	68da      	ldr	r2, [r3, #12]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f042 0210 	orr.w	r2, r2, #16
 8011484:	60da      	str	r2, [r3, #12]
      break;
 8011486:	e000      	b.n	801148a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8011488:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	2201      	movs	r2, #1
 8011490:	6839      	ldr	r1, [r7, #0]
 8011492:	4618      	mov	r0, r3
 8011494:	f000 fd68 	bl	8011f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	4a15      	ldr	r2, [pc, #84]	; (80114f4 <HAL_TIM_PWM_Start_IT+0x100>)
 801149e:	4293      	cmp	r3, r2
 80114a0:	d004      	beq.n	80114ac <HAL_TIM_PWM_Start_IT+0xb8>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	4a14      	ldr	r2, [pc, #80]	; (80114f8 <HAL_TIM_PWM_Start_IT+0x104>)
 80114a8:	4293      	cmp	r3, r2
 80114aa:	d101      	bne.n	80114b0 <HAL_TIM_PWM_Start_IT+0xbc>
 80114ac:	2301      	movs	r3, #1
 80114ae:	e000      	b.n	80114b2 <HAL_TIM_PWM_Start_IT+0xbe>
 80114b0:	2300      	movs	r3, #0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d007      	beq.n	80114c6 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80114c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	689b      	ldr	r3, [r3, #8]
 80114cc:	f003 0307 	and.w	r3, r3, #7
 80114d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2b06      	cmp	r3, #6
 80114d6:	d007      	beq.n	80114e8 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	f042 0201 	orr.w	r2, r2, #1
 80114e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80114e8:	2300      	movs	r3, #0
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3710      	adds	r7, #16
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	40010000 	.word	0x40010000
 80114f8:	40010400 	.word	0x40010400

080114fc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b082      	sub	sp, #8
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	2b0c      	cmp	r3, #12
 801150a:	d841      	bhi.n	8011590 <HAL_TIM_PWM_Stop_IT+0x94>
 801150c:	a201      	add	r2, pc, #4	; (adr r2, 8011514 <HAL_TIM_PWM_Stop_IT+0x18>)
 801150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011512:	bf00      	nop
 8011514:	08011549 	.word	0x08011549
 8011518:	08011591 	.word	0x08011591
 801151c:	08011591 	.word	0x08011591
 8011520:	08011591 	.word	0x08011591
 8011524:	0801155b 	.word	0x0801155b
 8011528:	08011591 	.word	0x08011591
 801152c:	08011591 	.word	0x08011591
 8011530:	08011591 	.word	0x08011591
 8011534:	0801156d 	.word	0x0801156d
 8011538:	08011591 	.word	0x08011591
 801153c:	08011591 	.word	0x08011591
 8011540:	08011591 	.word	0x08011591
 8011544:	0801157f 	.word	0x0801157f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	68da      	ldr	r2, [r3, #12]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f022 0202 	bic.w	r2, r2, #2
 8011556:	60da      	str	r2, [r3, #12]
      break;
 8011558:	e01b      	b.n	8011592 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	68da      	ldr	r2, [r3, #12]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	f022 0204 	bic.w	r2, r2, #4
 8011568:	60da      	str	r2, [r3, #12]
      break;
 801156a:	e012      	b.n	8011592 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	68da      	ldr	r2, [r3, #12]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	f022 0208 	bic.w	r2, r2, #8
 801157a:	60da      	str	r2, [r3, #12]
      break;
 801157c:	e009      	b.n	8011592 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	68da      	ldr	r2, [r3, #12]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	f022 0210 	bic.w	r2, r2, #16
 801158c:	60da      	str	r2, [r3, #12]
      break;
 801158e:	e000      	b.n	8011592 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8011590:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	2200      	movs	r2, #0
 8011598:	6839      	ldr	r1, [r7, #0]
 801159a:	4618      	mov	r0, r3
 801159c:	f000 fce4 	bl	8011f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a20      	ldr	r2, [pc, #128]	; (8011628 <HAL_TIM_PWM_Stop_IT+0x12c>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d004      	beq.n	80115b4 <HAL_TIM_PWM_Stop_IT+0xb8>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	4a1f      	ldr	r2, [pc, #124]	; (801162c <HAL_TIM_PWM_Stop_IT+0x130>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d101      	bne.n	80115b8 <HAL_TIM_PWM_Stop_IT+0xbc>
 80115b4:	2301      	movs	r3, #1
 80115b6:	e000      	b.n	80115ba <HAL_TIM_PWM_Stop_IT+0xbe>
 80115b8:	2300      	movs	r3, #0
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d017      	beq.n	80115ee <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	6a1a      	ldr	r2, [r3, #32]
 80115c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80115c8:	4013      	ands	r3, r2
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d10f      	bne.n	80115ee <HAL_TIM_PWM_Stop_IT+0xf2>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	6a1a      	ldr	r2, [r3, #32]
 80115d4:	f240 4344 	movw	r3, #1092	; 0x444
 80115d8:	4013      	ands	r3, r2
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d107      	bne.n	80115ee <HAL_TIM_PWM_Stop_IT+0xf2>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80115ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	6a1a      	ldr	r2, [r3, #32]
 80115f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80115f8:	4013      	ands	r3, r2
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d10f      	bne.n	801161e <HAL_TIM_PWM_Stop_IT+0x122>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	6a1a      	ldr	r2, [r3, #32]
 8011604:	f240 4344 	movw	r3, #1092	; 0x444
 8011608:	4013      	ands	r3, r2
 801160a:	2b00      	cmp	r3, #0
 801160c:	d107      	bne.n	801161e <HAL_TIM_PWM_Stop_IT+0x122>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	f022 0201 	bic.w	r2, r2, #1
 801161c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801161e:	2300      	movs	r3, #0
}
 8011620:	4618      	mov	r0, r3
 8011622:	3708      	adds	r7, #8
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}
 8011628:	40010000 	.word	0x40010000
 801162c:	40010400 	.word	0x40010400

08011630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	691b      	ldr	r3, [r3, #16]
 801163e:	f003 0302 	and.w	r3, r3, #2
 8011642:	2b02      	cmp	r3, #2
 8011644:	d122      	bne.n	801168c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	f003 0302 	and.w	r3, r3, #2
 8011650:	2b02      	cmp	r3, #2
 8011652:	d11b      	bne.n	801168c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	f06f 0202 	mvn.w	r2, #2
 801165c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2201      	movs	r2, #1
 8011662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	699b      	ldr	r3, [r3, #24]
 801166a:	f003 0303 	and.w	r3, r3, #3
 801166e:	2b00      	cmp	r3, #0
 8011670:	d003      	beq.n	801167a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f000 fa14 	bl	8011aa0 <HAL_TIM_IC_CaptureCallback>
 8011678:	e005      	b.n	8011686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f000 fa06 	bl	8011a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f7fa fcfb 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2200      	movs	r2, #0
 801168a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	691b      	ldr	r3, [r3, #16]
 8011692:	f003 0304 	and.w	r3, r3, #4
 8011696:	2b04      	cmp	r3, #4
 8011698:	d122      	bne.n	80116e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	f003 0304 	and.w	r3, r3, #4
 80116a4:	2b04      	cmp	r3, #4
 80116a6:	d11b      	bne.n	80116e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f06f 0204 	mvn.w	r2, #4
 80116b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2202      	movs	r2, #2
 80116b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	699b      	ldr	r3, [r3, #24]
 80116be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d003      	beq.n	80116ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f000 f9ea 	bl	8011aa0 <HAL_TIM_IC_CaptureCallback>
 80116cc:	e005      	b.n	80116da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 f9dc 	bl	8011a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f7fa fcd1 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2200      	movs	r2, #0
 80116de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	691b      	ldr	r3, [r3, #16]
 80116e6:	f003 0308 	and.w	r3, r3, #8
 80116ea:	2b08      	cmp	r3, #8
 80116ec:	d122      	bne.n	8011734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	f003 0308 	and.w	r3, r3, #8
 80116f8:	2b08      	cmp	r3, #8
 80116fa:	d11b      	bne.n	8011734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f06f 0208 	mvn.w	r2, #8
 8011704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2204      	movs	r2, #4
 801170a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	69db      	ldr	r3, [r3, #28]
 8011712:	f003 0303 	and.w	r3, r3, #3
 8011716:	2b00      	cmp	r3, #0
 8011718:	d003      	beq.n	8011722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f000 f9c0 	bl	8011aa0 <HAL_TIM_IC_CaptureCallback>
 8011720:	e005      	b.n	801172e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f000 f9b2 	bl	8011a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f7fa fca7 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2200      	movs	r2, #0
 8011732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	691b      	ldr	r3, [r3, #16]
 801173a:	f003 0310 	and.w	r3, r3, #16
 801173e:	2b10      	cmp	r3, #16
 8011740:	d122      	bne.n	8011788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	f003 0310 	and.w	r3, r3, #16
 801174c:	2b10      	cmp	r3, #16
 801174e:	d11b      	bne.n	8011788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	f06f 0210 	mvn.w	r2, #16
 8011758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2208      	movs	r2, #8
 801175e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	69db      	ldr	r3, [r3, #28]
 8011766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801176a:	2b00      	cmp	r3, #0
 801176c:	d003      	beq.n	8011776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f000 f996 	bl	8011aa0 <HAL_TIM_IC_CaptureCallback>
 8011774:	e005      	b.n	8011782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 f988 	bl	8011a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f7fa fc7d 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2200      	movs	r2, #0
 8011786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	691b      	ldr	r3, [r3, #16]
 801178e:	f003 0301 	and.w	r3, r3, #1
 8011792:	2b01      	cmp	r3, #1
 8011794:	d10e      	bne.n	80117b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	f003 0301 	and.w	r3, r3, #1
 80117a0:	2b01      	cmp	r3, #1
 80117a2:	d107      	bne.n	80117b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f06f 0201 	mvn.w	r2, #1
 80117ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f7ef ff1a 	bl	80015e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	691b      	ldr	r3, [r3, #16]
 80117ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117be:	2b80      	cmp	r3, #128	; 0x80
 80117c0:	d10e      	bne.n	80117e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117cc:	2b80      	cmp	r3, #128	; 0x80
 80117ce:	d107      	bne.n	80117e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80117d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f000 fcc2 	bl	8012164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	691b      	ldr	r3, [r3, #16]
 80117e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117ea:	2b40      	cmp	r3, #64	; 0x40
 80117ec:	d10e      	bne.n	801180c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	68db      	ldr	r3, [r3, #12]
 80117f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117f8:	2b40      	cmp	r3, #64	; 0x40
 80117fa:	d107      	bne.n	801180c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f000 f954 	bl	8011ab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	691b      	ldr	r3, [r3, #16]
 8011812:	f003 0320 	and.w	r3, r3, #32
 8011816:	2b20      	cmp	r3, #32
 8011818:	d10e      	bne.n	8011838 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	f003 0320 	and.w	r3, r3, #32
 8011824:	2b20      	cmp	r3, #32
 8011826:	d107      	bne.n	8011838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f06f 0220 	mvn.w	r2, #32
 8011830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011832:	6878      	ldr	r0, [r7, #4]
 8011834:	f000 fc8c 	bl	8012150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011838:	bf00      	nop
 801183a:	3708      	adds	r7, #8
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}

08011840 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b084      	sub	sp, #16
 8011844:	af00      	add	r7, sp, #0
 8011846:	60f8      	str	r0, [r7, #12]
 8011848:	60b9      	str	r1, [r7, #8]
 801184a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011852:	2b01      	cmp	r3, #1
 8011854:	d101      	bne.n	801185a <HAL_TIM_OC_ConfigChannel+0x1a>
 8011856:	2302      	movs	r3, #2
 8011858:	e04e      	b.n	80118f8 <HAL_TIM_OC_ConfigChannel+0xb8>
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	2201      	movs	r2, #1
 801185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	2202      	movs	r2, #2
 8011866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2b0c      	cmp	r3, #12
 801186e:	d839      	bhi.n	80118e4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8011870:	a201      	add	r2, pc, #4	; (adr r2, 8011878 <HAL_TIM_OC_ConfigChannel+0x38>)
 8011872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011876:	bf00      	nop
 8011878:	080118ad 	.word	0x080118ad
 801187c:	080118e5 	.word	0x080118e5
 8011880:	080118e5 	.word	0x080118e5
 8011884:	080118e5 	.word	0x080118e5
 8011888:	080118bb 	.word	0x080118bb
 801188c:	080118e5 	.word	0x080118e5
 8011890:	080118e5 	.word	0x080118e5
 8011894:	080118e5 	.word	0x080118e5
 8011898:	080118c9 	.word	0x080118c9
 801189c:	080118e5 	.word	0x080118e5
 80118a0:	080118e5 	.word	0x080118e5
 80118a4:	080118e5 	.word	0x080118e5
 80118a8:	080118d7 	.word	0x080118d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	68b9      	ldr	r1, [r7, #8]
 80118b2:	4618      	mov	r0, r3
 80118b4:	f000 f9a8 	bl	8011c08 <TIM_OC1_SetConfig>
      break;
 80118b8:	e015      	b.n	80118e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	68b9      	ldr	r1, [r7, #8]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f000 fa11 	bl	8011ce8 <TIM_OC2_SetConfig>
      break;
 80118c6:	e00e      	b.n	80118e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	68b9      	ldr	r1, [r7, #8]
 80118ce:	4618      	mov	r0, r3
 80118d0:	f000 fa80 	bl	8011dd4 <TIM_OC3_SetConfig>
      break;
 80118d4:	e007      	b.n	80118e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	68b9      	ldr	r1, [r7, #8]
 80118dc:	4618      	mov	r0, r3
 80118de:	f000 faed 	bl	8011ebc <TIM_OC4_SetConfig>
      break;
 80118e2:	e000      	b.n	80118e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80118e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	2201      	movs	r2, #1
 80118ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2200      	movs	r2, #0
 80118f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80118f6:	2300      	movs	r3, #0
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3710      	adds	r7, #16
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b084      	sub	sp, #16
 8011904:	af00      	add	r7, sp, #0
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011912:	2b01      	cmp	r3, #1
 8011914:	d101      	bne.n	801191a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8011916:	2302      	movs	r3, #2
 8011918:	e0b4      	b.n	8011a84 <HAL_TIM_PWM_ConfigChannel+0x184>
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	2201      	movs	r2, #1
 801191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2202      	movs	r2, #2
 8011926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2b0c      	cmp	r3, #12
 801192e:	f200 809f 	bhi.w	8011a70 <HAL_TIM_PWM_ConfigChannel+0x170>
 8011932:	a201      	add	r2, pc, #4	; (adr r2, 8011938 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8011934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011938:	0801196d 	.word	0x0801196d
 801193c:	08011a71 	.word	0x08011a71
 8011940:	08011a71 	.word	0x08011a71
 8011944:	08011a71 	.word	0x08011a71
 8011948:	080119ad 	.word	0x080119ad
 801194c:	08011a71 	.word	0x08011a71
 8011950:	08011a71 	.word	0x08011a71
 8011954:	08011a71 	.word	0x08011a71
 8011958:	080119ef 	.word	0x080119ef
 801195c:	08011a71 	.word	0x08011a71
 8011960:	08011a71 	.word	0x08011a71
 8011964:	08011a71 	.word	0x08011a71
 8011968:	08011a2f 	.word	0x08011a2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	68b9      	ldr	r1, [r7, #8]
 8011972:	4618      	mov	r0, r3
 8011974:	f000 f948 	bl	8011c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	699a      	ldr	r2, [r3, #24]
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	f042 0208 	orr.w	r2, r2, #8
 8011986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	699a      	ldr	r2, [r3, #24]
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f022 0204 	bic.w	r2, r2, #4
 8011996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	6999      	ldr	r1, [r3, #24]
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	691a      	ldr	r2, [r3, #16]
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	430a      	orrs	r2, r1
 80119a8:	619a      	str	r2, [r3, #24]
      break;
 80119aa:	e062      	b.n	8011a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	68b9      	ldr	r1, [r7, #8]
 80119b2:	4618      	mov	r0, r3
 80119b4:	f000 f998 	bl	8011ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	699a      	ldr	r2, [r3, #24]
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80119c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	699a      	ldr	r2, [r3, #24]
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80119d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	6999      	ldr	r1, [r3, #24]
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	691b      	ldr	r3, [r3, #16]
 80119e2:	021a      	lsls	r2, r3, #8
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	430a      	orrs	r2, r1
 80119ea:	619a      	str	r2, [r3, #24]
      break;
 80119ec:	e041      	b.n	8011a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	68b9      	ldr	r1, [r7, #8]
 80119f4:	4618      	mov	r0, r3
 80119f6:	f000 f9ed 	bl	8011dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	69da      	ldr	r2, [r3, #28]
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	f042 0208 	orr.w	r2, r2, #8
 8011a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	69da      	ldr	r2, [r3, #28]
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	f022 0204 	bic.w	r2, r2, #4
 8011a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	69d9      	ldr	r1, [r3, #28]
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	691a      	ldr	r2, [r3, #16]
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	430a      	orrs	r2, r1
 8011a2a:	61da      	str	r2, [r3, #28]
      break;
 8011a2c:	e021      	b.n	8011a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	68b9      	ldr	r1, [r7, #8]
 8011a34:	4618      	mov	r0, r3
 8011a36:	f000 fa41 	bl	8011ebc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	69da      	ldr	r2, [r3, #28]
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	69da      	ldr	r2, [r3, #28]
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	69d9      	ldr	r1, [r3, #28]
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	691b      	ldr	r3, [r3, #16]
 8011a64:	021a      	lsls	r2, r3, #8
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	430a      	orrs	r2, r1
 8011a6c:	61da      	str	r2, [r3, #28]
      break;
 8011a6e:	e000      	b.n	8011a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8011a70:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	2201      	movs	r2, #1
 8011a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011a82:	2300      	movs	r3, #0
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3710      	adds	r7, #16
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b083      	sub	sp, #12
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011a94:	bf00      	nop
 8011a96:	370c      	adds	r7, #12
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9e:	4770      	bx	lr

08011aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b083      	sub	sp, #12
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011aa8:	bf00      	nop
 8011aaa:	370c      	adds	r7, #12
 8011aac:	46bd      	mov	sp, r7
 8011aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab2:	4770      	bx	lr

08011ab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b083      	sub	sp, #12
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011abc:	bf00      	nop
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b085      	sub	sp, #20
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	4a40      	ldr	r2, [pc, #256]	; (8011bdc <TIM_Base_SetConfig+0x114>)
 8011adc:	4293      	cmp	r3, r2
 8011ade:	d013      	beq.n	8011b08 <TIM_Base_SetConfig+0x40>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011ae6:	d00f      	beq.n	8011b08 <TIM_Base_SetConfig+0x40>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	4a3d      	ldr	r2, [pc, #244]	; (8011be0 <TIM_Base_SetConfig+0x118>)
 8011aec:	4293      	cmp	r3, r2
 8011aee:	d00b      	beq.n	8011b08 <TIM_Base_SetConfig+0x40>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	4a3c      	ldr	r2, [pc, #240]	; (8011be4 <TIM_Base_SetConfig+0x11c>)
 8011af4:	4293      	cmp	r3, r2
 8011af6:	d007      	beq.n	8011b08 <TIM_Base_SetConfig+0x40>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	4a3b      	ldr	r2, [pc, #236]	; (8011be8 <TIM_Base_SetConfig+0x120>)
 8011afc:	4293      	cmp	r3, r2
 8011afe:	d003      	beq.n	8011b08 <TIM_Base_SetConfig+0x40>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	4a3a      	ldr	r2, [pc, #232]	; (8011bec <TIM_Base_SetConfig+0x124>)
 8011b04:	4293      	cmp	r3, r2
 8011b06:	d108      	bne.n	8011b1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	68fa      	ldr	r2, [r7, #12]
 8011b16:	4313      	orrs	r3, r2
 8011b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	4a2f      	ldr	r2, [pc, #188]	; (8011bdc <TIM_Base_SetConfig+0x114>)
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	d02b      	beq.n	8011b7a <TIM_Base_SetConfig+0xb2>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b28:	d027      	beq.n	8011b7a <TIM_Base_SetConfig+0xb2>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	4a2c      	ldr	r2, [pc, #176]	; (8011be0 <TIM_Base_SetConfig+0x118>)
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d023      	beq.n	8011b7a <TIM_Base_SetConfig+0xb2>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	4a2b      	ldr	r2, [pc, #172]	; (8011be4 <TIM_Base_SetConfig+0x11c>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d01f      	beq.n	8011b7a <TIM_Base_SetConfig+0xb2>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	4a2a      	ldr	r2, [pc, #168]	; (8011be8 <TIM_Base_SetConfig+0x120>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d01b      	beq.n	8011b7a <TIM_Base_SetConfig+0xb2>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4a29      	ldr	r2, [pc, #164]	; (8011bec <TIM_Base_SetConfig+0x124>)
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d017      	beq.n	8011b7a <TIM_Base_SetConfig+0xb2>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4a28      	ldr	r2, [pc, #160]	; (8011bf0 <TIM_Base_SetConfig+0x128>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d013      	beq.n	8011b7a <TIM_Base_SetConfig+0xb2>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4a27      	ldr	r2, [pc, #156]	; (8011bf4 <TIM_Base_SetConfig+0x12c>)
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d00f      	beq.n	8011b7a <TIM_Base_SetConfig+0xb2>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4a26      	ldr	r2, [pc, #152]	; (8011bf8 <TIM_Base_SetConfig+0x130>)
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d00b      	beq.n	8011b7a <TIM_Base_SetConfig+0xb2>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	4a25      	ldr	r2, [pc, #148]	; (8011bfc <TIM_Base_SetConfig+0x134>)
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d007      	beq.n	8011b7a <TIM_Base_SetConfig+0xb2>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	4a24      	ldr	r2, [pc, #144]	; (8011c00 <TIM_Base_SetConfig+0x138>)
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	d003      	beq.n	8011b7a <TIM_Base_SetConfig+0xb2>
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	4a23      	ldr	r2, [pc, #140]	; (8011c04 <TIM_Base_SetConfig+0x13c>)
 8011b76:	4293      	cmp	r3, r2
 8011b78:	d108      	bne.n	8011b8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	68db      	ldr	r3, [r3, #12]
 8011b86:	68fa      	ldr	r2, [r7, #12]
 8011b88:	4313      	orrs	r3, r2
 8011b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	695b      	ldr	r3, [r3, #20]
 8011b96:	4313      	orrs	r3, r2
 8011b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	68fa      	ldr	r2, [r7, #12]
 8011b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	689a      	ldr	r2, [r3, #8]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	681a      	ldr	r2, [r3, #0]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	4a0a      	ldr	r2, [pc, #40]	; (8011bdc <TIM_Base_SetConfig+0x114>)
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d003      	beq.n	8011bc0 <TIM_Base_SetConfig+0xf8>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	4a0c      	ldr	r2, [pc, #48]	; (8011bec <TIM_Base_SetConfig+0x124>)
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	d103      	bne.n	8011bc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	691a      	ldr	r2, [r3, #16]
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2201      	movs	r2, #1
 8011bcc:	615a      	str	r2, [r3, #20]
}
 8011bce:	bf00      	nop
 8011bd0:	3714      	adds	r7, #20
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd8:	4770      	bx	lr
 8011bda:	bf00      	nop
 8011bdc:	40010000 	.word	0x40010000
 8011be0:	40000400 	.word	0x40000400
 8011be4:	40000800 	.word	0x40000800
 8011be8:	40000c00 	.word	0x40000c00
 8011bec:	40010400 	.word	0x40010400
 8011bf0:	40014000 	.word	0x40014000
 8011bf4:	40014400 	.word	0x40014400
 8011bf8:	40014800 	.word	0x40014800
 8011bfc:	40001800 	.word	0x40001800
 8011c00:	40001c00 	.word	0x40001c00
 8011c04:	40002000 	.word	0x40002000

08011c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011c08:	b480      	push	{r7}
 8011c0a:	b087      	sub	sp, #28
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6a1b      	ldr	r3, [r3, #32]
 8011c16:	f023 0201 	bic.w	r2, r3, #1
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6a1b      	ldr	r3, [r3, #32]
 8011c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	699b      	ldr	r3, [r3, #24]
 8011c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	f023 0303 	bic.w	r3, r3, #3
 8011c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	68fa      	ldr	r2, [r7, #12]
 8011c46:	4313      	orrs	r3, r2
 8011c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	f023 0302 	bic.w	r3, r3, #2
 8011c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	689b      	ldr	r3, [r3, #8]
 8011c56:	697a      	ldr	r2, [r7, #20]
 8011c58:	4313      	orrs	r3, r2
 8011c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	4a20      	ldr	r2, [pc, #128]	; (8011ce0 <TIM_OC1_SetConfig+0xd8>)
 8011c60:	4293      	cmp	r3, r2
 8011c62:	d003      	beq.n	8011c6c <TIM_OC1_SetConfig+0x64>
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	4a1f      	ldr	r2, [pc, #124]	; (8011ce4 <TIM_OC1_SetConfig+0xdc>)
 8011c68:	4293      	cmp	r3, r2
 8011c6a:	d10c      	bne.n	8011c86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	f023 0308 	bic.w	r3, r3, #8
 8011c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	697a      	ldr	r2, [r7, #20]
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	f023 0304 	bic.w	r3, r3, #4
 8011c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	4a15      	ldr	r2, [pc, #84]	; (8011ce0 <TIM_OC1_SetConfig+0xd8>)
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	d003      	beq.n	8011c96 <TIM_OC1_SetConfig+0x8e>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	4a14      	ldr	r2, [pc, #80]	; (8011ce4 <TIM_OC1_SetConfig+0xdc>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d111      	bne.n	8011cba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	695b      	ldr	r3, [r3, #20]
 8011caa:	693a      	ldr	r2, [r7, #16]
 8011cac:	4313      	orrs	r3, r2
 8011cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	699b      	ldr	r3, [r3, #24]
 8011cb4:	693a      	ldr	r2, [r7, #16]
 8011cb6:	4313      	orrs	r3, r2
 8011cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	693a      	ldr	r2, [r7, #16]
 8011cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	685a      	ldr	r2, [r3, #4]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	697a      	ldr	r2, [r7, #20]
 8011cd2:	621a      	str	r2, [r3, #32]
}
 8011cd4:	bf00      	nop
 8011cd6:	371c      	adds	r7, #28
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr
 8011ce0:	40010000 	.word	0x40010000
 8011ce4:	40010400 	.word	0x40010400

08011ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011ce8:	b480      	push	{r7}
 8011cea:	b087      	sub	sp, #28
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6a1b      	ldr	r3, [r3, #32]
 8011cf6:	f023 0210 	bic.w	r2, r3, #16
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6a1b      	ldr	r3, [r3, #32]
 8011d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	699b      	ldr	r3, [r3, #24]
 8011d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	021b      	lsls	r3, r3, #8
 8011d26:	68fa      	ldr	r2, [r7, #12]
 8011d28:	4313      	orrs	r3, r2
 8011d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	f023 0320 	bic.w	r3, r3, #32
 8011d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	689b      	ldr	r3, [r3, #8]
 8011d38:	011b      	lsls	r3, r3, #4
 8011d3a:	697a      	ldr	r2, [r7, #20]
 8011d3c:	4313      	orrs	r3, r2
 8011d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	4a22      	ldr	r2, [pc, #136]	; (8011dcc <TIM_OC2_SetConfig+0xe4>)
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d003      	beq.n	8011d50 <TIM_OC2_SetConfig+0x68>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	4a21      	ldr	r2, [pc, #132]	; (8011dd0 <TIM_OC2_SetConfig+0xe8>)
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	d10d      	bne.n	8011d6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	011b      	lsls	r3, r3, #4
 8011d5e:	697a      	ldr	r2, [r7, #20]
 8011d60:	4313      	orrs	r3, r2
 8011d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	4a17      	ldr	r2, [pc, #92]	; (8011dcc <TIM_OC2_SetConfig+0xe4>)
 8011d70:	4293      	cmp	r3, r2
 8011d72:	d003      	beq.n	8011d7c <TIM_OC2_SetConfig+0x94>
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	4a16      	ldr	r2, [pc, #88]	; (8011dd0 <TIM_OC2_SetConfig+0xe8>)
 8011d78:	4293      	cmp	r3, r2
 8011d7a:	d113      	bne.n	8011da4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011d82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	695b      	ldr	r3, [r3, #20]
 8011d90:	009b      	lsls	r3, r3, #2
 8011d92:	693a      	ldr	r2, [r7, #16]
 8011d94:	4313      	orrs	r3, r2
 8011d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	699b      	ldr	r3, [r3, #24]
 8011d9c:	009b      	lsls	r3, r3, #2
 8011d9e:	693a      	ldr	r2, [r7, #16]
 8011da0:	4313      	orrs	r3, r2
 8011da2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	693a      	ldr	r2, [r7, #16]
 8011da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	68fa      	ldr	r2, [r7, #12]
 8011dae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	685a      	ldr	r2, [r3, #4]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	697a      	ldr	r2, [r7, #20]
 8011dbc:	621a      	str	r2, [r3, #32]
}
 8011dbe:	bf00      	nop
 8011dc0:	371c      	adds	r7, #28
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	40010000 	.word	0x40010000
 8011dd0:	40010400 	.word	0x40010400

08011dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b087      	sub	sp, #28
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6a1b      	ldr	r3, [r3, #32]
 8011de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6a1b      	ldr	r3, [r3, #32]
 8011dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	69db      	ldr	r3, [r3, #28]
 8011dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	f023 0303 	bic.w	r3, r3, #3
 8011e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	68fa      	ldr	r2, [r7, #12]
 8011e12:	4313      	orrs	r3, r2
 8011e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	021b      	lsls	r3, r3, #8
 8011e24:	697a      	ldr	r2, [r7, #20]
 8011e26:	4313      	orrs	r3, r2
 8011e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	4a21      	ldr	r2, [pc, #132]	; (8011eb4 <TIM_OC3_SetConfig+0xe0>)
 8011e2e:	4293      	cmp	r3, r2
 8011e30:	d003      	beq.n	8011e3a <TIM_OC3_SetConfig+0x66>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	4a20      	ldr	r2, [pc, #128]	; (8011eb8 <TIM_OC3_SetConfig+0xe4>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d10d      	bne.n	8011e56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	68db      	ldr	r3, [r3, #12]
 8011e46:	021b      	lsls	r3, r3, #8
 8011e48:	697a      	ldr	r2, [r7, #20]
 8011e4a:	4313      	orrs	r3, r2
 8011e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	4a16      	ldr	r2, [pc, #88]	; (8011eb4 <TIM_OC3_SetConfig+0xe0>)
 8011e5a:	4293      	cmp	r3, r2
 8011e5c:	d003      	beq.n	8011e66 <TIM_OC3_SetConfig+0x92>
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	4a15      	ldr	r2, [pc, #84]	; (8011eb8 <TIM_OC3_SetConfig+0xe4>)
 8011e62:	4293      	cmp	r3, r2
 8011e64:	d113      	bne.n	8011e8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011e6e:	693b      	ldr	r3, [r7, #16]
 8011e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	695b      	ldr	r3, [r3, #20]
 8011e7a:	011b      	lsls	r3, r3, #4
 8011e7c:	693a      	ldr	r2, [r7, #16]
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	699b      	ldr	r3, [r3, #24]
 8011e86:	011b      	lsls	r3, r3, #4
 8011e88:	693a      	ldr	r2, [r7, #16]
 8011e8a:	4313      	orrs	r3, r2
 8011e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	693a      	ldr	r2, [r7, #16]
 8011e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	68fa      	ldr	r2, [r7, #12]
 8011e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	685a      	ldr	r2, [r3, #4]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	697a      	ldr	r2, [r7, #20]
 8011ea6:	621a      	str	r2, [r3, #32]
}
 8011ea8:	bf00      	nop
 8011eaa:	371c      	adds	r7, #28
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr
 8011eb4:	40010000 	.word	0x40010000
 8011eb8:	40010400 	.word	0x40010400

08011ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011ebc:	b480      	push	{r7}
 8011ebe:	b087      	sub	sp, #28
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6a1b      	ldr	r3, [r3, #32]
 8011eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6a1b      	ldr	r3, [r3, #32]
 8011ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	69db      	ldr	r3, [r3, #28]
 8011ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	021b      	lsls	r3, r3, #8
 8011efa:	68fa      	ldr	r2, [r7, #12]
 8011efc:	4313      	orrs	r3, r2
 8011efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	689b      	ldr	r3, [r3, #8]
 8011f0c:	031b      	lsls	r3, r3, #12
 8011f0e:	693a      	ldr	r2, [r7, #16]
 8011f10:	4313      	orrs	r3, r2
 8011f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	4a12      	ldr	r2, [pc, #72]	; (8011f60 <TIM_OC4_SetConfig+0xa4>)
 8011f18:	4293      	cmp	r3, r2
 8011f1a:	d003      	beq.n	8011f24 <TIM_OC4_SetConfig+0x68>
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	4a11      	ldr	r2, [pc, #68]	; (8011f64 <TIM_OC4_SetConfig+0xa8>)
 8011f20:	4293      	cmp	r3, r2
 8011f22:	d109      	bne.n	8011f38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	695b      	ldr	r3, [r3, #20]
 8011f30:	019b      	lsls	r3, r3, #6
 8011f32:	697a      	ldr	r2, [r7, #20]
 8011f34:	4313      	orrs	r3, r2
 8011f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	697a      	ldr	r2, [r7, #20]
 8011f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	685a      	ldr	r2, [r3, #4]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	693a      	ldr	r2, [r7, #16]
 8011f50:	621a      	str	r2, [r3, #32]
}
 8011f52:	bf00      	nop
 8011f54:	371c      	adds	r7, #28
 8011f56:	46bd      	mov	sp, r7
 8011f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5c:	4770      	bx	lr
 8011f5e:	bf00      	nop
 8011f60:	40010000 	.word	0x40010000
 8011f64:	40010400 	.word	0x40010400

08011f68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b087      	sub	sp, #28
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	f003 031f 	and.w	r3, r3, #31
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8011f80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	6a1a      	ldr	r2, [r3, #32]
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	43db      	mvns	r3, r3
 8011f8a:	401a      	ands	r2, r3
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	6a1a      	ldr	r2, [r3, #32]
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	f003 031f 	and.w	r3, r3, #31
 8011f9a:	6879      	ldr	r1, [r7, #4]
 8011f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8011fa0:	431a      	orrs	r2, r3
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	621a      	str	r2, [r3, #32]
}
 8011fa6:	bf00      	nop
 8011fa8:	371c      	adds	r7, #28
 8011faa:	46bd      	mov	sp, r7
 8011fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb0:	4770      	bx	lr
	...

08011fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011fb4:	b480      	push	{r7}
 8011fb6:	b085      	sub	sp, #20
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d101      	bne.n	8011fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011fc8:	2302      	movs	r3, #2
 8011fca:	e05a      	b.n	8012082 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2201      	movs	r2, #1
 8011fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2202      	movs	r2, #2
 8011fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	689b      	ldr	r3, [r3, #8]
 8011fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	68fa      	ldr	r2, [r7, #12]
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	68fa      	ldr	r2, [r7, #12]
 8012004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4a21      	ldr	r2, [pc, #132]	; (8012090 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801200c:	4293      	cmp	r3, r2
 801200e:	d022      	beq.n	8012056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012018:	d01d      	beq.n	8012056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	4a1d      	ldr	r2, [pc, #116]	; (8012094 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012020:	4293      	cmp	r3, r2
 8012022:	d018      	beq.n	8012056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	4a1b      	ldr	r2, [pc, #108]	; (8012098 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801202a:	4293      	cmp	r3, r2
 801202c:	d013      	beq.n	8012056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	4a1a      	ldr	r2, [pc, #104]	; (801209c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8012034:	4293      	cmp	r3, r2
 8012036:	d00e      	beq.n	8012056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4a18      	ldr	r2, [pc, #96]	; (80120a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801203e:	4293      	cmp	r3, r2
 8012040:	d009      	beq.n	8012056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	4a17      	ldr	r2, [pc, #92]	; (80120a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8012048:	4293      	cmp	r3, r2
 801204a:	d004      	beq.n	8012056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	4a15      	ldr	r2, [pc, #84]	; (80120a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8012052:	4293      	cmp	r3, r2
 8012054:	d10c      	bne.n	8012070 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801205c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	685b      	ldr	r3, [r3, #4]
 8012062:	68ba      	ldr	r2, [r7, #8]
 8012064:	4313      	orrs	r3, r2
 8012066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	68ba      	ldr	r2, [r7, #8]
 801206e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2201      	movs	r2, #1
 8012074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012080:	2300      	movs	r3, #0
}
 8012082:	4618      	mov	r0, r3
 8012084:	3714      	adds	r7, #20
 8012086:	46bd      	mov	sp, r7
 8012088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	40010000 	.word	0x40010000
 8012094:	40000400 	.word	0x40000400
 8012098:	40000800 	.word	0x40000800
 801209c:	40000c00 	.word	0x40000c00
 80120a0:	40010400 	.word	0x40010400
 80120a4:	40014000 	.word	0x40014000
 80120a8:	40001800 	.word	0x40001800

080120ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80120ac:	b480      	push	{r7}
 80120ae:	b085      	sub	sp, #20
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80120b6:	2300      	movs	r3, #0
 80120b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80120c0:	2b01      	cmp	r3, #1
 80120c2:	d101      	bne.n	80120c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80120c4:	2302      	movs	r3, #2
 80120c6:	e03d      	b.n	8012144 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2201      	movs	r2, #1
 80120cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	68db      	ldr	r3, [r3, #12]
 80120da:	4313      	orrs	r3, r2
 80120dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	689b      	ldr	r3, [r3, #8]
 80120e8:	4313      	orrs	r3, r2
 80120ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	4313      	orrs	r3, r2
 80120f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	4313      	orrs	r3, r2
 8012106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	691b      	ldr	r3, [r3, #16]
 8012112:	4313      	orrs	r3, r2
 8012114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	695b      	ldr	r3, [r3, #20]
 8012120:	4313      	orrs	r3, r2
 8012122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	69db      	ldr	r3, [r3, #28]
 801212e:	4313      	orrs	r3, r2
 8012130:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	68fa      	ldr	r2, [r7, #12]
 8012138:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2200      	movs	r2, #0
 801213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012142:	2300      	movs	r3, #0
}
 8012144:	4618      	mov	r0, r3
 8012146:	3714      	adds	r7, #20
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012158:	bf00      	nop
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012164:	b480      	push	{r7}
 8012166:	b083      	sub	sp, #12
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801216c:	bf00      	nop
 801216e:	370c      	adds	r7, #12
 8012170:	46bd      	mov	sp, r7
 8012172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012176:	4770      	bx	lr

08012178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d101      	bne.n	801218a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012186:	2301      	movs	r3, #1
 8012188:	e03f      	b.n	801220a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012190:	b2db      	uxtb	r3, r3
 8012192:	2b00      	cmp	r3, #0
 8012194:	d106      	bne.n	80121a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2200      	movs	r2, #0
 801219a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7f0 f828 	bl	80021f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2224      	movs	r2, #36	; 0x24
 80121a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	68da      	ldr	r2, [r3, #12]
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80121ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f000 fc23 	bl	8012a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	691a      	ldr	r2, [r3, #16]
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80121d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	695a      	ldr	r2, [r3, #20]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80121e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	68da      	ldr	r2, [r3, #12]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80121f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2200      	movs	r2, #0
 80121f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2220      	movs	r2, #32
 80121fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2220      	movs	r2, #32
 8012204:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8012208:	2300      	movs	r3, #0
}
 801220a:	4618      	mov	r0, r3
 801220c:	3708      	adds	r7, #8
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
	...

08012214 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b086      	sub	sp, #24
 8012218:	af00      	add	r7, sp, #0
 801221a:	60f8      	str	r0, [r7, #12]
 801221c:	60b9      	str	r1, [r7, #8]
 801221e:	4613      	mov	r3, r2
 8012220:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012228:	b2db      	uxtb	r3, r3
 801222a:	2b20      	cmp	r3, #32
 801222c:	d153      	bne.n	80122d6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d002      	beq.n	801223a <HAL_UART_Transmit_DMA+0x26>
 8012234:	88fb      	ldrh	r3, [r7, #6]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d101      	bne.n	801223e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801223a:	2301      	movs	r3, #1
 801223c:	e04c      	b.n	80122d8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012244:	2b01      	cmp	r3, #1
 8012246:	d101      	bne.n	801224c <HAL_UART_Transmit_DMA+0x38>
 8012248:	2302      	movs	r3, #2
 801224a:	e045      	b.n	80122d8 <HAL_UART_Transmit_DMA+0xc4>
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2201      	movs	r2, #1
 8012250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8012254:	68ba      	ldr	r2, [r7, #8]
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	88fa      	ldrh	r2, [r7, #6]
 801225e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	88fa      	ldrh	r2, [r7, #6]
 8012264:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	2200      	movs	r2, #0
 801226a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	2221      	movs	r2, #33	; 0x21
 8012270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012278:	4a19      	ldr	r2, [pc, #100]	; (80122e0 <HAL_UART_Transmit_DMA+0xcc>)
 801227a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012280:	4a18      	ldr	r2, [pc, #96]	; (80122e4 <HAL_UART_Transmit_DMA+0xd0>)
 8012282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012288:	4a17      	ldr	r2, [pc, #92]	; (80122e8 <HAL_UART_Transmit_DMA+0xd4>)
 801228a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012290:	2200      	movs	r2, #0
 8012292:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8012294:	f107 0308 	add.w	r3, r7, #8
 8012298:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	6819      	ldr	r1, [r3, #0]
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	3304      	adds	r3, #4
 80122a8:	461a      	mov	r2, r3
 80122aa:	88fb      	ldrh	r3, [r7, #6]
 80122ac:	f7fd fa96 	bl	800f7dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80122b8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2200      	movs	r2, #0
 80122be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	695a      	ldr	r2, [r3, #20]
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80122d0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80122d2:	2300      	movs	r3, #0
 80122d4:	e000      	b.n	80122d8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80122d6:	2302      	movs	r3, #2
  }
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3718      	adds	r7, #24
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}
 80122e0:	08012615 	.word	0x08012615
 80122e4:	08012667 	.word	0x08012667
 80122e8:	08012707 	.word	0x08012707

080122ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b086      	sub	sp, #24
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	60f8      	str	r0, [r7, #12]
 80122f4:	60b9      	str	r1, [r7, #8]
 80122f6:	4613      	mov	r3, r2
 80122f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012300:	b2db      	uxtb	r3, r3
 8012302:	2b20      	cmp	r3, #32
 8012304:	d166      	bne.n	80123d4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d002      	beq.n	8012312 <HAL_UART_Receive_DMA+0x26>
 801230c:	88fb      	ldrh	r3, [r7, #6]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d101      	bne.n	8012316 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8012312:	2301      	movs	r3, #1
 8012314:	e05f      	b.n	80123d6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801231c:	2b01      	cmp	r3, #1
 801231e:	d101      	bne.n	8012324 <HAL_UART_Receive_DMA+0x38>
 8012320:	2302      	movs	r3, #2
 8012322:	e058      	b.n	80123d6 <HAL_UART_Receive_DMA+0xea>
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2201      	movs	r2, #1
 8012328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801232c:	68ba      	ldr	r2, [r7, #8]
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	88fa      	ldrh	r2, [r7, #6]
 8012336:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	2200      	movs	r2, #0
 801233c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2222      	movs	r2, #34	; 0x22
 8012342:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801234a:	4a25      	ldr	r2, [pc, #148]	; (80123e0 <HAL_UART_Receive_DMA+0xf4>)
 801234c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012352:	4a24      	ldr	r2, [pc, #144]	; (80123e4 <HAL_UART_Receive_DMA+0xf8>)
 8012354:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801235a:	4a23      	ldr	r2, [pc, #140]	; (80123e8 <HAL_UART_Receive_DMA+0xfc>)
 801235c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012362:	2200      	movs	r2, #0
 8012364:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8012366:	f107 0308 	add.w	r3, r7, #8
 801236a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	3304      	adds	r3, #4
 8012376:	4619      	mov	r1, r3
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	88fb      	ldrh	r3, [r7, #6]
 801237e:	f7fd fa2d 	bl	800f7dc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8012382:	2300      	movs	r3, #0
 8012384:	613b      	str	r3, [r7, #16]
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	613b      	str	r3, [r7, #16]
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	613b      	str	r3, [r7, #16]
 8012396:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2200      	movs	r2, #0
 801239c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	68da      	ldr	r2, [r3, #12]
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80123ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	695a      	ldr	r2, [r3, #20]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	f042 0201 	orr.w	r2, r2, #1
 80123be:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	695a      	ldr	r2, [r3, #20]
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80123ce:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80123d0:	2300      	movs	r3, #0
 80123d2:	e000      	b.n	80123d6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80123d4:	2302      	movs	r3, #2
  }
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3718      	adds	r7, #24
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	08012683 	.word	0x08012683
 80123e4:	080126eb 	.word	0x080126eb
 80123e8:	08012707 	.word	0x08012707

080123ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b088      	sub	sp, #32
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	68db      	ldr	r3, [r3, #12]
 8012402:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	695b      	ldr	r3, [r3, #20]
 801240a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 801240c:	2300      	movs	r3, #0
 801240e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8012410:	2300      	movs	r3, #0
 8012412:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	f003 030f 	and.w	r3, r3, #15
 801241a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d10d      	bne.n	801243e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012422:	69fb      	ldr	r3, [r7, #28]
 8012424:	f003 0320 	and.w	r3, r3, #32
 8012428:	2b00      	cmp	r3, #0
 801242a:	d008      	beq.n	801243e <HAL_UART_IRQHandler+0x52>
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	f003 0320 	and.w	r3, r3, #32
 8012432:	2b00      	cmp	r3, #0
 8012434:	d003      	beq.n	801243e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 fa65 	bl	8012906 <UART_Receive_IT>
      return;
 801243c:	e0d0      	b.n	80125e0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	2b00      	cmp	r3, #0
 8012442:	f000 80b0 	beq.w	80125a6 <HAL_UART_IRQHandler+0x1ba>
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	f003 0301 	and.w	r3, r3, #1
 801244c:	2b00      	cmp	r3, #0
 801244e:	d105      	bne.n	801245c <HAL_UART_IRQHandler+0x70>
 8012450:	69bb      	ldr	r3, [r7, #24]
 8012452:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8012456:	2b00      	cmp	r3, #0
 8012458:	f000 80a5 	beq.w	80125a6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	f003 0301 	and.w	r3, r3, #1
 8012462:	2b00      	cmp	r3, #0
 8012464:	d00a      	beq.n	801247c <HAL_UART_IRQHandler+0x90>
 8012466:	69bb      	ldr	r3, [r7, #24]
 8012468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801246c:	2b00      	cmp	r3, #0
 801246e:	d005      	beq.n	801247c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012474:	f043 0201 	orr.w	r2, r3, #1
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	f003 0304 	and.w	r3, r3, #4
 8012482:	2b00      	cmp	r3, #0
 8012484:	d00a      	beq.n	801249c <HAL_UART_IRQHandler+0xb0>
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	f003 0301 	and.w	r3, r3, #1
 801248c:	2b00      	cmp	r3, #0
 801248e:	d005      	beq.n	801249c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012494:	f043 0202 	orr.w	r2, r3, #2
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	f003 0302 	and.w	r3, r3, #2
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d00a      	beq.n	80124bc <HAL_UART_IRQHandler+0xd0>
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	f003 0301 	and.w	r3, r3, #1
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d005      	beq.n	80124bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124b4:	f043 0204 	orr.w	r2, r3, #4
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80124bc:	69fb      	ldr	r3, [r7, #28]
 80124be:	f003 0308 	and.w	r3, r3, #8
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00f      	beq.n	80124e6 <HAL_UART_IRQHandler+0xfa>
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	f003 0320 	and.w	r3, r3, #32
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d104      	bne.n	80124da <HAL_UART_IRQHandler+0xee>
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	f003 0301 	and.w	r3, r3, #1
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d005      	beq.n	80124e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124de:	f043 0208 	orr.w	r2, r3, #8
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d077      	beq.n	80125de <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	f003 0320 	and.w	r3, r3, #32
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d007      	beq.n	8012508 <HAL_UART_IRQHandler+0x11c>
 80124f8:	69bb      	ldr	r3, [r7, #24]
 80124fa:	f003 0320 	and.w	r3, r3, #32
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d002      	beq.n	8012508 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f000 f9ff 	bl	8012906 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	695b      	ldr	r3, [r3, #20]
 801250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012512:	2b40      	cmp	r3, #64	; 0x40
 8012514:	bf0c      	ite	eq
 8012516:	2301      	moveq	r3, #1
 8012518:	2300      	movne	r3, #0
 801251a:	b2db      	uxtb	r3, r3
 801251c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012522:	f003 0308 	and.w	r3, r3, #8
 8012526:	2b00      	cmp	r3, #0
 8012528:	d102      	bne.n	8012530 <HAL_UART_IRQHandler+0x144>
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d031      	beq.n	8012594 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f000 f948 	bl	80127c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	695b      	ldr	r3, [r3, #20]
 801253c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012540:	2b40      	cmp	r3, #64	; 0x40
 8012542:	d123      	bne.n	801258c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	695a      	ldr	r2, [r3, #20]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012552:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012558:	2b00      	cmp	r3, #0
 801255a:	d013      	beq.n	8012584 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012560:	4a21      	ldr	r2, [pc, #132]	; (80125e8 <HAL_UART_IRQHandler+0x1fc>)
 8012562:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012568:	4618      	mov	r0, r3
 801256a:	f7fd f98f 	bl	800f88c <HAL_DMA_Abort_IT>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	d016      	beq.n	80125a2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801257a:	687a      	ldr	r2, [r7, #4]
 801257c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801257e:	4610      	mov	r0, r2
 8012580:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012582:	e00e      	b.n	80125a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f7fb fe37 	bl	800e1f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801258a:	e00a      	b.n	80125a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f7fb fe33 	bl	800e1f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012592:	e006      	b.n	80125a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f7fb fe2f 	bl	800e1f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2200      	movs	r2, #0
 801259e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80125a0:	e01d      	b.n	80125de <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80125a2:	bf00      	nop
    return;
 80125a4:	e01b      	b.n	80125de <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d008      	beq.n	80125c2 <HAL_UART_IRQHandler+0x1d6>
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d003      	beq.n	80125c2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f000 f935 	bl	801282a <UART_Transmit_IT>
    return;
 80125c0:	e00e      	b.n	80125e0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80125c2:	69fb      	ldr	r3, [r7, #28]
 80125c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d009      	beq.n	80125e0 <HAL_UART_IRQHandler+0x1f4>
 80125cc:	69bb      	ldr	r3, [r7, #24]
 80125ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d004      	beq.n	80125e0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 f97d 	bl	80128d6 <UART_EndTransmit_IT>
    return;
 80125dc:	e000      	b.n	80125e0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80125de:	bf00      	nop
  }
}
 80125e0:	3720      	adds	r7, #32
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
 80125e6:	bf00      	nop
 80125e8:	08012803 	.word	0x08012803

080125ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b083      	sub	sp, #12
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80125f4:	bf00      	nop
 80125f6:	370c      	adds	r7, #12
 80125f8:	46bd      	mov	sp, r7
 80125fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fe:	4770      	bx	lr

08012600 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012600:	b480      	push	{r7}
 8012602:	b083      	sub	sp, #12
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8012608:	bf00      	nop
 801260a:	370c      	adds	r7, #12
 801260c:	46bd      	mov	sp, r7
 801260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012612:	4770      	bx	lr

08012614 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b084      	sub	sp, #16
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012620:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801262c:	2b00      	cmp	r3, #0
 801262e:	d113      	bne.n	8012658 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2200      	movs	r2, #0
 8012634:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	695a      	ldr	r2, [r3, #20]
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012644:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	68da      	ldr	r2, [r3, #12]
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012654:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012656:	e002      	b.n	801265e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8012658:	68f8      	ldr	r0, [r7, #12]
 801265a:	f7fb fd73 	bl	800e144 <HAL_UART_TxCpltCallback>
}
 801265e:	bf00      	nop
 8012660:	3710      	adds	r7, #16
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}

08012666 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012666:	b580      	push	{r7, lr}
 8012668:	b084      	sub	sp, #16
 801266a:	af00      	add	r7, sp, #0
 801266c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012672:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012674:	68f8      	ldr	r0, [r7, #12]
 8012676:	f7ff ffb9 	bl	80125ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801267a:	bf00      	nop
 801267c:	3710      	adds	r7, #16
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}

08012682 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b084      	sub	sp, #16
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801268e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801269a:	2b00      	cmp	r3, #0
 801269c:	d11e      	bne.n	80126dc <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	2200      	movs	r2, #0
 80126a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	68da      	ldr	r2, [r3, #12]
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80126b2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	695a      	ldr	r2, [r3, #20]
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	f022 0201 	bic.w	r2, r2, #1
 80126c2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	695a      	ldr	r2, [r3, #20]
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80126d2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	2220      	movs	r2, #32
 80126d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80126dc:	68f8      	ldr	r0, [r7, #12]
 80126de:	f7fb fd81 	bl	800e1e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80126e2:	bf00      	nop
 80126e4:	3710      	adds	r7, #16
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}

080126ea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80126ea:	b580      	push	{r7, lr}
 80126ec:	b084      	sub	sp, #16
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80126f8:	68f8      	ldr	r0, [r7, #12]
 80126fa:	f7ff ff81 	bl	8012600 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80126fe:	bf00      	nop
 8012700:	3710      	adds	r7, #16
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}

08012706 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012706:	b580      	push	{r7, lr}
 8012708:	b084      	sub	sp, #16
 801270a:	af00      	add	r7, sp, #0
 801270c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801270e:	2300      	movs	r3, #0
 8012710:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012716:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	695b      	ldr	r3, [r3, #20]
 801271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012722:	2b80      	cmp	r3, #128	; 0x80
 8012724:	bf0c      	ite	eq
 8012726:	2301      	moveq	r3, #1
 8012728:	2300      	movne	r3, #0
 801272a:	b2db      	uxtb	r3, r3
 801272c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012734:	b2db      	uxtb	r3, r3
 8012736:	2b21      	cmp	r3, #33	; 0x21
 8012738:	d108      	bne.n	801274c <UART_DMAError+0x46>
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d005      	beq.n	801274c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	2200      	movs	r2, #0
 8012744:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8012746:	68b8      	ldr	r0, [r7, #8]
 8012748:	f000 f827 	bl	801279a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	695b      	ldr	r3, [r3, #20]
 8012752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012756:	2b40      	cmp	r3, #64	; 0x40
 8012758:	bf0c      	ite	eq
 801275a:	2301      	moveq	r3, #1
 801275c:	2300      	movne	r3, #0
 801275e:	b2db      	uxtb	r3, r3
 8012760:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012768:	b2db      	uxtb	r3, r3
 801276a:	2b22      	cmp	r3, #34	; 0x22
 801276c:	d108      	bne.n	8012780 <UART_DMAError+0x7a>
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d005      	beq.n	8012780 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	2200      	movs	r2, #0
 8012778:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801277a:	68b8      	ldr	r0, [r7, #8]
 801277c:	f000 f823 	bl	80127c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012784:	f043 0210 	orr.w	r2, r3, #16
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801278c:	68b8      	ldr	r0, [r7, #8]
 801278e:	f7fb fd33 	bl	800e1f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012792:	bf00      	nop
 8012794:	3710      	adds	r7, #16
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}

0801279a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801279a:	b480      	push	{r7}
 801279c:	b083      	sub	sp, #12
 801279e:	af00      	add	r7, sp, #0
 80127a0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	68da      	ldr	r2, [r3, #12]
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80127b0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2220      	movs	r2, #32
 80127b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80127ba:	bf00      	nop
 80127bc:	370c      	adds	r7, #12
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr

080127c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80127c6:	b480      	push	{r7}
 80127c8:	b083      	sub	sp, #12
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	68da      	ldr	r2, [r3, #12]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80127dc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	695a      	ldr	r2, [r3, #20]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f022 0201 	bic.w	r2, r2, #1
 80127ec:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2220      	movs	r2, #32
 80127f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80127f6:	bf00      	nop
 80127f8:	370c      	adds	r7, #12
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr

08012802 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012802:	b580      	push	{r7, lr}
 8012804:	b084      	sub	sp, #16
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801280e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	2200      	movs	r2, #0
 8012814:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	2200      	movs	r2, #0
 801281a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801281c:	68f8      	ldr	r0, [r7, #12]
 801281e:	f7fb fceb 	bl	800e1f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012822:	bf00      	nop
 8012824:	3710      	adds	r7, #16
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801282a:	b480      	push	{r7}
 801282c:	b085      	sub	sp, #20
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012838:	b2db      	uxtb	r3, r3
 801283a:	2b21      	cmp	r3, #33	; 0x21
 801283c:	d144      	bne.n	80128c8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	689b      	ldr	r3, [r3, #8]
 8012842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012846:	d11a      	bne.n	801287e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6a1b      	ldr	r3, [r3, #32]
 801284c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	881b      	ldrh	r3, [r3, #0]
 8012852:	461a      	mov	r2, r3
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801285c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	691b      	ldr	r3, [r3, #16]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d105      	bne.n	8012872 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6a1b      	ldr	r3, [r3, #32]
 801286a:	1c9a      	adds	r2, r3, #2
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	621a      	str	r2, [r3, #32]
 8012870:	e00e      	b.n	8012890 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6a1b      	ldr	r3, [r3, #32]
 8012876:	1c5a      	adds	r2, r3, #1
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	621a      	str	r2, [r3, #32]
 801287c:	e008      	b.n	8012890 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6a1b      	ldr	r3, [r3, #32]
 8012882:	1c59      	adds	r1, r3, #1
 8012884:	687a      	ldr	r2, [r7, #4]
 8012886:	6211      	str	r1, [r2, #32]
 8012888:	781a      	ldrb	r2, [r3, #0]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012894:	b29b      	uxth	r3, r3
 8012896:	3b01      	subs	r3, #1
 8012898:	b29b      	uxth	r3, r3
 801289a:	687a      	ldr	r2, [r7, #4]
 801289c:	4619      	mov	r1, r3
 801289e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d10f      	bne.n	80128c4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	68da      	ldr	r2, [r3, #12]
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80128b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	68da      	ldr	r2, [r3, #12]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80128c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80128c4:	2300      	movs	r3, #0
 80128c6:	e000      	b.n	80128ca <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80128c8:	2302      	movs	r3, #2
  }
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3714      	adds	r7, #20
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr

080128d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80128d6:	b580      	push	{r7, lr}
 80128d8:	b082      	sub	sp, #8
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	68da      	ldr	r2, [r3, #12]
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80128ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2220      	movs	r2, #32
 80128f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f7fb fc24 	bl	800e144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80128fc:	2300      	movs	r3, #0
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3708      	adds	r7, #8
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012906:	b580      	push	{r7, lr}
 8012908:	b084      	sub	sp, #16
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012914:	b2db      	uxtb	r3, r3
 8012916:	2b22      	cmp	r3, #34	; 0x22
 8012918:	d171      	bne.n	80129fe <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	689b      	ldr	r3, [r3, #8]
 801291e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012922:	d123      	bne.n	801296c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012928:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	691b      	ldr	r3, [r3, #16]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d10e      	bne.n	8012950 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	b29b      	uxth	r3, r3
 801293a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801293e:	b29a      	uxth	r2, r3
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012948:	1c9a      	adds	r2, r3, #2
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	629a      	str	r2, [r3, #40]	; 0x28
 801294e:	e029      	b.n	80129a4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	b29b      	uxth	r3, r3
 8012958:	b2db      	uxtb	r3, r3
 801295a:	b29a      	uxth	r2, r3
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012964:	1c5a      	adds	r2, r3, #1
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	629a      	str	r2, [r3, #40]	; 0x28
 801296a:	e01b      	b.n	80129a4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	691b      	ldr	r3, [r3, #16]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d10a      	bne.n	801298a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	6858      	ldr	r0, [r3, #4]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801297e:	1c59      	adds	r1, r3, #1
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	6291      	str	r1, [r2, #40]	; 0x28
 8012984:	b2c2      	uxtb	r2, r0
 8012986:	701a      	strb	r2, [r3, #0]
 8012988:	e00c      	b.n	80129a4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	b2da      	uxtb	r2, r3
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012996:	1c58      	adds	r0, r3, #1
 8012998:	6879      	ldr	r1, [r7, #4]
 801299a:	6288      	str	r0, [r1, #40]	; 0x28
 801299c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80129a0:	b2d2      	uxtb	r2, r2
 80129a2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	3b01      	subs	r3, #1
 80129ac:	b29b      	uxth	r3, r3
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	4619      	mov	r1, r3
 80129b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d120      	bne.n	80129fa <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	68da      	ldr	r2, [r3, #12]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	f022 0220 	bic.w	r2, r2, #32
 80129c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	68da      	ldr	r2, [r3, #12]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80129d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	695a      	ldr	r2, [r3, #20]
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f022 0201 	bic.w	r2, r2, #1
 80129e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2220      	movs	r2, #32
 80129ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f7fb fbf7 	bl	800e1e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80129f6:	2300      	movs	r3, #0
 80129f8:	e002      	b.n	8012a00 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80129fa:	2300      	movs	r3, #0
 80129fc:	e000      	b.n	8012a00 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80129fe:	2302      	movs	r3, #2
  }
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3710      	adds	r7, #16
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}

08012a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012a0c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012a16:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	691b      	ldr	r3, [r3, #16]
 8012a1e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012a22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a26:	68d9      	ldr	r1, [r3, #12]
 8012a28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a2c:	681a      	ldr	r2, [r3, #0]
 8012a2e:	ea40 0301 	orr.w	r3, r0, r1
 8012a32:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012a34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a38:	689a      	ldr	r2, [r3, #8]
 8012a3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a3e:	691b      	ldr	r3, [r3, #16]
 8012a40:	431a      	orrs	r2, r3
 8012a42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a46:	695b      	ldr	r3, [r3, #20]
 8012a48:	431a      	orrs	r2, r3
 8012a4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a4e:	69db      	ldr	r3, [r3, #28]
 8012a50:	4313      	orrs	r3, r2
 8012a52:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8012a56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	68db      	ldr	r3, [r3, #12]
 8012a5e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012a62:	f021 010c 	bic.w	r1, r1, #12
 8012a66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a6a:	681a      	ldr	r2, [r3, #0]
 8012a6c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8012a70:	430b      	orrs	r3, r1
 8012a72:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012a74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	695b      	ldr	r3, [r3, #20]
 8012a7c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012a80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a84:	6999      	ldr	r1, [r3, #24]
 8012a86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a8a:	681a      	ldr	r2, [r3, #0]
 8012a8c:	ea40 0301 	orr.w	r3, r0, r1
 8012a90:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a96:	69db      	ldr	r3, [r3, #28]
 8012a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a9c:	f040 824a 	bne.w	8012f34 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012aa0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012aa4:	681a      	ldr	r2, [r3, #0]
 8012aa6:	4b96      	ldr	r3, [pc, #600]	; (8012d00 <UART_SetConfig+0x2f8>)
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d006      	beq.n	8012aba <UART_SetConfig+0xb2>
 8012aac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	4b94      	ldr	r3, [pc, #592]	; (8012d04 <UART_SetConfig+0x2fc>)
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	f040 8129 	bne.w	8012d0c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8012aba:	f7fe f8b5 	bl	8010c28 <HAL_RCC_GetPCLK2Freq>
 8012abe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012ac2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8012acc:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8012ad0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8012ad4:	4622      	mov	r2, r4
 8012ad6:	462b      	mov	r3, r5
 8012ad8:	1891      	adds	r1, r2, r2
 8012ada:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8012ade:	415b      	adcs	r3, r3
 8012ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012ae4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8012ae8:	4621      	mov	r1, r4
 8012aea:	1851      	adds	r1, r2, r1
 8012aec:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8012af0:	4629      	mov	r1, r5
 8012af2:	414b      	adcs	r3, r1
 8012af4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012af8:	f04f 0200 	mov.w	r2, #0
 8012afc:	f04f 0300 	mov.w	r3, #0
 8012b00:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8012b04:	4649      	mov	r1, r9
 8012b06:	00cb      	lsls	r3, r1, #3
 8012b08:	4641      	mov	r1, r8
 8012b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012b0e:	4641      	mov	r1, r8
 8012b10:	00ca      	lsls	r2, r1, #3
 8012b12:	4610      	mov	r0, r2
 8012b14:	4619      	mov	r1, r3
 8012b16:	4603      	mov	r3, r0
 8012b18:	4622      	mov	r2, r4
 8012b1a:	189b      	adds	r3, r3, r2
 8012b1c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8012b20:	462b      	mov	r3, r5
 8012b22:	460a      	mov	r2, r1
 8012b24:	eb42 0303 	adc.w	r3, r2, r3
 8012b28:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8012b2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	2200      	movs	r2, #0
 8012b34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8012b38:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8012b3c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8012b40:	460b      	mov	r3, r1
 8012b42:	18db      	adds	r3, r3, r3
 8012b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012b48:	4613      	mov	r3, r2
 8012b4a:	eb42 0303 	adc.w	r3, r2, r3
 8012b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012b52:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8012b56:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8012b5a:	f7ed ff87 	bl	8000a6c <__aeabi_uldivmod>
 8012b5e:	4602      	mov	r2, r0
 8012b60:	460b      	mov	r3, r1
 8012b62:	4b69      	ldr	r3, [pc, #420]	; (8012d08 <UART_SetConfig+0x300>)
 8012b64:	fba3 2302 	umull	r2, r3, r3, r2
 8012b68:	095b      	lsrs	r3, r3, #5
 8012b6a:	011c      	lsls	r4, r3, #4
 8012b6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012b70:	2200      	movs	r2, #0
 8012b72:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8012b76:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8012b7a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8012b7e:	4642      	mov	r2, r8
 8012b80:	464b      	mov	r3, r9
 8012b82:	1891      	adds	r1, r2, r2
 8012b84:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8012b88:	415b      	adcs	r3, r3
 8012b8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012b8e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8012b92:	4641      	mov	r1, r8
 8012b94:	1851      	adds	r1, r2, r1
 8012b96:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8012b9a:	4649      	mov	r1, r9
 8012b9c:	414b      	adcs	r3, r1
 8012b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012ba2:	f04f 0200 	mov.w	r2, #0
 8012ba6:	f04f 0300 	mov.w	r3, #0
 8012baa:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8012bae:	4659      	mov	r1, fp
 8012bb0:	00cb      	lsls	r3, r1, #3
 8012bb2:	4651      	mov	r1, sl
 8012bb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012bb8:	4651      	mov	r1, sl
 8012bba:	00ca      	lsls	r2, r1, #3
 8012bbc:	4610      	mov	r0, r2
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	4642      	mov	r2, r8
 8012bc4:	189b      	adds	r3, r3, r2
 8012bc6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8012bca:	464b      	mov	r3, r9
 8012bcc:	460a      	mov	r2, r1
 8012bce:	eb42 0303 	adc.w	r3, r2, r3
 8012bd2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8012bd6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012bda:	685b      	ldr	r3, [r3, #4]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8012be2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8012be6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8012bea:	460b      	mov	r3, r1
 8012bec:	18db      	adds	r3, r3, r3
 8012bee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012bf2:	4613      	mov	r3, r2
 8012bf4:	eb42 0303 	adc.w	r3, r2, r3
 8012bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012bfc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8012c00:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8012c04:	f7ed ff32 	bl	8000a6c <__aeabi_uldivmod>
 8012c08:	4602      	mov	r2, r0
 8012c0a:	460b      	mov	r3, r1
 8012c0c:	4611      	mov	r1, r2
 8012c0e:	4b3e      	ldr	r3, [pc, #248]	; (8012d08 <UART_SetConfig+0x300>)
 8012c10:	fba3 2301 	umull	r2, r3, r3, r1
 8012c14:	095b      	lsrs	r3, r3, #5
 8012c16:	2264      	movs	r2, #100	; 0x64
 8012c18:	fb02 f303 	mul.w	r3, r2, r3
 8012c1c:	1acb      	subs	r3, r1, r3
 8012c1e:	00db      	lsls	r3, r3, #3
 8012c20:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8012c24:	4b38      	ldr	r3, [pc, #224]	; (8012d08 <UART_SetConfig+0x300>)
 8012c26:	fba3 2302 	umull	r2, r3, r3, r2
 8012c2a:	095b      	lsrs	r3, r3, #5
 8012c2c:	005b      	lsls	r3, r3, #1
 8012c2e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012c32:	441c      	add	r4, r3
 8012c34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012c38:	2200      	movs	r2, #0
 8012c3a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8012c3e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8012c42:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8012c46:	4642      	mov	r2, r8
 8012c48:	464b      	mov	r3, r9
 8012c4a:	1891      	adds	r1, r2, r2
 8012c4c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8012c50:	415b      	adcs	r3, r3
 8012c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012c56:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8012c5a:	4641      	mov	r1, r8
 8012c5c:	1851      	adds	r1, r2, r1
 8012c5e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8012c62:	4649      	mov	r1, r9
 8012c64:	414b      	adcs	r3, r1
 8012c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012c6a:	f04f 0200 	mov.w	r2, #0
 8012c6e:	f04f 0300 	mov.w	r3, #0
 8012c72:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8012c76:	4659      	mov	r1, fp
 8012c78:	00cb      	lsls	r3, r1, #3
 8012c7a:	4651      	mov	r1, sl
 8012c7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012c80:	4651      	mov	r1, sl
 8012c82:	00ca      	lsls	r2, r1, #3
 8012c84:	4610      	mov	r0, r2
 8012c86:	4619      	mov	r1, r3
 8012c88:	4603      	mov	r3, r0
 8012c8a:	4642      	mov	r2, r8
 8012c8c:	189b      	adds	r3, r3, r2
 8012c8e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8012c92:	464b      	mov	r3, r9
 8012c94:	460a      	mov	r2, r1
 8012c96:	eb42 0303 	adc.w	r3, r2, r3
 8012c9a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8012c9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012ca2:	685b      	ldr	r3, [r3, #4]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8012caa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8012cae:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	18db      	adds	r3, r3, r3
 8012cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012cba:	4613      	mov	r3, r2
 8012cbc:	eb42 0303 	adc.w	r3, r2, r3
 8012cc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012cc4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8012cc8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8012ccc:	f7ed fece 	bl	8000a6c <__aeabi_uldivmod>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	460b      	mov	r3, r1
 8012cd4:	4b0c      	ldr	r3, [pc, #48]	; (8012d08 <UART_SetConfig+0x300>)
 8012cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8012cda:	095b      	lsrs	r3, r3, #5
 8012cdc:	2164      	movs	r1, #100	; 0x64
 8012cde:	fb01 f303 	mul.w	r3, r1, r3
 8012ce2:	1ad3      	subs	r3, r2, r3
 8012ce4:	00db      	lsls	r3, r3, #3
 8012ce6:	3332      	adds	r3, #50	; 0x32
 8012ce8:	4a07      	ldr	r2, [pc, #28]	; (8012d08 <UART_SetConfig+0x300>)
 8012cea:	fba2 2303 	umull	r2, r3, r2, r3
 8012cee:	095b      	lsrs	r3, r3, #5
 8012cf0:	f003 0207 	and.w	r2, r3, #7
 8012cf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	4422      	add	r2, r4
 8012cfc:	609a      	str	r2, [r3, #8]
 8012cfe:	e349      	b.n	8013394 <UART_SetConfig+0x98c>
 8012d00:	40011000 	.word	0x40011000
 8012d04:	40011400 	.word	0x40011400
 8012d08:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012d0c:	f7fd ff78 	bl	8010c00 <HAL_RCC_GetPCLK1Freq>
 8012d10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012d14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012d18:	2200      	movs	r2, #0
 8012d1a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8012d1e:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8012d22:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8012d26:	4622      	mov	r2, r4
 8012d28:	462b      	mov	r3, r5
 8012d2a:	1891      	adds	r1, r2, r2
 8012d2c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8012d30:	415b      	adcs	r3, r3
 8012d32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012d36:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8012d3a:	4621      	mov	r1, r4
 8012d3c:	eb12 0a01 	adds.w	sl, r2, r1
 8012d40:	4629      	mov	r1, r5
 8012d42:	eb43 0b01 	adc.w	fp, r3, r1
 8012d46:	f04f 0200 	mov.w	r2, #0
 8012d4a:	f04f 0300 	mov.w	r3, #0
 8012d4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012d52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012d56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012d5a:	4692      	mov	sl, r2
 8012d5c:	469b      	mov	fp, r3
 8012d5e:	4623      	mov	r3, r4
 8012d60:	eb1a 0303 	adds.w	r3, sl, r3
 8012d64:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8012d68:	462b      	mov	r3, r5
 8012d6a:	eb4b 0303 	adc.w	r3, fp, r3
 8012d6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8012d72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012d76:	685b      	ldr	r3, [r3, #4]
 8012d78:	2200      	movs	r2, #0
 8012d7a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8012d7e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8012d82:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8012d86:	460b      	mov	r3, r1
 8012d88:	18db      	adds	r3, r3, r3
 8012d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012d8e:	4613      	mov	r3, r2
 8012d90:	eb42 0303 	adc.w	r3, r2, r3
 8012d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012d98:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8012d9c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8012da0:	f7ed fe64 	bl	8000a6c <__aeabi_uldivmod>
 8012da4:	4602      	mov	r2, r0
 8012da6:	460b      	mov	r3, r1
 8012da8:	4b61      	ldr	r3, [pc, #388]	; (8012f30 <UART_SetConfig+0x528>)
 8012daa:	fba3 2302 	umull	r2, r3, r3, r2
 8012dae:	095b      	lsrs	r3, r3, #5
 8012db0:	011c      	lsls	r4, r3, #4
 8012db2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012db6:	2200      	movs	r2, #0
 8012db8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8012dbc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8012dc0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8012dc4:	4642      	mov	r2, r8
 8012dc6:	464b      	mov	r3, r9
 8012dc8:	1891      	adds	r1, r2, r2
 8012dca:	67b9      	str	r1, [r7, #120]	; 0x78
 8012dcc:	415b      	adcs	r3, r3
 8012dce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012dd0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8012dd4:	4641      	mov	r1, r8
 8012dd6:	1851      	adds	r1, r2, r1
 8012dd8:	6739      	str	r1, [r7, #112]	; 0x70
 8012dda:	4649      	mov	r1, r9
 8012ddc:	414b      	adcs	r3, r1
 8012dde:	677b      	str	r3, [r7, #116]	; 0x74
 8012de0:	f04f 0200 	mov.w	r2, #0
 8012de4:	f04f 0300 	mov.w	r3, #0
 8012de8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8012dec:	4659      	mov	r1, fp
 8012dee:	00cb      	lsls	r3, r1, #3
 8012df0:	4651      	mov	r1, sl
 8012df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012df6:	4651      	mov	r1, sl
 8012df8:	00ca      	lsls	r2, r1, #3
 8012dfa:	4610      	mov	r0, r2
 8012dfc:	4619      	mov	r1, r3
 8012dfe:	4603      	mov	r3, r0
 8012e00:	4642      	mov	r2, r8
 8012e02:	189b      	adds	r3, r3, r2
 8012e04:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8012e08:	464b      	mov	r3, r9
 8012e0a:	460a      	mov	r2, r1
 8012e0c:	eb42 0303 	adc.w	r3, r2, r3
 8012e10:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8012e14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8012e20:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8012e24:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8012e28:	460b      	mov	r3, r1
 8012e2a:	18db      	adds	r3, r3, r3
 8012e2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8012e2e:	4613      	mov	r3, r2
 8012e30:	eb42 0303 	adc.w	r3, r2, r3
 8012e34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012e36:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8012e3a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8012e3e:	f7ed fe15 	bl	8000a6c <__aeabi_uldivmod>
 8012e42:	4602      	mov	r2, r0
 8012e44:	460b      	mov	r3, r1
 8012e46:	4611      	mov	r1, r2
 8012e48:	4b39      	ldr	r3, [pc, #228]	; (8012f30 <UART_SetConfig+0x528>)
 8012e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8012e4e:	095b      	lsrs	r3, r3, #5
 8012e50:	2264      	movs	r2, #100	; 0x64
 8012e52:	fb02 f303 	mul.w	r3, r2, r3
 8012e56:	1acb      	subs	r3, r1, r3
 8012e58:	00db      	lsls	r3, r3, #3
 8012e5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8012e5e:	4b34      	ldr	r3, [pc, #208]	; (8012f30 <UART_SetConfig+0x528>)
 8012e60:	fba3 2302 	umull	r2, r3, r3, r2
 8012e64:	095b      	lsrs	r3, r3, #5
 8012e66:	005b      	lsls	r3, r3, #1
 8012e68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012e6c:	441c      	add	r4, r3
 8012e6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012e72:	2200      	movs	r2, #0
 8012e74:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8012e78:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8012e7c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8012e80:	4642      	mov	r2, r8
 8012e82:	464b      	mov	r3, r9
 8012e84:	1891      	adds	r1, r2, r2
 8012e86:	6639      	str	r1, [r7, #96]	; 0x60
 8012e88:	415b      	adcs	r3, r3
 8012e8a:	667b      	str	r3, [r7, #100]	; 0x64
 8012e8c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012e90:	4641      	mov	r1, r8
 8012e92:	1851      	adds	r1, r2, r1
 8012e94:	65b9      	str	r1, [r7, #88]	; 0x58
 8012e96:	4649      	mov	r1, r9
 8012e98:	414b      	adcs	r3, r1
 8012e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012e9c:	f04f 0200 	mov.w	r2, #0
 8012ea0:	f04f 0300 	mov.w	r3, #0
 8012ea4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8012ea8:	4659      	mov	r1, fp
 8012eaa:	00cb      	lsls	r3, r1, #3
 8012eac:	4651      	mov	r1, sl
 8012eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012eb2:	4651      	mov	r1, sl
 8012eb4:	00ca      	lsls	r2, r1, #3
 8012eb6:	4610      	mov	r0, r2
 8012eb8:	4619      	mov	r1, r3
 8012eba:	4603      	mov	r3, r0
 8012ebc:	4642      	mov	r2, r8
 8012ebe:	189b      	adds	r3, r3, r2
 8012ec0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8012ec4:	464b      	mov	r3, r9
 8012ec6:	460a      	mov	r2, r1
 8012ec8:	eb42 0303 	adc.w	r3, r2, r3
 8012ecc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8012ed0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012ed4:	685b      	ldr	r3, [r3, #4]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8012edc:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8012ee0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8012ee4:	460b      	mov	r3, r1
 8012ee6:	18db      	adds	r3, r3, r3
 8012ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8012eea:	4613      	mov	r3, r2
 8012eec:	eb42 0303 	adc.w	r3, r2, r3
 8012ef0:	657b      	str	r3, [r7, #84]	; 0x54
 8012ef2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012ef6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8012efa:	f7ed fdb7 	bl	8000a6c <__aeabi_uldivmod>
 8012efe:	4602      	mov	r2, r0
 8012f00:	460b      	mov	r3, r1
 8012f02:	4b0b      	ldr	r3, [pc, #44]	; (8012f30 <UART_SetConfig+0x528>)
 8012f04:	fba3 1302 	umull	r1, r3, r3, r2
 8012f08:	095b      	lsrs	r3, r3, #5
 8012f0a:	2164      	movs	r1, #100	; 0x64
 8012f0c:	fb01 f303 	mul.w	r3, r1, r3
 8012f10:	1ad3      	subs	r3, r2, r3
 8012f12:	00db      	lsls	r3, r3, #3
 8012f14:	3332      	adds	r3, #50	; 0x32
 8012f16:	4a06      	ldr	r2, [pc, #24]	; (8012f30 <UART_SetConfig+0x528>)
 8012f18:	fba2 2303 	umull	r2, r3, r2, r3
 8012f1c:	095b      	lsrs	r3, r3, #5
 8012f1e:	f003 0207 	and.w	r2, r3, #7
 8012f22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	4422      	add	r2, r4
 8012f2a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8012f2c:	e232      	b.n	8013394 <UART_SetConfig+0x98c>
 8012f2e:	bf00      	nop
 8012f30:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012f34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	4b8d      	ldr	r3, [pc, #564]	; (8013170 <UART_SetConfig+0x768>)
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d006      	beq.n	8012f4e <UART_SetConfig+0x546>
 8012f40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	4b8b      	ldr	r3, [pc, #556]	; (8013174 <UART_SetConfig+0x76c>)
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	f040 8117 	bne.w	801317c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8012f4e:	f7fd fe6b 	bl	8010c28 <HAL_RCC_GetPCLK2Freq>
 8012f52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012f56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8012f60:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8012f64:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8012f68:	4622      	mov	r2, r4
 8012f6a:	462b      	mov	r3, r5
 8012f6c:	1891      	adds	r1, r2, r2
 8012f6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8012f70:	415b      	adcs	r3, r3
 8012f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012f78:	4621      	mov	r1, r4
 8012f7a:	eb12 0801 	adds.w	r8, r2, r1
 8012f7e:	4629      	mov	r1, r5
 8012f80:	eb43 0901 	adc.w	r9, r3, r1
 8012f84:	f04f 0200 	mov.w	r2, #0
 8012f88:	f04f 0300 	mov.w	r3, #0
 8012f8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012f90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012f94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012f98:	4690      	mov	r8, r2
 8012f9a:	4699      	mov	r9, r3
 8012f9c:	4623      	mov	r3, r4
 8012f9e:	eb18 0303 	adds.w	r3, r8, r3
 8012fa2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8012fa6:	462b      	mov	r3, r5
 8012fa8:	eb49 0303 	adc.w	r3, r9, r3
 8012fac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8012fb0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8012fbc:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8012fc0:	f04f 0200 	mov.w	r2, #0
 8012fc4:	f04f 0300 	mov.w	r3, #0
 8012fc8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8012fcc:	4629      	mov	r1, r5
 8012fce:	008b      	lsls	r3, r1, #2
 8012fd0:	4621      	mov	r1, r4
 8012fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012fd6:	4621      	mov	r1, r4
 8012fd8:	008a      	lsls	r2, r1, #2
 8012fda:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8012fde:	f7ed fd45 	bl	8000a6c <__aeabi_uldivmod>
 8012fe2:	4602      	mov	r2, r0
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	4b64      	ldr	r3, [pc, #400]	; (8013178 <UART_SetConfig+0x770>)
 8012fe8:	fba3 2302 	umull	r2, r3, r3, r2
 8012fec:	095b      	lsrs	r3, r3, #5
 8012fee:	011c      	lsls	r4, r3, #4
 8012ff0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8012ffa:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8012ffe:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8013002:	4642      	mov	r2, r8
 8013004:	464b      	mov	r3, r9
 8013006:	1891      	adds	r1, r2, r2
 8013008:	6439      	str	r1, [r7, #64]	; 0x40
 801300a:	415b      	adcs	r3, r3
 801300c:	647b      	str	r3, [r7, #68]	; 0x44
 801300e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013012:	4641      	mov	r1, r8
 8013014:	1851      	adds	r1, r2, r1
 8013016:	63b9      	str	r1, [r7, #56]	; 0x38
 8013018:	4649      	mov	r1, r9
 801301a:	414b      	adcs	r3, r1
 801301c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801301e:	f04f 0200 	mov.w	r2, #0
 8013022:	f04f 0300 	mov.w	r3, #0
 8013026:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 801302a:	4659      	mov	r1, fp
 801302c:	00cb      	lsls	r3, r1, #3
 801302e:	4651      	mov	r1, sl
 8013030:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013034:	4651      	mov	r1, sl
 8013036:	00ca      	lsls	r2, r1, #3
 8013038:	4610      	mov	r0, r2
 801303a:	4619      	mov	r1, r3
 801303c:	4603      	mov	r3, r0
 801303e:	4642      	mov	r2, r8
 8013040:	189b      	adds	r3, r3, r2
 8013042:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8013046:	464b      	mov	r3, r9
 8013048:	460a      	mov	r2, r1
 801304a:	eb42 0303 	adc.w	r3, r2, r3
 801304e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8013052:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013056:	685b      	ldr	r3, [r3, #4]
 8013058:	2200      	movs	r2, #0
 801305a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801305e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8013062:	f04f 0200 	mov.w	r2, #0
 8013066:	f04f 0300 	mov.w	r3, #0
 801306a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 801306e:	4649      	mov	r1, r9
 8013070:	008b      	lsls	r3, r1, #2
 8013072:	4641      	mov	r1, r8
 8013074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013078:	4641      	mov	r1, r8
 801307a:	008a      	lsls	r2, r1, #2
 801307c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8013080:	f7ed fcf4 	bl	8000a6c <__aeabi_uldivmod>
 8013084:	4602      	mov	r2, r0
 8013086:	460b      	mov	r3, r1
 8013088:	4b3b      	ldr	r3, [pc, #236]	; (8013178 <UART_SetConfig+0x770>)
 801308a:	fba3 1302 	umull	r1, r3, r3, r2
 801308e:	095b      	lsrs	r3, r3, #5
 8013090:	2164      	movs	r1, #100	; 0x64
 8013092:	fb01 f303 	mul.w	r3, r1, r3
 8013096:	1ad3      	subs	r3, r2, r3
 8013098:	011b      	lsls	r3, r3, #4
 801309a:	3332      	adds	r3, #50	; 0x32
 801309c:	4a36      	ldr	r2, [pc, #216]	; (8013178 <UART_SetConfig+0x770>)
 801309e:	fba2 2303 	umull	r2, r3, r2, r3
 80130a2:	095b      	lsrs	r3, r3, #5
 80130a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130a8:	441c      	add	r4, r3
 80130aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80130ae:	2200      	movs	r2, #0
 80130b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80130b4:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80130b8:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80130bc:	4642      	mov	r2, r8
 80130be:	464b      	mov	r3, r9
 80130c0:	1891      	adds	r1, r2, r2
 80130c2:	6339      	str	r1, [r7, #48]	; 0x30
 80130c4:	415b      	adcs	r3, r3
 80130c6:	637b      	str	r3, [r7, #52]	; 0x34
 80130c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80130cc:	4641      	mov	r1, r8
 80130ce:	1851      	adds	r1, r2, r1
 80130d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80130d2:	4649      	mov	r1, r9
 80130d4:	414b      	adcs	r3, r1
 80130d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80130d8:	f04f 0200 	mov.w	r2, #0
 80130dc:	f04f 0300 	mov.w	r3, #0
 80130e0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80130e4:	4659      	mov	r1, fp
 80130e6:	00cb      	lsls	r3, r1, #3
 80130e8:	4651      	mov	r1, sl
 80130ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80130ee:	4651      	mov	r1, sl
 80130f0:	00ca      	lsls	r2, r1, #3
 80130f2:	4610      	mov	r0, r2
 80130f4:	4619      	mov	r1, r3
 80130f6:	4603      	mov	r3, r0
 80130f8:	4642      	mov	r2, r8
 80130fa:	189b      	adds	r3, r3, r2
 80130fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8013100:	464b      	mov	r3, r9
 8013102:	460a      	mov	r2, r1
 8013104:	eb42 0303 	adc.w	r3, r2, r3
 8013108:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801310c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8013118:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 801311c:	f04f 0200 	mov.w	r2, #0
 8013120:	f04f 0300 	mov.w	r3, #0
 8013124:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8013128:	4649      	mov	r1, r9
 801312a:	008b      	lsls	r3, r1, #2
 801312c:	4641      	mov	r1, r8
 801312e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013132:	4641      	mov	r1, r8
 8013134:	008a      	lsls	r2, r1, #2
 8013136:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 801313a:	f7ed fc97 	bl	8000a6c <__aeabi_uldivmod>
 801313e:	4602      	mov	r2, r0
 8013140:	460b      	mov	r3, r1
 8013142:	4b0d      	ldr	r3, [pc, #52]	; (8013178 <UART_SetConfig+0x770>)
 8013144:	fba3 1302 	umull	r1, r3, r3, r2
 8013148:	095b      	lsrs	r3, r3, #5
 801314a:	2164      	movs	r1, #100	; 0x64
 801314c:	fb01 f303 	mul.w	r3, r1, r3
 8013150:	1ad3      	subs	r3, r2, r3
 8013152:	011b      	lsls	r3, r3, #4
 8013154:	3332      	adds	r3, #50	; 0x32
 8013156:	4a08      	ldr	r2, [pc, #32]	; (8013178 <UART_SetConfig+0x770>)
 8013158:	fba2 2303 	umull	r2, r3, r2, r3
 801315c:	095b      	lsrs	r3, r3, #5
 801315e:	f003 020f 	and.w	r2, r3, #15
 8013162:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4422      	add	r2, r4
 801316a:	609a      	str	r2, [r3, #8]
 801316c:	e112      	b.n	8013394 <UART_SetConfig+0x98c>
 801316e:	bf00      	nop
 8013170:	40011000 	.word	0x40011000
 8013174:	40011400 	.word	0x40011400
 8013178:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 801317c:	f7fd fd40 	bl	8010c00 <HAL_RCC_GetPCLK1Freq>
 8013180:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013184:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8013188:	2200      	movs	r2, #0
 801318a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801318e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8013192:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8013196:	4642      	mov	r2, r8
 8013198:	464b      	mov	r3, r9
 801319a:	1891      	adds	r1, r2, r2
 801319c:	6239      	str	r1, [r7, #32]
 801319e:	415b      	adcs	r3, r3
 80131a0:	627b      	str	r3, [r7, #36]	; 0x24
 80131a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80131a6:	4641      	mov	r1, r8
 80131a8:	1854      	adds	r4, r2, r1
 80131aa:	4649      	mov	r1, r9
 80131ac:	eb43 0501 	adc.w	r5, r3, r1
 80131b0:	f04f 0200 	mov.w	r2, #0
 80131b4:	f04f 0300 	mov.w	r3, #0
 80131b8:	00eb      	lsls	r3, r5, #3
 80131ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80131be:	00e2      	lsls	r2, r4, #3
 80131c0:	4614      	mov	r4, r2
 80131c2:	461d      	mov	r5, r3
 80131c4:	4643      	mov	r3, r8
 80131c6:	18e3      	adds	r3, r4, r3
 80131c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80131cc:	464b      	mov	r3, r9
 80131ce:	eb45 0303 	adc.w	r3, r5, r3
 80131d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80131d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80131da:	685b      	ldr	r3, [r3, #4]
 80131dc:	2200      	movs	r2, #0
 80131de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80131e2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80131e6:	f04f 0200 	mov.w	r2, #0
 80131ea:	f04f 0300 	mov.w	r3, #0
 80131ee:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80131f2:	4629      	mov	r1, r5
 80131f4:	008b      	lsls	r3, r1, #2
 80131f6:	4621      	mov	r1, r4
 80131f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80131fc:	4621      	mov	r1, r4
 80131fe:	008a      	lsls	r2, r1, #2
 8013200:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8013204:	f7ed fc32 	bl	8000a6c <__aeabi_uldivmod>
 8013208:	4602      	mov	r2, r0
 801320a:	460b      	mov	r3, r1
 801320c:	4b64      	ldr	r3, [pc, #400]	; (80133a0 <UART_SetConfig+0x998>)
 801320e:	fba3 2302 	umull	r2, r3, r3, r2
 8013212:	095b      	lsrs	r3, r3, #5
 8013214:	011c      	lsls	r4, r3, #4
 8013216:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801321a:	2200      	movs	r2, #0
 801321c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013220:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8013224:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8013228:	4642      	mov	r2, r8
 801322a:	464b      	mov	r3, r9
 801322c:	1891      	adds	r1, r2, r2
 801322e:	61b9      	str	r1, [r7, #24]
 8013230:	415b      	adcs	r3, r3
 8013232:	61fb      	str	r3, [r7, #28]
 8013234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013238:	4641      	mov	r1, r8
 801323a:	1851      	adds	r1, r2, r1
 801323c:	6139      	str	r1, [r7, #16]
 801323e:	4649      	mov	r1, r9
 8013240:	414b      	adcs	r3, r1
 8013242:	617b      	str	r3, [r7, #20]
 8013244:	f04f 0200 	mov.w	r2, #0
 8013248:	f04f 0300 	mov.w	r3, #0
 801324c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013250:	4659      	mov	r1, fp
 8013252:	00cb      	lsls	r3, r1, #3
 8013254:	4651      	mov	r1, sl
 8013256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801325a:	4651      	mov	r1, sl
 801325c:	00ca      	lsls	r2, r1, #3
 801325e:	4610      	mov	r0, r2
 8013260:	4619      	mov	r1, r3
 8013262:	4603      	mov	r3, r0
 8013264:	4642      	mov	r2, r8
 8013266:	189b      	adds	r3, r3, r2
 8013268:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801326c:	464b      	mov	r3, r9
 801326e:	460a      	mov	r2, r1
 8013270:	eb42 0303 	adc.w	r3, r2, r3
 8013274:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013278:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	2200      	movs	r2, #0
 8013280:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8013284:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8013288:	f04f 0200 	mov.w	r2, #0
 801328c:	f04f 0300 	mov.w	r3, #0
 8013290:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8013294:	4649      	mov	r1, r9
 8013296:	008b      	lsls	r3, r1, #2
 8013298:	4641      	mov	r1, r8
 801329a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801329e:	4641      	mov	r1, r8
 80132a0:	008a      	lsls	r2, r1, #2
 80132a2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80132a6:	f7ed fbe1 	bl	8000a6c <__aeabi_uldivmod>
 80132aa:	4602      	mov	r2, r0
 80132ac:	460b      	mov	r3, r1
 80132ae:	4b3c      	ldr	r3, [pc, #240]	; (80133a0 <UART_SetConfig+0x998>)
 80132b0:	fba3 1302 	umull	r1, r3, r3, r2
 80132b4:	095b      	lsrs	r3, r3, #5
 80132b6:	2164      	movs	r1, #100	; 0x64
 80132b8:	fb01 f303 	mul.w	r3, r1, r3
 80132bc:	1ad3      	subs	r3, r2, r3
 80132be:	011b      	lsls	r3, r3, #4
 80132c0:	3332      	adds	r3, #50	; 0x32
 80132c2:	4a37      	ldr	r2, [pc, #220]	; (80133a0 <UART_SetConfig+0x998>)
 80132c4:	fba2 2303 	umull	r2, r3, r2, r3
 80132c8:	095b      	lsrs	r3, r3, #5
 80132ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80132ce:	441c      	add	r4, r3
 80132d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80132d4:	2200      	movs	r2, #0
 80132d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80132da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80132de:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80132e2:	4642      	mov	r2, r8
 80132e4:	464b      	mov	r3, r9
 80132e6:	1891      	adds	r1, r2, r2
 80132e8:	60b9      	str	r1, [r7, #8]
 80132ea:	415b      	adcs	r3, r3
 80132ec:	60fb      	str	r3, [r7, #12]
 80132ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80132f2:	4641      	mov	r1, r8
 80132f4:	1851      	adds	r1, r2, r1
 80132f6:	6039      	str	r1, [r7, #0]
 80132f8:	4649      	mov	r1, r9
 80132fa:	414b      	adcs	r3, r1
 80132fc:	607b      	str	r3, [r7, #4]
 80132fe:	f04f 0200 	mov.w	r2, #0
 8013302:	f04f 0300 	mov.w	r3, #0
 8013306:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801330a:	4659      	mov	r1, fp
 801330c:	00cb      	lsls	r3, r1, #3
 801330e:	4651      	mov	r1, sl
 8013310:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013314:	4651      	mov	r1, sl
 8013316:	00ca      	lsls	r2, r1, #3
 8013318:	4610      	mov	r0, r2
 801331a:	4619      	mov	r1, r3
 801331c:	4603      	mov	r3, r0
 801331e:	4642      	mov	r2, r8
 8013320:	189b      	adds	r3, r3, r2
 8013322:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013326:	464b      	mov	r3, r9
 8013328:	460a      	mov	r2, r1
 801332a:	eb42 0303 	adc.w	r3, r2, r3
 801332e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013332:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013336:	685b      	ldr	r3, [r3, #4]
 8013338:	2200      	movs	r2, #0
 801333a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801333e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8013342:	f04f 0200 	mov.w	r2, #0
 8013346:	f04f 0300 	mov.w	r3, #0
 801334a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 801334e:	4649      	mov	r1, r9
 8013350:	008b      	lsls	r3, r1, #2
 8013352:	4641      	mov	r1, r8
 8013354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013358:	4641      	mov	r1, r8
 801335a:	008a      	lsls	r2, r1, #2
 801335c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8013360:	f7ed fb84 	bl	8000a6c <__aeabi_uldivmod>
 8013364:	4602      	mov	r2, r0
 8013366:	460b      	mov	r3, r1
 8013368:	4b0d      	ldr	r3, [pc, #52]	; (80133a0 <UART_SetConfig+0x998>)
 801336a:	fba3 1302 	umull	r1, r3, r3, r2
 801336e:	095b      	lsrs	r3, r3, #5
 8013370:	2164      	movs	r1, #100	; 0x64
 8013372:	fb01 f303 	mul.w	r3, r1, r3
 8013376:	1ad3      	subs	r3, r2, r3
 8013378:	011b      	lsls	r3, r3, #4
 801337a:	3332      	adds	r3, #50	; 0x32
 801337c:	4a08      	ldr	r2, [pc, #32]	; (80133a0 <UART_SetConfig+0x998>)
 801337e:	fba2 2303 	umull	r2, r3, r2, r3
 8013382:	095b      	lsrs	r3, r3, #5
 8013384:	f003 020f 	and.w	r2, r3, #15
 8013388:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	4422      	add	r2, r4
 8013390:	609a      	str	r2, [r3, #8]
}
 8013392:	e7ff      	b.n	8013394 <UART_SetConfig+0x98c>
 8013394:	bf00      	nop
 8013396:	f507 7702 	add.w	r7, r7, #520	; 0x208
 801339a:	46bd      	mov	sp, r7
 801339c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80133a0:	51eb851f 	.word	0x51eb851f

080133a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80133a4:	b480      	push	{r7}
 80133a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80133a8:	bf00      	nop
 80133aa:	46bd      	mov	sp, r7
 80133ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b0:	4770      	bx	lr
	...

080133b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80133b4:	b480      	push	{r7}
 80133b6:	b085      	sub	sp, #20
 80133b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80133ba:	f3ef 8305 	mrs	r3, IPSR
 80133be:	60bb      	str	r3, [r7, #8]
  return(result);
 80133c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d10f      	bne.n	80133e6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133c6:	f3ef 8310 	mrs	r3, PRIMASK
 80133ca:	607b      	str	r3, [r7, #4]
  return(result);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d105      	bne.n	80133de <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80133d2:	f3ef 8311 	mrs	r3, BASEPRI
 80133d6:	603b      	str	r3, [r7, #0]
  return(result);
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d007      	beq.n	80133ee <osKernelInitialize+0x3a>
 80133de:	4b0e      	ldr	r3, [pc, #56]	; (8013418 <osKernelInitialize+0x64>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	2b02      	cmp	r3, #2
 80133e4:	d103      	bne.n	80133ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80133e6:	f06f 0305 	mvn.w	r3, #5
 80133ea:	60fb      	str	r3, [r7, #12]
 80133ec:	e00c      	b.n	8013408 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80133ee:	4b0a      	ldr	r3, [pc, #40]	; (8013418 <osKernelInitialize+0x64>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d105      	bne.n	8013402 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80133f6:	4b08      	ldr	r3, [pc, #32]	; (8013418 <osKernelInitialize+0x64>)
 80133f8:	2201      	movs	r2, #1
 80133fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80133fc:	2300      	movs	r3, #0
 80133fe:	60fb      	str	r3, [r7, #12]
 8013400:	e002      	b.n	8013408 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8013402:	f04f 33ff 	mov.w	r3, #4294967295
 8013406:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013408:	68fb      	ldr	r3, [r7, #12]
}
 801340a:	4618      	mov	r0, r3
 801340c:	3714      	adds	r7, #20
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop
 8013418:	2000250c 	.word	0x2000250c

0801341c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013422:	f3ef 8305 	mrs	r3, IPSR
 8013426:	60bb      	str	r3, [r7, #8]
  return(result);
 8013428:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801342a:	2b00      	cmp	r3, #0
 801342c:	d10f      	bne.n	801344e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801342e:	f3ef 8310 	mrs	r3, PRIMASK
 8013432:	607b      	str	r3, [r7, #4]
  return(result);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d105      	bne.n	8013446 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801343a:	f3ef 8311 	mrs	r3, BASEPRI
 801343e:	603b      	str	r3, [r7, #0]
  return(result);
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d007      	beq.n	8013456 <osKernelStart+0x3a>
 8013446:	4b0f      	ldr	r3, [pc, #60]	; (8013484 <osKernelStart+0x68>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	2b02      	cmp	r3, #2
 801344c:	d103      	bne.n	8013456 <osKernelStart+0x3a>
    stat = osErrorISR;
 801344e:	f06f 0305 	mvn.w	r3, #5
 8013452:	60fb      	str	r3, [r7, #12]
 8013454:	e010      	b.n	8013478 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013456:	4b0b      	ldr	r3, [pc, #44]	; (8013484 <osKernelStart+0x68>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	2b01      	cmp	r3, #1
 801345c:	d109      	bne.n	8013472 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801345e:	f7ff ffa1 	bl	80133a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013462:	4b08      	ldr	r3, [pc, #32]	; (8013484 <osKernelStart+0x68>)
 8013464:	2202      	movs	r2, #2
 8013466:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013468:	f001 fb38 	bl	8014adc <vTaskStartScheduler>
      stat = osOK;
 801346c:	2300      	movs	r3, #0
 801346e:	60fb      	str	r3, [r7, #12]
 8013470:	e002      	b.n	8013478 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8013472:	f04f 33ff 	mov.w	r3, #4294967295
 8013476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013478:	68fb      	ldr	r3, [r7, #12]
}
 801347a:	4618      	mov	r0, r3
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	2000250c 	.word	0x2000250c

08013488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013488:	b580      	push	{r7, lr}
 801348a:	b090      	sub	sp, #64	; 0x40
 801348c:	af04      	add	r7, sp, #16
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	60b9      	str	r1, [r7, #8]
 8013492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013494:	2300      	movs	r3, #0
 8013496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013498:	f3ef 8305 	mrs	r3, IPSR
 801349c:	61fb      	str	r3, [r7, #28]
  return(result);
 801349e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	f040 808f 	bne.w	80135c4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80134a6:	f3ef 8310 	mrs	r3, PRIMASK
 80134aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80134ac:	69bb      	ldr	r3, [r7, #24]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d105      	bne.n	80134be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80134b2:	f3ef 8311 	mrs	r3, BASEPRI
 80134b6:	617b      	str	r3, [r7, #20]
  return(result);
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d003      	beq.n	80134c6 <osThreadNew+0x3e>
 80134be:	4b44      	ldr	r3, [pc, #272]	; (80135d0 <osThreadNew+0x148>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	2b02      	cmp	r3, #2
 80134c4:	d07e      	beq.n	80135c4 <osThreadNew+0x13c>
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d07b      	beq.n	80135c4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80134cc:	2380      	movs	r3, #128	; 0x80
 80134ce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80134d0:	2318      	movs	r3, #24
 80134d2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80134d4:	2300      	movs	r3, #0
 80134d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80134d8:	f04f 33ff 	mov.w	r3, #4294967295
 80134dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d045      	beq.n	8013570 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d002      	beq.n	80134f2 <osThreadNew+0x6a>
        name = attr->name;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	699b      	ldr	r3, [r3, #24]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d002      	beq.n	8013500 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	699b      	ldr	r3, [r3, #24]
 80134fe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013502:	2b00      	cmp	r3, #0
 8013504:	d008      	beq.n	8013518 <osThreadNew+0x90>
 8013506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013508:	2b38      	cmp	r3, #56	; 0x38
 801350a:	d805      	bhi.n	8013518 <osThreadNew+0x90>
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	685b      	ldr	r3, [r3, #4]
 8013510:	f003 0301 	and.w	r3, r3, #1
 8013514:	2b00      	cmp	r3, #0
 8013516:	d001      	beq.n	801351c <osThreadNew+0x94>
        return (NULL);
 8013518:	2300      	movs	r3, #0
 801351a:	e054      	b.n	80135c6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	695b      	ldr	r3, [r3, #20]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d003      	beq.n	801352c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	695b      	ldr	r3, [r3, #20]
 8013528:	089b      	lsrs	r3, r3, #2
 801352a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	689b      	ldr	r3, [r3, #8]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d00e      	beq.n	8013552 <osThreadNew+0xca>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	68db      	ldr	r3, [r3, #12]
 8013538:	2b5b      	cmp	r3, #91	; 0x5b
 801353a:	d90a      	bls.n	8013552 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013540:	2b00      	cmp	r3, #0
 8013542:	d006      	beq.n	8013552 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	695b      	ldr	r3, [r3, #20]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d002      	beq.n	8013552 <osThreadNew+0xca>
        mem = 1;
 801354c:	2301      	movs	r3, #1
 801354e:	623b      	str	r3, [r7, #32]
 8013550:	e010      	b.n	8013574 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	689b      	ldr	r3, [r3, #8]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d10c      	bne.n	8013574 <osThreadNew+0xec>
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d108      	bne.n	8013574 <osThreadNew+0xec>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	691b      	ldr	r3, [r3, #16]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d104      	bne.n	8013574 <osThreadNew+0xec>
          mem = 0;
 801356a:	2300      	movs	r3, #0
 801356c:	623b      	str	r3, [r7, #32]
 801356e:	e001      	b.n	8013574 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8013570:	2300      	movs	r3, #0
 8013572:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013574:	6a3b      	ldr	r3, [r7, #32]
 8013576:	2b01      	cmp	r3, #1
 8013578:	d110      	bne.n	801359c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801357e:	687a      	ldr	r2, [r7, #4]
 8013580:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013582:	9202      	str	r2, [sp, #8]
 8013584:	9301      	str	r3, [sp, #4]
 8013586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013588:	9300      	str	r3, [sp, #0]
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801358e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013590:	68f8      	ldr	r0, [r7, #12]
 8013592:	f001 f8cd 	bl	8014730 <xTaskCreateStatic>
 8013596:	4603      	mov	r3, r0
 8013598:	613b      	str	r3, [r7, #16]
 801359a:	e013      	b.n	80135c4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 801359c:	6a3b      	ldr	r3, [r7, #32]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d110      	bne.n	80135c4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80135a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	f107 0310 	add.w	r3, r7, #16
 80135aa:	9301      	str	r3, [sp, #4]
 80135ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ae:	9300      	str	r3, [sp, #0]
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80135b4:	68f8      	ldr	r0, [r7, #12]
 80135b6:	f001 f918 	bl	80147ea <xTaskCreate>
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b01      	cmp	r3, #1
 80135be:	d001      	beq.n	80135c4 <osThreadNew+0x13c>
          hTask = NULL;
 80135c0:	2300      	movs	r3, #0
 80135c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80135c4:	693b      	ldr	r3, [r7, #16]
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3730      	adds	r7, #48	; 0x30
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	2000250c 	.word	0x2000250c

080135d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b086      	sub	sp, #24
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80135dc:	f3ef 8305 	mrs	r3, IPSR
 80135e0:	613b      	str	r3, [r7, #16]
  return(result);
 80135e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10f      	bne.n	8013608 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80135e8:	f3ef 8310 	mrs	r3, PRIMASK
 80135ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d105      	bne.n	8013600 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80135f4:	f3ef 8311 	mrs	r3, BASEPRI
 80135f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d007      	beq.n	8013610 <osDelay+0x3c>
 8013600:	4b0a      	ldr	r3, [pc, #40]	; (801362c <osDelay+0x58>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	2b02      	cmp	r3, #2
 8013606:	d103      	bne.n	8013610 <osDelay+0x3c>
    stat = osErrorISR;
 8013608:	f06f 0305 	mvn.w	r3, #5
 801360c:	617b      	str	r3, [r7, #20]
 801360e:	e007      	b.n	8013620 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8013610:	2300      	movs	r3, #0
 8013612:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d002      	beq.n	8013620 <osDelay+0x4c>
      vTaskDelay(ticks);
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f001 fa2a 	bl	8014a74 <vTaskDelay>
    }
  }

  return (stat);
 8013620:	697b      	ldr	r3, [r7, #20]
}
 8013622:	4618      	mov	r0, r3
 8013624:	3718      	adds	r7, #24
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
 801362a:	bf00      	nop
 801362c:	2000250c 	.word	0x2000250c

08013630 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013630:	b480      	push	{r7}
 8013632:	b085      	sub	sp, #20
 8013634:	af00      	add	r7, sp, #0
 8013636:	60f8      	str	r0, [r7, #12]
 8013638:	60b9      	str	r1, [r7, #8]
 801363a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	4a07      	ldr	r2, [pc, #28]	; (801365c <vApplicationGetIdleTaskMemory+0x2c>)
 8013640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	4a06      	ldr	r2, [pc, #24]	; (8013660 <vApplicationGetIdleTaskMemory+0x30>)
 8013646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2280      	movs	r2, #128	; 0x80
 801364c:	601a      	str	r2, [r3, #0]
}
 801364e:	bf00      	nop
 8013650:	3714      	adds	r7, #20
 8013652:	46bd      	mov	sp, r7
 8013654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013658:	4770      	bx	lr
 801365a:	bf00      	nop
 801365c:	20002510 	.word	0x20002510
 8013660:	2000256c 	.word	0x2000256c

08013664 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013664:	b480      	push	{r7}
 8013666:	b085      	sub	sp, #20
 8013668:	af00      	add	r7, sp, #0
 801366a:	60f8      	str	r0, [r7, #12]
 801366c:	60b9      	str	r1, [r7, #8]
 801366e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	4a07      	ldr	r2, [pc, #28]	; (8013690 <vApplicationGetTimerTaskMemory+0x2c>)
 8013674:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	4a06      	ldr	r2, [pc, #24]	; (8013694 <vApplicationGetTimerTaskMemory+0x30>)
 801367a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013682:	601a      	str	r2, [r3, #0]
}
 8013684:	bf00      	nop
 8013686:	3714      	adds	r7, #20
 8013688:	46bd      	mov	sp, r7
 801368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368e:	4770      	bx	lr
 8013690:	2000276c 	.word	0x2000276c
 8013694:	200027c8 	.word	0x200027c8

08013698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013698:	b480      	push	{r7}
 801369a:	b083      	sub	sp, #12
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f103 0208 	add.w	r2, r3, #8
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f04f 32ff 	mov.w	r2, #4294967295
 80136b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f103 0208 	add.w	r2, r3, #8
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	f103 0208 	add.w	r2, r3, #8
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2200      	movs	r2, #0
 80136ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80136cc:	bf00      	nop
 80136ce:	370c      	adds	r7, #12
 80136d0:	46bd      	mov	sp, r7
 80136d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d6:	4770      	bx	lr

080136d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80136d8:	b480      	push	{r7}
 80136da:	b083      	sub	sp, #12
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	2200      	movs	r2, #0
 80136e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80136e6:	bf00      	nop
 80136e8:	370c      	adds	r7, #12
 80136ea:	46bd      	mov	sp, r7
 80136ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f0:	4770      	bx	lr

080136f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80136f2:	b480      	push	{r7}
 80136f4:	b085      	sub	sp, #20
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]
 80136fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	68fa      	ldr	r2, [r7, #12]
 8013706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	689a      	ldr	r2, [r3, #8]
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	689b      	ldr	r3, [r3, #8]
 8013714:	683a      	ldr	r2, [r7, #0]
 8013716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	683a      	ldr	r2, [r7, #0]
 801371c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	1c5a      	adds	r2, r3, #1
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	601a      	str	r2, [r3, #0]
}
 801372e:	bf00      	nop
 8013730:	3714      	adds	r7, #20
 8013732:	46bd      	mov	sp, r7
 8013734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013738:	4770      	bx	lr

0801373a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801373a:	b480      	push	{r7}
 801373c:	b085      	sub	sp, #20
 801373e:	af00      	add	r7, sp, #0
 8013740:	6078      	str	r0, [r7, #4]
 8013742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013750:	d103      	bne.n	801375a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	691b      	ldr	r3, [r3, #16]
 8013756:	60fb      	str	r3, [r7, #12]
 8013758:	e00c      	b.n	8013774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	3308      	adds	r3, #8
 801375e:	60fb      	str	r3, [r7, #12]
 8013760:	e002      	b.n	8013768 <vListInsert+0x2e>
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	60fb      	str	r3, [r7, #12]
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	68ba      	ldr	r2, [r7, #8]
 8013770:	429a      	cmp	r2, r3
 8013772:	d2f6      	bcs.n	8013762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	685a      	ldr	r2, [r3, #4]
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	683a      	ldr	r2, [r7, #0]
 8013782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	68fa      	ldr	r2, [r7, #12]
 8013788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	683a      	ldr	r2, [r7, #0]
 801378e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	687a      	ldr	r2, [r7, #4]
 8013794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	1c5a      	adds	r2, r3, #1
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	601a      	str	r2, [r3, #0]
}
 80137a0:	bf00      	nop
 80137a2:	3714      	adds	r7, #20
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80137ac:	b480      	push	{r7}
 80137ae:	b085      	sub	sp, #20
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	691b      	ldr	r3, [r3, #16]
 80137b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	6892      	ldr	r2, [r2, #8]
 80137c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	689b      	ldr	r3, [r3, #8]
 80137c8:	687a      	ldr	r2, [r7, #4]
 80137ca:	6852      	ldr	r2, [r2, #4]
 80137cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	685b      	ldr	r3, [r3, #4]
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d103      	bne.n	80137e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	689a      	ldr	r2, [r3, #8]
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2200      	movs	r2, #0
 80137e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	1e5a      	subs	r2, r3, #1
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	681b      	ldr	r3, [r3, #0]
}
 80137f4:	4618      	mov	r0, r3
 80137f6:	3714      	adds	r7, #20
 80137f8:	46bd      	mov	sp, r7
 80137fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fe:	4770      	bx	lr

08013800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b084      	sub	sp, #16
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d10a      	bne.n	801382a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013818:	f383 8811 	msr	BASEPRI, r3
 801381c:	f3bf 8f6f 	isb	sy
 8013820:	f3bf 8f4f 	dsb	sy
 8013824:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013826:	bf00      	nop
 8013828:	e7fe      	b.n	8013828 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801382a:	f002 fbfb 	bl	8016024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013836:	68f9      	ldr	r1, [r7, #12]
 8013838:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801383a:	fb01 f303 	mul.w	r3, r1, r3
 801383e:	441a      	add	r2, r3
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	2200      	movs	r2, #0
 8013848:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681a      	ldr	r2, [r3, #0]
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	681a      	ldr	r2, [r3, #0]
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801385a:	3b01      	subs	r3, #1
 801385c:	68f9      	ldr	r1, [r7, #12]
 801385e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013860:	fb01 f303 	mul.w	r3, r1, r3
 8013864:	441a      	add	r2, r3
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	22ff      	movs	r2, #255	; 0xff
 801386e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	22ff      	movs	r2, #255	; 0xff
 8013876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d114      	bne.n	80138aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	691b      	ldr	r3, [r3, #16]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d01a      	beq.n	80138be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	3310      	adds	r3, #16
 801388c:	4618      	mov	r0, r3
 801388e:	f001 fbaf 	bl	8014ff0 <xTaskRemoveFromEventList>
 8013892:	4603      	mov	r3, r0
 8013894:	2b00      	cmp	r3, #0
 8013896:	d012      	beq.n	80138be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013898:	4b0c      	ldr	r3, [pc, #48]	; (80138cc <xQueueGenericReset+0xcc>)
 801389a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801389e:	601a      	str	r2, [r3, #0]
 80138a0:	f3bf 8f4f 	dsb	sy
 80138a4:	f3bf 8f6f 	isb	sy
 80138a8:	e009      	b.n	80138be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	3310      	adds	r3, #16
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7ff fef2 	bl	8013698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	3324      	adds	r3, #36	; 0x24
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7ff feed 	bl	8013698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80138be:	f002 fbe1 	bl	8016084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80138c2:	2301      	movs	r3, #1
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3710      	adds	r7, #16
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	e000ed04 	.word	0xe000ed04

080138d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b08e      	sub	sp, #56	; 0x38
 80138d4:	af02      	add	r7, sp, #8
 80138d6:	60f8      	str	r0, [r7, #12]
 80138d8:	60b9      	str	r1, [r7, #8]
 80138da:	607a      	str	r2, [r7, #4]
 80138dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d10a      	bne.n	80138fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80138e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e8:	f383 8811 	msr	BASEPRI, r3
 80138ec:	f3bf 8f6f 	isb	sy
 80138f0:	f3bf 8f4f 	dsb	sy
 80138f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80138f6:	bf00      	nop
 80138f8:	e7fe      	b.n	80138f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d10a      	bne.n	8013916 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013904:	f383 8811 	msr	BASEPRI, r3
 8013908:	f3bf 8f6f 	isb	sy
 801390c:	f3bf 8f4f 	dsb	sy
 8013910:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013912:	bf00      	nop
 8013914:	e7fe      	b.n	8013914 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d002      	beq.n	8013922 <xQueueGenericCreateStatic+0x52>
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d001      	beq.n	8013926 <xQueueGenericCreateStatic+0x56>
 8013922:	2301      	movs	r3, #1
 8013924:	e000      	b.n	8013928 <xQueueGenericCreateStatic+0x58>
 8013926:	2300      	movs	r3, #0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d10a      	bne.n	8013942 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013930:	f383 8811 	msr	BASEPRI, r3
 8013934:	f3bf 8f6f 	isb	sy
 8013938:	f3bf 8f4f 	dsb	sy
 801393c:	623b      	str	r3, [r7, #32]
}
 801393e:	bf00      	nop
 8013940:	e7fe      	b.n	8013940 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d102      	bne.n	801394e <xQueueGenericCreateStatic+0x7e>
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d101      	bne.n	8013952 <xQueueGenericCreateStatic+0x82>
 801394e:	2301      	movs	r3, #1
 8013950:	e000      	b.n	8013954 <xQueueGenericCreateStatic+0x84>
 8013952:	2300      	movs	r3, #0
 8013954:	2b00      	cmp	r3, #0
 8013956:	d10a      	bne.n	801396e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395c:	f383 8811 	msr	BASEPRI, r3
 8013960:	f3bf 8f6f 	isb	sy
 8013964:	f3bf 8f4f 	dsb	sy
 8013968:	61fb      	str	r3, [r7, #28]
}
 801396a:	bf00      	nop
 801396c:	e7fe      	b.n	801396c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801396e:	2350      	movs	r3, #80	; 0x50
 8013970:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	2b50      	cmp	r3, #80	; 0x50
 8013976:	d00a      	beq.n	801398e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801397c:	f383 8811 	msr	BASEPRI, r3
 8013980:	f3bf 8f6f 	isb	sy
 8013984:	f3bf 8f4f 	dsb	sy
 8013988:	61bb      	str	r3, [r7, #24]
}
 801398a:	bf00      	nop
 801398c:	e7fe      	b.n	801398c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801398e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013996:	2b00      	cmp	r3, #0
 8013998:	d00d      	beq.n	80139b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801399c:	2201      	movs	r2, #1
 801399e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80139a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80139a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139a8:	9300      	str	r3, [sp, #0]
 80139aa:	4613      	mov	r3, r2
 80139ac:	687a      	ldr	r2, [r7, #4]
 80139ae:	68b9      	ldr	r1, [r7, #8]
 80139b0:	68f8      	ldr	r0, [r7, #12]
 80139b2:	f000 f845 	bl	8013a40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80139b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3730      	adds	r7, #48	; 0x30
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}

080139c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b08a      	sub	sp, #40	; 0x28
 80139c4:	af02      	add	r7, sp, #8
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	4613      	mov	r3, r2
 80139cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d10a      	bne.n	80139ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80139d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d8:	f383 8811 	msr	BASEPRI, r3
 80139dc:	f3bf 8f6f 	isb	sy
 80139e0:	f3bf 8f4f 	dsb	sy
 80139e4:	613b      	str	r3, [r7, #16]
}
 80139e6:	bf00      	nop
 80139e8:	e7fe      	b.n	80139e8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d102      	bne.n	80139f6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80139f0:	2300      	movs	r3, #0
 80139f2:	61fb      	str	r3, [r7, #28]
 80139f4:	e004      	b.n	8013a00 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	68ba      	ldr	r2, [r7, #8]
 80139fa:	fb02 f303 	mul.w	r3, r2, r3
 80139fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013a00:	69fb      	ldr	r3, [r7, #28]
 8013a02:	3350      	adds	r3, #80	; 0x50
 8013a04:	4618      	mov	r0, r3
 8013a06:	f002 fc2f 	bl	8016268 <pvPortMalloc>
 8013a0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013a0c:	69bb      	ldr	r3, [r7, #24]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d011      	beq.n	8013a36 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013a12:	69bb      	ldr	r3, [r7, #24]
 8013a14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	3350      	adds	r3, #80	; 0x50
 8013a1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013a1c:	69bb      	ldr	r3, [r7, #24]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013a24:	79fa      	ldrb	r2, [r7, #7]
 8013a26:	69bb      	ldr	r3, [r7, #24]
 8013a28:	9300      	str	r3, [sp, #0]
 8013a2a:	4613      	mov	r3, r2
 8013a2c:	697a      	ldr	r2, [r7, #20]
 8013a2e:	68b9      	ldr	r1, [r7, #8]
 8013a30:	68f8      	ldr	r0, [r7, #12]
 8013a32:	f000 f805 	bl	8013a40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013a36:	69bb      	ldr	r3, [r7, #24]
	}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3720      	adds	r7, #32
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}

08013a40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b084      	sub	sp, #16
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	60f8      	str	r0, [r7, #12]
 8013a48:	60b9      	str	r1, [r7, #8]
 8013a4a:	607a      	str	r2, [r7, #4]
 8013a4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d103      	bne.n	8013a5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013a54:	69bb      	ldr	r3, [r7, #24]
 8013a56:	69ba      	ldr	r2, [r7, #24]
 8013a58:	601a      	str	r2, [r3, #0]
 8013a5a:	e002      	b.n	8013a62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013a5c:	69bb      	ldr	r3, [r7, #24]
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013a62:	69bb      	ldr	r3, [r7, #24]
 8013a64:	68fa      	ldr	r2, [r7, #12]
 8013a66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013a68:	69bb      	ldr	r3, [r7, #24]
 8013a6a:	68ba      	ldr	r2, [r7, #8]
 8013a6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013a6e:	2101      	movs	r1, #1
 8013a70:	69b8      	ldr	r0, [r7, #24]
 8013a72:	f7ff fec5 	bl	8013800 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013a76:	69bb      	ldr	r3, [r7, #24]
 8013a78:	78fa      	ldrb	r2, [r7, #3]
 8013a7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013a7e:	bf00      	nop
 8013a80:	3710      	adds	r7, #16
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}

08013a86 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b082      	sub	sp, #8
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d00e      	beq.n	8013ab2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2200      	movs	r2, #0
 8013a98:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	2100      	movs	r1, #0
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f000 f81d 	bl	8013aec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013ab2:	bf00      	nop
 8013ab4:	3708      	adds	r7, #8
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}

08013aba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013aba:	b580      	push	{r7, lr}
 8013abc:	b086      	sub	sp, #24
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	617b      	str	r3, [r7, #20]
 8013ac8:	2300      	movs	r3, #0
 8013aca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013acc:	79fb      	ldrb	r3, [r7, #7]
 8013ace:	461a      	mov	r2, r3
 8013ad0:	6939      	ldr	r1, [r7, #16]
 8013ad2:	6978      	ldr	r0, [r7, #20]
 8013ad4:	f7ff ff74 	bl	80139c0 <xQueueGenericCreate>
 8013ad8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013ada:	68f8      	ldr	r0, [r7, #12]
 8013adc:	f7ff ffd3 	bl	8013a86 <prvInitialiseMutex>

		return xNewQueue;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
	}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3718      	adds	r7, #24
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
	...

08013aec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b08e      	sub	sp, #56	; 0x38
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	60f8      	str	r0, [r7, #12]
 8013af4:	60b9      	str	r1, [r7, #8]
 8013af6:	607a      	str	r2, [r7, #4]
 8013af8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013afa:	2300      	movs	r3, #0
 8013afc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d10a      	bne.n	8013b1e <xQueueGenericSend+0x32>
	__asm volatile
 8013b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b0c:	f383 8811 	msr	BASEPRI, r3
 8013b10:	f3bf 8f6f 	isb	sy
 8013b14:	f3bf 8f4f 	dsb	sy
 8013b18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013b1a:	bf00      	nop
 8013b1c:	e7fe      	b.n	8013b1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d103      	bne.n	8013b2c <xQueueGenericSend+0x40>
 8013b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d101      	bne.n	8013b30 <xQueueGenericSend+0x44>
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	e000      	b.n	8013b32 <xQueueGenericSend+0x46>
 8013b30:	2300      	movs	r3, #0
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d10a      	bne.n	8013b4c <xQueueGenericSend+0x60>
	__asm volatile
 8013b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b3a:	f383 8811 	msr	BASEPRI, r3
 8013b3e:	f3bf 8f6f 	isb	sy
 8013b42:	f3bf 8f4f 	dsb	sy
 8013b46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013b48:	bf00      	nop
 8013b4a:	e7fe      	b.n	8013b4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	2b02      	cmp	r3, #2
 8013b50:	d103      	bne.n	8013b5a <xQueueGenericSend+0x6e>
 8013b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b56:	2b01      	cmp	r3, #1
 8013b58:	d101      	bne.n	8013b5e <xQueueGenericSend+0x72>
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	e000      	b.n	8013b60 <xQueueGenericSend+0x74>
 8013b5e:	2300      	movs	r3, #0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10a      	bne.n	8013b7a <xQueueGenericSend+0x8e>
	__asm volatile
 8013b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b68:	f383 8811 	msr	BASEPRI, r3
 8013b6c:	f3bf 8f6f 	isb	sy
 8013b70:	f3bf 8f4f 	dsb	sy
 8013b74:	623b      	str	r3, [r7, #32]
}
 8013b76:	bf00      	nop
 8013b78:	e7fe      	b.n	8013b78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013b7a:	f001 fbf7 	bl	801536c <xTaskGetSchedulerState>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d102      	bne.n	8013b8a <xQueueGenericSend+0x9e>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d101      	bne.n	8013b8e <xQueueGenericSend+0xa2>
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	e000      	b.n	8013b90 <xQueueGenericSend+0xa4>
 8013b8e:	2300      	movs	r3, #0
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d10a      	bne.n	8013baa <xQueueGenericSend+0xbe>
	__asm volatile
 8013b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b98:	f383 8811 	msr	BASEPRI, r3
 8013b9c:	f3bf 8f6f 	isb	sy
 8013ba0:	f3bf 8f4f 	dsb	sy
 8013ba4:	61fb      	str	r3, [r7, #28]
}
 8013ba6:	bf00      	nop
 8013ba8:	e7fe      	b.n	8013ba8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013baa:	f002 fa3b 	bl	8016024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d302      	bcc.n	8013bc0 <xQueueGenericSend+0xd4>
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	2b02      	cmp	r3, #2
 8013bbe:	d129      	bne.n	8013c14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013bc0:	683a      	ldr	r2, [r7, #0]
 8013bc2:	68b9      	ldr	r1, [r7, #8]
 8013bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bc6:	f000 fc45 	bl	8014454 <prvCopyDataToQueue>
 8013bca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d010      	beq.n	8013bf6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd6:	3324      	adds	r3, #36	; 0x24
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f001 fa09 	bl	8014ff0 <xTaskRemoveFromEventList>
 8013bde:	4603      	mov	r3, r0
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d013      	beq.n	8013c0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013be4:	4b3f      	ldr	r3, [pc, #252]	; (8013ce4 <xQueueGenericSend+0x1f8>)
 8013be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bea:	601a      	str	r2, [r3, #0]
 8013bec:	f3bf 8f4f 	dsb	sy
 8013bf0:	f3bf 8f6f 	isb	sy
 8013bf4:	e00a      	b.n	8013c0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d007      	beq.n	8013c0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013bfc:	4b39      	ldr	r3, [pc, #228]	; (8013ce4 <xQueueGenericSend+0x1f8>)
 8013bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c02:	601a      	str	r2, [r3, #0]
 8013c04:	f3bf 8f4f 	dsb	sy
 8013c08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013c0c:	f002 fa3a 	bl	8016084 <vPortExitCritical>
				return pdPASS;
 8013c10:	2301      	movs	r3, #1
 8013c12:	e063      	b.n	8013cdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d103      	bne.n	8013c22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013c1a:	f002 fa33 	bl	8016084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013c1e:	2300      	movs	r3, #0
 8013c20:	e05c      	b.n	8013cdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d106      	bne.n	8013c36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013c28:	f107 0314 	add.w	r3, r7, #20
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f001 fa43 	bl	80150b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013c32:	2301      	movs	r3, #1
 8013c34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013c36:	f002 fa25 	bl	8016084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013c3a:	f000 ffb5 	bl	8014ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013c3e:	f002 f9f1 	bl	8016024 <vPortEnterCritical>
 8013c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c48:	b25b      	sxtb	r3, r3
 8013c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c4e:	d103      	bne.n	8013c58 <xQueueGenericSend+0x16c>
 8013c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c52:	2200      	movs	r2, #0
 8013c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c5e:	b25b      	sxtb	r3, r3
 8013c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c64:	d103      	bne.n	8013c6e <xQueueGenericSend+0x182>
 8013c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c68:	2200      	movs	r2, #0
 8013c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c6e:	f002 fa09 	bl	8016084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013c72:	1d3a      	adds	r2, r7, #4
 8013c74:	f107 0314 	add.w	r3, r7, #20
 8013c78:	4611      	mov	r1, r2
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f001 fa32 	bl	80150e4 <xTaskCheckForTimeOut>
 8013c80:	4603      	mov	r3, r0
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d124      	bne.n	8013cd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c88:	f000 fcdc 	bl	8014644 <prvIsQueueFull>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d018      	beq.n	8013cc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c94:	3310      	adds	r3, #16
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	4611      	mov	r1, r2
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f001 f958 	bl	8014f50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ca2:	f000 fc67 	bl	8014574 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013ca6:	f000 ff8d 	bl	8014bc4 <xTaskResumeAll>
 8013caa:	4603      	mov	r3, r0
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	f47f af7c 	bne.w	8013baa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013cb2:	4b0c      	ldr	r3, [pc, #48]	; (8013ce4 <xQueueGenericSend+0x1f8>)
 8013cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cb8:	601a      	str	r2, [r3, #0]
 8013cba:	f3bf 8f4f 	dsb	sy
 8013cbe:	f3bf 8f6f 	isb	sy
 8013cc2:	e772      	b.n	8013baa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013cc6:	f000 fc55 	bl	8014574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013cca:	f000 ff7b 	bl	8014bc4 <xTaskResumeAll>
 8013cce:	e76c      	b.n	8013baa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013cd2:	f000 fc4f 	bl	8014574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013cd6:	f000 ff75 	bl	8014bc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013cda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3738      	adds	r7, #56	; 0x38
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}
 8013ce4:	e000ed04 	.word	0xe000ed04

08013ce8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b08e      	sub	sp, #56	; 0x38
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	60f8      	str	r0, [r7, #12]
 8013cf0:	60b9      	str	r1, [r7, #8]
 8013cf2:	607a      	str	r2, [r7, #4]
 8013cf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d10a      	bne.n	8013d16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d04:	f383 8811 	msr	BASEPRI, r3
 8013d08:	f3bf 8f6f 	isb	sy
 8013d0c:	f3bf 8f4f 	dsb	sy
 8013d10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013d12:	bf00      	nop
 8013d14:	e7fe      	b.n	8013d14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d103      	bne.n	8013d24 <xQueueGenericSendFromISR+0x3c>
 8013d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d101      	bne.n	8013d28 <xQueueGenericSendFromISR+0x40>
 8013d24:	2301      	movs	r3, #1
 8013d26:	e000      	b.n	8013d2a <xQueueGenericSendFromISR+0x42>
 8013d28:	2300      	movs	r3, #0
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d10a      	bne.n	8013d44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d32:	f383 8811 	msr	BASEPRI, r3
 8013d36:	f3bf 8f6f 	isb	sy
 8013d3a:	f3bf 8f4f 	dsb	sy
 8013d3e:	623b      	str	r3, [r7, #32]
}
 8013d40:	bf00      	nop
 8013d42:	e7fe      	b.n	8013d42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	2b02      	cmp	r3, #2
 8013d48:	d103      	bne.n	8013d52 <xQueueGenericSendFromISR+0x6a>
 8013d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d4e:	2b01      	cmp	r3, #1
 8013d50:	d101      	bne.n	8013d56 <xQueueGenericSendFromISR+0x6e>
 8013d52:	2301      	movs	r3, #1
 8013d54:	e000      	b.n	8013d58 <xQueueGenericSendFromISR+0x70>
 8013d56:	2300      	movs	r3, #0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d10a      	bne.n	8013d72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d60:	f383 8811 	msr	BASEPRI, r3
 8013d64:	f3bf 8f6f 	isb	sy
 8013d68:	f3bf 8f4f 	dsb	sy
 8013d6c:	61fb      	str	r3, [r7, #28]
}
 8013d6e:	bf00      	nop
 8013d70:	e7fe      	b.n	8013d70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d72:	f002 fa39 	bl	80161e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013d76:	f3ef 8211 	mrs	r2, BASEPRI
 8013d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d7e:	f383 8811 	msr	BASEPRI, r3
 8013d82:	f3bf 8f6f 	isb	sy
 8013d86:	f3bf 8f4f 	dsb	sy
 8013d8a:	61ba      	str	r2, [r7, #24]
 8013d8c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013d8e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d302      	bcc.n	8013da4 <xQueueGenericSendFromISR+0xbc>
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	2b02      	cmp	r3, #2
 8013da2:	d12c      	bne.n	8013dfe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013dae:	683a      	ldr	r2, [r7, #0]
 8013db0:	68b9      	ldr	r1, [r7, #8]
 8013db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013db4:	f000 fb4e 	bl	8014454 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013db8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dc0:	d112      	bne.n	8013de8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d016      	beq.n	8013df8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dcc:	3324      	adds	r3, #36	; 0x24
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f001 f90e 	bl	8014ff0 <xTaskRemoveFromEventList>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d00e      	beq.n	8013df8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d00b      	beq.n	8013df8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2201      	movs	r2, #1
 8013de4:	601a      	str	r2, [r3, #0]
 8013de6:	e007      	b.n	8013df8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013de8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013dec:	3301      	adds	r3, #1
 8013dee:	b2db      	uxtb	r3, r3
 8013df0:	b25a      	sxtb	r2, r3
 8013df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013df8:	2301      	movs	r3, #1
 8013dfa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013dfc:	e001      	b.n	8013e02 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013dfe:	2300      	movs	r3, #0
 8013e00:	637b      	str	r3, [r7, #52]	; 0x34
 8013e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e04:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013e0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3738      	adds	r7, #56	; 0x38
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}

08013e18 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b08e      	sub	sp, #56	; 0x38
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
 8013e20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d10a      	bne.n	8013e42 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8013e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e30:	f383 8811 	msr	BASEPRI, r3
 8013e34:	f3bf 8f6f 	isb	sy
 8013e38:	f3bf 8f4f 	dsb	sy
 8013e3c:	623b      	str	r3, [r7, #32]
}
 8013e3e:	bf00      	nop
 8013e40:	e7fe      	b.n	8013e40 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d00a      	beq.n	8013e60 <xQueueGiveFromISR+0x48>
	__asm volatile
 8013e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4e:	f383 8811 	msr	BASEPRI, r3
 8013e52:	f3bf 8f6f 	isb	sy
 8013e56:	f3bf 8f4f 	dsb	sy
 8013e5a:	61fb      	str	r3, [r7, #28]
}
 8013e5c:	bf00      	nop
 8013e5e:	e7fe      	b.n	8013e5e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d103      	bne.n	8013e70 <xQueueGiveFromISR+0x58>
 8013e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e6a:	689b      	ldr	r3, [r3, #8]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d101      	bne.n	8013e74 <xQueueGiveFromISR+0x5c>
 8013e70:	2301      	movs	r3, #1
 8013e72:	e000      	b.n	8013e76 <xQueueGiveFromISR+0x5e>
 8013e74:	2300      	movs	r3, #0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d10a      	bne.n	8013e90 <xQueueGiveFromISR+0x78>
	__asm volatile
 8013e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e7e:	f383 8811 	msr	BASEPRI, r3
 8013e82:	f3bf 8f6f 	isb	sy
 8013e86:	f3bf 8f4f 	dsb	sy
 8013e8a:	61bb      	str	r3, [r7, #24]
}
 8013e8c:	bf00      	nop
 8013e8e:	e7fe      	b.n	8013e8e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e90:	f002 f9aa 	bl	80161e8 <vPortValidateInterruptPriority>
	__asm volatile
 8013e94:	f3ef 8211 	mrs	r2, BASEPRI
 8013e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e9c:	f383 8811 	msr	BASEPRI, r3
 8013ea0:	f3bf 8f6f 	isb	sy
 8013ea4:	f3bf 8f4f 	dsb	sy
 8013ea8:	617a      	str	r2, [r7, #20]
 8013eaa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013eac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013eae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013eb4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d22b      	bcs.n	8013f18 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ecc:	1c5a      	adds	r2, r3, #1
 8013ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013ed2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eda:	d112      	bne.n	8013f02 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d016      	beq.n	8013f12 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee6:	3324      	adds	r3, #36	; 0x24
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f001 f881 	bl	8014ff0 <xTaskRemoveFromEventList>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d00e      	beq.n	8013f12 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d00b      	beq.n	8013f12 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	2201      	movs	r2, #1
 8013efe:	601a      	str	r2, [r3, #0]
 8013f00:	e007      	b.n	8013f12 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f06:	3301      	adds	r3, #1
 8013f08:	b2db      	uxtb	r3, r3
 8013f0a:	b25a      	sxtb	r2, r3
 8013f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013f12:	2301      	movs	r3, #1
 8013f14:	637b      	str	r3, [r7, #52]	; 0x34
 8013f16:	e001      	b.n	8013f1c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013f18:	2300      	movs	r3, #0
 8013f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8013f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	f383 8811 	msr	BASEPRI, r3
}
 8013f26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3738      	adds	r7, #56	; 0x38
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}
	...

08013f34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b08c      	sub	sp, #48	; 0x30
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013f40:	2300      	movs	r3, #0
 8013f42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d10a      	bne.n	8013f64 <xQueueReceive+0x30>
	__asm volatile
 8013f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f52:	f383 8811 	msr	BASEPRI, r3
 8013f56:	f3bf 8f6f 	isb	sy
 8013f5a:	f3bf 8f4f 	dsb	sy
 8013f5e:	623b      	str	r3, [r7, #32]
}
 8013f60:	bf00      	nop
 8013f62:	e7fe      	b.n	8013f62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d103      	bne.n	8013f72 <xQueueReceive+0x3e>
 8013f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d101      	bne.n	8013f76 <xQueueReceive+0x42>
 8013f72:	2301      	movs	r3, #1
 8013f74:	e000      	b.n	8013f78 <xQueueReceive+0x44>
 8013f76:	2300      	movs	r3, #0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d10a      	bne.n	8013f92 <xQueueReceive+0x5e>
	__asm volatile
 8013f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f80:	f383 8811 	msr	BASEPRI, r3
 8013f84:	f3bf 8f6f 	isb	sy
 8013f88:	f3bf 8f4f 	dsb	sy
 8013f8c:	61fb      	str	r3, [r7, #28]
}
 8013f8e:	bf00      	nop
 8013f90:	e7fe      	b.n	8013f90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f92:	f001 f9eb 	bl	801536c <xTaskGetSchedulerState>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d102      	bne.n	8013fa2 <xQueueReceive+0x6e>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d101      	bne.n	8013fa6 <xQueueReceive+0x72>
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	e000      	b.n	8013fa8 <xQueueReceive+0x74>
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d10a      	bne.n	8013fc2 <xQueueReceive+0x8e>
	__asm volatile
 8013fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb0:	f383 8811 	msr	BASEPRI, r3
 8013fb4:	f3bf 8f6f 	isb	sy
 8013fb8:	f3bf 8f4f 	dsb	sy
 8013fbc:	61bb      	str	r3, [r7, #24]
}
 8013fbe:	bf00      	nop
 8013fc0:	e7fe      	b.n	8013fc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013fc2:	f002 f82f 	bl	8016024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d01f      	beq.n	8014012 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013fd2:	68b9      	ldr	r1, [r7, #8]
 8013fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fd6:	f000 faa7 	bl	8014528 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fdc:	1e5a      	subs	r2, r3, #1
 8013fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe4:	691b      	ldr	r3, [r3, #16]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00f      	beq.n	801400a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fec:	3310      	adds	r3, #16
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f000 fffe 	bl	8014ff0 <xTaskRemoveFromEventList>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d007      	beq.n	801400a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013ffa:	4b3d      	ldr	r3, [pc, #244]	; (80140f0 <xQueueReceive+0x1bc>)
 8013ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014000:	601a      	str	r2, [r3, #0]
 8014002:	f3bf 8f4f 	dsb	sy
 8014006:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801400a:	f002 f83b 	bl	8016084 <vPortExitCritical>
				return pdPASS;
 801400e:	2301      	movs	r3, #1
 8014010:	e069      	b.n	80140e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d103      	bne.n	8014020 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014018:	f002 f834 	bl	8016084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801401c:	2300      	movs	r3, #0
 801401e:	e062      	b.n	80140e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014022:	2b00      	cmp	r3, #0
 8014024:	d106      	bne.n	8014034 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014026:	f107 0310 	add.w	r3, r7, #16
 801402a:	4618      	mov	r0, r3
 801402c:	f001 f844 	bl	80150b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014030:	2301      	movs	r3, #1
 8014032:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014034:	f002 f826 	bl	8016084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014038:	f000 fdb6 	bl	8014ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801403c:	f001 fff2 	bl	8016024 <vPortEnterCritical>
 8014040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014046:	b25b      	sxtb	r3, r3
 8014048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801404c:	d103      	bne.n	8014056 <xQueueReceive+0x122>
 801404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014050:	2200      	movs	r2, #0
 8014052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801405c:	b25b      	sxtb	r3, r3
 801405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014062:	d103      	bne.n	801406c <xQueueReceive+0x138>
 8014064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014066:	2200      	movs	r2, #0
 8014068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801406c:	f002 f80a 	bl	8016084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014070:	1d3a      	adds	r2, r7, #4
 8014072:	f107 0310 	add.w	r3, r7, #16
 8014076:	4611      	mov	r1, r2
 8014078:	4618      	mov	r0, r3
 801407a:	f001 f833 	bl	80150e4 <xTaskCheckForTimeOut>
 801407e:	4603      	mov	r3, r0
 8014080:	2b00      	cmp	r3, #0
 8014082:	d123      	bne.n	80140cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014086:	f000 fac7 	bl	8014618 <prvIsQueueEmpty>
 801408a:	4603      	mov	r3, r0
 801408c:	2b00      	cmp	r3, #0
 801408e:	d017      	beq.n	80140c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014092:	3324      	adds	r3, #36	; 0x24
 8014094:	687a      	ldr	r2, [r7, #4]
 8014096:	4611      	mov	r1, r2
 8014098:	4618      	mov	r0, r3
 801409a:	f000 ff59 	bl	8014f50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801409e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140a0:	f000 fa68 	bl	8014574 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80140a4:	f000 fd8e 	bl	8014bc4 <xTaskResumeAll>
 80140a8:	4603      	mov	r3, r0
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d189      	bne.n	8013fc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80140ae:	4b10      	ldr	r3, [pc, #64]	; (80140f0 <xQueueReceive+0x1bc>)
 80140b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140b4:	601a      	str	r2, [r3, #0]
 80140b6:	f3bf 8f4f 	dsb	sy
 80140ba:	f3bf 8f6f 	isb	sy
 80140be:	e780      	b.n	8013fc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80140c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140c2:	f000 fa57 	bl	8014574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80140c6:	f000 fd7d 	bl	8014bc4 <xTaskResumeAll>
 80140ca:	e77a      	b.n	8013fc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80140cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140ce:	f000 fa51 	bl	8014574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80140d2:	f000 fd77 	bl	8014bc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80140d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140d8:	f000 fa9e 	bl	8014618 <prvIsQueueEmpty>
 80140dc:	4603      	mov	r3, r0
 80140de:	2b00      	cmp	r3, #0
 80140e0:	f43f af6f 	beq.w	8013fc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80140e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80140e6:	4618      	mov	r0, r3
 80140e8:	3730      	adds	r7, #48	; 0x30
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}
 80140ee:	bf00      	nop
 80140f0:	e000ed04 	.word	0xe000ed04

080140f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b08e      	sub	sp, #56	; 0x38
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
 80140fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80140fe:	2300      	movs	r3, #0
 8014100:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014106:	2300      	movs	r3, #0
 8014108:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801410c:	2b00      	cmp	r3, #0
 801410e:	d10a      	bne.n	8014126 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8014110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014114:	f383 8811 	msr	BASEPRI, r3
 8014118:	f3bf 8f6f 	isb	sy
 801411c:	f3bf 8f4f 	dsb	sy
 8014120:	623b      	str	r3, [r7, #32]
}
 8014122:	bf00      	nop
 8014124:	e7fe      	b.n	8014124 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801412a:	2b00      	cmp	r3, #0
 801412c:	d00a      	beq.n	8014144 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014132:	f383 8811 	msr	BASEPRI, r3
 8014136:	f3bf 8f6f 	isb	sy
 801413a:	f3bf 8f4f 	dsb	sy
 801413e:	61fb      	str	r3, [r7, #28]
}
 8014140:	bf00      	nop
 8014142:	e7fe      	b.n	8014142 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014144:	f001 f912 	bl	801536c <xTaskGetSchedulerState>
 8014148:	4603      	mov	r3, r0
 801414a:	2b00      	cmp	r3, #0
 801414c:	d102      	bne.n	8014154 <xQueueSemaphoreTake+0x60>
 801414e:	683b      	ldr	r3, [r7, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d101      	bne.n	8014158 <xQueueSemaphoreTake+0x64>
 8014154:	2301      	movs	r3, #1
 8014156:	e000      	b.n	801415a <xQueueSemaphoreTake+0x66>
 8014158:	2300      	movs	r3, #0
 801415a:	2b00      	cmp	r3, #0
 801415c:	d10a      	bne.n	8014174 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014162:	f383 8811 	msr	BASEPRI, r3
 8014166:	f3bf 8f6f 	isb	sy
 801416a:	f3bf 8f4f 	dsb	sy
 801416e:	61bb      	str	r3, [r7, #24]
}
 8014170:	bf00      	nop
 8014172:	e7fe      	b.n	8014172 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014174:	f001 ff56 	bl	8016024 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801417c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014180:	2b00      	cmp	r3, #0
 8014182:	d024      	beq.n	80141ce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014186:	1e5a      	subs	r2, r3, #1
 8014188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d104      	bne.n	801419e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014194:	f001 fa60 	bl	8015658 <pvTaskIncrementMutexHeldCount>
 8014198:	4602      	mov	r2, r0
 801419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801419c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a0:	691b      	ldr	r3, [r3, #16]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d00f      	beq.n	80141c6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a8:	3310      	adds	r3, #16
 80141aa:	4618      	mov	r0, r3
 80141ac:	f000 ff20 	bl	8014ff0 <xTaskRemoveFromEventList>
 80141b0:	4603      	mov	r3, r0
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d007      	beq.n	80141c6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80141b6:	4b54      	ldr	r3, [pc, #336]	; (8014308 <xQueueSemaphoreTake+0x214>)
 80141b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141bc:	601a      	str	r2, [r3, #0]
 80141be:	f3bf 8f4f 	dsb	sy
 80141c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80141c6:	f001 ff5d 	bl	8016084 <vPortExitCritical>
				return pdPASS;
 80141ca:	2301      	movs	r3, #1
 80141cc:	e097      	b.n	80142fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d111      	bne.n	80141f8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80141d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d00a      	beq.n	80141f0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80141da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141de:	f383 8811 	msr	BASEPRI, r3
 80141e2:	f3bf 8f6f 	isb	sy
 80141e6:	f3bf 8f4f 	dsb	sy
 80141ea:	617b      	str	r3, [r7, #20]
}
 80141ec:	bf00      	nop
 80141ee:	e7fe      	b.n	80141ee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80141f0:	f001 ff48 	bl	8016084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80141f4:	2300      	movs	r3, #0
 80141f6:	e082      	b.n	80142fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80141f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d106      	bne.n	801420c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80141fe:	f107 030c 	add.w	r3, r7, #12
 8014202:	4618      	mov	r0, r3
 8014204:	f000 ff58 	bl	80150b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014208:	2301      	movs	r3, #1
 801420a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801420c:	f001 ff3a 	bl	8016084 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014210:	f000 fcca 	bl	8014ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014214:	f001 ff06 	bl	8016024 <vPortEnterCritical>
 8014218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801421a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801421e:	b25b      	sxtb	r3, r3
 8014220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014224:	d103      	bne.n	801422e <xQueueSemaphoreTake+0x13a>
 8014226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014228:	2200      	movs	r2, #0
 801422a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014234:	b25b      	sxtb	r3, r3
 8014236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801423a:	d103      	bne.n	8014244 <xQueueSemaphoreTake+0x150>
 801423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801423e:	2200      	movs	r2, #0
 8014240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014244:	f001 ff1e 	bl	8016084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014248:	463a      	mov	r2, r7
 801424a:	f107 030c 	add.w	r3, r7, #12
 801424e:	4611      	mov	r1, r2
 8014250:	4618      	mov	r0, r3
 8014252:	f000 ff47 	bl	80150e4 <xTaskCheckForTimeOut>
 8014256:	4603      	mov	r3, r0
 8014258:	2b00      	cmp	r3, #0
 801425a:	d132      	bne.n	80142c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801425c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801425e:	f000 f9db 	bl	8014618 <prvIsQueueEmpty>
 8014262:	4603      	mov	r3, r0
 8014264:	2b00      	cmp	r3, #0
 8014266:	d026      	beq.n	80142b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d109      	bne.n	8014284 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8014270:	f001 fed8 	bl	8016024 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014276:	689b      	ldr	r3, [r3, #8]
 8014278:	4618      	mov	r0, r3
 801427a:	f001 f895 	bl	80153a8 <xTaskPriorityInherit>
 801427e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014280:	f001 ff00 	bl	8016084 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014286:	3324      	adds	r3, #36	; 0x24
 8014288:	683a      	ldr	r2, [r7, #0]
 801428a:	4611      	mov	r1, r2
 801428c:	4618      	mov	r0, r3
 801428e:	f000 fe5f 	bl	8014f50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014294:	f000 f96e 	bl	8014574 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014298:	f000 fc94 	bl	8014bc4 <xTaskResumeAll>
 801429c:	4603      	mov	r3, r0
 801429e:	2b00      	cmp	r3, #0
 80142a0:	f47f af68 	bne.w	8014174 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80142a4:	4b18      	ldr	r3, [pc, #96]	; (8014308 <xQueueSemaphoreTake+0x214>)
 80142a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142aa:	601a      	str	r2, [r3, #0]
 80142ac:	f3bf 8f4f 	dsb	sy
 80142b0:	f3bf 8f6f 	isb	sy
 80142b4:	e75e      	b.n	8014174 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80142b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142b8:	f000 f95c 	bl	8014574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80142bc:	f000 fc82 	bl	8014bc4 <xTaskResumeAll>
 80142c0:	e758      	b.n	8014174 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80142c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142c4:	f000 f956 	bl	8014574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80142c8:	f000 fc7c 	bl	8014bc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80142cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142ce:	f000 f9a3 	bl	8014618 <prvIsQueueEmpty>
 80142d2:	4603      	mov	r3, r0
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	f43f af4d 	beq.w	8014174 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80142da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d00d      	beq.n	80142fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80142e0:	f001 fea0 	bl	8016024 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80142e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142e6:	f000 f89d 	bl	8014424 <prvGetDisinheritPriorityAfterTimeout>
 80142ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80142ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ee:	689b      	ldr	r3, [r3, #8]
 80142f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80142f2:	4618      	mov	r0, r3
 80142f4:	f001 f92e 	bl	8015554 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80142f8:	f001 fec4 	bl	8016084 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80142fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3738      	adds	r7, #56	; 0x38
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
 8014306:	bf00      	nop
 8014308:	e000ed04 	.word	0xe000ed04

0801430c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b08e      	sub	sp, #56	; 0x38
 8014310:	af00      	add	r7, sp, #0
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	60b9      	str	r1, [r7, #8]
 8014316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801431e:	2b00      	cmp	r3, #0
 8014320:	d10a      	bne.n	8014338 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014326:	f383 8811 	msr	BASEPRI, r3
 801432a:	f3bf 8f6f 	isb	sy
 801432e:	f3bf 8f4f 	dsb	sy
 8014332:	623b      	str	r3, [r7, #32]
}
 8014334:	bf00      	nop
 8014336:	e7fe      	b.n	8014336 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d103      	bne.n	8014346 <xQueueReceiveFromISR+0x3a>
 801433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014342:	2b00      	cmp	r3, #0
 8014344:	d101      	bne.n	801434a <xQueueReceiveFromISR+0x3e>
 8014346:	2301      	movs	r3, #1
 8014348:	e000      	b.n	801434c <xQueueReceiveFromISR+0x40>
 801434a:	2300      	movs	r3, #0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d10a      	bne.n	8014366 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014354:	f383 8811 	msr	BASEPRI, r3
 8014358:	f3bf 8f6f 	isb	sy
 801435c:	f3bf 8f4f 	dsb	sy
 8014360:	61fb      	str	r3, [r7, #28]
}
 8014362:	bf00      	nop
 8014364:	e7fe      	b.n	8014364 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014366:	f001 ff3f 	bl	80161e8 <vPortValidateInterruptPriority>
	__asm volatile
 801436a:	f3ef 8211 	mrs	r2, BASEPRI
 801436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014372:	f383 8811 	msr	BASEPRI, r3
 8014376:	f3bf 8f6f 	isb	sy
 801437a:	f3bf 8f4f 	dsb	sy
 801437e:	61ba      	str	r2, [r7, #24]
 8014380:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014382:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014384:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801438a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801438e:	2b00      	cmp	r3, #0
 8014390:	d02f      	beq.n	80143f2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801439c:	68b9      	ldr	r1, [r7, #8]
 801439e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143a0:	f000 f8c2 	bl	8014528 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80143a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a6:	1e5a      	subs	r2, r3, #1
 80143a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80143ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80143b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143b4:	d112      	bne.n	80143dc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80143b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b8:	691b      	ldr	r3, [r3, #16]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d016      	beq.n	80143ec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80143be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c0:	3310      	adds	r3, #16
 80143c2:	4618      	mov	r0, r3
 80143c4:	f000 fe14 	bl	8014ff0 <xTaskRemoveFromEventList>
 80143c8:	4603      	mov	r3, r0
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d00e      	beq.n	80143ec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d00b      	beq.n	80143ec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2201      	movs	r2, #1
 80143d8:	601a      	str	r2, [r3, #0]
 80143da:	e007      	b.n	80143ec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80143dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143e0:	3301      	adds	r3, #1
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	b25a      	sxtb	r2, r3
 80143e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80143ec:	2301      	movs	r3, #1
 80143ee:	637b      	str	r3, [r7, #52]	; 0x34
 80143f0:	e001      	b.n	80143f6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80143f2:	2300      	movs	r3, #0
 80143f4:	637b      	str	r3, [r7, #52]	; 0x34
 80143f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	f383 8811 	msr	BASEPRI, r3
}
 8014400:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014404:	4618      	mov	r0, r3
 8014406:	3738      	adds	r7, #56	; 0x38
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}

0801440c <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 801440c:	b480      	push	{r7}
 801440e:	b083      	sub	sp, #12
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8014418:	4618      	mov	r0, r3
 801441a:	370c      	adds	r7, #12
 801441c:	46bd      	mov	sp, r7
 801441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014422:	4770      	bx	lr

08014424 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014424:	b480      	push	{r7}
 8014426:	b085      	sub	sp, #20
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014430:	2b00      	cmp	r3, #0
 8014432:	d006      	beq.n	8014442 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801443e:	60fb      	str	r3, [r7, #12]
 8014440:	e001      	b.n	8014446 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014442:	2300      	movs	r3, #0
 8014444:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014446:	68fb      	ldr	r3, [r7, #12]
	}
 8014448:	4618      	mov	r0, r3
 801444a:	3714      	adds	r7, #20
 801444c:	46bd      	mov	sp, r7
 801444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014452:	4770      	bx	lr

08014454 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b086      	sub	sp, #24
 8014458:	af00      	add	r7, sp, #0
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014460:	2300      	movs	r3, #0
 8014462:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014468:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801446e:	2b00      	cmp	r3, #0
 8014470:	d10d      	bne.n	801448e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d14d      	bne.n	8014516 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	689b      	ldr	r3, [r3, #8]
 801447e:	4618      	mov	r0, r3
 8014480:	f000 fffa 	bl	8015478 <xTaskPriorityDisinherit>
 8014484:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	2200      	movs	r2, #0
 801448a:	609a      	str	r2, [r3, #8]
 801448c:	e043      	b.n	8014516 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d119      	bne.n	80144c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	6858      	ldr	r0, [r3, #4]
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801449c:	461a      	mov	r2, r3
 801449e:	68b9      	ldr	r1, [r7, #8]
 80144a0:	f002 fd0e 	bl	8016ec0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	685a      	ldr	r2, [r3, #4]
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144ac:	441a      	add	r2, r3
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	685a      	ldr	r2, [r3, #4]
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	689b      	ldr	r3, [r3, #8]
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d32b      	bcc.n	8014516 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	681a      	ldr	r2, [r3, #0]
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	605a      	str	r2, [r3, #4]
 80144c6:	e026      	b.n	8014516 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	68d8      	ldr	r0, [r3, #12]
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144d0:	461a      	mov	r2, r3
 80144d2:	68b9      	ldr	r1, [r7, #8]
 80144d4:	f002 fcf4 	bl	8016ec0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	68da      	ldr	r2, [r3, #12]
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144e0:	425b      	negs	r3, r3
 80144e2:	441a      	add	r2, r3
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	68da      	ldr	r2, [r3, #12]
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	429a      	cmp	r2, r3
 80144f2:	d207      	bcs.n	8014504 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	689a      	ldr	r2, [r3, #8]
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144fc:	425b      	negs	r3, r3
 80144fe:	441a      	add	r2, r3
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2b02      	cmp	r3, #2
 8014508:	d105      	bne.n	8014516 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801450a:	693b      	ldr	r3, [r7, #16]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d002      	beq.n	8014516 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014510:	693b      	ldr	r3, [r7, #16]
 8014512:	3b01      	subs	r3, #1
 8014514:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	1c5a      	adds	r2, r3, #1
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801451e:	697b      	ldr	r3, [r7, #20]
}
 8014520:	4618      	mov	r0, r3
 8014522:	3718      	adds	r7, #24
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}

08014528 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
 8014530:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014536:	2b00      	cmp	r3, #0
 8014538:	d018      	beq.n	801456c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	68da      	ldr	r2, [r3, #12]
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014542:	441a      	add	r2, r3
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	68da      	ldr	r2, [r3, #12]
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	689b      	ldr	r3, [r3, #8]
 8014550:	429a      	cmp	r2, r3
 8014552:	d303      	bcc.n	801455c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681a      	ldr	r2, [r3, #0]
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	68d9      	ldr	r1, [r3, #12]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014564:	461a      	mov	r2, r3
 8014566:	6838      	ldr	r0, [r7, #0]
 8014568:	f002 fcaa 	bl	8016ec0 <memcpy>
	}
}
 801456c:	bf00      	nop
 801456e:	3708      	adds	r7, #8
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801457c:	f001 fd52 	bl	8016024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014586:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014588:	e011      	b.n	80145ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801458e:	2b00      	cmp	r3, #0
 8014590:	d012      	beq.n	80145b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	3324      	adds	r3, #36	; 0x24
 8014596:	4618      	mov	r0, r3
 8014598:	f000 fd2a 	bl	8014ff0 <xTaskRemoveFromEventList>
 801459c:	4603      	mov	r3, r0
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d001      	beq.n	80145a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80145a2:	f000 fe01 	bl	80151a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80145a6:	7bfb      	ldrb	r3, [r7, #15]
 80145a8:	3b01      	subs	r3, #1
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80145ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	dce9      	bgt.n	801458a <prvUnlockQueue+0x16>
 80145b6:	e000      	b.n	80145ba <prvUnlockQueue+0x46>
					break;
 80145b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	22ff      	movs	r2, #255	; 0xff
 80145be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80145c2:	f001 fd5f 	bl	8016084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80145c6:	f001 fd2d 	bl	8016024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80145d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80145d2:	e011      	b.n	80145f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	691b      	ldr	r3, [r3, #16]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d012      	beq.n	8014602 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	3310      	adds	r3, #16
 80145e0:	4618      	mov	r0, r3
 80145e2:	f000 fd05 	bl	8014ff0 <xTaskRemoveFromEventList>
 80145e6:	4603      	mov	r3, r0
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d001      	beq.n	80145f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80145ec:	f000 fddc 	bl	80151a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80145f0:	7bbb      	ldrb	r3, [r7, #14]
 80145f2:	3b01      	subs	r3, #1
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80145f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	dce9      	bgt.n	80145d4 <prvUnlockQueue+0x60>
 8014600:	e000      	b.n	8014604 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014602:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	22ff      	movs	r2, #255	; 0xff
 8014608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801460c:	f001 fd3a 	bl	8016084 <vPortExitCritical>
}
 8014610:	bf00      	nop
 8014612:	3710      	adds	r7, #16
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}

08014618 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b084      	sub	sp, #16
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014620:	f001 fd00 	bl	8016024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014628:	2b00      	cmp	r3, #0
 801462a:	d102      	bne.n	8014632 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801462c:	2301      	movs	r3, #1
 801462e:	60fb      	str	r3, [r7, #12]
 8014630:	e001      	b.n	8014636 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014632:	2300      	movs	r3, #0
 8014634:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014636:	f001 fd25 	bl	8016084 <vPortExitCritical>

	return xReturn;
 801463a:	68fb      	ldr	r3, [r7, #12]
}
 801463c:	4618      	mov	r0, r3
 801463e:	3710      	adds	r7, #16
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b084      	sub	sp, #16
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801464c:	f001 fcea 	bl	8016024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014658:	429a      	cmp	r2, r3
 801465a:	d102      	bne.n	8014662 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801465c:	2301      	movs	r3, #1
 801465e:	60fb      	str	r3, [r7, #12]
 8014660:	e001      	b.n	8014666 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014662:	2300      	movs	r3, #0
 8014664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014666:	f001 fd0d 	bl	8016084 <vPortExitCritical>

	return xReturn;
 801466a:	68fb      	ldr	r3, [r7, #12]
}
 801466c:	4618      	mov	r0, r3
 801466e:	3710      	adds	r7, #16
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}

08014674 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014674:	b480      	push	{r7}
 8014676:	b085      	sub	sp, #20
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801467e:	2300      	movs	r3, #0
 8014680:	60fb      	str	r3, [r7, #12]
 8014682:	e014      	b.n	80146ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014684:	4a0f      	ldr	r2, [pc, #60]	; (80146c4 <vQueueAddToRegistry+0x50>)
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d10b      	bne.n	80146a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014690:	490c      	ldr	r1, [pc, #48]	; (80146c4 <vQueueAddToRegistry+0x50>)
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	683a      	ldr	r2, [r7, #0]
 8014696:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801469a:	4a0a      	ldr	r2, [pc, #40]	; (80146c4 <vQueueAddToRegistry+0x50>)
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	00db      	lsls	r3, r3, #3
 80146a0:	4413      	add	r3, r2
 80146a2:	687a      	ldr	r2, [r7, #4]
 80146a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80146a6:	e006      	b.n	80146b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	3301      	adds	r3, #1
 80146ac:	60fb      	str	r3, [r7, #12]
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	2b07      	cmp	r3, #7
 80146b2:	d9e7      	bls.n	8014684 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80146b4:	bf00      	nop
 80146b6:	bf00      	nop
 80146b8:	3714      	adds	r7, #20
 80146ba:	46bd      	mov	sp, r7
 80146bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c0:	4770      	bx	lr
 80146c2:	bf00      	nop
 80146c4:	20002bc8 	.word	0x20002bc8

080146c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b086      	sub	sp, #24
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	60f8      	str	r0, [r7, #12]
 80146d0:	60b9      	str	r1, [r7, #8]
 80146d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80146d8:	f001 fca4 	bl	8016024 <vPortEnterCritical>
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80146e2:	b25b      	sxtb	r3, r3
 80146e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146e8:	d103      	bne.n	80146f2 <vQueueWaitForMessageRestricted+0x2a>
 80146ea:	697b      	ldr	r3, [r7, #20]
 80146ec:	2200      	movs	r2, #0
 80146ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80146f2:	697b      	ldr	r3, [r7, #20]
 80146f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80146f8:	b25b      	sxtb	r3, r3
 80146fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146fe:	d103      	bne.n	8014708 <vQueueWaitForMessageRestricted+0x40>
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	2200      	movs	r2, #0
 8014704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014708:	f001 fcbc 	bl	8016084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014710:	2b00      	cmp	r3, #0
 8014712:	d106      	bne.n	8014722 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	3324      	adds	r3, #36	; 0x24
 8014718:	687a      	ldr	r2, [r7, #4]
 801471a:	68b9      	ldr	r1, [r7, #8]
 801471c:	4618      	mov	r0, r3
 801471e:	f000 fc3b 	bl	8014f98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014722:	6978      	ldr	r0, [r7, #20]
 8014724:	f7ff ff26 	bl	8014574 <prvUnlockQueue>
	}
 8014728:	bf00      	nop
 801472a:	3718      	adds	r7, #24
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}

08014730 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014730:	b580      	push	{r7, lr}
 8014732:	b08e      	sub	sp, #56	; 0x38
 8014734:	af04      	add	r7, sp, #16
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	607a      	str	r2, [r7, #4]
 801473c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014740:	2b00      	cmp	r3, #0
 8014742:	d10a      	bne.n	801475a <xTaskCreateStatic+0x2a>
	__asm volatile
 8014744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014748:	f383 8811 	msr	BASEPRI, r3
 801474c:	f3bf 8f6f 	isb	sy
 8014750:	f3bf 8f4f 	dsb	sy
 8014754:	623b      	str	r3, [r7, #32]
}
 8014756:	bf00      	nop
 8014758:	e7fe      	b.n	8014758 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475c:	2b00      	cmp	r3, #0
 801475e:	d10a      	bne.n	8014776 <xTaskCreateStatic+0x46>
	__asm volatile
 8014760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014764:	f383 8811 	msr	BASEPRI, r3
 8014768:	f3bf 8f6f 	isb	sy
 801476c:	f3bf 8f4f 	dsb	sy
 8014770:	61fb      	str	r3, [r7, #28]
}
 8014772:	bf00      	nop
 8014774:	e7fe      	b.n	8014774 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014776:	235c      	movs	r3, #92	; 0x5c
 8014778:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	2b5c      	cmp	r3, #92	; 0x5c
 801477e:	d00a      	beq.n	8014796 <xTaskCreateStatic+0x66>
	__asm volatile
 8014780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014784:	f383 8811 	msr	BASEPRI, r3
 8014788:	f3bf 8f6f 	isb	sy
 801478c:	f3bf 8f4f 	dsb	sy
 8014790:	61bb      	str	r3, [r7, #24]
}
 8014792:	bf00      	nop
 8014794:	e7fe      	b.n	8014794 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014796:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801479a:	2b00      	cmp	r3, #0
 801479c:	d01e      	beq.n	80147dc <xTaskCreateStatic+0xac>
 801479e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d01b      	beq.n	80147dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80147a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80147a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80147ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80147ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b0:	2202      	movs	r2, #2
 80147b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80147b6:	2300      	movs	r3, #0
 80147b8:	9303      	str	r3, [sp, #12]
 80147ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147bc:	9302      	str	r3, [sp, #8]
 80147be:	f107 0314 	add.w	r3, r7, #20
 80147c2:	9301      	str	r3, [sp, #4]
 80147c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c6:	9300      	str	r3, [sp, #0]
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	687a      	ldr	r2, [r7, #4]
 80147cc:	68b9      	ldr	r1, [r7, #8]
 80147ce:	68f8      	ldr	r0, [r7, #12]
 80147d0:	f000 f850 	bl	8014874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80147d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147d6:	f000 f8dd 	bl	8014994 <prvAddNewTaskToReadyList>
 80147da:	e001      	b.n	80147e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80147dc:	2300      	movs	r3, #0
 80147de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80147e0:	697b      	ldr	r3, [r7, #20]
	}
 80147e2:	4618      	mov	r0, r3
 80147e4:	3728      	adds	r7, #40	; 0x28
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}

080147ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80147ea:	b580      	push	{r7, lr}
 80147ec:	b08c      	sub	sp, #48	; 0x30
 80147ee:	af04      	add	r7, sp, #16
 80147f0:	60f8      	str	r0, [r7, #12]
 80147f2:	60b9      	str	r1, [r7, #8]
 80147f4:	603b      	str	r3, [r7, #0]
 80147f6:	4613      	mov	r3, r2
 80147f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80147fa:	88fb      	ldrh	r3, [r7, #6]
 80147fc:	009b      	lsls	r3, r3, #2
 80147fe:	4618      	mov	r0, r3
 8014800:	f001 fd32 	bl	8016268 <pvPortMalloc>
 8014804:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d00e      	beq.n	801482a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801480c:	205c      	movs	r0, #92	; 0x5c
 801480e:	f001 fd2b 	bl	8016268 <pvPortMalloc>
 8014812:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014814:	69fb      	ldr	r3, [r7, #28]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d003      	beq.n	8014822 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801481a:	69fb      	ldr	r3, [r7, #28]
 801481c:	697a      	ldr	r2, [r7, #20]
 801481e:	631a      	str	r2, [r3, #48]	; 0x30
 8014820:	e005      	b.n	801482e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014822:	6978      	ldr	r0, [r7, #20]
 8014824:	f001 fde4 	bl	80163f0 <vPortFree>
 8014828:	e001      	b.n	801482e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801482a:	2300      	movs	r3, #0
 801482c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801482e:	69fb      	ldr	r3, [r7, #28]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d017      	beq.n	8014864 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014834:	69fb      	ldr	r3, [r7, #28]
 8014836:	2200      	movs	r2, #0
 8014838:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801483c:	88fa      	ldrh	r2, [r7, #6]
 801483e:	2300      	movs	r3, #0
 8014840:	9303      	str	r3, [sp, #12]
 8014842:	69fb      	ldr	r3, [r7, #28]
 8014844:	9302      	str	r3, [sp, #8]
 8014846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014848:	9301      	str	r3, [sp, #4]
 801484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484c:	9300      	str	r3, [sp, #0]
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	68b9      	ldr	r1, [r7, #8]
 8014852:	68f8      	ldr	r0, [r7, #12]
 8014854:	f000 f80e 	bl	8014874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014858:	69f8      	ldr	r0, [r7, #28]
 801485a:	f000 f89b 	bl	8014994 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801485e:	2301      	movs	r3, #1
 8014860:	61bb      	str	r3, [r7, #24]
 8014862:	e002      	b.n	801486a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014864:	f04f 33ff 	mov.w	r3, #4294967295
 8014868:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801486a:	69bb      	ldr	r3, [r7, #24]
	}
 801486c:	4618      	mov	r0, r3
 801486e:	3720      	adds	r7, #32
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}

08014874 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b088      	sub	sp, #32
 8014878:	af00      	add	r7, sp, #0
 801487a:	60f8      	str	r0, [r7, #12]
 801487c:	60b9      	str	r1, [r7, #8]
 801487e:	607a      	str	r2, [r7, #4]
 8014880:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014884:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	009b      	lsls	r3, r3, #2
 801488a:	461a      	mov	r2, r3
 801488c:	21a5      	movs	r1, #165	; 0xa5
 801488e:	f002 fb25 	bl	8016edc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801489c:	3b01      	subs	r3, #1
 801489e:	009b      	lsls	r3, r3, #2
 80148a0:	4413      	add	r3, r2
 80148a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80148a4:	69bb      	ldr	r3, [r7, #24]
 80148a6:	f023 0307 	bic.w	r3, r3, #7
 80148aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80148ac:	69bb      	ldr	r3, [r7, #24]
 80148ae:	f003 0307 	and.w	r3, r3, #7
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d00a      	beq.n	80148cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80148b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ba:	f383 8811 	msr	BASEPRI, r3
 80148be:	f3bf 8f6f 	isb	sy
 80148c2:	f3bf 8f4f 	dsb	sy
 80148c6:	617b      	str	r3, [r7, #20]
}
 80148c8:	bf00      	nop
 80148ca:	e7fe      	b.n	80148ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d01f      	beq.n	8014912 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80148d2:	2300      	movs	r3, #0
 80148d4:	61fb      	str	r3, [r7, #28]
 80148d6:	e012      	b.n	80148fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80148d8:	68ba      	ldr	r2, [r7, #8]
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	4413      	add	r3, r2
 80148de:	7819      	ldrb	r1, [r3, #0]
 80148e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148e2:	69fb      	ldr	r3, [r7, #28]
 80148e4:	4413      	add	r3, r2
 80148e6:	3334      	adds	r3, #52	; 0x34
 80148e8:	460a      	mov	r2, r1
 80148ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80148ec:	68ba      	ldr	r2, [r7, #8]
 80148ee:	69fb      	ldr	r3, [r7, #28]
 80148f0:	4413      	add	r3, r2
 80148f2:	781b      	ldrb	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d006      	beq.n	8014906 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80148f8:	69fb      	ldr	r3, [r7, #28]
 80148fa:	3301      	adds	r3, #1
 80148fc:	61fb      	str	r3, [r7, #28]
 80148fe:	69fb      	ldr	r3, [r7, #28]
 8014900:	2b0f      	cmp	r3, #15
 8014902:	d9e9      	bls.n	80148d8 <prvInitialiseNewTask+0x64>
 8014904:	e000      	b.n	8014908 <prvInitialiseNewTask+0x94>
			{
				break;
 8014906:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490a:	2200      	movs	r2, #0
 801490c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014910:	e003      	b.n	801491a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014914:	2200      	movs	r2, #0
 8014916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801491c:	2b37      	cmp	r3, #55	; 0x37
 801491e:	d901      	bls.n	8014924 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014920:	2337      	movs	r3, #55	; 0x37
 8014922:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014928:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801492c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801492e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014932:	2200      	movs	r2, #0
 8014934:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014938:	3304      	adds	r3, #4
 801493a:	4618      	mov	r0, r3
 801493c:	f7fe fecc 	bl	80136d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014942:	3318      	adds	r3, #24
 8014944:	4618      	mov	r0, r3
 8014946:	f7fe fec7 	bl	80136d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801494c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801494e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014952:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014958:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801495c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801495e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014962:	2200      	movs	r2, #0
 8014964:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014968:	2200      	movs	r2, #0
 801496a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801496e:	683a      	ldr	r2, [r7, #0]
 8014970:	68f9      	ldr	r1, [r7, #12]
 8014972:	69b8      	ldr	r0, [r7, #24]
 8014974:	f001 fa26 	bl	8015dc4 <pxPortInitialiseStack>
 8014978:	4602      	mov	r2, r0
 801497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801497c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014980:	2b00      	cmp	r3, #0
 8014982:	d002      	beq.n	801498a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014988:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801498a:	bf00      	nop
 801498c:	3720      	adds	r7, #32
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
	...

08014994 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b082      	sub	sp, #8
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801499c:	f001 fb42 	bl	8016024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80149a0:	4b2d      	ldr	r3, [pc, #180]	; (8014a58 <prvAddNewTaskToReadyList+0xc4>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	3301      	adds	r3, #1
 80149a6:	4a2c      	ldr	r2, [pc, #176]	; (8014a58 <prvAddNewTaskToReadyList+0xc4>)
 80149a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80149aa:	4b2c      	ldr	r3, [pc, #176]	; (8014a5c <prvAddNewTaskToReadyList+0xc8>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d109      	bne.n	80149c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80149b2:	4a2a      	ldr	r2, [pc, #168]	; (8014a5c <prvAddNewTaskToReadyList+0xc8>)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80149b8:	4b27      	ldr	r3, [pc, #156]	; (8014a58 <prvAddNewTaskToReadyList+0xc4>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	2b01      	cmp	r3, #1
 80149be:	d110      	bne.n	80149e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80149c0:	f000 fc16 	bl	80151f0 <prvInitialiseTaskLists>
 80149c4:	e00d      	b.n	80149e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80149c6:	4b26      	ldr	r3, [pc, #152]	; (8014a60 <prvAddNewTaskToReadyList+0xcc>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d109      	bne.n	80149e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80149ce:	4b23      	ldr	r3, [pc, #140]	; (8014a5c <prvAddNewTaskToReadyList+0xc8>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149d8:	429a      	cmp	r2, r3
 80149da:	d802      	bhi.n	80149e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80149dc:	4a1f      	ldr	r2, [pc, #124]	; (8014a5c <prvAddNewTaskToReadyList+0xc8>)
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80149e2:	4b20      	ldr	r3, [pc, #128]	; (8014a64 <prvAddNewTaskToReadyList+0xd0>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	3301      	adds	r3, #1
 80149e8:	4a1e      	ldr	r2, [pc, #120]	; (8014a64 <prvAddNewTaskToReadyList+0xd0>)
 80149ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80149ec:	4b1d      	ldr	r3, [pc, #116]	; (8014a64 <prvAddNewTaskToReadyList+0xd0>)
 80149ee:	681a      	ldr	r2, [r3, #0]
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149f8:	4b1b      	ldr	r3, [pc, #108]	; (8014a68 <prvAddNewTaskToReadyList+0xd4>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d903      	bls.n	8014a08 <prvAddNewTaskToReadyList+0x74>
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a04:	4a18      	ldr	r2, [pc, #96]	; (8014a68 <prvAddNewTaskToReadyList+0xd4>)
 8014a06:	6013      	str	r3, [r2, #0]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a0c:	4613      	mov	r3, r2
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	4413      	add	r3, r2
 8014a12:	009b      	lsls	r3, r3, #2
 8014a14:	4a15      	ldr	r2, [pc, #84]	; (8014a6c <prvAddNewTaskToReadyList+0xd8>)
 8014a16:	441a      	add	r2, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	3304      	adds	r3, #4
 8014a1c:	4619      	mov	r1, r3
 8014a1e:	4610      	mov	r0, r2
 8014a20:	f7fe fe67 	bl	80136f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014a24:	f001 fb2e 	bl	8016084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014a28:	4b0d      	ldr	r3, [pc, #52]	; (8014a60 <prvAddNewTaskToReadyList+0xcc>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d00e      	beq.n	8014a4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014a30:	4b0a      	ldr	r3, [pc, #40]	; (8014a5c <prvAddNewTaskToReadyList+0xc8>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d207      	bcs.n	8014a4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014a3e:	4b0c      	ldr	r3, [pc, #48]	; (8014a70 <prvAddNewTaskToReadyList+0xdc>)
 8014a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a44:	601a      	str	r2, [r3, #0]
 8014a46:	f3bf 8f4f 	dsb	sy
 8014a4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014a4e:	bf00      	nop
 8014a50:	3708      	adds	r7, #8
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop
 8014a58:	200030dc 	.word	0x200030dc
 8014a5c:	20002c08 	.word	0x20002c08
 8014a60:	200030e8 	.word	0x200030e8
 8014a64:	200030f8 	.word	0x200030f8
 8014a68:	200030e4 	.word	0x200030e4
 8014a6c:	20002c0c 	.word	0x20002c0c
 8014a70:	e000ed04 	.word	0xe000ed04

08014a74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b084      	sub	sp, #16
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d017      	beq.n	8014ab6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014a86:	4b13      	ldr	r3, [pc, #76]	; (8014ad4 <vTaskDelay+0x60>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d00a      	beq.n	8014aa4 <vTaskDelay+0x30>
	__asm volatile
 8014a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a92:	f383 8811 	msr	BASEPRI, r3
 8014a96:	f3bf 8f6f 	isb	sy
 8014a9a:	f3bf 8f4f 	dsb	sy
 8014a9e:	60bb      	str	r3, [r7, #8]
}
 8014aa0:	bf00      	nop
 8014aa2:	e7fe      	b.n	8014aa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014aa4:	f000 f880 	bl	8014ba8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014aa8:	2100      	movs	r1, #0
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	f000 fde8 	bl	8015680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014ab0:	f000 f888 	bl	8014bc4 <xTaskResumeAll>
 8014ab4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d107      	bne.n	8014acc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014abc:	4b06      	ldr	r3, [pc, #24]	; (8014ad8 <vTaskDelay+0x64>)
 8014abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ac2:	601a      	str	r2, [r3, #0]
 8014ac4:	f3bf 8f4f 	dsb	sy
 8014ac8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014acc:	bf00      	nop
 8014ace:	3710      	adds	r7, #16
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bd80      	pop	{r7, pc}
 8014ad4:	20003104 	.word	0x20003104
 8014ad8:	e000ed04 	.word	0xe000ed04

08014adc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b08a      	sub	sp, #40	; 0x28
 8014ae0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014aea:	463a      	mov	r2, r7
 8014aec:	1d39      	adds	r1, r7, #4
 8014aee:	f107 0308 	add.w	r3, r7, #8
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7fe fd9c 	bl	8013630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014af8:	6839      	ldr	r1, [r7, #0]
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	68ba      	ldr	r2, [r7, #8]
 8014afe:	9202      	str	r2, [sp, #8]
 8014b00:	9301      	str	r3, [sp, #4]
 8014b02:	2300      	movs	r3, #0
 8014b04:	9300      	str	r3, [sp, #0]
 8014b06:	2300      	movs	r3, #0
 8014b08:	460a      	mov	r2, r1
 8014b0a:	4921      	ldr	r1, [pc, #132]	; (8014b90 <vTaskStartScheduler+0xb4>)
 8014b0c:	4821      	ldr	r0, [pc, #132]	; (8014b94 <vTaskStartScheduler+0xb8>)
 8014b0e:	f7ff fe0f 	bl	8014730 <xTaskCreateStatic>
 8014b12:	4603      	mov	r3, r0
 8014b14:	4a20      	ldr	r2, [pc, #128]	; (8014b98 <vTaskStartScheduler+0xbc>)
 8014b16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014b18:	4b1f      	ldr	r3, [pc, #124]	; (8014b98 <vTaskStartScheduler+0xbc>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d002      	beq.n	8014b26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014b20:	2301      	movs	r3, #1
 8014b22:	617b      	str	r3, [r7, #20]
 8014b24:	e001      	b.n	8014b2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014b26:	2300      	movs	r3, #0
 8014b28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	2b01      	cmp	r3, #1
 8014b2e:	d102      	bne.n	8014b36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014b30:	f000 fdfa 	bl	8015728 <xTimerCreateTimerTask>
 8014b34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d116      	bne.n	8014b6a <vTaskStartScheduler+0x8e>
	__asm volatile
 8014b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b40:	f383 8811 	msr	BASEPRI, r3
 8014b44:	f3bf 8f6f 	isb	sy
 8014b48:	f3bf 8f4f 	dsb	sy
 8014b4c:	613b      	str	r3, [r7, #16]
}
 8014b4e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014b50:	4b12      	ldr	r3, [pc, #72]	; (8014b9c <vTaskStartScheduler+0xc0>)
 8014b52:	f04f 32ff 	mov.w	r2, #4294967295
 8014b56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014b58:	4b11      	ldr	r3, [pc, #68]	; (8014ba0 <vTaskStartScheduler+0xc4>)
 8014b5a:	2201      	movs	r2, #1
 8014b5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014b5e:	4b11      	ldr	r3, [pc, #68]	; (8014ba4 <vTaskStartScheduler+0xc8>)
 8014b60:	2200      	movs	r2, #0
 8014b62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014b64:	f001 f9bc 	bl	8015ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014b68:	e00e      	b.n	8014b88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b70:	d10a      	bne.n	8014b88 <vTaskStartScheduler+0xac>
	__asm volatile
 8014b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b76:	f383 8811 	msr	BASEPRI, r3
 8014b7a:	f3bf 8f6f 	isb	sy
 8014b7e:	f3bf 8f4f 	dsb	sy
 8014b82:	60fb      	str	r3, [r7, #12]
}
 8014b84:	bf00      	nop
 8014b86:	e7fe      	b.n	8014b86 <vTaskStartScheduler+0xaa>
}
 8014b88:	bf00      	nop
 8014b8a:	3718      	adds	r7, #24
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	080184a8 	.word	0x080184a8
 8014b94:	080151c1 	.word	0x080151c1
 8014b98:	20003100 	.word	0x20003100
 8014b9c:	200030fc 	.word	0x200030fc
 8014ba0:	200030e8 	.word	0x200030e8
 8014ba4:	200030e0 	.word	0x200030e0

08014ba8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014ba8:	b480      	push	{r7}
 8014baa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014bac:	4b04      	ldr	r3, [pc, #16]	; (8014bc0 <vTaskSuspendAll+0x18>)
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	3301      	adds	r3, #1
 8014bb2:	4a03      	ldr	r2, [pc, #12]	; (8014bc0 <vTaskSuspendAll+0x18>)
 8014bb4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014bb6:	bf00      	nop
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbe:	4770      	bx	lr
 8014bc0:	20003104 	.word	0x20003104

08014bc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b084      	sub	sp, #16
 8014bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014bce:	2300      	movs	r3, #0
 8014bd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014bd2:	4b42      	ldr	r3, [pc, #264]	; (8014cdc <xTaskResumeAll+0x118>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d10a      	bne.n	8014bf0 <xTaskResumeAll+0x2c>
	__asm volatile
 8014bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bde:	f383 8811 	msr	BASEPRI, r3
 8014be2:	f3bf 8f6f 	isb	sy
 8014be6:	f3bf 8f4f 	dsb	sy
 8014bea:	603b      	str	r3, [r7, #0]
}
 8014bec:	bf00      	nop
 8014bee:	e7fe      	b.n	8014bee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014bf0:	f001 fa18 	bl	8016024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014bf4:	4b39      	ldr	r3, [pc, #228]	; (8014cdc <xTaskResumeAll+0x118>)
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	3b01      	subs	r3, #1
 8014bfa:	4a38      	ldr	r2, [pc, #224]	; (8014cdc <xTaskResumeAll+0x118>)
 8014bfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014bfe:	4b37      	ldr	r3, [pc, #220]	; (8014cdc <xTaskResumeAll+0x118>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d162      	bne.n	8014ccc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014c06:	4b36      	ldr	r3, [pc, #216]	; (8014ce0 <xTaskResumeAll+0x11c>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d05e      	beq.n	8014ccc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c0e:	e02f      	b.n	8014c70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c10:	4b34      	ldr	r3, [pc, #208]	; (8014ce4 <xTaskResumeAll+0x120>)
 8014c12:	68db      	ldr	r3, [r3, #12]
 8014c14:	68db      	ldr	r3, [r3, #12]
 8014c16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	3318      	adds	r3, #24
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7fe fdc5 	bl	80137ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	3304      	adds	r3, #4
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7fe fdc0 	bl	80137ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c30:	4b2d      	ldr	r3, [pc, #180]	; (8014ce8 <xTaskResumeAll+0x124>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d903      	bls.n	8014c40 <xTaskResumeAll+0x7c>
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c3c:	4a2a      	ldr	r2, [pc, #168]	; (8014ce8 <xTaskResumeAll+0x124>)
 8014c3e:	6013      	str	r3, [r2, #0]
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c44:	4613      	mov	r3, r2
 8014c46:	009b      	lsls	r3, r3, #2
 8014c48:	4413      	add	r3, r2
 8014c4a:	009b      	lsls	r3, r3, #2
 8014c4c:	4a27      	ldr	r2, [pc, #156]	; (8014cec <xTaskResumeAll+0x128>)
 8014c4e:	441a      	add	r2, r3
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	3304      	adds	r3, #4
 8014c54:	4619      	mov	r1, r3
 8014c56:	4610      	mov	r0, r2
 8014c58:	f7fe fd4b 	bl	80136f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c60:	4b23      	ldr	r3, [pc, #140]	; (8014cf0 <xTaskResumeAll+0x12c>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d302      	bcc.n	8014c70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014c6a:	4b22      	ldr	r3, [pc, #136]	; (8014cf4 <xTaskResumeAll+0x130>)
 8014c6c:	2201      	movs	r2, #1
 8014c6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c70:	4b1c      	ldr	r3, [pc, #112]	; (8014ce4 <xTaskResumeAll+0x120>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d1cb      	bne.n	8014c10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d001      	beq.n	8014c82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014c7e:	f000 fb55 	bl	801532c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014c82:	4b1d      	ldr	r3, [pc, #116]	; (8014cf8 <xTaskResumeAll+0x134>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d010      	beq.n	8014cb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014c8e:	f000 f847 	bl	8014d20 <xTaskIncrementTick>
 8014c92:	4603      	mov	r3, r0
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d002      	beq.n	8014c9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014c98:	4b16      	ldr	r3, [pc, #88]	; (8014cf4 <xTaskResumeAll+0x130>)
 8014c9a:	2201      	movs	r2, #1
 8014c9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	3b01      	subs	r3, #1
 8014ca2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d1f1      	bne.n	8014c8e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8014caa:	4b13      	ldr	r3, [pc, #76]	; (8014cf8 <xTaskResumeAll+0x134>)
 8014cac:	2200      	movs	r2, #0
 8014cae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014cb0:	4b10      	ldr	r3, [pc, #64]	; (8014cf4 <xTaskResumeAll+0x130>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d009      	beq.n	8014ccc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014cb8:	2301      	movs	r3, #1
 8014cba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014cbc:	4b0f      	ldr	r3, [pc, #60]	; (8014cfc <xTaskResumeAll+0x138>)
 8014cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cc2:	601a      	str	r2, [r3, #0]
 8014cc4:	f3bf 8f4f 	dsb	sy
 8014cc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014ccc:	f001 f9da 	bl	8016084 <vPortExitCritical>

	return xAlreadyYielded;
 8014cd0:	68bb      	ldr	r3, [r7, #8]
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	3710      	adds	r7, #16
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	20003104 	.word	0x20003104
 8014ce0:	200030dc 	.word	0x200030dc
 8014ce4:	2000309c 	.word	0x2000309c
 8014ce8:	200030e4 	.word	0x200030e4
 8014cec:	20002c0c 	.word	0x20002c0c
 8014cf0:	20002c08 	.word	0x20002c08
 8014cf4:	200030f0 	.word	0x200030f0
 8014cf8:	200030ec 	.word	0x200030ec
 8014cfc:	e000ed04 	.word	0xe000ed04

08014d00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014d00:	b480      	push	{r7}
 8014d02:	b083      	sub	sp, #12
 8014d04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014d06:	4b05      	ldr	r3, [pc, #20]	; (8014d1c <xTaskGetTickCount+0x1c>)
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014d0c:	687b      	ldr	r3, [r7, #4]
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	370c      	adds	r7, #12
 8014d12:	46bd      	mov	sp, r7
 8014d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d18:	4770      	bx	lr
 8014d1a:	bf00      	nop
 8014d1c:	200030e0 	.word	0x200030e0

08014d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b086      	sub	sp, #24
 8014d24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014d26:	2300      	movs	r3, #0
 8014d28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d2a:	4b4f      	ldr	r3, [pc, #316]	; (8014e68 <xTaskIncrementTick+0x148>)
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	f040 8089 	bne.w	8014e46 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014d34:	4b4d      	ldr	r3, [pc, #308]	; (8014e6c <xTaskIncrementTick+0x14c>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	3301      	adds	r3, #1
 8014d3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014d3c:	4a4b      	ldr	r2, [pc, #300]	; (8014e6c <xTaskIncrementTick+0x14c>)
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014d42:	693b      	ldr	r3, [r7, #16]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d120      	bne.n	8014d8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014d48:	4b49      	ldr	r3, [pc, #292]	; (8014e70 <xTaskIncrementTick+0x150>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d00a      	beq.n	8014d68 <xTaskIncrementTick+0x48>
	__asm volatile
 8014d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d56:	f383 8811 	msr	BASEPRI, r3
 8014d5a:	f3bf 8f6f 	isb	sy
 8014d5e:	f3bf 8f4f 	dsb	sy
 8014d62:	603b      	str	r3, [r7, #0]
}
 8014d64:	bf00      	nop
 8014d66:	e7fe      	b.n	8014d66 <xTaskIncrementTick+0x46>
 8014d68:	4b41      	ldr	r3, [pc, #260]	; (8014e70 <xTaskIncrementTick+0x150>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	60fb      	str	r3, [r7, #12]
 8014d6e:	4b41      	ldr	r3, [pc, #260]	; (8014e74 <xTaskIncrementTick+0x154>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	4a3f      	ldr	r2, [pc, #252]	; (8014e70 <xTaskIncrementTick+0x150>)
 8014d74:	6013      	str	r3, [r2, #0]
 8014d76:	4a3f      	ldr	r2, [pc, #252]	; (8014e74 <xTaskIncrementTick+0x154>)
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	6013      	str	r3, [r2, #0]
 8014d7c:	4b3e      	ldr	r3, [pc, #248]	; (8014e78 <xTaskIncrementTick+0x158>)
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	3301      	adds	r3, #1
 8014d82:	4a3d      	ldr	r2, [pc, #244]	; (8014e78 <xTaskIncrementTick+0x158>)
 8014d84:	6013      	str	r3, [r2, #0]
 8014d86:	f000 fad1 	bl	801532c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014d8a:	4b3c      	ldr	r3, [pc, #240]	; (8014e7c <xTaskIncrementTick+0x15c>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	693a      	ldr	r2, [r7, #16]
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d349      	bcc.n	8014e28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014d94:	4b36      	ldr	r3, [pc, #216]	; (8014e70 <xTaskIncrementTick+0x150>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d104      	bne.n	8014da8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d9e:	4b37      	ldr	r3, [pc, #220]	; (8014e7c <xTaskIncrementTick+0x15c>)
 8014da0:	f04f 32ff 	mov.w	r2, #4294967295
 8014da4:	601a      	str	r2, [r3, #0]
					break;
 8014da6:	e03f      	b.n	8014e28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014da8:	4b31      	ldr	r3, [pc, #196]	; (8014e70 <xTaskIncrementTick+0x150>)
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	68db      	ldr	r3, [r3, #12]
 8014dae:	68db      	ldr	r3, [r3, #12]
 8014db0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	685b      	ldr	r3, [r3, #4]
 8014db6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014db8:	693a      	ldr	r2, [r7, #16]
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d203      	bcs.n	8014dc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014dc0:	4a2e      	ldr	r2, [pc, #184]	; (8014e7c <xTaskIncrementTick+0x15c>)
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014dc6:	e02f      	b.n	8014e28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	3304      	adds	r3, #4
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f7fe fced 	bl	80137ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d004      	beq.n	8014de4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	3318      	adds	r3, #24
 8014dde:	4618      	mov	r0, r3
 8014de0:	f7fe fce4 	bl	80137ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014de4:	68bb      	ldr	r3, [r7, #8]
 8014de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014de8:	4b25      	ldr	r3, [pc, #148]	; (8014e80 <xTaskIncrementTick+0x160>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d903      	bls.n	8014df8 <xTaskIncrementTick+0xd8>
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014df4:	4a22      	ldr	r2, [pc, #136]	; (8014e80 <xTaskIncrementTick+0x160>)
 8014df6:	6013      	str	r3, [r2, #0]
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dfc:	4613      	mov	r3, r2
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	4413      	add	r3, r2
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	4a1f      	ldr	r2, [pc, #124]	; (8014e84 <xTaskIncrementTick+0x164>)
 8014e06:	441a      	add	r2, r3
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	3304      	adds	r3, #4
 8014e0c:	4619      	mov	r1, r3
 8014e0e:	4610      	mov	r0, r2
 8014e10:	f7fe fc6f 	bl	80136f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e18:	4b1b      	ldr	r3, [pc, #108]	; (8014e88 <xTaskIncrementTick+0x168>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d3b8      	bcc.n	8014d94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014e22:	2301      	movs	r3, #1
 8014e24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e26:	e7b5      	b.n	8014d94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014e28:	4b17      	ldr	r3, [pc, #92]	; (8014e88 <xTaskIncrementTick+0x168>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e2e:	4915      	ldr	r1, [pc, #84]	; (8014e84 <xTaskIncrementTick+0x164>)
 8014e30:	4613      	mov	r3, r2
 8014e32:	009b      	lsls	r3, r3, #2
 8014e34:	4413      	add	r3, r2
 8014e36:	009b      	lsls	r3, r3, #2
 8014e38:	440b      	add	r3, r1
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2b01      	cmp	r3, #1
 8014e3e:	d907      	bls.n	8014e50 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8014e40:	2301      	movs	r3, #1
 8014e42:	617b      	str	r3, [r7, #20]
 8014e44:	e004      	b.n	8014e50 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014e46:	4b11      	ldr	r3, [pc, #68]	; (8014e8c <xTaskIncrementTick+0x16c>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	3301      	adds	r3, #1
 8014e4c:	4a0f      	ldr	r2, [pc, #60]	; (8014e8c <xTaskIncrementTick+0x16c>)
 8014e4e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014e50:	4b0f      	ldr	r3, [pc, #60]	; (8014e90 <xTaskIncrementTick+0x170>)
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d001      	beq.n	8014e5c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8014e58:	2301      	movs	r3, #1
 8014e5a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014e5c:	697b      	ldr	r3, [r7, #20]
}
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3718      	adds	r7, #24
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}
 8014e66:	bf00      	nop
 8014e68:	20003104 	.word	0x20003104
 8014e6c:	200030e0 	.word	0x200030e0
 8014e70:	20003094 	.word	0x20003094
 8014e74:	20003098 	.word	0x20003098
 8014e78:	200030f4 	.word	0x200030f4
 8014e7c:	200030fc 	.word	0x200030fc
 8014e80:	200030e4 	.word	0x200030e4
 8014e84:	20002c0c 	.word	0x20002c0c
 8014e88:	20002c08 	.word	0x20002c08
 8014e8c:	200030ec 	.word	0x200030ec
 8014e90:	200030f0 	.word	0x200030f0

08014e94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014e94:	b480      	push	{r7}
 8014e96:	b085      	sub	sp, #20
 8014e98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014e9a:	4b28      	ldr	r3, [pc, #160]	; (8014f3c <vTaskSwitchContext+0xa8>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d003      	beq.n	8014eaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014ea2:	4b27      	ldr	r3, [pc, #156]	; (8014f40 <vTaskSwitchContext+0xac>)
 8014ea4:	2201      	movs	r2, #1
 8014ea6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014ea8:	e041      	b.n	8014f2e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014eaa:	4b25      	ldr	r3, [pc, #148]	; (8014f40 <vTaskSwitchContext+0xac>)
 8014eac:	2200      	movs	r2, #0
 8014eae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014eb0:	4b24      	ldr	r3, [pc, #144]	; (8014f44 <vTaskSwitchContext+0xb0>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	60fb      	str	r3, [r7, #12]
 8014eb6:	e010      	b.n	8014eda <vTaskSwitchContext+0x46>
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d10a      	bne.n	8014ed4 <vTaskSwitchContext+0x40>
	__asm volatile
 8014ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec2:	f383 8811 	msr	BASEPRI, r3
 8014ec6:	f3bf 8f6f 	isb	sy
 8014eca:	f3bf 8f4f 	dsb	sy
 8014ece:	607b      	str	r3, [r7, #4]
}
 8014ed0:	bf00      	nop
 8014ed2:	e7fe      	b.n	8014ed2 <vTaskSwitchContext+0x3e>
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	3b01      	subs	r3, #1
 8014ed8:	60fb      	str	r3, [r7, #12]
 8014eda:	491b      	ldr	r1, [pc, #108]	; (8014f48 <vTaskSwitchContext+0xb4>)
 8014edc:	68fa      	ldr	r2, [r7, #12]
 8014ede:	4613      	mov	r3, r2
 8014ee0:	009b      	lsls	r3, r3, #2
 8014ee2:	4413      	add	r3, r2
 8014ee4:	009b      	lsls	r3, r3, #2
 8014ee6:	440b      	add	r3, r1
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d0e4      	beq.n	8014eb8 <vTaskSwitchContext+0x24>
 8014eee:	68fa      	ldr	r2, [r7, #12]
 8014ef0:	4613      	mov	r3, r2
 8014ef2:	009b      	lsls	r3, r3, #2
 8014ef4:	4413      	add	r3, r2
 8014ef6:	009b      	lsls	r3, r3, #2
 8014ef8:	4a13      	ldr	r2, [pc, #76]	; (8014f48 <vTaskSwitchContext+0xb4>)
 8014efa:	4413      	add	r3, r2
 8014efc:	60bb      	str	r3, [r7, #8]
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	685a      	ldr	r2, [r3, #4]
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	605a      	str	r2, [r3, #4]
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	685a      	ldr	r2, [r3, #4]
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	3308      	adds	r3, #8
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d104      	bne.n	8014f1e <vTaskSwitchContext+0x8a>
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	685b      	ldr	r3, [r3, #4]
 8014f18:	685a      	ldr	r2, [r3, #4]
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	605a      	str	r2, [r3, #4]
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	685b      	ldr	r3, [r3, #4]
 8014f22:	68db      	ldr	r3, [r3, #12]
 8014f24:	4a09      	ldr	r2, [pc, #36]	; (8014f4c <vTaskSwitchContext+0xb8>)
 8014f26:	6013      	str	r3, [r2, #0]
 8014f28:	4a06      	ldr	r2, [pc, #24]	; (8014f44 <vTaskSwitchContext+0xb0>)
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	6013      	str	r3, [r2, #0]
}
 8014f2e:	bf00      	nop
 8014f30:	3714      	adds	r7, #20
 8014f32:	46bd      	mov	sp, r7
 8014f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	20003104 	.word	0x20003104
 8014f40:	200030f0 	.word	0x200030f0
 8014f44:	200030e4 	.word	0x200030e4
 8014f48:	20002c0c 	.word	0x20002c0c
 8014f4c:	20002c08 	.word	0x20002c08

08014f50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b084      	sub	sp, #16
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d10a      	bne.n	8014f76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f64:	f383 8811 	msr	BASEPRI, r3
 8014f68:	f3bf 8f6f 	isb	sy
 8014f6c:	f3bf 8f4f 	dsb	sy
 8014f70:	60fb      	str	r3, [r7, #12]
}
 8014f72:	bf00      	nop
 8014f74:	e7fe      	b.n	8014f74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014f76:	4b07      	ldr	r3, [pc, #28]	; (8014f94 <vTaskPlaceOnEventList+0x44>)
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	3318      	adds	r3, #24
 8014f7c:	4619      	mov	r1, r3
 8014f7e:	6878      	ldr	r0, [r7, #4]
 8014f80:	f7fe fbdb 	bl	801373a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014f84:	2101      	movs	r1, #1
 8014f86:	6838      	ldr	r0, [r7, #0]
 8014f88:	f000 fb7a 	bl	8015680 <prvAddCurrentTaskToDelayedList>
}
 8014f8c:	bf00      	nop
 8014f8e:	3710      	adds	r7, #16
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}
 8014f94:	20002c08 	.word	0x20002c08

08014f98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b086      	sub	sp, #24
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	60b9      	str	r1, [r7, #8]
 8014fa2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d10a      	bne.n	8014fc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fae:	f383 8811 	msr	BASEPRI, r3
 8014fb2:	f3bf 8f6f 	isb	sy
 8014fb6:	f3bf 8f4f 	dsb	sy
 8014fba:	617b      	str	r3, [r7, #20]
}
 8014fbc:	bf00      	nop
 8014fbe:	e7fe      	b.n	8014fbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014fc0:	4b0a      	ldr	r3, [pc, #40]	; (8014fec <vTaskPlaceOnEventListRestricted+0x54>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	3318      	adds	r3, #24
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	68f8      	ldr	r0, [r7, #12]
 8014fca:	f7fe fb92 	bl	80136f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d002      	beq.n	8014fda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8014fd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014fda:	6879      	ldr	r1, [r7, #4]
 8014fdc:	68b8      	ldr	r0, [r7, #8]
 8014fde:	f000 fb4f 	bl	8015680 <prvAddCurrentTaskToDelayedList>
	}
 8014fe2:	bf00      	nop
 8014fe4:	3718      	adds	r7, #24
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}
 8014fea:	bf00      	nop
 8014fec:	20002c08 	.word	0x20002c08

08014ff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b086      	sub	sp, #24
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	68db      	ldr	r3, [r3, #12]
 8014ffc:	68db      	ldr	r3, [r3, #12]
 8014ffe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d10a      	bne.n	801501c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801500a:	f383 8811 	msr	BASEPRI, r3
 801500e:	f3bf 8f6f 	isb	sy
 8015012:	f3bf 8f4f 	dsb	sy
 8015016:	60fb      	str	r3, [r7, #12]
}
 8015018:	bf00      	nop
 801501a:	e7fe      	b.n	801501a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	3318      	adds	r3, #24
 8015020:	4618      	mov	r0, r3
 8015022:	f7fe fbc3 	bl	80137ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015026:	4b1e      	ldr	r3, [pc, #120]	; (80150a0 <xTaskRemoveFromEventList+0xb0>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d11d      	bne.n	801506a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	3304      	adds	r3, #4
 8015032:	4618      	mov	r0, r3
 8015034:	f7fe fbba 	bl	80137ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015038:	693b      	ldr	r3, [r7, #16]
 801503a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801503c:	4b19      	ldr	r3, [pc, #100]	; (80150a4 <xTaskRemoveFromEventList+0xb4>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	429a      	cmp	r2, r3
 8015042:	d903      	bls.n	801504c <xTaskRemoveFromEventList+0x5c>
 8015044:	693b      	ldr	r3, [r7, #16]
 8015046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015048:	4a16      	ldr	r2, [pc, #88]	; (80150a4 <xTaskRemoveFromEventList+0xb4>)
 801504a:	6013      	str	r3, [r2, #0]
 801504c:	693b      	ldr	r3, [r7, #16]
 801504e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015050:	4613      	mov	r3, r2
 8015052:	009b      	lsls	r3, r3, #2
 8015054:	4413      	add	r3, r2
 8015056:	009b      	lsls	r3, r3, #2
 8015058:	4a13      	ldr	r2, [pc, #76]	; (80150a8 <xTaskRemoveFromEventList+0xb8>)
 801505a:	441a      	add	r2, r3
 801505c:	693b      	ldr	r3, [r7, #16]
 801505e:	3304      	adds	r3, #4
 8015060:	4619      	mov	r1, r3
 8015062:	4610      	mov	r0, r2
 8015064:	f7fe fb45 	bl	80136f2 <vListInsertEnd>
 8015068:	e005      	b.n	8015076 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	3318      	adds	r3, #24
 801506e:	4619      	mov	r1, r3
 8015070:	480e      	ldr	r0, [pc, #56]	; (80150ac <xTaskRemoveFromEventList+0xbc>)
 8015072:	f7fe fb3e 	bl	80136f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801507a:	4b0d      	ldr	r3, [pc, #52]	; (80150b0 <xTaskRemoveFromEventList+0xc0>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015080:	429a      	cmp	r2, r3
 8015082:	d905      	bls.n	8015090 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015084:	2301      	movs	r3, #1
 8015086:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015088:	4b0a      	ldr	r3, [pc, #40]	; (80150b4 <xTaskRemoveFromEventList+0xc4>)
 801508a:	2201      	movs	r2, #1
 801508c:	601a      	str	r2, [r3, #0]
 801508e:	e001      	b.n	8015094 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015090:	2300      	movs	r3, #0
 8015092:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015094:	697b      	ldr	r3, [r7, #20]
}
 8015096:	4618      	mov	r0, r3
 8015098:	3718      	adds	r7, #24
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	20003104 	.word	0x20003104
 80150a4:	200030e4 	.word	0x200030e4
 80150a8:	20002c0c 	.word	0x20002c0c
 80150ac:	2000309c 	.word	0x2000309c
 80150b0:	20002c08 	.word	0x20002c08
 80150b4:	200030f0 	.word	0x200030f0

080150b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80150b8:	b480      	push	{r7}
 80150ba:	b083      	sub	sp, #12
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80150c0:	4b06      	ldr	r3, [pc, #24]	; (80150dc <vTaskInternalSetTimeOutState+0x24>)
 80150c2:	681a      	ldr	r2, [r3, #0]
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80150c8:	4b05      	ldr	r3, [pc, #20]	; (80150e0 <vTaskInternalSetTimeOutState+0x28>)
 80150ca:	681a      	ldr	r2, [r3, #0]
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	605a      	str	r2, [r3, #4]
}
 80150d0:	bf00      	nop
 80150d2:	370c      	adds	r7, #12
 80150d4:	46bd      	mov	sp, r7
 80150d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150da:	4770      	bx	lr
 80150dc:	200030f4 	.word	0x200030f4
 80150e0:	200030e0 	.word	0x200030e0

080150e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b088      	sub	sp, #32
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d10a      	bne.n	801510a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80150f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f8:	f383 8811 	msr	BASEPRI, r3
 80150fc:	f3bf 8f6f 	isb	sy
 8015100:	f3bf 8f4f 	dsb	sy
 8015104:	613b      	str	r3, [r7, #16]
}
 8015106:	bf00      	nop
 8015108:	e7fe      	b.n	8015108 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d10a      	bne.n	8015126 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015114:	f383 8811 	msr	BASEPRI, r3
 8015118:	f3bf 8f6f 	isb	sy
 801511c:	f3bf 8f4f 	dsb	sy
 8015120:	60fb      	str	r3, [r7, #12]
}
 8015122:	bf00      	nop
 8015124:	e7fe      	b.n	8015124 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015126:	f000 ff7d 	bl	8016024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801512a:	4b1d      	ldr	r3, [pc, #116]	; (80151a0 <xTaskCheckForTimeOut+0xbc>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	69ba      	ldr	r2, [r7, #24]
 8015136:	1ad3      	subs	r3, r2, r3
 8015138:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015142:	d102      	bne.n	801514a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015144:	2300      	movs	r3, #0
 8015146:	61fb      	str	r3, [r7, #28]
 8015148:	e023      	b.n	8015192 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	681a      	ldr	r2, [r3, #0]
 801514e:	4b15      	ldr	r3, [pc, #84]	; (80151a4 <xTaskCheckForTimeOut+0xc0>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	429a      	cmp	r2, r3
 8015154:	d007      	beq.n	8015166 <xTaskCheckForTimeOut+0x82>
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	685b      	ldr	r3, [r3, #4]
 801515a:	69ba      	ldr	r2, [r7, #24]
 801515c:	429a      	cmp	r2, r3
 801515e:	d302      	bcc.n	8015166 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015160:	2301      	movs	r3, #1
 8015162:	61fb      	str	r3, [r7, #28]
 8015164:	e015      	b.n	8015192 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015166:	683b      	ldr	r3, [r7, #0]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	697a      	ldr	r2, [r7, #20]
 801516c:	429a      	cmp	r2, r3
 801516e:	d20b      	bcs.n	8015188 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	1ad2      	subs	r2, r2, r3
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	f7ff ff9b 	bl	80150b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015182:	2300      	movs	r3, #0
 8015184:	61fb      	str	r3, [r7, #28]
 8015186:	e004      	b.n	8015192 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	2200      	movs	r2, #0
 801518c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801518e:	2301      	movs	r3, #1
 8015190:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015192:	f000 ff77 	bl	8016084 <vPortExitCritical>

	return xReturn;
 8015196:	69fb      	ldr	r3, [r7, #28]
}
 8015198:	4618      	mov	r0, r3
 801519a:	3720      	adds	r7, #32
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	200030e0 	.word	0x200030e0
 80151a4:	200030f4 	.word	0x200030f4

080151a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80151a8:	b480      	push	{r7}
 80151aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80151ac:	4b03      	ldr	r3, [pc, #12]	; (80151bc <vTaskMissedYield+0x14>)
 80151ae:	2201      	movs	r2, #1
 80151b0:	601a      	str	r2, [r3, #0]
}
 80151b2:	bf00      	nop
 80151b4:	46bd      	mov	sp, r7
 80151b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ba:	4770      	bx	lr
 80151bc:	200030f0 	.word	0x200030f0

080151c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b082      	sub	sp, #8
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80151c8:	f000 f852 	bl	8015270 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80151cc:	4b06      	ldr	r3, [pc, #24]	; (80151e8 <prvIdleTask+0x28>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	2b01      	cmp	r3, #1
 80151d2:	d9f9      	bls.n	80151c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80151d4:	4b05      	ldr	r3, [pc, #20]	; (80151ec <prvIdleTask+0x2c>)
 80151d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151da:	601a      	str	r2, [r3, #0]
 80151dc:	f3bf 8f4f 	dsb	sy
 80151e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80151e4:	e7f0      	b.n	80151c8 <prvIdleTask+0x8>
 80151e6:	bf00      	nop
 80151e8:	20002c0c 	.word	0x20002c0c
 80151ec:	e000ed04 	.word	0xe000ed04

080151f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b082      	sub	sp, #8
 80151f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80151f6:	2300      	movs	r3, #0
 80151f8:	607b      	str	r3, [r7, #4]
 80151fa:	e00c      	b.n	8015216 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80151fc:	687a      	ldr	r2, [r7, #4]
 80151fe:	4613      	mov	r3, r2
 8015200:	009b      	lsls	r3, r3, #2
 8015202:	4413      	add	r3, r2
 8015204:	009b      	lsls	r3, r3, #2
 8015206:	4a12      	ldr	r2, [pc, #72]	; (8015250 <prvInitialiseTaskLists+0x60>)
 8015208:	4413      	add	r3, r2
 801520a:	4618      	mov	r0, r3
 801520c:	f7fe fa44 	bl	8013698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	3301      	adds	r3, #1
 8015214:	607b      	str	r3, [r7, #4]
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2b37      	cmp	r3, #55	; 0x37
 801521a:	d9ef      	bls.n	80151fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801521c:	480d      	ldr	r0, [pc, #52]	; (8015254 <prvInitialiseTaskLists+0x64>)
 801521e:	f7fe fa3b 	bl	8013698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015222:	480d      	ldr	r0, [pc, #52]	; (8015258 <prvInitialiseTaskLists+0x68>)
 8015224:	f7fe fa38 	bl	8013698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015228:	480c      	ldr	r0, [pc, #48]	; (801525c <prvInitialiseTaskLists+0x6c>)
 801522a:	f7fe fa35 	bl	8013698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801522e:	480c      	ldr	r0, [pc, #48]	; (8015260 <prvInitialiseTaskLists+0x70>)
 8015230:	f7fe fa32 	bl	8013698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015234:	480b      	ldr	r0, [pc, #44]	; (8015264 <prvInitialiseTaskLists+0x74>)
 8015236:	f7fe fa2f 	bl	8013698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801523a:	4b0b      	ldr	r3, [pc, #44]	; (8015268 <prvInitialiseTaskLists+0x78>)
 801523c:	4a05      	ldr	r2, [pc, #20]	; (8015254 <prvInitialiseTaskLists+0x64>)
 801523e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015240:	4b0a      	ldr	r3, [pc, #40]	; (801526c <prvInitialiseTaskLists+0x7c>)
 8015242:	4a05      	ldr	r2, [pc, #20]	; (8015258 <prvInitialiseTaskLists+0x68>)
 8015244:	601a      	str	r2, [r3, #0]
}
 8015246:	bf00      	nop
 8015248:	3708      	adds	r7, #8
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	bf00      	nop
 8015250:	20002c0c 	.word	0x20002c0c
 8015254:	2000306c 	.word	0x2000306c
 8015258:	20003080 	.word	0x20003080
 801525c:	2000309c 	.word	0x2000309c
 8015260:	200030b0 	.word	0x200030b0
 8015264:	200030c8 	.word	0x200030c8
 8015268:	20003094 	.word	0x20003094
 801526c:	20003098 	.word	0x20003098

08015270 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015276:	e019      	b.n	80152ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015278:	f000 fed4 	bl	8016024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801527c:	4b10      	ldr	r3, [pc, #64]	; (80152c0 <prvCheckTasksWaitingTermination+0x50>)
 801527e:	68db      	ldr	r3, [r3, #12]
 8015280:	68db      	ldr	r3, [r3, #12]
 8015282:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	3304      	adds	r3, #4
 8015288:	4618      	mov	r0, r3
 801528a:	f7fe fa8f 	bl	80137ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 801528e:	4b0d      	ldr	r3, [pc, #52]	; (80152c4 <prvCheckTasksWaitingTermination+0x54>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	3b01      	subs	r3, #1
 8015294:	4a0b      	ldr	r2, [pc, #44]	; (80152c4 <prvCheckTasksWaitingTermination+0x54>)
 8015296:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015298:	4b0b      	ldr	r3, [pc, #44]	; (80152c8 <prvCheckTasksWaitingTermination+0x58>)
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	3b01      	subs	r3, #1
 801529e:	4a0a      	ldr	r2, [pc, #40]	; (80152c8 <prvCheckTasksWaitingTermination+0x58>)
 80152a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80152a2:	f000 feef 	bl	8016084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f000 f810 	bl	80152cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80152ac:	4b06      	ldr	r3, [pc, #24]	; (80152c8 <prvCheckTasksWaitingTermination+0x58>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d1e1      	bne.n	8015278 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80152b4:	bf00      	nop
 80152b6:	bf00      	nop
 80152b8:	3708      	adds	r7, #8
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}
 80152be:	bf00      	nop
 80152c0:	200030b0 	.word	0x200030b0
 80152c4:	200030dc 	.word	0x200030dc
 80152c8:	200030c4 	.word	0x200030c4

080152cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b084      	sub	sp, #16
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d108      	bne.n	80152f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152e2:	4618      	mov	r0, r3
 80152e4:	f001 f884 	bl	80163f0 <vPortFree>
				vPortFree( pxTCB );
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f001 f881 	bl	80163f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80152ee:	e018      	b.n	8015322 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80152f6:	2b01      	cmp	r3, #1
 80152f8:	d103      	bne.n	8015302 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f001 f878 	bl	80163f0 <vPortFree>
	}
 8015300:	e00f      	b.n	8015322 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015308:	2b02      	cmp	r3, #2
 801530a:	d00a      	beq.n	8015322 <prvDeleteTCB+0x56>
	__asm volatile
 801530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015310:	f383 8811 	msr	BASEPRI, r3
 8015314:	f3bf 8f6f 	isb	sy
 8015318:	f3bf 8f4f 	dsb	sy
 801531c:	60fb      	str	r3, [r7, #12]
}
 801531e:	bf00      	nop
 8015320:	e7fe      	b.n	8015320 <prvDeleteTCB+0x54>
	}
 8015322:	bf00      	nop
 8015324:	3710      	adds	r7, #16
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}
	...

0801532c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801532c:	b480      	push	{r7}
 801532e:	b083      	sub	sp, #12
 8015330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015332:	4b0c      	ldr	r3, [pc, #48]	; (8015364 <prvResetNextTaskUnblockTime+0x38>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d104      	bne.n	8015346 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801533c:	4b0a      	ldr	r3, [pc, #40]	; (8015368 <prvResetNextTaskUnblockTime+0x3c>)
 801533e:	f04f 32ff 	mov.w	r2, #4294967295
 8015342:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015344:	e008      	b.n	8015358 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015346:	4b07      	ldr	r3, [pc, #28]	; (8015364 <prvResetNextTaskUnblockTime+0x38>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	68db      	ldr	r3, [r3, #12]
 801534c:	68db      	ldr	r3, [r3, #12]
 801534e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	685b      	ldr	r3, [r3, #4]
 8015354:	4a04      	ldr	r2, [pc, #16]	; (8015368 <prvResetNextTaskUnblockTime+0x3c>)
 8015356:	6013      	str	r3, [r2, #0]
}
 8015358:	bf00      	nop
 801535a:	370c      	adds	r7, #12
 801535c:	46bd      	mov	sp, r7
 801535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015362:	4770      	bx	lr
 8015364:	20003094 	.word	0x20003094
 8015368:	200030fc 	.word	0x200030fc

0801536c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801536c:	b480      	push	{r7}
 801536e:	b083      	sub	sp, #12
 8015370:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015372:	4b0b      	ldr	r3, [pc, #44]	; (80153a0 <xTaskGetSchedulerState+0x34>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d102      	bne.n	8015380 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801537a:	2301      	movs	r3, #1
 801537c:	607b      	str	r3, [r7, #4]
 801537e:	e008      	b.n	8015392 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015380:	4b08      	ldr	r3, [pc, #32]	; (80153a4 <xTaskGetSchedulerState+0x38>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d102      	bne.n	801538e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015388:	2302      	movs	r3, #2
 801538a:	607b      	str	r3, [r7, #4]
 801538c:	e001      	b.n	8015392 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801538e:	2300      	movs	r3, #0
 8015390:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015392:	687b      	ldr	r3, [r7, #4]
	}
 8015394:	4618      	mov	r0, r3
 8015396:	370c      	adds	r7, #12
 8015398:	46bd      	mov	sp, r7
 801539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539e:	4770      	bx	lr
 80153a0:	200030e8 	.word	0x200030e8
 80153a4:	20003104 	.word	0x20003104

080153a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b084      	sub	sp, #16
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80153b4:	2300      	movs	r3, #0
 80153b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d051      	beq.n	8015462 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153c2:	4b2a      	ldr	r3, [pc, #168]	; (801546c <xTaskPriorityInherit+0xc4>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d241      	bcs.n	8015450 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	699b      	ldr	r3, [r3, #24]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	db06      	blt.n	80153e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80153d4:	4b25      	ldr	r3, [pc, #148]	; (801546c <xTaskPriorityInherit+0xc4>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	6959      	ldr	r1, [r3, #20]
 80153e6:	68bb      	ldr	r3, [r7, #8]
 80153e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153ea:	4613      	mov	r3, r2
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	4413      	add	r3, r2
 80153f0:	009b      	lsls	r3, r3, #2
 80153f2:	4a1f      	ldr	r2, [pc, #124]	; (8015470 <xTaskPriorityInherit+0xc8>)
 80153f4:	4413      	add	r3, r2
 80153f6:	4299      	cmp	r1, r3
 80153f8:	d122      	bne.n	8015440 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	3304      	adds	r3, #4
 80153fe:	4618      	mov	r0, r3
 8015400:	f7fe f9d4 	bl	80137ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015404:	4b19      	ldr	r3, [pc, #100]	; (801546c <xTaskPriorityInherit+0xc4>)
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801540a:	68bb      	ldr	r3, [r7, #8]
 801540c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801540e:	68bb      	ldr	r3, [r7, #8]
 8015410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015412:	4b18      	ldr	r3, [pc, #96]	; (8015474 <xTaskPriorityInherit+0xcc>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	429a      	cmp	r2, r3
 8015418:	d903      	bls.n	8015422 <xTaskPriorityInherit+0x7a>
 801541a:	68bb      	ldr	r3, [r7, #8]
 801541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801541e:	4a15      	ldr	r2, [pc, #84]	; (8015474 <xTaskPriorityInherit+0xcc>)
 8015420:	6013      	str	r3, [r2, #0]
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015426:	4613      	mov	r3, r2
 8015428:	009b      	lsls	r3, r3, #2
 801542a:	4413      	add	r3, r2
 801542c:	009b      	lsls	r3, r3, #2
 801542e:	4a10      	ldr	r2, [pc, #64]	; (8015470 <xTaskPriorityInherit+0xc8>)
 8015430:	441a      	add	r2, r3
 8015432:	68bb      	ldr	r3, [r7, #8]
 8015434:	3304      	adds	r3, #4
 8015436:	4619      	mov	r1, r3
 8015438:	4610      	mov	r0, r2
 801543a:	f7fe f95a 	bl	80136f2 <vListInsertEnd>
 801543e:	e004      	b.n	801544a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015440:	4b0a      	ldr	r3, [pc, #40]	; (801546c <xTaskPriorityInherit+0xc4>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015446:	68bb      	ldr	r3, [r7, #8]
 8015448:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801544a:	2301      	movs	r3, #1
 801544c:	60fb      	str	r3, [r7, #12]
 801544e:	e008      	b.n	8015462 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015454:	4b05      	ldr	r3, [pc, #20]	; (801546c <xTaskPriorityInherit+0xc4>)
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801545a:	429a      	cmp	r2, r3
 801545c:	d201      	bcs.n	8015462 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801545e:	2301      	movs	r3, #1
 8015460:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015462:	68fb      	ldr	r3, [r7, #12]
	}
 8015464:	4618      	mov	r0, r3
 8015466:	3710      	adds	r7, #16
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}
 801546c:	20002c08 	.word	0x20002c08
 8015470:	20002c0c 	.word	0x20002c0c
 8015474:	200030e4 	.word	0x200030e4

08015478 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015478:	b580      	push	{r7, lr}
 801547a:	b086      	sub	sp, #24
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015484:	2300      	movs	r3, #0
 8015486:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d056      	beq.n	801553c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801548e:	4b2e      	ldr	r3, [pc, #184]	; (8015548 <xTaskPriorityDisinherit+0xd0>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	693a      	ldr	r2, [r7, #16]
 8015494:	429a      	cmp	r2, r3
 8015496:	d00a      	beq.n	80154ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801549c:	f383 8811 	msr	BASEPRI, r3
 80154a0:	f3bf 8f6f 	isb	sy
 80154a4:	f3bf 8f4f 	dsb	sy
 80154a8:	60fb      	str	r3, [r7, #12]
}
 80154aa:	bf00      	nop
 80154ac:	e7fe      	b.n	80154ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80154ae:	693b      	ldr	r3, [r7, #16]
 80154b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d10a      	bne.n	80154cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80154b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154ba:	f383 8811 	msr	BASEPRI, r3
 80154be:	f3bf 8f6f 	isb	sy
 80154c2:	f3bf 8f4f 	dsb	sy
 80154c6:	60bb      	str	r3, [r7, #8]
}
 80154c8:	bf00      	nop
 80154ca:	e7fe      	b.n	80154ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154d0:	1e5a      	subs	r2, r3, #1
 80154d2:	693b      	ldr	r3, [r7, #16]
 80154d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80154d6:	693b      	ldr	r3, [r7, #16]
 80154d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80154de:	429a      	cmp	r2, r3
 80154e0:	d02c      	beq.n	801553c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80154e2:	693b      	ldr	r3, [r7, #16]
 80154e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d128      	bne.n	801553c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80154ea:	693b      	ldr	r3, [r7, #16]
 80154ec:	3304      	adds	r3, #4
 80154ee:	4618      	mov	r0, r3
 80154f0:	f7fe f95c 	bl	80137ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80154f8:	693b      	ldr	r3, [r7, #16]
 80154fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80154fc:	693b      	ldr	r3, [r7, #16]
 80154fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015500:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801550c:	4b0f      	ldr	r3, [pc, #60]	; (801554c <xTaskPriorityDisinherit+0xd4>)
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	429a      	cmp	r2, r3
 8015512:	d903      	bls.n	801551c <xTaskPriorityDisinherit+0xa4>
 8015514:	693b      	ldr	r3, [r7, #16]
 8015516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015518:	4a0c      	ldr	r2, [pc, #48]	; (801554c <xTaskPriorityDisinherit+0xd4>)
 801551a:	6013      	str	r3, [r2, #0]
 801551c:	693b      	ldr	r3, [r7, #16]
 801551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015520:	4613      	mov	r3, r2
 8015522:	009b      	lsls	r3, r3, #2
 8015524:	4413      	add	r3, r2
 8015526:	009b      	lsls	r3, r3, #2
 8015528:	4a09      	ldr	r2, [pc, #36]	; (8015550 <xTaskPriorityDisinherit+0xd8>)
 801552a:	441a      	add	r2, r3
 801552c:	693b      	ldr	r3, [r7, #16]
 801552e:	3304      	adds	r3, #4
 8015530:	4619      	mov	r1, r3
 8015532:	4610      	mov	r0, r2
 8015534:	f7fe f8dd 	bl	80136f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015538:	2301      	movs	r3, #1
 801553a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801553c:	697b      	ldr	r3, [r7, #20]
	}
 801553e:	4618      	mov	r0, r3
 8015540:	3718      	adds	r7, #24
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}
 8015546:	bf00      	nop
 8015548:	20002c08 	.word	0x20002c08
 801554c:	200030e4 	.word	0x200030e4
 8015550:	20002c0c 	.word	0x20002c0c

08015554 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015554:	b580      	push	{r7, lr}
 8015556:	b088      	sub	sp, #32
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015562:	2301      	movs	r3, #1
 8015564:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d06a      	beq.n	8015642 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801556c:	69bb      	ldr	r3, [r7, #24]
 801556e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015570:	2b00      	cmp	r3, #0
 8015572:	d10a      	bne.n	801558a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8015574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015578:	f383 8811 	msr	BASEPRI, r3
 801557c:	f3bf 8f6f 	isb	sy
 8015580:	f3bf 8f4f 	dsb	sy
 8015584:	60fb      	str	r3, [r7, #12]
}
 8015586:	bf00      	nop
 8015588:	e7fe      	b.n	8015588 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801558e:	683a      	ldr	r2, [r7, #0]
 8015590:	429a      	cmp	r2, r3
 8015592:	d902      	bls.n	801559a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	61fb      	str	r3, [r7, #28]
 8015598:	e002      	b.n	80155a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801559a:	69bb      	ldr	r3, [r7, #24]
 801559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801559e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80155a0:	69bb      	ldr	r3, [r7, #24]
 80155a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155a4:	69fa      	ldr	r2, [r7, #28]
 80155a6:	429a      	cmp	r2, r3
 80155a8:	d04b      	beq.n	8015642 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80155aa:	69bb      	ldr	r3, [r7, #24]
 80155ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80155ae:	697a      	ldr	r2, [r7, #20]
 80155b0:	429a      	cmp	r2, r3
 80155b2:	d146      	bne.n	8015642 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80155b4:	4b25      	ldr	r3, [pc, #148]	; (801564c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	69ba      	ldr	r2, [r7, #24]
 80155ba:	429a      	cmp	r2, r3
 80155bc:	d10a      	bne.n	80155d4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80155be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155c2:	f383 8811 	msr	BASEPRI, r3
 80155c6:	f3bf 8f6f 	isb	sy
 80155ca:	f3bf 8f4f 	dsb	sy
 80155ce:	60bb      	str	r3, [r7, #8]
}
 80155d0:	bf00      	nop
 80155d2:	e7fe      	b.n	80155d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80155d4:	69bb      	ldr	r3, [r7, #24]
 80155d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	69fa      	ldr	r2, [r7, #28]
 80155de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80155e0:	69bb      	ldr	r3, [r7, #24]
 80155e2:	699b      	ldr	r3, [r3, #24]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	db04      	blt.n	80155f2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155e8:	69fb      	ldr	r3, [r7, #28]
 80155ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80155ee:	69bb      	ldr	r3, [r7, #24]
 80155f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80155f2:	69bb      	ldr	r3, [r7, #24]
 80155f4:	6959      	ldr	r1, [r3, #20]
 80155f6:	693a      	ldr	r2, [r7, #16]
 80155f8:	4613      	mov	r3, r2
 80155fa:	009b      	lsls	r3, r3, #2
 80155fc:	4413      	add	r3, r2
 80155fe:	009b      	lsls	r3, r3, #2
 8015600:	4a13      	ldr	r2, [pc, #76]	; (8015650 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015602:	4413      	add	r3, r2
 8015604:	4299      	cmp	r1, r3
 8015606:	d11c      	bne.n	8015642 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015608:	69bb      	ldr	r3, [r7, #24]
 801560a:	3304      	adds	r3, #4
 801560c:	4618      	mov	r0, r3
 801560e:	f7fe f8cd 	bl	80137ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015616:	4b0f      	ldr	r3, [pc, #60]	; (8015654 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	429a      	cmp	r2, r3
 801561c:	d903      	bls.n	8015626 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801561e:	69bb      	ldr	r3, [r7, #24]
 8015620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015622:	4a0c      	ldr	r2, [pc, #48]	; (8015654 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015624:	6013      	str	r3, [r2, #0]
 8015626:	69bb      	ldr	r3, [r7, #24]
 8015628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801562a:	4613      	mov	r3, r2
 801562c:	009b      	lsls	r3, r3, #2
 801562e:	4413      	add	r3, r2
 8015630:	009b      	lsls	r3, r3, #2
 8015632:	4a07      	ldr	r2, [pc, #28]	; (8015650 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015634:	441a      	add	r2, r3
 8015636:	69bb      	ldr	r3, [r7, #24]
 8015638:	3304      	adds	r3, #4
 801563a:	4619      	mov	r1, r3
 801563c:	4610      	mov	r0, r2
 801563e:	f7fe f858 	bl	80136f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015642:	bf00      	nop
 8015644:	3720      	adds	r7, #32
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}
 801564a:	bf00      	nop
 801564c:	20002c08 	.word	0x20002c08
 8015650:	20002c0c 	.word	0x20002c0c
 8015654:	200030e4 	.word	0x200030e4

08015658 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015658:	b480      	push	{r7}
 801565a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801565c:	4b07      	ldr	r3, [pc, #28]	; (801567c <pvTaskIncrementMutexHeldCount+0x24>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d004      	beq.n	801566e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015664:	4b05      	ldr	r3, [pc, #20]	; (801567c <pvTaskIncrementMutexHeldCount+0x24>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801566a:	3201      	adds	r2, #1
 801566c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801566e:	4b03      	ldr	r3, [pc, #12]	; (801567c <pvTaskIncrementMutexHeldCount+0x24>)
 8015670:	681b      	ldr	r3, [r3, #0]
	}
 8015672:	4618      	mov	r0, r3
 8015674:	46bd      	mov	sp, r7
 8015676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567a:	4770      	bx	lr
 801567c:	20002c08 	.word	0x20002c08

08015680 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b084      	sub	sp, #16
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801568a:	4b21      	ldr	r3, [pc, #132]	; (8015710 <prvAddCurrentTaskToDelayedList+0x90>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015690:	4b20      	ldr	r3, [pc, #128]	; (8015714 <prvAddCurrentTaskToDelayedList+0x94>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	3304      	adds	r3, #4
 8015696:	4618      	mov	r0, r3
 8015698:	f7fe f888 	bl	80137ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156a2:	d10a      	bne.n	80156ba <prvAddCurrentTaskToDelayedList+0x3a>
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d007      	beq.n	80156ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80156aa:	4b1a      	ldr	r3, [pc, #104]	; (8015714 <prvAddCurrentTaskToDelayedList+0x94>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	3304      	adds	r3, #4
 80156b0:	4619      	mov	r1, r3
 80156b2:	4819      	ldr	r0, [pc, #100]	; (8015718 <prvAddCurrentTaskToDelayedList+0x98>)
 80156b4:	f7fe f81d 	bl	80136f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80156b8:	e026      	b.n	8015708 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80156ba:	68fa      	ldr	r2, [r7, #12]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	4413      	add	r3, r2
 80156c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80156c2:	4b14      	ldr	r3, [pc, #80]	; (8015714 <prvAddCurrentTaskToDelayedList+0x94>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	68ba      	ldr	r2, [r7, #8]
 80156c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80156ca:	68ba      	ldr	r2, [r7, #8]
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d209      	bcs.n	80156e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80156d2:	4b12      	ldr	r3, [pc, #72]	; (801571c <prvAddCurrentTaskToDelayedList+0x9c>)
 80156d4:	681a      	ldr	r2, [r3, #0]
 80156d6:	4b0f      	ldr	r3, [pc, #60]	; (8015714 <prvAddCurrentTaskToDelayedList+0x94>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	3304      	adds	r3, #4
 80156dc:	4619      	mov	r1, r3
 80156de:	4610      	mov	r0, r2
 80156e0:	f7fe f82b 	bl	801373a <vListInsert>
}
 80156e4:	e010      	b.n	8015708 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80156e6:	4b0e      	ldr	r3, [pc, #56]	; (8015720 <prvAddCurrentTaskToDelayedList+0xa0>)
 80156e8:	681a      	ldr	r2, [r3, #0]
 80156ea:	4b0a      	ldr	r3, [pc, #40]	; (8015714 <prvAddCurrentTaskToDelayedList+0x94>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	3304      	adds	r3, #4
 80156f0:	4619      	mov	r1, r3
 80156f2:	4610      	mov	r0, r2
 80156f4:	f7fe f821 	bl	801373a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80156f8:	4b0a      	ldr	r3, [pc, #40]	; (8015724 <prvAddCurrentTaskToDelayedList+0xa4>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	68ba      	ldr	r2, [r7, #8]
 80156fe:	429a      	cmp	r2, r3
 8015700:	d202      	bcs.n	8015708 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015702:	4a08      	ldr	r2, [pc, #32]	; (8015724 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015704:	68bb      	ldr	r3, [r7, #8]
 8015706:	6013      	str	r3, [r2, #0]
}
 8015708:	bf00      	nop
 801570a:	3710      	adds	r7, #16
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	200030e0 	.word	0x200030e0
 8015714:	20002c08 	.word	0x20002c08
 8015718:	200030c8 	.word	0x200030c8
 801571c:	20003098 	.word	0x20003098
 8015720:	20003094 	.word	0x20003094
 8015724:	200030fc 	.word	0x200030fc

08015728 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b08a      	sub	sp, #40	; 0x28
 801572c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801572e:	2300      	movs	r3, #0
 8015730:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015732:	f000 fb07 	bl	8015d44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015736:	4b1c      	ldr	r3, [pc, #112]	; (80157a8 <xTimerCreateTimerTask+0x80>)
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d021      	beq.n	8015782 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801573e:	2300      	movs	r3, #0
 8015740:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015742:	2300      	movs	r3, #0
 8015744:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015746:	1d3a      	adds	r2, r7, #4
 8015748:	f107 0108 	add.w	r1, r7, #8
 801574c:	f107 030c 	add.w	r3, r7, #12
 8015750:	4618      	mov	r0, r3
 8015752:	f7fd ff87 	bl	8013664 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015756:	6879      	ldr	r1, [r7, #4]
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	68fa      	ldr	r2, [r7, #12]
 801575c:	9202      	str	r2, [sp, #8]
 801575e:	9301      	str	r3, [sp, #4]
 8015760:	2306      	movs	r3, #6
 8015762:	9300      	str	r3, [sp, #0]
 8015764:	2300      	movs	r3, #0
 8015766:	460a      	mov	r2, r1
 8015768:	4910      	ldr	r1, [pc, #64]	; (80157ac <xTimerCreateTimerTask+0x84>)
 801576a:	4811      	ldr	r0, [pc, #68]	; (80157b0 <xTimerCreateTimerTask+0x88>)
 801576c:	f7fe ffe0 	bl	8014730 <xTaskCreateStatic>
 8015770:	4603      	mov	r3, r0
 8015772:	4a10      	ldr	r2, [pc, #64]	; (80157b4 <xTimerCreateTimerTask+0x8c>)
 8015774:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015776:	4b0f      	ldr	r3, [pc, #60]	; (80157b4 <xTimerCreateTimerTask+0x8c>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d001      	beq.n	8015782 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801577e:	2301      	movs	r3, #1
 8015780:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d10a      	bne.n	801579e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801578c:	f383 8811 	msr	BASEPRI, r3
 8015790:	f3bf 8f6f 	isb	sy
 8015794:	f3bf 8f4f 	dsb	sy
 8015798:	613b      	str	r3, [r7, #16]
}
 801579a:	bf00      	nop
 801579c:	e7fe      	b.n	801579c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801579e:	697b      	ldr	r3, [r7, #20]
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	3718      	adds	r7, #24
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}
 80157a8:	20003138 	.word	0x20003138
 80157ac:	080184b0 	.word	0x080184b0
 80157b0:	080158ed 	.word	0x080158ed
 80157b4:	2000313c 	.word	0x2000313c

080157b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b08a      	sub	sp, #40	; 0x28
 80157bc:	af00      	add	r7, sp, #0
 80157be:	60f8      	str	r0, [r7, #12]
 80157c0:	60b9      	str	r1, [r7, #8]
 80157c2:	607a      	str	r2, [r7, #4]
 80157c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80157c6:	2300      	movs	r3, #0
 80157c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d10a      	bne.n	80157e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80157d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d4:	f383 8811 	msr	BASEPRI, r3
 80157d8:	f3bf 8f6f 	isb	sy
 80157dc:	f3bf 8f4f 	dsb	sy
 80157e0:	623b      	str	r3, [r7, #32]
}
 80157e2:	bf00      	nop
 80157e4:	e7fe      	b.n	80157e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80157e6:	4b1a      	ldr	r3, [pc, #104]	; (8015850 <xTimerGenericCommand+0x98>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d02a      	beq.n	8015844 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	2b05      	cmp	r3, #5
 80157fe:	dc18      	bgt.n	8015832 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015800:	f7ff fdb4 	bl	801536c <xTaskGetSchedulerState>
 8015804:	4603      	mov	r3, r0
 8015806:	2b02      	cmp	r3, #2
 8015808:	d109      	bne.n	801581e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801580a:	4b11      	ldr	r3, [pc, #68]	; (8015850 <xTimerGenericCommand+0x98>)
 801580c:	6818      	ldr	r0, [r3, #0]
 801580e:	f107 0110 	add.w	r1, r7, #16
 8015812:	2300      	movs	r3, #0
 8015814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015816:	f7fe f969 	bl	8013aec <xQueueGenericSend>
 801581a:	6278      	str	r0, [r7, #36]	; 0x24
 801581c:	e012      	b.n	8015844 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801581e:	4b0c      	ldr	r3, [pc, #48]	; (8015850 <xTimerGenericCommand+0x98>)
 8015820:	6818      	ldr	r0, [r3, #0]
 8015822:	f107 0110 	add.w	r1, r7, #16
 8015826:	2300      	movs	r3, #0
 8015828:	2200      	movs	r2, #0
 801582a:	f7fe f95f 	bl	8013aec <xQueueGenericSend>
 801582e:	6278      	str	r0, [r7, #36]	; 0x24
 8015830:	e008      	b.n	8015844 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015832:	4b07      	ldr	r3, [pc, #28]	; (8015850 <xTimerGenericCommand+0x98>)
 8015834:	6818      	ldr	r0, [r3, #0]
 8015836:	f107 0110 	add.w	r1, r7, #16
 801583a:	2300      	movs	r3, #0
 801583c:	683a      	ldr	r2, [r7, #0]
 801583e:	f7fe fa53 	bl	8013ce8 <xQueueGenericSendFromISR>
 8015842:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015846:	4618      	mov	r0, r3
 8015848:	3728      	adds	r7, #40	; 0x28
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}
 801584e:	bf00      	nop
 8015850:	20003138 	.word	0x20003138

08015854 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b088      	sub	sp, #32
 8015858:	af02      	add	r7, sp, #8
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801585e:	4b22      	ldr	r3, [pc, #136]	; (80158e8 <prvProcessExpiredTimer+0x94>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	68db      	ldr	r3, [r3, #12]
 8015864:	68db      	ldr	r3, [r3, #12]
 8015866:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015868:	697b      	ldr	r3, [r7, #20]
 801586a:	3304      	adds	r3, #4
 801586c:	4618      	mov	r0, r3
 801586e:	f7fd ff9d 	bl	80137ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015872:	697b      	ldr	r3, [r7, #20]
 8015874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015878:	f003 0304 	and.w	r3, r3, #4
 801587c:	2b00      	cmp	r3, #0
 801587e:	d022      	beq.n	80158c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	699a      	ldr	r2, [r3, #24]
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	18d1      	adds	r1, r2, r3
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	683a      	ldr	r2, [r7, #0]
 801588c:	6978      	ldr	r0, [r7, #20]
 801588e:	f000 f8d1 	bl	8015a34 <prvInsertTimerInActiveList>
 8015892:	4603      	mov	r3, r0
 8015894:	2b00      	cmp	r3, #0
 8015896:	d01f      	beq.n	80158d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015898:	2300      	movs	r3, #0
 801589a:	9300      	str	r3, [sp, #0]
 801589c:	2300      	movs	r3, #0
 801589e:	687a      	ldr	r2, [r7, #4]
 80158a0:	2100      	movs	r1, #0
 80158a2:	6978      	ldr	r0, [r7, #20]
 80158a4:	f7ff ff88 	bl	80157b8 <xTimerGenericCommand>
 80158a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80158aa:	693b      	ldr	r3, [r7, #16]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d113      	bne.n	80158d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80158b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b4:	f383 8811 	msr	BASEPRI, r3
 80158b8:	f3bf 8f6f 	isb	sy
 80158bc:	f3bf 8f4f 	dsb	sy
 80158c0:	60fb      	str	r3, [r7, #12]
}
 80158c2:	bf00      	nop
 80158c4:	e7fe      	b.n	80158c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80158c6:	697b      	ldr	r3, [r7, #20]
 80158c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158cc:	f023 0301 	bic.w	r3, r3, #1
 80158d0:	b2da      	uxtb	r2, r3
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80158d8:	697b      	ldr	r3, [r7, #20]
 80158da:	6a1b      	ldr	r3, [r3, #32]
 80158dc:	6978      	ldr	r0, [r7, #20]
 80158de:	4798      	blx	r3
}
 80158e0:	bf00      	nop
 80158e2:	3718      	adds	r7, #24
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	20003130 	.word	0x20003130

080158ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b084      	sub	sp, #16
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80158f4:	f107 0308 	add.w	r3, r7, #8
 80158f8:	4618      	mov	r0, r3
 80158fa:	f000 f857 	bl	80159ac <prvGetNextExpireTime>
 80158fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	4619      	mov	r1, r3
 8015904:	68f8      	ldr	r0, [r7, #12]
 8015906:	f000 f803 	bl	8015910 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801590a:	f000 f8d5 	bl	8015ab8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801590e:	e7f1      	b.n	80158f4 <prvTimerTask+0x8>

08015910 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b084      	sub	sp, #16
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801591a:	f7ff f945 	bl	8014ba8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801591e:	f107 0308 	add.w	r3, r7, #8
 8015922:	4618      	mov	r0, r3
 8015924:	f000 f866 	bl	80159f4 <prvSampleTimeNow>
 8015928:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d130      	bne.n	8015992 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d10a      	bne.n	801594c <prvProcessTimerOrBlockTask+0x3c>
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	429a      	cmp	r2, r3
 801593c:	d806      	bhi.n	801594c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801593e:	f7ff f941 	bl	8014bc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015942:	68f9      	ldr	r1, [r7, #12]
 8015944:	6878      	ldr	r0, [r7, #4]
 8015946:	f7ff ff85 	bl	8015854 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801594a:	e024      	b.n	8015996 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d008      	beq.n	8015964 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015952:	4b13      	ldr	r3, [pc, #76]	; (80159a0 <prvProcessTimerOrBlockTask+0x90>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d101      	bne.n	8015960 <prvProcessTimerOrBlockTask+0x50>
 801595c:	2301      	movs	r3, #1
 801595e:	e000      	b.n	8015962 <prvProcessTimerOrBlockTask+0x52>
 8015960:	2300      	movs	r3, #0
 8015962:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015964:	4b0f      	ldr	r3, [pc, #60]	; (80159a4 <prvProcessTimerOrBlockTask+0x94>)
 8015966:	6818      	ldr	r0, [r3, #0]
 8015968:	687a      	ldr	r2, [r7, #4]
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	1ad3      	subs	r3, r2, r3
 801596e:	683a      	ldr	r2, [r7, #0]
 8015970:	4619      	mov	r1, r3
 8015972:	f7fe fea9 	bl	80146c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015976:	f7ff f925 	bl	8014bc4 <xTaskResumeAll>
 801597a:	4603      	mov	r3, r0
 801597c:	2b00      	cmp	r3, #0
 801597e:	d10a      	bne.n	8015996 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015980:	4b09      	ldr	r3, [pc, #36]	; (80159a8 <prvProcessTimerOrBlockTask+0x98>)
 8015982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015986:	601a      	str	r2, [r3, #0]
 8015988:	f3bf 8f4f 	dsb	sy
 801598c:	f3bf 8f6f 	isb	sy
}
 8015990:	e001      	b.n	8015996 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015992:	f7ff f917 	bl	8014bc4 <xTaskResumeAll>
}
 8015996:	bf00      	nop
 8015998:	3710      	adds	r7, #16
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}
 801599e:	bf00      	nop
 80159a0:	20003134 	.word	0x20003134
 80159a4:	20003138 	.word	0x20003138
 80159a8:	e000ed04 	.word	0xe000ed04

080159ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80159ac:	b480      	push	{r7}
 80159ae:	b085      	sub	sp, #20
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80159b4:	4b0e      	ldr	r3, [pc, #56]	; (80159f0 <prvGetNextExpireTime+0x44>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d101      	bne.n	80159c2 <prvGetNextExpireTime+0x16>
 80159be:	2201      	movs	r2, #1
 80159c0:	e000      	b.n	80159c4 <prvGetNextExpireTime+0x18>
 80159c2:	2200      	movs	r2, #0
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d105      	bne.n	80159dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80159d0:	4b07      	ldr	r3, [pc, #28]	; (80159f0 <prvGetNextExpireTime+0x44>)
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	68db      	ldr	r3, [r3, #12]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	60fb      	str	r3, [r7, #12]
 80159da:	e001      	b.n	80159e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80159dc:	2300      	movs	r3, #0
 80159de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80159e0:	68fb      	ldr	r3, [r7, #12]
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	3714      	adds	r7, #20
 80159e6:	46bd      	mov	sp, r7
 80159e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ec:	4770      	bx	lr
 80159ee:	bf00      	nop
 80159f0:	20003130 	.word	0x20003130

080159f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b084      	sub	sp, #16
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80159fc:	f7ff f980 	bl	8014d00 <xTaskGetTickCount>
 8015a00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015a02:	4b0b      	ldr	r3, [pc, #44]	; (8015a30 <prvSampleTimeNow+0x3c>)
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	68fa      	ldr	r2, [r7, #12]
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	d205      	bcs.n	8015a18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015a0c:	f000 f936 	bl	8015c7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2201      	movs	r2, #1
 8015a14:	601a      	str	r2, [r3, #0]
 8015a16:	e002      	b.n	8015a1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015a1e:	4a04      	ldr	r2, [pc, #16]	; (8015a30 <prvSampleTimeNow+0x3c>)
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015a24:	68fb      	ldr	r3, [r7, #12]
}
 8015a26:	4618      	mov	r0, r3
 8015a28:	3710      	adds	r7, #16
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd80      	pop	{r7, pc}
 8015a2e:	bf00      	nop
 8015a30:	20003140 	.word	0x20003140

08015a34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b086      	sub	sp, #24
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	60f8      	str	r0, [r7, #12]
 8015a3c:	60b9      	str	r1, [r7, #8]
 8015a3e:	607a      	str	r2, [r7, #4]
 8015a40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015a42:	2300      	movs	r3, #0
 8015a44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	68ba      	ldr	r2, [r7, #8]
 8015a4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	68fa      	ldr	r2, [r7, #12]
 8015a50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015a52:	68ba      	ldr	r2, [r7, #8]
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	429a      	cmp	r2, r3
 8015a58:	d812      	bhi.n	8015a80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	683b      	ldr	r3, [r7, #0]
 8015a5e:	1ad2      	subs	r2, r2, r3
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	699b      	ldr	r3, [r3, #24]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d302      	bcc.n	8015a6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015a68:	2301      	movs	r3, #1
 8015a6a:	617b      	str	r3, [r7, #20]
 8015a6c:	e01b      	b.n	8015aa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015a6e:	4b10      	ldr	r3, [pc, #64]	; (8015ab0 <prvInsertTimerInActiveList+0x7c>)
 8015a70:	681a      	ldr	r2, [r3, #0]
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	3304      	adds	r3, #4
 8015a76:	4619      	mov	r1, r3
 8015a78:	4610      	mov	r0, r2
 8015a7a:	f7fd fe5e 	bl	801373a <vListInsert>
 8015a7e:	e012      	b.n	8015aa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015a80:	687a      	ldr	r2, [r7, #4]
 8015a82:	683b      	ldr	r3, [r7, #0]
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d206      	bcs.n	8015a96 <prvInsertTimerInActiveList+0x62>
 8015a88:	68ba      	ldr	r2, [r7, #8]
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d302      	bcc.n	8015a96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015a90:	2301      	movs	r3, #1
 8015a92:	617b      	str	r3, [r7, #20]
 8015a94:	e007      	b.n	8015aa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015a96:	4b07      	ldr	r3, [pc, #28]	; (8015ab4 <prvInsertTimerInActiveList+0x80>)
 8015a98:	681a      	ldr	r2, [r3, #0]
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	3304      	adds	r3, #4
 8015a9e:	4619      	mov	r1, r3
 8015aa0:	4610      	mov	r0, r2
 8015aa2:	f7fd fe4a 	bl	801373a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015aa6:	697b      	ldr	r3, [r7, #20]
}
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3718      	adds	r7, #24
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}
 8015ab0:	20003134 	.word	0x20003134
 8015ab4:	20003130 	.word	0x20003130

08015ab8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b08e      	sub	sp, #56	; 0x38
 8015abc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015abe:	e0ca      	b.n	8015c56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	da18      	bge.n	8015af8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015ac6:	1d3b      	adds	r3, r7, #4
 8015ac8:	3304      	adds	r3, #4
 8015aca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d10a      	bne.n	8015ae8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ad6:	f383 8811 	msr	BASEPRI, r3
 8015ada:	f3bf 8f6f 	isb	sy
 8015ade:	f3bf 8f4f 	dsb	sy
 8015ae2:	61fb      	str	r3, [r7, #28]
}
 8015ae4:	bf00      	nop
 8015ae6:	e7fe      	b.n	8015ae6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015aee:	6850      	ldr	r0, [r2, #4]
 8015af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015af2:	6892      	ldr	r2, [r2, #8]
 8015af4:	4611      	mov	r1, r2
 8015af6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	f2c0 80aa 	blt.w	8015c54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b06:	695b      	ldr	r3, [r3, #20]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d004      	beq.n	8015b16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b0e:	3304      	adds	r3, #4
 8015b10:	4618      	mov	r0, r3
 8015b12:	f7fd fe4b 	bl	80137ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015b16:	463b      	mov	r3, r7
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f7ff ff6b 	bl	80159f4 <prvSampleTimeNow>
 8015b1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	2b09      	cmp	r3, #9
 8015b24:	f200 8097 	bhi.w	8015c56 <prvProcessReceivedCommands+0x19e>
 8015b28:	a201      	add	r2, pc, #4	; (adr r2, 8015b30 <prvProcessReceivedCommands+0x78>)
 8015b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b2e:	bf00      	nop
 8015b30:	08015b59 	.word	0x08015b59
 8015b34:	08015b59 	.word	0x08015b59
 8015b38:	08015b59 	.word	0x08015b59
 8015b3c:	08015bcd 	.word	0x08015bcd
 8015b40:	08015be1 	.word	0x08015be1
 8015b44:	08015c2b 	.word	0x08015c2b
 8015b48:	08015b59 	.word	0x08015b59
 8015b4c:	08015b59 	.word	0x08015b59
 8015b50:	08015bcd 	.word	0x08015bcd
 8015b54:	08015be1 	.word	0x08015be1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b5e:	f043 0301 	orr.w	r3, r3, #1
 8015b62:	b2da      	uxtb	r2, r3
 8015b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015b6a:	68ba      	ldr	r2, [r7, #8]
 8015b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b6e:	699b      	ldr	r3, [r3, #24]
 8015b70:	18d1      	adds	r1, r2, r3
 8015b72:	68bb      	ldr	r3, [r7, #8]
 8015b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b78:	f7ff ff5c 	bl	8015a34 <prvInsertTimerInActiveList>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d069      	beq.n	8015c56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b84:	6a1b      	ldr	r3, [r3, #32]
 8015b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b90:	f003 0304 	and.w	r3, r3, #4
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d05e      	beq.n	8015c56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015b98:	68ba      	ldr	r2, [r7, #8]
 8015b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b9c:	699b      	ldr	r3, [r3, #24]
 8015b9e:	441a      	add	r2, r3
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	9300      	str	r3, [sp, #0]
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	2100      	movs	r1, #0
 8015ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015baa:	f7ff fe05 	bl	80157b8 <xTimerGenericCommand>
 8015bae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015bb0:	6a3b      	ldr	r3, [r7, #32]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d14f      	bne.n	8015c56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bba:	f383 8811 	msr	BASEPRI, r3
 8015bbe:	f3bf 8f6f 	isb	sy
 8015bc2:	f3bf 8f4f 	dsb	sy
 8015bc6:	61bb      	str	r3, [r7, #24]
}
 8015bc8:	bf00      	nop
 8015bca:	e7fe      	b.n	8015bca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015bd2:	f023 0301 	bic.w	r3, r3, #1
 8015bd6:	b2da      	uxtb	r2, r3
 8015bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015bde:	e03a      	b.n	8015c56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015be6:	f043 0301 	orr.w	r3, r3, #1
 8015bea:	b2da      	uxtb	r2, r3
 8015bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015bf2:	68ba      	ldr	r2, [r7, #8]
 8015bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bf6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bfa:	699b      	ldr	r3, [r3, #24]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d10a      	bne.n	8015c16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c04:	f383 8811 	msr	BASEPRI, r3
 8015c08:	f3bf 8f6f 	isb	sy
 8015c0c:	f3bf 8f4f 	dsb	sy
 8015c10:	617b      	str	r3, [r7, #20]
}
 8015c12:	bf00      	nop
 8015c14:	e7fe      	b.n	8015c14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c18:	699a      	ldr	r2, [r3, #24]
 8015c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1c:	18d1      	adds	r1, r2, r3
 8015c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c24:	f7ff ff06 	bl	8015a34 <prvInsertTimerInActiveList>
					break;
 8015c28:	e015      	b.n	8015c56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c30:	f003 0302 	and.w	r3, r3, #2
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d103      	bne.n	8015c40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c3a:	f000 fbd9 	bl	80163f0 <vPortFree>
 8015c3e:	e00a      	b.n	8015c56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c46:	f023 0301 	bic.w	r3, r3, #1
 8015c4a:	b2da      	uxtb	r2, r3
 8015c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015c52:	e000      	b.n	8015c56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015c54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015c56:	4b08      	ldr	r3, [pc, #32]	; (8015c78 <prvProcessReceivedCommands+0x1c0>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	1d39      	adds	r1, r7, #4
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f7fe f968 	bl	8013f34 <xQueueReceive>
 8015c64:	4603      	mov	r3, r0
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	f47f af2a 	bne.w	8015ac0 <prvProcessReceivedCommands+0x8>
	}
}
 8015c6c:	bf00      	nop
 8015c6e:	bf00      	nop
 8015c70:	3730      	adds	r7, #48	; 0x30
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	20003138 	.word	0x20003138

08015c7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b088      	sub	sp, #32
 8015c80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015c82:	e048      	b.n	8015d16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015c84:	4b2d      	ldr	r3, [pc, #180]	; (8015d3c <prvSwitchTimerLists+0xc0>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	68db      	ldr	r3, [r3, #12]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c8e:	4b2b      	ldr	r3, [pc, #172]	; (8015d3c <prvSwitchTimerLists+0xc0>)
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	68db      	ldr	r3, [r3, #12]
 8015c94:	68db      	ldr	r3, [r3, #12]
 8015c96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	3304      	adds	r3, #4
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f7fd fd85 	bl	80137ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	6a1b      	ldr	r3, [r3, #32]
 8015ca6:	68f8      	ldr	r0, [r7, #12]
 8015ca8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015cb0:	f003 0304 	and.w	r3, r3, #4
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d02e      	beq.n	8015d16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	699b      	ldr	r3, [r3, #24]
 8015cbc:	693a      	ldr	r2, [r7, #16]
 8015cbe:	4413      	add	r3, r2
 8015cc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015cc2:	68ba      	ldr	r2, [r7, #8]
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d90e      	bls.n	8015ce8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	68ba      	ldr	r2, [r7, #8]
 8015cce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	68fa      	ldr	r2, [r7, #12]
 8015cd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015cd6:	4b19      	ldr	r3, [pc, #100]	; (8015d3c <prvSwitchTimerLists+0xc0>)
 8015cd8:	681a      	ldr	r2, [r3, #0]
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	3304      	adds	r3, #4
 8015cde:	4619      	mov	r1, r3
 8015ce0:	4610      	mov	r0, r2
 8015ce2:	f7fd fd2a 	bl	801373a <vListInsert>
 8015ce6:	e016      	b.n	8015d16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015ce8:	2300      	movs	r3, #0
 8015cea:	9300      	str	r3, [sp, #0]
 8015cec:	2300      	movs	r3, #0
 8015cee:	693a      	ldr	r2, [r7, #16]
 8015cf0:	2100      	movs	r1, #0
 8015cf2:	68f8      	ldr	r0, [r7, #12]
 8015cf4:	f7ff fd60 	bl	80157b8 <xTimerGenericCommand>
 8015cf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d10a      	bne.n	8015d16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d04:	f383 8811 	msr	BASEPRI, r3
 8015d08:	f3bf 8f6f 	isb	sy
 8015d0c:	f3bf 8f4f 	dsb	sy
 8015d10:	603b      	str	r3, [r7, #0]
}
 8015d12:	bf00      	nop
 8015d14:	e7fe      	b.n	8015d14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015d16:	4b09      	ldr	r3, [pc, #36]	; (8015d3c <prvSwitchTimerLists+0xc0>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d1b1      	bne.n	8015c84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015d20:	4b06      	ldr	r3, [pc, #24]	; (8015d3c <prvSwitchTimerLists+0xc0>)
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015d26:	4b06      	ldr	r3, [pc, #24]	; (8015d40 <prvSwitchTimerLists+0xc4>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	4a04      	ldr	r2, [pc, #16]	; (8015d3c <prvSwitchTimerLists+0xc0>)
 8015d2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015d2e:	4a04      	ldr	r2, [pc, #16]	; (8015d40 <prvSwitchTimerLists+0xc4>)
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	6013      	str	r3, [r2, #0]
}
 8015d34:	bf00      	nop
 8015d36:	3718      	adds	r7, #24
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	20003130 	.word	0x20003130
 8015d40:	20003134 	.word	0x20003134

08015d44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015d4a:	f000 f96b 	bl	8016024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015d4e:	4b15      	ldr	r3, [pc, #84]	; (8015da4 <prvCheckForValidListAndQueue+0x60>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d120      	bne.n	8015d98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015d56:	4814      	ldr	r0, [pc, #80]	; (8015da8 <prvCheckForValidListAndQueue+0x64>)
 8015d58:	f7fd fc9e 	bl	8013698 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015d5c:	4813      	ldr	r0, [pc, #76]	; (8015dac <prvCheckForValidListAndQueue+0x68>)
 8015d5e:	f7fd fc9b 	bl	8013698 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015d62:	4b13      	ldr	r3, [pc, #76]	; (8015db0 <prvCheckForValidListAndQueue+0x6c>)
 8015d64:	4a10      	ldr	r2, [pc, #64]	; (8015da8 <prvCheckForValidListAndQueue+0x64>)
 8015d66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015d68:	4b12      	ldr	r3, [pc, #72]	; (8015db4 <prvCheckForValidListAndQueue+0x70>)
 8015d6a:	4a10      	ldr	r2, [pc, #64]	; (8015dac <prvCheckForValidListAndQueue+0x68>)
 8015d6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015d6e:	2300      	movs	r3, #0
 8015d70:	9300      	str	r3, [sp, #0]
 8015d72:	4b11      	ldr	r3, [pc, #68]	; (8015db8 <prvCheckForValidListAndQueue+0x74>)
 8015d74:	4a11      	ldr	r2, [pc, #68]	; (8015dbc <prvCheckForValidListAndQueue+0x78>)
 8015d76:	2110      	movs	r1, #16
 8015d78:	200a      	movs	r0, #10
 8015d7a:	f7fd fda9 	bl	80138d0 <xQueueGenericCreateStatic>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	4a08      	ldr	r2, [pc, #32]	; (8015da4 <prvCheckForValidListAndQueue+0x60>)
 8015d82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015d84:	4b07      	ldr	r3, [pc, #28]	; (8015da4 <prvCheckForValidListAndQueue+0x60>)
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d005      	beq.n	8015d98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015d8c:	4b05      	ldr	r3, [pc, #20]	; (8015da4 <prvCheckForValidListAndQueue+0x60>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	490b      	ldr	r1, [pc, #44]	; (8015dc0 <prvCheckForValidListAndQueue+0x7c>)
 8015d92:	4618      	mov	r0, r3
 8015d94:	f7fe fc6e 	bl	8014674 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015d98:	f000 f974 	bl	8016084 <vPortExitCritical>
}
 8015d9c:	bf00      	nop
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}
 8015da2:	bf00      	nop
 8015da4:	20003138 	.word	0x20003138
 8015da8:	20003108 	.word	0x20003108
 8015dac:	2000311c 	.word	0x2000311c
 8015db0:	20003130 	.word	0x20003130
 8015db4:	20003134 	.word	0x20003134
 8015db8:	200031e4 	.word	0x200031e4
 8015dbc:	20003144 	.word	0x20003144
 8015dc0:	080184b8 	.word	0x080184b8

08015dc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015dc4:	b480      	push	{r7}
 8015dc6:	b085      	sub	sp, #20
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	60f8      	str	r0, [r7, #12]
 8015dcc:	60b9      	str	r1, [r7, #8]
 8015dce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	3b04      	subs	r3, #4
 8015dd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	3b04      	subs	r3, #4
 8015de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	f023 0201 	bic.w	r2, r3, #1
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	3b04      	subs	r3, #4
 8015df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015df4:	4a0c      	ldr	r2, [pc, #48]	; (8015e28 <pxPortInitialiseStack+0x64>)
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	3b14      	subs	r3, #20
 8015dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015e00:	687a      	ldr	r2, [r7, #4]
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	3b04      	subs	r3, #4
 8015e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	f06f 0202 	mvn.w	r2, #2
 8015e12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	3b20      	subs	r3, #32
 8015e18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015e1a:	68fb      	ldr	r3, [r7, #12]
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	3714      	adds	r7, #20
 8015e20:	46bd      	mov	sp, r7
 8015e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e26:	4770      	bx	lr
 8015e28:	08015e2d 	.word	0x08015e2d

08015e2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015e2c:	b480      	push	{r7}
 8015e2e:	b085      	sub	sp, #20
 8015e30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015e32:	2300      	movs	r3, #0
 8015e34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015e36:	4b12      	ldr	r3, [pc, #72]	; (8015e80 <prvTaskExitError+0x54>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e3e:	d00a      	beq.n	8015e56 <prvTaskExitError+0x2a>
	__asm volatile
 8015e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e44:	f383 8811 	msr	BASEPRI, r3
 8015e48:	f3bf 8f6f 	isb	sy
 8015e4c:	f3bf 8f4f 	dsb	sy
 8015e50:	60fb      	str	r3, [r7, #12]
}
 8015e52:	bf00      	nop
 8015e54:	e7fe      	b.n	8015e54 <prvTaskExitError+0x28>
	__asm volatile
 8015e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e5a:	f383 8811 	msr	BASEPRI, r3
 8015e5e:	f3bf 8f6f 	isb	sy
 8015e62:	f3bf 8f4f 	dsb	sy
 8015e66:	60bb      	str	r3, [r7, #8]
}
 8015e68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015e6a:	bf00      	nop
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d0fc      	beq.n	8015e6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015e72:	bf00      	nop
 8015e74:	bf00      	nop
 8015e76:	3714      	adds	r7, #20
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e7e:	4770      	bx	lr
 8015e80:	200005ac 	.word	0x200005ac
	...

08015e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015e90:	4b07      	ldr	r3, [pc, #28]	; (8015eb0 <pxCurrentTCBConst2>)
 8015e92:	6819      	ldr	r1, [r3, #0]
 8015e94:	6808      	ldr	r0, [r1, #0]
 8015e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e9a:	f380 8809 	msr	PSP, r0
 8015e9e:	f3bf 8f6f 	isb	sy
 8015ea2:	f04f 0000 	mov.w	r0, #0
 8015ea6:	f380 8811 	msr	BASEPRI, r0
 8015eaa:	4770      	bx	lr
 8015eac:	f3af 8000 	nop.w

08015eb0 <pxCurrentTCBConst2>:
 8015eb0:	20002c08 	.word	0x20002c08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015eb4:	bf00      	nop
 8015eb6:	bf00      	nop

08015eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015eb8:	4808      	ldr	r0, [pc, #32]	; (8015edc <prvPortStartFirstTask+0x24>)
 8015eba:	6800      	ldr	r0, [r0, #0]
 8015ebc:	6800      	ldr	r0, [r0, #0]
 8015ebe:	f380 8808 	msr	MSP, r0
 8015ec2:	f04f 0000 	mov.w	r0, #0
 8015ec6:	f380 8814 	msr	CONTROL, r0
 8015eca:	b662      	cpsie	i
 8015ecc:	b661      	cpsie	f
 8015ece:	f3bf 8f4f 	dsb	sy
 8015ed2:	f3bf 8f6f 	isb	sy
 8015ed6:	df00      	svc	0
 8015ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015eda:	bf00      	nop
 8015edc:	e000ed08 	.word	0xe000ed08

08015ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b086      	sub	sp, #24
 8015ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015ee6:	4b46      	ldr	r3, [pc, #280]	; (8016000 <xPortStartScheduler+0x120>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	4a46      	ldr	r2, [pc, #280]	; (8016004 <xPortStartScheduler+0x124>)
 8015eec:	4293      	cmp	r3, r2
 8015eee:	d10a      	bne.n	8015f06 <xPortStartScheduler+0x26>
	__asm volatile
 8015ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ef4:	f383 8811 	msr	BASEPRI, r3
 8015ef8:	f3bf 8f6f 	isb	sy
 8015efc:	f3bf 8f4f 	dsb	sy
 8015f00:	613b      	str	r3, [r7, #16]
}
 8015f02:	bf00      	nop
 8015f04:	e7fe      	b.n	8015f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015f06:	4b3e      	ldr	r3, [pc, #248]	; (8016000 <xPortStartScheduler+0x120>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	4a3f      	ldr	r2, [pc, #252]	; (8016008 <xPortStartScheduler+0x128>)
 8015f0c:	4293      	cmp	r3, r2
 8015f0e:	d10a      	bne.n	8015f26 <xPortStartScheduler+0x46>
	__asm volatile
 8015f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f14:	f383 8811 	msr	BASEPRI, r3
 8015f18:	f3bf 8f6f 	isb	sy
 8015f1c:	f3bf 8f4f 	dsb	sy
 8015f20:	60fb      	str	r3, [r7, #12]
}
 8015f22:	bf00      	nop
 8015f24:	e7fe      	b.n	8015f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015f26:	4b39      	ldr	r3, [pc, #228]	; (801600c <xPortStartScheduler+0x12c>)
 8015f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015f2a:	697b      	ldr	r3, [r7, #20]
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	b2db      	uxtb	r3, r3
 8015f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015f32:	697b      	ldr	r3, [r7, #20]
 8015f34:	22ff      	movs	r2, #255	; 0xff
 8015f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015f38:	697b      	ldr	r3, [r7, #20]
 8015f3a:	781b      	ldrb	r3, [r3, #0]
 8015f3c:	b2db      	uxtb	r3, r3
 8015f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015f40:	78fb      	ldrb	r3, [r7, #3]
 8015f42:	b2db      	uxtb	r3, r3
 8015f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015f48:	b2da      	uxtb	r2, r3
 8015f4a:	4b31      	ldr	r3, [pc, #196]	; (8016010 <xPortStartScheduler+0x130>)
 8015f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015f4e:	4b31      	ldr	r3, [pc, #196]	; (8016014 <xPortStartScheduler+0x134>)
 8015f50:	2207      	movs	r2, #7
 8015f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015f54:	e009      	b.n	8015f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015f56:	4b2f      	ldr	r3, [pc, #188]	; (8016014 <xPortStartScheduler+0x134>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	3b01      	subs	r3, #1
 8015f5c:	4a2d      	ldr	r2, [pc, #180]	; (8016014 <xPortStartScheduler+0x134>)
 8015f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015f60:	78fb      	ldrb	r3, [r7, #3]
 8015f62:	b2db      	uxtb	r3, r3
 8015f64:	005b      	lsls	r3, r3, #1
 8015f66:	b2db      	uxtb	r3, r3
 8015f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015f6a:	78fb      	ldrb	r3, [r7, #3]
 8015f6c:	b2db      	uxtb	r3, r3
 8015f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015f72:	2b80      	cmp	r3, #128	; 0x80
 8015f74:	d0ef      	beq.n	8015f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015f76:	4b27      	ldr	r3, [pc, #156]	; (8016014 <xPortStartScheduler+0x134>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	f1c3 0307 	rsb	r3, r3, #7
 8015f7e:	2b04      	cmp	r3, #4
 8015f80:	d00a      	beq.n	8015f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8015f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f86:	f383 8811 	msr	BASEPRI, r3
 8015f8a:	f3bf 8f6f 	isb	sy
 8015f8e:	f3bf 8f4f 	dsb	sy
 8015f92:	60bb      	str	r3, [r7, #8]
}
 8015f94:	bf00      	nop
 8015f96:	e7fe      	b.n	8015f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015f98:	4b1e      	ldr	r3, [pc, #120]	; (8016014 <xPortStartScheduler+0x134>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	021b      	lsls	r3, r3, #8
 8015f9e:	4a1d      	ldr	r2, [pc, #116]	; (8016014 <xPortStartScheduler+0x134>)
 8015fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015fa2:	4b1c      	ldr	r3, [pc, #112]	; (8016014 <xPortStartScheduler+0x134>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015faa:	4a1a      	ldr	r2, [pc, #104]	; (8016014 <xPortStartScheduler+0x134>)
 8015fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	b2da      	uxtb	r2, r3
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015fb6:	4b18      	ldr	r3, [pc, #96]	; (8016018 <xPortStartScheduler+0x138>)
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	4a17      	ldr	r2, [pc, #92]	; (8016018 <xPortStartScheduler+0x138>)
 8015fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015fc2:	4b15      	ldr	r3, [pc, #84]	; (8016018 <xPortStartScheduler+0x138>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	4a14      	ldr	r2, [pc, #80]	; (8016018 <xPortStartScheduler+0x138>)
 8015fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015fce:	f000 f8dd 	bl	801618c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015fd2:	4b12      	ldr	r3, [pc, #72]	; (801601c <xPortStartScheduler+0x13c>)
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015fd8:	f000 f8fc 	bl	80161d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015fdc:	4b10      	ldr	r3, [pc, #64]	; (8016020 <xPortStartScheduler+0x140>)
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	4a0f      	ldr	r2, [pc, #60]	; (8016020 <xPortStartScheduler+0x140>)
 8015fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015fe8:	f7ff ff66 	bl	8015eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015fec:	f7fe ff52 	bl	8014e94 <vTaskSwitchContext>
	prvTaskExitError();
 8015ff0:	f7ff ff1c 	bl	8015e2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015ff4:	2300      	movs	r3, #0
}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	3718      	adds	r7, #24
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}
 8015ffe:	bf00      	nop
 8016000:	e000ed00 	.word	0xe000ed00
 8016004:	410fc271 	.word	0x410fc271
 8016008:	410fc270 	.word	0x410fc270
 801600c:	e000e400 	.word	0xe000e400
 8016010:	20003234 	.word	0x20003234
 8016014:	20003238 	.word	0x20003238
 8016018:	e000ed20 	.word	0xe000ed20
 801601c:	200005ac 	.word	0x200005ac
 8016020:	e000ef34 	.word	0xe000ef34

08016024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016024:	b480      	push	{r7}
 8016026:	b083      	sub	sp, #12
 8016028:	af00      	add	r7, sp, #0
	__asm volatile
 801602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801602e:	f383 8811 	msr	BASEPRI, r3
 8016032:	f3bf 8f6f 	isb	sy
 8016036:	f3bf 8f4f 	dsb	sy
 801603a:	607b      	str	r3, [r7, #4]
}
 801603c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801603e:	4b0f      	ldr	r3, [pc, #60]	; (801607c <vPortEnterCritical+0x58>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	3301      	adds	r3, #1
 8016044:	4a0d      	ldr	r2, [pc, #52]	; (801607c <vPortEnterCritical+0x58>)
 8016046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016048:	4b0c      	ldr	r3, [pc, #48]	; (801607c <vPortEnterCritical+0x58>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	2b01      	cmp	r3, #1
 801604e:	d10f      	bne.n	8016070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016050:	4b0b      	ldr	r3, [pc, #44]	; (8016080 <vPortEnterCritical+0x5c>)
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	b2db      	uxtb	r3, r3
 8016056:	2b00      	cmp	r3, #0
 8016058:	d00a      	beq.n	8016070 <vPortEnterCritical+0x4c>
	__asm volatile
 801605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801605e:	f383 8811 	msr	BASEPRI, r3
 8016062:	f3bf 8f6f 	isb	sy
 8016066:	f3bf 8f4f 	dsb	sy
 801606a:	603b      	str	r3, [r7, #0]
}
 801606c:	bf00      	nop
 801606e:	e7fe      	b.n	801606e <vPortEnterCritical+0x4a>
	}
}
 8016070:	bf00      	nop
 8016072:	370c      	adds	r7, #12
 8016074:	46bd      	mov	sp, r7
 8016076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607a:	4770      	bx	lr
 801607c:	200005ac 	.word	0x200005ac
 8016080:	e000ed04 	.word	0xe000ed04

08016084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016084:	b480      	push	{r7}
 8016086:	b083      	sub	sp, #12
 8016088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801608a:	4b12      	ldr	r3, [pc, #72]	; (80160d4 <vPortExitCritical+0x50>)
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d10a      	bne.n	80160a8 <vPortExitCritical+0x24>
	__asm volatile
 8016092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016096:	f383 8811 	msr	BASEPRI, r3
 801609a:	f3bf 8f6f 	isb	sy
 801609e:	f3bf 8f4f 	dsb	sy
 80160a2:	607b      	str	r3, [r7, #4]
}
 80160a4:	bf00      	nop
 80160a6:	e7fe      	b.n	80160a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80160a8:	4b0a      	ldr	r3, [pc, #40]	; (80160d4 <vPortExitCritical+0x50>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	3b01      	subs	r3, #1
 80160ae:	4a09      	ldr	r2, [pc, #36]	; (80160d4 <vPortExitCritical+0x50>)
 80160b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80160b2:	4b08      	ldr	r3, [pc, #32]	; (80160d4 <vPortExitCritical+0x50>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d105      	bne.n	80160c6 <vPortExitCritical+0x42>
 80160ba:	2300      	movs	r3, #0
 80160bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	f383 8811 	msr	BASEPRI, r3
}
 80160c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80160c6:	bf00      	nop
 80160c8:	370c      	adds	r7, #12
 80160ca:	46bd      	mov	sp, r7
 80160cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d0:	4770      	bx	lr
 80160d2:	bf00      	nop
 80160d4:	200005ac 	.word	0x200005ac
	...

080160e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80160e0:	f3ef 8009 	mrs	r0, PSP
 80160e4:	f3bf 8f6f 	isb	sy
 80160e8:	4b15      	ldr	r3, [pc, #84]	; (8016140 <pxCurrentTCBConst>)
 80160ea:	681a      	ldr	r2, [r3, #0]
 80160ec:	f01e 0f10 	tst.w	lr, #16
 80160f0:	bf08      	it	eq
 80160f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80160f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160fa:	6010      	str	r0, [r2, #0]
 80160fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016104:	f380 8811 	msr	BASEPRI, r0
 8016108:	f3bf 8f4f 	dsb	sy
 801610c:	f3bf 8f6f 	isb	sy
 8016110:	f7fe fec0 	bl	8014e94 <vTaskSwitchContext>
 8016114:	f04f 0000 	mov.w	r0, #0
 8016118:	f380 8811 	msr	BASEPRI, r0
 801611c:	bc09      	pop	{r0, r3}
 801611e:	6819      	ldr	r1, [r3, #0]
 8016120:	6808      	ldr	r0, [r1, #0]
 8016122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016126:	f01e 0f10 	tst.w	lr, #16
 801612a:	bf08      	it	eq
 801612c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016130:	f380 8809 	msr	PSP, r0
 8016134:	f3bf 8f6f 	isb	sy
 8016138:	4770      	bx	lr
 801613a:	bf00      	nop
 801613c:	f3af 8000 	nop.w

08016140 <pxCurrentTCBConst>:
 8016140:	20002c08 	.word	0x20002c08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016144:	bf00      	nop
 8016146:	bf00      	nop

08016148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b082      	sub	sp, #8
 801614c:	af00      	add	r7, sp, #0
	__asm volatile
 801614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016152:	f383 8811 	msr	BASEPRI, r3
 8016156:	f3bf 8f6f 	isb	sy
 801615a:	f3bf 8f4f 	dsb	sy
 801615e:	607b      	str	r3, [r7, #4]
}
 8016160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016162:	f7fe fddd 	bl	8014d20 <xTaskIncrementTick>
 8016166:	4603      	mov	r3, r0
 8016168:	2b00      	cmp	r3, #0
 801616a:	d003      	beq.n	8016174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801616c:	4b06      	ldr	r3, [pc, #24]	; (8016188 <SysTick_Handler+0x40>)
 801616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016172:	601a      	str	r2, [r3, #0]
 8016174:	2300      	movs	r3, #0
 8016176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016178:	683b      	ldr	r3, [r7, #0]
 801617a:	f383 8811 	msr	BASEPRI, r3
}
 801617e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016180:	bf00      	nop
 8016182:	3708      	adds	r7, #8
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}
 8016188:	e000ed04 	.word	0xe000ed04

0801618c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801618c:	b480      	push	{r7}
 801618e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016190:	4b0b      	ldr	r3, [pc, #44]	; (80161c0 <vPortSetupTimerInterrupt+0x34>)
 8016192:	2200      	movs	r2, #0
 8016194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016196:	4b0b      	ldr	r3, [pc, #44]	; (80161c4 <vPortSetupTimerInterrupt+0x38>)
 8016198:	2200      	movs	r2, #0
 801619a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801619c:	4b0a      	ldr	r3, [pc, #40]	; (80161c8 <vPortSetupTimerInterrupt+0x3c>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	4a0a      	ldr	r2, [pc, #40]	; (80161cc <vPortSetupTimerInterrupt+0x40>)
 80161a2:	fba2 2303 	umull	r2, r3, r2, r3
 80161a6:	099b      	lsrs	r3, r3, #6
 80161a8:	4a09      	ldr	r2, [pc, #36]	; (80161d0 <vPortSetupTimerInterrupt+0x44>)
 80161aa:	3b01      	subs	r3, #1
 80161ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80161ae:	4b04      	ldr	r3, [pc, #16]	; (80161c0 <vPortSetupTimerInterrupt+0x34>)
 80161b0:	2207      	movs	r2, #7
 80161b2:	601a      	str	r2, [r3, #0]
}
 80161b4:	bf00      	nop
 80161b6:	46bd      	mov	sp, r7
 80161b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161bc:	4770      	bx	lr
 80161be:	bf00      	nop
 80161c0:	e000e010 	.word	0xe000e010
 80161c4:	e000e018 	.word	0xe000e018
 80161c8:	2000000c 	.word	0x2000000c
 80161cc:	10624dd3 	.word	0x10624dd3
 80161d0:	e000e014 	.word	0xe000e014

080161d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80161d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80161e4 <vPortEnableVFP+0x10>
 80161d8:	6801      	ldr	r1, [r0, #0]
 80161da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80161de:	6001      	str	r1, [r0, #0]
 80161e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80161e2:	bf00      	nop
 80161e4:	e000ed88 	.word	0xe000ed88

080161e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80161e8:	b480      	push	{r7}
 80161ea:	b085      	sub	sp, #20
 80161ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80161ee:	f3ef 8305 	mrs	r3, IPSR
 80161f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	2b0f      	cmp	r3, #15
 80161f8:	d914      	bls.n	8016224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80161fa:	4a17      	ldr	r2, [pc, #92]	; (8016258 <vPortValidateInterruptPriority+0x70>)
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	4413      	add	r3, r2
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016204:	4b15      	ldr	r3, [pc, #84]	; (801625c <vPortValidateInterruptPriority+0x74>)
 8016206:	781b      	ldrb	r3, [r3, #0]
 8016208:	7afa      	ldrb	r2, [r7, #11]
 801620a:	429a      	cmp	r2, r3
 801620c:	d20a      	bcs.n	8016224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016212:	f383 8811 	msr	BASEPRI, r3
 8016216:	f3bf 8f6f 	isb	sy
 801621a:	f3bf 8f4f 	dsb	sy
 801621e:	607b      	str	r3, [r7, #4]
}
 8016220:	bf00      	nop
 8016222:	e7fe      	b.n	8016222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016224:	4b0e      	ldr	r3, [pc, #56]	; (8016260 <vPortValidateInterruptPriority+0x78>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801622c:	4b0d      	ldr	r3, [pc, #52]	; (8016264 <vPortValidateInterruptPriority+0x7c>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	429a      	cmp	r2, r3
 8016232:	d90a      	bls.n	801624a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016238:	f383 8811 	msr	BASEPRI, r3
 801623c:	f3bf 8f6f 	isb	sy
 8016240:	f3bf 8f4f 	dsb	sy
 8016244:	603b      	str	r3, [r7, #0]
}
 8016246:	bf00      	nop
 8016248:	e7fe      	b.n	8016248 <vPortValidateInterruptPriority+0x60>
	}
 801624a:	bf00      	nop
 801624c:	3714      	adds	r7, #20
 801624e:	46bd      	mov	sp, r7
 8016250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016254:	4770      	bx	lr
 8016256:	bf00      	nop
 8016258:	e000e3f0 	.word	0xe000e3f0
 801625c:	20003234 	.word	0x20003234
 8016260:	e000ed0c 	.word	0xe000ed0c
 8016264:	20003238 	.word	0x20003238

08016268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b08a      	sub	sp, #40	; 0x28
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016270:	2300      	movs	r3, #0
 8016272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016274:	f7fe fc98 	bl	8014ba8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016278:	4b58      	ldr	r3, [pc, #352]	; (80163dc <pvPortMalloc+0x174>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d101      	bne.n	8016284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016280:	f000 f910 	bl	80164a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016284:	4b56      	ldr	r3, [pc, #344]	; (80163e0 <pvPortMalloc+0x178>)
 8016286:	681a      	ldr	r2, [r3, #0]
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	4013      	ands	r3, r2
 801628c:	2b00      	cmp	r3, #0
 801628e:	f040 808e 	bne.w	80163ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d01d      	beq.n	80162d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016298:	2208      	movs	r2, #8
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	4413      	add	r3, r2
 801629e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	f003 0307 	and.w	r3, r3, #7
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d014      	beq.n	80162d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	f023 0307 	bic.w	r3, r3, #7
 80162b0:	3308      	adds	r3, #8
 80162b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f003 0307 	and.w	r3, r3, #7
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d00a      	beq.n	80162d4 <pvPortMalloc+0x6c>
	__asm volatile
 80162be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162c2:	f383 8811 	msr	BASEPRI, r3
 80162c6:	f3bf 8f6f 	isb	sy
 80162ca:	f3bf 8f4f 	dsb	sy
 80162ce:	617b      	str	r3, [r7, #20]
}
 80162d0:	bf00      	nop
 80162d2:	e7fe      	b.n	80162d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d069      	beq.n	80163ae <pvPortMalloc+0x146>
 80162da:	4b42      	ldr	r3, [pc, #264]	; (80163e4 <pvPortMalloc+0x17c>)
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	687a      	ldr	r2, [r7, #4]
 80162e0:	429a      	cmp	r2, r3
 80162e2:	d864      	bhi.n	80163ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80162e4:	4b40      	ldr	r3, [pc, #256]	; (80163e8 <pvPortMalloc+0x180>)
 80162e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80162e8:	4b3f      	ldr	r3, [pc, #252]	; (80163e8 <pvPortMalloc+0x180>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80162ee:	e004      	b.n	80162fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80162f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80162f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80162fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fc:	685b      	ldr	r3, [r3, #4]
 80162fe:	687a      	ldr	r2, [r7, #4]
 8016300:	429a      	cmp	r2, r3
 8016302:	d903      	bls.n	801630c <pvPortMalloc+0xa4>
 8016304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d1f1      	bne.n	80162f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801630c:	4b33      	ldr	r3, [pc, #204]	; (80163dc <pvPortMalloc+0x174>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016312:	429a      	cmp	r2, r3
 8016314:	d04b      	beq.n	80163ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016316:	6a3b      	ldr	r3, [r7, #32]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	2208      	movs	r2, #8
 801631c:	4413      	add	r3, r2
 801631e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016322:	681a      	ldr	r2, [r3, #0]
 8016324:	6a3b      	ldr	r3, [r7, #32]
 8016326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801632a:	685a      	ldr	r2, [r3, #4]
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	1ad2      	subs	r2, r2, r3
 8016330:	2308      	movs	r3, #8
 8016332:	005b      	lsls	r3, r3, #1
 8016334:	429a      	cmp	r2, r3
 8016336:	d91f      	bls.n	8016378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	4413      	add	r3, r2
 801633e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016340:	69bb      	ldr	r3, [r7, #24]
 8016342:	f003 0307 	and.w	r3, r3, #7
 8016346:	2b00      	cmp	r3, #0
 8016348:	d00a      	beq.n	8016360 <pvPortMalloc+0xf8>
	__asm volatile
 801634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801634e:	f383 8811 	msr	BASEPRI, r3
 8016352:	f3bf 8f6f 	isb	sy
 8016356:	f3bf 8f4f 	dsb	sy
 801635a:	613b      	str	r3, [r7, #16]
}
 801635c:	bf00      	nop
 801635e:	e7fe      	b.n	801635e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016362:	685a      	ldr	r2, [r3, #4]
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	1ad2      	subs	r2, r2, r3
 8016368:	69bb      	ldr	r3, [r7, #24]
 801636a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801636e:	687a      	ldr	r2, [r7, #4]
 8016370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016372:	69b8      	ldr	r0, [r7, #24]
 8016374:	f000 f8f8 	bl	8016568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016378:	4b1a      	ldr	r3, [pc, #104]	; (80163e4 <pvPortMalloc+0x17c>)
 801637a:	681a      	ldr	r2, [r3, #0]
 801637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637e:	685b      	ldr	r3, [r3, #4]
 8016380:	1ad3      	subs	r3, r2, r3
 8016382:	4a18      	ldr	r2, [pc, #96]	; (80163e4 <pvPortMalloc+0x17c>)
 8016384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016386:	4b17      	ldr	r3, [pc, #92]	; (80163e4 <pvPortMalloc+0x17c>)
 8016388:	681a      	ldr	r2, [r3, #0]
 801638a:	4b18      	ldr	r3, [pc, #96]	; (80163ec <pvPortMalloc+0x184>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	429a      	cmp	r2, r3
 8016390:	d203      	bcs.n	801639a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016392:	4b14      	ldr	r3, [pc, #80]	; (80163e4 <pvPortMalloc+0x17c>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	4a15      	ldr	r2, [pc, #84]	; (80163ec <pvPortMalloc+0x184>)
 8016398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801639c:	685a      	ldr	r2, [r3, #4]
 801639e:	4b10      	ldr	r3, [pc, #64]	; (80163e0 <pvPortMalloc+0x178>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	431a      	orrs	r2, r3
 80163a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80163a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163aa:	2200      	movs	r2, #0
 80163ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80163ae:	f7fe fc09 	bl	8014bc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80163b2:	69fb      	ldr	r3, [r7, #28]
 80163b4:	f003 0307 	and.w	r3, r3, #7
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d00a      	beq.n	80163d2 <pvPortMalloc+0x16a>
	__asm volatile
 80163bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163c0:	f383 8811 	msr	BASEPRI, r3
 80163c4:	f3bf 8f6f 	isb	sy
 80163c8:	f3bf 8f4f 	dsb	sy
 80163cc:	60fb      	str	r3, [r7, #12]
}
 80163ce:	bf00      	nop
 80163d0:	e7fe      	b.n	80163d0 <pvPortMalloc+0x168>
	return pvReturn;
 80163d2:	69fb      	ldr	r3, [r7, #28]
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	3728      	adds	r7, #40	; 0x28
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}
 80163dc:	20006e44 	.word	0x20006e44
 80163e0:	20006e50 	.word	0x20006e50
 80163e4:	20006e48 	.word	0x20006e48
 80163e8:	20006e3c 	.word	0x20006e3c
 80163ec:	20006e4c 	.word	0x20006e4c

080163f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b086      	sub	sp, #24
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d048      	beq.n	8016494 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016402:	2308      	movs	r3, #8
 8016404:	425b      	negs	r3, r3
 8016406:	697a      	ldr	r2, [r7, #20]
 8016408:	4413      	add	r3, r2
 801640a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801640c:	697b      	ldr	r3, [r7, #20]
 801640e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016410:	693b      	ldr	r3, [r7, #16]
 8016412:	685a      	ldr	r2, [r3, #4]
 8016414:	4b21      	ldr	r3, [pc, #132]	; (801649c <vPortFree+0xac>)
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	4013      	ands	r3, r2
 801641a:	2b00      	cmp	r3, #0
 801641c:	d10a      	bne.n	8016434 <vPortFree+0x44>
	__asm volatile
 801641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016422:	f383 8811 	msr	BASEPRI, r3
 8016426:	f3bf 8f6f 	isb	sy
 801642a:	f3bf 8f4f 	dsb	sy
 801642e:	60fb      	str	r3, [r7, #12]
}
 8016430:	bf00      	nop
 8016432:	e7fe      	b.n	8016432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016434:	693b      	ldr	r3, [r7, #16]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d00a      	beq.n	8016452 <vPortFree+0x62>
	__asm volatile
 801643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016440:	f383 8811 	msr	BASEPRI, r3
 8016444:	f3bf 8f6f 	isb	sy
 8016448:	f3bf 8f4f 	dsb	sy
 801644c:	60bb      	str	r3, [r7, #8]
}
 801644e:	bf00      	nop
 8016450:	e7fe      	b.n	8016450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016452:	693b      	ldr	r3, [r7, #16]
 8016454:	685a      	ldr	r2, [r3, #4]
 8016456:	4b11      	ldr	r3, [pc, #68]	; (801649c <vPortFree+0xac>)
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	4013      	ands	r3, r2
 801645c:	2b00      	cmp	r3, #0
 801645e:	d019      	beq.n	8016494 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016460:	693b      	ldr	r3, [r7, #16]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d115      	bne.n	8016494 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016468:	693b      	ldr	r3, [r7, #16]
 801646a:	685a      	ldr	r2, [r3, #4]
 801646c:	4b0b      	ldr	r3, [pc, #44]	; (801649c <vPortFree+0xac>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	43db      	mvns	r3, r3
 8016472:	401a      	ands	r2, r3
 8016474:	693b      	ldr	r3, [r7, #16]
 8016476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016478:	f7fe fb96 	bl	8014ba8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801647c:	693b      	ldr	r3, [r7, #16]
 801647e:	685a      	ldr	r2, [r3, #4]
 8016480:	4b07      	ldr	r3, [pc, #28]	; (80164a0 <vPortFree+0xb0>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	4413      	add	r3, r2
 8016486:	4a06      	ldr	r2, [pc, #24]	; (80164a0 <vPortFree+0xb0>)
 8016488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801648a:	6938      	ldr	r0, [r7, #16]
 801648c:	f000 f86c 	bl	8016568 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016490:	f7fe fb98 	bl	8014bc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016494:	bf00      	nop
 8016496:	3718      	adds	r7, #24
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}
 801649c:	20006e50 	.word	0x20006e50
 80164a0:	20006e48 	.word	0x20006e48

080164a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80164a4:	b480      	push	{r7}
 80164a6:	b085      	sub	sp, #20
 80164a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80164aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80164ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80164b0:	4b27      	ldr	r3, [pc, #156]	; (8016550 <prvHeapInit+0xac>)
 80164b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	f003 0307 	and.w	r3, r3, #7
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d00c      	beq.n	80164d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	3307      	adds	r3, #7
 80164c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	f023 0307 	bic.w	r3, r3, #7
 80164ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80164cc:	68ba      	ldr	r2, [r7, #8]
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	1ad3      	subs	r3, r2, r3
 80164d2:	4a1f      	ldr	r2, [pc, #124]	; (8016550 <prvHeapInit+0xac>)
 80164d4:	4413      	add	r3, r2
 80164d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80164dc:	4a1d      	ldr	r2, [pc, #116]	; (8016554 <prvHeapInit+0xb0>)
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80164e2:	4b1c      	ldr	r3, [pc, #112]	; (8016554 <prvHeapInit+0xb0>)
 80164e4:	2200      	movs	r2, #0
 80164e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	68ba      	ldr	r2, [r7, #8]
 80164ec:	4413      	add	r3, r2
 80164ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80164f0:	2208      	movs	r2, #8
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	1a9b      	subs	r3, r3, r2
 80164f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	f023 0307 	bic.w	r3, r3, #7
 80164fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	4a15      	ldr	r2, [pc, #84]	; (8016558 <prvHeapInit+0xb4>)
 8016504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016506:	4b14      	ldr	r3, [pc, #80]	; (8016558 <prvHeapInit+0xb4>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	2200      	movs	r2, #0
 801650c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801650e:	4b12      	ldr	r3, [pc, #72]	; (8016558 <prvHeapInit+0xb4>)
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	2200      	movs	r2, #0
 8016514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	68fa      	ldr	r2, [r7, #12]
 801651e:	1ad2      	subs	r2, r2, r3
 8016520:	683b      	ldr	r3, [r7, #0]
 8016522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016524:	4b0c      	ldr	r3, [pc, #48]	; (8016558 <prvHeapInit+0xb4>)
 8016526:	681a      	ldr	r2, [r3, #0]
 8016528:	683b      	ldr	r3, [r7, #0]
 801652a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	685b      	ldr	r3, [r3, #4]
 8016530:	4a0a      	ldr	r2, [pc, #40]	; (801655c <prvHeapInit+0xb8>)
 8016532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016534:	683b      	ldr	r3, [r7, #0]
 8016536:	685b      	ldr	r3, [r3, #4]
 8016538:	4a09      	ldr	r2, [pc, #36]	; (8016560 <prvHeapInit+0xbc>)
 801653a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801653c:	4b09      	ldr	r3, [pc, #36]	; (8016564 <prvHeapInit+0xc0>)
 801653e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016542:	601a      	str	r2, [r3, #0]
}
 8016544:	bf00      	nop
 8016546:	3714      	adds	r7, #20
 8016548:	46bd      	mov	sp, r7
 801654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654e:	4770      	bx	lr
 8016550:	2000323c 	.word	0x2000323c
 8016554:	20006e3c 	.word	0x20006e3c
 8016558:	20006e44 	.word	0x20006e44
 801655c:	20006e4c 	.word	0x20006e4c
 8016560:	20006e48 	.word	0x20006e48
 8016564:	20006e50 	.word	0x20006e50

08016568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016568:	b480      	push	{r7}
 801656a:	b085      	sub	sp, #20
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016570:	4b28      	ldr	r3, [pc, #160]	; (8016614 <prvInsertBlockIntoFreeList+0xac>)
 8016572:	60fb      	str	r3, [r7, #12]
 8016574:	e002      	b.n	801657c <prvInsertBlockIntoFreeList+0x14>
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	60fb      	str	r3, [r7, #12]
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	687a      	ldr	r2, [r7, #4]
 8016582:	429a      	cmp	r2, r3
 8016584:	d8f7      	bhi.n	8016576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	68ba      	ldr	r2, [r7, #8]
 8016590:	4413      	add	r3, r2
 8016592:	687a      	ldr	r2, [r7, #4]
 8016594:	429a      	cmp	r2, r3
 8016596:	d108      	bne.n	80165aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	685a      	ldr	r2, [r3, #4]
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	685b      	ldr	r3, [r3, #4]
 80165a0:	441a      	add	r2, r3
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	685b      	ldr	r3, [r3, #4]
 80165b2:	68ba      	ldr	r2, [r7, #8]
 80165b4:	441a      	add	r2, r3
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	429a      	cmp	r2, r3
 80165bc:	d118      	bne.n	80165f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	681a      	ldr	r2, [r3, #0]
 80165c2:	4b15      	ldr	r3, [pc, #84]	; (8016618 <prvInsertBlockIntoFreeList+0xb0>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	429a      	cmp	r2, r3
 80165c8:	d00d      	beq.n	80165e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	685a      	ldr	r2, [r3, #4]
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	685b      	ldr	r3, [r3, #4]
 80165d4:	441a      	add	r2, r3
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	681a      	ldr	r2, [r3, #0]
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	601a      	str	r2, [r3, #0]
 80165e4:	e008      	b.n	80165f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80165e6:	4b0c      	ldr	r3, [pc, #48]	; (8016618 <prvInsertBlockIntoFreeList+0xb0>)
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	601a      	str	r2, [r3, #0]
 80165ee:	e003      	b.n	80165f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	681a      	ldr	r2, [r3, #0]
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80165f8:	68fa      	ldr	r2, [r7, #12]
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	429a      	cmp	r2, r3
 80165fe:	d002      	beq.n	8016606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	687a      	ldr	r2, [r7, #4]
 8016604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016606:	bf00      	nop
 8016608:	3714      	adds	r7, #20
 801660a:	46bd      	mov	sp, r7
 801660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016610:	4770      	bx	lr
 8016612:	bf00      	nop
 8016614:	20006e3c 	.word	0x20006e3c
 8016618:	20006e44 	.word	0x20006e44

0801661c <findslot>:
 801661c:	4b0a      	ldr	r3, [pc, #40]	; (8016648 <findslot+0x2c>)
 801661e:	b510      	push	{r4, lr}
 8016620:	4604      	mov	r4, r0
 8016622:	6818      	ldr	r0, [r3, #0]
 8016624:	b118      	cbz	r0, 801662e <findslot+0x12>
 8016626:	6983      	ldr	r3, [r0, #24]
 8016628:	b90b      	cbnz	r3, 801662e <findslot+0x12>
 801662a:	f000 fb7b 	bl	8016d24 <__sinit>
 801662e:	2c13      	cmp	r4, #19
 8016630:	d807      	bhi.n	8016642 <findslot+0x26>
 8016632:	4806      	ldr	r0, [pc, #24]	; (801664c <findslot+0x30>)
 8016634:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8016638:	3201      	adds	r2, #1
 801663a:	d002      	beq.n	8016642 <findslot+0x26>
 801663c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8016640:	bd10      	pop	{r4, pc}
 8016642:	2000      	movs	r0, #0
 8016644:	e7fc      	b.n	8016640 <findslot+0x24>
 8016646:	bf00      	nop
 8016648:	200005bc 	.word	0x200005bc
 801664c:	20006e60 	.word	0x20006e60

08016650 <error>:
 8016650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016652:	4604      	mov	r4, r0
 8016654:	f000 fb08 	bl	8016c68 <__errno>
 8016658:	2613      	movs	r6, #19
 801665a:	4605      	mov	r5, r0
 801665c:	2700      	movs	r7, #0
 801665e:	4630      	mov	r0, r6
 8016660:	4639      	mov	r1, r7
 8016662:	beab      	bkpt	0x00ab
 8016664:	4606      	mov	r6, r0
 8016666:	602e      	str	r6, [r5, #0]
 8016668:	4620      	mov	r0, r4
 801666a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801666c <checkerror>:
 801666c:	1c43      	adds	r3, r0, #1
 801666e:	d101      	bne.n	8016674 <checkerror+0x8>
 8016670:	f7ff bfee 	b.w	8016650 <error>
 8016674:	4770      	bx	lr

08016676 <_swiread>:
 8016676:	b530      	push	{r4, r5, lr}
 8016678:	b085      	sub	sp, #20
 801667a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801667e:	9203      	str	r2, [sp, #12]
 8016680:	2406      	movs	r4, #6
 8016682:	ad01      	add	r5, sp, #4
 8016684:	4620      	mov	r0, r4
 8016686:	4629      	mov	r1, r5
 8016688:	beab      	bkpt	0x00ab
 801668a:	4604      	mov	r4, r0
 801668c:	4620      	mov	r0, r4
 801668e:	f7ff ffed 	bl	801666c <checkerror>
 8016692:	b005      	add	sp, #20
 8016694:	bd30      	pop	{r4, r5, pc}

08016696 <_read>:
 8016696:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016698:	4615      	mov	r5, r2
 801669a:	9101      	str	r1, [sp, #4]
 801669c:	f7ff ffbe 	bl	801661c <findslot>
 80166a0:	9901      	ldr	r1, [sp, #4]
 80166a2:	4604      	mov	r4, r0
 80166a4:	b938      	cbnz	r0, 80166b6 <_read+0x20>
 80166a6:	f000 fadf 	bl	8016c68 <__errno>
 80166aa:	2309      	movs	r3, #9
 80166ac:	6003      	str	r3, [r0, #0]
 80166ae:	f04f 30ff 	mov.w	r0, #4294967295
 80166b2:	b003      	add	sp, #12
 80166b4:	bd30      	pop	{r4, r5, pc}
 80166b6:	6800      	ldr	r0, [r0, #0]
 80166b8:	462a      	mov	r2, r5
 80166ba:	f7ff ffdc 	bl	8016676 <_swiread>
 80166be:	1c43      	adds	r3, r0, #1
 80166c0:	d0f7      	beq.n	80166b2 <_read+0x1c>
 80166c2:	6863      	ldr	r3, [r4, #4]
 80166c4:	1a2a      	subs	r2, r5, r0
 80166c6:	4413      	add	r3, r2
 80166c8:	6063      	str	r3, [r4, #4]
 80166ca:	4610      	mov	r0, r2
 80166cc:	e7f1      	b.n	80166b2 <_read+0x1c>

080166ce <_swilseek>:
 80166ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166d0:	460c      	mov	r4, r1
 80166d2:	4616      	mov	r6, r2
 80166d4:	f7ff ffa2 	bl	801661c <findslot>
 80166d8:	4605      	mov	r5, r0
 80166da:	b940      	cbnz	r0, 80166ee <_swilseek+0x20>
 80166dc:	f000 fac4 	bl	8016c68 <__errno>
 80166e0:	2309      	movs	r3, #9
 80166e2:	6003      	str	r3, [r0, #0]
 80166e4:	f04f 34ff 	mov.w	r4, #4294967295
 80166e8:	4620      	mov	r0, r4
 80166ea:	b003      	add	sp, #12
 80166ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166ee:	2e02      	cmp	r6, #2
 80166f0:	d903      	bls.n	80166fa <_swilseek+0x2c>
 80166f2:	f000 fab9 	bl	8016c68 <__errno>
 80166f6:	2316      	movs	r3, #22
 80166f8:	e7f3      	b.n	80166e2 <_swilseek+0x14>
 80166fa:	2e01      	cmp	r6, #1
 80166fc:	d112      	bne.n	8016724 <_swilseek+0x56>
 80166fe:	6843      	ldr	r3, [r0, #4]
 8016700:	18e4      	adds	r4, r4, r3
 8016702:	d4f6      	bmi.n	80166f2 <_swilseek+0x24>
 8016704:	682b      	ldr	r3, [r5, #0]
 8016706:	260a      	movs	r6, #10
 8016708:	e9cd 3400 	strd	r3, r4, [sp]
 801670c:	466f      	mov	r7, sp
 801670e:	4630      	mov	r0, r6
 8016710:	4639      	mov	r1, r7
 8016712:	beab      	bkpt	0x00ab
 8016714:	4606      	mov	r6, r0
 8016716:	4630      	mov	r0, r6
 8016718:	f7ff ffa8 	bl	801666c <checkerror>
 801671c:	2800      	cmp	r0, #0
 801671e:	dbe1      	blt.n	80166e4 <_swilseek+0x16>
 8016720:	606c      	str	r4, [r5, #4]
 8016722:	e7e1      	b.n	80166e8 <_swilseek+0x1a>
 8016724:	2e02      	cmp	r6, #2
 8016726:	d1ed      	bne.n	8016704 <_swilseek+0x36>
 8016728:	6803      	ldr	r3, [r0, #0]
 801672a:	9300      	str	r3, [sp, #0]
 801672c:	260c      	movs	r6, #12
 801672e:	466f      	mov	r7, sp
 8016730:	4630      	mov	r0, r6
 8016732:	4639      	mov	r1, r7
 8016734:	beab      	bkpt	0x00ab
 8016736:	4606      	mov	r6, r0
 8016738:	4630      	mov	r0, r6
 801673a:	f7ff ff97 	bl	801666c <checkerror>
 801673e:	1c43      	adds	r3, r0, #1
 8016740:	d0d0      	beq.n	80166e4 <_swilseek+0x16>
 8016742:	4404      	add	r4, r0
 8016744:	e7de      	b.n	8016704 <_swilseek+0x36>

08016746 <_lseek>:
 8016746:	f7ff bfc2 	b.w	80166ce <_swilseek>

0801674a <_swiwrite>:
 801674a:	b530      	push	{r4, r5, lr}
 801674c:	b085      	sub	sp, #20
 801674e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8016752:	9203      	str	r2, [sp, #12]
 8016754:	2405      	movs	r4, #5
 8016756:	ad01      	add	r5, sp, #4
 8016758:	4620      	mov	r0, r4
 801675a:	4629      	mov	r1, r5
 801675c:	beab      	bkpt	0x00ab
 801675e:	4604      	mov	r4, r0
 8016760:	4620      	mov	r0, r4
 8016762:	f7ff ff83 	bl	801666c <checkerror>
 8016766:	b005      	add	sp, #20
 8016768:	bd30      	pop	{r4, r5, pc}

0801676a <_write>:
 801676a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801676c:	4615      	mov	r5, r2
 801676e:	9101      	str	r1, [sp, #4]
 8016770:	f7ff ff54 	bl	801661c <findslot>
 8016774:	9901      	ldr	r1, [sp, #4]
 8016776:	4604      	mov	r4, r0
 8016778:	b930      	cbnz	r0, 8016788 <_write+0x1e>
 801677a:	f000 fa75 	bl	8016c68 <__errno>
 801677e:	2309      	movs	r3, #9
 8016780:	6003      	str	r3, [r0, #0]
 8016782:	f04f 30ff 	mov.w	r0, #4294967295
 8016786:	e012      	b.n	80167ae <_write+0x44>
 8016788:	6800      	ldr	r0, [r0, #0]
 801678a:	462a      	mov	r2, r5
 801678c:	f7ff ffdd 	bl	801674a <_swiwrite>
 8016790:	2800      	cmp	r0, #0
 8016792:	dbf6      	blt.n	8016782 <_write+0x18>
 8016794:	6862      	ldr	r2, [r4, #4]
 8016796:	1a2b      	subs	r3, r5, r0
 8016798:	441a      	add	r2, r3
 801679a:	42a8      	cmp	r0, r5
 801679c:	6062      	str	r2, [r4, #4]
 801679e:	d105      	bne.n	80167ac <_write+0x42>
 80167a0:	2000      	movs	r0, #0
 80167a2:	b003      	add	sp, #12
 80167a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167a8:	f7ff bf52 	b.w	8016650 <error>
 80167ac:	4618      	mov	r0, r3
 80167ae:	b003      	add	sp, #12
 80167b0:	bd30      	pop	{r4, r5, pc}

080167b2 <_swiclose>:
 80167b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80167b4:	2402      	movs	r4, #2
 80167b6:	9001      	str	r0, [sp, #4]
 80167b8:	ad01      	add	r5, sp, #4
 80167ba:	4620      	mov	r0, r4
 80167bc:	4629      	mov	r1, r5
 80167be:	beab      	bkpt	0x00ab
 80167c0:	4604      	mov	r4, r0
 80167c2:	4620      	mov	r0, r4
 80167c4:	f7ff ff52 	bl	801666c <checkerror>
 80167c8:	b003      	add	sp, #12
 80167ca:	bd30      	pop	{r4, r5, pc}

080167cc <_close>:
 80167cc:	b538      	push	{r3, r4, r5, lr}
 80167ce:	4605      	mov	r5, r0
 80167d0:	f7ff ff24 	bl	801661c <findslot>
 80167d4:	4604      	mov	r4, r0
 80167d6:	b930      	cbnz	r0, 80167e6 <_close+0x1a>
 80167d8:	f000 fa46 	bl	8016c68 <__errno>
 80167dc:	2309      	movs	r3, #9
 80167de:	6003      	str	r3, [r0, #0]
 80167e0:	f04f 30ff 	mov.w	r0, #4294967295
 80167e4:	bd38      	pop	{r3, r4, r5, pc}
 80167e6:	3d01      	subs	r5, #1
 80167e8:	2d01      	cmp	r5, #1
 80167ea:	d809      	bhi.n	8016800 <_close+0x34>
 80167ec:	4b09      	ldr	r3, [pc, #36]	; (8016814 <_close+0x48>)
 80167ee:	689a      	ldr	r2, [r3, #8]
 80167f0:	691b      	ldr	r3, [r3, #16]
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d104      	bne.n	8016800 <_close+0x34>
 80167f6:	f04f 33ff 	mov.w	r3, #4294967295
 80167fa:	6003      	str	r3, [r0, #0]
 80167fc:	2000      	movs	r0, #0
 80167fe:	e7f1      	b.n	80167e4 <_close+0x18>
 8016800:	6820      	ldr	r0, [r4, #0]
 8016802:	f7ff ffd6 	bl	80167b2 <_swiclose>
 8016806:	2800      	cmp	r0, #0
 8016808:	d1ec      	bne.n	80167e4 <_close+0x18>
 801680a:	f04f 33ff 	mov.w	r3, #4294967295
 801680e:	6023      	str	r3, [r4, #0]
 8016810:	e7e8      	b.n	80167e4 <_close+0x18>
 8016812:	bf00      	nop
 8016814:	20006e60 	.word	0x20006e60

08016818 <_getpid>:
 8016818:	2001      	movs	r0, #1
 801681a:	4770      	bx	lr

0801681c <_swistat>:
 801681c:	b570      	push	{r4, r5, r6, lr}
 801681e:	460c      	mov	r4, r1
 8016820:	f7ff fefc 	bl	801661c <findslot>
 8016824:	4605      	mov	r5, r0
 8016826:	b930      	cbnz	r0, 8016836 <_swistat+0x1a>
 8016828:	f000 fa1e 	bl	8016c68 <__errno>
 801682c:	2309      	movs	r3, #9
 801682e:	6003      	str	r3, [r0, #0]
 8016830:	f04f 30ff 	mov.w	r0, #4294967295
 8016834:	bd70      	pop	{r4, r5, r6, pc}
 8016836:	6863      	ldr	r3, [r4, #4]
 8016838:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801683c:	6063      	str	r3, [r4, #4]
 801683e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016842:	64a3      	str	r3, [r4, #72]	; 0x48
 8016844:	260c      	movs	r6, #12
 8016846:	4630      	mov	r0, r6
 8016848:	4629      	mov	r1, r5
 801684a:	beab      	bkpt	0x00ab
 801684c:	4605      	mov	r5, r0
 801684e:	4628      	mov	r0, r5
 8016850:	f7ff ff0c 	bl	801666c <checkerror>
 8016854:	1c43      	adds	r3, r0, #1
 8016856:	bf1c      	itt	ne
 8016858:	6120      	strne	r0, [r4, #16]
 801685a:	2000      	movne	r0, #0
 801685c:	e7ea      	b.n	8016834 <_swistat+0x18>

0801685e <_fstat>:
 801685e:	460b      	mov	r3, r1
 8016860:	b510      	push	{r4, lr}
 8016862:	2100      	movs	r1, #0
 8016864:	4604      	mov	r4, r0
 8016866:	2258      	movs	r2, #88	; 0x58
 8016868:	4618      	mov	r0, r3
 801686a:	f000 fb37 	bl	8016edc <memset>
 801686e:	4601      	mov	r1, r0
 8016870:	4620      	mov	r0, r4
 8016872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016876:	f7ff bfd1 	b.w	801681c <_swistat>

0801687a <_stat>:
 801687a:	b538      	push	{r3, r4, r5, lr}
 801687c:	460d      	mov	r5, r1
 801687e:	4604      	mov	r4, r0
 8016880:	2258      	movs	r2, #88	; 0x58
 8016882:	2100      	movs	r1, #0
 8016884:	4628      	mov	r0, r5
 8016886:	f000 fb29 	bl	8016edc <memset>
 801688a:	4620      	mov	r0, r4
 801688c:	2100      	movs	r1, #0
 801688e:	f000 f811 	bl	80168b4 <_swiopen>
 8016892:	1c43      	adds	r3, r0, #1
 8016894:	4604      	mov	r4, r0
 8016896:	d00b      	beq.n	80168b0 <_stat+0x36>
 8016898:	686b      	ldr	r3, [r5, #4]
 801689a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801689e:	606b      	str	r3, [r5, #4]
 80168a0:	4629      	mov	r1, r5
 80168a2:	f7ff ffbb 	bl	801681c <_swistat>
 80168a6:	4605      	mov	r5, r0
 80168a8:	4620      	mov	r0, r4
 80168aa:	f7ff ff8f 	bl	80167cc <_close>
 80168ae:	462c      	mov	r4, r5
 80168b0:	4620      	mov	r0, r4
 80168b2:	bd38      	pop	{r3, r4, r5, pc}

080168b4 <_swiopen>:
 80168b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168b8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8016964 <_swiopen+0xb0>
 80168bc:	b097      	sub	sp, #92	; 0x5c
 80168be:	4607      	mov	r7, r0
 80168c0:	460e      	mov	r6, r1
 80168c2:	2500      	movs	r5, #0
 80168c4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80168c8:	1c61      	adds	r1, r4, #1
 80168ca:	d037      	beq.n	801693c <_swiopen+0x88>
 80168cc:	3501      	adds	r5, #1
 80168ce:	2d14      	cmp	r5, #20
 80168d0:	d1f8      	bne.n	80168c4 <_swiopen+0x10>
 80168d2:	f000 f9c9 	bl	8016c68 <__errno>
 80168d6:	2318      	movs	r3, #24
 80168d8:	6003      	str	r3, [r0, #0]
 80168da:	f04f 34ff 	mov.w	r4, #4294967295
 80168de:	e03d      	b.n	801695c <_swiopen+0xa8>
 80168e0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80168e4:	f240 6301 	movw	r3, #1537	; 0x601
 80168e8:	07b2      	lsls	r2, r6, #30
 80168ea:	bf48      	it	mi
 80168ec:	f044 0402 	orrmi.w	r4, r4, #2
 80168f0:	421e      	tst	r6, r3
 80168f2:	bf18      	it	ne
 80168f4:	f044 0404 	orrne.w	r4, r4, #4
 80168f8:	0733      	lsls	r3, r6, #28
 80168fa:	bf48      	it	mi
 80168fc:	f024 0404 	bicmi.w	r4, r4, #4
 8016900:	4638      	mov	r0, r7
 8016902:	bf48      	it	mi
 8016904:	f044 0408 	orrmi.w	r4, r4, #8
 8016908:	9700      	str	r7, [sp, #0]
 801690a:	f7e9 fc61 	bl	80001d0 <strlen>
 801690e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8016912:	2401      	movs	r4, #1
 8016914:	4620      	mov	r0, r4
 8016916:	4649      	mov	r1, r9
 8016918:	beab      	bkpt	0x00ab
 801691a:	4604      	mov	r4, r0
 801691c:	2c00      	cmp	r4, #0
 801691e:	db08      	blt.n	8016932 <_swiopen+0x7e>
 8016920:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8016924:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8016928:	2300      	movs	r3, #0
 801692a:	f8c8 3004 	str.w	r3, [r8, #4]
 801692e:	462c      	mov	r4, r5
 8016930:	e014      	b.n	801695c <_swiopen+0xa8>
 8016932:	4620      	mov	r0, r4
 8016934:	f7ff fe8c 	bl	8016650 <error>
 8016938:	4604      	mov	r4, r0
 801693a:	e00f      	b.n	801695c <_swiopen+0xa8>
 801693c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8016940:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8016944:	46e9      	mov	r9, sp
 8016946:	d1cb      	bne.n	80168e0 <_swiopen+0x2c>
 8016948:	4649      	mov	r1, r9
 801694a:	4638      	mov	r0, r7
 801694c:	f7ff ff95 	bl	801687a <_stat>
 8016950:	3001      	adds	r0, #1
 8016952:	d0c5      	beq.n	80168e0 <_swiopen+0x2c>
 8016954:	f000 f988 	bl	8016c68 <__errno>
 8016958:	2311      	movs	r3, #17
 801695a:	6003      	str	r3, [r0, #0]
 801695c:	4620      	mov	r0, r4
 801695e:	b017      	add	sp, #92	; 0x5c
 8016960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016964:	20006e60 	.word	0x20006e60

08016968 <_get_semihosting_exts>:
 8016968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801696c:	4606      	mov	r6, r0
 801696e:	460f      	mov	r7, r1
 8016970:	482a      	ldr	r0, [pc, #168]	; (8016a1c <_get_semihosting_exts+0xb4>)
 8016972:	2100      	movs	r1, #0
 8016974:	4615      	mov	r5, r2
 8016976:	f7ff ff9d 	bl	80168b4 <_swiopen>
 801697a:	462a      	mov	r2, r5
 801697c:	4604      	mov	r4, r0
 801697e:	2100      	movs	r1, #0
 8016980:	4630      	mov	r0, r6
 8016982:	f000 faab 	bl	8016edc <memset>
 8016986:	1c63      	adds	r3, r4, #1
 8016988:	d016      	beq.n	80169b8 <_get_semihosting_exts+0x50>
 801698a:	4620      	mov	r0, r4
 801698c:	f7ff fe46 	bl	801661c <findslot>
 8016990:	f04f 090c 	mov.w	r9, #12
 8016994:	4680      	mov	r8, r0
 8016996:	4648      	mov	r0, r9
 8016998:	4641      	mov	r1, r8
 801699a:	beab      	bkpt	0x00ab
 801699c:	4680      	mov	r8, r0
 801699e:	4640      	mov	r0, r8
 80169a0:	f7ff fe64 	bl	801666c <checkerror>
 80169a4:	2803      	cmp	r0, #3
 80169a6:	dd02      	ble.n	80169ae <_get_semihosting_exts+0x46>
 80169a8:	1ec3      	subs	r3, r0, #3
 80169aa:	42ab      	cmp	r3, r5
 80169ac:	dc08      	bgt.n	80169c0 <_get_semihosting_exts+0x58>
 80169ae:	4620      	mov	r0, r4
 80169b0:	f7ff ff0c 	bl	80167cc <_close>
 80169b4:	f04f 34ff 	mov.w	r4, #4294967295
 80169b8:	4620      	mov	r0, r4
 80169ba:	b003      	add	sp, #12
 80169bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169c0:	2204      	movs	r2, #4
 80169c2:	eb0d 0102 	add.w	r1, sp, r2
 80169c6:	4620      	mov	r0, r4
 80169c8:	f7ff fe65 	bl	8016696 <_read>
 80169cc:	2803      	cmp	r0, #3
 80169ce:	ddee      	ble.n	80169ae <_get_semihosting_exts+0x46>
 80169d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80169d4:	2b53      	cmp	r3, #83	; 0x53
 80169d6:	d1ea      	bne.n	80169ae <_get_semihosting_exts+0x46>
 80169d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80169dc:	2b48      	cmp	r3, #72	; 0x48
 80169de:	d1e6      	bne.n	80169ae <_get_semihosting_exts+0x46>
 80169e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80169e4:	2b46      	cmp	r3, #70	; 0x46
 80169e6:	d1e2      	bne.n	80169ae <_get_semihosting_exts+0x46>
 80169e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80169ec:	2b42      	cmp	r3, #66	; 0x42
 80169ee:	d1de      	bne.n	80169ae <_get_semihosting_exts+0x46>
 80169f0:	2201      	movs	r2, #1
 80169f2:	4639      	mov	r1, r7
 80169f4:	4620      	mov	r0, r4
 80169f6:	f7ff fe6a 	bl	80166ce <_swilseek>
 80169fa:	2800      	cmp	r0, #0
 80169fc:	dbd7      	blt.n	80169ae <_get_semihosting_exts+0x46>
 80169fe:	462a      	mov	r2, r5
 8016a00:	4631      	mov	r1, r6
 8016a02:	4620      	mov	r0, r4
 8016a04:	f7ff fe47 	bl	8016696 <_read>
 8016a08:	4605      	mov	r5, r0
 8016a0a:	4620      	mov	r0, r4
 8016a0c:	f7ff fede 	bl	80167cc <_close>
 8016a10:	4628      	mov	r0, r5
 8016a12:	f7ff fe2b 	bl	801666c <checkerror>
 8016a16:	4604      	mov	r4, r0
 8016a18:	e7ce      	b.n	80169b8 <_get_semihosting_exts+0x50>
 8016a1a:	bf00      	nop
 8016a1c:	08019020 	.word	0x08019020

08016a20 <initialise_semihosting_exts>:
 8016a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a22:	4d0a      	ldr	r5, [pc, #40]	; (8016a4c <initialise_semihosting_exts+0x2c>)
 8016a24:	4c0a      	ldr	r4, [pc, #40]	; (8016a50 <initialise_semihosting_exts+0x30>)
 8016a26:	2100      	movs	r1, #0
 8016a28:	2201      	movs	r2, #1
 8016a2a:	a801      	add	r0, sp, #4
 8016a2c:	6029      	str	r1, [r5, #0]
 8016a2e:	6022      	str	r2, [r4, #0]
 8016a30:	f7ff ff9a 	bl	8016968 <_get_semihosting_exts>
 8016a34:	2800      	cmp	r0, #0
 8016a36:	dd07      	ble.n	8016a48 <initialise_semihosting_exts+0x28>
 8016a38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016a3c:	f003 0201 	and.w	r2, r3, #1
 8016a40:	f003 0302 	and.w	r3, r3, #2
 8016a44:	602a      	str	r2, [r5, #0]
 8016a46:	6023      	str	r3, [r4, #0]
 8016a48:	b003      	add	sp, #12
 8016a4a:	bd30      	pop	{r4, r5, pc}
 8016a4c:	200005b0 	.word	0x200005b0
 8016a50:	200005b4 	.word	0x200005b4

08016a54 <_has_ext_stdout_stderr>:
 8016a54:	b510      	push	{r4, lr}
 8016a56:	4c04      	ldr	r4, [pc, #16]	; (8016a68 <_has_ext_stdout_stderr+0x14>)
 8016a58:	6823      	ldr	r3, [r4, #0]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	da01      	bge.n	8016a62 <_has_ext_stdout_stderr+0xe>
 8016a5e:	f7ff ffdf 	bl	8016a20 <initialise_semihosting_exts>
 8016a62:	6820      	ldr	r0, [r4, #0]
 8016a64:	bd10      	pop	{r4, pc}
 8016a66:	bf00      	nop
 8016a68:	200005b4 	.word	0x200005b4

08016a6c <initialise_monitor_handles>:
 8016a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a70:	b085      	sub	sp, #20
 8016a72:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8016b24 <initialise_monitor_handles+0xb8>
 8016a76:	f8cd 9004 	str.w	r9, [sp, #4]
 8016a7a:	2303      	movs	r3, #3
 8016a7c:	2400      	movs	r4, #0
 8016a7e:	9303      	str	r3, [sp, #12]
 8016a80:	af01      	add	r7, sp, #4
 8016a82:	9402      	str	r4, [sp, #8]
 8016a84:	2501      	movs	r5, #1
 8016a86:	4628      	mov	r0, r5
 8016a88:	4639      	mov	r1, r7
 8016a8a:	beab      	bkpt	0x00ab
 8016a8c:	4605      	mov	r5, r0
 8016a8e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8016b28 <initialise_monitor_handles+0xbc>
 8016a92:	4623      	mov	r3, r4
 8016a94:	4c20      	ldr	r4, [pc, #128]	; (8016b18 <initialise_monitor_handles+0xac>)
 8016a96:	f8c8 5000 	str.w	r5, [r8]
 8016a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a9e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	2b14      	cmp	r3, #20
 8016aa6:	d1fa      	bne.n	8016a9e <initialise_monitor_handles+0x32>
 8016aa8:	f7ff ffd4 	bl	8016a54 <_has_ext_stdout_stderr>
 8016aac:	4d1b      	ldr	r5, [pc, #108]	; (8016b1c <initialise_monitor_handles+0xb0>)
 8016aae:	b1d0      	cbz	r0, 8016ae6 <initialise_monitor_handles+0x7a>
 8016ab0:	f04f 0a03 	mov.w	sl, #3
 8016ab4:	2304      	movs	r3, #4
 8016ab6:	f8cd 9004 	str.w	r9, [sp, #4]
 8016aba:	2601      	movs	r6, #1
 8016abc:	f8cd a00c 	str.w	sl, [sp, #12]
 8016ac0:	9302      	str	r3, [sp, #8]
 8016ac2:	4630      	mov	r0, r6
 8016ac4:	4639      	mov	r1, r7
 8016ac6:	beab      	bkpt	0x00ab
 8016ac8:	4683      	mov	fp, r0
 8016aca:	4b15      	ldr	r3, [pc, #84]	; (8016b20 <initialise_monitor_handles+0xb4>)
 8016acc:	f8cd 9004 	str.w	r9, [sp, #4]
 8016ad0:	f8c3 b000 	str.w	fp, [r3]
 8016ad4:	2308      	movs	r3, #8
 8016ad6:	f8cd a00c 	str.w	sl, [sp, #12]
 8016ada:	9302      	str	r3, [sp, #8]
 8016adc:	4630      	mov	r0, r6
 8016ade:	4639      	mov	r1, r7
 8016ae0:	beab      	bkpt	0x00ab
 8016ae2:	4606      	mov	r6, r0
 8016ae4:	602e      	str	r6, [r5, #0]
 8016ae6:	682b      	ldr	r3, [r5, #0]
 8016ae8:	3301      	adds	r3, #1
 8016aea:	bf02      	ittt	eq
 8016aec:	4b0c      	ldreq	r3, [pc, #48]	; (8016b20 <initialise_monitor_handles+0xb4>)
 8016aee:	681b      	ldreq	r3, [r3, #0]
 8016af0:	602b      	streq	r3, [r5, #0]
 8016af2:	2600      	movs	r6, #0
 8016af4:	f8d8 3000 	ldr.w	r3, [r8]
 8016af8:	6023      	str	r3, [r4, #0]
 8016afa:	6066      	str	r6, [r4, #4]
 8016afc:	f7ff ffaa 	bl	8016a54 <_has_ext_stdout_stderr>
 8016b00:	b130      	cbz	r0, 8016b10 <initialise_monitor_handles+0xa4>
 8016b02:	4b07      	ldr	r3, [pc, #28]	; (8016b20 <initialise_monitor_handles+0xb4>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8016b0a:	682b      	ldr	r3, [r5, #0]
 8016b0c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8016b10:	b005      	add	sp, #20
 8016b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b16:	bf00      	nop
 8016b18:	20006e60 	.word	0x20006e60
 8016b1c:	20006e54 	.word	0x20006e54
 8016b20:	20006e5c 	.word	0x20006e5c
 8016b24:	08019036 	.word	0x08019036
 8016b28:	20006e58 	.word	0x20006e58

08016b2c <_isatty>:
 8016b2c:	b570      	push	{r4, r5, r6, lr}
 8016b2e:	f7ff fd75 	bl	801661c <findslot>
 8016b32:	2509      	movs	r5, #9
 8016b34:	4604      	mov	r4, r0
 8016b36:	b920      	cbnz	r0, 8016b42 <_isatty+0x16>
 8016b38:	f000 f896 	bl	8016c68 <__errno>
 8016b3c:	6005      	str	r5, [r0, #0]
 8016b3e:	4620      	mov	r0, r4
 8016b40:	bd70      	pop	{r4, r5, r6, pc}
 8016b42:	4628      	mov	r0, r5
 8016b44:	4621      	mov	r1, r4
 8016b46:	beab      	bkpt	0x00ab
 8016b48:	4604      	mov	r4, r0
 8016b4a:	2c01      	cmp	r4, #1
 8016b4c:	d0f7      	beq.n	8016b3e <_isatty+0x12>
 8016b4e:	f000 f88b 	bl	8016c68 <__errno>
 8016b52:	2400      	movs	r4, #0
 8016b54:	4605      	mov	r5, r0
 8016b56:	2613      	movs	r6, #19
 8016b58:	4630      	mov	r0, r6
 8016b5a:	4621      	mov	r1, r4
 8016b5c:	beab      	bkpt	0x00ab
 8016b5e:	4606      	mov	r6, r0
 8016b60:	602e      	str	r6, [r5, #0]
 8016b62:	e7ec      	b.n	8016b3e <_isatty+0x12>

08016b64 <_Znwj>:
 8016b64:	2801      	cmp	r0, #1
 8016b66:	bf38      	it	cc
 8016b68:	2001      	movcc	r0, #1
 8016b6a:	b510      	push	{r4, lr}
 8016b6c:	4604      	mov	r4, r0
 8016b6e:	4620      	mov	r0, r4
 8016b70:	f000 f99e 	bl	8016eb0 <malloc>
 8016b74:	b930      	cbnz	r0, 8016b84 <_Znwj+0x20>
 8016b76:	f000 f81b 	bl	8016bb0 <_ZSt15get_new_handlerv>
 8016b7a:	b908      	cbnz	r0, 8016b80 <_Znwj+0x1c>
 8016b7c:	f000 f865 	bl	8016c4a <abort>
 8016b80:	4780      	blx	r0
 8016b82:	e7f4      	b.n	8016b6e <_Znwj+0xa>
 8016b84:	bd10      	pop	{r4, pc}

08016b86 <__cxa_pure_virtual>:
 8016b86:	b508      	push	{r3, lr}
 8016b88:	f000 f80c 	bl	8016ba4 <_ZSt9terminatev>

08016b8c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8016b8c:	b508      	push	{r3, lr}
 8016b8e:	4780      	blx	r0
 8016b90:	f000 f85b 	bl	8016c4a <abort>

08016b94 <_ZSt13get_terminatev>:
 8016b94:	4b02      	ldr	r3, [pc, #8]	; (8016ba0 <_ZSt13get_terminatev+0xc>)
 8016b96:	6818      	ldr	r0, [r3, #0]
 8016b98:	f3bf 8f5b 	dmb	ish
 8016b9c:	4770      	bx	lr
 8016b9e:	bf00      	nop
 8016ba0:	200005b8 	.word	0x200005b8

08016ba4 <_ZSt9terminatev>:
 8016ba4:	b508      	push	{r3, lr}
 8016ba6:	f7ff fff5 	bl	8016b94 <_ZSt13get_terminatev>
 8016baa:	f7ff ffef 	bl	8016b8c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08016bb0 <_ZSt15get_new_handlerv>:
 8016bb0:	4b02      	ldr	r3, [pc, #8]	; (8016bbc <_ZSt15get_new_handlerv+0xc>)
 8016bb2:	6818      	ldr	r0, [r3, #0]
 8016bb4:	f3bf 8f5b 	dmb	ish
 8016bb8:	4770      	bx	lr
 8016bba:	bf00      	nop
 8016bbc:	20006f00 	.word	0x20006f00

08016bc0 <roundf>:
 8016bc0:	ee10 0a10 	vmov	r0, s0
 8016bc4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8016bc8:	3a7f      	subs	r2, #127	; 0x7f
 8016bca:	2a16      	cmp	r2, #22
 8016bcc:	dc15      	bgt.n	8016bfa <roundf+0x3a>
 8016bce:	2a00      	cmp	r2, #0
 8016bd0:	da08      	bge.n	8016be4 <roundf+0x24>
 8016bd2:	3201      	adds	r2, #1
 8016bd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8016bd8:	d101      	bne.n	8016bde <roundf+0x1e>
 8016bda:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8016bde:	ee00 3a10 	vmov	s0, r3
 8016be2:	4770      	bx	lr
 8016be4:	4907      	ldr	r1, [pc, #28]	; (8016c04 <roundf+0x44>)
 8016be6:	4111      	asrs	r1, r2
 8016be8:	4208      	tst	r0, r1
 8016bea:	d0fa      	beq.n	8016be2 <roundf+0x22>
 8016bec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016bf0:	4113      	asrs	r3, r2
 8016bf2:	4403      	add	r3, r0
 8016bf4:	ea23 0301 	bic.w	r3, r3, r1
 8016bf8:	e7f1      	b.n	8016bde <roundf+0x1e>
 8016bfa:	2a80      	cmp	r2, #128	; 0x80
 8016bfc:	d1f1      	bne.n	8016be2 <roundf+0x22>
 8016bfe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016c02:	4770      	bx	lr
 8016c04:	007fffff 	.word	0x007fffff

08016c08 <sqrtf>:
 8016c08:	b508      	push	{r3, lr}
 8016c0a:	ed2d 8b02 	vpush	{d8}
 8016c0e:	eeb0 8a40 	vmov.f32	s16, s0
 8016c12:	f000 f817 	bl	8016c44 <__ieee754_sqrtf>
 8016c16:	eeb4 8a48 	vcmp.f32	s16, s16
 8016c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c1e:	d60c      	bvs.n	8016c3a <sqrtf+0x32>
 8016c20:	eddf 8a07 	vldr	s17, [pc, #28]	; 8016c40 <sqrtf+0x38>
 8016c24:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c2c:	d505      	bpl.n	8016c3a <sqrtf+0x32>
 8016c2e:	f000 f81b 	bl	8016c68 <__errno>
 8016c32:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8016c36:	2321      	movs	r3, #33	; 0x21
 8016c38:	6003      	str	r3, [r0, #0]
 8016c3a:	ecbd 8b02 	vpop	{d8}
 8016c3e:	bd08      	pop	{r3, pc}
 8016c40:	00000000 	.word	0x00000000

08016c44 <__ieee754_sqrtf>:
 8016c44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016c48:	4770      	bx	lr

08016c4a <abort>:
 8016c4a:	b508      	push	{r3, lr}
 8016c4c:	2006      	movs	r0, #6
 8016c4e:	f000 fb09 	bl	8017264 <raise>
 8016c52:	2001      	movs	r0, #1
 8016c54:	f001 fa9e 	bl	8018194 <_exit>

08016c58 <calloc>:
 8016c58:	4b02      	ldr	r3, [pc, #8]	; (8016c64 <calloc+0xc>)
 8016c5a:	460a      	mov	r2, r1
 8016c5c:	4601      	mov	r1, r0
 8016c5e:	6818      	ldr	r0, [r3, #0]
 8016c60:	f000 b944 	b.w	8016eec <_calloc_r>
 8016c64:	200005bc 	.word	0x200005bc

08016c68 <__errno>:
 8016c68:	4b01      	ldr	r3, [pc, #4]	; (8016c70 <__errno+0x8>)
 8016c6a:	6818      	ldr	r0, [r3, #0]
 8016c6c:	4770      	bx	lr
 8016c6e:	bf00      	nop
 8016c70:	200005bc 	.word	0x200005bc

08016c74 <std>:
 8016c74:	2300      	movs	r3, #0
 8016c76:	b510      	push	{r4, lr}
 8016c78:	4604      	mov	r4, r0
 8016c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8016c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c82:	6083      	str	r3, [r0, #8]
 8016c84:	8181      	strh	r1, [r0, #12]
 8016c86:	6643      	str	r3, [r0, #100]	; 0x64
 8016c88:	81c2      	strh	r2, [r0, #14]
 8016c8a:	6183      	str	r3, [r0, #24]
 8016c8c:	4619      	mov	r1, r3
 8016c8e:	2208      	movs	r2, #8
 8016c90:	305c      	adds	r0, #92	; 0x5c
 8016c92:	f000 f923 	bl	8016edc <memset>
 8016c96:	4b05      	ldr	r3, [pc, #20]	; (8016cac <std+0x38>)
 8016c98:	6263      	str	r3, [r4, #36]	; 0x24
 8016c9a:	4b05      	ldr	r3, [pc, #20]	; (8016cb0 <std+0x3c>)
 8016c9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016c9e:	4b05      	ldr	r3, [pc, #20]	; (8016cb4 <std+0x40>)
 8016ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016ca2:	4b05      	ldr	r3, [pc, #20]	; (8016cb8 <std+0x44>)
 8016ca4:	6224      	str	r4, [r4, #32]
 8016ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8016ca8:	bd10      	pop	{r4, pc}
 8016caa:	bf00      	nop
 8016cac:	0801729d 	.word	0x0801729d
 8016cb0:	080172bf 	.word	0x080172bf
 8016cb4:	080172f7 	.word	0x080172f7
 8016cb8:	0801731b 	.word	0x0801731b

08016cbc <_cleanup_r>:
 8016cbc:	4901      	ldr	r1, [pc, #4]	; (8016cc4 <_cleanup_r+0x8>)
 8016cbe:	f000 b8af 	b.w	8016e20 <_fwalk_reent>
 8016cc2:	bf00      	nop
 8016cc4:	08017665 	.word	0x08017665

08016cc8 <__sfmoreglue>:
 8016cc8:	b570      	push	{r4, r5, r6, lr}
 8016cca:	2268      	movs	r2, #104	; 0x68
 8016ccc:	1e4d      	subs	r5, r1, #1
 8016cce:	4355      	muls	r5, r2
 8016cd0:	460e      	mov	r6, r1
 8016cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016cd6:	f000 f98b 	bl	8016ff0 <_malloc_r>
 8016cda:	4604      	mov	r4, r0
 8016cdc:	b140      	cbz	r0, 8016cf0 <__sfmoreglue+0x28>
 8016cde:	2100      	movs	r1, #0
 8016ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8016ce4:	300c      	adds	r0, #12
 8016ce6:	60a0      	str	r0, [r4, #8]
 8016ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016cec:	f000 f8f6 	bl	8016edc <memset>
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	bd70      	pop	{r4, r5, r6, pc}

08016cf4 <__sfp_lock_acquire>:
 8016cf4:	4801      	ldr	r0, [pc, #4]	; (8016cfc <__sfp_lock_acquire+0x8>)
 8016cf6:	f000 b8d8 	b.w	8016eaa <__retarget_lock_acquire_recursive>
 8016cfa:	bf00      	nop
 8016cfc:	20006f05 	.word	0x20006f05

08016d00 <__sfp_lock_release>:
 8016d00:	4801      	ldr	r0, [pc, #4]	; (8016d08 <__sfp_lock_release+0x8>)
 8016d02:	f000 b8d3 	b.w	8016eac <__retarget_lock_release_recursive>
 8016d06:	bf00      	nop
 8016d08:	20006f05 	.word	0x20006f05

08016d0c <__sinit_lock_acquire>:
 8016d0c:	4801      	ldr	r0, [pc, #4]	; (8016d14 <__sinit_lock_acquire+0x8>)
 8016d0e:	f000 b8cc 	b.w	8016eaa <__retarget_lock_acquire_recursive>
 8016d12:	bf00      	nop
 8016d14:	20006f06 	.word	0x20006f06

08016d18 <__sinit_lock_release>:
 8016d18:	4801      	ldr	r0, [pc, #4]	; (8016d20 <__sinit_lock_release+0x8>)
 8016d1a:	f000 b8c7 	b.w	8016eac <__retarget_lock_release_recursive>
 8016d1e:	bf00      	nop
 8016d20:	20006f06 	.word	0x20006f06

08016d24 <__sinit>:
 8016d24:	b510      	push	{r4, lr}
 8016d26:	4604      	mov	r4, r0
 8016d28:	f7ff fff0 	bl	8016d0c <__sinit_lock_acquire>
 8016d2c:	69a3      	ldr	r3, [r4, #24]
 8016d2e:	b11b      	cbz	r3, 8016d38 <__sinit+0x14>
 8016d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d34:	f7ff bff0 	b.w	8016d18 <__sinit_lock_release>
 8016d38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016d3c:	6523      	str	r3, [r4, #80]	; 0x50
 8016d3e:	4b13      	ldr	r3, [pc, #76]	; (8016d8c <__sinit+0x68>)
 8016d40:	4a13      	ldr	r2, [pc, #76]	; (8016d90 <__sinit+0x6c>)
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	62a2      	str	r2, [r4, #40]	; 0x28
 8016d46:	42a3      	cmp	r3, r4
 8016d48:	bf04      	itt	eq
 8016d4a:	2301      	moveq	r3, #1
 8016d4c:	61a3      	streq	r3, [r4, #24]
 8016d4e:	4620      	mov	r0, r4
 8016d50:	f000 f820 	bl	8016d94 <__sfp>
 8016d54:	6060      	str	r0, [r4, #4]
 8016d56:	4620      	mov	r0, r4
 8016d58:	f000 f81c 	bl	8016d94 <__sfp>
 8016d5c:	60a0      	str	r0, [r4, #8]
 8016d5e:	4620      	mov	r0, r4
 8016d60:	f000 f818 	bl	8016d94 <__sfp>
 8016d64:	2200      	movs	r2, #0
 8016d66:	60e0      	str	r0, [r4, #12]
 8016d68:	2104      	movs	r1, #4
 8016d6a:	6860      	ldr	r0, [r4, #4]
 8016d6c:	f7ff ff82 	bl	8016c74 <std>
 8016d70:	68a0      	ldr	r0, [r4, #8]
 8016d72:	2201      	movs	r2, #1
 8016d74:	2109      	movs	r1, #9
 8016d76:	f7ff ff7d 	bl	8016c74 <std>
 8016d7a:	68e0      	ldr	r0, [r4, #12]
 8016d7c:	2202      	movs	r2, #2
 8016d7e:	2112      	movs	r1, #18
 8016d80:	f7ff ff78 	bl	8016c74 <std>
 8016d84:	2301      	movs	r3, #1
 8016d86:	61a3      	str	r3, [r4, #24]
 8016d88:	e7d2      	b.n	8016d30 <__sinit+0xc>
 8016d8a:	bf00      	nop
 8016d8c:	0801909c 	.word	0x0801909c
 8016d90:	08016cbd 	.word	0x08016cbd

08016d94 <__sfp>:
 8016d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d96:	4607      	mov	r7, r0
 8016d98:	f7ff ffac 	bl	8016cf4 <__sfp_lock_acquire>
 8016d9c:	4b1e      	ldr	r3, [pc, #120]	; (8016e18 <__sfp+0x84>)
 8016d9e:	681e      	ldr	r6, [r3, #0]
 8016da0:	69b3      	ldr	r3, [r6, #24]
 8016da2:	b913      	cbnz	r3, 8016daa <__sfp+0x16>
 8016da4:	4630      	mov	r0, r6
 8016da6:	f7ff ffbd 	bl	8016d24 <__sinit>
 8016daa:	3648      	adds	r6, #72	; 0x48
 8016dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016db0:	3b01      	subs	r3, #1
 8016db2:	d503      	bpl.n	8016dbc <__sfp+0x28>
 8016db4:	6833      	ldr	r3, [r6, #0]
 8016db6:	b30b      	cbz	r3, 8016dfc <__sfp+0x68>
 8016db8:	6836      	ldr	r6, [r6, #0]
 8016dba:	e7f7      	b.n	8016dac <__sfp+0x18>
 8016dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016dc0:	b9d5      	cbnz	r5, 8016df8 <__sfp+0x64>
 8016dc2:	4b16      	ldr	r3, [pc, #88]	; (8016e1c <__sfp+0x88>)
 8016dc4:	60e3      	str	r3, [r4, #12]
 8016dc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016dca:	6665      	str	r5, [r4, #100]	; 0x64
 8016dcc:	f000 f86c 	bl	8016ea8 <__retarget_lock_init_recursive>
 8016dd0:	f7ff ff96 	bl	8016d00 <__sfp_lock_release>
 8016dd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016dd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016ddc:	6025      	str	r5, [r4, #0]
 8016dde:	61a5      	str	r5, [r4, #24]
 8016de0:	2208      	movs	r2, #8
 8016de2:	4629      	mov	r1, r5
 8016de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016de8:	f000 f878 	bl	8016edc <memset>
 8016dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016df4:	4620      	mov	r0, r4
 8016df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016df8:	3468      	adds	r4, #104	; 0x68
 8016dfa:	e7d9      	b.n	8016db0 <__sfp+0x1c>
 8016dfc:	2104      	movs	r1, #4
 8016dfe:	4638      	mov	r0, r7
 8016e00:	f7ff ff62 	bl	8016cc8 <__sfmoreglue>
 8016e04:	4604      	mov	r4, r0
 8016e06:	6030      	str	r0, [r6, #0]
 8016e08:	2800      	cmp	r0, #0
 8016e0a:	d1d5      	bne.n	8016db8 <__sfp+0x24>
 8016e0c:	f7ff ff78 	bl	8016d00 <__sfp_lock_release>
 8016e10:	230c      	movs	r3, #12
 8016e12:	603b      	str	r3, [r7, #0]
 8016e14:	e7ee      	b.n	8016df4 <__sfp+0x60>
 8016e16:	bf00      	nop
 8016e18:	0801909c 	.word	0x0801909c
 8016e1c:	ffff0001 	.word	0xffff0001

08016e20 <_fwalk_reent>:
 8016e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e24:	4606      	mov	r6, r0
 8016e26:	4688      	mov	r8, r1
 8016e28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016e2c:	2700      	movs	r7, #0
 8016e2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e32:	f1b9 0901 	subs.w	r9, r9, #1
 8016e36:	d505      	bpl.n	8016e44 <_fwalk_reent+0x24>
 8016e38:	6824      	ldr	r4, [r4, #0]
 8016e3a:	2c00      	cmp	r4, #0
 8016e3c:	d1f7      	bne.n	8016e2e <_fwalk_reent+0xe>
 8016e3e:	4638      	mov	r0, r7
 8016e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e44:	89ab      	ldrh	r3, [r5, #12]
 8016e46:	2b01      	cmp	r3, #1
 8016e48:	d907      	bls.n	8016e5a <_fwalk_reent+0x3a>
 8016e4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e4e:	3301      	adds	r3, #1
 8016e50:	d003      	beq.n	8016e5a <_fwalk_reent+0x3a>
 8016e52:	4629      	mov	r1, r5
 8016e54:	4630      	mov	r0, r6
 8016e56:	47c0      	blx	r8
 8016e58:	4307      	orrs	r7, r0
 8016e5a:	3568      	adds	r5, #104	; 0x68
 8016e5c:	e7e9      	b.n	8016e32 <_fwalk_reent+0x12>
	...

08016e60 <__libc_init_array>:
 8016e60:	b570      	push	{r4, r5, r6, lr}
 8016e62:	4d0d      	ldr	r5, [pc, #52]	; (8016e98 <__libc_init_array+0x38>)
 8016e64:	4c0d      	ldr	r4, [pc, #52]	; (8016e9c <__libc_init_array+0x3c>)
 8016e66:	1b64      	subs	r4, r4, r5
 8016e68:	10a4      	asrs	r4, r4, #2
 8016e6a:	2600      	movs	r6, #0
 8016e6c:	42a6      	cmp	r6, r4
 8016e6e:	d109      	bne.n	8016e84 <__libc_init_array+0x24>
 8016e70:	4d0b      	ldr	r5, [pc, #44]	; (8016ea0 <__libc_init_array+0x40>)
 8016e72:	4c0c      	ldr	r4, [pc, #48]	; (8016ea4 <__libc_init_array+0x44>)
 8016e74:	f001 f990 	bl	8018198 <_init>
 8016e78:	1b64      	subs	r4, r4, r5
 8016e7a:	10a4      	asrs	r4, r4, #2
 8016e7c:	2600      	movs	r6, #0
 8016e7e:	42a6      	cmp	r6, r4
 8016e80:	d105      	bne.n	8016e8e <__libc_init_array+0x2e>
 8016e82:	bd70      	pop	{r4, r5, r6, pc}
 8016e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e88:	4798      	blx	r3
 8016e8a:	3601      	adds	r6, #1
 8016e8c:	e7ee      	b.n	8016e6c <__libc_init_array+0xc>
 8016e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e92:	4798      	blx	r3
 8016e94:	3601      	adds	r6, #1
 8016e96:	e7f2      	b.n	8016e7e <__libc_init_array+0x1e>
 8016e98:	080190dc 	.word	0x080190dc
 8016e9c:	080190dc 	.word	0x080190dc
 8016ea0:	080190dc 	.word	0x080190dc
 8016ea4:	080190e4 	.word	0x080190e4

08016ea8 <__retarget_lock_init_recursive>:
 8016ea8:	4770      	bx	lr

08016eaa <__retarget_lock_acquire_recursive>:
 8016eaa:	4770      	bx	lr

08016eac <__retarget_lock_release_recursive>:
 8016eac:	4770      	bx	lr
	...

08016eb0 <malloc>:
 8016eb0:	4b02      	ldr	r3, [pc, #8]	; (8016ebc <malloc+0xc>)
 8016eb2:	4601      	mov	r1, r0
 8016eb4:	6818      	ldr	r0, [r3, #0]
 8016eb6:	f000 b89b 	b.w	8016ff0 <_malloc_r>
 8016eba:	bf00      	nop
 8016ebc:	200005bc 	.word	0x200005bc

08016ec0 <memcpy>:
 8016ec0:	440a      	add	r2, r1
 8016ec2:	4291      	cmp	r1, r2
 8016ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8016ec8:	d100      	bne.n	8016ecc <memcpy+0xc>
 8016eca:	4770      	bx	lr
 8016ecc:	b510      	push	{r4, lr}
 8016ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ed6:	4291      	cmp	r1, r2
 8016ed8:	d1f9      	bne.n	8016ece <memcpy+0xe>
 8016eda:	bd10      	pop	{r4, pc}

08016edc <memset>:
 8016edc:	4402      	add	r2, r0
 8016ede:	4603      	mov	r3, r0
 8016ee0:	4293      	cmp	r3, r2
 8016ee2:	d100      	bne.n	8016ee6 <memset+0xa>
 8016ee4:	4770      	bx	lr
 8016ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8016eea:	e7f9      	b.n	8016ee0 <memset+0x4>

08016eec <_calloc_r>:
 8016eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016eee:	fba1 2402 	umull	r2, r4, r1, r2
 8016ef2:	b94c      	cbnz	r4, 8016f08 <_calloc_r+0x1c>
 8016ef4:	4611      	mov	r1, r2
 8016ef6:	9201      	str	r2, [sp, #4]
 8016ef8:	f000 f87a 	bl	8016ff0 <_malloc_r>
 8016efc:	9a01      	ldr	r2, [sp, #4]
 8016efe:	4605      	mov	r5, r0
 8016f00:	b930      	cbnz	r0, 8016f10 <_calloc_r+0x24>
 8016f02:	4628      	mov	r0, r5
 8016f04:	b003      	add	sp, #12
 8016f06:	bd30      	pop	{r4, r5, pc}
 8016f08:	220c      	movs	r2, #12
 8016f0a:	6002      	str	r2, [r0, #0]
 8016f0c:	2500      	movs	r5, #0
 8016f0e:	e7f8      	b.n	8016f02 <_calloc_r+0x16>
 8016f10:	4621      	mov	r1, r4
 8016f12:	f7ff ffe3 	bl	8016edc <memset>
 8016f16:	e7f4      	b.n	8016f02 <_calloc_r+0x16>

08016f18 <_free_r>:
 8016f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f1a:	2900      	cmp	r1, #0
 8016f1c:	d044      	beq.n	8016fa8 <_free_r+0x90>
 8016f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f22:	9001      	str	r0, [sp, #4]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	f1a1 0404 	sub.w	r4, r1, #4
 8016f2a:	bfb8      	it	lt
 8016f2c:	18e4      	addlt	r4, r4, r3
 8016f2e:	f000 fc4d 	bl	80177cc <__malloc_lock>
 8016f32:	4a1e      	ldr	r2, [pc, #120]	; (8016fac <_free_r+0x94>)
 8016f34:	9801      	ldr	r0, [sp, #4]
 8016f36:	6813      	ldr	r3, [r2, #0]
 8016f38:	b933      	cbnz	r3, 8016f48 <_free_r+0x30>
 8016f3a:	6063      	str	r3, [r4, #4]
 8016f3c:	6014      	str	r4, [r2, #0]
 8016f3e:	b003      	add	sp, #12
 8016f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f44:	f000 bc48 	b.w	80177d8 <__malloc_unlock>
 8016f48:	42a3      	cmp	r3, r4
 8016f4a:	d908      	bls.n	8016f5e <_free_r+0x46>
 8016f4c:	6825      	ldr	r5, [r4, #0]
 8016f4e:	1961      	adds	r1, r4, r5
 8016f50:	428b      	cmp	r3, r1
 8016f52:	bf01      	itttt	eq
 8016f54:	6819      	ldreq	r1, [r3, #0]
 8016f56:	685b      	ldreq	r3, [r3, #4]
 8016f58:	1949      	addeq	r1, r1, r5
 8016f5a:	6021      	streq	r1, [r4, #0]
 8016f5c:	e7ed      	b.n	8016f3a <_free_r+0x22>
 8016f5e:	461a      	mov	r2, r3
 8016f60:	685b      	ldr	r3, [r3, #4]
 8016f62:	b10b      	cbz	r3, 8016f68 <_free_r+0x50>
 8016f64:	42a3      	cmp	r3, r4
 8016f66:	d9fa      	bls.n	8016f5e <_free_r+0x46>
 8016f68:	6811      	ldr	r1, [r2, #0]
 8016f6a:	1855      	adds	r5, r2, r1
 8016f6c:	42a5      	cmp	r5, r4
 8016f6e:	d10b      	bne.n	8016f88 <_free_r+0x70>
 8016f70:	6824      	ldr	r4, [r4, #0]
 8016f72:	4421      	add	r1, r4
 8016f74:	1854      	adds	r4, r2, r1
 8016f76:	42a3      	cmp	r3, r4
 8016f78:	6011      	str	r1, [r2, #0]
 8016f7a:	d1e0      	bne.n	8016f3e <_free_r+0x26>
 8016f7c:	681c      	ldr	r4, [r3, #0]
 8016f7e:	685b      	ldr	r3, [r3, #4]
 8016f80:	6053      	str	r3, [r2, #4]
 8016f82:	4421      	add	r1, r4
 8016f84:	6011      	str	r1, [r2, #0]
 8016f86:	e7da      	b.n	8016f3e <_free_r+0x26>
 8016f88:	d902      	bls.n	8016f90 <_free_r+0x78>
 8016f8a:	230c      	movs	r3, #12
 8016f8c:	6003      	str	r3, [r0, #0]
 8016f8e:	e7d6      	b.n	8016f3e <_free_r+0x26>
 8016f90:	6825      	ldr	r5, [r4, #0]
 8016f92:	1961      	adds	r1, r4, r5
 8016f94:	428b      	cmp	r3, r1
 8016f96:	bf04      	itt	eq
 8016f98:	6819      	ldreq	r1, [r3, #0]
 8016f9a:	685b      	ldreq	r3, [r3, #4]
 8016f9c:	6063      	str	r3, [r4, #4]
 8016f9e:	bf04      	itt	eq
 8016fa0:	1949      	addeq	r1, r1, r5
 8016fa2:	6021      	streq	r1, [r4, #0]
 8016fa4:	6054      	str	r4, [r2, #4]
 8016fa6:	e7ca      	b.n	8016f3e <_free_r+0x26>
 8016fa8:	b003      	add	sp, #12
 8016faa:	bd30      	pop	{r4, r5, pc}
 8016fac:	20006f08 	.word	0x20006f08

08016fb0 <sbrk_aligned>:
 8016fb0:	b570      	push	{r4, r5, r6, lr}
 8016fb2:	4e0e      	ldr	r6, [pc, #56]	; (8016fec <sbrk_aligned+0x3c>)
 8016fb4:	460c      	mov	r4, r1
 8016fb6:	6831      	ldr	r1, [r6, #0]
 8016fb8:	4605      	mov	r5, r0
 8016fba:	b911      	cbnz	r1, 8016fc2 <sbrk_aligned+0x12>
 8016fbc:	f000 f91a 	bl	80171f4 <_sbrk_r>
 8016fc0:	6030      	str	r0, [r6, #0]
 8016fc2:	4621      	mov	r1, r4
 8016fc4:	4628      	mov	r0, r5
 8016fc6:	f000 f915 	bl	80171f4 <_sbrk_r>
 8016fca:	1c43      	adds	r3, r0, #1
 8016fcc:	d00a      	beq.n	8016fe4 <sbrk_aligned+0x34>
 8016fce:	1cc4      	adds	r4, r0, #3
 8016fd0:	f024 0403 	bic.w	r4, r4, #3
 8016fd4:	42a0      	cmp	r0, r4
 8016fd6:	d007      	beq.n	8016fe8 <sbrk_aligned+0x38>
 8016fd8:	1a21      	subs	r1, r4, r0
 8016fda:	4628      	mov	r0, r5
 8016fdc:	f000 f90a 	bl	80171f4 <_sbrk_r>
 8016fe0:	3001      	adds	r0, #1
 8016fe2:	d101      	bne.n	8016fe8 <sbrk_aligned+0x38>
 8016fe4:	f04f 34ff 	mov.w	r4, #4294967295
 8016fe8:	4620      	mov	r0, r4
 8016fea:	bd70      	pop	{r4, r5, r6, pc}
 8016fec:	20006f0c 	.word	0x20006f0c

08016ff0 <_malloc_r>:
 8016ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ff4:	1ccd      	adds	r5, r1, #3
 8016ff6:	f025 0503 	bic.w	r5, r5, #3
 8016ffa:	3508      	adds	r5, #8
 8016ffc:	2d0c      	cmp	r5, #12
 8016ffe:	bf38      	it	cc
 8017000:	250c      	movcc	r5, #12
 8017002:	2d00      	cmp	r5, #0
 8017004:	4607      	mov	r7, r0
 8017006:	db01      	blt.n	801700c <_malloc_r+0x1c>
 8017008:	42a9      	cmp	r1, r5
 801700a:	d905      	bls.n	8017018 <_malloc_r+0x28>
 801700c:	230c      	movs	r3, #12
 801700e:	603b      	str	r3, [r7, #0]
 8017010:	2600      	movs	r6, #0
 8017012:	4630      	mov	r0, r6
 8017014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017018:	4e2e      	ldr	r6, [pc, #184]	; (80170d4 <_malloc_r+0xe4>)
 801701a:	f000 fbd7 	bl	80177cc <__malloc_lock>
 801701e:	6833      	ldr	r3, [r6, #0]
 8017020:	461c      	mov	r4, r3
 8017022:	bb34      	cbnz	r4, 8017072 <_malloc_r+0x82>
 8017024:	4629      	mov	r1, r5
 8017026:	4638      	mov	r0, r7
 8017028:	f7ff ffc2 	bl	8016fb0 <sbrk_aligned>
 801702c:	1c43      	adds	r3, r0, #1
 801702e:	4604      	mov	r4, r0
 8017030:	d14d      	bne.n	80170ce <_malloc_r+0xde>
 8017032:	6834      	ldr	r4, [r6, #0]
 8017034:	4626      	mov	r6, r4
 8017036:	2e00      	cmp	r6, #0
 8017038:	d140      	bne.n	80170bc <_malloc_r+0xcc>
 801703a:	6823      	ldr	r3, [r4, #0]
 801703c:	4631      	mov	r1, r6
 801703e:	4638      	mov	r0, r7
 8017040:	eb04 0803 	add.w	r8, r4, r3
 8017044:	f000 f8d6 	bl	80171f4 <_sbrk_r>
 8017048:	4580      	cmp	r8, r0
 801704a:	d13a      	bne.n	80170c2 <_malloc_r+0xd2>
 801704c:	6821      	ldr	r1, [r4, #0]
 801704e:	3503      	adds	r5, #3
 8017050:	1a6d      	subs	r5, r5, r1
 8017052:	f025 0503 	bic.w	r5, r5, #3
 8017056:	3508      	adds	r5, #8
 8017058:	2d0c      	cmp	r5, #12
 801705a:	bf38      	it	cc
 801705c:	250c      	movcc	r5, #12
 801705e:	4629      	mov	r1, r5
 8017060:	4638      	mov	r0, r7
 8017062:	f7ff ffa5 	bl	8016fb0 <sbrk_aligned>
 8017066:	3001      	adds	r0, #1
 8017068:	d02b      	beq.n	80170c2 <_malloc_r+0xd2>
 801706a:	6823      	ldr	r3, [r4, #0]
 801706c:	442b      	add	r3, r5
 801706e:	6023      	str	r3, [r4, #0]
 8017070:	e00e      	b.n	8017090 <_malloc_r+0xa0>
 8017072:	6822      	ldr	r2, [r4, #0]
 8017074:	1b52      	subs	r2, r2, r5
 8017076:	d41e      	bmi.n	80170b6 <_malloc_r+0xc6>
 8017078:	2a0b      	cmp	r2, #11
 801707a:	d916      	bls.n	80170aa <_malloc_r+0xba>
 801707c:	1961      	adds	r1, r4, r5
 801707e:	42a3      	cmp	r3, r4
 8017080:	6025      	str	r5, [r4, #0]
 8017082:	bf18      	it	ne
 8017084:	6059      	strne	r1, [r3, #4]
 8017086:	6863      	ldr	r3, [r4, #4]
 8017088:	bf08      	it	eq
 801708a:	6031      	streq	r1, [r6, #0]
 801708c:	5162      	str	r2, [r4, r5]
 801708e:	604b      	str	r3, [r1, #4]
 8017090:	4638      	mov	r0, r7
 8017092:	f104 060b 	add.w	r6, r4, #11
 8017096:	f000 fb9f 	bl	80177d8 <__malloc_unlock>
 801709a:	f026 0607 	bic.w	r6, r6, #7
 801709e:	1d23      	adds	r3, r4, #4
 80170a0:	1af2      	subs	r2, r6, r3
 80170a2:	d0b6      	beq.n	8017012 <_malloc_r+0x22>
 80170a4:	1b9b      	subs	r3, r3, r6
 80170a6:	50a3      	str	r3, [r4, r2]
 80170a8:	e7b3      	b.n	8017012 <_malloc_r+0x22>
 80170aa:	6862      	ldr	r2, [r4, #4]
 80170ac:	42a3      	cmp	r3, r4
 80170ae:	bf0c      	ite	eq
 80170b0:	6032      	streq	r2, [r6, #0]
 80170b2:	605a      	strne	r2, [r3, #4]
 80170b4:	e7ec      	b.n	8017090 <_malloc_r+0xa0>
 80170b6:	4623      	mov	r3, r4
 80170b8:	6864      	ldr	r4, [r4, #4]
 80170ba:	e7b2      	b.n	8017022 <_malloc_r+0x32>
 80170bc:	4634      	mov	r4, r6
 80170be:	6876      	ldr	r6, [r6, #4]
 80170c0:	e7b9      	b.n	8017036 <_malloc_r+0x46>
 80170c2:	230c      	movs	r3, #12
 80170c4:	603b      	str	r3, [r7, #0]
 80170c6:	4638      	mov	r0, r7
 80170c8:	f000 fb86 	bl	80177d8 <__malloc_unlock>
 80170cc:	e7a1      	b.n	8017012 <_malloc_r+0x22>
 80170ce:	6025      	str	r5, [r4, #0]
 80170d0:	e7de      	b.n	8017090 <_malloc_r+0xa0>
 80170d2:	bf00      	nop
 80170d4:	20006f08 	.word	0x20006f08

080170d8 <iprintf>:
 80170d8:	b40f      	push	{r0, r1, r2, r3}
 80170da:	4b0a      	ldr	r3, [pc, #40]	; (8017104 <iprintf+0x2c>)
 80170dc:	b513      	push	{r0, r1, r4, lr}
 80170de:	681c      	ldr	r4, [r3, #0]
 80170e0:	b124      	cbz	r4, 80170ec <iprintf+0x14>
 80170e2:	69a3      	ldr	r3, [r4, #24]
 80170e4:	b913      	cbnz	r3, 80170ec <iprintf+0x14>
 80170e6:	4620      	mov	r0, r4
 80170e8:	f7ff fe1c 	bl	8016d24 <__sinit>
 80170ec:	ab05      	add	r3, sp, #20
 80170ee:	9a04      	ldr	r2, [sp, #16]
 80170f0:	68a1      	ldr	r1, [r4, #8]
 80170f2:	9301      	str	r3, [sp, #4]
 80170f4:	4620      	mov	r0, r4
 80170f6:	f000 fcfb 	bl	8017af0 <_vfiprintf_r>
 80170fa:	b002      	add	sp, #8
 80170fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017100:	b004      	add	sp, #16
 8017102:	4770      	bx	lr
 8017104:	200005bc 	.word	0x200005bc

08017108 <_puts_r>:
 8017108:	b570      	push	{r4, r5, r6, lr}
 801710a:	460e      	mov	r6, r1
 801710c:	4605      	mov	r5, r0
 801710e:	b118      	cbz	r0, 8017118 <_puts_r+0x10>
 8017110:	6983      	ldr	r3, [r0, #24]
 8017112:	b90b      	cbnz	r3, 8017118 <_puts_r+0x10>
 8017114:	f7ff fe06 	bl	8016d24 <__sinit>
 8017118:	69ab      	ldr	r3, [r5, #24]
 801711a:	68ac      	ldr	r4, [r5, #8]
 801711c:	b913      	cbnz	r3, 8017124 <_puts_r+0x1c>
 801711e:	4628      	mov	r0, r5
 8017120:	f7ff fe00 	bl	8016d24 <__sinit>
 8017124:	4b2c      	ldr	r3, [pc, #176]	; (80171d8 <_puts_r+0xd0>)
 8017126:	429c      	cmp	r4, r3
 8017128:	d120      	bne.n	801716c <_puts_r+0x64>
 801712a:	686c      	ldr	r4, [r5, #4]
 801712c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801712e:	07db      	lsls	r3, r3, #31
 8017130:	d405      	bmi.n	801713e <_puts_r+0x36>
 8017132:	89a3      	ldrh	r3, [r4, #12]
 8017134:	0598      	lsls	r0, r3, #22
 8017136:	d402      	bmi.n	801713e <_puts_r+0x36>
 8017138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801713a:	f7ff feb6 	bl	8016eaa <__retarget_lock_acquire_recursive>
 801713e:	89a3      	ldrh	r3, [r4, #12]
 8017140:	0719      	lsls	r1, r3, #28
 8017142:	d51d      	bpl.n	8017180 <_puts_r+0x78>
 8017144:	6923      	ldr	r3, [r4, #16]
 8017146:	b1db      	cbz	r3, 8017180 <_puts_r+0x78>
 8017148:	3e01      	subs	r6, #1
 801714a:	68a3      	ldr	r3, [r4, #8]
 801714c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017150:	3b01      	subs	r3, #1
 8017152:	60a3      	str	r3, [r4, #8]
 8017154:	bb39      	cbnz	r1, 80171a6 <_puts_r+0x9e>
 8017156:	2b00      	cmp	r3, #0
 8017158:	da38      	bge.n	80171cc <_puts_r+0xc4>
 801715a:	4622      	mov	r2, r4
 801715c:	210a      	movs	r1, #10
 801715e:	4628      	mov	r0, r5
 8017160:	f000 f918 	bl	8017394 <__swbuf_r>
 8017164:	3001      	adds	r0, #1
 8017166:	d011      	beq.n	801718c <_puts_r+0x84>
 8017168:	250a      	movs	r5, #10
 801716a:	e011      	b.n	8017190 <_puts_r+0x88>
 801716c:	4b1b      	ldr	r3, [pc, #108]	; (80171dc <_puts_r+0xd4>)
 801716e:	429c      	cmp	r4, r3
 8017170:	d101      	bne.n	8017176 <_puts_r+0x6e>
 8017172:	68ac      	ldr	r4, [r5, #8]
 8017174:	e7da      	b.n	801712c <_puts_r+0x24>
 8017176:	4b1a      	ldr	r3, [pc, #104]	; (80171e0 <_puts_r+0xd8>)
 8017178:	429c      	cmp	r4, r3
 801717a:	bf08      	it	eq
 801717c:	68ec      	ldreq	r4, [r5, #12]
 801717e:	e7d5      	b.n	801712c <_puts_r+0x24>
 8017180:	4621      	mov	r1, r4
 8017182:	4628      	mov	r0, r5
 8017184:	f000 f96a 	bl	801745c <__swsetup_r>
 8017188:	2800      	cmp	r0, #0
 801718a:	d0dd      	beq.n	8017148 <_puts_r+0x40>
 801718c:	f04f 35ff 	mov.w	r5, #4294967295
 8017190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017192:	07da      	lsls	r2, r3, #31
 8017194:	d405      	bmi.n	80171a2 <_puts_r+0x9a>
 8017196:	89a3      	ldrh	r3, [r4, #12]
 8017198:	059b      	lsls	r3, r3, #22
 801719a:	d402      	bmi.n	80171a2 <_puts_r+0x9a>
 801719c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801719e:	f7ff fe85 	bl	8016eac <__retarget_lock_release_recursive>
 80171a2:	4628      	mov	r0, r5
 80171a4:	bd70      	pop	{r4, r5, r6, pc}
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	da04      	bge.n	80171b4 <_puts_r+0xac>
 80171aa:	69a2      	ldr	r2, [r4, #24]
 80171ac:	429a      	cmp	r2, r3
 80171ae:	dc06      	bgt.n	80171be <_puts_r+0xb6>
 80171b0:	290a      	cmp	r1, #10
 80171b2:	d004      	beq.n	80171be <_puts_r+0xb6>
 80171b4:	6823      	ldr	r3, [r4, #0]
 80171b6:	1c5a      	adds	r2, r3, #1
 80171b8:	6022      	str	r2, [r4, #0]
 80171ba:	7019      	strb	r1, [r3, #0]
 80171bc:	e7c5      	b.n	801714a <_puts_r+0x42>
 80171be:	4622      	mov	r2, r4
 80171c0:	4628      	mov	r0, r5
 80171c2:	f000 f8e7 	bl	8017394 <__swbuf_r>
 80171c6:	3001      	adds	r0, #1
 80171c8:	d1bf      	bne.n	801714a <_puts_r+0x42>
 80171ca:	e7df      	b.n	801718c <_puts_r+0x84>
 80171cc:	6823      	ldr	r3, [r4, #0]
 80171ce:	250a      	movs	r5, #10
 80171d0:	1c5a      	adds	r2, r3, #1
 80171d2:	6022      	str	r2, [r4, #0]
 80171d4:	701d      	strb	r5, [r3, #0]
 80171d6:	e7db      	b.n	8017190 <_puts_r+0x88>
 80171d8:	0801905c 	.word	0x0801905c
 80171dc:	0801907c 	.word	0x0801907c
 80171e0:	0801903c 	.word	0x0801903c

080171e4 <puts>:
 80171e4:	4b02      	ldr	r3, [pc, #8]	; (80171f0 <puts+0xc>)
 80171e6:	4601      	mov	r1, r0
 80171e8:	6818      	ldr	r0, [r3, #0]
 80171ea:	f7ff bf8d 	b.w	8017108 <_puts_r>
 80171ee:	bf00      	nop
 80171f0:	200005bc 	.word	0x200005bc

080171f4 <_sbrk_r>:
 80171f4:	b538      	push	{r3, r4, r5, lr}
 80171f6:	4d06      	ldr	r5, [pc, #24]	; (8017210 <_sbrk_r+0x1c>)
 80171f8:	2300      	movs	r3, #0
 80171fa:	4604      	mov	r4, r0
 80171fc:	4608      	mov	r0, r1
 80171fe:	602b      	str	r3, [r5, #0]
 8017200:	f7ea fc58 	bl	8001ab4 <_sbrk>
 8017204:	1c43      	adds	r3, r0, #1
 8017206:	d102      	bne.n	801720e <_sbrk_r+0x1a>
 8017208:	682b      	ldr	r3, [r5, #0]
 801720a:	b103      	cbz	r3, 801720e <_sbrk_r+0x1a>
 801720c:	6023      	str	r3, [r4, #0]
 801720e:	bd38      	pop	{r3, r4, r5, pc}
 8017210:	20006f10 	.word	0x20006f10

08017214 <_raise_r>:
 8017214:	291f      	cmp	r1, #31
 8017216:	b538      	push	{r3, r4, r5, lr}
 8017218:	4604      	mov	r4, r0
 801721a:	460d      	mov	r5, r1
 801721c:	d904      	bls.n	8017228 <_raise_r+0x14>
 801721e:	2316      	movs	r3, #22
 8017220:	6003      	str	r3, [r0, #0]
 8017222:	f04f 30ff 	mov.w	r0, #4294967295
 8017226:	bd38      	pop	{r3, r4, r5, pc}
 8017228:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801722a:	b112      	cbz	r2, 8017232 <_raise_r+0x1e>
 801722c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017230:	b94b      	cbnz	r3, 8017246 <_raise_r+0x32>
 8017232:	4620      	mov	r0, r4
 8017234:	f000 f830 	bl	8017298 <_getpid_r>
 8017238:	462a      	mov	r2, r5
 801723a:	4601      	mov	r1, r0
 801723c:	4620      	mov	r0, r4
 801723e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017242:	f000 b817 	b.w	8017274 <_kill_r>
 8017246:	2b01      	cmp	r3, #1
 8017248:	d00a      	beq.n	8017260 <_raise_r+0x4c>
 801724a:	1c59      	adds	r1, r3, #1
 801724c:	d103      	bne.n	8017256 <_raise_r+0x42>
 801724e:	2316      	movs	r3, #22
 8017250:	6003      	str	r3, [r0, #0]
 8017252:	2001      	movs	r0, #1
 8017254:	e7e7      	b.n	8017226 <_raise_r+0x12>
 8017256:	2400      	movs	r4, #0
 8017258:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801725c:	4628      	mov	r0, r5
 801725e:	4798      	blx	r3
 8017260:	2000      	movs	r0, #0
 8017262:	e7e0      	b.n	8017226 <_raise_r+0x12>

08017264 <raise>:
 8017264:	4b02      	ldr	r3, [pc, #8]	; (8017270 <raise+0xc>)
 8017266:	4601      	mov	r1, r0
 8017268:	6818      	ldr	r0, [r3, #0]
 801726a:	f7ff bfd3 	b.w	8017214 <_raise_r>
 801726e:	bf00      	nop
 8017270:	200005bc 	.word	0x200005bc

08017274 <_kill_r>:
 8017274:	b538      	push	{r3, r4, r5, lr}
 8017276:	4d07      	ldr	r5, [pc, #28]	; (8017294 <_kill_r+0x20>)
 8017278:	2300      	movs	r3, #0
 801727a:	4604      	mov	r4, r0
 801727c:	4608      	mov	r0, r1
 801727e:	4611      	mov	r1, r2
 8017280:	602b      	str	r3, [r5, #0]
 8017282:	f000 ff7f 	bl	8018184 <_kill>
 8017286:	1c43      	adds	r3, r0, #1
 8017288:	d102      	bne.n	8017290 <_kill_r+0x1c>
 801728a:	682b      	ldr	r3, [r5, #0]
 801728c:	b103      	cbz	r3, 8017290 <_kill_r+0x1c>
 801728e:	6023      	str	r3, [r4, #0]
 8017290:	bd38      	pop	{r3, r4, r5, pc}
 8017292:	bf00      	nop
 8017294:	20006f10 	.word	0x20006f10

08017298 <_getpid_r>:
 8017298:	f7ff babe 	b.w	8016818 <_getpid>

0801729c <__sread>:
 801729c:	b510      	push	{r4, lr}
 801729e:	460c      	mov	r4, r1
 80172a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172a4:	f000 fee8 	bl	8018078 <_read_r>
 80172a8:	2800      	cmp	r0, #0
 80172aa:	bfab      	itete	ge
 80172ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80172ae:	89a3      	ldrhlt	r3, [r4, #12]
 80172b0:	181b      	addge	r3, r3, r0
 80172b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80172b6:	bfac      	ite	ge
 80172b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80172ba:	81a3      	strhlt	r3, [r4, #12]
 80172bc:	bd10      	pop	{r4, pc}

080172be <__swrite>:
 80172be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c2:	461f      	mov	r7, r3
 80172c4:	898b      	ldrh	r3, [r1, #12]
 80172c6:	05db      	lsls	r3, r3, #23
 80172c8:	4605      	mov	r5, r0
 80172ca:	460c      	mov	r4, r1
 80172cc:	4616      	mov	r6, r2
 80172ce:	d505      	bpl.n	80172dc <__swrite+0x1e>
 80172d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172d4:	2302      	movs	r3, #2
 80172d6:	2200      	movs	r2, #0
 80172d8:	f000 fa00 	bl	80176dc <_lseek_r>
 80172dc:	89a3      	ldrh	r3, [r4, #12]
 80172de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80172e6:	81a3      	strh	r3, [r4, #12]
 80172e8:	4632      	mov	r2, r6
 80172ea:	463b      	mov	r3, r7
 80172ec:	4628      	mov	r0, r5
 80172ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172f2:	f000 b8a1 	b.w	8017438 <_write_r>

080172f6 <__sseek>:
 80172f6:	b510      	push	{r4, lr}
 80172f8:	460c      	mov	r4, r1
 80172fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172fe:	f000 f9ed 	bl	80176dc <_lseek_r>
 8017302:	1c43      	adds	r3, r0, #1
 8017304:	89a3      	ldrh	r3, [r4, #12]
 8017306:	bf15      	itete	ne
 8017308:	6560      	strne	r0, [r4, #84]	; 0x54
 801730a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801730e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017312:	81a3      	strheq	r3, [r4, #12]
 8017314:	bf18      	it	ne
 8017316:	81a3      	strhne	r3, [r4, #12]
 8017318:	bd10      	pop	{r4, pc}

0801731a <__sclose>:
 801731a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801731e:	f000 b90b 	b.w	8017538 <_close_r>

08017322 <_vsniprintf_r>:
 8017322:	b530      	push	{r4, r5, lr}
 8017324:	4614      	mov	r4, r2
 8017326:	2c00      	cmp	r4, #0
 8017328:	b09b      	sub	sp, #108	; 0x6c
 801732a:	4605      	mov	r5, r0
 801732c:	461a      	mov	r2, r3
 801732e:	da05      	bge.n	801733c <_vsniprintf_r+0x1a>
 8017330:	238b      	movs	r3, #139	; 0x8b
 8017332:	6003      	str	r3, [r0, #0]
 8017334:	f04f 30ff 	mov.w	r0, #4294967295
 8017338:	b01b      	add	sp, #108	; 0x6c
 801733a:	bd30      	pop	{r4, r5, pc}
 801733c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017340:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017344:	bf14      	ite	ne
 8017346:	f104 33ff 	addne.w	r3, r4, #4294967295
 801734a:	4623      	moveq	r3, r4
 801734c:	9302      	str	r3, [sp, #8]
 801734e:	9305      	str	r3, [sp, #20]
 8017350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017354:	9100      	str	r1, [sp, #0]
 8017356:	9104      	str	r1, [sp, #16]
 8017358:	f8ad 300e 	strh.w	r3, [sp, #14]
 801735c:	4669      	mov	r1, sp
 801735e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017360:	f000 fa9c 	bl	801789c <_svfiprintf_r>
 8017364:	1c43      	adds	r3, r0, #1
 8017366:	bfbc      	itt	lt
 8017368:	238b      	movlt	r3, #139	; 0x8b
 801736a:	602b      	strlt	r3, [r5, #0]
 801736c:	2c00      	cmp	r4, #0
 801736e:	d0e3      	beq.n	8017338 <_vsniprintf_r+0x16>
 8017370:	9b00      	ldr	r3, [sp, #0]
 8017372:	2200      	movs	r2, #0
 8017374:	701a      	strb	r2, [r3, #0]
 8017376:	e7df      	b.n	8017338 <_vsniprintf_r+0x16>

08017378 <vsniprintf>:
 8017378:	b507      	push	{r0, r1, r2, lr}
 801737a:	9300      	str	r3, [sp, #0]
 801737c:	4613      	mov	r3, r2
 801737e:	460a      	mov	r2, r1
 8017380:	4601      	mov	r1, r0
 8017382:	4803      	ldr	r0, [pc, #12]	; (8017390 <vsniprintf+0x18>)
 8017384:	6800      	ldr	r0, [r0, #0]
 8017386:	f7ff ffcc 	bl	8017322 <_vsniprintf_r>
 801738a:	b003      	add	sp, #12
 801738c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017390:	200005bc 	.word	0x200005bc

08017394 <__swbuf_r>:
 8017394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017396:	460e      	mov	r6, r1
 8017398:	4614      	mov	r4, r2
 801739a:	4605      	mov	r5, r0
 801739c:	b118      	cbz	r0, 80173a6 <__swbuf_r+0x12>
 801739e:	6983      	ldr	r3, [r0, #24]
 80173a0:	b90b      	cbnz	r3, 80173a6 <__swbuf_r+0x12>
 80173a2:	f7ff fcbf 	bl	8016d24 <__sinit>
 80173a6:	4b21      	ldr	r3, [pc, #132]	; (801742c <__swbuf_r+0x98>)
 80173a8:	429c      	cmp	r4, r3
 80173aa:	d12b      	bne.n	8017404 <__swbuf_r+0x70>
 80173ac:	686c      	ldr	r4, [r5, #4]
 80173ae:	69a3      	ldr	r3, [r4, #24]
 80173b0:	60a3      	str	r3, [r4, #8]
 80173b2:	89a3      	ldrh	r3, [r4, #12]
 80173b4:	071a      	lsls	r2, r3, #28
 80173b6:	d52f      	bpl.n	8017418 <__swbuf_r+0x84>
 80173b8:	6923      	ldr	r3, [r4, #16]
 80173ba:	b36b      	cbz	r3, 8017418 <__swbuf_r+0x84>
 80173bc:	6923      	ldr	r3, [r4, #16]
 80173be:	6820      	ldr	r0, [r4, #0]
 80173c0:	1ac0      	subs	r0, r0, r3
 80173c2:	6963      	ldr	r3, [r4, #20]
 80173c4:	b2f6      	uxtb	r6, r6
 80173c6:	4283      	cmp	r3, r0
 80173c8:	4637      	mov	r7, r6
 80173ca:	dc04      	bgt.n	80173d6 <__swbuf_r+0x42>
 80173cc:	4621      	mov	r1, r4
 80173ce:	4628      	mov	r0, r5
 80173d0:	f000 f948 	bl	8017664 <_fflush_r>
 80173d4:	bb30      	cbnz	r0, 8017424 <__swbuf_r+0x90>
 80173d6:	68a3      	ldr	r3, [r4, #8]
 80173d8:	3b01      	subs	r3, #1
 80173da:	60a3      	str	r3, [r4, #8]
 80173dc:	6823      	ldr	r3, [r4, #0]
 80173de:	1c5a      	adds	r2, r3, #1
 80173e0:	6022      	str	r2, [r4, #0]
 80173e2:	701e      	strb	r6, [r3, #0]
 80173e4:	6963      	ldr	r3, [r4, #20]
 80173e6:	3001      	adds	r0, #1
 80173e8:	4283      	cmp	r3, r0
 80173ea:	d004      	beq.n	80173f6 <__swbuf_r+0x62>
 80173ec:	89a3      	ldrh	r3, [r4, #12]
 80173ee:	07db      	lsls	r3, r3, #31
 80173f0:	d506      	bpl.n	8017400 <__swbuf_r+0x6c>
 80173f2:	2e0a      	cmp	r6, #10
 80173f4:	d104      	bne.n	8017400 <__swbuf_r+0x6c>
 80173f6:	4621      	mov	r1, r4
 80173f8:	4628      	mov	r0, r5
 80173fa:	f000 f933 	bl	8017664 <_fflush_r>
 80173fe:	b988      	cbnz	r0, 8017424 <__swbuf_r+0x90>
 8017400:	4638      	mov	r0, r7
 8017402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017404:	4b0a      	ldr	r3, [pc, #40]	; (8017430 <__swbuf_r+0x9c>)
 8017406:	429c      	cmp	r4, r3
 8017408:	d101      	bne.n	801740e <__swbuf_r+0x7a>
 801740a:	68ac      	ldr	r4, [r5, #8]
 801740c:	e7cf      	b.n	80173ae <__swbuf_r+0x1a>
 801740e:	4b09      	ldr	r3, [pc, #36]	; (8017434 <__swbuf_r+0xa0>)
 8017410:	429c      	cmp	r4, r3
 8017412:	bf08      	it	eq
 8017414:	68ec      	ldreq	r4, [r5, #12]
 8017416:	e7ca      	b.n	80173ae <__swbuf_r+0x1a>
 8017418:	4621      	mov	r1, r4
 801741a:	4628      	mov	r0, r5
 801741c:	f000 f81e 	bl	801745c <__swsetup_r>
 8017420:	2800      	cmp	r0, #0
 8017422:	d0cb      	beq.n	80173bc <__swbuf_r+0x28>
 8017424:	f04f 37ff 	mov.w	r7, #4294967295
 8017428:	e7ea      	b.n	8017400 <__swbuf_r+0x6c>
 801742a:	bf00      	nop
 801742c:	0801905c 	.word	0x0801905c
 8017430:	0801907c 	.word	0x0801907c
 8017434:	0801903c 	.word	0x0801903c

08017438 <_write_r>:
 8017438:	b538      	push	{r3, r4, r5, lr}
 801743a:	4d07      	ldr	r5, [pc, #28]	; (8017458 <_write_r+0x20>)
 801743c:	4604      	mov	r4, r0
 801743e:	4608      	mov	r0, r1
 8017440:	4611      	mov	r1, r2
 8017442:	2200      	movs	r2, #0
 8017444:	602a      	str	r2, [r5, #0]
 8017446:	461a      	mov	r2, r3
 8017448:	f7ff f98f 	bl	801676a <_write>
 801744c:	1c43      	adds	r3, r0, #1
 801744e:	d102      	bne.n	8017456 <_write_r+0x1e>
 8017450:	682b      	ldr	r3, [r5, #0]
 8017452:	b103      	cbz	r3, 8017456 <_write_r+0x1e>
 8017454:	6023      	str	r3, [r4, #0]
 8017456:	bd38      	pop	{r3, r4, r5, pc}
 8017458:	20006f10 	.word	0x20006f10

0801745c <__swsetup_r>:
 801745c:	4b32      	ldr	r3, [pc, #200]	; (8017528 <__swsetup_r+0xcc>)
 801745e:	b570      	push	{r4, r5, r6, lr}
 8017460:	681d      	ldr	r5, [r3, #0]
 8017462:	4606      	mov	r6, r0
 8017464:	460c      	mov	r4, r1
 8017466:	b125      	cbz	r5, 8017472 <__swsetup_r+0x16>
 8017468:	69ab      	ldr	r3, [r5, #24]
 801746a:	b913      	cbnz	r3, 8017472 <__swsetup_r+0x16>
 801746c:	4628      	mov	r0, r5
 801746e:	f7ff fc59 	bl	8016d24 <__sinit>
 8017472:	4b2e      	ldr	r3, [pc, #184]	; (801752c <__swsetup_r+0xd0>)
 8017474:	429c      	cmp	r4, r3
 8017476:	d10f      	bne.n	8017498 <__swsetup_r+0x3c>
 8017478:	686c      	ldr	r4, [r5, #4]
 801747a:	89a3      	ldrh	r3, [r4, #12]
 801747c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017480:	0719      	lsls	r1, r3, #28
 8017482:	d42c      	bmi.n	80174de <__swsetup_r+0x82>
 8017484:	06dd      	lsls	r5, r3, #27
 8017486:	d411      	bmi.n	80174ac <__swsetup_r+0x50>
 8017488:	2309      	movs	r3, #9
 801748a:	6033      	str	r3, [r6, #0]
 801748c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017490:	81a3      	strh	r3, [r4, #12]
 8017492:	f04f 30ff 	mov.w	r0, #4294967295
 8017496:	e03e      	b.n	8017516 <__swsetup_r+0xba>
 8017498:	4b25      	ldr	r3, [pc, #148]	; (8017530 <__swsetup_r+0xd4>)
 801749a:	429c      	cmp	r4, r3
 801749c:	d101      	bne.n	80174a2 <__swsetup_r+0x46>
 801749e:	68ac      	ldr	r4, [r5, #8]
 80174a0:	e7eb      	b.n	801747a <__swsetup_r+0x1e>
 80174a2:	4b24      	ldr	r3, [pc, #144]	; (8017534 <__swsetup_r+0xd8>)
 80174a4:	429c      	cmp	r4, r3
 80174a6:	bf08      	it	eq
 80174a8:	68ec      	ldreq	r4, [r5, #12]
 80174aa:	e7e6      	b.n	801747a <__swsetup_r+0x1e>
 80174ac:	0758      	lsls	r0, r3, #29
 80174ae:	d512      	bpl.n	80174d6 <__swsetup_r+0x7a>
 80174b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80174b2:	b141      	cbz	r1, 80174c6 <__swsetup_r+0x6a>
 80174b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80174b8:	4299      	cmp	r1, r3
 80174ba:	d002      	beq.n	80174c2 <__swsetup_r+0x66>
 80174bc:	4630      	mov	r0, r6
 80174be:	f7ff fd2b 	bl	8016f18 <_free_r>
 80174c2:	2300      	movs	r3, #0
 80174c4:	6363      	str	r3, [r4, #52]	; 0x34
 80174c6:	89a3      	ldrh	r3, [r4, #12]
 80174c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80174cc:	81a3      	strh	r3, [r4, #12]
 80174ce:	2300      	movs	r3, #0
 80174d0:	6063      	str	r3, [r4, #4]
 80174d2:	6923      	ldr	r3, [r4, #16]
 80174d4:	6023      	str	r3, [r4, #0]
 80174d6:	89a3      	ldrh	r3, [r4, #12]
 80174d8:	f043 0308 	orr.w	r3, r3, #8
 80174dc:	81a3      	strh	r3, [r4, #12]
 80174de:	6923      	ldr	r3, [r4, #16]
 80174e0:	b94b      	cbnz	r3, 80174f6 <__swsetup_r+0x9a>
 80174e2:	89a3      	ldrh	r3, [r4, #12]
 80174e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80174e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80174ec:	d003      	beq.n	80174f6 <__swsetup_r+0x9a>
 80174ee:	4621      	mov	r1, r4
 80174f0:	4630      	mov	r0, r6
 80174f2:	f000 f92b 	bl	801774c <__smakebuf_r>
 80174f6:	89a0      	ldrh	r0, [r4, #12]
 80174f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80174fc:	f010 0301 	ands.w	r3, r0, #1
 8017500:	d00a      	beq.n	8017518 <__swsetup_r+0xbc>
 8017502:	2300      	movs	r3, #0
 8017504:	60a3      	str	r3, [r4, #8]
 8017506:	6963      	ldr	r3, [r4, #20]
 8017508:	425b      	negs	r3, r3
 801750a:	61a3      	str	r3, [r4, #24]
 801750c:	6923      	ldr	r3, [r4, #16]
 801750e:	b943      	cbnz	r3, 8017522 <__swsetup_r+0xc6>
 8017510:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017514:	d1ba      	bne.n	801748c <__swsetup_r+0x30>
 8017516:	bd70      	pop	{r4, r5, r6, pc}
 8017518:	0781      	lsls	r1, r0, #30
 801751a:	bf58      	it	pl
 801751c:	6963      	ldrpl	r3, [r4, #20]
 801751e:	60a3      	str	r3, [r4, #8]
 8017520:	e7f4      	b.n	801750c <__swsetup_r+0xb0>
 8017522:	2000      	movs	r0, #0
 8017524:	e7f7      	b.n	8017516 <__swsetup_r+0xba>
 8017526:	bf00      	nop
 8017528:	200005bc 	.word	0x200005bc
 801752c:	0801905c 	.word	0x0801905c
 8017530:	0801907c 	.word	0x0801907c
 8017534:	0801903c 	.word	0x0801903c

08017538 <_close_r>:
 8017538:	b538      	push	{r3, r4, r5, lr}
 801753a:	4d06      	ldr	r5, [pc, #24]	; (8017554 <_close_r+0x1c>)
 801753c:	2300      	movs	r3, #0
 801753e:	4604      	mov	r4, r0
 8017540:	4608      	mov	r0, r1
 8017542:	602b      	str	r3, [r5, #0]
 8017544:	f7ff f942 	bl	80167cc <_close>
 8017548:	1c43      	adds	r3, r0, #1
 801754a:	d102      	bne.n	8017552 <_close_r+0x1a>
 801754c:	682b      	ldr	r3, [r5, #0]
 801754e:	b103      	cbz	r3, 8017552 <_close_r+0x1a>
 8017550:	6023      	str	r3, [r4, #0]
 8017552:	bd38      	pop	{r3, r4, r5, pc}
 8017554:	20006f10 	.word	0x20006f10

08017558 <__sflush_r>:
 8017558:	898a      	ldrh	r2, [r1, #12]
 801755a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801755e:	4605      	mov	r5, r0
 8017560:	0710      	lsls	r0, r2, #28
 8017562:	460c      	mov	r4, r1
 8017564:	d458      	bmi.n	8017618 <__sflush_r+0xc0>
 8017566:	684b      	ldr	r3, [r1, #4]
 8017568:	2b00      	cmp	r3, #0
 801756a:	dc05      	bgt.n	8017578 <__sflush_r+0x20>
 801756c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801756e:	2b00      	cmp	r3, #0
 8017570:	dc02      	bgt.n	8017578 <__sflush_r+0x20>
 8017572:	2000      	movs	r0, #0
 8017574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801757a:	2e00      	cmp	r6, #0
 801757c:	d0f9      	beq.n	8017572 <__sflush_r+0x1a>
 801757e:	2300      	movs	r3, #0
 8017580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017584:	682f      	ldr	r7, [r5, #0]
 8017586:	602b      	str	r3, [r5, #0]
 8017588:	d032      	beq.n	80175f0 <__sflush_r+0x98>
 801758a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801758c:	89a3      	ldrh	r3, [r4, #12]
 801758e:	075a      	lsls	r2, r3, #29
 8017590:	d505      	bpl.n	801759e <__sflush_r+0x46>
 8017592:	6863      	ldr	r3, [r4, #4]
 8017594:	1ac0      	subs	r0, r0, r3
 8017596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017598:	b10b      	cbz	r3, 801759e <__sflush_r+0x46>
 801759a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801759c:	1ac0      	subs	r0, r0, r3
 801759e:	2300      	movs	r3, #0
 80175a0:	4602      	mov	r2, r0
 80175a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175a4:	6a21      	ldr	r1, [r4, #32]
 80175a6:	4628      	mov	r0, r5
 80175a8:	47b0      	blx	r6
 80175aa:	1c43      	adds	r3, r0, #1
 80175ac:	89a3      	ldrh	r3, [r4, #12]
 80175ae:	d106      	bne.n	80175be <__sflush_r+0x66>
 80175b0:	6829      	ldr	r1, [r5, #0]
 80175b2:	291d      	cmp	r1, #29
 80175b4:	d82c      	bhi.n	8017610 <__sflush_r+0xb8>
 80175b6:	4a2a      	ldr	r2, [pc, #168]	; (8017660 <__sflush_r+0x108>)
 80175b8:	40ca      	lsrs	r2, r1
 80175ba:	07d6      	lsls	r6, r2, #31
 80175bc:	d528      	bpl.n	8017610 <__sflush_r+0xb8>
 80175be:	2200      	movs	r2, #0
 80175c0:	6062      	str	r2, [r4, #4]
 80175c2:	04d9      	lsls	r1, r3, #19
 80175c4:	6922      	ldr	r2, [r4, #16]
 80175c6:	6022      	str	r2, [r4, #0]
 80175c8:	d504      	bpl.n	80175d4 <__sflush_r+0x7c>
 80175ca:	1c42      	adds	r2, r0, #1
 80175cc:	d101      	bne.n	80175d2 <__sflush_r+0x7a>
 80175ce:	682b      	ldr	r3, [r5, #0]
 80175d0:	b903      	cbnz	r3, 80175d4 <__sflush_r+0x7c>
 80175d2:	6560      	str	r0, [r4, #84]	; 0x54
 80175d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80175d6:	602f      	str	r7, [r5, #0]
 80175d8:	2900      	cmp	r1, #0
 80175da:	d0ca      	beq.n	8017572 <__sflush_r+0x1a>
 80175dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80175e0:	4299      	cmp	r1, r3
 80175e2:	d002      	beq.n	80175ea <__sflush_r+0x92>
 80175e4:	4628      	mov	r0, r5
 80175e6:	f7ff fc97 	bl	8016f18 <_free_r>
 80175ea:	2000      	movs	r0, #0
 80175ec:	6360      	str	r0, [r4, #52]	; 0x34
 80175ee:	e7c1      	b.n	8017574 <__sflush_r+0x1c>
 80175f0:	6a21      	ldr	r1, [r4, #32]
 80175f2:	2301      	movs	r3, #1
 80175f4:	4628      	mov	r0, r5
 80175f6:	47b0      	blx	r6
 80175f8:	1c41      	adds	r1, r0, #1
 80175fa:	d1c7      	bne.n	801758c <__sflush_r+0x34>
 80175fc:	682b      	ldr	r3, [r5, #0]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d0c4      	beq.n	801758c <__sflush_r+0x34>
 8017602:	2b1d      	cmp	r3, #29
 8017604:	d001      	beq.n	801760a <__sflush_r+0xb2>
 8017606:	2b16      	cmp	r3, #22
 8017608:	d101      	bne.n	801760e <__sflush_r+0xb6>
 801760a:	602f      	str	r7, [r5, #0]
 801760c:	e7b1      	b.n	8017572 <__sflush_r+0x1a>
 801760e:	89a3      	ldrh	r3, [r4, #12]
 8017610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017614:	81a3      	strh	r3, [r4, #12]
 8017616:	e7ad      	b.n	8017574 <__sflush_r+0x1c>
 8017618:	690f      	ldr	r7, [r1, #16]
 801761a:	2f00      	cmp	r7, #0
 801761c:	d0a9      	beq.n	8017572 <__sflush_r+0x1a>
 801761e:	0793      	lsls	r3, r2, #30
 8017620:	680e      	ldr	r6, [r1, #0]
 8017622:	bf08      	it	eq
 8017624:	694b      	ldreq	r3, [r1, #20]
 8017626:	600f      	str	r7, [r1, #0]
 8017628:	bf18      	it	ne
 801762a:	2300      	movne	r3, #0
 801762c:	eba6 0807 	sub.w	r8, r6, r7
 8017630:	608b      	str	r3, [r1, #8]
 8017632:	f1b8 0f00 	cmp.w	r8, #0
 8017636:	dd9c      	ble.n	8017572 <__sflush_r+0x1a>
 8017638:	6a21      	ldr	r1, [r4, #32]
 801763a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801763c:	4643      	mov	r3, r8
 801763e:	463a      	mov	r2, r7
 8017640:	4628      	mov	r0, r5
 8017642:	47b0      	blx	r6
 8017644:	2800      	cmp	r0, #0
 8017646:	dc06      	bgt.n	8017656 <__sflush_r+0xfe>
 8017648:	89a3      	ldrh	r3, [r4, #12]
 801764a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801764e:	81a3      	strh	r3, [r4, #12]
 8017650:	f04f 30ff 	mov.w	r0, #4294967295
 8017654:	e78e      	b.n	8017574 <__sflush_r+0x1c>
 8017656:	4407      	add	r7, r0
 8017658:	eba8 0800 	sub.w	r8, r8, r0
 801765c:	e7e9      	b.n	8017632 <__sflush_r+0xda>
 801765e:	bf00      	nop
 8017660:	20400001 	.word	0x20400001

08017664 <_fflush_r>:
 8017664:	b538      	push	{r3, r4, r5, lr}
 8017666:	690b      	ldr	r3, [r1, #16]
 8017668:	4605      	mov	r5, r0
 801766a:	460c      	mov	r4, r1
 801766c:	b913      	cbnz	r3, 8017674 <_fflush_r+0x10>
 801766e:	2500      	movs	r5, #0
 8017670:	4628      	mov	r0, r5
 8017672:	bd38      	pop	{r3, r4, r5, pc}
 8017674:	b118      	cbz	r0, 801767e <_fflush_r+0x1a>
 8017676:	6983      	ldr	r3, [r0, #24]
 8017678:	b90b      	cbnz	r3, 801767e <_fflush_r+0x1a>
 801767a:	f7ff fb53 	bl	8016d24 <__sinit>
 801767e:	4b14      	ldr	r3, [pc, #80]	; (80176d0 <_fflush_r+0x6c>)
 8017680:	429c      	cmp	r4, r3
 8017682:	d11b      	bne.n	80176bc <_fflush_r+0x58>
 8017684:	686c      	ldr	r4, [r5, #4]
 8017686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d0ef      	beq.n	801766e <_fflush_r+0xa>
 801768e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017690:	07d0      	lsls	r0, r2, #31
 8017692:	d404      	bmi.n	801769e <_fflush_r+0x3a>
 8017694:	0599      	lsls	r1, r3, #22
 8017696:	d402      	bmi.n	801769e <_fflush_r+0x3a>
 8017698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801769a:	f7ff fc06 	bl	8016eaa <__retarget_lock_acquire_recursive>
 801769e:	4628      	mov	r0, r5
 80176a0:	4621      	mov	r1, r4
 80176a2:	f7ff ff59 	bl	8017558 <__sflush_r>
 80176a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80176a8:	07da      	lsls	r2, r3, #31
 80176aa:	4605      	mov	r5, r0
 80176ac:	d4e0      	bmi.n	8017670 <_fflush_r+0xc>
 80176ae:	89a3      	ldrh	r3, [r4, #12]
 80176b0:	059b      	lsls	r3, r3, #22
 80176b2:	d4dd      	bmi.n	8017670 <_fflush_r+0xc>
 80176b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176b6:	f7ff fbf9 	bl	8016eac <__retarget_lock_release_recursive>
 80176ba:	e7d9      	b.n	8017670 <_fflush_r+0xc>
 80176bc:	4b05      	ldr	r3, [pc, #20]	; (80176d4 <_fflush_r+0x70>)
 80176be:	429c      	cmp	r4, r3
 80176c0:	d101      	bne.n	80176c6 <_fflush_r+0x62>
 80176c2:	68ac      	ldr	r4, [r5, #8]
 80176c4:	e7df      	b.n	8017686 <_fflush_r+0x22>
 80176c6:	4b04      	ldr	r3, [pc, #16]	; (80176d8 <_fflush_r+0x74>)
 80176c8:	429c      	cmp	r4, r3
 80176ca:	bf08      	it	eq
 80176cc:	68ec      	ldreq	r4, [r5, #12]
 80176ce:	e7da      	b.n	8017686 <_fflush_r+0x22>
 80176d0:	0801905c 	.word	0x0801905c
 80176d4:	0801907c 	.word	0x0801907c
 80176d8:	0801903c 	.word	0x0801903c

080176dc <_lseek_r>:
 80176dc:	b538      	push	{r3, r4, r5, lr}
 80176de:	4d07      	ldr	r5, [pc, #28]	; (80176fc <_lseek_r+0x20>)
 80176e0:	4604      	mov	r4, r0
 80176e2:	4608      	mov	r0, r1
 80176e4:	4611      	mov	r1, r2
 80176e6:	2200      	movs	r2, #0
 80176e8:	602a      	str	r2, [r5, #0]
 80176ea:	461a      	mov	r2, r3
 80176ec:	f7ff f82b 	bl	8016746 <_lseek>
 80176f0:	1c43      	adds	r3, r0, #1
 80176f2:	d102      	bne.n	80176fa <_lseek_r+0x1e>
 80176f4:	682b      	ldr	r3, [r5, #0]
 80176f6:	b103      	cbz	r3, 80176fa <_lseek_r+0x1e>
 80176f8:	6023      	str	r3, [r4, #0]
 80176fa:	bd38      	pop	{r3, r4, r5, pc}
 80176fc:	20006f10 	.word	0x20006f10

08017700 <__swhatbuf_r>:
 8017700:	b570      	push	{r4, r5, r6, lr}
 8017702:	460e      	mov	r6, r1
 8017704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017708:	2900      	cmp	r1, #0
 801770a:	b096      	sub	sp, #88	; 0x58
 801770c:	4614      	mov	r4, r2
 801770e:	461d      	mov	r5, r3
 8017710:	da08      	bge.n	8017724 <__swhatbuf_r+0x24>
 8017712:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017716:	2200      	movs	r2, #0
 8017718:	602a      	str	r2, [r5, #0]
 801771a:	061a      	lsls	r2, r3, #24
 801771c:	d410      	bmi.n	8017740 <__swhatbuf_r+0x40>
 801771e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017722:	e00e      	b.n	8017742 <__swhatbuf_r+0x42>
 8017724:	466a      	mov	r2, sp
 8017726:	f000 fcb9 	bl	801809c <_fstat_r>
 801772a:	2800      	cmp	r0, #0
 801772c:	dbf1      	blt.n	8017712 <__swhatbuf_r+0x12>
 801772e:	9a01      	ldr	r2, [sp, #4]
 8017730:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017734:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017738:	425a      	negs	r2, r3
 801773a:	415a      	adcs	r2, r3
 801773c:	602a      	str	r2, [r5, #0]
 801773e:	e7ee      	b.n	801771e <__swhatbuf_r+0x1e>
 8017740:	2340      	movs	r3, #64	; 0x40
 8017742:	2000      	movs	r0, #0
 8017744:	6023      	str	r3, [r4, #0]
 8017746:	b016      	add	sp, #88	; 0x58
 8017748:	bd70      	pop	{r4, r5, r6, pc}
	...

0801774c <__smakebuf_r>:
 801774c:	898b      	ldrh	r3, [r1, #12]
 801774e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017750:	079d      	lsls	r5, r3, #30
 8017752:	4606      	mov	r6, r0
 8017754:	460c      	mov	r4, r1
 8017756:	d507      	bpl.n	8017768 <__smakebuf_r+0x1c>
 8017758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801775c:	6023      	str	r3, [r4, #0]
 801775e:	6123      	str	r3, [r4, #16]
 8017760:	2301      	movs	r3, #1
 8017762:	6163      	str	r3, [r4, #20]
 8017764:	b002      	add	sp, #8
 8017766:	bd70      	pop	{r4, r5, r6, pc}
 8017768:	ab01      	add	r3, sp, #4
 801776a:	466a      	mov	r2, sp
 801776c:	f7ff ffc8 	bl	8017700 <__swhatbuf_r>
 8017770:	9900      	ldr	r1, [sp, #0]
 8017772:	4605      	mov	r5, r0
 8017774:	4630      	mov	r0, r6
 8017776:	f7ff fc3b 	bl	8016ff0 <_malloc_r>
 801777a:	b948      	cbnz	r0, 8017790 <__smakebuf_r+0x44>
 801777c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017780:	059a      	lsls	r2, r3, #22
 8017782:	d4ef      	bmi.n	8017764 <__smakebuf_r+0x18>
 8017784:	f023 0303 	bic.w	r3, r3, #3
 8017788:	f043 0302 	orr.w	r3, r3, #2
 801778c:	81a3      	strh	r3, [r4, #12]
 801778e:	e7e3      	b.n	8017758 <__smakebuf_r+0xc>
 8017790:	4b0d      	ldr	r3, [pc, #52]	; (80177c8 <__smakebuf_r+0x7c>)
 8017792:	62b3      	str	r3, [r6, #40]	; 0x28
 8017794:	89a3      	ldrh	r3, [r4, #12]
 8017796:	6020      	str	r0, [r4, #0]
 8017798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801779c:	81a3      	strh	r3, [r4, #12]
 801779e:	9b00      	ldr	r3, [sp, #0]
 80177a0:	6163      	str	r3, [r4, #20]
 80177a2:	9b01      	ldr	r3, [sp, #4]
 80177a4:	6120      	str	r0, [r4, #16]
 80177a6:	b15b      	cbz	r3, 80177c0 <__smakebuf_r+0x74>
 80177a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80177ac:	4630      	mov	r0, r6
 80177ae:	f000 fc87 	bl	80180c0 <_isatty_r>
 80177b2:	b128      	cbz	r0, 80177c0 <__smakebuf_r+0x74>
 80177b4:	89a3      	ldrh	r3, [r4, #12]
 80177b6:	f023 0303 	bic.w	r3, r3, #3
 80177ba:	f043 0301 	orr.w	r3, r3, #1
 80177be:	81a3      	strh	r3, [r4, #12]
 80177c0:	89a0      	ldrh	r0, [r4, #12]
 80177c2:	4305      	orrs	r5, r0
 80177c4:	81a5      	strh	r5, [r4, #12]
 80177c6:	e7cd      	b.n	8017764 <__smakebuf_r+0x18>
 80177c8:	08016cbd 	.word	0x08016cbd

080177cc <__malloc_lock>:
 80177cc:	4801      	ldr	r0, [pc, #4]	; (80177d4 <__malloc_lock+0x8>)
 80177ce:	f7ff bb6c 	b.w	8016eaa <__retarget_lock_acquire_recursive>
 80177d2:	bf00      	nop
 80177d4:	20006f04 	.word	0x20006f04

080177d8 <__malloc_unlock>:
 80177d8:	4801      	ldr	r0, [pc, #4]	; (80177e0 <__malloc_unlock+0x8>)
 80177da:	f7ff bb67 	b.w	8016eac <__retarget_lock_release_recursive>
 80177de:	bf00      	nop
 80177e0:	20006f04 	.word	0x20006f04

080177e4 <__ssputs_r>:
 80177e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177e8:	688e      	ldr	r6, [r1, #8]
 80177ea:	429e      	cmp	r6, r3
 80177ec:	4682      	mov	sl, r0
 80177ee:	460c      	mov	r4, r1
 80177f0:	4690      	mov	r8, r2
 80177f2:	461f      	mov	r7, r3
 80177f4:	d838      	bhi.n	8017868 <__ssputs_r+0x84>
 80177f6:	898a      	ldrh	r2, [r1, #12]
 80177f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80177fc:	d032      	beq.n	8017864 <__ssputs_r+0x80>
 80177fe:	6825      	ldr	r5, [r4, #0]
 8017800:	6909      	ldr	r1, [r1, #16]
 8017802:	eba5 0901 	sub.w	r9, r5, r1
 8017806:	6965      	ldr	r5, [r4, #20]
 8017808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801780c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017810:	3301      	adds	r3, #1
 8017812:	444b      	add	r3, r9
 8017814:	106d      	asrs	r5, r5, #1
 8017816:	429d      	cmp	r5, r3
 8017818:	bf38      	it	cc
 801781a:	461d      	movcc	r5, r3
 801781c:	0553      	lsls	r3, r2, #21
 801781e:	d531      	bpl.n	8017884 <__ssputs_r+0xa0>
 8017820:	4629      	mov	r1, r5
 8017822:	f7ff fbe5 	bl	8016ff0 <_malloc_r>
 8017826:	4606      	mov	r6, r0
 8017828:	b950      	cbnz	r0, 8017840 <__ssputs_r+0x5c>
 801782a:	230c      	movs	r3, #12
 801782c:	f8ca 3000 	str.w	r3, [sl]
 8017830:	89a3      	ldrh	r3, [r4, #12]
 8017832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017836:	81a3      	strh	r3, [r4, #12]
 8017838:	f04f 30ff 	mov.w	r0, #4294967295
 801783c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017840:	6921      	ldr	r1, [r4, #16]
 8017842:	464a      	mov	r2, r9
 8017844:	f7ff fb3c 	bl	8016ec0 <memcpy>
 8017848:	89a3      	ldrh	r3, [r4, #12]
 801784a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801784e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017852:	81a3      	strh	r3, [r4, #12]
 8017854:	6126      	str	r6, [r4, #16]
 8017856:	6165      	str	r5, [r4, #20]
 8017858:	444e      	add	r6, r9
 801785a:	eba5 0509 	sub.w	r5, r5, r9
 801785e:	6026      	str	r6, [r4, #0]
 8017860:	60a5      	str	r5, [r4, #8]
 8017862:	463e      	mov	r6, r7
 8017864:	42be      	cmp	r6, r7
 8017866:	d900      	bls.n	801786a <__ssputs_r+0x86>
 8017868:	463e      	mov	r6, r7
 801786a:	6820      	ldr	r0, [r4, #0]
 801786c:	4632      	mov	r2, r6
 801786e:	4641      	mov	r1, r8
 8017870:	f000 fc36 	bl	80180e0 <memmove>
 8017874:	68a3      	ldr	r3, [r4, #8]
 8017876:	1b9b      	subs	r3, r3, r6
 8017878:	60a3      	str	r3, [r4, #8]
 801787a:	6823      	ldr	r3, [r4, #0]
 801787c:	4433      	add	r3, r6
 801787e:	6023      	str	r3, [r4, #0]
 8017880:	2000      	movs	r0, #0
 8017882:	e7db      	b.n	801783c <__ssputs_r+0x58>
 8017884:	462a      	mov	r2, r5
 8017886:	f000 fc45 	bl	8018114 <_realloc_r>
 801788a:	4606      	mov	r6, r0
 801788c:	2800      	cmp	r0, #0
 801788e:	d1e1      	bne.n	8017854 <__ssputs_r+0x70>
 8017890:	6921      	ldr	r1, [r4, #16]
 8017892:	4650      	mov	r0, sl
 8017894:	f7ff fb40 	bl	8016f18 <_free_r>
 8017898:	e7c7      	b.n	801782a <__ssputs_r+0x46>
	...

0801789c <_svfiprintf_r>:
 801789c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178a0:	4698      	mov	r8, r3
 80178a2:	898b      	ldrh	r3, [r1, #12]
 80178a4:	061b      	lsls	r3, r3, #24
 80178a6:	b09d      	sub	sp, #116	; 0x74
 80178a8:	4607      	mov	r7, r0
 80178aa:	460d      	mov	r5, r1
 80178ac:	4614      	mov	r4, r2
 80178ae:	d50e      	bpl.n	80178ce <_svfiprintf_r+0x32>
 80178b0:	690b      	ldr	r3, [r1, #16]
 80178b2:	b963      	cbnz	r3, 80178ce <_svfiprintf_r+0x32>
 80178b4:	2140      	movs	r1, #64	; 0x40
 80178b6:	f7ff fb9b 	bl	8016ff0 <_malloc_r>
 80178ba:	6028      	str	r0, [r5, #0]
 80178bc:	6128      	str	r0, [r5, #16]
 80178be:	b920      	cbnz	r0, 80178ca <_svfiprintf_r+0x2e>
 80178c0:	230c      	movs	r3, #12
 80178c2:	603b      	str	r3, [r7, #0]
 80178c4:	f04f 30ff 	mov.w	r0, #4294967295
 80178c8:	e0d1      	b.n	8017a6e <_svfiprintf_r+0x1d2>
 80178ca:	2340      	movs	r3, #64	; 0x40
 80178cc:	616b      	str	r3, [r5, #20]
 80178ce:	2300      	movs	r3, #0
 80178d0:	9309      	str	r3, [sp, #36]	; 0x24
 80178d2:	2320      	movs	r3, #32
 80178d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80178d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80178dc:	2330      	movs	r3, #48	; 0x30
 80178de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017a88 <_svfiprintf_r+0x1ec>
 80178e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80178e6:	f04f 0901 	mov.w	r9, #1
 80178ea:	4623      	mov	r3, r4
 80178ec:	469a      	mov	sl, r3
 80178ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178f2:	b10a      	cbz	r2, 80178f8 <_svfiprintf_r+0x5c>
 80178f4:	2a25      	cmp	r2, #37	; 0x25
 80178f6:	d1f9      	bne.n	80178ec <_svfiprintf_r+0x50>
 80178f8:	ebba 0b04 	subs.w	fp, sl, r4
 80178fc:	d00b      	beq.n	8017916 <_svfiprintf_r+0x7a>
 80178fe:	465b      	mov	r3, fp
 8017900:	4622      	mov	r2, r4
 8017902:	4629      	mov	r1, r5
 8017904:	4638      	mov	r0, r7
 8017906:	f7ff ff6d 	bl	80177e4 <__ssputs_r>
 801790a:	3001      	adds	r0, #1
 801790c:	f000 80aa 	beq.w	8017a64 <_svfiprintf_r+0x1c8>
 8017910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017912:	445a      	add	r2, fp
 8017914:	9209      	str	r2, [sp, #36]	; 0x24
 8017916:	f89a 3000 	ldrb.w	r3, [sl]
 801791a:	2b00      	cmp	r3, #0
 801791c:	f000 80a2 	beq.w	8017a64 <_svfiprintf_r+0x1c8>
 8017920:	2300      	movs	r3, #0
 8017922:	f04f 32ff 	mov.w	r2, #4294967295
 8017926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801792a:	f10a 0a01 	add.w	sl, sl, #1
 801792e:	9304      	str	r3, [sp, #16]
 8017930:	9307      	str	r3, [sp, #28]
 8017932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017936:	931a      	str	r3, [sp, #104]	; 0x68
 8017938:	4654      	mov	r4, sl
 801793a:	2205      	movs	r2, #5
 801793c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017940:	4851      	ldr	r0, [pc, #324]	; (8017a88 <_svfiprintf_r+0x1ec>)
 8017942:	f7e8 fc4d 	bl	80001e0 <memchr>
 8017946:	9a04      	ldr	r2, [sp, #16]
 8017948:	b9d8      	cbnz	r0, 8017982 <_svfiprintf_r+0xe6>
 801794a:	06d0      	lsls	r0, r2, #27
 801794c:	bf44      	itt	mi
 801794e:	2320      	movmi	r3, #32
 8017950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017954:	0711      	lsls	r1, r2, #28
 8017956:	bf44      	itt	mi
 8017958:	232b      	movmi	r3, #43	; 0x2b
 801795a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801795e:	f89a 3000 	ldrb.w	r3, [sl]
 8017962:	2b2a      	cmp	r3, #42	; 0x2a
 8017964:	d015      	beq.n	8017992 <_svfiprintf_r+0xf6>
 8017966:	9a07      	ldr	r2, [sp, #28]
 8017968:	4654      	mov	r4, sl
 801796a:	2000      	movs	r0, #0
 801796c:	f04f 0c0a 	mov.w	ip, #10
 8017970:	4621      	mov	r1, r4
 8017972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017976:	3b30      	subs	r3, #48	; 0x30
 8017978:	2b09      	cmp	r3, #9
 801797a:	d94e      	bls.n	8017a1a <_svfiprintf_r+0x17e>
 801797c:	b1b0      	cbz	r0, 80179ac <_svfiprintf_r+0x110>
 801797e:	9207      	str	r2, [sp, #28]
 8017980:	e014      	b.n	80179ac <_svfiprintf_r+0x110>
 8017982:	eba0 0308 	sub.w	r3, r0, r8
 8017986:	fa09 f303 	lsl.w	r3, r9, r3
 801798a:	4313      	orrs	r3, r2
 801798c:	9304      	str	r3, [sp, #16]
 801798e:	46a2      	mov	sl, r4
 8017990:	e7d2      	b.n	8017938 <_svfiprintf_r+0x9c>
 8017992:	9b03      	ldr	r3, [sp, #12]
 8017994:	1d19      	adds	r1, r3, #4
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	9103      	str	r1, [sp, #12]
 801799a:	2b00      	cmp	r3, #0
 801799c:	bfbb      	ittet	lt
 801799e:	425b      	neglt	r3, r3
 80179a0:	f042 0202 	orrlt.w	r2, r2, #2
 80179a4:	9307      	strge	r3, [sp, #28]
 80179a6:	9307      	strlt	r3, [sp, #28]
 80179a8:	bfb8      	it	lt
 80179aa:	9204      	strlt	r2, [sp, #16]
 80179ac:	7823      	ldrb	r3, [r4, #0]
 80179ae:	2b2e      	cmp	r3, #46	; 0x2e
 80179b0:	d10c      	bne.n	80179cc <_svfiprintf_r+0x130>
 80179b2:	7863      	ldrb	r3, [r4, #1]
 80179b4:	2b2a      	cmp	r3, #42	; 0x2a
 80179b6:	d135      	bne.n	8017a24 <_svfiprintf_r+0x188>
 80179b8:	9b03      	ldr	r3, [sp, #12]
 80179ba:	1d1a      	adds	r2, r3, #4
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	9203      	str	r2, [sp, #12]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	bfb8      	it	lt
 80179c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80179c8:	3402      	adds	r4, #2
 80179ca:	9305      	str	r3, [sp, #20]
 80179cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017a98 <_svfiprintf_r+0x1fc>
 80179d0:	7821      	ldrb	r1, [r4, #0]
 80179d2:	2203      	movs	r2, #3
 80179d4:	4650      	mov	r0, sl
 80179d6:	f7e8 fc03 	bl	80001e0 <memchr>
 80179da:	b140      	cbz	r0, 80179ee <_svfiprintf_r+0x152>
 80179dc:	2340      	movs	r3, #64	; 0x40
 80179de:	eba0 000a 	sub.w	r0, r0, sl
 80179e2:	fa03 f000 	lsl.w	r0, r3, r0
 80179e6:	9b04      	ldr	r3, [sp, #16]
 80179e8:	4303      	orrs	r3, r0
 80179ea:	3401      	adds	r4, #1
 80179ec:	9304      	str	r3, [sp, #16]
 80179ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179f2:	4826      	ldr	r0, [pc, #152]	; (8017a8c <_svfiprintf_r+0x1f0>)
 80179f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80179f8:	2206      	movs	r2, #6
 80179fa:	f7e8 fbf1 	bl	80001e0 <memchr>
 80179fe:	2800      	cmp	r0, #0
 8017a00:	d038      	beq.n	8017a74 <_svfiprintf_r+0x1d8>
 8017a02:	4b23      	ldr	r3, [pc, #140]	; (8017a90 <_svfiprintf_r+0x1f4>)
 8017a04:	bb1b      	cbnz	r3, 8017a4e <_svfiprintf_r+0x1b2>
 8017a06:	9b03      	ldr	r3, [sp, #12]
 8017a08:	3307      	adds	r3, #7
 8017a0a:	f023 0307 	bic.w	r3, r3, #7
 8017a0e:	3308      	adds	r3, #8
 8017a10:	9303      	str	r3, [sp, #12]
 8017a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a14:	4433      	add	r3, r6
 8017a16:	9309      	str	r3, [sp, #36]	; 0x24
 8017a18:	e767      	b.n	80178ea <_svfiprintf_r+0x4e>
 8017a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a1e:	460c      	mov	r4, r1
 8017a20:	2001      	movs	r0, #1
 8017a22:	e7a5      	b.n	8017970 <_svfiprintf_r+0xd4>
 8017a24:	2300      	movs	r3, #0
 8017a26:	3401      	adds	r4, #1
 8017a28:	9305      	str	r3, [sp, #20]
 8017a2a:	4619      	mov	r1, r3
 8017a2c:	f04f 0c0a 	mov.w	ip, #10
 8017a30:	4620      	mov	r0, r4
 8017a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a36:	3a30      	subs	r2, #48	; 0x30
 8017a38:	2a09      	cmp	r2, #9
 8017a3a:	d903      	bls.n	8017a44 <_svfiprintf_r+0x1a8>
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d0c5      	beq.n	80179cc <_svfiprintf_r+0x130>
 8017a40:	9105      	str	r1, [sp, #20]
 8017a42:	e7c3      	b.n	80179cc <_svfiprintf_r+0x130>
 8017a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a48:	4604      	mov	r4, r0
 8017a4a:	2301      	movs	r3, #1
 8017a4c:	e7f0      	b.n	8017a30 <_svfiprintf_r+0x194>
 8017a4e:	ab03      	add	r3, sp, #12
 8017a50:	9300      	str	r3, [sp, #0]
 8017a52:	462a      	mov	r2, r5
 8017a54:	4b0f      	ldr	r3, [pc, #60]	; (8017a94 <_svfiprintf_r+0x1f8>)
 8017a56:	a904      	add	r1, sp, #16
 8017a58:	4638      	mov	r0, r7
 8017a5a:	f3af 8000 	nop.w
 8017a5e:	1c42      	adds	r2, r0, #1
 8017a60:	4606      	mov	r6, r0
 8017a62:	d1d6      	bne.n	8017a12 <_svfiprintf_r+0x176>
 8017a64:	89ab      	ldrh	r3, [r5, #12]
 8017a66:	065b      	lsls	r3, r3, #25
 8017a68:	f53f af2c 	bmi.w	80178c4 <_svfiprintf_r+0x28>
 8017a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a6e:	b01d      	add	sp, #116	; 0x74
 8017a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a74:	ab03      	add	r3, sp, #12
 8017a76:	9300      	str	r3, [sp, #0]
 8017a78:	462a      	mov	r2, r5
 8017a7a:	4b06      	ldr	r3, [pc, #24]	; (8017a94 <_svfiprintf_r+0x1f8>)
 8017a7c:	a904      	add	r1, sp, #16
 8017a7e:	4638      	mov	r0, r7
 8017a80:	f000 f9d4 	bl	8017e2c <_printf_i>
 8017a84:	e7eb      	b.n	8017a5e <_svfiprintf_r+0x1c2>
 8017a86:	bf00      	nop
 8017a88:	080190a0 	.word	0x080190a0
 8017a8c:	080190aa 	.word	0x080190aa
 8017a90:	00000000 	.word	0x00000000
 8017a94:	080177e5 	.word	0x080177e5
 8017a98:	080190a6 	.word	0x080190a6

08017a9c <__sfputc_r>:
 8017a9c:	6893      	ldr	r3, [r2, #8]
 8017a9e:	3b01      	subs	r3, #1
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	b410      	push	{r4}
 8017aa4:	6093      	str	r3, [r2, #8]
 8017aa6:	da08      	bge.n	8017aba <__sfputc_r+0x1e>
 8017aa8:	6994      	ldr	r4, [r2, #24]
 8017aaa:	42a3      	cmp	r3, r4
 8017aac:	db01      	blt.n	8017ab2 <__sfputc_r+0x16>
 8017aae:	290a      	cmp	r1, #10
 8017ab0:	d103      	bne.n	8017aba <__sfputc_r+0x1e>
 8017ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ab6:	f7ff bc6d 	b.w	8017394 <__swbuf_r>
 8017aba:	6813      	ldr	r3, [r2, #0]
 8017abc:	1c58      	adds	r0, r3, #1
 8017abe:	6010      	str	r0, [r2, #0]
 8017ac0:	7019      	strb	r1, [r3, #0]
 8017ac2:	4608      	mov	r0, r1
 8017ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ac8:	4770      	bx	lr

08017aca <__sfputs_r>:
 8017aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017acc:	4606      	mov	r6, r0
 8017ace:	460f      	mov	r7, r1
 8017ad0:	4614      	mov	r4, r2
 8017ad2:	18d5      	adds	r5, r2, r3
 8017ad4:	42ac      	cmp	r4, r5
 8017ad6:	d101      	bne.n	8017adc <__sfputs_r+0x12>
 8017ad8:	2000      	movs	r0, #0
 8017ada:	e007      	b.n	8017aec <__sfputs_r+0x22>
 8017adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ae0:	463a      	mov	r2, r7
 8017ae2:	4630      	mov	r0, r6
 8017ae4:	f7ff ffda 	bl	8017a9c <__sfputc_r>
 8017ae8:	1c43      	adds	r3, r0, #1
 8017aea:	d1f3      	bne.n	8017ad4 <__sfputs_r+0xa>
 8017aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017af0 <_vfiprintf_r>:
 8017af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017af4:	460d      	mov	r5, r1
 8017af6:	b09d      	sub	sp, #116	; 0x74
 8017af8:	4614      	mov	r4, r2
 8017afa:	4698      	mov	r8, r3
 8017afc:	4606      	mov	r6, r0
 8017afe:	b118      	cbz	r0, 8017b08 <_vfiprintf_r+0x18>
 8017b00:	6983      	ldr	r3, [r0, #24]
 8017b02:	b90b      	cbnz	r3, 8017b08 <_vfiprintf_r+0x18>
 8017b04:	f7ff f90e 	bl	8016d24 <__sinit>
 8017b08:	4b89      	ldr	r3, [pc, #548]	; (8017d30 <_vfiprintf_r+0x240>)
 8017b0a:	429d      	cmp	r5, r3
 8017b0c:	d11b      	bne.n	8017b46 <_vfiprintf_r+0x56>
 8017b0e:	6875      	ldr	r5, [r6, #4]
 8017b10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b12:	07d9      	lsls	r1, r3, #31
 8017b14:	d405      	bmi.n	8017b22 <_vfiprintf_r+0x32>
 8017b16:	89ab      	ldrh	r3, [r5, #12]
 8017b18:	059a      	lsls	r2, r3, #22
 8017b1a:	d402      	bmi.n	8017b22 <_vfiprintf_r+0x32>
 8017b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b1e:	f7ff f9c4 	bl	8016eaa <__retarget_lock_acquire_recursive>
 8017b22:	89ab      	ldrh	r3, [r5, #12]
 8017b24:	071b      	lsls	r3, r3, #28
 8017b26:	d501      	bpl.n	8017b2c <_vfiprintf_r+0x3c>
 8017b28:	692b      	ldr	r3, [r5, #16]
 8017b2a:	b9eb      	cbnz	r3, 8017b68 <_vfiprintf_r+0x78>
 8017b2c:	4629      	mov	r1, r5
 8017b2e:	4630      	mov	r0, r6
 8017b30:	f7ff fc94 	bl	801745c <__swsetup_r>
 8017b34:	b1c0      	cbz	r0, 8017b68 <_vfiprintf_r+0x78>
 8017b36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b38:	07dc      	lsls	r4, r3, #31
 8017b3a:	d50e      	bpl.n	8017b5a <_vfiprintf_r+0x6a>
 8017b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b40:	b01d      	add	sp, #116	; 0x74
 8017b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b46:	4b7b      	ldr	r3, [pc, #492]	; (8017d34 <_vfiprintf_r+0x244>)
 8017b48:	429d      	cmp	r5, r3
 8017b4a:	d101      	bne.n	8017b50 <_vfiprintf_r+0x60>
 8017b4c:	68b5      	ldr	r5, [r6, #8]
 8017b4e:	e7df      	b.n	8017b10 <_vfiprintf_r+0x20>
 8017b50:	4b79      	ldr	r3, [pc, #484]	; (8017d38 <_vfiprintf_r+0x248>)
 8017b52:	429d      	cmp	r5, r3
 8017b54:	bf08      	it	eq
 8017b56:	68f5      	ldreq	r5, [r6, #12]
 8017b58:	e7da      	b.n	8017b10 <_vfiprintf_r+0x20>
 8017b5a:	89ab      	ldrh	r3, [r5, #12]
 8017b5c:	0598      	lsls	r0, r3, #22
 8017b5e:	d4ed      	bmi.n	8017b3c <_vfiprintf_r+0x4c>
 8017b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b62:	f7ff f9a3 	bl	8016eac <__retarget_lock_release_recursive>
 8017b66:	e7e9      	b.n	8017b3c <_vfiprintf_r+0x4c>
 8017b68:	2300      	movs	r3, #0
 8017b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8017b6c:	2320      	movs	r3, #32
 8017b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b76:	2330      	movs	r3, #48	; 0x30
 8017b78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017d3c <_vfiprintf_r+0x24c>
 8017b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b80:	f04f 0901 	mov.w	r9, #1
 8017b84:	4623      	mov	r3, r4
 8017b86:	469a      	mov	sl, r3
 8017b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b8c:	b10a      	cbz	r2, 8017b92 <_vfiprintf_r+0xa2>
 8017b8e:	2a25      	cmp	r2, #37	; 0x25
 8017b90:	d1f9      	bne.n	8017b86 <_vfiprintf_r+0x96>
 8017b92:	ebba 0b04 	subs.w	fp, sl, r4
 8017b96:	d00b      	beq.n	8017bb0 <_vfiprintf_r+0xc0>
 8017b98:	465b      	mov	r3, fp
 8017b9a:	4622      	mov	r2, r4
 8017b9c:	4629      	mov	r1, r5
 8017b9e:	4630      	mov	r0, r6
 8017ba0:	f7ff ff93 	bl	8017aca <__sfputs_r>
 8017ba4:	3001      	adds	r0, #1
 8017ba6:	f000 80aa 	beq.w	8017cfe <_vfiprintf_r+0x20e>
 8017baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bac:	445a      	add	r2, fp
 8017bae:	9209      	str	r2, [sp, #36]	; 0x24
 8017bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	f000 80a2 	beq.w	8017cfe <_vfiprintf_r+0x20e>
 8017bba:	2300      	movs	r3, #0
 8017bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8017bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bc4:	f10a 0a01 	add.w	sl, sl, #1
 8017bc8:	9304      	str	r3, [sp, #16]
 8017bca:	9307      	str	r3, [sp, #28]
 8017bcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017bd0:	931a      	str	r3, [sp, #104]	; 0x68
 8017bd2:	4654      	mov	r4, sl
 8017bd4:	2205      	movs	r2, #5
 8017bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bda:	4858      	ldr	r0, [pc, #352]	; (8017d3c <_vfiprintf_r+0x24c>)
 8017bdc:	f7e8 fb00 	bl	80001e0 <memchr>
 8017be0:	9a04      	ldr	r2, [sp, #16]
 8017be2:	b9d8      	cbnz	r0, 8017c1c <_vfiprintf_r+0x12c>
 8017be4:	06d1      	lsls	r1, r2, #27
 8017be6:	bf44      	itt	mi
 8017be8:	2320      	movmi	r3, #32
 8017bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bee:	0713      	lsls	r3, r2, #28
 8017bf0:	bf44      	itt	mi
 8017bf2:	232b      	movmi	r3, #43	; 0x2b
 8017bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8017bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8017bfe:	d015      	beq.n	8017c2c <_vfiprintf_r+0x13c>
 8017c00:	9a07      	ldr	r2, [sp, #28]
 8017c02:	4654      	mov	r4, sl
 8017c04:	2000      	movs	r0, #0
 8017c06:	f04f 0c0a 	mov.w	ip, #10
 8017c0a:	4621      	mov	r1, r4
 8017c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c10:	3b30      	subs	r3, #48	; 0x30
 8017c12:	2b09      	cmp	r3, #9
 8017c14:	d94e      	bls.n	8017cb4 <_vfiprintf_r+0x1c4>
 8017c16:	b1b0      	cbz	r0, 8017c46 <_vfiprintf_r+0x156>
 8017c18:	9207      	str	r2, [sp, #28]
 8017c1a:	e014      	b.n	8017c46 <_vfiprintf_r+0x156>
 8017c1c:	eba0 0308 	sub.w	r3, r0, r8
 8017c20:	fa09 f303 	lsl.w	r3, r9, r3
 8017c24:	4313      	orrs	r3, r2
 8017c26:	9304      	str	r3, [sp, #16]
 8017c28:	46a2      	mov	sl, r4
 8017c2a:	e7d2      	b.n	8017bd2 <_vfiprintf_r+0xe2>
 8017c2c:	9b03      	ldr	r3, [sp, #12]
 8017c2e:	1d19      	adds	r1, r3, #4
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	9103      	str	r1, [sp, #12]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	bfbb      	ittet	lt
 8017c38:	425b      	neglt	r3, r3
 8017c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8017c3e:	9307      	strge	r3, [sp, #28]
 8017c40:	9307      	strlt	r3, [sp, #28]
 8017c42:	bfb8      	it	lt
 8017c44:	9204      	strlt	r2, [sp, #16]
 8017c46:	7823      	ldrb	r3, [r4, #0]
 8017c48:	2b2e      	cmp	r3, #46	; 0x2e
 8017c4a:	d10c      	bne.n	8017c66 <_vfiprintf_r+0x176>
 8017c4c:	7863      	ldrb	r3, [r4, #1]
 8017c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8017c50:	d135      	bne.n	8017cbe <_vfiprintf_r+0x1ce>
 8017c52:	9b03      	ldr	r3, [sp, #12]
 8017c54:	1d1a      	adds	r2, r3, #4
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	9203      	str	r2, [sp, #12]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	bfb8      	it	lt
 8017c5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c62:	3402      	adds	r4, #2
 8017c64:	9305      	str	r3, [sp, #20]
 8017c66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017d4c <_vfiprintf_r+0x25c>
 8017c6a:	7821      	ldrb	r1, [r4, #0]
 8017c6c:	2203      	movs	r2, #3
 8017c6e:	4650      	mov	r0, sl
 8017c70:	f7e8 fab6 	bl	80001e0 <memchr>
 8017c74:	b140      	cbz	r0, 8017c88 <_vfiprintf_r+0x198>
 8017c76:	2340      	movs	r3, #64	; 0x40
 8017c78:	eba0 000a 	sub.w	r0, r0, sl
 8017c7c:	fa03 f000 	lsl.w	r0, r3, r0
 8017c80:	9b04      	ldr	r3, [sp, #16]
 8017c82:	4303      	orrs	r3, r0
 8017c84:	3401      	adds	r4, #1
 8017c86:	9304      	str	r3, [sp, #16]
 8017c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c8c:	482c      	ldr	r0, [pc, #176]	; (8017d40 <_vfiprintf_r+0x250>)
 8017c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c92:	2206      	movs	r2, #6
 8017c94:	f7e8 faa4 	bl	80001e0 <memchr>
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	d03f      	beq.n	8017d1c <_vfiprintf_r+0x22c>
 8017c9c:	4b29      	ldr	r3, [pc, #164]	; (8017d44 <_vfiprintf_r+0x254>)
 8017c9e:	bb1b      	cbnz	r3, 8017ce8 <_vfiprintf_r+0x1f8>
 8017ca0:	9b03      	ldr	r3, [sp, #12]
 8017ca2:	3307      	adds	r3, #7
 8017ca4:	f023 0307 	bic.w	r3, r3, #7
 8017ca8:	3308      	adds	r3, #8
 8017caa:	9303      	str	r3, [sp, #12]
 8017cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cae:	443b      	add	r3, r7
 8017cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8017cb2:	e767      	b.n	8017b84 <_vfiprintf_r+0x94>
 8017cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8017cb8:	460c      	mov	r4, r1
 8017cba:	2001      	movs	r0, #1
 8017cbc:	e7a5      	b.n	8017c0a <_vfiprintf_r+0x11a>
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	3401      	adds	r4, #1
 8017cc2:	9305      	str	r3, [sp, #20]
 8017cc4:	4619      	mov	r1, r3
 8017cc6:	f04f 0c0a 	mov.w	ip, #10
 8017cca:	4620      	mov	r0, r4
 8017ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cd0:	3a30      	subs	r2, #48	; 0x30
 8017cd2:	2a09      	cmp	r2, #9
 8017cd4:	d903      	bls.n	8017cde <_vfiprintf_r+0x1ee>
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d0c5      	beq.n	8017c66 <_vfiprintf_r+0x176>
 8017cda:	9105      	str	r1, [sp, #20]
 8017cdc:	e7c3      	b.n	8017c66 <_vfiprintf_r+0x176>
 8017cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ce2:	4604      	mov	r4, r0
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	e7f0      	b.n	8017cca <_vfiprintf_r+0x1da>
 8017ce8:	ab03      	add	r3, sp, #12
 8017cea:	9300      	str	r3, [sp, #0]
 8017cec:	462a      	mov	r2, r5
 8017cee:	4b16      	ldr	r3, [pc, #88]	; (8017d48 <_vfiprintf_r+0x258>)
 8017cf0:	a904      	add	r1, sp, #16
 8017cf2:	4630      	mov	r0, r6
 8017cf4:	f3af 8000 	nop.w
 8017cf8:	4607      	mov	r7, r0
 8017cfa:	1c78      	adds	r0, r7, #1
 8017cfc:	d1d6      	bne.n	8017cac <_vfiprintf_r+0x1bc>
 8017cfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d00:	07d9      	lsls	r1, r3, #31
 8017d02:	d405      	bmi.n	8017d10 <_vfiprintf_r+0x220>
 8017d04:	89ab      	ldrh	r3, [r5, #12]
 8017d06:	059a      	lsls	r2, r3, #22
 8017d08:	d402      	bmi.n	8017d10 <_vfiprintf_r+0x220>
 8017d0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d0c:	f7ff f8ce 	bl	8016eac <__retarget_lock_release_recursive>
 8017d10:	89ab      	ldrh	r3, [r5, #12]
 8017d12:	065b      	lsls	r3, r3, #25
 8017d14:	f53f af12 	bmi.w	8017b3c <_vfiprintf_r+0x4c>
 8017d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d1a:	e711      	b.n	8017b40 <_vfiprintf_r+0x50>
 8017d1c:	ab03      	add	r3, sp, #12
 8017d1e:	9300      	str	r3, [sp, #0]
 8017d20:	462a      	mov	r2, r5
 8017d22:	4b09      	ldr	r3, [pc, #36]	; (8017d48 <_vfiprintf_r+0x258>)
 8017d24:	a904      	add	r1, sp, #16
 8017d26:	4630      	mov	r0, r6
 8017d28:	f000 f880 	bl	8017e2c <_printf_i>
 8017d2c:	e7e4      	b.n	8017cf8 <_vfiprintf_r+0x208>
 8017d2e:	bf00      	nop
 8017d30:	0801905c 	.word	0x0801905c
 8017d34:	0801907c 	.word	0x0801907c
 8017d38:	0801903c 	.word	0x0801903c
 8017d3c:	080190a0 	.word	0x080190a0
 8017d40:	080190aa 	.word	0x080190aa
 8017d44:	00000000 	.word	0x00000000
 8017d48:	08017acb 	.word	0x08017acb
 8017d4c:	080190a6 	.word	0x080190a6

08017d50 <_printf_common>:
 8017d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d54:	4616      	mov	r6, r2
 8017d56:	4699      	mov	r9, r3
 8017d58:	688a      	ldr	r2, [r1, #8]
 8017d5a:	690b      	ldr	r3, [r1, #16]
 8017d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017d60:	4293      	cmp	r3, r2
 8017d62:	bfb8      	it	lt
 8017d64:	4613      	movlt	r3, r2
 8017d66:	6033      	str	r3, [r6, #0]
 8017d68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017d6c:	4607      	mov	r7, r0
 8017d6e:	460c      	mov	r4, r1
 8017d70:	b10a      	cbz	r2, 8017d76 <_printf_common+0x26>
 8017d72:	3301      	adds	r3, #1
 8017d74:	6033      	str	r3, [r6, #0]
 8017d76:	6823      	ldr	r3, [r4, #0]
 8017d78:	0699      	lsls	r1, r3, #26
 8017d7a:	bf42      	ittt	mi
 8017d7c:	6833      	ldrmi	r3, [r6, #0]
 8017d7e:	3302      	addmi	r3, #2
 8017d80:	6033      	strmi	r3, [r6, #0]
 8017d82:	6825      	ldr	r5, [r4, #0]
 8017d84:	f015 0506 	ands.w	r5, r5, #6
 8017d88:	d106      	bne.n	8017d98 <_printf_common+0x48>
 8017d8a:	f104 0a19 	add.w	sl, r4, #25
 8017d8e:	68e3      	ldr	r3, [r4, #12]
 8017d90:	6832      	ldr	r2, [r6, #0]
 8017d92:	1a9b      	subs	r3, r3, r2
 8017d94:	42ab      	cmp	r3, r5
 8017d96:	dc26      	bgt.n	8017de6 <_printf_common+0x96>
 8017d98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017d9c:	1e13      	subs	r3, r2, #0
 8017d9e:	6822      	ldr	r2, [r4, #0]
 8017da0:	bf18      	it	ne
 8017da2:	2301      	movne	r3, #1
 8017da4:	0692      	lsls	r2, r2, #26
 8017da6:	d42b      	bmi.n	8017e00 <_printf_common+0xb0>
 8017da8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017dac:	4649      	mov	r1, r9
 8017dae:	4638      	mov	r0, r7
 8017db0:	47c0      	blx	r8
 8017db2:	3001      	adds	r0, #1
 8017db4:	d01e      	beq.n	8017df4 <_printf_common+0xa4>
 8017db6:	6823      	ldr	r3, [r4, #0]
 8017db8:	68e5      	ldr	r5, [r4, #12]
 8017dba:	6832      	ldr	r2, [r6, #0]
 8017dbc:	f003 0306 	and.w	r3, r3, #6
 8017dc0:	2b04      	cmp	r3, #4
 8017dc2:	bf08      	it	eq
 8017dc4:	1aad      	subeq	r5, r5, r2
 8017dc6:	68a3      	ldr	r3, [r4, #8]
 8017dc8:	6922      	ldr	r2, [r4, #16]
 8017dca:	bf0c      	ite	eq
 8017dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017dd0:	2500      	movne	r5, #0
 8017dd2:	4293      	cmp	r3, r2
 8017dd4:	bfc4      	itt	gt
 8017dd6:	1a9b      	subgt	r3, r3, r2
 8017dd8:	18ed      	addgt	r5, r5, r3
 8017dda:	2600      	movs	r6, #0
 8017ddc:	341a      	adds	r4, #26
 8017dde:	42b5      	cmp	r5, r6
 8017de0:	d11a      	bne.n	8017e18 <_printf_common+0xc8>
 8017de2:	2000      	movs	r0, #0
 8017de4:	e008      	b.n	8017df8 <_printf_common+0xa8>
 8017de6:	2301      	movs	r3, #1
 8017de8:	4652      	mov	r2, sl
 8017dea:	4649      	mov	r1, r9
 8017dec:	4638      	mov	r0, r7
 8017dee:	47c0      	blx	r8
 8017df0:	3001      	adds	r0, #1
 8017df2:	d103      	bne.n	8017dfc <_printf_common+0xac>
 8017df4:	f04f 30ff 	mov.w	r0, #4294967295
 8017df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dfc:	3501      	adds	r5, #1
 8017dfe:	e7c6      	b.n	8017d8e <_printf_common+0x3e>
 8017e00:	18e1      	adds	r1, r4, r3
 8017e02:	1c5a      	adds	r2, r3, #1
 8017e04:	2030      	movs	r0, #48	; 0x30
 8017e06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017e0a:	4422      	add	r2, r4
 8017e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017e14:	3302      	adds	r3, #2
 8017e16:	e7c7      	b.n	8017da8 <_printf_common+0x58>
 8017e18:	2301      	movs	r3, #1
 8017e1a:	4622      	mov	r2, r4
 8017e1c:	4649      	mov	r1, r9
 8017e1e:	4638      	mov	r0, r7
 8017e20:	47c0      	blx	r8
 8017e22:	3001      	adds	r0, #1
 8017e24:	d0e6      	beq.n	8017df4 <_printf_common+0xa4>
 8017e26:	3601      	adds	r6, #1
 8017e28:	e7d9      	b.n	8017dde <_printf_common+0x8e>
	...

08017e2c <_printf_i>:
 8017e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017e30:	7e0f      	ldrb	r7, [r1, #24]
 8017e32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017e34:	2f78      	cmp	r7, #120	; 0x78
 8017e36:	4691      	mov	r9, r2
 8017e38:	4680      	mov	r8, r0
 8017e3a:	460c      	mov	r4, r1
 8017e3c:	469a      	mov	sl, r3
 8017e3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017e42:	d807      	bhi.n	8017e54 <_printf_i+0x28>
 8017e44:	2f62      	cmp	r7, #98	; 0x62
 8017e46:	d80a      	bhi.n	8017e5e <_printf_i+0x32>
 8017e48:	2f00      	cmp	r7, #0
 8017e4a:	f000 80d8 	beq.w	8017ffe <_printf_i+0x1d2>
 8017e4e:	2f58      	cmp	r7, #88	; 0x58
 8017e50:	f000 80a3 	beq.w	8017f9a <_printf_i+0x16e>
 8017e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017e58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017e5c:	e03a      	b.n	8017ed4 <_printf_i+0xa8>
 8017e5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017e62:	2b15      	cmp	r3, #21
 8017e64:	d8f6      	bhi.n	8017e54 <_printf_i+0x28>
 8017e66:	a101      	add	r1, pc, #4	; (adr r1, 8017e6c <_printf_i+0x40>)
 8017e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017e6c:	08017ec5 	.word	0x08017ec5
 8017e70:	08017ed9 	.word	0x08017ed9
 8017e74:	08017e55 	.word	0x08017e55
 8017e78:	08017e55 	.word	0x08017e55
 8017e7c:	08017e55 	.word	0x08017e55
 8017e80:	08017e55 	.word	0x08017e55
 8017e84:	08017ed9 	.word	0x08017ed9
 8017e88:	08017e55 	.word	0x08017e55
 8017e8c:	08017e55 	.word	0x08017e55
 8017e90:	08017e55 	.word	0x08017e55
 8017e94:	08017e55 	.word	0x08017e55
 8017e98:	08017fe5 	.word	0x08017fe5
 8017e9c:	08017f09 	.word	0x08017f09
 8017ea0:	08017fc7 	.word	0x08017fc7
 8017ea4:	08017e55 	.word	0x08017e55
 8017ea8:	08017e55 	.word	0x08017e55
 8017eac:	08018007 	.word	0x08018007
 8017eb0:	08017e55 	.word	0x08017e55
 8017eb4:	08017f09 	.word	0x08017f09
 8017eb8:	08017e55 	.word	0x08017e55
 8017ebc:	08017e55 	.word	0x08017e55
 8017ec0:	08017fcf 	.word	0x08017fcf
 8017ec4:	682b      	ldr	r3, [r5, #0]
 8017ec6:	1d1a      	adds	r2, r3, #4
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	602a      	str	r2, [r5, #0]
 8017ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	e0a3      	b.n	8018020 <_printf_i+0x1f4>
 8017ed8:	6820      	ldr	r0, [r4, #0]
 8017eda:	6829      	ldr	r1, [r5, #0]
 8017edc:	0606      	lsls	r6, r0, #24
 8017ede:	f101 0304 	add.w	r3, r1, #4
 8017ee2:	d50a      	bpl.n	8017efa <_printf_i+0xce>
 8017ee4:	680e      	ldr	r6, [r1, #0]
 8017ee6:	602b      	str	r3, [r5, #0]
 8017ee8:	2e00      	cmp	r6, #0
 8017eea:	da03      	bge.n	8017ef4 <_printf_i+0xc8>
 8017eec:	232d      	movs	r3, #45	; 0x2d
 8017eee:	4276      	negs	r6, r6
 8017ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ef4:	485e      	ldr	r0, [pc, #376]	; (8018070 <_printf_i+0x244>)
 8017ef6:	230a      	movs	r3, #10
 8017ef8:	e019      	b.n	8017f2e <_printf_i+0x102>
 8017efa:	680e      	ldr	r6, [r1, #0]
 8017efc:	602b      	str	r3, [r5, #0]
 8017efe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017f02:	bf18      	it	ne
 8017f04:	b236      	sxthne	r6, r6
 8017f06:	e7ef      	b.n	8017ee8 <_printf_i+0xbc>
 8017f08:	682b      	ldr	r3, [r5, #0]
 8017f0a:	6820      	ldr	r0, [r4, #0]
 8017f0c:	1d19      	adds	r1, r3, #4
 8017f0e:	6029      	str	r1, [r5, #0]
 8017f10:	0601      	lsls	r1, r0, #24
 8017f12:	d501      	bpl.n	8017f18 <_printf_i+0xec>
 8017f14:	681e      	ldr	r6, [r3, #0]
 8017f16:	e002      	b.n	8017f1e <_printf_i+0xf2>
 8017f18:	0646      	lsls	r6, r0, #25
 8017f1a:	d5fb      	bpl.n	8017f14 <_printf_i+0xe8>
 8017f1c:	881e      	ldrh	r6, [r3, #0]
 8017f1e:	4854      	ldr	r0, [pc, #336]	; (8018070 <_printf_i+0x244>)
 8017f20:	2f6f      	cmp	r7, #111	; 0x6f
 8017f22:	bf0c      	ite	eq
 8017f24:	2308      	moveq	r3, #8
 8017f26:	230a      	movne	r3, #10
 8017f28:	2100      	movs	r1, #0
 8017f2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017f2e:	6865      	ldr	r5, [r4, #4]
 8017f30:	60a5      	str	r5, [r4, #8]
 8017f32:	2d00      	cmp	r5, #0
 8017f34:	bfa2      	ittt	ge
 8017f36:	6821      	ldrge	r1, [r4, #0]
 8017f38:	f021 0104 	bicge.w	r1, r1, #4
 8017f3c:	6021      	strge	r1, [r4, #0]
 8017f3e:	b90e      	cbnz	r6, 8017f44 <_printf_i+0x118>
 8017f40:	2d00      	cmp	r5, #0
 8017f42:	d04d      	beq.n	8017fe0 <_printf_i+0x1b4>
 8017f44:	4615      	mov	r5, r2
 8017f46:	fbb6 f1f3 	udiv	r1, r6, r3
 8017f4a:	fb03 6711 	mls	r7, r3, r1, r6
 8017f4e:	5dc7      	ldrb	r7, [r0, r7]
 8017f50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017f54:	4637      	mov	r7, r6
 8017f56:	42bb      	cmp	r3, r7
 8017f58:	460e      	mov	r6, r1
 8017f5a:	d9f4      	bls.n	8017f46 <_printf_i+0x11a>
 8017f5c:	2b08      	cmp	r3, #8
 8017f5e:	d10b      	bne.n	8017f78 <_printf_i+0x14c>
 8017f60:	6823      	ldr	r3, [r4, #0]
 8017f62:	07de      	lsls	r6, r3, #31
 8017f64:	d508      	bpl.n	8017f78 <_printf_i+0x14c>
 8017f66:	6923      	ldr	r3, [r4, #16]
 8017f68:	6861      	ldr	r1, [r4, #4]
 8017f6a:	4299      	cmp	r1, r3
 8017f6c:	bfde      	ittt	le
 8017f6e:	2330      	movle	r3, #48	; 0x30
 8017f70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017f74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017f78:	1b52      	subs	r2, r2, r5
 8017f7a:	6122      	str	r2, [r4, #16]
 8017f7c:	f8cd a000 	str.w	sl, [sp]
 8017f80:	464b      	mov	r3, r9
 8017f82:	aa03      	add	r2, sp, #12
 8017f84:	4621      	mov	r1, r4
 8017f86:	4640      	mov	r0, r8
 8017f88:	f7ff fee2 	bl	8017d50 <_printf_common>
 8017f8c:	3001      	adds	r0, #1
 8017f8e:	d14c      	bne.n	801802a <_printf_i+0x1fe>
 8017f90:	f04f 30ff 	mov.w	r0, #4294967295
 8017f94:	b004      	add	sp, #16
 8017f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f9a:	4835      	ldr	r0, [pc, #212]	; (8018070 <_printf_i+0x244>)
 8017f9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017fa0:	6829      	ldr	r1, [r5, #0]
 8017fa2:	6823      	ldr	r3, [r4, #0]
 8017fa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8017fa8:	6029      	str	r1, [r5, #0]
 8017faa:	061d      	lsls	r5, r3, #24
 8017fac:	d514      	bpl.n	8017fd8 <_printf_i+0x1ac>
 8017fae:	07df      	lsls	r7, r3, #31
 8017fb0:	bf44      	itt	mi
 8017fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8017fb6:	6023      	strmi	r3, [r4, #0]
 8017fb8:	b91e      	cbnz	r6, 8017fc2 <_printf_i+0x196>
 8017fba:	6823      	ldr	r3, [r4, #0]
 8017fbc:	f023 0320 	bic.w	r3, r3, #32
 8017fc0:	6023      	str	r3, [r4, #0]
 8017fc2:	2310      	movs	r3, #16
 8017fc4:	e7b0      	b.n	8017f28 <_printf_i+0xfc>
 8017fc6:	6823      	ldr	r3, [r4, #0]
 8017fc8:	f043 0320 	orr.w	r3, r3, #32
 8017fcc:	6023      	str	r3, [r4, #0]
 8017fce:	2378      	movs	r3, #120	; 0x78
 8017fd0:	4828      	ldr	r0, [pc, #160]	; (8018074 <_printf_i+0x248>)
 8017fd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017fd6:	e7e3      	b.n	8017fa0 <_printf_i+0x174>
 8017fd8:	0659      	lsls	r1, r3, #25
 8017fda:	bf48      	it	mi
 8017fdc:	b2b6      	uxthmi	r6, r6
 8017fde:	e7e6      	b.n	8017fae <_printf_i+0x182>
 8017fe0:	4615      	mov	r5, r2
 8017fe2:	e7bb      	b.n	8017f5c <_printf_i+0x130>
 8017fe4:	682b      	ldr	r3, [r5, #0]
 8017fe6:	6826      	ldr	r6, [r4, #0]
 8017fe8:	6961      	ldr	r1, [r4, #20]
 8017fea:	1d18      	adds	r0, r3, #4
 8017fec:	6028      	str	r0, [r5, #0]
 8017fee:	0635      	lsls	r5, r6, #24
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	d501      	bpl.n	8017ff8 <_printf_i+0x1cc>
 8017ff4:	6019      	str	r1, [r3, #0]
 8017ff6:	e002      	b.n	8017ffe <_printf_i+0x1d2>
 8017ff8:	0670      	lsls	r0, r6, #25
 8017ffa:	d5fb      	bpl.n	8017ff4 <_printf_i+0x1c8>
 8017ffc:	8019      	strh	r1, [r3, #0]
 8017ffe:	2300      	movs	r3, #0
 8018000:	6123      	str	r3, [r4, #16]
 8018002:	4615      	mov	r5, r2
 8018004:	e7ba      	b.n	8017f7c <_printf_i+0x150>
 8018006:	682b      	ldr	r3, [r5, #0]
 8018008:	1d1a      	adds	r2, r3, #4
 801800a:	602a      	str	r2, [r5, #0]
 801800c:	681d      	ldr	r5, [r3, #0]
 801800e:	6862      	ldr	r2, [r4, #4]
 8018010:	2100      	movs	r1, #0
 8018012:	4628      	mov	r0, r5
 8018014:	f7e8 f8e4 	bl	80001e0 <memchr>
 8018018:	b108      	cbz	r0, 801801e <_printf_i+0x1f2>
 801801a:	1b40      	subs	r0, r0, r5
 801801c:	6060      	str	r0, [r4, #4]
 801801e:	6863      	ldr	r3, [r4, #4]
 8018020:	6123      	str	r3, [r4, #16]
 8018022:	2300      	movs	r3, #0
 8018024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018028:	e7a8      	b.n	8017f7c <_printf_i+0x150>
 801802a:	6923      	ldr	r3, [r4, #16]
 801802c:	462a      	mov	r2, r5
 801802e:	4649      	mov	r1, r9
 8018030:	4640      	mov	r0, r8
 8018032:	47d0      	blx	sl
 8018034:	3001      	adds	r0, #1
 8018036:	d0ab      	beq.n	8017f90 <_printf_i+0x164>
 8018038:	6823      	ldr	r3, [r4, #0]
 801803a:	079b      	lsls	r3, r3, #30
 801803c:	d413      	bmi.n	8018066 <_printf_i+0x23a>
 801803e:	68e0      	ldr	r0, [r4, #12]
 8018040:	9b03      	ldr	r3, [sp, #12]
 8018042:	4298      	cmp	r0, r3
 8018044:	bfb8      	it	lt
 8018046:	4618      	movlt	r0, r3
 8018048:	e7a4      	b.n	8017f94 <_printf_i+0x168>
 801804a:	2301      	movs	r3, #1
 801804c:	4632      	mov	r2, r6
 801804e:	4649      	mov	r1, r9
 8018050:	4640      	mov	r0, r8
 8018052:	47d0      	blx	sl
 8018054:	3001      	adds	r0, #1
 8018056:	d09b      	beq.n	8017f90 <_printf_i+0x164>
 8018058:	3501      	adds	r5, #1
 801805a:	68e3      	ldr	r3, [r4, #12]
 801805c:	9903      	ldr	r1, [sp, #12]
 801805e:	1a5b      	subs	r3, r3, r1
 8018060:	42ab      	cmp	r3, r5
 8018062:	dcf2      	bgt.n	801804a <_printf_i+0x21e>
 8018064:	e7eb      	b.n	801803e <_printf_i+0x212>
 8018066:	2500      	movs	r5, #0
 8018068:	f104 0619 	add.w	r6, r4, #25
 801806c:	e7f5      	b.n	801805a <_printf_i+0x22e>
 801806e:	bf00      	nop
 8018070:	080190b1 	.word	0x080190b1
 8018074:	080190c2 	.word	0x080190c2

08018078 <_read_r>:
 8018078:	b538      	push	{r3, r4, r5, lr}
 801807a:	4d07      	ldr	r5, [pc, #28]	; (8018098 <_read_r+0x20>)
 801807c:	4604      	mov	r4, r0
 801807e:	4608      	mov	r0, r1
 8018080:	4611      	mov	r1, r2
 8018082:	2200      	movs	r2, #0
 8018084:	602a      	str	r2, [r5, #0]
 8018086:	461a      	mov	r2, r3
 8018088:	f7fe fb05 	bl	8016696 <_read>
 801808c:	1c43      	adds	r3, r0, #1
 801808e:	d102      	bne.n	8018096 <_read_r+0x1e>
 8018090:	682b      	ldr	r3, [r5, #0]
 8018092:	b103      	cbz	r3, 8018096 <_read_r+0x1e>
 8018094:	6023      	str	r3, [r4, #0]
 8018096:	bd38      	pop	{r3, r4, r5, pc}
 8018098:	20006f10 	.word	0x20006f10

0801809c <_fstat_r>:
 801809c:	b538      	push	{r3, r4, r5, lr}
 801809e:	4d07      	ldr	r5, [pc, #28]	; (80180bc <_fstat_r+0x20>)
 80180a0:	2300      	movs	r3, #0
 80180a2:	4604      	mov	r4, r0
 80180a4:	4608      	mov	r0, r1
 80180a6:	4611      	mov	r1, r2
 80180a8:	602b      	str	r3, [r5, #0]
 80180aa:	f7fe fbd8 	bl	801685e <_fstat>
 80180ae:	1c43      	adds	r3, r0, #1
 80180b0:	d102      	bne.n	80180b8 <_fstat_r+0x1c>
 80180b2:	682b      	ldr	r3, [r5, #0]
 80180b4:	b103      	cbz	r3, 80180b8 <_fstat_r+0x1c>
 80180b6:	6023      	str	r3, [r4, #0]
 80180b8:	bd38      	pop	{r3, r4, r5, pc}
 80180ba:	bf00      	nop
 80180bc:	20006f10 	.word	0x20006f10

080180c0 <_isatty_r>:
 80180c0:	b538      	push	{r3, r4, r5, lr}
 80180c2:	4d06      	ldr	r5, [pc, #24]	; (80180dc <_isatty_r+0x1c>)
 80180c4:	2300      	movs	r3, #0
 80180c6:	4604      	mov	r4, r0
 80180c8:	4608      	mov	r0, r1
 80180ca:	602b      	str	r3, [r5, #0]
 80180cc:	f7fe fd2e 	bl	8016b2c <_isatty>
 80180d0:	1c43      	adds	r3, r0, #1
 80180d2:	d102      	bne.n	80180da <_isatty_r+0x1a>
 80180d4:	682b      	ldr	r3, [r5, #0]
 80180d6:	b103      	cbz	r3, 80180da <_isatty_r+0x1a>
 80180d8:	6023      	str	r3, [r4, #0]
 80180da:	bd38      	pop	{r3, r4, r5, pc}
 80180dc:	20006f10 	.word	0x20006f10

080180e0 <memmove>:
 80180e0:	4288      	cmp	r0, r1
 80180e2:	b510      	push	{r4, lr}
 80180e4:	eb01 0402 	add.w	r4, r1, r2
 80180e8:	d902      	bls.n	80180f0 <memmove+0x10>
 80180ea:	4284      	cmp	r4, r0
 80180ec:	4623      	mov	r3, r4
 80180ee:	d807      	bhi.n	8018100 <memmove+0x20>
 80180f0:	1e43      	subs	r3, r0, #1
 80180f2:	42a1      	cmp	r1, r4
 80180f4:	d008      	beq.n	8018108 <memmove+0x28>
 80180f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80180fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80180fe:	e7f8      	b.n	80180f2 <memmove+0x12>
 8018100:	4402      	add	r2, r0
 8018102:	4601      	mov	r1, r0
 8018104:	428a      	cmp	r2, r1
 8018106:	d100      	bne.n	801810a <memmove+0x2a>
 8018108:	bd10      	pop	{r4, pc}
 801810a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801810e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018112:	e7f7      	b.n	8018104 <memmove+0x24>

08018114 <_realloc_r>:
 8018114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018118:	4680      	mov	r8, r0
 801811a:	4614      	mov	r4, r2
 801811c:	460e      	mov	r6, r1
 801811e:	b921      	cbnz	r1, 801812a <_realloc_r+0x16>
 8018120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018124:	4611      	mov	r1, r2
 8018126:	f7fe bf63 	b.w	8016ff0 <_malloc_r>
 801812a:	b92a      	cbnz	r2, 8018138 <_realloc_r+0x24>
 801812c:	f7fe fef4 	bl	8016f18 <_free_r>
 8018130:	4625      	mov	r5, r4
 8018132:	4628      	mov	r0, r5
 8018134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018138:	f000 f81b 	bl	8018172 <_malloc_usable_size_r>
 801813c:	4284      	cmp	r4, r0
 801813e:	4607      	mov	r7, r0
 8018140:	d802      	bhi.n	8018148 <_realloc_r+0x34>
 8018142:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018146:	d812      	bhi.n	801816e <_realloc_r+0x5a>
 8018148:	4621      	mov	r1, r4
 801814a:	4640      	mov	r0, r8
 801814c:	f7fe ff50 	bl	8016ff0 <_malloc_r>
 8018150:	4605      	mov	r5, r0
 8018152:	2800      	cmp	r0, #0
 8018154:	d0ed      	beq.n	8018132 <_realloc_r+0x1e>
 8018156:	42bc      	cmp	r4, r7
 8018158:	4622      	mov	r2, r4
 801815a:	4631      	mov	r1, r6
 801815c:	bf28      	it	cs
 801815e:	463a      	movcs	r2, r7
 8018160:	f7fe feae 	bl	8016ec0 <memcpy>
 8018164:	4631      	mov	r1, r6
 8018166:	4640      	mov	r0, r8
 8018168:	f7fe fed6 	bl	8016f18 <_free_r>
 801816c:	e7e1      	b.n	8018132 <_realloc_r+0x1e>
 801816e:	4635      	mov	r5, r6
 8018170:	e7df      	b.n	8018132 <_realloc_r+0x1e>

08018172 <_malloc_usable_size_r>:
 8018172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018176:	1f18      	subs	r0, r3, #4
 8018178:	2b00      	cmp	r3, #0
 801817a:	bfbc      	itt	lt
 801817c:	580b      	ldrlt	r3, [r1, r0]
 801817e:	18c0      	addlt	r0, r0, r3
 8018180:	4770      	bx	lr
	...

08018184 <_kill>:
 8018184:	4b02      	ldr	r3, [pc, #8]	; (8018190 <_kill+0xc>)
 8018186:	2258      	movs	r2, #88	; 0x58
 8018188:	601a      	str	r2, [r3, #0]
 801818a:	f04f 30ff 	mov.w	r0, #4294967295
 801818e:	4770      	bx	lr
 8018190:	20006f10 	.word	0x20006f10

08018194 <_exit>:
 8018194:	e7fe      	b.n	8018194 <_exit>
	...

08018198 <_init>:
 8018198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801819a:	bf00      	nop
 801819c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801819e:	bc08      	pop	{r3}
 80181a0:	469e      	mov	lr, r3
 80181a2:	4770      	bx	lr

080181a4 <_fini>:
 80181a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181a6:	bf00      	nop
 80181a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181aa:	bc08      	pop	{r3}
 80181ac:	469e      	mov	lr, r3
 80181ae:	4770      	bx	lr
