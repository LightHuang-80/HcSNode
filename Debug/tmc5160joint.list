
tmc5160joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018634  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f00  080187c4  080187c4  000287c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080196c4  080196c4  00030624  2**0
                  CONTENTS
  4 .ARM          00000008  080196c4  080196c4  000296c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080196cc  080196cc  00030624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080196cc  080196cc  000296cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080196d0  080196d0  000296d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000624  20000000  080196d4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000686c  20000628  08019cf8  00030628  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006e94  08019cf8  00036e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030624  2**0
                  CONTENTS, READONLY
 12 .debug_info   00072b22  00000000  00000000  00030654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000e028  00000000  00000000  000a3176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000033e8  00000000  00000000  000b11a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002fb0  00000000  00000000  000b4588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031bdc  00000000  00000000  000b7538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00042e98  00000000  00000000  000e9114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1ab3  00000000  00000000  0012bfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020da5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e8c8  00000000  00000000  0020dab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0021c378  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  0021c39c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000628 	.word	0x20000628
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080187ac 	.word	0x080187ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000062c 	.word	0x2000062c
 80001cc:	080187ac 	.word	0x080187ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <MX_CAN1_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000e8c:	220e      	movs	r2, #14
 8000e8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000e9e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000ea2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000ed0:	f00d fa2a 	bl	800e328 <HAL_CAN_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000eda:	f000 fd59 	bl	8001990 <Error_Handler>
  }

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000644 	.word	0x20000644
 8000ee8:	40006400 	.word	0x40006400

08000eec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a29      	ldr	r2, [pc, #164]	; (8000fb0 <HAL_CAN_MspInit+0xc4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d14c      	bne.n	8000fa8 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <HAL_CAN_MspInit+0xc8>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <HAL_CAN_MspInit+0xc8>)
 8000f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <HAL_CAN_MspInit+0xc8>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_CAN_MspInit+0xc8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a20      	ldr	r2, [pc, #128]	; (8000fb4 <HAL_CAN_MspInit+0xc8>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <HAL_CAN_MspInit+0xc8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f58:	2309      	movs	r3, #9
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <HAL_CAN_MspInit+0xcc>)
 8000f64:	f00e fdac 	bl	800fac0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2013      	movs	r0, #19
 8000f6e:	f00e f9dd 	bl	800f32c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f72:	2013      	movs	r0, #19
 8000f74:	f00e f9f6 	bl	800f364 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2105      	movs	r1, #5
 8000f7c:	2014      	movs	r0, #20
 8000f7e:	f00e f9d5 	bl	800f32c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f82:	2014      	movs	r0, #20
 8000f84:	f00e f9ee 	bl	800f364 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2015      	movs	r0, #21
 8000f8e:	f00e f9cd 	bl	800f32c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f92:	2015      	movs	r0, #21
 8000f94:	f00e f9e6 	bl	800f364 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2016      	movs	r0, #22
 8000f9e:	f00e f9c5 	bl	800f32c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000fa2:	2016      	movs	r0, #22
 8000fa4:	f00e f9de 	bl	800f364 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40006400 	.word	0x40006400
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020400 	.word	0x40020400

08000fbc <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_CAN_MspDeInit+0x48>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d116      	bne.n	8000ffc <HAL_CAN_MspDeInit+0x40>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_CAN_MspDeInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HAL_CAN_MspDeInit+0x4c>)
 8000fd4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8000fda:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <HAL_CAN_MspDeInit+0x50>)
 8000fe0:	f00e ff0a 	bl	800fdf8 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8000fe4:	2013      	movs	r0, #19
 8000fe6:	f00e f9cb 	bl	800f380 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000fea:	2014      	movs	r0, #20
 8000fec:	f00e f9c8 	bl	800f380 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8000ff0:	2015      	movs	r0, #21
 8000ff2:	f00e f9c5 	bl	800f380 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8000ff6:	2016      	movs	r0, #22
 8000ff8:	f00e f9c2 	bl	800f380 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40006400 	.word	0x40006400
 8001008:	40023800 	.word	0x40023800
 800100c:	40020400 	.word	0x40020400

08001010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_DMA_Init+0x4c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a0f      	ldr	r2, [pc, #60]	; (800105c <MX_DMA_Init+0x4c>)
 8001020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_DMA_Init+0x4c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	203a      	movs	r0, #58	; 0x3a
 8001038:	f00e f978 	bl	800f32c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800103c:	203a      	movs	r0, #58	; 0x3a
 800103e:	f00e f991 	bl	800f364 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2046      	movs	r0, #70	; 0x46
 8001048:	f00e f970 	bl	800f32c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800104c:	2046      	movs	r0, #70	; 0x46
 800104e:	f00e f989 	bl	800f364 <HAL_NVIC_EnableIRQ>

}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800

08001060 <_ZN14TMC5160Stepper11rms_currentEt>:
	public:
		TMC5160Stepper(uint16_t pinCS, float RS = default_RS, int8_t link_index = -1);
		TMC5160Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link_index = -1);
		TMC5160Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link_index = -1);

		void rms_current(uint16_t mA) { TMC2160Stepper::rms_current(mA); }
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f00b fe56 	bl	800cd24 <_ZN14TMC2160Stepper11rms_currentEt>
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
  /* Initialize the USART*/
  FUART_Init();
 8001086:	f00c fded 	bl	800dc64 <FUART_Init>

  LOG_Init(LOG_InfoLevel, 1, LOG_USARTOut);
 800108a:	2201      	movs	r2, #1
 800108c:	2101      	movs	r1, #1
 800108e:	2003      	movs	r0, #3
 8001090:	f008 fc08 	bl	80098a4 <LOG_Init>
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  motorProcessTimer = xTimerCreate("MotorProcessTimer",
		  	  	  	  	  	  	  pdMS_TO_TICKS( g_MotionStepTimespace ),
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <MX_FREERTOS_Init+0xd4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800109c:	fb02 f303 	mul.w	r3, r2, r3
 80010a0:	4a2d      	ldr	r2, [pc, #180]	; (8001158 <MX_FREERTOS_Init+0xd8>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0999      	lsrs	r1, r3, #6
  motorProcessTimer = xTimerCreate("MotorProcessTimer",
 80010a8:	4b2c      	ldr	r3, [pc, #176]	; (800115c <MX_FREERTOS_Init+0xdc>)
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2300      	movs	r3, #0
 80010ae:	2201      	movs	r2, #1
 80010b0:	482b      	ldr	r0, [pc, #172]	; (8001160 <MX_FREERTOS_Init+0xe0>)
 80010b2:	f014 f9e9 	bl	8015488 <xTimerCreate>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a2a      	ldr	r2, [pc, #168]	; (8001164 <MX_FREERTOS_Init+0xe4>)
 80010ba:	6013      	str	r3, [r2, #0]
								  0,
								  MotorProcessCB);
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  g_MotionMsgQueue = xQueueCreate(100, sizeof(MotionMsgItem_t));
 80010bc:	2200      	movs	r2, #0
 80010be:	2114      	movs	r1, #20
 80010c0:	2064      	movs	r0, #100	; 0x64
 80010c2:	f012 faf1 	bl	80136a8 <xQueueGenericCreate>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <MX_FREERTOS_Init+0xe8>)
 80010ca:	6013      	str	r3, [r2, #0]
  g_TargetPosQueue = xQueueCreate(100, sizeof(MotionMsgItem_t));
 80010cc:	2200      	movs	r2, #0
 80010ce:	2114      	movs	r1, #20
 80010d0:	2064      	movs	r0, #100	; 0x64
 80010d2:	f012 fae9 	bl	80136a8 <xQueueGenericCreate>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a24      	ldr	r2, [pc, #144]	; (800116c <MX_FREERTOS_Init+0xec>)
 80010da:	6013      	str	r3, [r2, #0]
  g_StatusMsgQueue  = xQueueCreate(50,  sizeof(StatusMsgItem_t));
 80010dc:	2200      	movs	r2, #0
 80010de:	2104      	movs	r1, #4
 80010e0:	2032      	movs	r0, #50	; 0x32
 80010e2:	f012 fae1 	bl	80136a8 <xQueueGenericCreate>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <MX_FREERTOS_Init+0xf0>)
 80010ea:	6013      	str	r3, [r2, #0]

  // Motion 初始化
  MT_Init(g_MotionMsgQueue, g_TargetPosQueue, g_StatusMsgQueue);
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MX_FREERTOS_Init+0xe8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1e      	ldr	r2, [pc, #120]	; (800116c <MX_FREERTOS_Init+0xec>)
 80010f2:	6811      	ldr	r1, [r2, #0]
 80010f4:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <MX_FREERTOS_Init+0xf0>)
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f009 f8d7 	bl	800a2ac <MT_Init>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTaskMain, NULL, &defaultTask_attributes);
 80010fe:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <MX_FREERTOS_Init+0xf4>)
 8001100:	2100      	movs	r1, #0
 8001102:	481d      	ldr	r0, [pc, #116]	; (8001178 <MX_FREERTOS_Init+0xf8>)
 8001104:	f012 f834 	bl	8013170 <osThreadNew>
 8001108:	4603      	mov	r3, r0
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <MX_FREERTOS_Init+0xfc>)
 800110c:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(LedTaskMain, NULL, &ledTask_attributes);
 800110e:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <MX_FREERTOS_Init+0x100>)
 8001110:	2100      	movs	r1, #0
 8001112:	481c      	ldr	r0, [pc, #112]	; (8001184 <MX_FREERTOS_Init+0x104>)
 8001114:	f012 f82c 	bl	8013170 <osThreadNew>
 8001118:	4603      	mov	r3, r0
 800111a:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <MX_FREERTOS_Init+0x108>)
 800111c:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(EncoderTaskMain, NULL, &encoderTask_attributes);
 800111e:	4a1b      	ldr	r2, [pc, #108]	; (800118c <MX_FREERTOS_Init+0x10c>)
 8001120:	2100      	movs	r1, #0
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <MX_FREERTOS_Init+0x110>)
 8001124:	f012 f824 	bl	8013170 <osThreadNew>
 8001128:	4603      	mov	r3, r0
 800112a:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <MX_FREERTOS_Init+0x114>)
 800112c:	6013      	str	r3, [r2, #0]

  /* creation of uartTask */
  motorTaskHandle = osThreadNew(MotorTaskMain, NULL, &motorTask_attributes);
 800112e:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <MX_FREERTOS_Init+0x118>)
 8001130:	2100      	movs	r1, #0
 8001132:	481a      	ldr	r0, [pc, #104]	; (800119c <MX_FREERTOS_Init+0x11c>)
 8001134:	f012 f81c 	bl	8013170 <osThreadNew>
 8001138:	4603      	mov	r3, r0
 800113a:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <MX_FREERTOS_Init+0x120>)
 800113c:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(CanCommTaskMain, NULL, &canTask_attributes);
 800113e:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <MX_FREERTOS_Init+0x124>)
 8001140:	2100      	movs	r1, #0
 8001142:	4819      	ldr	r0, [pc, #100]	; (80011a8 <MX_FREERTOS_Init+0x128>)
 8001144:	f012 f814 	bl	8013170 <osThreadNew>
 8001148:	4603      	mov	r3, r0
 800114a:	4a18      	ldr	r2, [pc, #96]	; (80011ac <MX_FREERTOS_Init+0x12c>)
 800114c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000010 	.word	0x20000010
 8001158:	10624dd3 	.word	0x10624dd3
 800115c:	0800129d 	.word	0x0800129d
 8001160:	080187f8 	.word	0x080187f8
 8001164:	20000684 	.word	0x20000684
 8001168:	20000678 	.word	0x20000678
 800116c:	2000067c 	.word	0x2000067c
 8001170:	20000680 	.word	0x20000680
 8001174:	08018a98 	.word	0x08018a98
 8001178:	080011b1 	.word	0x080011b1
 800117c:	20000688 	.word	0x20000688
 8001180:	08018abc 	.word	0x08018abc
 8001184:	080011c1 	.word	0x080011c1
 8001188:	2000068c 	.word	0x2000068c
 800118c:	08018ae0 	.word	0x08018ae0
 8001190:	080011d1 	.word	0x080011d1
 8001194:	20000690 	.word	0x20000690
 8001198:	08018b04 	.word	0x08018b04
 800119c:	080012bd 	.word	0x080012bd
 80011a0:	20000694 	.word	0x20000694
 80011a4:	08018b28 	.word	0x08018b28
 80011a8:	08001599 	.word	0x08001599
 80011ac:	20000698 	.word	0x20000698

080011b0 <_Z15DefaultTaskMainPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTaskMain */
void DefaultTaskMain(void *argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTaskMain */
  /* Infinite loop */
  for(;;)
  {
	//MT_process_v3(g_IncSteps);
	osDelay(4);
 80011b8:	2004      	movs	r0, #4
 80011ba:	f012 f87f 	bl	80132bc <osDelay>
 80011be:	e7fb      	b.n	80011b8 <_Z15DefaultTaskMainPv+0x8>

080011c0 <_Z11LedTaskMainPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTaskMain */
void LedTaskMain(void *argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTaskMain */
  /* Infinite loop */
  for(;;)
  {
    osDelay(16);
 80011c8:	2010      	movs	r0, #16
 80011ca:	f012 f877 	bl	80132bc <osDelay>
 80011ce:	e7fb      	b.n	80011c8 <_Z11LedTaskMainPv+0x8>

080011d0 <_Z15EncoderTaskMainPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EncoderTaskMain */
void EncoderTaskMain(void *argument)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderTaskMain */
  /* Infinite loop */
  AS5048A_Init();
 80011d8:	f008 fbcc 	bl	8009974 <AS5048A_Init>

  uint16_t retry = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	81fb      	strh	r3, [r7, #14]
  uint16_t result = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	81bb      	strh	r3, [r7, #12]

  //AS5048A_ZeroPoint();

  do {
    result = AS5048A_ReadAngle((uint16_t*)&g_AbsAngle);
 80011e4:	4829      	ldr	r0, [pc, #164]	; (800128c <_Z15EncoderTaskMainPv+0xbc>)
 80011e6:	f008 fcbe 	bl	8009b66 <AS5048A_ReadAngle>
 80011ea:	4603      	mov	r3, r0
 80011ec:	81bb      	strh	r3, [r7, #12]
    if (result == HAL_OK)
 80011ee:	89bb      	ldrh	r3, [r7, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d009      	beq.n	8001208 <_Z15EncoderTaskMainPv+0x38>
      break;

    osDelay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f012 f861 	bl	80132bc <osDelay>
    retry ++;
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	3301      	adds	r3, #1
 80011fe:	81fb      	strh	r3, [r7, #14]
  }while(retry < ENCODER_ReadAngle_Retry);
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	2b0e      	cmp	r3, #14
 8001204:	d801      	bhi.n	800120a <_Z15EncoderTaskMainPv+0x3a>
  do {
 8001206:	e7ed      	b.n	80011e4 <_Z15EncoderTaskMainPv+0x14>
      break;
 8001208:	bf00      	nop

  if (result != HAL_OK){
 800120a:	89bb      	ldrh	r3, [r7, #12]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d138      	bne.n	8001282 <_Z15EncoderTaskMainPv+0xb2>
	return;
  }

  printf("Initialized angle: %d\n", g_AbsAngle);
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <_Z15EncoderTaskMainPv+0xbc>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	4619      	mov	r1, r3
 8001218:	481d      	ldr	r0, [pc, #116]	; (8001290 <_Z15EncoderTaskMainPv+0xc0>)
 800121a:	f016 fa67 	bl	80176ec <iprintf>

  RND_Init(g_AbsAngle);
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <_Z15EncoderTaskMainPv+0xbc>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f008 fcaf 	bl	8009b88 <RND_Init>

  uint16_t angle = g_AbsAngle;
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <_Z15EncoderTaskMainPv+0xbc>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	813b      	strh	r3, [r7, #8]

  /* Infinite loop */
  for(;;) {
	/*Feed the current angle*/
	RND_Input(g_AbsAngle);
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <_Z15EncoderTaskMainPv+0xbc>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f008 fcef 	bl	8009c1c <RND_Input>

	/*Update the increment steps*/
	// 40.24(64teeths)/9.68(16teeths) * 16(g_MicroSteps) = 66.51
	g_IncSteps = RND_GetIncSteps(g_AbsAngle, g_EncoderRatio); //
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <_Z15EncoderTaskMainPv+0xbc>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <_Z15EncoderTaskMainPv+0xc4>)
 8001246:	edd2 7a00 	vldr	s15, [r2]
 800124a:	eeb0 0a67 	vmov.f32	s0, s15
 800124e:	4618      	mov	r0, r3
 8001250:	f008 fe4e 	bl	8009ef0 <RND_GetIncSteps>
 8001254:	4603      	mov	r3, r0
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <_Z15EncoderTaskMainPv+0xc8>)
 8001258:	6013      	str	r3, [r2, #0]

	/*loop read, and update global absolute angle*/
	uint16_t status = AS5048A_ReadAngle((uint16_t*)&angle);
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4618      	mov	r0, r3
 8001260:	f008 fc81 	bl	8009b66 <AS5048A_ReadAngle>
 8001264:	4603      	mov	r3, r0
 8001266:	817b      	strh	r3, [r7, #10]
	if (status == HAL_OK && angle != 0){
 8001268:	897b      	ldrh	r3, [r7, #10]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d105      	bne.n	800127a <_Z15EncoderTaskMainPv+0xaa>
 800126e:	893b      	ldrh	r3, [r7, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <_Z15EncoderTaskMainPv+0xaa>
		g_AbsAngle = angle;
 8001274:	893a      	ldrh	r2, [r7, #8]
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <_Z15EncoderTaskMainPv+0xbc>)
 8001278:	801a      	strh	r2, [r3, #0]
	}

	//LOG_Print(LOG_InfoLevel, "curinc: %d, angle: %d\n", g_IncSteps, g_AbsAngle);
	osDelay(2);
 800127a:	2002      	movs	r0, #2
 800127c:	f012 f81e 	bl	80132bc <osDelay>
  }
 8001280:	e7d7      	b.n	8001232 <_Z15EncoderTaskMainPv+0x62>
	return;
 8001282:	bf00      	nop
  /* USER CODE END EncoderTaskMain */
}
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000674 	.word	0x20000674
 8001290:	0801880c 	.word	0x0801880c
 8001294:	20000004 	.word	0x20000004
 8001298:	20000670 	.word	0x20000670

0800129c <_Z14MotorProcessCBP15tmrTimerControl>:

void MotorProcessCB(TimerHandle_t xTimer)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	MT_process_v3(g_MotionStepTimespace);
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <_Z14MotorProcessCBP15tmrTimerControl+0x1c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f009 f9df 	bl	800a66c <MT_process_v3>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000010 	.word	0x20000010

080012bc <_Z13MotorTaskMainPv>:
* @retval None
*/
/* USER CODE END Header_UITaskMain */
#if (USE_TMC5160 == 1)
void MotorTaskMain(void *argument)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b0ad      	sub	sp, #180	; 0xb4
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	6078      	str	r0, [r7, #4]
  FUART_beginReceive(&huart1);
 80012c4:	48a1      	ldr	r0, [pc, #644]	; (800154c <_Z13MotorTaskMainPv+0x290>)
 80012c6:	f00c fcf5 	bl	800dcb4 <FUART_beginReceive>

  /* USER CODE BEGIN UITaskMain */
  Stepper_Init(g_MicroSteps);
 80012ca:	4ba1      	ldr	r3, [pc, #644]	; (8001550 <_Z13MotorTaskMainPv+0x294>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f00a fc82 	bl	800bbd8 <Stepper_Init>

  /* Start TMC external CLK, 12M*/
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80012d4:	2104      	movs	r1, #4
 80012d6:	489f      	ldr	r0, [pc, #636]	; (8001554 <_Z13MotorTaskMainPv+0x298>)
 80012d8:	f00f fec2 	bl	8011060 <HAL_TIM_PWM_Start>
  /* Driver En pin*/
  HAL_GPIO_WritePin(GPIOC, DRV_ENN_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2110      	movs	r1, #16
 80012e0:	489d      	ldr	r0, [pc, #628]	; (8001558 <_Z13MotorTaskMainPv+0x29c>)
 80012e2:	f00e fe9d 	bl	8010020 <HAL_GPIO_WritePin>

  /* Simple delay*/
  osDelay(10);
 80012e6:	200a      	movs	r0, #10
 80012e8:	f011 ffe8 	bl	80132bc <osDelay>

  TMC5160Stepper driver(0, 0.075, 0, 0, 0, -1);
 80012ec:	f107 0020 	add.w	r0, r7, #32
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2300      	movs	r3, #0
 80012fc:	2200      	movs	r2, #0
 80012fe:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800155c <_Z13MotorTaskMainPv+0x2a0>
 8001302:	2100      	movs	r1, #0
 8001304:	f00c f8d6 	bl	800d4b4 <_ZN14TMC5160StepperC1Etfttta>

  driver.GSTAT(0);
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f00c fc41 	bl	800db96 <_ZN10TMCStepper5GSTATEh>

  int32_t chopconf = driver.CHOPCONF();
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4618      	mov	r0, r3
 800131a:	f00a fd65 	bl	800bde8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800131e:	4603      	mov	r3, r0
 8001320:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  printf("TMC5160 chop conf: 0x%08x\n", (unsigned int)chopconf);
 8001324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001328:	4619      	mov	r1, r3
 800132a:	488d      	ldr	r0, [pc, #564]	; (8001560 <_Z13MotorTaskMainPv+0x2a4>)
 800132c:	f016 f9de 	bl	80176ec <iprintf>

  /* Read vel actual*/
  int32_t va = driver.VACTUAL();
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	4618      	mov	r0, r3
 8001336:	f00b ff3d 	bl	800d1b4 <_ZN14TMC5130Stepper7VACTUALEv>
 800133a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  printf("TMC5160 vactual: %ld\n", va);
 800133e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001342:	4888      	ldr	r0, [pc, #544]	; (8001564 <_Z13MotorTaskMainPv+0x2a8>)
 8001344:	f016 f9d2 	bl	80176ec <iprintf>

  driver.defaults();
 8001348:	f107 0320 	add.w	r3, r7, #32
 800134c:	4618      	mov	r0, r3
 800134e:	f00c f8e5 	bl	800d51c <_ZN14TMC5160Stepper8defaultsEv>
  driver.push();
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4618      	mov	r0, r3
 8001358:	f00c f95c 	bl	800d614 <_ZN14TMC5160Stepper4pushEv>
  driver.begin();
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	4618      	mov	r0, r3
 8001362:	f00b fe27 	bl	800cfb4 <_ZN14TMC5130Stepper5beginEv>

  uint8_t conn = driver.test_connection();
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4618      	mov	r0, r3
 800136c:	f00c fac4 	bl	800d8f8 <_ZN10TMCStepper15test_connectionEv>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  if (conn != 0){
 8001376:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <_Z13MotorTaskMainPv+0xce>
    printf("TMC5160 not connected, ret: %d\n", conn);
 800137e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001382:	4619      	mov	r1, r3
 8001384:	4878      	ldr	r0, [pc, #480]	; (8001568 <_Z13MotorTaskMainPv+0x2ac>)
 8001386:	f016 f9b1 	bl	80176ec <iprintf>
  }

  uint8_t version = driver.version();
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	4618      	mov	r0, r3
 8001390:	f00b fe89 	bl	800d0a6 <_ZN14TMC5130Stepper7versionEv>
 8001394:	4603      	mov	r3, r0
 8001396:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
  printf("TMC driver version: 0x%02x\n", version);
 800139a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800139e:	4619      	mov	r1, r3
 80013a0:	4872      	ldr	r0, [pc, #456]	; (800156c <_Z13MotorTaskMainPv+0x2b0>)
 80013a2:	f016 f9a3 	bl	80176ec <iprintf>

  driver.chm(0); // Standard mode (spreadCycle)
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00a fdb0 	bl	800bf12 <_ZN14TMC2130Stepper3chmEb>

  /* CHOPPER_DEFAULT_24V, (4,5,0), tuned to: 4,5,2*/
  driver.toff(4); // 0: shutdown, 1: only with tbl>=2, DcStep: no less than 3
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2104      	movs	r1, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00a fd3b 	bl	800be34 <_ZN14TMC2130Stepper4toffEh>
  driver.hend(6);
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	2106      	movs	r1, #6
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00a fd71 	bl	800beac <_ZN14TMC2130Stepper4hendEh>
  driver.hstrt(2);
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	2102      	movs	r1, #2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00a fd4d 	bl	800be70 <_ZN14TMC2130Stepper5hstrtEh>

  driver.tbl(2); // blank_time(36)
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	2102      	movs	r1, #2
 80013dc:	4618      	mov	r0, r3
 80013de:	f00a fdb3 	bl	800bf48 <_ZN14TMC2130Stepper3tblEh>

  driver.pwm_freq(1);
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	2101      	movs	r1, #1
 80013e8:	4618      	mov	r0, r3
 80013ea:	f00b f83c 	bl	800c466 <_ZN14TMC2160Stepper8pwm_freqEh>
  driver.TPOWERDOWN(10);
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	210a      	movs	r1, #10
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00c fbdf 	bl	800dbb8 <_ZN10TMCStepper10TPOWERDOWNEh>
  //driver.pwm_autoscale(true);
  driver.TPWMTHRS(2000);
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001402:	4618      	mov	r0, r3
 8001404:	f00c fbed 	bl	800dbe2 <_ZN10TMCStepper8TPWMTHRSEm>

  driver.blank_time(24);
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	2118      	movs	r1, #24
 800140e:	4618      	mov	r0, r3
 8001410:	f00c fb78 	bl	800db04 <_ZN10TMCStepper10blank_timeEh>

  /*Work current*/
  driver.rms_current(g_WorkCurrent); // mA
 8001414:	4b56      	ldr	r3, [pc, #344]	; (8001570 <_Z13MotorTaskMainPv+0x2b4>)
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	f107 0320 	add.w	r3, r7, #32
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe1e 	bl	8001060 <_ZN14TMC5160Stepper11rms_currentEt>
  driver.intpol(1);
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f00a fdf8 	bl	800c020 <_ZN14TMC2130Stepper6intpolEb>

  driver.microsteps(g_MicroSteps);
 8001430:	4b47      	ldr	r3, [pc, #284]	; (8001550 <_Z13MotorTaskMainPv+0x294>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b29a      	uxth	r2, r3
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f00c fa77 	bl	800d930 <_ZN10TMCStepper10microstepsEt>
  driver.TCOOLTHRS(400000); // 20bit max
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	494b      	ldr	r1, [pc, #300]	; (8001574 <_Z13MotorTaskMainPv+0x2b8>)
 8001448:	4618      	mov	r0, r3
 800144a:	f00b faab 	bl	800c9a4 <_ZN14TMC2130Stepper9TCOOLTHRSEm>
  driver.THIGH(1200);
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8001456:	4618      	mov	r0, r3
 8001458:	f00b facb 	bl	800c9f2 <_ZN14TMC2130Stepper5THIGHEm>
  driver.semin(5);
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	2105      	movs	r1, #5
 8001462:	4618      	mov	r0, r3
 8001464:	f00a fe9b 	bl	800c19e <_ZN14TMC2130Stepper5seminEh>
  driver.semax(2);
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	2102      	movs	r1, #2
 800146e:	4618      	mov	r0, r3
 8001470:	f00a feba 	bl	800c1e8 <_ZN14TMC2130Stepper5semaxEh>
  driver.sedn(0b01);
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	2101      	movs	r1, #1
 800147a:	4618      	mov	r0, r3
 800147c:	f00a fed9 	bl	800c232 <_ZN14TMC2130Stepper4sednEh>
  driver.sgt(STALL_VALUE);
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	213f      	movs	r1, #63	; 0x3f
 8001486:	4618      	mov	r0, r3
 8001488:	f00a fef8 	bl	800c27c <_ZN14TMC2130Stepper3sgtEa>
  driver.VDCMIN(800000);
  driver.dc_time(96);
  HAL_GPIO_WritePin(DCEN_GPIO_Port, DCEN_Pin, GPIO_PIN_SET);
*/

  bool enable = driver.isEnabled();
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f00b fa4a 	bl	800c92a <_ZN14TMC2130Stepper9isEnabledEv>
 8001496:	4603      	mov	r3, r0
 8001498:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
  if (enable){
 800149c:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <_Z13MotorTaskMainPv+0x1ee>
	  printf("driver enable\n");
 80014a4:	4834      	ldr	r0, [pc, #208]	; (8001578 <_Z13MotorTaskMainPv+0x2bc>)
 80014a6:	f016 f9a7 	bl	80177f8 <puts>
  }

  bool sdmode = driver.sd_mode();
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00b fde6 	bl	800d080 <_ZN14TMC5130Stepper7sd_modeEv>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
  if (sdmode){
 80014ba:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <_Z13MotorTaskMainPv+0x20c>
	  printf("driver use sdmode\n");
 80014c2:	482e      	ldr	r0, [pc, #184]	; (800157c <_Z13MotorTaskMainPv+0x2c0>)
 80014c4:	f016 f998 	bl	80177f8 <puts>
  }

  uint8_t state = driver.GSTAT();
 80014c8:	f107 0320 	add.w	r3, r7, #32
 80014cc:	4618      	mov	r0, r3
 80014ce:	f00c fb51 	bl	800db74 <_ZN10TMCStepper5GSTATEv>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
  printf("driver state: %d\n", state);
 80014d8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80014dc:	4619      	mov	r1, r3
 80014de:	4828      	ldr	r0, [pc, #160]	; (8001580 <_Z13MotorTaskMainPv+0x2c4>)
 80014e0:	f016 f904 	bl	80176ec <iprintf>

  uint16_t ms = driver.microsteps();
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00c fad1 	bl	800da90 <_ZN10TMCStepper10microstepsEv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  printf("motor micro steps: %d\n", ms);
 80014f4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80014f8:	4619      	mov	r1, r3
 80014fa:	4822      	ldr	r0, [pc, #136]	; (8001584 <_Z13MotorTaskMainPv+0x2c8>)
 80014fc:	f016 f8f6 	bl	80176ec <iprintf>

  /* Register TMC driver*/
  JNT_registerDriver(&driver);
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	4618      	mov	r0, r3
 8001506:	f008 fd4f 	bl	8009fa8 <JNT_registerDriver>

  MotionMsgItem_t item;
  item.position = 24800;
 800150a:	f246 03e0 	movw	r3, #24800	; 0x60e0
 800150e:	617b      	str	r3, [r7, #20]
  xQueueSend(g_MotionMsgQueue, &item, 0);
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <_Z13MotorTaskMainPv+0x2cc>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	f107 010c 	add.w	r1, r7, #12
 8001518:	2300      	movs	r3, #0
 800151a:	2200      	movs	r2, #0
 800151c:	f012 f95a 	bl	80137d4 <xQueueGenericSend>

  printf("Init Pos: %ld\n", g_IncSteps);
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <_Z13MotorTaskMainPv+0x2d0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	481a      	ldr	r0, [pc, #104]	; (8001590 <_Z13MotorTaskMainPv+0x2d4>)
 8001528:	f016 f8e0 	bl	80176ec <iprintf>

  xTimerStart(motorProcessTimer, 0);
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <_Z13MotorTaskMainPv+0x2d8>)
 800152e:	681c      	ldr	r4, [r3, #0]
 8001530:	f013 fa4e 	bl	80149d0 <xTaskGetTickCount>
 8001534:	4602      	mov	r2, r0
 8001536:	2300      	movs	r3, #0
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2300      	movs	r3, #0
 800153c:	2101      	movs	r1, #1
 800153e:	4620      	mov	r0, r4
 8001540:	f013 fffe 	bl	8015540 <xTimerGenericCommand>
  for(;;)
  {
	//JNT_processMsg();
	  //uint32_t ticks = 5;
	  //MT_process_v3(ticks);
	  osDelay(4);
 8001544:	2004      	movs	r0, #4
 8001546:	f011 feb9 	bl	80132bc <osDelay>
 800154a:	e7fb      	b.n	8001544 <_Z13MotorTaskMainPv+0x288>
 800154c:	200008d4 	.word	0x200008d4
 8001550:	20000001 	.word	0x20000001
 8001554:	20000854 	.word	0x20000854
 8001558:	40020800 	.word	0x40020800
 800155c:	3d99999a 	.word	0x3d99999a
 8001560:	08018824 	.word	0x08018824
 8001564:	08018840 	.word	0x08018840
 8001568:	08018858 	.word	0x08018858
 800156c:	08018878 	.word	0x08018878
 8001570:	20000008 	.word	0x20000008
 8001574:	00061a80 	.word	0x00061a80
 8001578:	08018894 	.word	0x08018894
 800157c:	080188a4 	.word	0x080188a4
 8001580:	080188b8 	.word	0x080188b8
 8001584:	080188cc 	.word	0x080188cc
 8001588:	20000678 	.word	0x20000678
 800158c:	20000670 	.word	0x20000670
 8001590:	080188e4 	.word	0x080188e4
 8001594:	20000684 	.word	0x20000684

08001598 <_Z15CanCommTaskMainPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CanCommTaskMain */
void CanCommTaskMain(void *argument)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CanCommTaskMain */
  uint8_t ret;

  if (NODE_new() == CO_ERROR_NO){
 80015a0:	f007 fbb0 	bl	8008d04 <NODE_new>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf0c      	ite	eq
 80015aa:	2301      	moveq	r3, #1
 80015ac:	2300      	movne	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00b      	beq.n	80015cc <_Z15CanCommTaskMainPv+0x34>
    ret = NODE_Init((void*)&hcan1, g_NodeId);
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <_Z15CanCommTaskMainPv+0xa8>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4822      	ldr	r0, [pc, #136]	; (8001644 <_Z15CanCommTaskMainPv+0xac>)
 80015bc:	f007 fbc0 	bl	8008d40 <NODE_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	75fb      	strb	r3, [r7, #23]
  }else{
    printf("Create CAN node failed.\n");
	return;
  }

  if (ret != CO_ERROR_NO){
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00a      	beq.n	80015e0 <_Z15CanCommTaskMainPv+0x48>
 80015ca:	e003      	b.n	80015d4 <_Z15CanCommTaskMainPv+0x3c>
    printf("Create CAN node failed.\n");
 80015cc:	481e      	ldr	r0, [pc, #120]	; (8001648 <_Z15CanCommTaskMainPv+0xb0>)
 80015ce:	f016 f913 	bl	80177f8 <puts>
	return;
 80015d2:	e031      	b.n	8001638 <_Z15CanCommTaskMainPv+0xa0>
    printf("Node initialize failed. [%d]\n", ret);
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	4619      	mov	r1, r3
 80015d8:	481c      	ldr	r0, [pc, #112]	; (800164c <_Z15CanCommTaskMainPv+0xb4>)
 80015da:	f016 f887 	bl	80176ec <iprintf>
	return;
 80015de:	e02b      	b.n	8001638 <_Z15CanCommTaskMainPv+0xa0>
  }

  bool_t   syncWas;
  uint32_t timerNext;

  uint32_t timeInterval = CAN_LOOP_DUARTION * TMR_TASK_INTERVAL;
 80015e0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80015e4:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;) {
	if(CO->CANmodule[0]->CANnormal){
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <_Z15CanCommTaskMainPv+0xb8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	7c9b      	ldrb	r3, [r3, #18]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf14      	ite	ne
 80015f4:	2301      	movne	r3, #1
 80015f6:	2300      	moveq	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d018      	beq.n	8001630 <_Z15CanCommTaskMainPv+0x98>

	  CO_process(CO, timeInterval, &timerNext);
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <_Z15CanCommTaskMainPv+0xb8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f107 0208 	add.w	r2, r7, #8
 8001606:	6939      	ldr	r1, [r7, #16]
 8001608:	4618      	mov	r0, r3
 800160a:	f006 ff91 	bl	8008530 <CO_process>

	  syncWas = CO_process_SYNC(CO, timeInterval, &timerNext);
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <_Z15CanCommTaskMainPv+0xb8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f107 0208 	add.w	r2, r7, #8
 8001616:	6939      	ldr	r1, [r7, #16]
 8001618:	4618      	mov	r0, r3
 800161a:	f006 ffed 	bl	80085f8 <CO_process_SYNC>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]

	  NODE_process(timeInterval, syncWas);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	b29b      	uxth	r3, r3
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f007 fcec 	bl	8009008 <NODE_process>
    }
	osDelay(CAN_LOOP_DUARTION);
 8001630:	2004      	movs	r0, #4
 8001632:	f011 fe43 	bl	80132bc <osDelay>
	if(CO->CANmodule[0]->CANnormal){
 8001636:	e7d6      	b.n	80015e6 <_Z15CanCommTaskMainPv+0x4e>
  }
  /* USER CODE END CanCommTaskMain */
}
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000000 	.word	0x20000000
 8001644:	20000644 	.word	0x20000644
 8001648:	080188f4 	.word	0x080188f4
 800164c:	0801890c 	.word	0x0801890c
 8001650:	20000a70 	.word	0x20000a70

08001654 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b6e      	ldr	r3, [pc, #440]	; (8001828 <MX_GPIO_Init+0x1d4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a6d      	ldr	r2, [pc, #436]	; (8001828 <MX_GPIO_Init+0x1d4>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <MX_GPIO_Init+0x1d4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b67      	ldr	r3, [pc, #412]	; (8001828 <MX_GPIO_Init+0x1d4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a66      	ldr	r2, [pc, #408]	; (8001828 <MX_GPIO_Init+0x1d4>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b64      	ldr	r3, [pc, #400]	; (8001828 <MX_GPIO_Init+0x1d4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b60      	ldr	r3, [pc, #384]	; (8001828 <MX_GPIO_Init+0x1d4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a5f      	ldr	r2, [pc, #380]	; (8001828 <MX_GPIO_Init+0x1d4>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <MX_GPIO_Init+0x1d4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b59      	ldr	r3, [pc, #356]	; (8001828 <MX_GPIO_Init+0x1d4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a58      	ldr	r2, [pc, #352]	; (8001828 <MX_GPIO_Init+0x1d4>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b56      	ldr	r3, [pc, #344]	; (8001828 <MX_GPIO_Init+0x1d4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b52      	ldr	r3, [pc, #328]	; (8001828 <MX_GPIO_Init+0x1d4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a51      	ldr	r2, [pc, #324]	; (8001828 <MX_GPIO_Init+0x1d4>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b4f      	ldr	r3, [pc, #316]	; (8001828 <MX_GPIO_Init+0x1d4>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|SPI3_CS_Pin|DRV_ENN_Pin|LED2_Pin
 80016f6:	2200      	movs	r2, #0
 80016f8:	f242 3171 	movw	r1, #9073	; 0x2371
 80016fc:	484b      	ldr	r0, [pc, #300]	; (800182c <MX_GPIO_Init+0x1d8>)
 80016fe:	f00e fc8f 	bl	8010020 <HAL_GPIO_WritePin>
                          |EXTSTEP_DIR_Pin|DCEN_Pin|Stepper_Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI2_CS_Pin|DCO_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	f241 0102 	movw	r1, #4098	; 0x1002
 8001708:	4849      	ldr	r0, [pc, #292]	; (8001830 <MX_GPIO_Init+0x1dc>)
 800170a:	f00e fc89 	bl	8010020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTSTEP_EN_GPIO_Port, EXTSTEP_EN_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001714:	4847      	ldr	r0, [pc, #284]	; (8001834 <MX_GPIO_Init+0x1e0>)
 8001716:	f00e fc83 	bl	8010020 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|DRV_ENN_Pin|LED2_Pin|EXTSTEP_DIR_Pin
 800171a:	f242 3370 	movw	r3, #9072	; 0x2370
 800171e:	617b      	str	r3, [r7, #20]
                          |DCEN_Pin|Stepper_Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	483e      	ldr	r0, [pc, #248]	; (800182c <MX_GPIO_Init+0x1d8>)
 8001734:	f00e f9c4 	bl	800fac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001738:	2301      	movs	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001740:	2301      	movs	r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001744:	2302      	movs	r3, #2
 8001746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4837      	ldr	r0, [pc, #220]	; (800182c <MX_GPIO_Init+0x1d8>)
 8001750:	f00e f9b6 	bl	800fac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001754:	2302      	movs	r3, #2
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001760:	2302      	movs	r3, #2
 8001762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4831      	ldr	r0, [pc, #196]	; (8001830 <MX_GPIO_Init+0x1dc>)
 800176c:	f00e f9a8 	bl	800fac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTSTEP_EN_Pin;
 8001770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTSTEP_EN_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	482a      	ldr	r0, [pc, #168]	; (8001834 <MX_GPIO_Init+0x1e0>)
 800178a:	f00e f999 	bl	800fac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCIN_Pin;
 800178e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCIN_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4823      	ldr	r0, [pc, #140]	; (8001830 <MX_GPIO_Init+0x1dc>)
 80017a4:	f00e f98c 	bl	800fac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCO_Pin;
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCO_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	481b      	ldr	r0, [pc, #108]	; (8001830 <MX_GPIO_Init+0x1dc>)
 80017c2:	f00e f97d 	bl	800fac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017c6:	2304      	movs	r3, #4
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = g_EndStopTriggerMode;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_GPIO_Init+0x1e4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4818      	ldr	r0, [pc, #96]	; (800183c <MX_GPIO_Init+0x1e8>)
 80017dc:	f00e f970 	bl	800fac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017e0:	2310      	movs	r3, #16
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <MX_GPIO_Init+0x1ec>)
 80017e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	4810      	ldr	r0, [pc, #64]	; (8001834 <MX_GPIO_Init+0x1e0>)
 80017f4:	f00e f964 	bl	800fac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIAG1_Pin|DIAG0_Pin;
 80017f8:	23c0      	movs	r3, #192	; 0xc0
 80017fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	480a      	ldr	r0, [pc, #40]	; (8001834 <MX_GPIO_Init+0x1e0>)
 800180c:	f00e f958 	bl	800fac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 6, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2106      	movs	r1, #6
 8001814:	2008      	movs	r0, #8
 8001816:	f00d fd89 	bl	800f32c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800181a:	2008      	movs	r0, #8
 800181c:	f00d fda2 	bl	800f364 <HAL_NVIC_EnableIRQ>

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	40020800 	.word	0x40020800
 8001830:	40020000 	.word	0x40020000
 8001834:	40020400 	.word	0x40020400
 8001838:	2000000c 	.word	0x2000000c
 800183c:	40020c00 	.word	0x40020c00
 8001840:	10110000 	.word	0x10110000

08001844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8001848:	f014 ffd0 	bl	80167ec <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184c:	f00c fd06 	bl	800e25c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001850:	f000 f822 	bl	8001898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001854:	f7ff fefe 	bl	8001654 <MX_GPIO_Init>
  MX_DMA_Init();
 8001858:	f7ff fbda 	bl	8001010 <MX_DMA_Init>
  MX_CAN1_Init();
 800185c:	f7ff fb10 	bl	8000e80 <MX_CAN1_Init>
  MX_SPI3_Init();
 8001860:	f000 f8d4 	bl	8001a0c <MX_SPI3_Init>
  MX_TIM1_Init();
 8001864:	f000 fb2a 	bl	8001ebc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001868:	f000 fbac 	bl	8001fc4 <MX_TIM2_Init>
  MX_TIM5_Init();
 800186c:	f000 fc00 	bl	8002070 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001870:	f000 fe4e 	bl	8002510 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001874:	f000 f894 	bl	80019a0 <MX_SPI2_Init>
  MX_TIM8_Init();
 8001878:	f000 fc50 	bl	800211c <MX_TIM8_Init>
  MX_TIM12_Init();
 800187c:	f000 fcd0 	bl	8002220 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  g_GPIOInitFinished = 1;
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <main+0x50>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001886:	f011 fc09 	bl	801309c <osKernelInitialize>
  MX_FREERTOS_Init();
 800188a:	f7ff fbf9 	bl	8001080 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800188e:	f011 fc39 	bl	8013104 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001892:	e7fe      	b.n	8001892 <main+0x4e>
 8001894:	2000069c 	.word	0x2000069c

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b094      	sub	sp, #80	; 0x50
 800189c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189e:	f107 0320 	add.w	r3, r7, #32
 80018a2:	2230      	movs	r2, #48	; 0x30
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f015 fe22 	bl	80174f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <SystemClock_Config+0xcc>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a27      	ldr	r2, [pc, #156]	; (8001964 <SystemClock_Config+0xcc>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <SystemClock_Config+0xcc>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <SystemClock_Config+0xd0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a21      	ldr	r2, [pc, #132]	; (8001968 <SystemClock_Config+0xd0>)
 80018e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <SystemClock_Config+0xd0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fe:	2302      	movs	r3, #2
 8001900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001908:	230f      	movs	r3, #15
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800190c:	23c0      	movs	r3, #192	; 0xc0
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001910:	2302      	movs	r3, #2
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001914:	2304      	movs	r3, #4
 8001916:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001918:	f107 0320 	add.w	r3, r7, #32
 800191c:	4618      	mov	r0, r3
 800191e:	f00e fbbd 	bl	801009c <HAL_RCC_OscConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001928:	f000 f832 	bl	8001990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192c:	230f      	movs	r3, #15
 800192e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001930:	2302      	movs	r3, #2
 8001932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001938:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800193c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2105      	movs	r1, #5
 800194a:	4618      	mov	r0, r3
 800194c:	f00e fe14 	bl	8010578 <HAL_RCC_ClockConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001956:	f000 f81b 	bl	8001990 <Error_Handler>
  }
}
 800195a:	bf00      	nop
 800195c:	3750      	adds	r7, #80	; 0x50
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40007000 	.word	0x40007000

0800196c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800197e:	f00c fc8f 	bl	800e2a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40001c00 	.word	0x40001c00

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <MX_SPI2_Init+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019d4:	2228      	movs	r2, #40	; 0x28
 80019d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019ec:	220a      	movs	r2, #10
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_SPI2_Init+0x64>)
 80019f2:	f00e ffd3 	bl	801099c <HAL_SPI_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80019fc:	f7ff ffc8 	bl	8001990 <Error_Handler>
  }

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200006a0 	.word	0x200006a0
 8001a08:	40003800 	.word	0x40003800

08001a0c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a12:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <MX_SPI3_Init+0x6c>)
 8001a14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a2a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a42:	2228      	movs	r2, #40	; 0x28
 8001a44:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a5a:	220a      	movs	r2, #10
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_SPI3_Init+0x68>)
 8001a60:	f00e ff9c 	bl	801099c <HAL_SPI_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001a6a:	f7ff ff91 	bl	8001990 <Error_Handler>
  }

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200006f8 	.word	0x200006f8
 8001a78:	40003c00 	.word	0x40003c00

08001a7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a42      	ldr	r2, [pc, #264]	; (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d14b      	bne.n	8001b36 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a40      	ldr	r2, [pc, #256]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b3e      	ldr	r3, [pc, #248]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a39      	ldr	r2, [pc, #228]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001af2:	230c      	movs	r3, #12
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b02:	2305      	movs	r3, #5
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4827      	ldr	r0, [pc, #156]	; (8001bac <HAL_SPI_MspInit+0x130>)
 8001b0e:	f00d ffd7 	bl	800fac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b24:	2305      	movs	r3, #5
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4820      	ldr	r0, [pc, #128]	; (8001bb0 <HAL_SPI_MspInit+0x134>)
 8001b30:	f00d ffc6 	bl	800fac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b34:	e031      	b.n	8001b9a <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_SPI_MspInit+0x138>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d12c      	bne.n	8001b9a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_SPI_MspInit+0x130>)
 8001b96:	f00d ff93 	bl	800fac0 <HAL_GPIO_Init>
}
 8001b9a:	bf00      	nop
 8001b9c:	3730      	adds	r7, #48	; 0x30
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40003800 	.word	0x40003800
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020800 	.word	0x40020800
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40003c00 	.word	0x40003c00

08001bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_MspInit+0x4c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <HAL_MspInit+0x4c>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_MspInit+0x4c>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_MspInit+0x4c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_MspInit+0x4c>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_MspInit+0x4c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800

08001c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	; 0x30
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	202c      	movs	r0, #44	; 0x2c
 8001c1e:	f00d fb85 	bl	800f32c <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c22:	202c      	movs	r0, #44	; 0x2c
 8001c24:	f00d fb9e 	bl	800f364 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <HAL_InitTick+0xa4>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_InitTick+0xa4>)
 8001c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_InitTick+0xa4>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c44:	f107 0210 	add.w	r2, r7, #16
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f00e fe72 	bl	8010938 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c54:	f00e fe48 	bl	80108e8 <HAL_RCC_GetPCLK1Freq>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <HAL_InitTick+0xa8>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	0c9b      	lsrs	r3, r3, #18
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_InitTick+0xac>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <HAL_InitTick+0xb0>)
 8001c70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000 / 1000) - 1;
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_InitTick+0xac>)
 8001c74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c78:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_InitTick+0xac>)
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_InitTick+0xac>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_InitTick+0xac>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <HAL_InitTick+0xac>)
 8001c8e:	f00f f937 	bl	8010f00 <HAL_TIM_Base_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d104      	bne.n	8001ca2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001c98:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <HAL_InitTick+0xac>)
 8001c9a:	f00f f966 	bl	8010f6a <HAL_TIM_Base_Start_IT>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	e000      	b.n	8001ca4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3730      	adds	r7, #48	; 0x30
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	431bde83 	.word	0x431bde83
 8001cb4:	20000750 	.word	0x20000750
 8001cb8:	40001c00 	.word	0x40001c00

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <HardFault_Handler+0x4>

08001cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <MemManage_Handler+0x4>

08001cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <BusFault_Handler+0x4>

08001cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <UsageFault_Handler+0x4>

08001ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001cf4:	2004      	movs	r0, #4
 8001cf6:	f00e f9ad 	bl	8010054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == g_EndStopTriggerState && g_GPIOInitFinished == 1){
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	4808      	ldr	r0, [pc, #32]	; (8001d20 <EXTI2_IRQHandler+0x30>)
 8001cfe:	f00e f977 	bl	800fff0 <HAL_GPIO_ReadPin>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <EXTI2_IRQHandler+0x34>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d106      	bne.n	8001d1c <EXTI2_IRQHandler+0x2c>
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <EXTI2_IRQHandler+0x38>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d102      	bne.n	8001d1c <EXTI2_IRQHandler+0x2c>
    HOME_OnSwitchSignal(GPIO_PIN_2);
 8001d16:	2004      	movs	r0, #4
 8001d18:	f005 ffb0 	bl	8007c7c <HOME_OnSwitchSignal>
  }
  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	2000066c 	.word	0x2000066c
 8001d28:	2000069c 	.word	0x2000069c

08001d2c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <CAN1_TX_IRQHandler+0x10>)
 8001d32:	f00c fff9 	bl	800ed28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000644 	.word	0x20000644

08001d40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <CAN1_RX0_IRQHandler+0x10>)
 8001d46:	f00c ffef 	bl	800ed28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000644 	.word	0x20000644

08001d54 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <CAN1_RX1_IRQHandler+0x10>)
 8001d5a:	f00c ffe5 	bl	800ed28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000644 	.word	0x20000644

08001d68 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <CAN1_SCE_IRQHandler+0x10>)
 8001d6e:	f00c ffdb 	bl	800ed28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000644 	.word	0x20000644

08001d7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d82:	f00f fac9 	bl	8011318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000794 	.word	0x20000794

08001d90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <TIM1_CC_IRQHandler+0x10>)
 8001d96:	f00f fabf 	bl	8011318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000794 	.word	0x20000794

08001da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <TIM2_IRQHandler+0x10>)
 8001daa:	f00f fab5 	bl	8011318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200007d4 	.word	0x200007d4

08001db8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <USART1_IRQHandler+0x10>)
 8001dbe:	f010 f989 	bl	80120d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200008d4 	.word	0x200008d4

08001dcc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8001dd2:	f00f faa1 	bl	8011318 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001dd8:	f00f fa9e 	bl	8011318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000854 	.word	0x20000854
 8001de4:	20000750 	.word	0x20000750

08001de8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <TIM5_IRQHandler+0x10>)
 8001dee:	f00f fa93 	bl	8011318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000814 	.word	0x20000814

08001dfc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <DMA2_Stream2_IRQHandler+0x10>)
 8001e02:	f00d fbf3 	bl	800f5ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000914 	.word	0x20000914

08001e10 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <DMA2_Stream7_IRQHandler+0x10>)
 8001e16:	f00d fbe9 	bl	800f5ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000974 	.word	0x20000974

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f015 fa12 	bl	801727c <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20020000 	.word	0x20020000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	20000790 	.word	0x20000790
 8001e8c:	20006e98 	.word	0x20006e98

08001e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <SystemInit+0x28>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <SystemInit+0x28>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <SystemInit+0x28>)
 8001ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eaa:	609a      	str	r2, [r3, #8]
#endif
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b092      	sub	sp, #72	; 0x48
 8001ec0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
 8001edc:	615a      	str	r2, [r3, #20]
 8001ede:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f015 fb02 	bl	80174f0 <memset>

  htim1.Instance = TIM1;
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001eee:	4a34      	ldr	r2, [pc, #208]	; (8001fc0 <MX_TIM1_Init+0x104>)
 8001ef0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001ef2:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001ef4:	2253      	movs	r2, #83	; 0x53
 8001ef6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001efe:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001f00:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001f04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f18:	4828      	ldr	r0, [pc, #160]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001f1a:	f00f f875 	bl	8011008 <HAL_TIM_PWM_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001f24:	f7ff fd34 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f34:	4619      	mov	r1, r3
 8001f36:	4821      	ldr	r0, [pc, #132]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001f38:	f00f feb0 	bl	8011c9c <HAL_TIMEx_MasterConfigSynchronization>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001f42:	f7ff fd25 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f46:	2360      	movs	r3, #96	; 0x60
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 250;
 8001f4a:	23fa      	movs	r3, #250	; 0xfa
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f52:	2300      	movs	r3, #0
 8001f54:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f66:	2200      	movs	r2, #0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4814      	ldr	r0, [pc, #80]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001f6c:	f00f fb3c 	bl	80115e8 <HAL_TIM_PWM_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001f76:	f7ff fd0b 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001f9e:	f00f fef9 	bl	8011d94 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001fa8:	f7ff fcf2 	bl	8001990 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <MX_TIM1_Init+0x100>)
 8001fae:	f000 fa23 	bl	80023f8 <HAL_TIM_MspPostInit>

}
 8001fb2:	bf00      	nop
 8001fb4:	3748      	adds	r7, #72	; 0x48
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000794 	.word	0x20000794
 8001fc0:	40010000 	.word	0x40010000

08001fc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001fe6:	4b21      	ldr	r3, [pc, #132]	; (800206c <MX_TIM2_Init+0xa8>)
 8001fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <MX_TIM2_Init+0xa8>)
 8001ff0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ff4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <MX_TIM2_Init+0xa8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <MX_TIM2_Init+0xa8>)
 8001ffe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002002:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <MX_TIM2_Init+0xa8>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <MX_TIM2_Init+0xa8>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002010:	4816      	ldr	r0, [pc, #88]	; (800206c <MX_TIM2_Init+0xa8>)
 8002012:	f00e ffce 	bl	8010fb2 <HAL_TIM_OC_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800201c:	f7ff fcb8 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002020:	2320      	movs	r3, #32
 8002022:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	4619      	mov	r1, r3
 800202e:	480f      	ldr	r0, [pc, #60]	; (800206c <MX_TIM2_Init+0xa8>)
 8002030:	f00f fe34 	bl	8011c9c <HAL_TIMEx_MasterConfigSynchronization>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800203a:	f7ff fca9 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2200      	movs	r2, #0
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_TIM2_Init+0xa8>)
 8002056:	f00f fa67 	bl	8011528 <HAL_TIM_OC_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002060:	f7ff fc96 	bl	8001990 <Error_Handler>
  }

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200007d4 	.word	0x200007d4

08002070 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002076:	f107 0320 	add.w	r3, r7, #32
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	611a      	str	r2, [r3, #16]
 800208e:	615a      	str	r2, [r3, #20]
 8002090:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <MX_TIM5_Init+0xa4>)
 8002094:	4a20      	ldr	r2, [pc, #128]	; (8002118 <MX_TIM5_Init+0xa8>)
 8002096:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002098:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <MX_TIM5_Init+0xa4>)
 800209a:	2253      	movs	r2, #83	; 0x53
 800209c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <MX_TIM5_Init+0xa4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <MX_TIM5_Init+0xa4>)
 80020a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80020aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <MX_TIM5_Init+0xa4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <MX_TIM5_Init+0xa4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80020b8:	4816      	ldr	r0, [pc, #88]	; (8002114 <MX_TIM5_Init+0xa4>)
 80020ba:	f00e ff7a 	bl	8010fb2 <HAL_TIM_OC_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80020c4:	f7ff fc64 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020c8:	2320      	movs	r3, #32
 80020ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020d0:	f107 0320 	add.w	r3, r7, #32
 80020d4:	4619      	mov	r1, r3
 80020d6:	480f      	ldr	r0, [pc, #60]	; (8002114 <MX_TIM5_Init+0xa4>)
 80020d8:	f00f fde0 	bl	8011c9c <HAL_TIMEx_MasterConfigSynchronization>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80020e2:	f7ff fc55 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2200      	movs	r2, #0
 80020fa:	4619      	mov	r1, r3
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <MX_TIM5_Init+0xa4>)
 80020fe:	f00f fa13 	bl	8011528 <HAL_TIM_OC_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002108:	f7ff fc42 	bl	8001990 <Error_Handler>
  }

}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000814 	.word	0x20000814
 8002118:	40000c00 	.word	0x40000c00

0800211c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b092      	sub	sp, #72	; 0x48
 8002120:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002122:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800212c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
 800213c:	615a      	str	r2, [r3, #20]
 800213e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2220      	movs	r2, #32
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f015 f9d2 	bl	80174f0 <memset>

  htim8.Instance = TIM8;
 800214c:	4b32      	ldr	r3, [pc, #200]	; (8002218 <MX_TIM8_Init+0xfc>)
 800214e:	4a33      	ldr	r2, [pc, #204]	; (800221c <MX_TIM8_Init+0x100>)
 8002150:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <MX_TIM8_Init+0xfc>)
 8002154:	2201      	movs	r2, #1
 8002156:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002158:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <MX_TIM8_Init+0xfc>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 6;
 800215e:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <MX_TIM8_Init+0xfc>)
 8002160:	2206      	movs	r2, #6
 8002162:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002164:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <MX_TIM8_Init+0xfc>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800216a:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <MX_TIM8_Init+0xfc>)
 800216c:	2200      	movs	r2, #0
 800216e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <MX_TIM8_Init+0xfc>)
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002176:	4828      	ldr	r0, [pc, #160]	; (8002218 <MX_TIM8_Init+0xfc>)
 8002178:	f00e ff46 	bl	8011008 <HAL_TIM_PWM_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8002182:	f7ff fc05 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002186:	2320      	movs	r3, #32
 8002188:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800218e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002192:	4619      	mov	r1, r3
 8002194:	4820      	ldr	r0, [pc, #128]	; (8002218 <MX_TIM8_Init+0xfc>)
 8002196:	f00f fd81 	bl	8011c9c <HAL_TIMEx_MasterConfigSynchronization>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 80021a0:	f7ff fbf6 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a4:	2360      	movs	r3, #96	; 0x60
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 3;
 80021a8:	2303      	movs	r3, #3
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021bc:	2300      	movs	r3, #0
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	2204      	movs	r2, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	4813      	ldr	r0, [pc, #76]	; (8002218 <MX_TIM8_Init+0xfc>)
 80021ca:	f00f fa0d 	bl	80115e8 <HAL_TIM_PWM_ConfigChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80021d4:	f7ff fbdc 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4807      	ldr	r0, [pc, #28]	; (8002218 <MX_TIM8_Init+0xfc>)
 80021fc:	f00f fdca 	bl	8011d94 <HAL_TIMEx_ConfigBreakDeadTime>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002206:	f7ff fbc3 	bl	8001990 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800220a:	4803      	ldr	r0, [pc, #12]	; (8002218 <MX_TIM8_Init+0xfc>)
 800220c:	f000 f8f4 	bl	80023f8 <HAL_TIM_MspPostInit>

}
 8002210:	bf00      	nop
 8002212:	3748      	adds	r7, #72	; 0x48
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000854 	.word	0x20000854
 800221c:	40010400 	.word	0x40010400

08002220 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
 8002234:	615a      	str	r2, [r3, #20]
 8002236:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <MX_TIM12_Init+0x80>)
 800223a:	4a1a      	ldr	r2, [pc, #104]	; (80022a4 <MX_TIM12_Init+0x84>)
 800223c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 6;
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <MX_TIM12_Init+0x80>)
 8002240:	2206      	movs	r2, #6
 8002242:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <MX_TIM12_Init+0x80>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 5;
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <MX_TIM12_Init+0x80>)
 800224c:	2205      	movs	r2, #5
 800224e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <MX_TIM12_Init+0x80>)
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <MX_TIM12_Init+0x80>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800225c:	4810      	ldr	r0, [pc, #64]	; (80022a0 <MX_TIM12_Init+0x80>)
 800225e:	f00e fed3 	bl	8011008 <HAL_TIM_PWM_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8002268:	f7ff fb92 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800226c:	2360      	movs	r3, #96	; 0x60
 800226e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8002270:	2303      	movs	r3, #3
 8002272:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	2200      	movs	r2, #0
 8002280:	4619      	mov	r1, r3
 8002282:	4807      	ldr	r0, [pc, #28]	; (80022a0 <MX_TIM12_Init+0x80>)
 8002284:	f00f f9b0 	bl	80115e8 <HAL_TIM_PWM_ConfigChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800228e:	f7ff fb7f 	bl	8001990 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8002292:	4803      	ldr	r0, [pc, #12]	; (80022a0 <MX_TIM12_Init+0x80>)
 8002294:	f000 f8b0 	bl	80023f8 <HAL_TIM_MspPostInit>

}
 8002298:	bf00      	nop
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000894 	.word	0x20000894
 80022a4:	40001800 	.word	0x40001800

080022a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2a      	ldr	r2, [pc, #168]	; (8002360 <HAL_TIM_PWM_MspInit+0xb8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d11e      	bne.n	80022f8 <HAL_TIM_PWM_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	4b29      	ldr	r3, [pc, #164]	; (8002364 <HAL_TIM_PWM_MspInit+0xbc>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_TIM_PWM_MspInit+0xbc>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_TIM_PWM_MspInit+0xbc>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	2019      	movs	r0, #25
 80022dc:	f00d f826 	bl	800f32c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022e0:	2019      	movs	r0, #25
 80022e2:	f00d f83f 	bl	800f364 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	201b      	movs	r0, #27
 80022ec:	f00d f81e 	bl	800f32c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022f0:	201b      	movs	r0, #27
 80022f2:	f00d f837 	bl	800f364 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80022f6:	e02e      	b.n	8002356 <HAL_TIM_PWM_MspInit+0xae>
  else if(tim_pwmHandle->Instance==TIM8)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <HAL_TIM_PWM_MspInit+0xc0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d116      	bne.n	8002330 <HAL_TIM_PWM_MspInit+0x88>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <HAL_TIM_PWM_MspInit+0xbc>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a16      	ldr	r2, [pc, #88]	; (8002364 <HAL_TIM_PWM_MspInit+0xbc>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_TIM_PWM_MspInit+0xbc>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	202c      	movs	r0, #44	; 0x2c
 8002324:	f00d f802 	bl	800f32c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002328:	202c      	movs	r0, #44	; 0x2c
 800232a:	f00d f81b 	bl	800f364 <HAL_NVIC_EnableIRQ>
}
 800232e:	e012      	b.n	8002356 <HAL_TIM_PWM_MspInit+0xae>
  else if(tim_pwmHandle->Instance==TIM12)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <HAL_TIM_PWM_MspInit+0xc4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d10d      	bne.n	8002356 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_TIM_PWM_MspInit+0xbc>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_TIM_PWM_MspInit+0xbc>)
 8002344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_TIM_PWM_MspInit+0xbc>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40010000 	.word	0x40010000
 8002364:	40023800 	.word	0x40023800
 8002368:	40010400 	.word	0x40010400
 800236c:	40001800 	.word	0x40001800

08002370 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	d116      	bne.n	80023b0 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_TIM_OC_MspInit+0x80>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_TIM_OC_MspInit+0x80>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_TIM_OC_MspInit+0x80>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	201c      	movs	r0, #28
 80023a4:	f00c ffc2 	bl	800f32c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023a8:	201c      	movs	r0, #28
 80023aa:	f00c ffdb 	bl	800f364 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80023ae:	e01a      	b.n	80023e6 <HAL_TIM_OC_MspInit+0x76>
  else if(tim_ocHandle->Instance==TIM5)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_TIM_OC_MspInit+0x84>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d115      	bne.n	80023e6 <HAL_TIM_OC_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_TIM_OC_MspInit+0x80>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <HAL_TIM_OC_MspInit+0x80>)
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_TIM_OC_MspInit+0x80>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	2032      	movs	r0, #50	; 0x32
 80023dc:	f00c ffa6 	bl	800f32c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023e0:	2032      	movs	r0, #50	; 0x32
 80023e2:	f00c ffbf 	bl	800f364 <HAL_NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40000c00 	.word	0x40000c00

080023f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a37      	ldr	r2, [pc, #220]	; (80024f4 <HAL_TIM_MspPostInit+0xfc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d11f      	bne.n	800245a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <HAL_TIM_MspPostInit+0x100>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a35      	ldr	r2, [pc, #212]	; (80024f8 <HAL_TIM_MspPostInit+0x100>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <HAL_TIM_MspPostInit+0x100>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002448:	2301      	movs	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	482a      	ldr	r0, [pc, #168]	; (80024fc <HAL_TIM_MspPostInit+0x104>)
 8002454:	f00d fb34 	bl	800fac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002458:	e047      	b.n	80024ea <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a28      	ldr	r2, [pc, #160]	; (8002500 <HAL_TIM_MspPostInit+0x108>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d11e      	bne.n	80024a2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_TIM_MspPostInit+0x100>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <HAL_TIM_MspPostInit+0x100>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6313      	str	r3, [r2, #48]	; 0x30
 8002474:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_TIM_MspPostInit+0x100>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002490:	2303      	movs	r3, #3
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	481a      	ldr	r0, [pc, #104]	; (8002504 <HAL_TIM_MspPostInit+0x10c>)
 800249c:	f00d fb10 	bl	800fac0 <HAL_GPIO_Init>
}
 80024a0:	e023      	b.n	80024ea <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM12)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a18      	ldr	r2, [pc, #96]	; (8002508 <HAL_TIM_MspPostInit+0x110>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d11e      	bne.n	80024ea <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_TIM_MspPostInit+0x100>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <HAL_TIM_MspPostInit+0x100>)
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	6313      	str	r3, [r2, #48]	; 0x30
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_TIM_MspPostInit+0x100>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80024c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80024da:	2309      	movs	r3, #9
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	4809      	ldr	r0, [pc, #36]	; (800250c <HAL_TIM_MspPostInit+0x114>)
 80024e6:	f00d faeb 	bl	800fac0 <HAL_GPIO_Init>
}
 80024ea:	bf00      	nop
 80024ec:	3728      	adds	r7, #40	; 0x28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020000 	.word	0x40020000
 8002500:	40010400 	.word	0x40010400
 8002504:	40020800 	.word	0x40020800
 8002508:	40001800 	.word	0x40001800
 800250c:	40020400 	.word	0x40020400

08002510 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_USART1_UART_Init+0x4c>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <MX_USART1_UART_Init+0x50>)
 8002518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <MX_USART1_UART_Init+0x4c>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_USART1_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <MX_USART1_UART_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <MX_USART1_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <MX_USART1_UART_Init+0x4c>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <MX_USART1_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_USART1_UART_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_USART1_UART_Init+0x4c>)
 8002548:	f00f fc8a 	bl	8011e60 <HAL_UART_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002552:	f7ff fa1d 	bl	8001990 <Error_Handler>
  }

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200008d4 	.word	0x200008d4
 8002560:	40011000 	.word	0x40011000

08002564 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a4c      	ldr	r2, [pc, #304]	; (80026b4 <HAL_UART_MspInit+0x150>)
 8002582:	4293      	cmp	r3, r2
 8002584:	f040 8092 	bne.w	80026ac <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	4b4a      	ldr	r3, [pc, #296]	; (80026b8 <HAL_UART_MspInit+0x154>)
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	4a49      	ldr	r2, [pc, #292]	; (80026b8 <HAL_UART_MspInit+0x154>)
 8002592:	f043 0310 	orr.w	r3, r3, #16
 8002596:	6453      	str	r3, [r2, #68]	; 0x44
 8002598:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_UART_MspInit+0x154>)
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <HAL_UART_MspInit+0x154>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	4a42      	ldr	r2, [pc, #264]	; (80026b8 <HAL_UART_MspInit+0x154>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6313      	str	r3, [r2, #48]	; 0x30
 80025b4:	4b40      	ldr	r3, [pc, #256]	; (80026b8 <HAL_UART_MspInit+0x154>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025d2:	2307      	movs	r3, #7
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	4837      	ldr	r0, [pc, #220]	; (80026bc <HAL_UART_MspInit+0x158>)
 80025de:	f00d fa6f 	bl	800fac0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80025e2:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 80025e4:	4a37      	ldr	r2, [pc, #220]	; (80026c4 <HAL_UART_MspInit+0x160>)
 80025e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80025e8:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 80025ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f0:	4b33      	ldr	r3, [pc, #204]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f6:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025fc:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 80025fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002602:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002604:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 8002606:	2200      	movs	r2, #0
 8002608:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800260a:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 8002612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002616:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002618:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 800261a:	2200      	movs	r2, #0
 800261c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800261e:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 8002620:	2200      	movs	r2, #0
 8002622:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002624:	4826      	ldr	r0, [pc, #152]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 8002626:	f00c feb9 	bl	800f39c <HAL_DMA_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002630:	f7ff f9ae 	bl	8001990 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 8002638:	635a      	str	r2, [r3, #52]	; 0x34
 800263a:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <HAL_UART_MspInit+0x15c>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_UART_MspInit+0x164>)
 8002642:	4a22      	ldr	r2, [pc, #136]	; (80026cc <HAL_UART_MspInit+0x168>)
 8002644:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_UART_MspInit+0x164>)
 8002648:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800264c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <HAL_UART_MspInit+0x164>)
 8002650:	2240      	movs	r2, #64	; 0x40
 8002652:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002654:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <HAL_UART_MspInit+0x164>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_UART_MspInit+0x164>)
 800265c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002660:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002662:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_UART_MspInit+0x164>)
 8002664:	2200      	movs	r2, #0
 8002666:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002668:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_UART_MspInit+0x164>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <HAL_UART_MspInit+0x164>)
 8002670:	2200      	movs	r2, #0
 8002672:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <HAL_UART_MspInit+0x164>)
 8002676:	2200      	movs	r2, #0
 8002678:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_UART_MspInit+0x164>)
 800267c:	2200      	movs	r2, #0
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002680:	4811      	ldr	r0, [pc, #68]	; (80026c8 <HAL_UART_MspInit+0x164>)
 8002682:	f00c fe8b 	bl	800f39c <HAL_DMA_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800268c:	f7ff f980 	bl	8001990 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <HAL_UART_MspInit+0x164>)
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
 8002696:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <HAL_UART_MspInit+0x164>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2105      	movs	r1, #5
 80026a0:	2025      	movs	r0, #37	; 0x25
 80026a2:	f00c fe43 	bl	800f32c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026a6:	2025      	movs	r0, #37	; 0x25
 80026a8:	f00c fe5c 	bl	800f364 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026ac:	bf00      	nop
 80026ae:	3728      	adds	r7, #40	; 0x28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40011000 	.word	0x40011000
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020000 	.word	0x40020000
 80026c0:	20000914 	.word	0x20000914
 80026c4:	40026440 	.word	0x40026440
 80026c8:	20000974 	.word	0x20000974
 80026cc:	400264b8 	.word	0x400264b8

080026d0 <CO_getUint32>:
 * Helper function returns uint32 from byte array.
 *
 * @param data Location of source data.
 * @return Variable of type uint32_t.
 */
static inline uint32_t CO_getUint32(const uint8_t data[]){
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
    uint32_t value;
    memcpy(&value, data, sizeof(value));
 80026dc:	60fb      	str	r3, [r7, #12]
    return value;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <CO_setUint32>:
 * Helper function writes uint32 to byte array.
 *
 * @param data Location of destination data.
 * @param value Variable of type uint32_t to be written into data.
 */
static inline void CO_setUint32(uint8_t data[], const uint32_t value){
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	683a      	ldr	r2, [r7, #0]
    memcpy(data, &value, sizeof(value));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	601a      	str	r2, [r3, #0]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <CO_EM_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_EM_receive(void *object, void *msg) {
 8002708:	b5b0      	push	{r4, r5, r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af02      	add	r7, sp, #8
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
    CO_EM_t *em;

    em = (CO_EM_t*)object;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	61fb      	str	r3, [r7, #28]

    if(em!=NULL && em->pFunctSignalRx!=NULL){
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d022      	beq.n	8002762 <CO_EM_receive+0x5a>
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01e      	beq.n	8002762 <CO_EM_receive+0x5a>
        uint16_t ident = CO_CANrxMsg_readIdent(msg);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	837b      	strh	r3, [r7, #26]
        if (ident != 0x80) {
 800272a:	8b7b      	ldrh	r3, [r7, #26]
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d018      	beq.n	8002762 <CO_EM_receive+0x5a>
            /* ignore sync messages (necessary if sync object is not used) */
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	3321      	adds	r3, #33	; 0x21
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
            uint16_t errorCode;
            uint32_t infoCode;

            CO_memcpySwap2(&errorCode, &data[0]);
 800273c:	827b      	strh	r3, [r7, #18]
            CO_memcpySwap4(&infoCode, &data[4]);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3304      	adds	r3, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]
            em->pFunctSignalRx(ident,
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800274a:	8a79      	ldrh	r1, [r7, #18]
                            errorCode,
                            data[2],
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	3302      	adds	r3, #2
            em->pFunctSignalRx(ident,
 8002750:	781a      	ldrb	r2, [r3, #0]
                            data[3],
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3303      	adds	r3, #3
            em->pFunctSignalRx(ident,
 8002756:	781d      	ldrb	r5, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8b78      	ldrh	r0, [r7, #26]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	462b      	mov	r3, r5
 8002760:	47a0      	blx	r4
                            infoCode);
        }
    }
}
 8002762:	bf00      	nop
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800276c <CO_ODF_1003>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
    CO_EMpr_t *emPr;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

    emPr = (CO_EMpr_t*) ODF_arg->object;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7ddb      	ldrb	r3, [r3, #23]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <CO_ODF_1003+0x50>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	7a5b      	ldrb	r3, [r3, #9]
 8002792:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7d9b      	ldrb	r3, [r3, #22]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <CO_ODF_1003+0x3a>
            ODF_arg->data[0] = noOfErrors;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	7bba      	ldrb	r2, [r7, #14]
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e01a      	b.n	80027dc <CO_ODF_1003+0x70>
        }
        else if(ODF_arg->subIndex > noOfErrors){
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7d9b      	ldrb	r3, [r3, #22]
 80027aa:	7bba      	ldrb	r2, [r7, #14]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d202      	bcs.n	80027b6 <CO_ODF_1003+0x4a>
            ret = CO_SDO_AB_NO_DATA;
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <CO_ODF_1003+0x80>)
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e012      	b.n	80027dc <CO_ODF_1003+0x70>
        }
        else{
            ret = CO_SDO_AB_NONE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	e00f      	b.n	80027dc <CO_ODF_1003+0x70>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7d9b      	ldrb	r3, [r3, #22]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <CO_ODF_1003+0x6c>
            if(value == 0U){
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <CO_ODF_1003+0x66>
                emPr->preDefErrNoOfErrors = 0U;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2200      	movs	r2, #0
 80027ce:	725a      	strb	r2, [r3, #9]
 80027d0:	e004      	b.n	80027dc <CO_ODF_1003+0x70>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <CO_ODF_1003+0x84>)
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e001      	b.n	80027dc <CO_ODF_1003+0x70>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <CO_ODF_1003+0x88>)
 80027da:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
 80027dc:	697b      	ldr	r3, [r7, #20]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	08000024 	.word	0x08000024
 80027f0:	06090030 	.word	0x06090030
 80027f4:	06010002 	.word	0x06010002

080027f8 <CO_ODF_1014>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff5e 	bl	80026d0 <CO_getUint32>
 8002814:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7ddb      	ldrb	r3, [r3, #23]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <CO_ODF_1014+0x3c>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	440b      	add	r3, r1
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f7ff ff5c 	bl	80026ec <CO_setUint32>
    }

    return ret;
 8002834:	697b      	ldr	r3, [r7, #20]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <CO_EM_init>:
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidTxEM)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af04      	add	r7, sp, #16
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
    uint8_t i;
    CO_ReturnError_t ret = CO_ERROR_NO;
 800284e:	2300      	movs	r3, #0
 8002850:	75bb      	strb	r3, [r7, #22]

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL || errorStatusBitsSize<6U ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d018      	beq.n	800288a <CO_EM_init+0x4a>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d015      	beq.n	800288a <CO_EM_init+0x4a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d012      	beq.n	800288a <CO_EM_init+0x4a>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00f      	beq.n	800288a <CO_EM_init+0x4a>
 800286a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d90b      	bls.n	800288a <CO_EM_init+0x4a>
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <CO_EM_init+0x4a>
       errorRegister==NULL || preDefErr==NULL || CANdevTx==NULL
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <CO_EM_init+0x4a>
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <CO_EM_init+0x4a>
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx==NULL
 8002884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002886:	2b00      	cmp	r3, #0
 8002888:	d102      	bne.n	8002890 <CO_EM_init+0x50>
#endif
    ){
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	e08d      	b.n	80029ac <CO_EM_init+0x16c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f897 2020 	ldrb.w	r2, [r7, #32]
 800289c:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3305      	adds	r3, #5
 80028a2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1d5a      	adds	r2, r3, #5
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1d5a      	adds	r2, r3, #5
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
#if (CO_CONFIG_EM) & CO_CONFIG_FLAG_CALLBACK_PRE
    em->pFunctSignalPre         = NULL;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	669a      	str	r2, [r3, #104]	; 0x68
    em->functSignalObjectPre    = NULL;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
    em->pFunctSignalRx          = NULL;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	671a      	str	r2, [r3, #112]	; 0x70
#endif
    emPr->em                    = em;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ec:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80028f4:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2200      	movs	r2, #0
 80028fa:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]

    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
 8002906:	e008      	b.n	800291a <CO_EM_init+0xda>
        em->errorStatusBits[i] = 0U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	4413      	add	r3, r2
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	3301      	adds	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
 800291a:	7dfa      	ldrb	r2, [r7, #23]
 800291c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002920:	429a      	cmp	r2, r3
 8002922:	d3f1      	bcc.n	8002908 <CO_EM_init+0xc8>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure(SDO, OD_H1003_PREDEF_ERR_FIELD, CO_ODF_1003, (void*)emPr, 0, 0U);
 8002924:	2300      	movs	r3, #0
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	2300      	movs	r3, #0
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <CO_EM_init+0x174>)
 8002930:	f241 0103 	movw	r1, #4099	; 0x1003
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f002 fcb7 	bl	80052a8 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1014_COBID_EMERGENCY, CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8002940:	2200      	movs	r2, #0
 8002942:	9201      	str	r2, [sp, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	9200      	str	r2, [sp, #0]
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <CO_EM_init+0x178>)
 800294a:	f241 0114 	movw	r1, #4116	; 0x1014
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f002 fcaa 	bl	80052a8 <CO_OD_configure>

#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(
 8002954:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8002956:	4b19      	ldr	r3, [pc, #100]	; (80029bc <CO_EM_init+0x17c>)
 8002958:	9302      	str	r3, [sp, #8]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	2300      	movs	r3, #0
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800296a:	f006 fd1f 	bl	80093ac <CO_CANrxBufferInit>
 800296e:	4603      	mov	r3, r0
 8002970:	75bb      	strb	r3, [r7, #22]
            (void*)em,              /* object passed to receive function */
            CO_EM_receive);         /* this function will process received message */
#endif

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdevTx;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002976:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	61da      	str	r2, [r3, #28]
    emPr->CANtxBuff = CO_CANtxBufferInit(
 8002980:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002984:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8002986:	2300      	movs	r3, #0
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2308      	movs	r3, #8
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2300      	movs	r3, #0
 8002990:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002992:	f006 fd61 	bl	8009458 <CO_CANtxBufferInit>
 8002996:	4602      	mov	r2, r0
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (emPr->CANtxBuff == NULL) {
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <CO_EM_init+0x168>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80029a4:	23ff      	movs	r3, #255	; 0xff
 80029a6:	75bb      	strb	r3, [r7, #22]
    }

    return ret;
 80029a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	0800276d 	.word	0x0800276d
 80029b8:	080027f9 	.word	0x080027f9
 80029bc:	08002709 	.word	0x08002709

080029c0 <CO_EM_process>:
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint16_t                emInhTime_100us,
        uint32_t               *timerNext_us)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b08f      	sub	sp, #60	; 0x3c
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	461a      	mov	r2, r3
 80029cc:	460b      	mov	r3, r1
 80029ce:	72fb      	strb	r3, [r7, #11]
 80029d0:	4613      	mov	r3, r2
 80029d2:	813b      	strh	r3, [r7, #8]

    CO_EM_t *em = emPr->em;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorRegister;
    uint8_t errorMask;
    uint8_t i;
    uint32_t emInhTime_us = (uint32_t)emInhTime_100us * 100;
 80029da:	893b      	ldrh	r3, [r7, #8]
 80029dc:	2264      	movs	r2, #100	; 0x64
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* verify errors from driver and other */
    CO_CANverifyErrors(emPr->CANdev);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f006 fe2b 	bl	8009644 <CO_CANverifyErrors>
    if(em->wrongErrorReport != 0U){
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00c      	beq.n	8002a12 <CO_EM_process+0x52>
        CO_errorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80029fe:	f44f 42c2 	mov.w	r2, #24832	; 0x6100
 8002a02:	2128      	movs	r1, #40	; 0x28
 8002a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a06:	f000 f92c 	bl	8002c62 <CO_errorReport>
        em->wrongErrorReport = 0U;
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    errorMask = (uint8_t)~(CO_ERR_REG_GENERIC_ERR | CO_ERR_REG_COMM_ERR | CO_ERR_REG_MANUFACTURER);
 8002a18:	236e      	movs	r3, #110	; 0x6e
 8002a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /* generic error */
    if(em->errorStatusBits[5]){
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3305      	adds	r3, #5
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <CO_EM_process+0x76>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 8002a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <CO_EM_process+0x8e>
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3303      	adds	r3, #3
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <CO_EM_process+0x9a>
        errorRegister |= CO_ERR_REG_COMM_ERR;
 8002a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a52:	f043 0310 	orr.w	r3, r3, #16
 8002a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    /* Manufacturer */
    for(i=6; i<em->errorStatusBitsSize; i++) {
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002a60:	e012      	b.n	8002a88 <CO_EM_process+0xc8>
        if (em->errorStatusBits[i]) {
 8002a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a6a:	4413      	add	r3, r2
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <CO_EM_process+0xbe>
            errorRegister |= CO_ERR_REG_MANUFACTURER;
 8002a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for(i=6; i<em->errorStatusBitsSize; i++) {
 8002a7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a82:	3301      	adds	r3, #1
 8002a84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	791b      	ldrb	r3, [r3, #4]
 8002a8c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3e6      	bcc.n	8002a62 <CO_EM_process+0xa2>
        }
    }
    *emPr->errorRegister = (*emPr->errorRegister & errorMask) | errorRegister;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b2d9      	uxtb	r1, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if (emPr->inhibitEmTimer < emInhTime_us) {
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d905      	bls.n	8002ac6 <CO_EM_process+0x106>
        emPr->inhibitEmTimer += timeDifference_us;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	441a      	add	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	60da      	str	r2, [r3, #12]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80c6 	beq.w	8002c5a <CO_EM_process+0x29a>
            !emPr->CANtxBuff->bufferFull &&
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	7b5b      	ldrb	r3, [r3, #13]
 8002ad4:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 80bf 	bne.w	8002c5a <CO_EM_process+0x29a>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            !emPr->CANtxBuff->bufferFull &&
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d105      	bne.n	8002af4 <CO_EM_process+0x134>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80b3 	beq.w	8002c5a <CO_EM_process+0x29a>
    {
        uint32_t preDEF;    /* preDefinedErrorField */

        if (emPr->inhibitEmTimer >= emInhTime_us) {
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	429a      	cmp	r2, r3
 8002afc:	f200 809c 	bhi.w	8002c38 <CO_EM_process+0x278>
            /* inhibit time elapsed, send message */

            /* add error register */
            em->bufReadPtr[2] = *emPr->errorRegister;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b08:	3302      	adds	r3, #2
 8002b0a:	7812      	ldrb	r2, [r2, #0]
 8002b0c:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
            /* report also own emergency messages */
            if (em->pFunctSignalRx != NULL) {
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d019      	beq.n	8002b4a <CO_EM_process+0x18a>
                uint16_t errorCode;
                uint32_t infoCode;
                CO_memcpySwap2(&errorCode, &em->bufReadPtr[0]);
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	82fb      	strh	r3, [r7, #22]
                CO_memcpySwap4(&infoCode, &em->bufReadPtr[4]);
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b24:	3304      	adds	r3, #4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	613b      	str	r3, [r7, #16]
                em->pFunctSignalRx(0,
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8002b2e:	8af9      	ldrh	r1, [r7, #22]
                                   errorCode,
                                   em->bufReadPtr[2],
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b34:	3302      	adds	r3, #2
                em->pFunctSignalRx(0,
 8002b36:	781a      	ldrb	r2, [r3, #0]
                                   em->bufReadPtr[3],
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3c:	3303      	adds	r3, #3
                em->pFunctSignalRx(0,
 8002b3e:	7818      	ldrb	r0, [r3, #0]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	4603      	mov	r3, r0
 8002b46:	2000      	movs	r0, #0
 8002b48:	47a0      	blx	r4
                                   infoCode);
            }
#endif

            /* copy data to CAN emergency message */
            memcpy(emPr->CANtxBuff->data, em->bufReadPtr, sizeof(emPr->CANtxBuff->data));
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	1d58      	adds	r0, r3, #5
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b54:	2208      	movs	r2, #8
 8002b56:	4619      	mov	r1, r3
 8002b58:	f014 fcbc 	bl	80174d4 <memcpy>
            memcpy(&preDEF, em->bufReadPtr, sizeof(preDEF));
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	61bb      	str	r3, [r7, #24]
            em->bufReadPtr += 8;
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b68:	f103 0208 	add.w	r2, r3, #8
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update read buffer pointer and reset inhibit timer */
            if(em->bufReadPtr == em->bufEnd){
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d103      	bne.n	8002b84 <CO_EM_process+0x1c4>
                em->bufReadPtr = em->buf;
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	1d5a      	adds	r2, r3, #5
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	661a      	str	r2, [r3, #96]	; 0x60
            }
            emPr->inhibitEmTimer = 0U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]

            /* verify message buffer overflow, then clear full flag */
            if(em->bufFull == 2U){
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d10b      	bne.n	8002bac <CO_EM_process+0x1ec>
                em->bufFull = 0U;    /* will be updated below */
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ba2:	2120      	movs	r1, #32
 8002ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ba6:	f000 f85c 	bl	8002c62 <CO_errorReport>
 8002baa:	e008      	b.n	8002bbe <CO_EM_process+0x1fe>
            }
            else{
                em->bufFull = 0;
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2120      	movs	r1, #32
 8002bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bba:	f000 f8d8 	bl	8002d6e <CO_errorReset>
            }

            /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
            if(emPr->preDefErr){
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d02f      	beq.n	8002c26 <CO_EM_process+0x266>
                uint8_t j;

                if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	7a5a      	ldrb	r2, [r3, #9]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	7a1b      	ldrb	r3, [r3, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d205      	bcs.n	8002bde <CO_EM_process+0x21e>
                    emPr->preDefErrNoOfErrors++;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	7a5b      	ldrb	r3, [r3, #9]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	725a      	strb	r2, [r3, #9]
                for(j=emPr->preDefErrNoOfErrors-1; j>0; j--)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	7a5b      	ldrb	r3, [r3, #9]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002be8:	e015      	b.n	8002c16 <CO_EM_process+0x256>
                    emPr->preDefErr[j] = emPr->preDefErr[j-1];
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	441a      	add	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	601a      	str	r2, [r3, #0]
                for(j=emPr->preDefErrNoOfErrors-1; j>0; j--)
 8002c0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c10:	3b01      	subs	r3, #1
 8002c12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002c16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e5      	bne.n	8002bea <CO_EM_process+0x22a>
                emPr->preDefErr[0] = preDEF;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	601a      	str	r2, [r3, #0]
            }

            /* send CAN message */
            CO_CANsend(emPr->CANdev, emPr->CANtxBuff);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f006 fc51 	bl	80094d8 <CO_CANsend>
            }
        }
#endif
    }

    return;
 8002c36:	e010      	b.n	8002c5a <CO_EM_process+0x29a>
        else if (timerNext_us != NULL) {
 8002c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <CO_EM_process+0x29a>
            diff = emInhTime_us - emPr->inhibitEmTimer;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	61fb      	str	r3, [r7, #28]
            if (*timerNext_us > diff) {
 8002c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d203      	bcs.n	8002c5a <CO_EM_process+0x29a>
                *timerNext_us = diff;
 8002c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	601a      	str	r2, [r3, #0]
    return;
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
}
 8002c5c:	3734      	adds	r7, #52	; 0x34
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}

08002c62 <CO_errorReport>:


/******************************************************************************/
void CO_errorReport(CO_EM_t *em, const uint8_t errorBit, const uint16_t errorCode, const uint32_t infoCode){
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b088      	sub	sp, #32
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	72fb      	strb	r3, [r7, #11]
 8002c70:	4613      	mov	r3, r2
 8002c72:	813b      	strh	r3, [r7, #8]
    uint8_t index = errorBit >> 3;
 8002c74:	7afb      	ldrb	r3, [r7, #11]
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	76bb      	strb	r3, [r7, #26]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8002c7a:	7afb      	ldrb	r3, [r7, #11]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	2201      	movs	r2, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	767b      	strb	r3, [r7, #25]
    uint8_t *errorStatusBits = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61fb      	str	r3, [r7, #28]
    bool_t sendEmergency = true;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	76fb      	strb	r3, [r7, #27]

    if(em == NULL){
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <CO_errorReport+0x3a>
        sendEmergency = false;
 8002c96:	2300      	movs	r3, #0
 8002c98:	76fb      	strb	r3, [r7, #27]
 8002c9a:	e019      	b.n	8002cd0 <CO_errorReport+0x6e>
    }
    else if(index >= em->errorStatusBitsSize){
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	791b      	ldrb	r3, [r3, #4]
 8002ca0:	7eba      	ldrb	r2, [r7, #26]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d306      	bcc.n	8002cb4 <CO_errorReport+0x52>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	7afa      	ldrb	r2, [r7, #11]
 8002caa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	76fb      	strb	r3, [r7, #27]
 8002cb2:	e00d      	b.n	8002cd0 <CO_errorReport+0x6e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	7ebb      	ldrb	r3, [r7, #26]
 8002cba:	4413      	add	r3, r2
 8002cbc:	61fb      	str	r3, [r7, #28]
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	781a      	ldrb	r2, [r3, #0]
 8002cc2:	7e7b      	ldrb	r3, [r7, #25]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <CO_errorReport+0x6e>
            sendEmergency = false;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	76fb      	strb	r3, [r7, #27]
        }
    }

    if(sendEmergency){
 8002cd0:	7efb      	ldrb	r3, [r7, #27]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d047      	beq.n	8002d66 <CO_errorReport+0x104>
        /* set error bit */
        if(errorBit){
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <CO_errorReport+0x88>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	7e7b      	ldrb	r3, [r7, #25]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <CO_errorReport+0x9c>
            em->bufFull = 2;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                em->pFunctSignalPre(em->functSignalObjectPre);
            }
#endif
        }
    }
}
 8002cfc:	e033      	b.n	8002d66 <CO_errorReport+0x104>
 8002cfe:	893b      	ldrh	r3, [r7, #8]
            CO_memcpySwap2(&bufCopy[0], &errorCode);
 8002d00:	823b      	strh	r3, [r7, #16]
            bufCopy[2] = 0; /* error register will be set later */
 8002d02:	2300      	movs	r3, #0
 8002d04:	74bb      	strb	r3, [r7, #18]
            bufCopy[3] = errorBit;
 8002d06:	7afb      	ldrb	r3, [r7, #11]
 8002d08:	74fb      	strb	r3, [r7, #19]
 8002d0a:	687b      	ldr	r3, [r7, #4]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 8002d0c:	617b      	str	r3, [r7, #20]
            memcpy(em->bufWritePtr, bufCopy, sizeof(bufCopy));
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	461a      	mov	r2, r3
 8002d14:	f107 0310 	add.w	r3, r7, #16
 8002d18:	cb03      	ldmia	r3!, {r0, r1}
 8002d1a:	6010      	str	r0, [r2, #0]
 8002d1c:	6051      	str	r1, [r2, #4]
            em->bufWritePtr += 8;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	f103 0208 	add.w	r2, r3, #8
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d103      	bne.n	8002d3e <CO_errorReport+0xdc>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1d5a      	adds	r2, r3, #5
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d103      	bne.n	8002d52 <CO_errorReport+0xf0>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignalPre != NULL) {
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <CO_errorReport+0x104>
                em->pFunctSignalPre(em->functSignalObjectPre);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002d62:	4610      	mov	r0, r2
 8002d64:	4798      	blx	r3
}
 8002d66:	bf00      	nop
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <CO_errorReset>:


/******************************************************************************/
void CO_errorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b088      	sub	sp, #32
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	460b      	mov	r3, r1
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	72fb      	strb	r3, [r7, #11]
    uint8_t index = errorBit >> 3;
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
 8002d7e:	08db      	lsrs	r3, r3, #3
 8002d80:	76bb      	strb	r3, [r7, #26]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8002d82:	7afb      	ldrb	r3, [r7, #11]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	2201      	movs	r2, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	767b      	strb	r3, [r7, #25]
    uint8_t *errorStatusBits = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
    bool_t sendEmergency = true;
 8002d94:	2301      	movs	r3, #1
 8002d96:	76fb      	strb	r3, [r7, #27]

    if(em == NULL){
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <CO_errorReset+0x36>
        sendEmergency = false;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	76fb      	strb	r3, [r7, #27]
 8002da2:	e019      	b.n	8002dd8 <CO_errorReset+0x6a>
    }
    else if(index >= em->errorStatusBitsSize){
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	791b      	ldrb	r3, [r3, #4]
 8002da8:	7eba      	ldrb	r2, [r7, #26]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d306      	bcc.n	8002dbc <CO_errorReset+0x4e>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	7afa      	ldrb	r2, [r7, #11]
 8002db2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 8002db6:	2300      	movs	r3, #0
 8002db8:	76fb      	strb	r3, [r7, #27]
 8002dba:	e00d      	b.n	8002dd8 <CO_errorReset+0x6a>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	7ebb      	ldrb	r3, [r7, #26]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	61fb      	str	r3, [r7, #28]
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	7e7b      	ldrb	r3, [r7, #25]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <CO_errorReset+0x6a>
            sendEmergency = false;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	76fb      	strb	r3, [r7, #27]
        }
    }

    if(sendEmergency){
 8002dd8:	7efb      	ldrb	r3, [r7, #27]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d04b      	beq.n	8002e76 <CO_errorReset+0x108>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b25a      	sxtb	r2, r3
 8002de4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	b25b      	sxtb	r3, r3
 8002dec:	4013      	ands	r3, r2
 8002dee:	b25b      	sxtb	r3, r3
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <CO_errorReset+0x9c>
            em->bufFull = 2;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                em->pFunctSignalPre(em->functSignalObjectPre);
            }
#endif
        }
    }
}
 8002e08:	e035      	b.n	8002e76 <CO_errorReset+0x108>
            bufCopy[0] = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	743b      	strb	r3, [r7, #16]
            bufCopy[1] = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	747b      	strb	r3, [r7, #17]
            bufCopy[2] = 0; /* error register will be set later */
 8002e12:	2300      	movs	r3, #0
 8002e14:	74bb      	strb	r3, [r7, #18]
            bufCopy[3] = errorBit;
 8002e16:	7afb      	ldrb	r3, [r7, #11]
 8002e18:	74fb      	strb	r3, [r7, #19]
 8002e1a:	687b      	ldr	r3, [r7, #4]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 8002e1c:	617b      	str	r3, [r7, #20]
            memcpy(em->bufWritePtr, bufCopy, sizeof(bufCopy));
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	461a      	mov	r2, r3
 8002e24:	f107 0310 	add.w	r3, r7, #16
 8002e28:	cb03      	ldmia	r3!, {r0, r1}
 8002e2a:	6010      	str	r0, [r2, #0]
 8002e2c:	6051      	str	r1, [r2, #4]
            em->bufWritePtr += 8;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	f103 0208 	add.w	r2, r3, #8
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d103      	bne.n	8002e4e <CO_errorReset+0xe0>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1d5a      	adds	r2, r3, #5
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d103      	bne.n	8002e62 <CO_errorReset+0xf4>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignalPre != NULL) {
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <CO_errorReset+0x108>
                em->pFunctSignalPre(em->functSignalObjectPre);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002e72:	4610      	mov	r0, r2
 8002e74:	4798      	blx	r3
}
 8002e76:	bf00      	nop
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <CO_isError>:


/******************************************************************************/
bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit){
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	08db      	lsrs	r3, r3, #3
 8002e8e:	73bb      	strb	r3, [r7, #14]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	2201      	movs	r2, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	737b      	strb	r3, [r7, #13]
    bool_t ret = false;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]

    if(em != NULL && index < em->errorStatusBitsSize){
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <CO_isError+0x4c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	791b      	ldrb	r3, [r3, #4]
 8002eac:	7bba      	ldrb	r2, [r7, #14]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d20b      	bcs.n	8002eca <CO_isError+0x4c>
        if((em->errorStatusBits[index] & bitmask) != 0){
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	7bbb      	ldrb	r3, [r7, #14]
 8002eb8:	4413      	add	r3, r2
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	7b7b      	ldrb	r3, [r7, #13]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <CO_isError+0x4c>
            ret = true;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8002ee4:	60fb      	str	r3, [r7, #12]
    return value;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f04:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	3321      	adds	r3, #33	; 0x21
 8002f0a:	613b      	str	r3, [r7, #16]

    HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]

    /* verify message length */
    if(DLC == 1){
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d107      	bne.n	8002f26 <CO_HBcons_receive+0x32>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b25a      	sxtb	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	60da      	str	r2, [r3, #12]
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_CALLBACK_PRE
    /* Optional signal to RTOS, which can resume task, which handles HBcons. */
    if(HBconsNode->pFunctSignalPre != NULL) {
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <CO_HBcons_receive+0x46>
        HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	6952      	ldr	r2, [r2, #20]
 8002f36:	4610      	mov	r0, r2
 8002f38:	4798      	blx	r3
    }
#endif
}
 8002f3a:	bf00      	nop
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <CO_ODF_1016>:
 * OD function for accessing _Consumer Heartbeat Time_ (index 0x1016) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
    uint8_t NodeID;
    uint16_t HBconsTime;
    uint32_t value;
    CO_ReturnError_t ret;

    if(ODF_arg->reading){
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7ddb      	ldrb	r3, [r3, #23]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <CO_ODF_1016+0x14>
        return CO_SDO_AB_NONE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e026      	b.n	8002fa6 <CO_ODF_1016+0x62>
    }

    HBcons = (CO_HBconsumer_t*) ODF_arg->object;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	617b      	str	r3, [r7, #20]
    value = CO_getUint32(ODF_arg->data);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff ffb8 	bl	8002ed8 <CO_getUint32>
 8002f68:	6138      	str	r0, [r7, #16]
    NodeID = (value >> 16U) & 0xFFU;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	73fb      	strb	r3, [r7, #15]
    HBconsTime = value & 0xFFFFU;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	81bb      	strh	r3, [r7, #12]

    if((value & 0xFF800000U) != 0){
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	0ddb      	lsrs	r3, r3, #23
 8002f78:	05db      	lsls	r3, r3, #23
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <CO_ODF_1016+0x3e>
        return CO_SDO_AB_PRAM_INCOMPAT;
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <CO_ODF_1016+0x6c>)
 8002f80:	e011      	b.n	8002fa6 <CO_ODF_1016+0x62>
    }

    ret = CO_HBconsumer_initEntry(HBcons, ODF_arg->subIndex-1U, NodeID, HBconsTime);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7d9b      	ldrb	r3, [r3, #22]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b2d9      	uxtb	r1, r3
 8002f8a:	89bb      	ldrh	r3, [r7, #12]
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	f000 f8a6 	bl	80030e0 <CO_HBconsumer_initEntry>
 8002f94:	4603      	mov	r3, r0
 8002f96:	72fb      	strb	r3, [r7, #11]
    if (ret != CO_ERROR_NO) {
 8002f98:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <CO_ODF_1016+0x60>
        return CO_SDO_AB_PRAM_INCOMPAT;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <CO_ODF_1016+0x6c>)
 8002fa2:	e000      	b.n	8002fa6 <CO_ODF_1016+0x62>
    }
    return CO_SDO_AB_NONE;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	06040043 	.word	0x06040043

08002fb4 <CO_HBconsumer_init>:
        const uint32_t          HBconsTime[],
        CO_HBconsNode_t         monitoredNodes[],
        uint8_t                 numberOfMonitoredNodes,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdxStart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
    uint8_t i;
    CO_ReturnError_t ret = CO_ERROR_NO;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75bb      	strb	r3, [r7, #22]

    /* verify arguments */
    if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00e      	beq.n	8002fea <CO_HBconsumer_init+0x36>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <CO_HBconsumer_init+0x36>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <CO_HBconsumer_init+0x36>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <CO_HBconsumer_init+0x36>
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <CO_HBconsumer_init+0x36>
        monitoredNodes==NULL || CANdevRx==NULL){
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <CO_HBconsumer_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	e071      	b.n	80030d4 <CO_HBconsumer_init+0x120>
    }

    /* Configure object variables */
    HBcons->em = em;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	601a      	str	r2, [r3, #0]
    HBcons->HBconsTime = HBconsTime;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	605a      	str	r2, [r3, #4]
    HBcons->monitoredNodes = monitoredNodes;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a3a      	ldr	r2, [r7, #32]
 8003000:	609a      	str	r2, [r3, #8]
    HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003008:	731a      	strb	r2, [r3, #12]
    HBcons->allMonitoredActive = false;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	735a      	strb	r2, [r3, #13]
    HBcons->allMonitoredOperational = CO_NMT_UNKNOWN;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	22ff      	movs	r2, #255	; 0xff
 8003014:	739a      	strb	r2, [r3, #14]
    HBcons->NMTisPreOrOperationalPrev = false;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	73da      	strb	r2, [r3, #15]
    HBcons->CANdevRx = CANdevRx;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003020:	611a      	str	r2, [r3, #16]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003026:	829a      	strh	r2, [r3, #20]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
    HBcons->pFunctSignalNmtChanged = NULL;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	619a      	str	r2, [r3, #24]
#endif

    for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]
 8003032:	e03d      	b.n	80030b0 <CO_HBconsumer_init+0xfc>
        uint8_t nodeId = (HBcons->HBconsTime[i] >> 16U) & 0xFFU;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	757b      	strb	r3, [r7, #21]
        uint16_t time = HBcons->HBconsTime[i] & 0xFFFFU;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	827b      	strh	r3, [r7, #18]
        ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8003052:	8a7b      	ldrh	r3, [r7, #18]
 8003054:	7d7a      	ldrb	r2, [r7, #21]
 8003056:	7df9      	ldrb	r1, [r7, #23]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f841 	bl	80030e0 <CO_HBconsumer_initEntry>
 800305e:	4603      	mov	r3, r0
 8003060:	75bb      	strb	r3, [r7, #22]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_CALLBACK_PRE
            HBcons->monitoredNodes[i].pFunctSignalPre = NULL;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2134      	movs	r1, #52	; 0x34
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	2200      	movs	r2, #0
 8003072:	611a      	str	r2, [r3, #16]
#endif
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            HBcons->monitoredNodes[i].pFunctSignalHbStarted = NULL;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	2134      	movs	r1, #52	; 0x34
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
            HBcons->monitoredNodes[i].pFunctSignalTimeout = NULL;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2134      	movs	r1, #52	; 0x34
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	2200      	movs	r2, #0
 8003096:	625a      	str	r2, [r3, #36]	; 0x24
            HBcons->monitoredNodes[i].pFunctSignalRemoteReset = NULL;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2134      	movs	r1, #52	; 0x34
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	2200      	movs	r2, #0
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c
    for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	3301      	adds	r3, #1
 80030ae:	75fb      	strb	r3, [r7, #23]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	7b1b      	ldrb	r3, [r3, #12]
 80030b4:	7dfa      	ldrb	r2, [r7, #23]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d3bc      	bcc.n	8003034 <CO_HBconsumer_init+0x80>
#endif
    }

    /* Configure Object dictionary entry at index 0x1016 */
    CO_OD_configure(SDO, OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
 80030ba:	2300      	movs	r3, #0
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	2300      	movs	r3, #0
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a05      	ldr	r2, [pc, #20]	; (80030dc <CO_HBconsumer_init+0x128>)
 80030c6:	f241 0116 	movw	r1, #4118	; 0x1016
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f002 f8ec 	bl	80052a8 <CO_OD_configure>

    return ret;
 80030d0:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	08002f45 	.word	0x08002f45

080030e0 <CO_HBconsumer_initEntry>:
CO_ReturnError_t CO_HBconsumer_initEntry(
        CO_HBconsumer_t        *HBcons,
        uint8_t                 idx,
        uint8_t                 nodeId,
        uint16_t                consumerTime_ms)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b08b      	sub	sp, #44	; 0x2c
 80030e4:	af04      	add	r7, sp, #16
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4603      	mov	r3, r0
 80030f0:	70fb      	strb	r3, [r7, #3]
 80030f2:	460b      	mov	r3, r1
 80030f4:	70bb      	strb	r3, [r7, #2]
 80030f6:	4613      	mov	r3, r2
 80030f8:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d004      	beq.n	800310e <CO_HBconsumer_initEntry+0x2e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7b1b      	ldrb	r3, [r3, #12]
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
 8003112:	e084      	b.n	800321e <CO_HBconsumer_initEntry+0x13e>
    }

    if((consumerTime_ms != 0) && (nodeId != 0)){
 8003114:	883b      	ldrh	r3, [r7, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d026      	beq.n	8003168 <CO_HBconsumer_initEntry+0x88>
 800311a:	78bb      	ldrb	r3, [r7, #2]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d023      	beq.n	8003168 <CO_HBconsumer_initEntry+0x88>
        uint8_t i;
        /* there must not be more entries with same index and time different than zero */
        for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 8003120:	2300      	movs	r3, #0
 8003122:	75bb      	strb	r3, [r7, #22]
 8003124:	e01b      	b.n	800315e <CO_HBconsumer_initEntry+0x7e>
            uint32_t objectCopy = HBcons->HBconsTime[i];
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	7dbb      	ldrb	r3, [r7, #22]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	613b      	str	r3, [r7, #16]
            uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	0c1b      	lsrs	r3, r3, #16
 8003138:	73fb      	strb	r3, [r7, #15]
            uint16_t HBconsTimeObj = objectCopy & 0xFFFFU;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	81bb      	strh	r3, [r7, #12]
            if((idx != i) && (HBconsTimeObj != 0) && (nodeId == NodeIDObj)){
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	7dbb      	ldrb	r3, [r7, #22]
 8003142:	429a      	cmp	r2, r3
 8003144:	d008      	beq.n	8003158 <CO_HBconsumer_initEntry+0x78>
 8003146:	89bb      	ldrh	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <CO_HBconsumer_initEntry+0x78>
 800314c:	78ba      	ldrb	r2, [r7, #2]
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	429a      	cmp	r2, r3
 8003152:	d101      	bne.n	8003158 <CO_HBconsumer_initEntry+0x78>
                ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003154:	23ff      	movs	r3, #255	; 0xff
 8003156:	75fb      	strb	r3, [r7, #23]
        for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 8003158:	7dbb      	ldrb	r3, [r7, #22]
 800315a:	3301      	adds	r3, #1
 800315c:	75bb      	strb	r3, [r7, #22]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7b1b      	ldrb	r3, [r3, #12]
 8003162:	7dba      	ldrb	r2, [r7, #22]
 8003164:	429a      	cmp	r2, r3
 8003166:	d3de      	bcc.n	8003126 <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8003168:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d154      	bne.n	800321a <CO_HBconsumer_initEntry+0x13a>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	2134      	movs	r1, #52	; 0x34
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
        monitoredNode->nodeId = nodeId;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	78ba      	ldrb	r2, [r7, #2]
 8003184:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8003186:	883b      	ldrh	r3, [r7, #0]
 8003188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800318c:	fb02 f303 	mul.w	r3, r2, r3
 8003190:	461a      	mov	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	22ff      	movs	r2, #255	; 0xff
 800319a:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	22ff      	movs	r2, #255	; 0xff
 80031a0:	761a      	strb	r2, [r3, #24]
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2200      	movs	r2, #0
 80031a6:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId && monitoredNode->time_us) {
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <CO_HBconsumer_initEntry+0xec>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d009      	beq.n	80031cc <CO_HBconsumer_initEntry+0xec>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80031c2:	82bb      	strh	r3, [r7, #20]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2201      	movs	r2, #1
 80031c8:	709a      	strb	r2, [r3, #2]
 80031ca:	e007      	b.n	80031dc <CO_HBconsumer_initEntry+0xfc>
        }
        else {
            COB_ID = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	82bb      	strh	r3, [r7, #20]
            monitoredNode->time_us = 0;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2200      	movs	r2, #0
 80031da:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer CAN reception */
        if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	789b      	ldrb	r3, [r3, #2]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01a      	beq.n	800321a <CO_HBconsumer_initEntry+0x13a>
            ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6918      	ldr	r0, [r3, #16]
                                     HBcons->CANdevRxIdxStart + idx,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8a9a      	ldrh	r2, [r3, #20]
            ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	b299      	uxth	r1, r3
                                     COB_ID,
                                     0x7FF,
                                     0,
                                     (void*)&HBcons->monitoredNodes[idx],
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	2434      	movs	r4, #52	; 0x34
 80031fc:	fb04 f303 	mul.w	r3, r4, r3
 8003200:	4413      	add	r3, r2
            ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8003202:	8aba      	ldrh	r2, [r7, #20]
 8003204:	4c08      	ldr	r4, [pc, #32]	; (8003228 <CO_HBconsumer_initEntry+0x148>)
 8003206:	9402      	str	r4, [sp, #8]
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	2300      	movs	r3, #0
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003212:	f006 f8cb 	bl	80093ac <CO_CANrxBufferInit>
 8003216:	4603      	mov	r3, r0
 8003218:	75fb      	strb	r3, [r7, #23]
                                     CO_HBcons_receive);
        }
    }
    return ret;
 800321a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800321e:	4618      	mov	r0, r3
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd90      	pop	{r4, r7, pc}
 8003226:	bf00      	nop
 8003228:	08002ef5 	.word	0x08002ef5

0800322c <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	460b      	mov	r3, r1
 800323a:	72fb      	strb	r3, [r7, #11]
    uint8_t i;
    bool_t allMonitoredActiveCurrent = true;
 800323c:	2301      	movs	r3, #1
 800323e:	77bb      	strb	r3, [r7, #30]
    uint8_t allMonitoredOperationalCurrent = CO_NMT_OPERATIONAL;
 8003240:	2305      	movs	r3, #5
 8003242:	777b      	strb	r3, [r7, #29]
    CO_HBconsNode_t *monitoredNode = &HBcons->monitoredNodes[0];
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	61bb      	str	r3, [r7, #24]

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 800324a:	7afb      	ldrb	r3, [r7, #11]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80c2 	beq.w	80033d6 <CO_HBconsumer_process+0x1aa>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	7bdb      	ldrb	r3, [r3, #15]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80bd 	beq.w	80033d6 <CO_HBconsumer_process+0x1aa>
        for (i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 800325c:	2300      	movs	r3, #0
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e0b2      	b.n	80033c8 <CO_HBconsumer_process+0x19c>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	617b      	str	r3, [r7, #20]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	789b      	ldrb	r3, [r3, #2]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80a8 	beq.w	80033c0 <CO_HBconsumer_process+0x194>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d03b      	beq.n	80032f0 <CO_HBconsumer_process+0xc4>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11b      	bne.n	80032ba <CO_HBconsumer_process+0x8e>
                    /* bootup message*/
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <CO_HBconsumer_process+0x6e>
                        monitoredNode->pFunctSignalRemoteReset(
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	7810      	ldrb	r0, [r2, #0]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003296:	7ff9      	ldrb	r1, [r7, #31]
 8003298:	4798      	blx	r3
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	789b      	ldrb	r3, [r3, #2]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d107      	bne.n	80032b2 <CO_HBconsumer_process+0x86>
                        CO_errorReport(HBcons->em,
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	7ffb      	ldrb	r3, [r7, #31]
 80032a8:	f248 1230 	movw	r2, #33072	; 0x8130
 80032ac:	211c      	movs	r1, #28
 80032ae:	f7ff fcd8 	bl	8002c62 <CO_errorReport>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2201      	movs	r2, #1
 80032b6:	709a      	strb	r2, [r3, #2]
 80032b8:	e017      	b.n	80032ea <CO_HBconsumer_process+0xbe>

                }
                else {
                    /* heartbeat message */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
                    if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE &&
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	789b      	ldrb	r3, [r3, #2]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d00b      	beq.n	80032da <CO_HBconsumer_process+0xae>
                        monitoredNode->pFunctSignalHbStarted != NULL) {
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	69db      	ldr	r3, [r3, #28]
                    if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE &&
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <CO_HBconsumer_process+0xae>
                        monitoredNode->pFunctSignalHbStarted(
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	7810      	ldrb	r0, [r2, #0]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	6a12      	ldr	r2, [r2, #32]
 80032d6:	7ff9      	ldrb	r1, [r7, #31]
 80032d8:	4798      	blx	r3
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2202      	movs	r2, #2
 80032de:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2200      	movs	r2, #0
 80032e4:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2200      	movs	r2, #0
 80032ee:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	789b      	ldrb	r3, [r3, #2]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d137      	bne.n	8003368 <CO_HBconsumer_process+0x13c>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	441a      	add	r2, r3
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	429a      	cmp	r2, r3
 800330e:	d31a      	bcc.n	8003346 <CO_HBconsumer_process+0x11a>
                    /* timeout expired */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
                    if (monitoredNode->pFunctSignalTimeout!=NULL) {
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <CO_HBconsumer_process+0xfc>
                        monitoredNode->pFunctSignalTimeout(
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	7810      	ldrb	r0, [r2, #0]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003324:	7ff9      	ldrb	r1, [r7, #31]
 8003326:	4798      	blx	r3
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	7ffb      	ldrb	r3, [r7, #31]
 800332e:	f248 1230 	movw	r2, #33072	; 0x8130
 8003332:	211b      	movs	r1, #27
 8003334:	f7ff fc95 	bl	8002c62 <CO_errorReport>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	22ff      	movs	r2, #255	; 0xff
 800333c:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2203      	movs	r2, #3
 8003342:	709a      	strb	r2, [r3, #2]
 8003344:	e010      	b.n	8003368 <CO_HBconsumer_process+0x13c>
                }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_TIMERNEXT
                else if (timerNext_us != NULL) {
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <CO_HBconsumer_process+0x13c>
                    /* Calculate timerNext_us for next timeout checking. */
                    uint32_t diff = monitoredNode->time_us
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	689a      	ldr	r2, [r3, #8]
                                  - monitoredNode->timeoutTimer;
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	685b      	ldr	r3, [r3, #4]
                    uint32_t diff = monitoredNode->time_us
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	613b      	str	r3, [r7, #16]
                    if (*timerNext_us > diff) {
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	429a      	cmp	r2, r3
 8003360:	d202      	bcs.n	8003368 <CO_HBconsumer_process+0x13c>
                        *timerNext_us = diff;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	601a      	str	r2, [r3, #0]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	789b      	ldrb	r3, [r3, #2]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d001      	beq.n	8003374 <CO_HBconsumer_process+0x148>
                allMonitoredActiveCurrent = false;
 8003370:	2300      	movs	r3, #0
 8003372:	77bb      	strb	r3, [r7, #30]
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800337a:	2b05      	cmp	r3, #5
 800337c:	d001      	beq.n	8003382 <CO_HBconsumer_process+0x156>
                allMonitoredOperationalCurrent = CO_NMT_UNKNOWN;
 800337e:	23ff      	movs	r3, #255	; 0xff
 8003380:	777b      	strb	r3, [r7, #29]
            }
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
            /* Verify, if NMT state of monitored node changed */
            if(monitoredNode->NMTstate != monitoredNode->NMTstatePrev) {
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800338e:	429a      	cmp	r2, r3
 8003390:	d012      	beq.n	80033b8 <CO_HBconsumer_process+0x18c>
                if (HBcons->pFunctSignalNmtChanged != NULL) {
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <CO_HBconsumer_process+0x182>
                    HBcons->pFunctSignalNmtChanged(
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	7810      	ldrb	r0, [r2, #0]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	f992 1001 	ldrsb.w	r1, [r2, #1]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	69d2      	ldr	r2, [r2, #28]
 80033ac:	4798      	blx	r3
                        monitoredNode->nodeId, monitoredNode->NMTstate,
                        HBcons->pFunctSignalObjectNmtChanged);
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	761a      	strb	r2, [r3, #24]
            }
#endif
            monitoredNode++;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	3334      	adds	r3, #52	; 0x34
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e000      	b.n	80033c2 <CO_HBconsumer_process+0x196>
                continue;
 80033c0:	bf00      	nop
        for (i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80033c2:	7ffb      	ldrb	r3, [r7, #31]
 80033c4:	3301      	adds	r3, #1
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	7b1b      	ldrb	r3, [r3, #12]
 80033cc:	7ffa      	ldrb	r2, [r7, #31]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	f4ff af47 	bcc.w	8003262 <CO_HBconsumer_process+0x36>
    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 80033d4:	e028      	b.n	8003428 <CO_HBconsumer_process+0x1fc>
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80033d6:	7afb      	ldrb	r3, [r7, #11]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <CO_HBconsumer_process+0x1b8>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	7bdb      	ldrb	r3, [r3, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d021      	beq.n	8003428 <CO_HBconsumer_process+0x1fc>
        /* (pre)operational state changed, clear variables */
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80033e4:	2300      	movs	r3, #0
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e015      	b.n	8003416 <CO_HBconsumer_process+0x1ea>
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	22ff      	movs	r2, #255	; 0xff
 80033ee:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	22ff      	movs	r2, #255	; 0xff
 80033f4:	761a      	strb	r2, [r3, #24]
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2200      	movs	r2, #0
 80033fa:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	789b      	ldrb	r3, [r3, #2]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <CO_HBconsumer_process+0x1de>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2201      	movs	r2, #1
 8003408:	709a      	strb	r2, [r3, #2]
            }
            monitoredNode++;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	3334      	adds	r3, #52	; 0x34
 800340e:	61bb      	str	r3, [r7, #24]
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8003410:	7ffb      	ldrb	r3, [r7, #31]
 8003412:	3301      	adds	r3, #1
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	7b1b      	ldrb	r3, [r3, #12]
 800341a:	7ffa      	ldrb	r2, [r7, #31]
 800341c:	429a      	cmp	r2, r3
 800341e:	d3e4      	bcc.n	80033ea <CO_HBconsumer_process+0x1be>
        }
        allMonitoredActiveCurrent = false;
 8003420:	2300      	movs	r3, #0
 8003422:	77bb      	strb	r3, [r7, #30]
        allMonitoredOperationalCurrent = CO_NMT_UNKNOWN;
 8003424:	23ff      	movs	r3, #255	; 0xff
 8003426:	777b      	strb	r3, [r7, #29]
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	7b5b      	ldrb	r3, [r3, #13]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d110      	bne.n	8003452 <CO_HBconsumer_process+0x226>
 8003430:	7fbb      	ldrb	r3, [r7, #30]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <CO_HBconsumer_process+0x226>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2200      	movs	r2, #0
 800343c:	211b      	movs	r1, #27
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fc95 	bl	8002d6e <CO_errorReset>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2200      	movs	r2, #0
 800344a:	211c      	movs	r1, #28
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fc8e 	bl	8002d6e <CO_errorReset>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	7fba      	ldrb	r2, [r7, #30]
 8003456:	735a      	strb	r2, [r3, #13]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	7f7a      	ldrb	r2, [r7, #29]
 800345c:	739a      	strb	r2, [r3, #14]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	7afa      	ldrb	r2, [r7, #11]
 8003462:	73da      	strb	r2, [r3, #15]
}
 8003464:	bf00      	nop
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg){
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800347c:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	3321      	adds	r3, #33	; 0x21
 8003482:	613b      	str	r3, [r7, #16]

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	60fb      	str	r3, [r7, #12]

    nodeId = data[1];
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	785b      	ldrb	r3, [r3, #1]
 800348c:	72fb      	strb	r3, [r7, #11]

    if((DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d15f      	bne.n	8003554 <CO_NMT_receive+0xe8>
 8003494:	7afb      	ldrb	r3, [r7, #11]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d004      	beq.n	80034a4 <CO_NMT_receive+0x38>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	7bdb      	ldrb	r3, [r3, #15]
 800349e:	7afa      	ldrb	r2, [r7, #11]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d157      	bne.n	8003554 <CO_NMT_receive+0xe8>
        uint8_t command = data[0];
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	72bb      	strb	r3, [r7, #10]
#if (CO_CONFIG_NMT) & (CO_CONFIG_NMT_CALLBACK_CHANGE | CO_CONFIG_FLAG_CALLBACK_PRE)
        CO_NMT_internalState_t currentOperatingState = NMT->operatingState;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	7b1b      	ldrb	r3, [r3, #12]
 80034ae:	727b      	strb	r3, [r7, #9]
#endif

        switch(command){
 80034b0:	7abb      	ldrb	r3, [r7, #10]
 80034b2:	2b82      	cmp	r3, #130	; 0x82
 80034b4:	d024      	beq.n	8003500 <CO_NMT_receive+0x94>
 80034b6:	2b82      	cmp	r3, #130	; 0x82
 80034b8:	dc26      	bgt.n	8003508 <CO_NMT_receive+0x9c>
 80034ba:	2b81      	cmp	r3, #129	; 0x81
 80034bc:	d01c      	beq.n	80034f8 <CO_NMT_receive+0x8c>
 80034be:	2b81      	cmp	r3, #129	; 0x81
 80034c0:	dc22      	bgt.n	8003508 <CO_NMT_receive+0x9c>
 80034c2:	2b80      	cmp	r3, #128	; 0x80
 80034c4:	d014      	beq.n	80034f0 <CO_NMT_receive+0x84>
 80034c6:	2b80      	cmp	r3, #128	; 0x80
 80034c8:	dc1e      	bgt.n	8003508 <CO_NMT_receive+0x9c>
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d002      	beq.n	80034d4 <CO_NMT_receive+0x68>
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d00a      	beq.n	80034e8 <CO_NMT_receive+0x7c>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 80034d2:	e019      	b.n	8003508 <CO_NMT_receive+0x9c>
                if((*NMT->emPr->errorRegister) == 0U){
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d115      	bne.n	800350c <CO_NMT_receive+0xa0>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2205      	movs	r2, #5
 80034e4:	731a      	strb	r2, [r3, #12]
                break;
 80034e6:	e011      	b.n	800350c <CO_NMT_receive+0xa0>
                NMT->operatingState = CO_NMT_STOPPED;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2204      	movs	r2, #4
 80034ec:	731a      	strb	r2, [r3, #12]
                break;
 80034ee:	e00e      	b.n	800350e <CO_NMT_receive+0xa2>
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	227f      	movs	r2, #127	; 0x7f
 80034f4:	731a      	strb	r2, [r3, #12]
                break;
 80034f6:	e00a      	b.n	800350e <CO_NMT_receive+0xa2>
                NMT->resetCommand = CO_RESET_APP;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2202      	movs	r2, #2
 80034fc:	739a      	strb	r2, [r3, #14]
                break;
 80034fe:	e006      	b.n	800350e <CO_NMT_receive+0xa2>
                NMT->resetCommand = CO_RESET_COMM;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	739a      	strb	r2, [r3, #14]
                break;
 8003506:	e002      	b.n	800350e <CO_NMT_receive+0xa2>
                break;
 8003508:	bf00      	nop
 800350a:	e000      	b.n	800350e <CO_NMT_receive+0xa2>
                break;
 800350c:	bf00      	nop
        }

#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
        if(NMT->pFunctNMT!=NULL && currentOperatingState!=NMT->operatingState){
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <CO_NMT_receive+0xc6>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800351c:	f997 2009 	ldrsb.w	r2, [r7, #9]
 8003520:	429a      	cmp	r2, r3
 8003522:	d006      	beq.n	8003532 <CO_NMT_receive+0xc6>
            NMT->pFunctNMT(NMT->operatingState);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800352e:	4610      	mov	r0, r2
 8003530:	4798      	blx	r3
        }
#endif
#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_CALLBACK_PRE
    /* Optional signal to RTOS, which can resume task, which handles NMT. */
    if(NMT->pFunctSignalPre != NULL && currentOperatingState!=NMT->operatingState) {
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <CO_NMT_receive+0xe8>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003540:	f997 2009 	ldrsb.w	r2, [r7, #9]
 8003544:	429a      	cmp	r2, r3
 8003546:	d005      	beq.n	8003554 <CO_NMT_receive+0xe8>
        NMT->pFunctSignalPre(NMT->functSignalObjectPre);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003550:	4610      	mov	r0, r2
 8003552:	4798      	blx	r3
    }
#endif
    }
}
 8003554:	bf00      	nop
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <CO_NMT_init>:
        uint16_t                NMT_txIdx,
        uint16_t                CANidTxNMT,
        CO_CANmodule_t         *HB_CANdevTx,
        uint16_t                HB_txIdx,
        uint16_t                CANidTxHB)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	; 0x28
 8003560:	af04      	add	r7, sp, #16
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	4611      	mov	r1, r2
 8003568:	461a      	mov	r2, r3
 800356a:	460b      	mov	r3, r1
 800356c:	71fb      	strb	r3, [r7, #7]
 800356e:	4613      	mov	r3, r2
 8003570:	80bb      	strh	r3, [r7, #4]
    /* verify arguments */
    if (NMT == NULL || emPr == NULL || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <CO_NMT_init+0x2e>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <CO_NMT_init+0x2e>
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <CO_NMT_init+0x2e>
 8003584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <CO_NMT_init+0x34>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e067      	b.n	8003660 <CO_NMT_init+0x104>
    }

    CO_ReturnError_t ret = CO_ERROR_NO;
 8003590:	2300      	movs	r3, #0
 8003592:	75fb      	strb	r3, [r7, #23]

    /* blinking bytes and LEDS */
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_LEDS
    NMT->LEDtimer               = 0;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
    NMT->LEDflickering          = 0;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	711a      	strb	r2, [r3, #4]
    NMT->LEDblinking            = 0;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	715a      	strb	r2, [r3, #5]
    NMT->LEDsingleFlash         = 0;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	719a      	strb	r2, [r3, #6]
    NMT->LEDdoubleFlash         = 0;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	71da      	strb	r2, [r3, #7]
    NMT->LEDtripleFlash         = 0;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	721a      	strb	r2, [r3, #8]
    NMT->LEDquadrupleFlash      = 0;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	725a      	strb	r2, [r3, #9]
    NMT->LEDgreenRun            = -1;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	22ff      	movs	r2, #255	; 0xff
 80035c2:	729a      	strb	r2, [r3, #10]
    NMT->LEDredError            = 1;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	72da      	strb	r2, [r3, #11]
#endif /* CO_CONFIG_NMT_LEDS */

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	731a      	strb	r2, [r3, #12]
    NMT->operatingStatePrev     = CO_NMT_INITIALIZING;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	735a      	strb	r2, [r3, #13]
    NMT->nodeId                 = nodeId;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	79fa      	ldrb	r2, [r7, #7]
 80035da:	73da      	strb	r2, [r3, #15]
    NMT->firstHBTime            = (int32_t)firstHBTime_ms * 1000;
 80035dc:	88bb      	ldrh	r3, [r7, #4]
 80035de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	615a      	str	r2, [r3, #20]
    NMT->resetCommand           = 0;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	739a      	strb	r2, [r3, #14]
    NMT->HBproducerTimer        = 0;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	611a      	str	r2, [r3, #16]
    NMT->emPr                   = emPr;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	619a      	str	r2, [r3, #24]
#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_CALLBACK_PRE
    NMT->pFunctSignalPre = NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->functSignalObjectPre = NULL;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
    NMT->pFunctNMT              = NULL;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8003610:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003612:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003614:	4b14      	ldr	r3, [pc, #80]	; (8003668 <CO_NMT_init+0x10c>)
 8003616:	9302      	str	r3, [sp, #8]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	2300      	movs	r3, #0
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003624:	6a38      	ldr	r0, [r7, #32]
 8003626:	f005 fec1 	bl	80093ac <CO_CANrxBufferInit>
 800362a:	4603      	mov	r3, r0
 800362c:	75fb      	strb	r3, [r7, #23]
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003632:	61da      	str	r2, [r3, #28]
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8003634:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003638:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800363a:	2300      	movs	r3, #0
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	2301      	movs	r3, #1
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003646:	f005 ff07 	bl	8009458 <CO_CANtxBufferInit>
 800364a:	4602      	mov	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (NMT->HB_TXbuff == NULL) {
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <CO_NMT_init+0x100>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003658:	23ff      	movs	r3, #255	; 0xff
 800365a:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800365c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	0800346d 	.word	0x0800346d

0800366c <CO_NMT_initCallbackChanged>:
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
/******************************************************************************/
void CO_NMT_initCallbackChanged(
        CO_NMT_t               *NMT,
        void                  (*pFunctNMT)(CO_NMT_internalState_t state))
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
    if(NMT != NULL){
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00d      	beq.n	8003698 <CO_NMT_initCallbackChanged+0x2c>
        NMT->pFunctNMT = pFunctNMT;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	62da      	str	r2, [r3, #44]	; 0x2c
        if(NMT->pFunctNMT != NULL){
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d006      	beq.n	8003698 <CO_NMT_initCallbackChanged+0x2c>
            NMT->pFunctNMT(NMT->operatingState);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8003694:	4610      	mov	r0, r2
 8003696:	4798      	blx	r3
        }
    }
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <CO_NMT_process>:
        uint16_t                HBtime_ms,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint32_t               *timerNext_us)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	80fb      	strh	r3, [r7, #6]
    uint8_t CANpassive;

    CO_NMT_internalState_t currentOperatingState = NMT->operatingState;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	7b1b      	ldrb	r3, [r3, #12]
 80036b4:	77bb      	strb	r3, [r7, #30]
    uint32_t HBtime = (uint32_t)HBtime_ms * 1000;
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036bc:	fb02 f303 	mul.w	r3, r2, r3
 80036c0:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer += timeDifference_us;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	441a      	add	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	611a      	str	r2, [r3, #16]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer and Timer expired or
     * - HB producer and NMT->operatingState changed, but not from initialised */
    if ((NMT->operatingState == CO_NMT_INITIALIZING) ||
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00f      	beq.n	80036f8 <CO_NMT_process+0x58>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d038      	beq.n	8003750 <CO_NMT_process+0xb0>
        (HBtime != 0 && (NMT->HBproducerTimer >= HBtime ||
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d907      	bls.n	80036f8 <CO_NMT_process+0x58>
                         NMT->operatingState != NMT->operatingStatePrev)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f993 200c 	ldrsb.w	r2, [r3, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f993 300d 	ldrsb.w	r3, [r3, #13]
        (HBtime != 0 && (NMT->HBproducerTimer >= HBtime ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d02b      	beq.n	8003750 <CO_NMT_process+0xb0>
        ))
    {
        /* Start from the beginning. If OS is slow, time sliding may occur. However,
         * heartbeat is not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	611a      	str	r2, [r3, #16]

        NMT->HB_TXbuff->data[0] = (uint8_t) NMT->operatingState;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4619      	mov	r1, r3
 8003716:	4610      	mov	r0, r2
 8003718:	f005 fede 	bl	80094d8 <CO_CANsend>

        if (NMT->operatingState == CO_NMT_INITIALIZING) {
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d114      	bne.n	8003750 <CO_NMT_process+0xb0>
            /* After bootup messages send first heartbeat earlier */
            if (HBtime > NMT->firstHBTime) {
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	d905      	bls.n	800373c <CO_NMT_process+0x9c>
                NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	1ad2      	subs	r2, r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	611a      	str	r2, [r3, #16]
            }

            /* NMT slave self starting */
            if (NMTstartup == 0x00000008U) NMT->operatingState = CO_NMT_OPERATIONAL;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b08      	cmp	r3, #8
 8003740:	d103      	bne.n	800374a <CO_NMT_process+0xaa>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2205      	movs	r2, #5
 8003746:	731a      	strb	r2, [r3, #12]
 8003748:	e002      	b.n	8003750 <CO_NMT_process+0xb0>
            else                           NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	227f      	movs	r2, #127	; 0x7f
 800374e:	731a      	strb	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMT->operatingState;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	735a      	strb	r2, [r3, #13]

    /* CAN passive flag */
    CANpassive = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	77fb      	strb	r3, [r7, #31]
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || CO_isError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2107      	movs	r1, #7
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fb89 	bl	8002e7e <CO_isError>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <CO_NMT_process+0xe6>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2106      	movs	r1, #6
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fb7f 	bl	8002e7e <CO_isError>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <CO_NMT_process+0xea>
        CANpassive = 1;
 8003786:	2301      	movs	r3, #1
 8003788:	77fb      	strb	r3, [r7, #31]


#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_LEDS
    NMT->LEDtimer += timeDifference_us;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	441a      	add	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	601a      	str	r2, [r3, #0]
    if (NMT->LEDtimer >= 50000) {
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800379e:	4293      	cmp	r3, r2
 80037a0:	f240 80e6 	bls.w	8003970 <CO_NMT_process+0x2d0>
        NMT->LEDtimer -= 50000;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 80037ac:	3b50      	subs	r3, #80	; 0x50
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	6013      	str	r3, [r2, #0]

#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_TIMERNEXT
        if (timerNext_us != NULL) {
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <CO_NMT_process+0x134>
            uint32_t diff = 50000 - NMT->LEDtimer;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f5c3 4343 	rsb	r3, r3, #49920	; 0xc300
 80037c0:	3350      	adds	r3, #80	; 0x50
 80037c2:	617b      	str	r3, [r7, #20]
            if (*timerNext_us > diff) {
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d202      	bcs.n	80037d4 <CO_NMT_process+0x134>
                *timerNext_us = diff;
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	601a      	str	r2, [r3, #0]
            }
        }
#endif

        if (++NMT->LEDflickering >= 1) NMT->LEDflickering = -1;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	b25a      	sxtb	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	711a      	strb	r2, [r3, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	dd02      	ble.n	80037f6 <CO_NMT_process+0x156>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	22ff      	movs	r2, #255	; 0xff
 80037f4:	711a      	strb	r2, [r3, #4]

        if (++NMT->LEDblinking >= 4) NMT->LEDblinking = -4;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	b25a      	sxtb	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	715a      	strb	r2, [r3, #5]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800380e:	2b03      	cmp	r3, #3
 8003810:	dd02      	ble.n	8003818 <CO_NMT_process+0x178>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	22fc      	movs	r2, #252	; 0xfc
 8003816:	715a      	strb	r2, [r3, #5]

        if (++NMT->LEDsingleFlash >= 4) NMT->LEDsingleFlash = -20;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	3301      	adds	r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	b25a      	sxtb	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	719a      	strb	r2, [r3, #6]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003830:	2b03      	cmp	r3, #3
 8003832:	dd02      	ble.n	800383a <CO_NMT_process+0x19a>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	22ec      	movs	r2, #236	; 0xec
 8003838:	719a      	strb	r2, [r3, #6]

        switch (++NMT->LEDdoubleFlash) {
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	3301      	adds	r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	b25a      	sxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	71da      	strb	r2, [r3, #7]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003852:	2b68      	cmp	r3, #104	; 0x68
 8003854:	d00e      	beq.n	8003874 <CO_NMT_process+0x1d4>
 8003856:	2b68      	cmp	r3, #104	; 0x68
 8003858:	dc10      	bgt.n	800387c <CO_NMT_process+0x1dc>
 800385a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800385e:	d005      	beq.n	800386c <CO_NMT_process+0x1cc>
 8003860:	2b04      	cmp	r3, #4
 8003862:	d10b      	bne.n	800387c <CO_NMT_process+0x1dc>
            case    4: NMT->LEDdoubleFlash = -104; break;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2298      	movs	r2, #152	; 0x98
 8003868:	71da      	strb	r2, [r3, #7]
 800386a:	e008      	b.n	800387e <CO_NMT_process+0x1de>
            case -100: NMT->LEDdoubleFlash =  100; break;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2264      	movs	r2, #100	; 0x64
 8003870:	71da      	strb	r2, [r3, #7]
 8003872:	e004      	b.n	800387e <CO_NMT_process+0x1de>
            case  104: NMT->LEDdoubleFlash =  -20; break;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	22ec      	movs	r2, #236	; 0xec
 8003878:	71da      	strb	r2, [r3, #7]
 800387a:	e000      	b.n	800387e <CO_NMT_process+0x1de>
            default: break;
 800387c:	bf00      	nop
        }

        switch (++NMT->LEDtripleFlash) {
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	3301      	adds	r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	b25a      	sxtb	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	721a      	strb	r2, [r3, #8]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003896:	2b72      	cmp	r3, #114	; 0x72
 8003898:	d020      	beq.n	80038dc <CO_NMT_process+0x23c>
 800389a:	2b72      	cmp	r3, #114	; 0x72
 800389c:	dc22      	bgt.n	80038e4 <CO_NMT_process+0x244>
 800389e:	2b68      	cmp	r3, #104	; 0x68
 80038a0:	d014      	beq.n	80038cc <CO_NMT_process+0x22c>
 80038a2:	2b68      	cmp	r3, #104	; 0x68
 80038a4:	dc1e      	bgt.n	80038e4 <CO_NMT_process+0x244>
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d008      	beq.n	80038bc <CO_NMT_process+0x21c>
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	dc1a      	bgt.n	80038e4 <CO_NMT_process+0x244>
 80038ae:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 80038b2:	d00f      	beq.n	80038d4 <CO_NMT_process+0x234>
 80038b4:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80038b8:	d004      	beq.n	80038c4 <CO_NMT_process+0x224>
            case    4: NMT->LEDtripleFlash = -104; break;
            case -100: NMT->LEDtripleFlash =  100; break;
            case  104: NMT->LEDtripleFlash = -114; break;
            case -110: NMT->LEDtripleFlash =  110; break;
            case  114: NMT->LEDtripleFlash =  -20; break;
            default: break;
 80038ba:	e013      	b.n	80038e4 <CO_NMT_process+0x244>
            case    4: NMT->LEDtripleFlash = -104; break;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2298      	movs	r2, #152	; 0x98
 80038c0:	721a      	strb	r2, [r3, #8]
 80038c2:	e010      	b.n	80038e6 <CO_NMT_process+0x246>
            case -100: NMT->LEDtripleFlash =  100; break;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2264      	movs	r2, #100	; 0x64
 80038c8:	721a      	strb	r2, [r3, #8]
 80038ca:	e00c      	b.n	80038e6 <CO_NMT_process+0x246>
            case  104: NMT->LEDtripleFlash = -114; break;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	228e      	movs	r2, #142	; 0x8e
 80038d0:	721a      	strb	r2, [r3, #8]
 80038d2:	e008      	b.n	80038e6 <CO_NMT_process+0x246>
            case -110: NMT->LEDtripleFlash =  110; break;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	226e      	movs	r2, #110	; 0x6e
 80038d8:	721a      	strb	r2, [r3, #8]
 80038da:	e004      	b.n	80038e6 <CO_NMT_process+0x246>
            case  114: NMT->LEDtripleFlash =  -20; break;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	22ec      	movs	r2, #236	; 0xec
 80038e0:	721a      	strb	r2, [r3, #8]
 80038e2:	e000      	b.n	80038e6 <CO_NMT_process+0x246>
            default: break;
 80038e4:	bf00      	nop
        }

        switch (++NMT->LEDquadrupleFlash) {
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	b25a      	sxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	725a      	strb	r2, [r3, #9]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80038fe:	2b7c      	cmp	r3, #124	; 0x7c
 8003900:	d032      	beq.n	8003968 <CO_NMT_process+0x2c8>
 8003902:	2b7c      	cmp	r3, #124	; 0x7c
 8003904:	dc36      	bgt.n	8003974 <CO_NMT_process+0x2d4>
 8003906:	2b72      	cmp	r3, #114	; 0x72
 8003908:	d026      	beq.n	8003958 <CO_NMT_process+0x2b8>
 800390a:	2b72      	cmp	r3, #114	; 0x72
 800390c:	dc32      	bgt.n	8003974 <CO_NMT_process+0x2d4>
 800390e:	2b68      	cmp	r3, #104	; 0x68
 8003910:	d01a      	beq.n	8003948 <CO_NMT_process+0x2a8>
 8003912:	2b68      	cmp	r3, #104	; 0x68
 8003914:	dc2e      	bgt.n	8003974 <CO_NMT_process+0x2d4>
 8003916:	2b04      	cmp	r3, #4
 8003918:	d00e      	beq.n	8003938 <CO_NMT_process+0x298>
 800391a:	2b04      	cmp	r3, #4
 800391c:	dc2a      	bgt.n	8003974 <CO_NMT_process+0x2d4>
 800391e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003922:	d00d      	beq.n	8003940 <CO_NMT_process+0x2a0>
 8003924:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003928:	dc24      	bgt.n	8003974 <CO_NMT_process+0x2d4>
 800392a:	f113 0f78 	cmn.w	r3, #120	; 0x78
 800392e:	d017      	beq.n	8003960 <CO_NMT_process+0x2c0>
 8003930:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 8003934:	d00c      	beq.n	8003950 <CO_NMT_process+0x2b0>
            case  104: NMT->LEDquadrupleFlash = -114; break;
            case -110: NMT->LEDquadrupleFlash =  110; break;
            case  114: NMT->LEDquadrupleFlash = -124; break;
            case -120: NMT->LEDquadrupleFlash =  120; break;
            case  124: NMT->LEDquadrupleFlash =  -20; break;
            default: break;
 8003936:	e01d      	b.n	8003974 <CO_NMT_process+0x2d4>
            case    4: NMT->LEDquadrupleFlash = -104; break;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2298      	movs	r2, #152	; 0x98
 800393c:	725a      	strb	r2, [r3, #9]
 800393e:	e01a      	b.n	8003976 <CO_NMT_process+0x2d6>
            case -100: NMT->LEDquadrupleFlash =  100; break;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2264      	movs	r2, #100	; 0x64
 8003944:	725a      	strb	r2, [r3, #9]
 8003946:	e016      	b.n	8003976 <CO_NMT_process+0x2d6>
            case  104: NMT->LEDquadrupleFlash = -114; break;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	228e      	movs	r2, #142	; 0x8e
 800394c:	725a      	strb	r2, [r3, #9]
 800394e:	e012      	b.n	8003976 <CO_NMT_process+0x2d6>
            case -110: NMT->LEDquadrupleFlash =  110; break;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	226e      	movs	r2, #110	; 0x6e
 8003954:	725a      	strb	r2, [r3, #9]
 8003956:	e00e      	b.n	8003976 <CO_NMT_process+0x2d6>
            case  114: NMT->LEDquadrupleFlash = -124; break;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2284      	movs	r2, #132	; 0x84
 800395c:	725a      	strb	r2, [r3, #9]
 800395e:	e00a      	b.n	8003976 <CO_NMT_process+0x2d6>
            case -120: NMT->LEDquadrupleFlash =  120; break;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2278      	movs	r2, #120	; 0x78
 8003964:	725a      	strb	r2, [r3, #9]
 8003966:	e006      	b.n	8003976 <CO_NMT_process+0x2d6>
            case  124: NMT->LEDquadrupleFlash =  -20; break;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	22ec      	movs	r2, #236	; 0xec
 800396c:	725a      	strb	r2, [r3, #9]
 800396e:	e002      	b.n	8003976 <CO_NMT_process+0x2d6>
        }
    }
 8003970:	bf00      	nop
 8003972:	e000      	b.n	8003976 <CO_NMT_process+0x2d6>
            default: break;
 8003974:	bf00      	nop

    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800397c:	2b7f      	cmp	r3, #127	; 0x7f
 800397e:	d00c      	beq.n	800399a <CO_NMT_process+0x2fa>
 8003980:	2b7f      	cmp	r3, #127	; 0x7f
 8003982:	dc14      	bgt.n	80039ae <CO_NMT_process+0x30e>
 8003984:	2b04      	cmp	r3, #4
 8003986:	d002      	beq.n	800398e <CO_NMT_process+0x2ee>
 8003988:	2b05      	cmp	r3, #5
 800398a:	d00c      	beq.n	80039a6 <CO_NMT_process+0x306>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
        default: break;
 800398c:	e00f      	b.n	80039ae <CO_NMT_process+0x30e>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	729a      	strb	r2, [r3, #10]
 8003998:	e00a      	b.n	80039b0 <CO_NMT_process+0x310>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	729a      	strb	r2, [r3, #10]
 80039a4:	e004      	b.n	80039b0 <CO_NMT_process+0x310>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	729a      	strb	r2, [r3, #10]
 80039ac:	e000      	b.n	80039b0 <CO_NMT_process+0x310>
        default: break;
 80039ae:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2112      	movs	r1, #18
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fa60 	bl	8002e7e <CO_isError>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <CO_NMT_process+0x32c>
        NMT->LEDredError = 1;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	72da      	strb	r2, [r3, #11]
 80039ca:	e04f      	b.n	8003a6c <CO_NMT_process+0x3cc>

    else if(CO_isError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2118      	movs	r1, #24
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fa52 	bl	8002e7e <CO_isError>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <CO_NMT_process+0x34c>
        NMT->LEDredError = NMT->LEDtripleFlash;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	72da      	strb	r2, [r3, #11]
 80039ea:	e03f      	b.n	8003a6c <CO_NMT_process+0x3cc>

    else if(CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	211b      	movs	r1, #27
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fa42 	bl	8002e7e <CO_isError>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <CO_NMT_process+0x374>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	211c      	movs	r1, #28
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fa38 	bl	8002e7e <CO_isError>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <CO_NMT_process+0x380>
        NMT->LEDredError = NMT->LEDdoubleFlash;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f993 2007 	ldrsb.w	r2, [r3, #7]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	72da      	strb	r2, [r3, #11]
 8003a1e:	e025      	b.n	8003a6c <CO_NMT_process+0x3cc>

    else if(CANpassive || CO_isError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
 8003a20:	7ffb      	ldrb	r3, [r7, #31]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <CO_NMT_process+0x39a>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fa25 	bl	8002e7e <CO_isError>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <CO_NMT_process+0x3a6>
        NMT->LEDredError = NMT->LEDsingleFlash;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	72da      	strb	r2, [r3, #11]
 8003a44:	e012      	b.n	8003a6c <CO_NMT_process+0x3cc>

    else if(errorRegister)
 8003a46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <CO_NMT_process+0x3c6>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	db02      	blt.n	8003a5e <CO_NMT_process+0x3be>
 8003a58:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5c:	e000      	b.n	8003a60 <CO_NMT_process+0x3c0>
 8003a5e:	2201      	movs	r2, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	72da      	strb	r2, [r3, #11]
 8003a64:	e002      	b.n	8003a6c <CO_NMT_process+0x3cc>

    else
        NMT->LEDredError = -1;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	22ff      	movs	r2, #255	; 0xff
 8003a6a:	72da      	strb	r2, [r3, #11]
#endif /* CO_CONFIG_NMT_LEDS */


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
 8003a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80ae 	beq.w	8003bd0 <CO_NMT_process+0x530>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	f040 80a8 	bne.w	8003bd0 <CO_NMT_process+0x530>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
 8003a80:	7ffb      	ldrb	r3, [r7, #31]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00f      	beq.n	8003aa6 <CO_NMT_process+0x406>
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	3302      	adds	r3, #2
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <CO_NMT_process+0x3fa>
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	3302      	adds	r3, #2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d105      	bne.n	8003aa6 <CO_NMT_process+0x406>
 8003a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a9e:	f043 0310 	orr.w	r3, r3, #16
 8003aa2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        if(errorRegister){
 8003aa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8090 	beq.w	8003bd0 <CO_NMT_process+0x530>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
 8003ab0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d03e      	beq.n	8003b3a <CO_NMT_process+0x49a>
                if(errorBehavior[1] == 0){
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	3301      	adds	r3, #1
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d103      	bne.n	8003ace <CO_NMT_process+0x42e>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	227f      	movs	r2, #127	; 0x7f
 8003aca:	731a      	strb	r2, [r3, #12]
 8003acc:	e035      	b.n	8003b3a <CO_NMT_process+0x49a>
                }
                else if(errorBehavior[1] == 2){
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d103      	bne.n	8003ae0 <CO_NMT_process+0x440>
                    NMT->operatingState = CO_NMT_STOPPED;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2204      	movs	r2, #4
 8003adc:	731a      	strb	r2, [r3, #12]
 8003ade:	e02c      	b.n	8003b3a <CO_NMT_process+0x49a>
                }
                else if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2112      	movs	r1, #18
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff f9c8 	bl	8002e7e <CO_isError>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d113      	bne.n	8003b1c <CO_NMT_process+0x47c>
                     || CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	211b      	movs	r1, #27
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff f9be 	bl	8002e7e <CO_isError>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <CO_NMT_process+0x47c>
                     || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	211c      	movs	r1, #28
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff f9b4 	bl	8002e7e <CO_isError>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <CO_NMT_process+0x49a>
                {
                    if(errorBehavior[0] == 0){
 8003b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d103      	bne.n	8003b2c <CO_NMT_process+0x48c>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	227f      	movs	r2, #127	; 0x7f
 8003b28:	731a      	strb	r2, [r3, #12]
 8003b2a:	e006      	b.n	8003b3a <CO_NMT_process+0x49a>
                    }
                    else if(errorBehavior[0] == 2){
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d102      	bne.n	8003b3a <CO_NMT_process+0x49a>
                        NMT->operatingState = CO_NMT_STOPPED;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2204      	movs	r2, #4
 8003b38:	731a      	strb	r2, [r3, #12]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
 8003b3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d010      	beq.n	8003b68 <CO_NMT_process+0x4c8>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	3303      	adds	r3, #3
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d103      	bne.n	8003b58 <CO_NMT_process+0x4b8>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	227f      	movs	r2, #127	; 0x7f
 8003b54:	731a      	strb	r2, [r3, #12]
 8003b56:	e007      	b.n	8003b68 <CO_NMT_process+0x4c8>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	3303      	adds	r3, #3
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d102      	bne.n	8003b68 <CO_NMT_process+0x4c8>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2204      	movs	r2, #4
 8003b66:	731a      	strb	r2, [r3, #12]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
 8003b68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d010      	beq.n	8003b96 <CO_NMT_process+0x4f6>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b76:	3304      	adds	r3, #4
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <CO_NMT_process+0x4e6>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	227f      	movs	r2, #127	; 0x7f
 8003b82:	731a      	strb	r2, [r3, #12]
 8003b84:	e007      	b.n	8003b96 <CO_NMT_process+0x4f6>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	3304      	adds	r3, #4
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d102      	bne.n	8003b96 <CO_NMT_process+0x4f6>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2204      	movs	r2, #4
 8003b94:	731a      	strb	r2, [r3, #12]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
 8003b96:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	da10      	bge.n	8003bc0 <CO_NMT_process+0x520>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	3305      	adds	r3, #5
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d103      	bne.n	8003bb0 <CO_NMT_process+0x510>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	227f      	movs	r2, #127	; 0x7f
 8003bac:	731a      	strb	r2, [r3, #12]
 8003bae:	e007      	b.n	8003bc0 <CO_NMT_process+0x520>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	3305      	adds	r3, #5
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d102      	bne.n	8003bc0 <CO_NMT_process+0x520>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	731a      	strb	r2, [r3, #12]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d002      	beq.n	8003bd0 <CO_NMT_process+0x530>
                NMT->HBproducerTimer = HBtime;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	611a      	str	r2, [r3, #16]
        }
    }

    if (currentOperatingState != NMT->operatingState) {
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003bd6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d010      	beq.n	8003c00 <CO_NMT_process+0x560>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
        if (NMT->pFunctNMT != NULL) {
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d006      	beq.n	8003bf4 <CO_NMT_process+0x554>
            NMT->pFunctNMT(NMT->operatingState);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4798      	blx	r3
        }
#endif
#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_TIMERNEXT
        /* execute next CANopen processing immediately */
        if (timerNext_us != NULL) {
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <CO_NMT_process+0x560>
            *timerNext_us = 0;
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
#endif
    }

#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_TIMERNEXT
    /* Calculate, when next Heartbeat needs to be send and lower timerNext_us if necessary. */
    if (HBtime != 0 && timerNext_us != NULL) {
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d018      	beq.n	8003c38 <CO_NMT_process+0x598>
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d015      	beq.n	8003c38 <CO_NMT_process+0x598>
        if (NMT->HBproducerTimer < HBtime) {
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d90d      	bls.n	8003c32 <CO_NMT_process+0x592>
            uint32_t diff = HBtime - NMT->HBproducerTimer;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	613b      	str	r3, [r7, #16]
            if (*timerNext_us > diff) {
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d206      	bcs.n	8003c38 <CO_NMT_process+0x598>
                *timerNext_us = diff;
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e002      	b.n	8003c38 <CO_NMT_process+0x598>
            }
        } else {
            *timerNext_us = 0;
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
        }
    }
#endif

    return (CO_NMT_reset_cmd_t) NMT->resetCommand;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	7b9b      	ldrb	r3, [r3, #14]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <CO_getUint16>:
static inline uint16_t CO_getUint16(const uint8_t data[]){
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
    memcpy(&value, data, sizeof(value));
 8003c52:	81fb      	strh	r3, [r7, #14]
    return value;
 8003c54:	89fb      	ldrh	r3, [r7, #14]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8003c6e:	60fb      	str	r3, [r7, #12]
    return value;
 8003c70:	68fb      	ldr	r3, [r7, #12]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <CO_setUint32>:
static inline void CO_setUint32(uint8_t data[], const uint32_t value){
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
 8003c88:	683a      	ldr	r2, [r7, #0]
    memcpy(data, &value, sizeof(value));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, void *msg){
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b086      	sub	sp, #24
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003caa:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	3321      	adds	r3, #33	; 0x21
 8003cb0:	613b      	str	r3, [r7, #16]

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	7e5b      	ldrb	r3, [r3, #25]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d038      	beq.n	8003d30 <CO_PDO_receive+0x96>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f993 3000 	ldrsb.w	r3, [r3]
    if( (RPDO->valid) &&
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	d132      	bne.n	8003d30 <CO_PDO_receive+0x96>
        (DLC >= RPDO->dataLength))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	7e9b      	ldrb	r3, [r3, #26]
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 8003cce:	7dfa      	ldrb	r2, [r7, #23]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d32d      	bcc.n	8003d30 <CO_PDO_receive+0x96>
    {
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        const size_t index = RPDO->SYNC && RPDO->synchronous && RPDO->SYNC->CANrxToggle;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <CO_PDO_receive+0x5a>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <CO_PDO_receive+0x5a>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	7f1b      	ldrb	r3, [r3, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <CO_PDO_receive+0x5a>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <CO_PDO_receive+0x5c>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]
#else
        const size_t index = 0;
#endif

        /* copy data into appropriate buffer and set 'new message' flag */
        memcpy(RPDO->CANrxData[index], data, sizeof(RPDO->CANrxData[index]));
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3309      	adds	r3, #9
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	3304      	adds	r3, #4
 8003d04:	2208      	movs	r2, #8
 8003d06:	6939      	ldr	r1, [r7, #16]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f013 fbe3 	bl	80174d4 <memcpy>
        CO_FLAG_SET(RPDO->CANrxNew[index]);
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	3310      	adds	r3, #16
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	2201      	movs	r2, #1
 8003d1a:	605a      	str	r2, [r3, #4]

#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_CALLBACK_PRE
        /* Optional signal to RTOS, which can resume task, which handles RPDO. */
        if(RPDO->pFunctSignalPre != NULL) {
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <CO_PDO_receive+0x96>
            RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4798      	blx	r3
        }
#endif
    }
}
 8003d30:	bf00      	nop
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <CO_RPDOconfigCom>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af04      	add	r7, sp, #16
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
    uint16_t ID;
    CO_ReturnError_t r;

    ID = (uint16_t)COB_IDUsedByRPDO;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	81fb      	strh	r3, [r7, #14]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <CO_RPDOconfigCom+0xb8>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d121      	bne.n	8003d94 <CO_RPDOconfigCom+0x5c>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	7e9b      	ldrb	r3, [r3, #26]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01d      	beq.n	8003d94 <CO_RPDOconfigCom+0x5c>
 8003d58:	89fb      	ldrh	r3, [r7, #14]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01a      	beq.n	8003d94 <CO_RPDOconfigCom+0x5c>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8adb      	ldrh	r3, [r3, #22]
 8003d62:	89fa      	ldrh	r2, [r7, #14]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d105      	bne.n	8003d74 <CO_RPDOconfigCom+0x3c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7d1b      	ldrb	r3, [r3, #20]
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	89fb      	ldrh	r3, [r7, #14]
 8003d70:	4413      	add	r3, r2
 8003d72:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = true;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	765a      	strb	r2, [r3, #25]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	7a1b      	ldrb	r3, [r3, #8]
 8003d80:	2bf0      	cmp	r3, #240	; 0xf0
 8003d82:	bf94      	ite	ls
 8003d84:	2301      	movls	r3, #1
 8003d86:	2300      	movhi	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d92:	e00a      	b.n	8003daa <CO_RPDOconfigCom+0x72>
#endif
    }
    else{
        ID = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = false;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	765a      	strb	r2, [r3, #25]
        CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    }
    r = CO_CANrxBufferInit(
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 8003db4:	89fa      	ldrh	r2, [r7, #14]
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <CO_RPDOconfigCom+0xbc>)
 8003db8:	9302      	str	r3, [sp, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003dc6:	f005 faf1 	bl	80093ac <CO_CANrxBufferInit>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	737b      	strb	r3, [r7, #13]
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    if(r != CO_ERROR_NO){
 8003dce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <CO_RPDOconfigCom+0xb0>
        RPDO->valid = false;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	765a      	strb	r2, [r3, #25]
        CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    }
}
 8003de8:	bf00      	nop
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	bffff800 	.word	0xbffff800
 8003df4:	08003c9b 	.word	0x08003c9b

08003df8 <CO_TPDOconfigCom>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b089      	sub	sp, #36	; 0x24
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	71fb      	strb	r3, [r7, #7]
    uint16_t ID;

    ID = (uint16_t)COB_IDUsedByTPDO;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	82fb      	strh	r3, [r7, #22]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <CO_TPDOconfigCom+0x8c>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d115      	bne.n	8003e40 <CO_TPDOconfigCom+0x48>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	7e9b      	ldrb	r3, [r3, #26]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d011      	beq.n	8003e40 <CO_TPDOconfigCom+0x48>
 8003e1c:	8afb      	ldrh	r3, [r7, #22]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00e      	beq.n	8003e40 <CO_TPDOconfigCom+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8adb      	ldrh	r3, [r3, #22]
 8003e26:	8afa      	ldrh	r2, [r7, #22]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d105      	bne.n	8003e38 <CO_TPDOconfigCom+0x40>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	7d1b      	ldrb	r3, [r3, #20]
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	8afb      	ldrh	r3, [r7, #22]
 8003e34:	4413      	add	r3, r2
 8003e36:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = true;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	765a      	strb	r2, [r3, #25]
 8003e3e:	e004      	b.n	8003e4a <CO_TPDOconfigCom+0x52>
    }
    else{
        ID = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = false;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	765a      	strb	r2, [r3, #25]
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	7e9b      	ldrb	r3, [r3, #26]
 8003e58:	8afc      	ldrh	r4, [r7, #22]
 8003e5a:	79fa      	ldrb	r2, [r7, #7]
 8003e5c:	9201      	str	r2, [sp, #4]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2300      	movs	r3, #0
 8003e62:	4622      	mov	r2, r4
 8003e64:	f005 faf8 	bl	8009458 <CO_CANtxBufferInit>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <CO_TPDOconfigCom+0x84>
        TPDO->valid = false;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	765a      	strb	r2, [r3, #25]
    }
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd90      	pop	{r4, r7, pc}
 8003e84:	bffff800 	.word	0xbffff800

08003e88 <CO_PDOfindMap>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint16_t)(map>>16);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	837b      	strh	r3, [r7, #26]
    subIndex = (uint8_t)(map>>8);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	767b      	strb	r3, [r7, #25]
    dataLen = (uint8_t) map;   /* data length in bits */
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	763b      	strb	r3, [r7, #24]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003ea8:	7e3b      	ldrb	r3, [r7, #24]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <CO_PDOfindMap+0x2e>
 8003eb2:	4b66      	ldr	r3, [pc, #408]	; (800404c <CO_PDOfindMap+0x1c4>)
 8003eb4:	e0c6      	b.n	8004044 <CO_PDOfindMap+0x1bc>

    dataLen >>= 3;    /* new data length is in bytes */
 8003eb6:	7e3b      	ldrb	r3, [r7, #24]
 8003eb8:	08db      	lsrs	r3, r3, #3
 8003eba:	763b      	strb	r3, [r7, #24]
    *pLength += dataLen;
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	7e3b      	ldrb	r3, [r7, #24]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d901      	bls.n	8003ed6 <CO_PDOfindMap+0x4e>
 8003ed2:	4b5f      	ldr	r3, [pc, #380]	; (8004050 <CO_PDOfindMap+0x1c8>)
 8003ed4:	e0b6      	b.n	8004044 <CO_PDOfindMap+0x1bc>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
 8003ed6:	8b7b      	ldrh	r3, [r7, #26]
 8003ed8:	2b07      	cmp	r3, #7
 8003eda:	d82d      	bhi.n	8003f38 <CO_PDOfindMap+0xb0>
 8003edc:	7e7b      	ldrb	r3, [r7, #25]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d12a      	bne.n	8003f38 <CO_PDOfindMap+0xb0>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	77fb      	strb	r3, [r7, #31]

        if(index<2) dummySize = 0;
 8003ee6:	8b7b      	ldrh	r3, [r7, #26]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d802      	bhi.n	8003ef2 <CO_PDOfindMap+0x6a>
 8003eec:	2300      	movs	r3, #0
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e010      	b.n	8003f14 <CO_PDOfindMap+0x8c>
        else if(index==2 || index==5) dummySize = 1;
 8003ef2:	8b7b      	ldrh	r3, [r7, #26]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d002      	beq.n	8003efe <CO_PDOfindMap+0x76>
 8003ef8:	8b7b      	ldrh	r3, [r7, #26]
 8003efa:	2b05      	cmp	r3, #5
 8003efc:	d102      	bne.n	8003f04 <CO_PDOfindMap+0x7c>
 8003efe:	2301      	movs	r3, #1
 8003f00:	77fb      	strb	r3, [r7, #31]
 8003f02:	e007      	b.n	8003f14 <CO_PDOfindMap+0x8c>
        else if(index==3 || index==6) dummySize = 2;
 8003f04:	8b7b      	ldrh	r3, [r7, #26]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d002      	beq.n	8003f10 <CO_PDOfindMap+0x88>
 8003f0a:	8b7b      	ldrh	r3, [r7, #26]
 8003f0c:	2b06      	cmp	r3, #6
 8003f0e:	d101      	bne.n	8003f14 <CO_PDOfindMap+0x8c>
 8003f10:	2302      	movs	r3, #2
 8003f12:	77fb      	strb	r3, [r7, #31]

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003f14:	7ffa      	ldrb	r2, [r7, #31]
 8003f16:	7e3b      	ldrb	r3, [r7, #24]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d201      	bcs.n	8003f20 <CO_PDOfindMap+0x98>
 8003f1c:	4b4b      	ldr	r3, [pc, #300]	; (800404c <CO_PDOfindMap+0x1c4>)
 8003f1e:	e091      	b.n	8004044 <CO_PDOfindMap+0x1bc>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <CO_PDOfindMap+0xa6>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	4a4a      	ldr	r2, [pc, #296]	; (8004054 <CO_PDOfindMap+0x1cc>)
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e002      	b.n	8003f34 <CO_PDOfindMap+0xac>
        else         *ppData = (uint8_t*) &dummyTX;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	4a49      	ldr	r2, [pc, #292]	; (8004058 <CO_PDOfindMap+0x1d0>)
 8003f32:	601a      	str	r2, [r3, #0]

        return 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e085      	b.n	8004044 <CO_PDOfindMap+0x1bc>
    }

    /* find object in Object Dictionary */
    entryNo = CO_OD_find(SDO, index);
 8003f38:	8b7b      	ldrh	r3, [r7, #26]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f001 fa0b 	bl	8005358 <CO_OD_find>
 8003f42:	4603      	mov	r3, r0
 8003f44:	82fb      	strh	r3, [r7, #22]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
 8003f46:	8afb      	ldrh	r3, [r7, #22]
 8003f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00c      	beq.n	8003f6a <CO_PDOfindMap+0xe2>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 8003f56:	8afa      	ldrh	r2, [r7, #22]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	789b      	ldrb	r3, [r3, #2]
 8003f64:	7e7a      	ldrb	r2, [r7, #25]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d901      	bls.n	8003f6e <CO_PDOfindMap+0xe6>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
 8003f6a:	4b3c      	ldr	r3, [pc, #240]	; (800405c <CO_PDOfindMap+0x1d4>)
 8003f6c:	e06a      	b.n	8004044 <CO_PDOfindMap+0x1bc>

    attr = CO_OD_getAttribute(SDO, entryNo, subIndex);
 8003f6e:	7e7a      	ldrb	r2, [r7, #25]
 8003f70:	8afb      	ldrh	r3, [r7, #22]
 8003f72:	4619      	mov	r1, r3
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f001 fa98 	bl	80054aa <CO_OD_getAttribute>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	757b      	strb	r3, [r7, #21]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <CO_PDOfindMap+0x114>
 8003f84:	7d7b      	ldrb	r3, [r7, #21]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <CO_PDOfindMap+0x110>
 8003f8e:	7d7b      	ldrb	r3, [r7, #21]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <CO_PDOfindMap+0x114>
 8003f98:	4b2c      	ldr	r3, [pc, #176]	; (800404c <CO_PDOfindMap+0x1c4>)
 8003f9a:	e053      	b.n	8004044 <CO_PDOfindMap+0x1bc>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <CO_PDOfindMap+0x132>
 8003fa2:	7d7b      	ldrb	r3, [r7, #21]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <CO_PDOfindMap+0x12e>
 8003fac:	7d7b      	ldrb	r3, [r7, #21]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <CO_PDOfindMap+0x132>
 8003fb6:	4b25      	ldr	r3, [pc, #148]	; (800404c <CO_PDOfindMap+0x1c4>)
 8003fb8:	e044      	b.n	8004044 <CO_PDOfindMap+0x1bc>

    /* is size of variable big enough for map */
    objectLen = CO_OD_getLength(SDO, entryNo, subIndex);
 8003fba:	7e7a      	ldrb	r2, [r7, #25]
 8003fbc:	8afb      	ldrh	r3, [r7, #22]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f001 fa21 	bl	8005408 <CO_OD_getLength>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	753b      	strb	r3, [r7, #20]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003fca:	7d3a      	ldrb	r2, [r7, #20]
 8003fcc:	7e3b      	ldrb	r3, [r7, #24]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d201      	bcs.n	8003fd6 <CO_PDOfindMap+0x14e>
 8003fd2:	4b1e      	ldr	r3, [pc, #120]	; (800404c <CO_PDOfindMap+0x1c4>)
 8003fd4:	e036      	b.n	8004044 <CO_PDOfindMap+0x1bc>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
 8003fd6:	7d7b      	ldrb	r3, [r7, #21]
 8003fd8:	09db      	lsrs	r3, r3, #7
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) CO_OD_getDataPointer(SDO, entryNo, subIndex);
 8003fe0:	7e7a      	ldrb	r2, [r7, #25]
 8003fe2:	8afb      	ldrh	r3, [r7, #22]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f001 fab3 	bl	8005552 <CO_OD_getDataPointer>
 8003fec:	4602      	mov	r2, r0
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
 8003ff2:	7d7b      	ldrb	r3, [r7, #21]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d022      	beq.n	8004042 <CO_PDOfindMap+0x1ba>
        int16_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	b29a      	uxth	r2, r3
 8004002:	7e3b      	ldrb	r3, [r7, #24]
 8004004:	b29b      	uxth	r3, r3
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	b29b      	uxth	r3, r3
 800400a:	83bb      	strh	r3, [r7, #28]
 800400c:	e013      	b.n	8004036 <CO_PDOfindMap+0x1ae>
            *pSendIfCOSFlags |= 1<<i;
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	b25a      	sxtb	r2, r3
 8004014:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004018:	2101      	movs	r1, #1
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	b25b      	sxtb	r3, r3
 8004020:	4313      	orrs	r3, r2
 8004022:	b25b      	sxtb	r3, r3
 8004024:	b2da      	uxtb	r2, r3
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
 800402a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800402e:	b29b      	uxth	r3, r3
 8004030:	3301      	adds	r3, #1
 8004032:	b29b      	uxth	r3, r3
 8004034:	83bb      	strh	r3, [r7, #28]
 8004036:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800403a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	4293      	cmp	r3, r2
 8004040:	dbe5      	blt.n	800400e <CO_PDOfindMap+0x186>
        }
    }

    return 0;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	06040041 	.word	0x06040041
 8004050:	06040042 	.word	0x06040042
 8004054:	200009d4 	.word	0x200009d4
 8004058:	200009d8 	.word	0x200009d8
 800405c:	06020000 	.word	0x06020000

08004060 <CO_RPDOconfigMap>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
 8004060:	b580      	push	{r7, lr}
 8004062:	b08e      	sub	sp, #56	; 0x38
 8004064:	af04      	add	r7, sp, #16
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	3304      	adds	r3, #4
 800407a:	61fb      	str	r3, [r7, #28]

    for(i=noOfMappedObjects; i>0; i--){
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004080:	e047      	b.n	8004112 <CO_RPDOconfigMap+0xb2>
        int16_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	72fb      	strb	r3, [r7, #11]
        uint8_t prevLength = length;
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	1d1a      	adds	r2, r3, #4
 800408e:	61fa      	str	r2, [r7, #28]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6858      	ldr	r0, [r3, #4]
 8004098:	f107 020c 	add.w	r2, r7, #12
 800409c:	f107 030a 	add.w	r3, r7, #10
 80040a0:	9302      	str	r3, [sp, #8]
 80040a2:	f107 030b 	add.w	r3, r7, #11
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	f107 0313 	add.w	r3, r7, #19
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	4613      	mov	r3, r2
 80040b0:	2200      	movs	r2, #0
 80040b2:	6979      	ldr	r1, [r7, #20]
 80040b4:	f7ff fee8 	bl	8003e88 <CO_PDOfindMap>
 80040b8:	6238      	str	r0, [r7, #32]
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
        if(ret){
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <CO_RPDOconfigMap+0x76>
            length = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 80040ce:	211a      	movs	r1, #26
 80040d0:	f7fe fdc7 	bl	8002c62 <CO_errorReport>
 80040d4:	e021      	b.n	800411a <CO_RPDOconfigMap+0xba>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 80040d6:	7e7b      	ldrb	r3, [r7, #25]
 80040d8:	837b      	strh	r3, [r7, #26]
 80040da:	e00f      	b.n	80040fc <CO_RPDOconfigMap+0x9c>
            RPDO->mapPointer[j] = pData++;
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	1c53      	adds	r3, r2, #1
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	3306      	adds	r3, #6
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
 80040f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	837b      	strh	r3, [r7, #26]
 80040fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004100:	7cfa      	ldrb	r2, [r7, #19]
 8004102:	4293      	cmp	r3, r2
 8004104:	dbea      	blt.n	80040dc <CO_RPDOconfigMap+0x7c>
    for(i=noOfMappedObjects; i>0; i--){
 8004106:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29b      	uxth	r3, r3
 8004110:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004112:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004116:	2b00      	cmp	r3, #0
 8004118:	dcb3      	bgt.n	8004082 <CO_RPDOconfigMap+0x22>
        }
#endif

    }

    RPDO->dataLength = length;
 800411a:	7cfa      	ldrb	r2, [r7, #19]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	769a      	strb	r2, [r3, #26]

    return ret;
 8004120:	6a3b      	ldr	r3, [r7, #32]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3728      	adds	r7, #40	; 0x28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <CO_TPDOconfigMap>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
 800412a:	b580      	push	{r7, lr}
 800412c:	b08e      	sub	sp, #56	; 0x38
 800412e:	af04      	add	r7, sp, #16
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	3304      	adds	r3, #4
 8004144:	61fb      	str	r3, [r7, #28]

    TPDO->sendIfCOSFlags = 0;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for(i=noOfMappedObjects; i>0; i--){
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004152:	e045      	b.n	80041e0 <CO_TPDOconfigMap+0xb6>
        int16_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	1d1a      	adds	r2, r3, #4
 800415c:	61fa      	str	r2, [r7, #28]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6858      	ldr	r0, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3344      	adds	r3, #68	; 0x44
 800416a:	f107 010c 	add.w	r1, r7, #12
 800416e:	f107 020b 	add.w	r2, r7, #11
 8004172:	9202      	str	r2, [sp, #8]
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	f107 0313 	add.w	r3, r7, #19
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	460b      	mov	r3, r1
 800417e:	2201      	movs	r2, #1
 8004180:	6979      	ldr	r1, [r7, #20]
 8004182:	f7ff fe81 	bl	8003e88 <CO_PDOfindMap>
 8004186:	6238      	str	r0, [r7, #32]
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
        if(ret){
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <CO_TPDOconfigMap+0x7a>
            length = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 800419c:	211a      	movs	r1, #26
 800419e:	f7fe fd60 	bl	8002c62 <CO_errorReport>
 80041a2:	e021      	b.n	80041e8 <CO_TPDOconfigMap+0xbe>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 80041a4:	7e7b      	ldrb	r3, [r7, #25]
 80041a6:	837b      	strh	r3, [r7, #26]
 80041a8:	e00f      	b.n	80041ca <CO_TPDOconfigMap+0xa0>
            TPDO->mapPointer[j] = pData++;
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	1c53      	adds	r3, r2, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	3306      	adds	r3, #6
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
 80041be:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3301      	adds	r3, #1
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	837b      	strh	r3, [r7, #26]
 80041ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041ce:	7cfa      	ldrb	r2, [r7, #19]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	dbea      	blt.n	80041aa <CO_TPDOconfigMap+0x80>
    for(i=noOfMappedObjects; i>0; i--){
 80041d4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29b      	uxth	r3, r3
 80041de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	dcb5      	bgt.n	8004154 <CO_TPDOconfigMap+0x2a>
        }
#endif

    }

    TPDO->dataLength = length;
 80041e8:	7cfa      	ldrb	r2, [r7, #19]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	769a      	strb	r2, [r3, #26]

    return ret;
 80041ee:	6a3b      	ldr	r3, [r7, #32]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3728      	adds	r7, #40	; 0x28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <CO_ODF_RPDOcom>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	617b      	str	r3, [r7, #20]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	7ddb      	ldrb	r3, [r3, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d029      	beq.n	8004262 <CO_ODF_RPDOcom+0x6a>
        if(ODF_arg->subIndex == 1){
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	7d9b      	ldrb	r3, [r3, #22]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d123      	bne.n	800425e <CO_ODF_RPDOcom+0x66>
            uint32_t value = CO_getUint32(ODF_arg->data);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fd21 	bl	8003c62 <CO_getUint32>
 8004220:	61f8      	str	r0, [r7, #28]

            /* if default COB ID is used, write default value here */
            if(((value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	b29b      	uxth	r3, r3
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	8ad2      	ldrh	r2, [r2, #22]
 800422a:	4293      	cmp	r3, r2
 800422c:	d109      	bne.n	8004242 <CO_ODF_RPDOcom+0x4a>
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	8adb      	ldrh	r3, [r3, #22]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <CO_ODF_RPDOcom+0x4a>
                value += RPDO->nodeId;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	7d1b      	ldrb	r3, [r3, #20]
 800423a:	461a      	mov	r2, r3
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	4413      	add	r3, r2
 8004240:	61fb      	str	r3, [r7, #28]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) value |= 0x80000000L;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	7e5b      	ldrb	r3, [r3, #25]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d103      	bne.n	8004252 <CO_ODF_RPDOcom+0x5a>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004250:	61fb      	str	r3, [r7, #28]

            CO_setUint32(ODF_arg->data, value);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	69f9      	ldr	r1, [r7, #28]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fd10 	bl	8003c7e <CO_setUint32>
        }
        return CO_SDO_AB_NONE;
 800425e:	2300      	movs	r3, #0
 8004260:	e07e      	b.n	8004360 <CO_ODF_RPDOcom+0x168>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	7e1b      	ldrb	r3, [r3, #24]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <CO_ODF_RPDOcom+0x7a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 800426e:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <CO_ODF_RPDOcom+0x170>)
 8004270:	e076      	b.n	8004360 <CO_ODF_RPDOcom+0x168>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f993 3000 	ldrsb.w	r3, [r3]
 800427a:	2b05      	cmp	r3, #5
 800427c:	d107      	bne.n	800428e <CO_ODF_RPDOcom+0x96>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	7e1b      	ldrb	r3, [r3, #24]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <CO_ODF_RPDOcom+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 800428a:	4b38      	ldr	r3, [pc, #224]	; (800436c <CO_ODF_RPDOcom+0x174>)
 800428c:	e068      	b.n	8004360 <CO_ODF_RPDOcom+0x168>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7d9b      	ldrb	r3, [r3, #22]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d13a      	bne.n	800430c <CO_ODF_RPDOcom+0x114>
        uint32_t value = CO_getUint32(ODF_arg->data);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fce1 	bl	8003c62 <CO_getUint32>
 80042a0:	61b8      	str	r0, [r7, #24]

        /* bits 11...29 must be zero */
        if(value & 0x3FFF8000L)
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4b32      	ldr	r3, [pc, #200]	; (8004370 <CO_ODF_RPDOcom+0x178>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <CO_ODF_RPDOcom+0xb8>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 80042ac:	4b31      	ldr	r3, [pc, #196]	; (8004374 <CO_ODF_RPDOcom+0x17c>)
 80042ae:	e057      	b.n	8004360 <CO_ODF_RPDOcom+0x168>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	8ad2      	ldrh	r2, [r2, #22]
 80042b8:	4611      	mov	r1, r2
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	7d12      	ldrb	r2, [r2, #20]
 80042be:	440a      	add	r2, r1
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d10f      	bne.n	80042e4 <CO_ODF_RPDOcom+0xec>
            value &= 0xC0000000L;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80042ca:	61bb      	str	r3, [r7, #24]
            value += RPDO->defaultCOB_ID;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	8adb      	ldrh	r3, [r3, #22]
 80042d0:	461a      	mov	r2, r3
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	4413      	add	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
            CO_setUint32(ODF_arg->data, value);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	69b9      	ldr	r1, [r7, #24]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fccd 	bl	8003c7e <CO_setUint32>
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	7e5b      	ldrb	r3, [r3, #25]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <CO_ODF_RPDOcom+0x10a>
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	4053      	eors	r3, r2
 80042f6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <CO_ODF_RPDOcom+0x10a>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 80042fe:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <CO_ODF_RPDOcom+0x17c>)
 8004300:	e02e      	b.n	8004360 <CO_ODF_RPDOcom+0x168>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, value);
 8004302:	69b9      	ldr	r1, [r7, #24]
 8004304:	6978      	ldr	r0, [r7, #20]
 8004306:	f7ff fd17 	bl	8003d38 <CO_RPDOconfigCom>
 800430a:	e028      	b.n	800435e <CO_ODF_RPDOcom+0x166>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7d9b      	ldrb	r3, [r3, #22]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d124      	bne.n	800435e <CO_ODF_RPDOcom+0x166>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	613b      	str	r3, [r7, #16]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        bool_t synchronousPrev = RPDO->synchronous;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004320:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2bf0      	cmp	r3, #240	; 0xf0
 8004328:	d905      	bls.n	8004336 <CO_ODF_RPDOcom+0x13e>
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2bfd      	cmp	r3, #253	; 0xfd
 8004330:	d801      	bhi.n	8004336 <CO_ODF_RPDOcom+0x13e>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <CO_ODF_RPDOcom+0x17c>)
 8004334:	e014      	b.n	8004360 <CO_ODF_RPDOcom+0x168>

        RPDO->synchronous = (*value <= 240) ? true : false;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2bf0      	cmp	r3, #240	; 0xf0
 800433c:	bf94      	ite	ls
 800433e:	2301      	movls	r3, #1
 8004340:	2300      	movhi	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	429a      	cmp	r2, r3
 8004356:	d002      	beq.n	800435e <CO_ODF_RPDOcom+0x166>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2200      	movs	r2, #0
 800435c:	649a      	str	r2, [r3, #72]	; 0x48
        if(*value <= 253)
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
#endif
    }

    return CO_SDO_AB_NONE;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3720      	adds	r7, #32
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	06010002 	.word	0x06010002
 800436c:	08000022 	.word	0x08000022
 8004370:	3fff8000 	.word	0x3fff8000
 8004374:	06090030 	.word	0x06090030

08004378 <CO_ODF_TPDOcom>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	617b      	str	r3, [r7, #20]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7d9b      	ldrb	r3, [r3, #22]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d101      	bne.n	8004392 <CO_ODF_TPDOcom+0x1a>
 800438e:	4b73      	ldr	r3, [pc, #460]	; (800455c <CO_ODF_TPDOcom+0x1e4>)
 8004390:	e0e0      	b.n	8004554 <CO_ODF_TPDOcom+0x1dc>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	7ddb      	ldrb	r3, [r3, #23]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d029      	beq.n	80043ee <CO_ODF_TPDOcom+0x76>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7d9b      	ldrb	r3, [r3, #22]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d123      	bne.n	80043ea <CO_ODF_TPDOcom+0x72>
            uint32_t value = CO_getUint32(ODF_arg->data);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fc5b 	bl	8003c62 <CO_getUint32>
 80043ac:	61f8      	str	r0, [r7, #28]

            /* if default COB ID is used, write default value here */
            if(((value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	8ad2      	ldrh	r2, [r2, #22]
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d109      	bne.n	80043ce <CO_ODF_TPDOcom+0x56>
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	8adb      	ldrh	r3, [r3, #22]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <CO_ODF_TPDOcom+0x56>
                value += TPDO->nodeId;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	7d1b      	ldrb	r3, [r3, #20]
 80043c6:	461a      	mov	r2, r3
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	61fb      	str	r3, [r7, #28]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) value |= 0x80000000L;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	7e5b      	ldrb	r3, [r3, #25]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <CO_ODF_TPDOcom+0x66>
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043dc:	61fb      	str	r3, [r7, #28]

            CO_setUint32(ODF_arg->data, value);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	69f9      	ldr	r1, [r7, #28]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fc4a 	bl	8003c7e <CO_setUint32>
        }
        return CO_SDO_AB_NONE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e0b2      	b.n	8004554 <CO_ODF_TPDOcom+0x1dc>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	7e1b      	ldrb	r3, [r3, #24]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <CO_ODF_TPDOcom+0x86>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 80043fa:	4b59      	ldr	r3, [pc, #356]	; (8004560 <CO_ODF_TPDOcom+0x1e8>)
 80043fc:	e0aa      	b.n	8004554 <CO_ODF_TPDOcom+0x1dc>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f993 3000 	ldrsb.w	r3, [r3]
 8004406:	2b05      	cmp	r3, #5
 8004408:	d107      	bne.n	800441a <CO_ODF_TPDOcom+0xa2>
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	7e1b      	ldrb	r3, [r3, #24]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <CO_ODF_TPDOcom+0xa2>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8004416:	4b53      	ldr	r3, [pc, #332]	; (8004564 <CO_ODF_TPDOcom+0x1ec>)
 8004418:	e09c      	b.n	8004554 <CO_ODF_TPDOcom+0x1dc>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	7d9b      	ldrb	r3, [r3, #22]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d143      	bne.n	80044aa <CO_ODF_TPDOcom+0x132>
        uint32_t value = CO_getUint32(ODF_arg->data);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fc1b 	bl	8003c62 <CO_getUint32>
 800442c:	61b8      	str	r0, [r7, #24]

        /* bits 11...29 must be zero */
        if(value & 0x3FFF8000L)
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4b4d      	ldr	r3, [pc, #308]	; (8004568 <CO_ODF_TPDOcom+0x1f0>)
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <CO_ODF_TPDOcom+0xc4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004438:	4b4c      	ldr	r3, [pc, #304]	; (800456c <CO_ODF_TPDOcom+0x1f4>)
 800443a:	e08b      	b.n	8004554 <CO_ODF_TPDOcom+0x1dc>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	b29b      	uxth	r3, r3
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	8ad2      	ldrh	r2, [r2, #22]
 8004444:	4611      	mov	r1, r2
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	7d12      	ldrb	r2, [r2, #20]
 800444a:	440a      	add	r2, r1
 800444c:	4293      	cmp	r3, r2
 800444e:	d10f      	bne.n	8004470 <CO_ODF_TPDOcom+0xf8>
            value &= 0xC0000000L;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004456:	61bb      	str	r3, [r7, #24]
            value += TPDO->defaultCOB_ID;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	8adb      	ldrh	r3, [r3, #22]
 800445c:	461a      	mov	r2, r3
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	4413      	add	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]

            CO_setUint32(ODF_arg->data, value);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	69b9      	ldr	r1, [r7, #24]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fc07 	bl	8003c7e <CO_setUint32>
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	7e5b      	ldrb	r3, [r3, #25]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <CO_ODF_TPDOcom+0x116>
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	4053      	eors	r3, r2
 8004482:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <CO_ODF_TPDOcom+0x116>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 800448a:	4b38      	ldr	r3, [pc, #224]	; (800456c <CO_ODF_TPDOcom+0x1f4>)
 800448c:	e062      	b.n	8004554 <CO_ODF_TPDOcom+0x1dc>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, value, TPDO->CANtxBuff->syncFlag);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004492:	7b9b      	ldrb	r3, [r3, #14]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	6978      	ldr	r0, [r7, #20]
 800449c:	f7ff fcac 	bl	8003df8 <CO_TPDOconfigCom>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	22ff      	movs	r2, #255	; 0xff
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044a8:	e053      	b.n	8004552 <CO_ODF_TPDOcom+0x1da>
#endif
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	7d9b      	ldrb	r3, [r3, #22]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d11b      	bne.n	80044ea <CO_ODF_TPDOcom+0x172>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2bf0      	cmp	r3, #240	; 0xf0
 80044be:	d905      	bls.n	80044cc <CO_ODF_TPDOcom+0x154>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2bfd      	cmp	r3, #253	; 0xfd
 80044c6:	d801      	bhi.n	80044cc <CO_ODF_TPDOcom+0x154>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 80044c8:	4b28      	ldr	r3, [pc, #160]	; (800456c <CO_ODF_TPDOcom+0x1f4>)
 80044ca:	e043      	b.n	8004554 <CO_ODF_TPDOcom+0x1dc>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2bf0      	cmp	r3, #240	; 0xf0
 80044d2:	bf94      	ite	ls
 80044d4:	2301      	movls	r3, #1
 80044d6:	2300      	movhi	r3, #0
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044de:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	22ff      	movs	r2, #255	; 0xff
 80044e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044e8:	e033      	b.n	8004552 <CO_ODF_TPDOcom+0x1da>
        /* values from 0...253 are not valid */
        if(*value <= 253)
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
#endif
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	7d9b      	ldrb	r3, [r3, #22]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d109      	bne.n	8004506 <CO_ODF_TPDOcom+0x18e>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	7e5b      	ldrb	r3, [r3, #25]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <CO_ODF_TPDOcom+0x186>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 80044fa:	4b1c      	ldr	r3, [pc, #112]	; (800456c <CO_ODF_TPDOcom+0x1f4>)
 80044fc:	e02a      	b.n	8004554 <CO_ODF_TPDOcom+0x1dc>

        TPDO->inhibitTimer = 0;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2200      	movs	r2, #0
 8004502:	63da      	str	r2, [r3, #60]	; 0x3c
 8004504:	e025      	b.n	8004552 <CO_ODF_TPDOcom+0x1da>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	7d9b      	ldrb	r3, [r3, #22]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d10e      	bne.n	800452c <CO_ODF_TPDOcom+0x1b4>
        uint16_t value = CO_getUint16(ODF_arg->data);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fb96 	bl	8003c44 <CO_getUint16>
 8004518:	4603      	mov	r3, r0
 800451a:	81fb      	strh	r3, [r7, #14]

        TPDO->eventTimer = ((uint32_t) value) * 1000;
 800451c:	89fb      	ldrh	r3, [r7, #14]
 800451e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004522:	fb03 f202 	mul.w	r2, r3, r2
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
 800452a:	e012      	b.n	8004552 <CO_ODF_TPDOcom+0x1da>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	7d9b      	ldrb	r3, [r3, #22]
 8004530:	2b06      	cmp	r3, #6
 8004532:	d10e      	bne.n	8004552 <CO_ODF_TPDOcom+0x1da>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	7e5b      	ldrb	r3, [r3, #25]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <CO_ODF_TPDOcom+0x1ce>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <CO_ODF_TPDOcom+0x1f4>)
 8004544:	e006      	b.n	8004554 <CO_ODF_TPDOcom+0x1dc>

        /* values from 240...255 are not valid */
        if(*value > 240)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2bf0      	cmp	r3, #240	; 0xf0
 800454c:	d901      	bls.n	8004552 <CO_ODF_TPDOcom+0x1da>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <CO_ODF_TPDOcom+0x1f4>)
 8004550:	e000      	b.n	8004554 <CO_ODF_TPDOcom+0x1dc>
    }

    return CO_SDO_AB_NONE;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	06090011 	.word	0x06090011
 8004560:	06010002 	.word	0x06010002
 8004564:	08000022 	.word	0x08000022
 8004568:	3fff8000 	.word	0x3fff8000
 800456c:	06090030 	.word	0x06090030

08004570 <CO_ODF_RPDOmap>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	; 0x30
 8004574:	af04      	add	r7, sp, #16
 8004576:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7ddb      	ldrb	r3, [r3, #23]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00f      	beq.n	80045a6 <CO_ODF_RPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	7d9b      	ldrb	r3, [r3, #22]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <CO_ODF_RPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	7e9b      	ldrb	r3, [r3, #26]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <CO_ODF_RPDOmap+0x32>
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e054      	b.n	8004650 <CO_ODF_RPDOmap+0xe0>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	7e1b      	ldrb	r3, [r3, #24]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <CO_ODF_RPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 80045b2:	4b29      	ldr	r3, [pc, #164]	; (8004658 <CO_ODF_RPDOmap+0xe8>)
 80045b4:	e04c      	b.n	8004650 <CO_ODF_RPDOmap+0xe0>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f993 3000 	ldrsb.w	r3, [r3]
 80045be:	2b05      	cmp	r3, #5
 80045c0:	d107      	bne.n	80045d2 <CO_ODF_RPDOmap+0x62>
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	7e1b      	ldrb	r3, [r3, #24]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <CO_ODF_RPDOmap+0x62>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 80045ce:	4b23      	ldr	r3, [pc, #140]	; (800465c <CO_ODF_RPDOmap+0xec>)
 80045d0:	e03e      	b.n	8004650 <CO_ODF_RPDOmap+0xe0>
    if(RPDO->valid)
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	7e5b      	ldrb	r3, [r3, #25]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <CO_ODF_RPDOmap+0x6e>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <CO_ODF_RPDOmap+0xf0>)
 80045dc:	e038      	b.n	8004650 <CO_ODF_RPDOmap+0xe0>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	7d9b      	ldrb	r3, [r3, #22]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d110      	bne.n	8004608 <CO_ODF_RPDOmap+0x98>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d901      	bls.n	80045f8 <CO_ODF_RPDOmap+0x88>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <CO_ODF_RPDOmap+0xf4>)
 80045f6:	e02b      	b.n	8004650 <CO_ODF_RPDOmap+0xe0>

        /* configure mapping */
        return (CO_SDO_abortCode_t) CO_RPDOconfigMap(RPDO, *value);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4619      	mov	r1, r3
 80045fe:	69f8      	ldr	r0, [r7, #28]
 8004600:	f7ff fd2e 	bl	8004060 <CO_RPDOconfigMap>
 8004604:	4603      	mov	r3, r0
 8004606:	e023      	b.n	8004650 <CO_ODF_RPDOmap+0xe0>
    }

    /* mappedObject */
    else{
        uint32_t value = CO_getUint32(ODF_arg->data);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fb28 	bl	8003c62 <CO_getUint32>
 8004612:	61b8      	str	r0, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	7e9b      	ldrb	r3, [r3, #26]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <CO_ODF_RPDOmap+0xb8>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004624:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <CO_ODF_RPDOmap+0xf0>)
 8004626:	e013      	b.n	8004650 <CO_ODF_RPDOmap+0xe0>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t) CO_PDOfindMap(
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	6858      	ldr	r0, [r3, #4]
 800462c:	f107 020c 	add.w	r2, r7, #12
 8004630:	f107 0309 	add.w	r3, r7, #9
 8004634:	9302      	str	r3, [sp, #8]
 8004636:	f107 030a 	add.w	r3, r7, #10
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	f107 030b 	add.w	r3, r7, #11
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	4613      	mov	r3, r2
 8004644:	2200      	movs	r2, #0
 8004646:	69b9      	ldr	r1, [r7, #24]
 8004648:	f7ff fc1e 	bl	8003e88 <CO_PDOfindMap>
 800464c:	4603      	mov	r3, r0
 800464e:	bf00      	nop
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 8004650:	4618      	mov	r0, r3
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	06010002 	.word	0x06010002
 800465c:	08000022 	.word	0x08000022
 8004660:	06010000 	.word	0x06010000
 8004664:	06040042 	.word	0x06040042

08004668 <CO_ODF_TPDOmap>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
 8004668:	b580      	push	{r7, lr}
 800466a:	b08c      	sub	sp, #48	; 0x30
 800466c:	af04      	add	r7, sp, #16
 800466e:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	7ddb      	ldrb	r3, [r3, #23]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00f      	beq.n	800469e <CO_ODF_TPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	7d9b      	ldrb	r3, [r3, #22]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <CO_ODF_TPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	7e9b      	ldrb	r3, [r3, #26]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d102      	bne.n	800469a <CO_ODF_TPDOmap+0x32>
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 800469a:	2300      	movs	r3, #0
 800469c:	e054      	b.n	8004748 <CO_ODF_TPDOmap+0xe0>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	7e1b      	ldrb	r3, [r3, #24]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <CO_ODF_TPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 80046aa:	4b29      	ldr	r3, [pc, #164]	; (8004750 <CO_ODF_TPDOmap+0xe8>)
 80046ac:	e04c      	b.n	8004748 <CO_ODF_TPDOmap+0xe0>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f993 3000 	ldrsb.w	r3, [r3]
 80046b6:	2b05      	cmp	r3, #5
 80046b8:	d107      	bne.n	80046ca <CO_ODF_TPDOmap+0x62>
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	7e1b      	ldrb	r3, [r3, #24]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <CO_ODF_TPDOmap+0x62>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <CO_ODF_TPDOmap+0xec>)
 80046c8:	e03e      	b.n	8004748 <CO_ODF_TPDOmap+0xe0>
    if(TPDO->valid)
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	7e5b      	ldrb	r3, [r3, #25]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <CO_ODF_TPDOmap+0x6e>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 80046d2:	4b21      	ldr	r3, [pc, #132]	; (8004758 <CO_ODF_TPDOmap+0xf0>)
 80046d4:	e038      	b.n	8004748 <CO_ODF_TPDOmap+0xe0>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	7d9b      	ldrb	r3, [r3, #22]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d110      	bne.n	8004700 <CO_ODF_TPDOmap+0x98>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d901      	bls.n	80046f0 <CO_ODF_TPDOmap+0x88>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <CO_ODF_TPDOmap+0xf4>)
 80046ee:	e02b      	b.n	8004748 <CO_ODF_TPDOmap+0xe0>

        /* configure mapping */
        return (CO_SDO_abortCode_t) CO_TPDOconfigMap(TPDO, *value);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	4619      	mov	r1, r3
 80046f6:	69f8      	ldr	r0, [r7, #28]
 80046f8:	f7ff fd17 	bl	800412a <CO_TPDOconfigMap>
 80046fc:	4603      	mov	r3, r0
 80046fe:	e023      	b.n	8004748 <CO_ODF_TPDOmap+0xe0>
    }

    /* mappedObject */
    else{
        uint32_t value = CO_getUint32(ODF_arg->data);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff faac 	bl	8003c62 <CO_getUint32>
 800470a:	61b8      	str	r0, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	7e9b      	ldrb	r3, [r3, #26]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <CO_ODF_TPDOmap+0xb8>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 800471c:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <CO_ODF_TPDOmap+0xf0>)
 800471e:	e013      	b.n	8004748 <CO_ODF_TPDOmap+0xe0>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t) CO_PDOfindMap(
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	6858      	ldr	r0, [r3, #4]
 8004724:	f107 020c 	add.w	r2, r7, #12
 8004728:	f107 0309 	add.w	r3, r7, #9
 800472c:	9302      	str	r3, [sp, #8]
 800472e:	f107 030a 	add.w	r3, r7, #10
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	f107 030b 	add.w	r3, r7, #11
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	2201      	movs	r2, #1
 800473e:	69b9      	ldr	r1, [r7, #24]
 8004740:	f7ff fba2 	bl	8003e88 <CO_PDOfindMap>
 8004744:	4603      	mov	r3, r0
 8004746:	bf00      	nop
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 8004748:	4618      	mov	r0, r3
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	06010002 	.word	0x06010002
 8004754:	08000022 	.word	0x08000022
 8004758:	06010000 	.word	0x06010000
 800475c:	06040042 	.word	0x06040042

08004760 <CO_RPDO_init>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint16_t                idx_RPDOCommPar,
        uint16_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d011      	beq.n	8004798 <CO_RPDO_init+0x38>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00e      	beq.n	8004798 <CO_RPDO_init+0x38>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <CO_RPDO_init+0x38>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <CO_RPDO_init+0x38>
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <CO_RPDO_init+0x38>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
 800478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <CO_RPDO_init+0x38>
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <CO_RPDO_init+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004798:	f04f 33ff 	mov.w	r3, #4294967295
 800479c:	e04f      	b.n	800483e <CO_RPDO_init+0xde>
    }

    /* Configure object variables */
    RPDO->em = em;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	605a      	str	r2, [r3, #4]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    RPDO->SYNC = (CO_SYNC_t *)SYNC;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
    RPDO->RPDOCommPar = RPDOCommPar;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b4:	609a      	str	r2, [r3, #8]
    RPDO->RPDOMapPar = RPDOMapPar;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ba:	60da      	str	r2, [r3, #12]
    RPDO->operatingState = operatingState;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	611a      	str	r2, [r3, #16]
    RPDO->nodeId = nodeId;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	7f3a      	ldrb	r2, [r7, #28]
 80047c6:	751a      	strb	r2, [r3, #20]
    RPDO->defaultCOB_ID = defaultCOB_ID;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8c3a      	ldrh	r2, [r7, #32]
 80047cc:	82da      	strh	r2, [r3, #22]
    RPDO->restrictionFlags = restrictionFlags;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80047d4:	761a      	strb	r2, [r3, #24]
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_CALLBACK_PRE
    RPDO->pFunctSignalPre = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	65da      	str	r2, [r3, #92]	; 0x5c
    RPDO->functSignalObjectPre = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	661a      	str	r2, [r3, #96]	; 0x60
#endif

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    CO_OD_configure(SDO, idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
 80047e2:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80047e4:	2300      	movs	r3, #0
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	2300      	movs	r3, #0
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a16      	ldr	r2, [pc, #88]	; (8004848 <CO_RPDO_init+0xe8>)
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fd59 	bl	80052a8 <CO_OD_configure>
    CO_OD_configure(SDO, idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
 80047f6:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80047f8:	2300      	movs	r3, #0
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	2300      	movs	r3, #0
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a12      	ldr	r2, [pc, #72]	; (800484c <CO_RPDO_init+0xec>)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fd4f 	bl	80052a8 <CO_OD_configure>

    /* configure communication and mapping */
    CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    RPDO->CANdevRx = CANdevRx;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800481a:	665a      	str	r2, [r3, #100]	; 0x64
    RPDO->CANdevRxIdx = CANdevRxIdx;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	4619      	mov	r1, r3
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff fc18 	bl	8004060 <CO_RPDOconfigMap>
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4619      	mov	r1, r3
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7ff fa7e 	bl	8003d38 <CO_RPDOconfigCom>

    return CO_ERROR_NO;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	080041f9 	.word	0x080041f9
 800484c:	08004571 	.word	0x08004571

08004850 <CO_TPDO_init>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint16_t                idx_TPDOCommPar,
        uint16_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d011      	beq.n	8004888 <CO_TPDO_init+0x38>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00e      	beq.n	8004888 <CO_TPDO_init+0x38>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00b      	beq.n	8004888 <CO_TPDO_init+0x38>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <CO_TPDO_init+0x38>
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <CO_TPDO_init+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
 800487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <CO_TPDO_init+0x38>
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	2b00      	cmp	r3, #0
 8004886:	d102      	bne.n	800488e <CO_TPDO_init+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004888:	f04f 33ff 	mov.w	r3, #4294967295
 800488c:	e070      	b.n	8004970 <CO_TPDO_init+0x120>
    }

    /* Configure object variables */
    TPDO->em = em;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	605a      	str	r2, [r3, #4]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->SYNC = (CO_SYNC_t *)SYNC;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	649a      	str	r2, [r3, #72]	; 0x48
#endif
    TPDO->TPDOCommPar = TPDOCommPar;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a4:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048aa:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	7f3a      	ldrb	r2, [r7, #28]
 80048b6:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8c3a      	ldrh	r2, [r7, #32]
 80048bc:	82da      	strh	r2, [r3, #22]
    TPDO->restrictionFlags = restrictionFlags;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80048c4:	761a      	strb	r2, [r3, #24]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    CO_OD_configure(SDO, idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
 80048c6:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80048c8:	2300      	movs	r3, #0
 80048ca:	9301      	str	r3, [sp, #4]
 80048cc:	2300      	movs	r3, #0
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a29      	ldr	r2, [pc, #164]	; (8004978 <CO_TPDO_init+0x128>)
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fce7 	bl	80052a8 <CO_OD_configure>
    CO_OD_configure(SDO, idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
 80048da:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80048dc:	2300      	movs	r3, #0
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	2300      	movs	r3, #0
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a25      	ldr	r2, [pc, #148]	; (800497c <CO_TPDO_init+0x12c>)
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fcdd 	bl	80052a8 <CO_OD_configure>

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048f2:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80048f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    TPDO->inhibitTimer = 0;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	63da      	str	r2, [r3, #60]	; 0x3c
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	89db      	ldrh	r3, [r3, #14]
 8004906:	461a      	mov	r2, r3
 8004908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800490c:	fb03 f202 	mul.w	r2, r3, r2
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	7a1b      	ldrb	r3, [r3, #8]
 8004918:	2bfd      	cmp	r3, #253	; 0xfd
 800491a:	d902      	bls.n	8004922 <CO_TPDO_init+0xd2>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	76da      	strb	r2, [r3, #27]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	4619      	mov	r1, r3
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f7ff fbfe 	bl	800412a <CO_TPDOconfigMap>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncCounter = 255;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	22ff      	movs	r2, #255	; 0xff
 8004932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	6859      	ldr	r1, [r3, #4]
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	7a1b      	ldrb	r3, [r3, #8]
 800493e:	2bf0      	cmp	r3, #240	; 0xf0
 8004940:	bf94      	ite	ls
 8004942:	2301      	movls	r3, #1
 8004944:	2300      	movhi	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f7ff fa54 	bl	8003df8 <CO_TPDOconfigCom>

    if((TPDOCommPar->transmissionType>240 &&
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	7a1b      	ldrb	r3, [r3, #8]
 8004954:	2bf0      	cmp	r3, #240	; 0xf0
 8004956:	d903      	bls.n	8004960 <CO_TPDO_init+0x110>
         TPDOCommPar->transmissionType<254) ||
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
 800495c:	2bfd      	cmp	r3, #253	; 0xfd
 800495e:	d903      	bls.n	8004968 <CO_TPDO_init+0x118>
         TPDOCommPar->SYNCStartValue>240){
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	7c1b      	ldrb	r3, [r3, #16]
         TPDOCommPar->transmissionType<254) ||
 8004964:	2bf0      	cmp	r3, #240	; 0xf0
 8004966:	d902      	bls.n	800496e <CO_TPDO_init+0x11e>
            TPDO->valid = false;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	765a      	strb	r2, [r3, #25]
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, 0);
    if(TPDOCommPar->transmissionType<254)
        TPDO->valid = false;
#endif

    return CO_ERROR_NO;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	08004379 	.word	0x08004379
 800497c:	08004669 	.word	0x08004669

08004980 <CO_TPDOsend>:

    return 0;
}

/******************************************************************************/
int16_t CO_TPDOsend(CO_TPDO_t *TPDO){
 8004980:	b580      	push	{r7, lr}
 8004982:	b094      	sub	sp, #80	; 0x50
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
    int16_t i;
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_CALLS_EXTENSION
    if(TPDO->SDO->ODExtensions){
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d07c      	beq.n	8004a8e <CO_TPDOsend+0x10e>
        /* for each mapped OD, check mapping to see if an OD extension is available, and call it if it is */
        const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	3304      	adds	r3, #4
 800499a:	643b      	str	r3, [r7, #64]	; 0x40
        CO_SDO_t *pSDO = TPDO->SDO;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(i=TPDO->TPDOMapPar->numberOfMappedObjects; i>0; i--){
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80049ac:	e06b      	b.n	8004a86 <CO_TPDOsend+0x106>
            uint32_t map = *(pMap++);
 80049ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b0:	1d1a      	adds	r2, r3, #4
 80049b2:	643a      	str	r2, [r7, #64]	; 0x40
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	63bb      	str	r3, [r7, #56]	; 0x38
            uint16_t index = (uint16_t)(map>>16);
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	0c1b      	lsrs	r3, r3, #16
 80049bc:	86fb      	strh	r3, [r7, #54]	; 0x36
            uint8_t subIndex = (uint8_t)(map>>8);
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	0a1b      	lsrs	r3, r3, #8
 80049c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            uint16_t entryNo = CO_OD_find(pSDO, index);
 80049c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049c8:	4619      	mov	r1, r3
 80049ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049cc:	f000 fcc4 	bl	8005358 <CO_OD_find>
 80049d0:	4603      	mov	r3, r0
 80049d2:	867b      	strh	r3, [r7, #50]	; 0x32
            if ( entryNo == 0xFFFF ) continue;
 80049d4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80049d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049da:	4293      	cmp	r3, r2
 80049dc:	d049      	beq.n	8004a72 <CO_TPDOsend+0xf2>
            CO_OD_extension_t *ext = &pSDO->ODExtensions[entryNo];
 80049de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e0:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 80049e4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
            if( ext->pODFunc == NULL) continue;
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d03d      	beq.n	8004a76 <CO_TPDOsend+0xf6>
            CO_ODF_arg_t ODF_arg;
            memset((void*)&ODF_arg, 0, sizeof(CO_ODF_arg_t));
 80049fa:	f107 0308 	add.w	r3, r7, #8
 80049fe:	2224      	movs	r2, #36	; 0x24
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f012 fd74 	bl	80174f0 <memset>
            ODF_arg.reading = true;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	77fb      	strb	r3, [r7, #31]
            ODF_arg.index = index;
 8004a0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a0e:	83bb      	strh	r3, [r7, #28]
            ODF_arg.subIndex = subIndex;
 8004a10:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a14:	77bb      	strb	r3, [r7, #30]
            ODF_arg.object = ext->object;
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	60bb      	str	r3, [r7, #8]
            ODF_arg.attribute = CO_OD_getAttribute(pSDO, entryNo, subIndex);
 8004a1c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004a20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a22:	4619      	mov	r1, r3
 8004a24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a26:	f000 fd40 	bl	80054aa <CO_OD_getAttribute>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	82fb      	strh	r3, [r7, #22]
            ODF_arg.pFlags = CO_OD_getFlagsPointer(pSDO, entryNo, subIndex);
 8004a2e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004a32:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a34:	4619      	mov	r1, r3
 8004a36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a38:	f000 fdd8 	bl	80055ec <CO_OD_getFlagsPointer>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	61bb      	str	r3, [r7, #24]
            ODF_arg.data = CO_OD_getDataPointer(pSDO, entryNo, subIndex); //https://github.com/CANopenNode/CANopenNode/issues/100
 8004a40:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004a44:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a46:	4619      	mov	r1, r3
 8004a48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a4a:	f000 fd82 	bl	8005552 <CO_OD_getDataPointer>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	60fb      	str	r3, [r7, #12]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
 8004a52:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004a56:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a5c:	f000 fcd4 	bl	8005408 <CO_OD_getLength>
 8004a60:	4603      	mov	r3, r0
 8004a62:	82bb      	strh	r3, [r7, #20]
            ext->pODFunc(&ODF_arg);
 8004a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f107 0208 	add.w	r2, r7, #8
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4798      	blx	r3
 8004a70:	e002      	b.n	8004a78 <CO_TPDOsend+0xf8>
            if ( entryNo == 0xFFFF ) continue;
 8004a72:	bf00      	nop
 8004a74:	e000      	b.n	8004a78 <CO_TPDOsend+0xf8>
            if( ext->pODFunc == NULL) continue;
 8004a76:	bf00      	nop
        for(i=TPDO->TPDOMapPar->numberOfMappedObjects; i>0; i--){
 8004a78:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004a86:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	dc8f      	bgt.n	80049ae <CO_TPDOsend+0x2e>
        }
    }
#endif
    i = TPDO->dataLength;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	7e9b      	ldrb	r3, [r3, #26]
 8004a92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	3305      	adds	r3, #5
 8004a9c:	64bb      	str	r3, [r7, #72]	; 0x48
    ppODdataByte = &TPDO->mapPointer[0];
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	331c      	adds	r3, #28
 8004aa2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
 8004aa4:	e00f      	b.n	8004ac6 <CO_TPDOsend+0x146>
        *(pPDOdataByte++) = **(ppODdataByte++);
 8004aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa8:	1d1a      	adds	r2, r3, #4
 8004aaa:	647a      	str	r2, [r7, #68]	; 0x44
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab0:	1c59      	adds	r1, r3, #1
 8004ab2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ab4:	7812      	ldrb	r2, [r2, #0]
 8004ab6:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
 8004ab8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004ac6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	dceb      	bgt.n	8004aa6 <CO_TPDOsend+0x126>
    }

    TPDO->sendRequest = 0;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	76da      	strb	r2, [r3, #27]

    return CO_CANsend(TPDO->CANdevTx, TPDO->CANtxBuff);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f004 fcfa 	bl	80094d8 <CO_CANsend>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	b21b      	sxth	r3, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3750      	adds	r7, #80	; 0x50
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <CO_RPDO_process>:

/******************************************************************************/
void CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b096      	sub	sp, #88	; 0x58
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
    bool_t process_rpdo = true;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    if(RPDO->synchronous && !syncWas)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <CO_RPDO_process+0x28>
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <CO_RPDO_process+0x28>
        process_rpdo = false;
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7e5b      	ldrb	r3, [r3, #25]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <CO_RPDO_process+0x3c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f993 3000 	ldrsb.w	r3, [r3]
 8004b28:	2b05      	cmp	r3, #5
 8004b2a:	d006      	beq.n	8004b3a <CO_RPDO_process+0x4a>
    {
        CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	645a      	str	r2, [r3, #68]	; 0x44
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	649a      	str	r2, [r3, #72]	; 0x48
                ext->pODFunc(&ODF_arg);
            }
        }
#endif
    }
}
 8004b38:	e0dc      	b.n	8004cf4 <CO_RPDO_process+0x204>
    else if(process_rpdo)
 8004b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80d8 	beq.w	8004cf4 <CO_RPDO_process+0x204>
        bool_t update = false;
 8004b44:	2300      	movs	r3, #0
 8004b46:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        uint8_t bufNo = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        if(RPDO->SYNC && RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d03c      	beq.n	8004bd2 <CO_RPDO_process+0xe2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d037      	beq.n	8004bd2 <CO_RPDO_process+0xe2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	7f1b      	ldrb	r3, [r3, #28]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d132      	bne.n	8004bd2 <CO_RPDO_process+0xe2>
            bufNo = 1;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        while(CO_FLAG_READ(RPDO->CANrxNew[bufNo])){
 8004b72:	e02e      	b.n	8004bd2 <CO_RPDO_process+0xe2>
            i = RPDO->dataLength;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	7e9b      	ldrb	r3, [r3, #26]
 8004b78:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
 8004b7c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004b80:	3309      	adds	r3, #9
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	4413      	add	r3, r2
 8004b88:	3304      	adds	r3, #4
 8004b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
            ppODdataByte = &RPDO->mapPointer[0];
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	331c      	adds	r3, #28
 8004b90:	64bb      	str	r3, [r7, #72]	; 0x48
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8004b92:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	3310      	adds	r3, #16
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	605a      	str	r2, [r3, #4]
            for(; i>0; i--) {
 8004ba2:	e00f      	b.n	8004bc4 <CO_RPDO_process+0xd4>
                **(ppODdataByte++) = *(pPDOdataByte++);
 8004ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bac:	1d11      	adds	r1, r2, #4
 8004bae:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
 8004bb6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004bc4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	dceb      	bgt.n	8004ba4 <CO_RPDO_process+0xb4>
            update = true;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        while(CO_FLAG_READ(RPDO->CANrxNew[bufNo])){
 8004bd2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	3310      	adds	r3, #16
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1c7      	bne.n	8004b74 <CO_RPDO_process+0x84>
        if(update && RPDO->SDO->ODExtensions){
 8004be4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8083 	beq.w	8004cf4 <CO_RPDO_process+0x204>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d07c      	beq.n	8004cf4 <CO_RPDO_process+0x204>
            const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	643b      	str	r3, [r7, #64]	; 0x40
            CO_SDO_t *pSDO = RPDO->SDO;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	63fb      	str	r3, [r7, #60]	; 0x3c
            for(i=RPDO->RPDOMapPar->numberOfMappedObjects; i>0; i--){
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c12:	e06b      	b.n	8004cec <CO_RPDO_process+0x1fc>
                uint32_t map = *(pMap++);
 8004c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c16:	1d1a      	adds	r2, r3, #4
 8004c18:	643a      	str	r2, [r7, #64]	; 0x40
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38
                uint16_t index = (uint16_t)(map>>16);
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	86fb      	strh	r3, [r7, #54]	; 0x36
                uint8_t subIndex = (uint8_t)(map>>8);
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                uint16_t entryNo = CO_OD_find(pSDO, index);
 8004c2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c32:	f000 fb91 	bl	8005358 <CO_OD_find>
 8004c36:	4603      	mov	r3, r0
 8004c38:	867b      	strh	r3, [r7, #50]	; 0x32
                if ( entryNo == 0xFFFF ) continue;
 8004c3a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d049      	beq.n	8004cd8 <CO_RPDO_process+0x1e8>
                CO_OD_extension_t *ext = &pSDO->ODExtensions[entryNo];
 8004c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c46:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8004c4a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
                if( ext->pODFunc == NULL) continue;
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d03d      	beq.n	8004cdc <CO_RPDO_process+0x1ec>
                memset((void*)&ODF_arg, 0, sizeof(CO_ODF_arg_t));
 8004c60:	f107 0308 	add.w	r3, r7, #8
 8004c64:	2224      	movs	r2, #36	; 0x24
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f012 fc41 	bl	80174f0 <memset>
                ODF_arg.reading = false;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	77fb      	strb	r3, [r7, #31]
                ODF_arg.index = index;
 8004c72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c74:	83bb      	strh	r3, [r7, #28]
                ODF_arg.subIndex = subIndex;
 8004c76:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004c7a:	77bb      	strb	r3, [r7, #30]
                ODF_arg.object = ext->object;
 8004c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	60bb      	str	r3, [r7, #8]
                ODF_arg.attribute = CO_OD_getAttribute(pSDO, entryNo, subIndex);
 8004c82:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004c86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c8c:	f000 fc0d 	bl	80054aa <CO_OD_getAttribute>
 8004c90:	4603      	mov	r3, r0
 8004c92:	82fb      	strh	r3, [r7, #22]
                ODF_arg.pFlags = CO_OD_getFlagsPointer(pSDO, entryNo, subIndex);
 8004c94:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004c98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c9e:	f000 fca5 	bl	80055ec <CO_OD_getFlagsPointer>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	61bb      	str	r3, [r7, #24]
                ODF_arg.data = CO_OD_getDataPointer(pSDO, entryNo, subIndex); //https://github.com/CANopenNode/CANopenNode/issues/100
 8004ca6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004caa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004cac:	4619      	mov	r1, r3
 8004cae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004cb0:	f000 fc4f 	bl	8005552 <CO_OD_getDataPointer>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	60fb      	str	r3, [r7, #12]
                ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
 8004cb8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004cbc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004cc2:	f000 fba1 	bl	8005408 <CO_OD_getLength>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	82bb      	strh	r3, [r7, #20]
                ext->pODFunc(&ODF_arg);
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f107 0208 	add.w	r2, r7, #8
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4798      	blx	r3
 8004cd6:	e002      	b.n	8004cde <CO_RPDO_process+0x1ee>
                if ( entryNo == 0xFFFF ) continue;
 8004cd8:	bf00      	nop
 8004cda:	e000      	b.n	8004cde <CO_RPDO_process+0x1ee>
                if( ext->pODFunc == NULL) continue;
 8004cdc:	bf00      	nop
            for(i=RPDO->RPDOMapPar->numberOfMappedObjects; i>0; i--){
 8004cde:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004cec:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	dc8f      	bgt.n	8004c14 <CO_RPDO_process+0x124>
}
 8004cf4:	bf00      	nop
 8004cf6:	3758      	adds	r7, #88	; 0x58
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <CO_TPDO_process>:
void CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        bool_t                  syncWas,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	72fb      	strb	r3, [r7, #11]
    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d204      	bcs.n	8004d20 <CO_TPDO_process+0x24>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	e000      	b.n	8004d22 <CO_TPDO_process+0x26>
 8004d20:	2300      	movs	r3, #0
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	63d3      	str	r3, [r2, #60]	; 0x3c
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d204      	bcs.n	8004d3a <CO_TPDO_process+0x3e>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	e000      	b.n	8004d3c <CO_TPDO_process+0x40>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	6413      	str	r3, [r2, #64]	; 0x40

    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	7e5b      	ldrb	r3, [r3, #25]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80b5 	beq.w	8004eb4 <CO_TPDO_process+0x1b8>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8004d52:	2b05      	cmp	r3, #5
 8004d54:	f040 80ae 	bne.w	8004eb4 <CO_TPDO_process+0x1b8>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	7a1b      	ldrb	r3, [r3, #8]
 8004d5e:	2bfc      	cmp	r3, #252	; 0xfc
 8004d60:	d94c      	bls.n	8004dfc <CO_TPDO_process+0x100>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d125      	bne.n	8004db6 <CO_TPDO_process+0xba>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	7edb      	ldrb	r3, [r3, #27]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d108      	bne.n	8004d84 <CO_TPDO_process+0x88>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	89db      	ldrh	r3, [r3, #14]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01c      	beq.n	8004db6 <CO_TPDO_process+0xba>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d118      	bne.n	8004db6 <CO_TPDO_process+0xba>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff fdfb 	bl	8004980 <CO_TPDOsend>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d112      	bne.n	8004db6 <CO_TPDO_process+0xba>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	895b      	ldrh	r3, [r3, #10]
 8004d96:	461a      	mov	r2, r3
 8004d98:	2364      	movs	r3, #100	; 0x64
 8004d9a:	fb03 f202 	mul.w	r2, r3, r2
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	63da      	str	r2, [r3, #60]	; 0x3c
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	89db      	ldrh	r3, [r3, #14]
 8004da8:	461a      	mov	r2, r3
 8004daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dae:	fb03 f202 	mul.w	r2, r3, r2
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
                }
            }
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_TIMERNEXT
            if(timerNext_us != NULL){
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8088 	beq.w	8004ece <CO_TPDO_process+0x1d2>
                if(TPDO->sendRequest && *timerNext_us > TPDO->inhibitTimer){
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	7edb      	ldrb	r3, [r3, #27]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <CO_TPDO_process+0xe0>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d904      	bls.n	8004ddc <CO_TPDO_process+0xe0>
                    *timerNext_us = TPDO->inhibitTimer; /* Schedule for just beyond inhibit window */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	601a      	str	r2, [r3, #0]
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004dda:	e078      	b.n	8004ece <CO_TPDO_process+0x1d2>
                }else if(TPDO->TPDOCommPar->eventTimer && *timerNext_us > TPDO->eventTimer){
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	89db      	ldrh	r3, [r3, #14]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d073      	beq.n	8004ece <CO_TPDO_process+0x1d2>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d96d      	bls.n	8004ece <CO_TPDO_process+0x1d2>
                    *timerNext_us = TPDO->eventTimer; /* Schedule for next maximum event time */
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	601a      	str	r2, [r3, #0]
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004dfa:	e068      	b.n	8004ece <CO_TPDO_process+0x1d2>
#endif
        }

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        /* Synchronous PDOs */
        else if(TPDO->SYNC && syncWas){
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d064      	beq.n	8004ece <CO_TPDO_process+0x1d2>
 8004e04:	7afb      	ldrb	r3, [r7, #11]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d061      	beq.n	8004ece <CO_TPDO_process+0x1d2>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	7a1b      	ldrb	r3, [r3, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d107      	bne.n	8004e24 <CO_TPDO_process+0x128>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	7edb      	ldrb	r3, [r3, #27]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d058      	beq.n	8004ece <CO_TPDO_process+0x1d2>
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f7ff fdaf 	bl	8004980 <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004e22:	e054      	b.n	8004ece <CO_TPDO_process+0x1d2>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e2a:	2bff      	cmp	r3, #255	; 0xff
 8004e2c:	d114      	bne.n	8004e58 <CO_TPDO_process+0x15c>
                    if(TPDO->SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	7d1b      	ldrb	r3, [r3, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d009      	beq.n	8004e4c <CO_TPDO_process+0x150>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	7c1b      	ldrb	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <CO_TPDO_process+0x150>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	22fe      	movs	r2, #254	; 0xfe
 8004e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e4a:	e005      	b.n	8004e58 <CO_TPDO_process+0x15c>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	7a1a      	ldrb	r2, [r3, #8]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e5e:	2bfe      	cmp	r3, #254	; 0xfe
 8004e60:	d111      	bne.n	8004e86 <CO_TPDO_process+0x18a>
                    if(TPDO->SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e66:	7f5a      	ldrb	r2, [r3, #29]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	7c1b      	ldrb	r3, [r3, #16]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d12d      	bne.n	8004ece <CO_TPDO_process+0x1d2>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	7a1a      	ldrb	r2, [r3, #8]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                        CO_TPDOsend(TPDO);
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff fd7e 	bl	8004980 <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004e84:	e023      	b.n	8004ece <CO_TPDO_process+0x1d2>
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d116      	bne.n	8004ece <CO_TPDO_process+0x1d2>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	7a1a      	ldrb	r2, [r3, #8]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                    CO_TPDOsend(TPDO);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff fd67 	bl	8004980 <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004eb2:	e00c      	b.n	8004ece <CO_TPDO_process+0x1d2>
#endif

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	7a1b      	ldrb	r3, [r3, #8]
 8004eba:	2bfd      	cmp	r3, #253	; 0xfd
 8004ebc:	d903      	bls.n	8004ec6 <CO_TPDO_process+0x1ca>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	76da      	strb	r2, [r3, #27]
        else                                         TPDO->sendRequest = 0;
    }
}
 8004ec4:	e004      	b.n	8004ed0 <CO_TPDO_process+0x1d4>
        else                                         TPDO->sendRequest = 0;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	76da      	strb	r2, [r3, #27]
}
 8004ecc:	e000      	b.n	8004ed0 <CO_TPDO_process+0x1d4>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004ece:	bf00      	nop
}
 8004ed0:	bf00      	nop
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8004ee4:	60fb      	str	r3, [r7, #12]
    return value;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <CO_setUint32>:
static inline void CO_setUint32(uint8_t data[], const uint32_t value){
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
 8004efe:	683a      	ldr	r2, [r7, #0]
    memcpy(data, &value, sizeof(value));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <CO_SDO_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg);
static void CO_SDO_receive(void *object, void *msg){
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f20:	75bb      	strb	r3, [r7, #22]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	3321      	adds	r3, #33	; 0x21
 8004f26:	613b      	str	r3, [r7, #16]

    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((DLC == 8U) && (!CO_FLAG_READ(SDO->CANrxNew))){
 8004f2c:	7dbb      	ldrb	r3, [r7, #22]
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	f040 80b9 	bne.w	80050a6 <CO_SDO_receive+0x196>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 80b3 	bne.w	80050a6 <CO_SDO_receive+0x196>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8004f46:	2ba5      	cmp	r3, #165	; 0xa5
 8004f48:	d024      	beq.n	8004f94 <CO_SDO_receive+0x84>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = data[0];
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	781a      	ldrb	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = data[1];
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	785a      	ldrb	r2, [r3, #1]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = data[2];
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	789a      	ldrb	r2, [r3, #2]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = data[3];
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	78da      	ldrb	r2, [r3, #3]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = data[4];
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	791a      	ldrb	r2, [r3, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = data[5];
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	795a      	ldrb	r2, [r3, #5]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = data[6];
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	799a      	ldrb	r2, [r3, #6]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = data[7];
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	79da      	ldrb	r2, [r3, #7]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	71da      	strb	r2, [r3, #7]

            CO_FLAG_SET(SDO->CANrxNew);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
 8004f92:	e076      	b.n	8005082 <CO_SDO_receive+0x172>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = data[0];
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	781a      	ldrb	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa4:	72fb      	strb	r3, [r7, #11]
            SDO->timeoutTimer = 0;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
            /* clear timeout in sub-block transfer indication if set before */
            if (SDO->timeoutSubblockDownolad) {
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <CO_SDO_receive+0xb0>
                SDO->timeoutSubblockDownolad = false;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
            }

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
 8004fc0:	7afa      	ldrb	r2, [r7, #11]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8004fc8:	3301      	adds	r3, #1
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d146      	bne.n	800505c <CO_SDO_receive+0x14c>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a

                /* copy data */
                for(i=1; i<8; i++) {
 8004fde:	2301      	movs	r3, #1
 8004fe0:	75fb      	strb	r3, [r7, #23]
 8004fe2:	e022      	b.n	800502a <CO_SDO_receive+0x11a>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	441a      	add	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8004ff6:	1c58      	adds	r0, r3, #1
 8004ff8:	b284      	uxth	r4, r0
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f8a0 4720 	strh.w	r4, [r0, #1824]	; 0x720
 8005000:	440b      	add	r3, r1
 8005002:	7812      	ldrb	r2, [r2, #0]
 8005004:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_CONFIG_SDO_BUFFER_SIZE) {
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 800500c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005010:	d308      	bcc.n	8005024 <CO_SDO_receive+0x114>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	22a6      	movs	r2, #166	; 0xa6
 8005016:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                        CO_FLAG_SET(SDO->CANrxNew);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
                        break;
 8005022:	e005      	b.n	8005030 <CO_SDO_receive+0x120>
                for(i=1; i<8; i++) {
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	3301      	adds	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	2b07      	cmp	r3, #7
 800502e:	d9d9      	bls.n	8004fe4 <CO_SDO_receive+0xd4>
                    }
                }

                /* break reception if last segment, block ends or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	b25b      	sxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	db07      	blt.n	800504a <CO_SDO_receive+0x13a>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 274a 	ldrb.w	r2, [r3, #1866]	; 0x74a
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 8005046:	429a      	cmp	r2, r3
 8005048:	d31b      	bcc.n	8005082 <CO_SDO_receive+0x172>
                	SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	22a6      	movs	r2, #166	; 0xa6
 800504e:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                    CO_FLAG_SET(SDO->CANrxNew);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
 800505a:	e012      	b.n	8005082 <CO_SDO_receive+0x172>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8005062:	7afa      	ldrb	r2, [r7, #11]
 8005064:	429a      	cmp	r2, r3
 8005066:	d00c      	beq.n	8005082 <CO_SDO_receive+0x172>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <CO_SDO_receive+0x172>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is wrong, send response without resetting sequence */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP_2;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	22a7      	movs	r2, #167	; 0xa7
 8005076:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                CO_FLAG_SET(SDO->CANrxNew);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            }
        }

#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_CALLBACK_PRE
        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(CO_FLAG_READ(SDO->CANrxNew) && SDO->pFunctSignalPre != NULL) {
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00c      	beq.n	80050a6 <CO_SDO_receive+0x196>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8005092:	2b00      	cmp	r3, #0
 8005094:	d007      	beq.n	80050a6 <CO_SDO_receive+0x196>
            SDO->pFunctSignalPre(SDO->functSignalObjectPre);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f8d2 2764 	ldr.w	r2, [r2, #1892]	; 0x764
 80050a2:	4610      	mov	r0, r2
 80050a4:	4798      	blx	r3
        }
#endif
    }
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd90      	pop	{r4, r7, pc}

080050ae <CO_ODF_1200>:
 * from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff ff07 	bl	8004ed8 <CO_getUint32>
 80050ca:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	7ddb      	ldrb	r3, [r3, #23]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00e      	beq.n	80050f2 <CO_ODF_1200+0x44>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	7d9b      	ldrb	r3, [r3, #22]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <CO_ODF_1200+0x44>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	440b      	add	r3, r1
 80050ea:	4619      	mov	r1, r3
 80050ec:	4610      	mov	r0, r2
 80050ee:	f7ff ff01 	bl	8004ef4 <CO_setUint32>
    }

    return ret;
 80050f2:	697b      	ldr	r3, [r7, #20]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <CO_SDO_init>:
        uint16_t                SDOtimeoutTime_ms,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08a      	sub	sp, #40	; 0x28
 8005100:	af04      	add	r7, sp, #16
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	807b      	strh	r3, [r7, #2]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800510a:	2300      	movs	r3, #0
 800510c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SDO==NULL || CANdevRx==NULL || CANdevTx==NULL){
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <CO_SDO_init+0x24>
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <CO_SDO_init+0x24>
 800511a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d102      	bne.n	8005126 <CO_SDO_init+0x2a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005120:	f04f 33ff 	mov.w	r3, #4294967295
 8005124:	e0b8      	b.n	8005298 <CO_SDO_init+0x19c>
    }

    /* configure own object dictionary */
    if(parentSDO == NULL){
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d13b      	bne.n	80051a4 <CO_SDO_init+0xa8>
        uint16_t i;

        SDO->ownOD = true;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
        SDO->OD = OD;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005138:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        SDO->ODSize = ODSize;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005140:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718
        SDO->ODExtensions = ODExtensions;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005148:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
 800514c:	2300      	movs	r3, #0
 800514e:	82bb      	strh	r3, [r7, #20]
 8005150:	e023      	b.n	800519a <CO_SDO_init+0x9e>
            SDO->ODExtensions[i].pODFunc = NULL;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8005158:	8aba      	ldrh	r2, [r7, #20]
 800515a:	4613      	mov	r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 800516e:	8aba      	ldrh	r2, [r7, #20]
 8005170:	4613      	mov	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	2200      	movs	r2, #0
 800517c:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8005184:	8aba      	ldrh	r2, [r7, #20]
 8005186:	4613      	mov	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	2200      	movs	r2, #0
 8005192:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
 8005194:	8abb      	ldrh	r3, [r7, #20]
 8005196:	3301      	adds	r3, #1
 8005198:	82bb      	strh	r3, [r7, #20]
 800519a:	8aba      	ldrh	r2, [r7, #20]
 800519c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800519e:	429a      	cmp	r2, r3
 80051a0:	d3d7      	bcc.n	8005152 <CO_SDO_init+0x56>
 80051a2:	e015      	b.n	80051d0 <CO_SDO_init+0xd4>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2710 	strb.w	r2, [r3, #1808]	; 0x710
        SDO->OD = parentSDO->OD;
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	f8d3 2714 	ldr.w	r2, [r3, #1812]	; 0x714
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        SDO->ODSize = parentSDO->ODSize;
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	f8b3 2718 	ldrh.w	r2, [r3, #1816]	; 0x718
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8a3 2718 	strh.w	r2, [r3, #1816]	; 0x718
        SDO->ODExtensions = parentSDO->ODExtensions;
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80051d6:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 80051da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051e0:	fb03 f202 	mul.w	r2, r3, r2
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
    SDO->state = CO_SDO_ST_IDLE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
    CO_FLAG_CLEAR(SDO->CANrxNew);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_CALLBACK_PRE
    SDO->pFunctSignalPre = NULL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
    SDO->functSignalObjectPre = NULL;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
#endif

    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
 800520a:	887b      	ldrh	r3, [r7, #2]
 800520c:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8005210:	d10b      	bne.n	800522a <CO_SDO_init+0x12e>
        CO_OD_configure(SDO, ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8005218:	8879      	ldrh	r1, [r7, #2]
 800521a:	2200      	movs	r2, #0
 800521c:	9201      	str	r2, [sp, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	9200      	str	r2, [sp, #0]
 8005222:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <CO_SDO_init+0x1a4>)
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f83f 	bl	80052a8 <CO_OD_configure>
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	db02      	blt.n	8005236 <CO_SDO_init+0x13a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	da03      	bge.n	800523e <CO_SDO_init+0x142>
        // SDO is invalid
        COB_IDClientToServer = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]
        COB_IDServerToClient = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]
    }
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	b29a      	uxth	r2, r3
 8005242:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8005244:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <CO_SDO_init+0x1a8>)
 8005246:	9302      	str	r3, [sp, #8]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	2300      	movs	r3, #0
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005254:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005256:	f004 f8a9 	bl	80093ac <CO_CANrxBufferInit>
 800525a:	4603      	mov	r3, r0
 800525c:	75fb      	strb	r3, [r7, #23]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */

    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005262:	f8c3 2768 	str.w	r2, [r3, #1896]	; 0x768
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	b29a      	uxth	r2, r3
 800526a:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800526e:	2300      	movs	r3, #0
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	2308      	movs	r3, #8
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	2300      	movs	r3, #0
 8005278:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800527a:	f004 f8ed 	bl	8009458 <CO_CANtxBufferInit>
 800527e:	4602      	mov	r2, r0
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f8c3 276c 	str.w	r2, [r3, #1900]	; 0x76c
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <CO_SDO_init+0x198>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005290:	23ff      	movs	r3, #255	; 0xff
 8005292:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8005294:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	080050af 	.word	0x080050af
 80052a4:	08004f11 	.word	0x08004f11

080052a8 <CO_OD_configure>:
        uint16_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	607a      	str	r2, [r7, #4]
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	460b      	mov	r3, r1
 80052b6:	817b      	strh	r3, [r7, #10]
    uint16_t entryNo;

    entryNo = CO_OD_find(SDO, index);
 80052b8:	897b      	ldrh	r3, [r7, #10]
 80052ba:	4619      	mov	r1, r3
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f84b 	bl	8005358 <CO_OD_find>
 80052c2:	4603      	mov	r3, r0
 80052c4:	83bb      	strh	r3, [r7, #28]
    if(entryNo < 0xFFFFU){
 80052c6:	8bbb      	ldrh	r3, [r7, #28]
 80052c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d03f      	beq.n	8005350 <CO_OD_configure+0xa8>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 80052d6:	8bba      	ldrh	r2, [r7, #28]
 80052d8:	4613      	mov	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	61bb      	str	r3, [r7, #24]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 80052ea:	8bba      	ldrh	r2, [r7, #28]
 80052ec:	4613      	mov	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	789b      	ldrb	r3, [r3, #2]
 80052f8:	75fb      	strb	r3, [r7, #23]

        ext->pODFunc = pODFunc;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
        ext->object = object;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01d      	beq.n	8005348 <CO_OD_configure+0xa0>
 800530c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d019      	beq.n	8005348 <CO_OD_configure+0xa0>
 8005314:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	429a      	cmp	r2, r3
 800531c:	d114      	bne.n	8005348 <CO_OD_configure+0xa0>
            uint16_t i;
            ext->flags = flags;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005322:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
 8005324:	2300      	movs	r3, #0
 8005326:	83fb      	strh	r3, [r7, #30]
 8005328:	e008      	b.n	800533c <CO_OD_configure+0x94>
                ext->flags[i] = 0U;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	8bfb      	ldrh	r3, [r7, #30]
 8005330:	4413      	add	r3, r2
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
 8005336:	8bfb      	ldrh	r3, [r7, #30]
 8005338:	3301      	adds	r3, #1
 800533a:	83fb      	strh	r3, [r7, #30]
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	b29b      	uxth	r3, r3
 8005340:	8bfa      	ldrh	r2, [r7, #30]
 8005342:	429a      	cmp	r2, r3
 8005344:	d9f1      	bls.n	800532a <CO_OD_configure+0x82>
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 8005346:	e003      	b.n	8005350 <CO_OD_configure+0xa8>
            }
        }
        else{
            ext->flags = NULL;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2200      	movs	r2, #0
 800534c:	609a      	str	r2, [r3, #8]
        }
    }
}
 800534e:	e7ff      	b.n	8005350 <CO_OD_configure+0xa8>
 8005350:	bf00      	nop
 8005352:	3720      	adds	r7, #32
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <CO_OD_find>:


/******************************************************************************/
uint16_t CO_OD_find(CO_SDO_t *SDO, uint16_t index){
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	807b      	strh	r3, [r7, #2]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint16_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	82fb      	strh	r3, [r7, #22]
    max = SDO->ODSize - 1U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3718 	ldrh.w	r3, [r3, #1816]	; 0x718
 800536e:	3b01      	subs	r3, #1
 8005370:	82bb      	strh	r3, [r7, #20]
    while(min < max){
 8005372:	e028      	b.n	80053c6 <CO_OD_find+0x6e>
        cur = (min + max) / 2;
 8005374:	8afa      	ldrh	r2, [r7, #22]
 8005376:	8abb      	ldrh	r3, [r7, #20]
 8005378:	4413      	add	r3, r2
 800537a:	0fda      	lsrs	r2, r3, #31
 800537c:	4413      	add	r3, r2
 800537e:	105b      	asrs	r3, r3, #1
 8005380:	81fb      	strh	r3, [r7, #14]
        object = &SDO->OD[cur];
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 8005388:	89fa      	ldrh	r2, [r7, #14]
 800538a:	4613      	mov	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	887a      	ldrh	r2, [r7, #2]
 800539c:	429a      	cmp	r2, r3
 800539e:	d101      	bne.n	80053a4 <CO_OD_find+0x4c>
            return cur;
 80053a0:	89fb      	ldrh	r3, [r7, #14]
 80053a2:	e02b      	b.n	80053fc <CO_OD_find+0xa4>
        }
        if(index < object->index){
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	887a      	ldrh	r2, [r7, #2]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d208      	bcs.n	80053c0 <CO_OD_find+0x68>
            max = cur;
 80053ae:	89fb      	ldrh	r3, [r7, #14]
 80053b0:	82bb      	strh	r3, [r7, #20]
            if(max) max--;
 80053b2:	8abb      	ldrh	r3, [r7, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d006      	beq.n	80053c6 <CO_OD_find+0x6e>
 80053b8:	8abb      	ldrh	r3, [r7, #20]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	82bb      	strh	r3, [r7, #20]
 80053be:	e002      	b.n	80053c6 <CO_OD_find+0x6e>
        }
        else
            min = cur + 1U;
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	3301      	adds	r3, #1
 80053c4:	82fb      	strh	r3, [r7, #22]
    while(min < max){
 80053c6:	8afa      	ldrh	r2, [r7, #22]
 80053c8:	8abb      	ldrh	r3, [r7, #20]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d3d2      	bcc.n	8005374 <CO_OD_find+0x1c>
    }

    if(min == max){
 80053ce:	8afa      	ldrh	r2, [r7, #22]
 80053d0:	8abb      	ldrh	r3, [r7, #20]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d110      	bne.n	80053f8 <CO_OD_find+0xa0>
        object = &SDO->OD[min];
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 80053dc:	8afa      	ldrh	r2, [r7, #22]
 80053de:	4613      	mov	r3, r2
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	887a      	ldrh	r2, [r7, #2]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d101      	bne.n	80053f8 <CO_OD_find+0xa0>
            return min;
 80053f4:	8afb      	ldrh	r3, [r7, #22]
 80053f6:	e001      	b.n	80053fc <CO_OD_find+0xa4>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
 80053f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <CO_OD_getLength>:


/******************************************************************************/
uint16_t CO_OD_getLength(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	807b      	strh	r3, [r7, #2]
 8005414:	4613      	mov	r3, r2
 8005416:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 800541e:	887a      	ldrh	r2, [r7, #2]
 8005420:	4613      	mov	r3, r2
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 800542c:	887b      	ldrh	r3, [r7, #2]
 800542e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <CO_OD_getLength+0x32>
        return 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	e031      	b.n	800549e <CO_OD_getLength+0x96>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	789b      	ldrb	r3, [r3, #2]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <CO_OD_getLength+0x4e>
        if(object->pData == 0){ /* data type is domain */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <CO_OD_getLength+0x48>
            return CO_CONFIG_SDO_BUFFER_SIZE;
 800544a:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800544e:	e026      	b.n	800549e <CO_OD_getLength+0x96>
        }
        else{
            return object->length;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	88db      	ldrh	r3, [r3, #6]
 8005454:	e023      	b.n	800549e <CO_OD_getLength+0x96>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	889b      	ldrh	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00e      	beq.n	800547c <CO_OD_getLength+0x74>
        if(subIndex == 0U){
 800545e:	787b      	ldrb	r3, [r7, #1]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <CO_OD_getLength+0x60>
            return 1U;
 8005464:	2301      	movs	r3, #1
 8005466:	e01a      	b.n	800549e <CO_OD_getLength+0x96>
        }
        else if(object->pData == 0){
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d102      	bne.n	8005476 <CO_OD_getLength+0x6e>
            /* data type is domain */
            return CO_CONFIG_SDO_BUFFER_SIZE;
 8005470:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8005474:	e013      	b.n	800549e <CO_OD_getLength+0x96>
        }
        else{
            return object->length;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	88db      	ldrh	r3, [r3, #6]
 800547a:	e010      	b.n	800549e <CO_OD_getLength+0x96>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	787b      	ldrb	r3, [r7, #1]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4413      	add	r3, r2
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <CO_OD_getLength+0x8a>
            /* data type is domain */
            return CO_CONFIG_SDO_BUFFER_SIZE;
 800548c:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8005490:	e005      	b.n	800549e <CO_OD_getLength+0x96>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	787b      	ldrb	r3, [r7, #1]
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4413      	add	r3, r2
 800549c:	88db      	ldrh	r3, [r3, #6]
        }
    }
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <CO_OD_getAttribute>:


/******************************************************************************/
uint16_t CO_OD_getAttribute(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	460b      	mov	r3, r1
 80054b4:	807b      	strh	r3, [r7, #2]
 80054b6:	4613      	mov	r3, r2
 80054b8:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 80054c0:	887a      	ldrh	r2, [r7, #2]
 80054c2:	4613      	mov	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	60bb      	str	r3, [r7, #8]

    if(entryNo == 0xFFFFU){
 80054ce:	887b      	ldrh	r3, [r7, #2]
 80054d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <CO_OD_getAttribute+0x32>
        return 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	e034      	b.n	8005546 <CO_OD_getAttribute+0x9c>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	789b      	ldrb	r3, [r3, #2]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d102      	bne.n	80054ea <CO_OD_getAttribute+0x40>
        return object->attribute;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	889b      	ldrh	r3, [r3, #4]
 80054e8:	e02d      	b.n	8005546 <CO_OD_getAttribute+0x9c>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	889b      	ldrh	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d023      	beq.n	800553a <CO_OD_getAttribute+0x90>
        bool_t exception_1003 = false;
 80054f2:	2300      	movs	r3, #0
 80054f4:	73fb      	strb	r3, [r7, #15]
        uint16_t attr = object->attribute;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	889b      	ldrh	r3, [r3, #4]
 80054fa:	81bb      	strh	r3, [r7, #12]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	f241 0203 	movw	r2, #4099	; 0x1003
 8005504:	4293      	cmp	r3, r2
 8005506:	d108      	bne.n	800551a <CO_OD_getAttribute+0x70>
 8005508:	787b      	ldrb	r3, [r7, #1]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d105      	bne.n	800551a <CO_OD_getAttribute+0x70>
            exception_1003 = true;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
            attr |= CO_ODA_WRITEABLE;
 8005512:	89bb      	ldrh	r3, [r7, #12]
 8005514:	f043 0308 	orr.w	r3, r3, #8
 8005518:	81bb      	strh	r3, [r7, #12]
        }

        if(subIndex == 0U  && !exception_1003){
 800551a:	787b      	ldrb	r3, [r7, #1]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <CO_OD_getAttribute+0x8c>
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d107      	bne.n	8005536 <CO_OD_getAttribute+0x8c>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
 8005526:	89bb      	ldrh	r3, [r7, #12]
 8005528:	f023 0318 	bic.w	r3, r3, #24
 800552c:	81bb      	strh	r3, [r7, #12]
            attr |= CO_ODA_READABLE;
 800552e:	89bb      	ldrh	r3, [r7, #12]
 8005530:	f043 0304 	orr.w	r3, r3, #4
 8005534:	81bb      	strh	r3, [r7, #12]
        }
        return attr;
 8005536:	89bb      	ldrh	r3, [r7, #12]
 8005538:	e005      	b.n	8005546 <CO_OD_getAttribute+0x9c>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	787b      	ldrb	r3, [r7, #1]
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	4413      	add	r3, r2
 8005544:	889b      	ldrh	r3, [r3, #4]
    }
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <CO_OD_getDataPointer>:


/******************************************************************************/
void* CO_OD_getDataPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	807b      	strh	r3, [r7, #2]
 800555e:	4613      	mov	r3, r2
 8005560:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 1714 	ldr.w	r1, [r3, #1812]	; 0x714
 8005568:	887a      	ldrh	r2, [r7, #2]
 800556a:	4613      	mov	r3, r2
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 8005576:	887b      	ldrh	r3, [r7, #2]
 8005578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800557c:	4293      	cmp	r3, r2
 800557e:	d101      	bne.n	8005584 <CO_OD_getDataPointer+0x32>
        return 0;
 8005580:	2300      	movs	r3, #0
 8005582:	e02d      	b.n	80055e0 <CO_OD_getDataPointer+0x8e>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	789b      	ldrb	r3, [r3, #2]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <CO_OD_getDataPointer+0x40>
        return object->pData;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	e026      	b.n	80055e0 <CO_OD_getDataPointer+0x8e>
    }
    else if(object->maxSubIndex < subIndex){
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	789b      	ldrb	r3, [r3, #2]
 8005596:	787a      	ldrb	r2, [r7, #1]
 8005598:	429a      	cmp	r2, r3
 800559a:	d901      	bls.n	80055a0 <CO_OD_getDataPointer+0x4e>
        /* Object type Array/Record, request is out of bounds */
        return 0;
 800559c:	2300      	movs	r3, #0
 800559e:	e01f      	b.n	80055e0 <CO_OD_getDataPointer+0x8e>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	889b      	ldrh	r3, [r3, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d015      	beq.n	80055d4 <CO_OD_getDataPointer+0x82>
        if(subIndex==0){
 80055a8:	787b      	ldrb	r3, [r7, #1]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d102      	bne.n	80055b4 <CO_OD_getDataPointer+0x62>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3302      	adds	r3, #2
 80055b2:	e015      	b.n	80055e0 <CO_OD_getDataPointer+0x8e>
        }
        else if(object->pData == 0){
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <CO_OD_getDataPointer+0x6e>
            /* data type is domain */
            return 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	e00f      	b.n	80055e0 <CO_OD_getDataPointer+0x8e>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	787a      	ldrb	r2, [r7, #1]
 80055c6:	3a01      	subs	r2, #1
 80055c8:	68f9      	ldr	r1, [r7, #12]
 80055ca:	88c9      	ldrh	r1, [r1, #6]
 80055cc:	fb01 f202 	mul.w	r2, r1, r2
 80055d0:	4413      	add	r3, r2
 80055d2:	e005      	b.n	80055e0 <CO_OD_getDataPointer+0x8e>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	787b      	ldrb	r3, [r7, #1]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4413      	add	r3, r2
 80055de:	681b      	ldr	r3, [r3, #0]
    }
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <CO_OD_getFlagsPointer>:


/******************************************************************************/
uint8_t* CO_OD_getFlagsPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	807b      	strh	r3, [r7, #2]
 80055f8:	4613      	mov	r3, r2
 80055fa:	707b      	strb	r3, [r7, #1]
    if(entryNo == 0xFFFF || SDO->ODExtensions == NULL){
 80055fc:	887b      	ldrh	r3, [r7, #2]
 80055fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005602:	4293      	cmp	r3, r2
 8005604:	d004      	beq.n	8005610 <CO_OD_getFlagsPointer+0x24>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <CO_OD_getFlagsPointer+0x28>
        return NULL;
 8005610:	2300      	movs	r3, #0
 8005612:	e013      	b.n	800563c <CO_OD_getFlagsPointer+0x50>
    }

    CO_OD_extension_t* ext = &SDO->ODExtensions[entryNo];
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 800561a:	887a      	ldrh	r2, [r7, #2]
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	60fb      	str	r3, [r7, #12]
    if (ext->flags == NULL){
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <CO_OD_getFlagsPointer+0x48>
        return NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	e003      	b.n	800563c <CO_OD_getFlagsPointer+0x50>
    }

    return &ext->flags[subIndex];
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	787b      	ldrb	r3, [r7, #1]
 800563a:	4413      	add	r3, r2
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <CO_SDO_initTransfer>:


/******************************************************************************/
uint32_t CO_SDO_initTransfer(CO_SDO_t *SDO, uint16_t index, uint8_t subIndex){
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	807b      	strh	r3, [r7, #2]
 8005654:	4613      	mov	r3, r2
 8005656:	707b      	strb	r3, [r7, #1]

    SDO->ODF_arg.index = index;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	887a      	ldrh	r2, [r7, #2]
 800565c:	f8a3 2738 	strh.w	r2, [r3, #1848]	; 0x738
    SDO->ODF_arg.subIndex = subIndex;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	787a      	ldrb	r2, [r7, #1]
 8005664:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find(SDO, index);
 8005668:	887b      	ldrh	r3, [r7, #2]
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff fe73 	bl	8005358 <CO_OD_find>
 8005672:	4603      	mov	r3, r0
 8005674:	461a      	mov	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8a3 2722 	strh.w	r2, [r3, #1826]	; 0x722
    if(SDO->entryNo == 0xFFFFU){
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005686:	4293      	cmp	r3, r2
 8005688:	d101      	bne.n	800568e <CO_SDO_initTransfer+0x46>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
 800568a:	4b4e      	ldr	r3, [pc, #312]	; (80057c4 <CO_SDO_initTransfer+0x17c>)
 800568c:	e096      	b.n	80057bc <CO_SDO_initTransfer+0x174>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 2714 	ldr.w	r2, [r3, #1812]	; 0x714
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 800569a:	4619      	mov	r1, r3
 800569c:	460b      	mov	r3, r1
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	440b      	add	r3, r1
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	789b      	ldrb	r3, [r3, #2]
 80056a8:	787a      	ldrb	r2, [r7, #1]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d910      	bls.n	80056d0 <CO_SDO_initTransfer+0x88>
            SDO->OD[SDO->entryNo].pData != NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 2714 	ldr.w	r2, [r3, #1812]	; 0x714
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 80056ba:	4619      	mov	r1, r3
 80056bc:	460b      	mov	r3, r1
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	440b      	add	r3, r1
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	689b      	ldr	r3, [r3, #8]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <CO_SDO_initTransfer+0x88>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
 80056cc:	4b3e      	ldr	r3, [pc, #248]	; (80057c8 <CO_SDO_initTransfer+0x180>)
 80056ce:	e075      	b.n	80057bc <CO_SDO_initTransfer+0x174>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO, SDO->entryNo, subIndex);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 80056d6:	787a      	ldrb	r2, [r7, #1]
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff ff39 	bl	8005552 <CO_OD_getDataPointer>
 80056e0:	4602      	mov	r2, r0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8c3 272c 	str.w	r2, [r3, #1836]	; 0x72c

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
    if(SDO->ODExtensions){
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d011      	beq.n	800571e <CO_SDO_initTransfer+0xd6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005706:	4619      	mov	r1, r3
 8005708:	460b      	mov	r3, r1
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	440b      	add	r3, r1
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
        SDO->ODF_arg.object = ext->object;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
    }
    SDO->ODF_arg.data = SDO->databuffer;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f103 0208 	add.w	r2, r3, #8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, subIndex);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005730:	787a      	ldrb	r2, [r7, #1]
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff fe67 	bl	8005408 <CO_OD_getLength>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO, SDO->entryNo, subIndex);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 800574a:	787a      	ldrb	r2, [r7, #1]
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff feab 	bl	80054aa <CO_OD_getAttribute>
 8005754:	4603      	mov	r3, r0
 8005756:	461a      	mov	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8a3 2732 	strh.w	r2, [r3, #1842]	; 0x732
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer(SDO, SDO->entryNo, subIndex);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005764:	787a      	ldrb	r2, [r7, #1]
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ff3f 	bl	80055ec <CO_OD_getFlagsPointer>
 800576e:	4602      	mov	r2, r0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    SDO->ODF_arg.firstSegment = true;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
    SDO->ODF_arg.lastSegment = true;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <CO_SDO_initTransfer+0x152>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005796:	461a      	mov	r2, r3
 8005798:	e000      	b.n	800579c <CO_SDO_initTransfer+0x154>
 800579a:	2200      	movs	r2, #0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740

    SDO->ODF_arg.offset = 0U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_CONFIG_SDO_BUFFER_SIZE){
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80057b0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80057b4:	d901      	bls.n	80057ba <CO_SDO_initTransfer+0x172>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 80057b6:	4b05      	ldr	r3, [pc, #20]	; (80057cc <CO_SDO_initTransfer+0x184>)
 80057b8:	e000      	b.n	80057bc <CO_SDO_initTransfer+0x174>
    }

    return 0U;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	06020000 	.word	0x06020000
 80057c8:	06090011 	.word	0x06090011
 80057cc:	06040047 	.word	0x06040047

080057d0 <CO_SDO_readOD>:


/******************************************************************************/
uint32_t CO_SDO_readOD(CO_SDO_t *SDO, uint16_t SDOBufferSize){
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 80057e2:	61fb      	str	r3, [r7, #28]
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80057ea:	61bb      	str	r3, [r7, #24]
    uint16_t length = SDO->ODF_arg.dataLength;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80057f2:	82fb      	strh	r3, [r7, #22]
    CO_OD_extension_t *ext = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	613b      	str	r3, [r7, #16]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b3 3732 	ldrh.w	r3, [r3, #1842]	; 0x732
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <CO_SDO_readOD+0x3a>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
 8005806:	4b30      	ldr	r3, [pc, #192]	; (80058c8 <CO_SDO_readOD+0xf8>)
 8005808:	e05a      	b.n	80058c0 <CO_SDO_readOD+0xf0>

    /* find extension */
    if(SDO->ODExtensions != NULL){
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00c      	beq.n	800582e <CO_SDO_readOD+0x5e>
        ext = &SDO->ODExtensions[SDO->entryNo];
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005820:	4619      	mov	r1, r3
 8005822:	460b      	mov	r3, r1
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	440b      	add	r3, r1
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
    }

    CO_LOCK_OD();

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00e      	beq.n	8005852 <CO_SDO_readOD+0x82>
        while(length--) *(SDObuffer++) = *(ODdata++);
 8005834:	e007      	b.n	8005846 <CO_SDO_readOD+0x76>
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	1c53      	adds	r3, r2, #1
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	1c59      	adds	r1, r3, #1
 8005840:	61f9      	str	r1, [r7, #28]
 8005842:	7812      	ldrb	r2, [r2, #0]
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	8afb      	ldrh	r3, [r7, #22]
 8005848:	1e5a      	subs	r2, r3, #1
 800584a:	82fa      	strh	r2, [r7, #22]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f2      	bne.n	8005836 <CO_SDO_readOD+0x66>
 8005850:	e005      	b.n	800585e <CO_SDO_readOD+0x8e>
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <CO_SDO_readOD+0x8e>
            CO_UNLOCK_OD();
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 800585a:	4b1c      	ldr	r3, [pc, #112]	; (80058cc <CO_SDO_readOD+0xfc>)
 800585c:	e030      	b.n	80058c0 <CO_SDO_readOD+0xf0>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
    if(ext->pODFunc != NULL){
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d019      	beq.n	80058a2 <CO_SDO_readOD+0xd2>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	f202 7224 	addw	r2, r2, #1828	; 0x724
 8005878:	4610      	mov	r0, r2
 800587a:	4798      	blx	r3
 800587c:	60f8      	str	r0, [r7, #12]
        if(abortCode != 0U){
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <CO_SDO_readOD+0xb8>
            CO_UNLOCK_OD();
            return abortCode;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	e01b      	b.n	80058c0 <CO_SDO_readOD+0xf0>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <CO_SDO_readOD+0xce>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005898:	887a      	ldrh	r2, [r7, #2]
 800589a:	429a      	cmp	r2, r3
 800589c:	d201      	bcs.n	80058a2 <CO_SDO_readOD+0xd2>
            CO_UNLOCK_OD();
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <CO_SDO_readOD+0xfc>)
 80058a0:	e00e      	b.n	80058c0 <CO_SDO_readOD+0xf0>
        }
    }

    CO_UNLOCK_OD();

    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 80058ae:	441a      	add	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
    SDO->ODF_arg.firstSegment = false;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3720      	adds	r7, #32
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	06010001 	.word	0x06010001
 80058cc:	06040047 	.word	0x06040047

080058d0 <CO_SDO_writeOD>:


/******************************************************************************/
uint32_t CO_SDO_writeOD(CO_SDO_t *SDO, uint16_t length){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 80058e2:	61fb      	str	r3, [r7, #28]
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80058ea:	61bb      	str	r3, [r7, #24]
    bool_t exception_1003 = false;
 80058ec:	2300      	movs	r3, #0
 80058ee:	75fb      	strb	r3, [r7, #23]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8b3 3732 	ldrh.w	r3, [r3, #1842]	; 0x732
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <CO_SDO_writeOD+0x32>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
 80058fe:	4b37      	ldr	r3, [pc, #220]	; (80059dc <CO_SDO_writeOD+0x10c>)
 8005900:	e067      	b.n	80059d2 <CO_SDO_writeOD+0x102>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <CO_SDO_writeOD+0x42>
        SDO->ODF_arg.dataLength = length;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	887a      	ldrh	r2, [r7, #2]
 800590c:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
 8005910:	e007      	b.n	8005922 <CO_SDO_writeOD+0x52>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005918:	887a      	ldrh	r2, [r7, #2]
 800591a:	429a      	cmp	r2, r3
 800591c:	d001      	beq.n	8005922 <CO_SDO_writeOD+0x52>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
 800591e:	4b30      	ldr	r3, [pc, #192]	; (80059e0 <CO_SDO_writeOD+0x110>)
 8005920:	e057      	b.n	80059d2 <CO_SDO_writeOD+0x102>
#endif

    CO_LOCK_OD();

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
    if(SDO->ODExtensions != NULL){
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01d      	beq.n	8005970 <CO_SDO_writeOD+0xa0>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8b3 3722 	ldrh.w	r3, [r3, #1826]	; 0x722
 8005940:	4619      	mov	r1, r3
 8005942:	460b      	mov	r3, r1
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	440b      	add	r3, r1
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	613b      	str	r3, [r7, #16]

        if(ext->pODFunc != NULL){
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00c      	beq.n	8005970 <CO_SDO_writeOD+0xa0>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	f202 7224 	addw	r2, r2, #1828	; 0x724
 8005960:	4610      	mov	r0, r2
 8005962:	4798      	blx	r3
 8005964:	60f8      	str	r0, [r7, #12]
            if(abortCode != 0U){
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <CO_SDO_writeOD+0xa0>
                CO_UNLOCK_OD();
                return abortCode;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	e030      	b.n	80059d2 <CO_SDO_writeOD+0x102>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 800597c:	441a      	add	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
    SDO->ODF_arg.firstSegment = false;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8b3 3738 	ldrh.w	r3, [r3, #1848]	; 0x738
 8005992:	f241 0203 	movw	r2, #4099	; 0x1003
 8005996:	4293      	cmp	r3, r2
 8005998:	d106      	bne.n	80059a8 <CO_SDO_writeOD+0xd8>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 373a 	ldrb.w	r3, [r3, #1850]	; 0x73a
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <CO_SDO_writeOD+0xd8>
        exception_1003 = true;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
    }

    /* copy data from SDO buffer to OD if not domain */
    if((ODdata != NULL) && !exception_1003){
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d010      	beq.n	80059d0 <CO_SDO_writeOD+0x100>
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10d      	bne.n	80059d0 <CO_SDO_writeOD+0x100>
        while(length--){
 80059b4:	e007      	b.n	80059c6 <CO_SDO_writeOD+0xf6>
            *(ODdata++) = *(SDObuffer++);
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	1c53      	adds	r3, r2, #1
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	1c59      	adds	r1, r3, #1
 80059c0:	61b9      	str	r1, [r7, #24]
 80059c2:	7812      	ldrb	r2, [r2, #0]
 80059c4:	701a      	strb	r2, [r3, #0]
        while(length--){
 80059c6:	887b      	ldrh	r3, [r7, #2]
 80059c8:	1e5a      	subs	r2, r3, #1
 80059ca:	807a      	strh	r2, [r7, #2]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f2      	bne.n	80059b6 <CO_SDO_writeOD+0xe6>
        }
    }

    CO_UNLOCK_OD();

    return 0;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	06010002 	.word	0x06010002
 80059e0:	06070010 	.word	0x06070010

080059e4 <CO_SDO_abort>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO, uint32_t code){
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80059f4:	2280      	movs	r2, #128	; 0x80
 80059f6:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b3 2738 	ldrh.w	r2, [r3, #1848]	; 0x738
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8b3 3738 	ldrh.w	r3, [r3, #1848]	; 0x738
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	f892 273a 	ldrb.w	r2, [r2, #1850]	; 0x73a
 8005a28:	721a      	strb	r2, [r3, #8]
    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005a30:	3309      	adds	r3, #9
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	601a      	str	r2, [r3, #0]
    SDO->state = CO_SDO_ST_IDLE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
    CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 2768 	ldr.w	r2, [r3, #1896]	; 0x768
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f003 fd3f 	bl	80094d8 <CO_CANsend>
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <CO_SDO_process>:
int8_t CO_SDO_process(
        CO_SDO_t               *SDO,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b093      	sub	sp, #76	; 0x4c
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	607a      	str	r2, [r7, #4]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	460b      	mov	r3, r1
 8005a72:	72fb      	strb	r3, [r7, #11]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t sendResponse = false;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!CO_FLAG_READ(SDO->CANrxNew))){
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d107      	bne.n	8005a9a <CO_SDO_process+0x36>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d102      	bne.n	8005a9a <CO_SDO_process+0x36>
        return 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	f001 b911 	b.w	8006cbc <CO_SDO_process+0x1258>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
 8005a9a:	7afb      	ldrb	r3, [r7, #11]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <CO_SDO_process+0x52>
        SDO->state = CO_SDO_ST_IDLE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
        return 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f001 b903 	b.w	8006cbc <CO_SDO_process+0x1258>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((CO_FLAG_READ(SDO->CANrxNew)) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005abc:	7b5b      	ldrb	r3, [r3, #13]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f040 80e1 	bne.w	8005c88 <CO_SDO_process+0x224>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d105      	bne.n	8005adc <CO_SDO_process+0x78>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005ad6:	2bb6      	cmp	r3, #182	; 0xb6
 8005ad8:	f040 80d6 	bne.w	8005c88 <CO_SDO_process+0x224>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK) {
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005aec:	2bb6      	cmp	r3, #182	; 0xb6
 8005aee:	d005      	beq.n	8005afc <CO_SDO_process+0x98>
            SDO->timeoutTimer = 0;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
            timeDifference_us = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	607b      	str	r3, [r7, #4]
        }

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005b02:	2200      	movs	r2, #0
 8005b04:	721a      	strb	r2, [r3, #8]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 8005b0c:	7a1b      	ldrb	r3, [r3, #8]
 8005b0e:	71d3      	strb	r3, [r2, #7]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005b16:	79d2      	ldrb	r2, [r2, #7]
 8005b18:	719a      	strb	r2, [r3, #6]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 8005b20:	799b      	ldrb	r3, [r3, #6]
 8005b22:	7153      	strb	r3, [r2, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	731a      	strb	r2, [r3, #12]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 8005b34:	7b1b      	ldrb	r3, [r3, #12]
 8005b36:	72d3      	strb	r3, [r2, #11]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005b3e:	7ad2      	ldrb	r2, [r2, #11]
 8005b40:	729a      	strb	r2, [r3, #10]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	f8d2 276c 	ldr.w	r2, [r2, #1900]	; 0x76c
 8005b48:	7a9b      	ldrb	r3, [r3, #10]
 8005b4a:	7253      	strb	r3, [r2, #9]

        /* Is abort from client? */
        if((CO_FLAG_READ(SDO->CANrxNew)) && (SDO->CANrxData[0] == CCS_ABORT)){
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00f      	beq.n	8005b76 <CO_SDO_process+0x112>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b80      	cmp	r3, #128	; 0x80
 8005b5c:	d10b      	bne.n	8005b76 <CO_SDO_process+0x112>
            SDO->state = CO_SDO_ST_IDLE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            CO_FLAG_CLEAR(SDO->CANrxNew);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            return -1;
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b72:	f001 b8a3 	b.w	8006cbc <CO_SDO_process+0x1258>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <CO_SDO_process+0x128>
            state = SDO->state;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005b86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b8a:	e07d      	b.n	8005c88 <CO_SDO_process+0x224>
        else{
            uint32_t abortCode;
            uint16_t index;

            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
 8005b8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d013      	beq.n	8005bbc <CO_SDO_process+0x158>
 8005b94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d00f      	beq.n	8005bbc <CO_SDO_process+0x158>
 8005b9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ba0:	2b06      	cmp	r3, #6
 8005ba2:	d00b      	beq.n	8005bbc <CO_SDO_process+0x158>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
 8005ba4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ba8:	2b05      	cmp	r3, #5
 8005baa:	d007      	beq.n	8005bbc <CO_SDO_process+0x158>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005bac:	49b4      	ldr	r1, [pc, #720]	; (8005e80 <CO_SDO_process+0x41c>)
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff ff18 	bl	80059e4 <CO_SDO_abort>
                return -1;
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb8:	f001 b880 	b.w	8006cbc <CO_SDO_process+0x1258>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	789b      	ldrb	r3, [r3, #2]
 8005bc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
            index = index << 8 | SDO->CANrxData[1];
 8005bc2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	b21a      	sxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	b21b      	sxth	r3, r3
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b21b      	sxth	r3, r3
 8005bd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
            abortCode = CO_SDO_initTransfer(SDO, index, SDO->CANrxData[3]);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	78da      	ldrb	r2, [r3, #3]
 8005bd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005bda:	4619      	mov	r1, r3
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f7ff fd33 	bl	8005648 <CO_SDO_initTransfer>
 8005be2:	63b8      	str	r0, [r7, #56]	; 0x38
            if(abortCode != 0U){
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d007      	beq.n	8005bfa <CO_SDO_process+0x196>
                CO_SDO_abort(SDO, abortCode);
 8005bea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7ff fef9 	bl	80059e4 <CO_SDO_abort>
                return -1;
 8005bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf6:	f001 b861 	b.w	8006cbc <CO_SDO_process+0x1258>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
 8005bfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d003      	beq.n	8005c0a <CO_SDO_process+0x1a6>
 8005c02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c06:	2b06      	cmp	r3, #6
 8005c08:	d11a      	bne.n	8005c40 <CO_SDO_process+0x1dc>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8b3 3732 	ldrh.w	r3, [r3, #1842]	; 0x732
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d107      	bne.n	8005c28 <CO_SDO_process+0x1c4>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
 8005c18:	499a      	ldr	r1, [pc, #616]	; (8005e84 <CO_SDO_process+0x420>)
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7ff fee2 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 8005c20:	f04f 33ff 	mov.w	r3, #4294967295
 8005c24:	f001 b84a 	b.w	8006cbc <CO_SDO_process+0x1258>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005c28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d103      	bne.n	8005c38 <CO_SDO_process+0x1d4>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
 8005c30:	23a1      	movs	r3, #161	; 0xa1
 8005c32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005c36:	e027      	b.n	8005c88 <CO_SDO_process+0x224>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
 8005c38:	23a4      	movs	r3, #164	; 0xa4
 8005c3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005c3e:	e023      	b.n	8005c88 <CO_SDO_process+0x224>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD(SDO, CO_CONFIG_SDO_BUFFER_SIZE);
 8005c40:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f7ff fdc3 	bl	80057d0 <CO_SDO_readOD>
 8005c4a:	63b8      	str	r0, [r7, #56]	; 0x38
                if(abortCode != 0U){
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <CO_SDO_process+0x1fe>
                    CO_SDO_abort(SDO, abortCode);
 8005c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff fec5 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 8005c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5e:	f001 b82d 	b.w	8006cbc <CO_SDO_process+0x1258>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
 8005c62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d10b      	bne.n	8005c82 <CO_SDO_process+0x21e>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	795b      	ldrb	r3, [r3, #5]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d903      	bls.n	8005c82 <CO_SDO_process+0x21e>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
 8005c7a:	23b4      	movs	r3, #180	; 0xb4
 8005c7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005c80:	e002      	b.n	8005c88 <CO_SDO_process+0x224>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
 8005c82:	23b1      	movs	r3, #177	; 0xb1
 8005c84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8d3 2750 	ldr.w	r2, [r3, #1872]	; 0x750
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d207      	bcs.n	8005ca8 <CO_SDO_process+0x244>
        SDO->timeoutTimer += timeDifference_us;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8d3 2750 	ldr.w	r2, [r3, #1872]	; 0x750
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	441a      	add	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
    }
    if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8d3 2750 	ldr.w	r2, [r3, #1872]	; 0x750
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d324      	bcc.n	8005d02 <CO_SDO_process+0x29e>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (!SDO->timeoutSubblockDownolad) && (!SDO->CANtxBuff->bufferFull)){
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8005cbe:	2ba5      	cmp	r3, #165	; 0xa5
 8005cc0:	d117      	bne.n	8005cf2 <CO_SDO_process+0x28e>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d112      	bne.n	8005cf2 <CO_SDO_process+0x28e>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005cd2:	7b5b      	ldrb	r3, [r3, #13]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <CO_SDO_process+0x28e>
            /* set indication timeout in sub-block transfer and reset timeout */
            SDO->timeoutSubblockDownolad = true;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
            SDO->timeoutTimer = 0;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750
            /* send response without resetting sequence */
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP_2;
 8005cea:	23a7      	movs	r3, #167	; 0xa7
 8005cec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005cf0:	e01a      	b.n	8005d28 <CO_SDO_process+0x2c4>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
 8005cf2:	4965      	ldr	r1, [pc, #404]	; (8005e88 <CO_SDO_process+0x424>)
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7ff fe75 	bl	80059e4 <CO_SDO_abort>
            return -1;
 8005cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfe:	f000 bfdd 	b.w	8006cbc <CO_SDO_process+0x1258>
        }
    }
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
    else if (timerNext_us != NULL) {
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00f      	beq.n	8005d28 <CO_SDO_process+0x2c4>
        /* check again after timeout time elapsed */
        uint32_t diff = SDO->SDOtimeoutTime_us - SDO->timeoutTimer;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8d3 274c 	ldr.w	r2, [r3, #1868]	; 0x74c
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8d3 3750 	ldr.w	r3, [r3, #1872]	; 0x750
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34
        if (*timerNext_us > diff) {
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d202      	bcs.n	8005d28 <CO_SDO_process+0x2c4>
            *timerNext_us = diff;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d26:	601a      	str	r2, [r3, #0]
        }
    }
#endif

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
 8005d28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <CO_SDO_process+0x2d2>
        return 0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	f000 bfc3 	b.w	8006cbc <CO_SDO_process+0x1258>
    }

    /* state machine (buffer is freed (CO_FLAG_CLEAR()) at the end) */
    switch(state){
 8005d36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8799 	beq.w	8006c72 <CO_SDO_process+0x120e>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f2c0 878f 	blt.w	8006c64 <CO_SDO_process+0x1200>
 8005d46:	2bb7      	cmp	r3, #183	; 0xb7
 8005d48:	f300 878c 	bgt.w	8006c64 <CO_SDO_process+0x1200>
 8005d4c:	2ba1      	cmp	r3, #161	; 0xa1
 8005d4e:	f2c0 8789 	blt.w	8006c64 <CO_SDO_process+0x1200>
 8005d52:	3ba1      	subs	r3, #161	; 0xa1
 8005d54:	2b16      	cmp	r3, #22
 8005d56:	f200 8785 	bhi.w	8006c64 <CO_SDO_process+0x1200>
 8005d5a:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <CO_SDO_process+0x2fc>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005dbd 	.word	0x08005dbd
 8005d64:	08005f13 	.word	0x08005f13
 8005d68:	08006c65 	.word	0x08006c65
 8005d6c:	080060b1 	.word	0x080060b1
 8005d70:	08006c77 	.word	0x08006c77
 8005d74:	0800619b 	.word	0x0800619b
 8005d78:	0800619b 	.word	0x0800619b
 8005d7c:	08006305 	.word	0x08006305
 8005d80:	08006c65 	.word	0x08006c65
 8005d84:	08006c65 	.word	0x08006c65
 8005d88:	08006c65 	.word	0x08006c65
 8005d8c:	08006c65 	.word	0x08006c65
 8005d90:	08006c65 	.word	0x08006c65
 8005d94:	08006c65 	.word	0x08006c65
 8005d98:	08006c65 	.word	0x08006c65
 8005d9c:	08006c65 	.word	0x08006c65
 8005da0:	080063f3 	.word	0x080063f3
 8005da4:	080064f3 	.word	0x080064f3
 8005da8:	08006c65 	.word	0x08006c65
 8005dac:	0800674d 	.word	0x0800674d
 8005db0:	08006863 	.word	0x08006863
 8005db4:	080068a5 	.word	0x080068a5
 8005db8:	08006c35 	.word	0x08006c35
        uint16_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005dc2:	2260      	movs	r2, #96	; 0x60
 8005dc4:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	7852      	ldrb	r2, [r2, #1]
 8005dd0:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	7892      	ldrb	r2, [r2, #2]
 8005ddc:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	78d2      	ldrb	r2, [r2, #3]
 8005de8:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d05a      	beq.n	8005eac <CO_SDO_process+0x448>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00c      	beq.n	8005e1c <CO_SDO_process+0x3b8>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	089b      	lsrs	r3, r3, #2
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f003 0303 	and.w	r3, r3, #3
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f1c3 0304 	rsb	r3, r3, #4
 8005e16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e1a:	e004      	b.n	8005e26 <CO_SDO_process+0x3c2>
                }
                else{
                    len = SDO->ODF_arg.dataLength;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005e22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	7912      	ldrb	r2, [r2, #4]
 8005e30:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005e38:	3301      	adds	r3, #1
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	7952      	ldrb	r2, [r2, #5]
 8005e3e:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005e46:	3302      	adds	r3, #2
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	7992      	ldrb	r2, [r2, #6]
 8005e4c:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 8005e54:	3303      	adds	r3, #3
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	79d2      	ldrb	r2, [r2, #7]
 8005e5a:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD(SDO, len);
 8005e5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e60:	4619      	mov	r1, r3
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7ff fd34 	bl	80058d0 <CO_SDO_writeOD>
 8005e68:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00d      	beq.n	8005e8c <CO_SDO_process+0x428>
                    CO_SDO_abort(SDO, abortCode);
 8005e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff fdb6 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 8005e78:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7c:	f000 bf1e 	b.w	8006cbc <CO_SDO_process+0x1258>
 8005e80:	05040001 	.word	0x05040001
 8005e84:	06010002 	.word	0x06010002
 8005e88:	05040000 	.word	0x05040000
                }

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                sendResponse = true;
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 86ec 	beq.w	8006c7a <CO_SDO_process+0x1216>
                    *timerNext_us = 0;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
                SDO->bufferOffset = 0U;
                SDO->sequence = 0U;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
 8005ea8:	f000 bee7 	b.w	8006c7a <CO_SDO_process+0x1216>
                if((SDO->CANrxData[0]&0x01) != 0){
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01b      	beq.n	8005ef0 <CO_SDO_process+0x48c>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
                    SDO->ODF_arg.dataLengthTotal = lenRx;
 8005ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d00c      	beq.n	8005ef0 <CO_SDO_process+0x48c>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d007      	beq.n	8005ef0 <CO_SDO_process+0x48c>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 8005ee0:	49b4      	ldr	r1, [pc, #720]	; (80061b4 <CO_SDO_process+0x750>)
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7ff fd7e 	bl	80059e4 <CO_SDO_abort>
                        return -1;
 8005ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eec:	f000 bee6 	b.w	8006cbc <CO_SDO_process+0x1258>
                SDO->bufferOffset = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                SDO->sequence = 0U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	22a2      	movs	r2, #162	; 0xa2
 8005f04:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                sendResponse = true;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 8005f0e:	f000 beb4 	b.w	8006c7a <CO_SDO_process+0x1216>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <CO_SDO_process+0x4ca>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005f1e:	49a6      	ldr	r1, [pc, #664]	; (80061b8 <CO_SDO_process+0x754>)
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7ff fd5f 	bl	80059e4 <CO_SDO_abort>
                return -1;
 8005f26:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2a:	f000 bec7 	b.w	8006cbc <CO_SDO_process+0x1258>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(i != SDO->sequence){
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d007      	beq.n	8005f5e <CO_SDO_process+0x4fa>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 8005f4e:	499b      	ldr	r1, [pc, #620]	; (80061bc <CO_SDO_process+0x758>)
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7ff fd47 	bl	80059e4 <CO_SDO_abort>
                return -1;
 8005f56:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5a:	f000 beaf 	b.w	8006cbc <CO_SDO_process+0x1258>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f80:	4413      	add	r3, r2
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	dd2c      	ble.n	8005fe6 <CO_SDO_process+0x582>
                if(SDO->ODF_arg.ODdataStorage != 0){
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <CO_SDO_process+0x542>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
 8005f96:	498a      	ldr	r1, [pc, #552]	; (80061c0 <CO_SDO_process+0x75c>)
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff fd23 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa2:	f000 be8b 	b.w	8006cbc <CO_SDO_process+0x1258>
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
                    abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7ff fc8a 	bl	80058d0 <CO_SDO_writeOD>
 8005fbc:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <CO_SDO_process+0x570>
                        CO_SDO_abort(SDO, abortCode);
 8005fc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7ff fd0c 	bl	80059e4 <CO_SDO_abort>
                        return -1;
 8005fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd0:	f000 be74 	b.w	8006cbc <CO_SDO_process+0x1258>
                    }

                    SDO->ODF_arg.dataLength = CO_CONFIG_SDO_BUFFER_SIZE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005fda:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                    SDO->bufferOffset = 0U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005fec:	e016      	b.n	800601c <CO_SDO_process+0x5b8>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
 8005fee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006000:	1c58      	adds	r0, r3, #1
 8006002:	b284      	uxth	r4, r0
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f8a0 4720 	strh.w	r4, [r0, #1824]	; 0x720
 800600a:	440b      	add	r3, r1
 800600c:	68f9      	ldr	r1, [r7, #12]
 800600e:	5c8a      	ldrb	r2, [r1, r2]
 8006010:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
 8006012:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006016:	3301      	adds	r3, #1
 8006018:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800601c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006020:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006024:	429a      	cmp	r2, r3
 8006026:	d3e2      	bcc.n	8005fee <CO_SDO_process+0x58a>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d020      	beq.n	8006076 <CO_SDO_process+0x612>
                SDO->ODF_arg.lastSegment = true;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006042:	4619      	mov	r1, r3
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7ff fc43 	bl	80058d0 <CO_SDO_writeOD>
 800604a:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <CO_SDO_process+0x5fe>
                    CO_SDO_abort(SDO, abortCode);
 8006052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f7ff fcc5 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
 800605e:	f000 be2d 	b.w	8006cbc <CO_SDO_process+0x1258>
                }

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <CO_SDO_process+0x612>
                    *timerNext_us = 0;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
#endif
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <CO_SDO_process+0x620>
 8006080:	2230      	movs	r2, #48	; 0x30
 8006082:	e000      	b.n	8006086 <CO_SDO_process+0x622>
 8006084:	2220      	movs	r2, #32
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800608c:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8006094:	2b00      	cmp	r3, #0
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            sendResponse = true;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 80060ac:	f000 bdec 	b.w	8006c88 <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 80060b8:	2bc0      	cmp	r3, #192	; 0xc0
 80060ba:	d007      	beq.n	80060cc <CO_SDO_process+0x668>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80060bc:	493e      	ldr	r1, [pc, #248]	; (80061b8 <CO_SDO_process+0x754>)
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff fc90 	bl	80059e4 <CO_SDO_abort>
                return -1;
 80060c4:	f04f 33ff 	mov.w	r3, #4294967295
 80060c8:	f000 bdf8 	b.w	8006cbc <CO_SDO_process+0x1258>
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80060d2:	22a4      	movs	r2, #164	; 0xa4
 80060d4:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	7852      	ldrb	r2, [r2, #1]
 80060e0:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	7892      	ldrb	r2, [r2, #2]
 80060ec:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	78d2      	ldrb	r2, [r2, #3]
 80060f8:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_CONFIG_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_CONFIG_SDO_BUFFER_SIZE / 7);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	227f      	movs	r2, #127	; 0x7f
 80060fe:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
            SDO->CANtxBuff->data[4] = SDO->blksize;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	f892 2754 	ldrb.w	r2, [r2, #1876]	; 0x754
 800610e:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	109b      	asrs	r3, r3, #2
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f883 2755 	strb.w	r2, [r3, #1877]	; 0x755
            SDO->crc = 0;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01b      	beq.n	8006170 <CO_SDO_process+0x70c>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3304      	adds	r3, #4
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	623b      	str	r3, [r7, #32]
                SDO->ODF_arg.dataLengthTotal = lenRx;
 8006140:	6a3a      	ldr	r2, [r7, #32]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8c3 2740 	str.w	r2, [r3, #1856]	; 0x740

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800614e:	461a      	mov	r2, r3
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	429a      	cmp	r2, r3
 8006154:	d00c      	beq.n	8006170 <CO_SDO_process+0x70c>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <CO_SDO_process+0x70c>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 8006160:	4914      	ldr	r1, [pc, #80]	; (80061b4 <CO_SDO_process+0x750>)
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff fc3e 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
 800616c:	f000 bda6 	b.w	8006cbc <CO_SDO_process+0x1258>
                }
            }

            SDO->bufferOffset = 0U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
            SDO->sequence = 0U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            SDO->timeoutSubblockDownolad = false;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	22a5      	movs	r2, #165	; 0xa5
 800618c:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749

            /* send response */
            sendResponse = true;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 8006196:	f000 bd77 	b.w	8006c88 <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:
        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP_2:{
            /* check if last segment received */
            lastSegmentInSubblock = (!SDO->timeoutSubblockDownolad &&
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 3759 	ldrb.w	r3, [r3, #1881]	; 0x759
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10f      	bne.n	80061c4 <CO_SDO_process+0x760>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	b25b      	sxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	da0a      	bge.n	80061c4 <CO_SDO_process+0x760>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e009      	b.n	80061c6 <CO_SDO_process+0x762>
 80061b2:	bf00      	nop
 80061b4:	06070010 	.word	0x06070010
 80061b8:	05040001 	.word	0x05040001
 80061bc:	05030000 	.word	0x05030000
 80061c0:	06070012 	.word	0x06070012
 80061c4:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!SDO->timeoutSubblockDownolad &&
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80061d0:	22a2      	movs	r2, #162	; 0xa2
 80061d2:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	f892 274a 	ldrb.w	r2, [r2, #1866]	; 0x74a
 80061e0:	719a      	strb	r2, [r3, #6]

            /* reset sequence on reception break */
            if (state == CO_SDO_ST_DOWNLOAD_BL_SUB_RESP) {
 80061e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80061e6:	2ba6      	cmp	r3, #166	; 0xa6
 80061e8:	d103      	bne.n	80061f2 <CO_SDO_process+0x78e>
                SDO->sequence = 0U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            }

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d13f      	bne.n	800627c <CO_SDO_process+0x818>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006202:	2b00      	cmp	r3, #0
 8006204:	d03a      	beq.n	800627c <CO_SDO_process+0x818>
 8006206:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800620a:	2b00      	cmp	r3, #0
 800620c:	d136      	bne.n	800627c <CO_SDO_process+0x818>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 8006214:	2b00      	cmp	r3, #0
 8006216:	d011      	beq.n	800623c <CO_SDO_process+0x7d8>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006224:	4619      	mov	r1, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 800622c:	461a      	mov	r2, r3
 800622e:	f001 f9d1 	bl	80075d4 <crc16_ccitt>
 8006232:	4603      	mov	r3, r0
 8006234:	461a      	mov	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 800624a:	4619      	mov	r1, r3
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff fb3f 	bl	80058d0 <CO_SDO_writeOD>
 8006252:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <CO_SDO_process+0x806>
                    CO_SDO_abort(SDO, abortCode);
 800625a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f7ff fbc1 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 8006262:	f04f 33ff 	mov.w	r3, #4294967295
 8006266:	f000 bd29 	b.w	8006cbc <CO_SDO_process+0x1258>
                }

                SDO->ODF_arg.dataLength = CO_CONFIG_SDO_BUFFER_SIZE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006270:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                SDO->bufferOffset = 0U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
            }

            /* blksize */
            len = CO_CONFIG_SDO_BUFFER_SIZE - SDO->bufferOffset;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006282:	f5c3 63e1 	rsb	r3, r3, #1800	; 0x708
 8006286:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
 800628a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800628e:	f240 3279 	movw	r2, #889	; 0x379
 8006292:	4293      	cmp	r3, r2
 8006294:	d80b      	bhi.n	80062ae <CO_SDO_process+0x84a>
 8006296:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800629a:	4bba      	ldr	r3, [pc, #744]	; (8006584 <CO_SDO_process+0xb20>)
 800629c:	fba3 1302 	umull	r1, r3, r3, r2
 80062a0:	1ad2      	subs	r2, r2, r3
 80062a2:	0852      	lsrs	r2, r2, #1
 80062a4:	4413      	add	r3, r2
 80062a6:	089b      	lsrs	r3, r3, #2
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	e000      	b.n	80062b0 <CO_SDO_process+0x84c>
 80062ae:	227f      	movs	r2, #127	; 0x7f
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
            SDO->CANtxBuff->data[2] = SDO->blksize;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	f892 2754 	ldrb.w	r2, [r2, #1876]	; 0x754
 80062c2:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
 80062c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d004      	beq.n	80062d6 <CO_SDO_process+0x872>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	22a8      	movs	r2, #168	; 0xa8
 80062d0:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 80062d4:	e011      	b.n	80062fa <CO_SDO_process+0x896>
            }
            else if(SDO->bufferOffset >= CO_CONFIG_SDO_BUFFER_SIZE) {
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 80062dc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80062e0:	d307      	bcc.n	80062f2 <CO_SDO_process+0x88e>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
 80062e2:	49a9      	ldr	r1, [pc, #676]	; (8006588 <CO_SDO_process+0xb24>)
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff fb7d 	bl	80059e4 <CO_SDO_abort>
                return -1;
 80062ea:	f04f 33ff 	mov.w	r3, #4294967295
 80062ee:	f000 bce5 	b.w	8006cbc <CO_SDO_process+0x1258>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	22a5      	movs	r2, #165	; 0xa5
 80062f6:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            }

            /* send response */
            sendResponse = true;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

            break;
 8006300:	f000 bcc2 	b.w	8006c88 <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 800630c:	2bc1      	cmp	r3, #193	; 0xc1
 800630e:	d007      	beq.n	8006320 <CO_SDO_process+0x8bc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006310:	499e      	ldr	r1, [pc, #632]	; (800658c <CO_SDO_process+0xb28>)
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff fb66 	bl	80059e4 <CO_SDO_abort>
                return -1;
 8006318:	f04f 33ff 	mov.w	r3, #4294967295
 800631c:	f000 bcce 	b.w	8006cbc <CO_SDO_process+0x1258>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	089b      	lsrs	r3, r3, #2
 8006326:	b2db      	uxtb	r3, r3
 8006328:	b29b      	uxth	r3, r3
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            SDO->bufferOffset -= len;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 2720 	ldrh.w	r2, [r3, #1824]	; 0x720
 8006338:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 800634c:	2b00      	cmp	r3, #0
 800634e:	d024      	beq.n	800639a <CO_SDO_process+0x936>
                uint16_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 800635c:	4619      	mov	r1, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 8006364:	461a      	mov	r2, r3
 8006366:	f001 f935 	bl	80075d4 <crc16_ccitt>
 800636a:	4603      	mov	r3, r0
 800636c:	461a      	mov	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	83fb      	strh	r3, [r7, #30]

                if(SDO->crc != crc){
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8b3 2756 	ldrh.w	r2, [r3, #1878]	; 0x756
 8006384:	8bfb      	ldrh	r3, [r7, #30]
 8006386:	429a      	cmp	r2, r3
 8006388:	d007      	beq.n	800639a <CO_SDO_process+0x936>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
 800638a:	4981      	ldr	r1, [pc, #516]	; (8006590 <CO_SDO_process+0xb2c>)
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7ff fb29 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 8006392:	f04f 33ff 	mov.w	r3, #4294967295
 8006396:	f000 bc91 	b.w	8006cbc <CO_SDO_process+0x1258>
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 273d 	strb.w	r2, [r3, #1853]	; 0x73d
            abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 80063a8:	4619      	mov	r1, r3
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff fa90 	bl	80058d0 <CO_SDO_writeOD>
 80063b0:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <CO_SDO_process+0x964>
                CO_SDO_abort(SDO, abortCode);
 80063b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7ff fb12 	bl	80059e4 <CO_SDO_abort>
                return -1;
 80063c0:	f04f 33ff 	mov.w	r3, #4294967295
 80063c4:	f000 bc7a 	b.w	8006cbc <CO_SDO_process+0x1258>
            }

            /* finish the communication and run mainline processing again */
            SDO->CANtxBuff->data[0] = 0xA1;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80063ce:	22a1      	movs	r2, #161	; 0xa1
 80063d0:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            sendResponse = true;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
            if (timerNext_us != NULL)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 844b 	beq.w	8006c7e <CO_SDO_process+0x121a>
                *timerNext_us = 0;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
#endif
            break;
 80063ee:	f000 bc46 	b.w	8006c7e <CO_SDO_process+0x121a>
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	7852      	ldrb	r2, [r2, #1]
 80063fc:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	7892      	ldrb	r2, [r2, #2]
 8006408:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	78d2      	ldrb	r2, [r2, #3]
 8006414:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800641c:	2b04      	cmp	r3, #4
 800641e:	d83e      	bhi.n	800649e <CO_SDO_process+0xa3a>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 8006420:	2300      	movs	r3, #0
 8006422:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006426:	e014      	b.n	8006452 <CO_SDO_process+0x9ee>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 800642e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006432:	18d1      	adds	r1, r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8d3 276c 	ldr.w	r2, [r3, #1900]	; 0x76c
 800643a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800643e:	3304      	adds	r3, #4
 8006440:	7809      	ldrb	r1, [r1, #0]
 8006442:	4413      	add	r3, r2
 8006444:	460a      	mov	r2, r1
 8006446:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 8006448:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800644c:	3301      	adds	r3, #1
 800644e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006458:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800645c:	429a      	cmp	r2, r3
 800645e:	d3e3      	bcc.n	8006428 <CO_SDO_process+0x9c4>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f1c3 0304 	rsb	r3, r3, #4
 800646c:	b2db      	uxtb	r3, r3
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	b2da      	uxtb	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006478:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	715a      	strb	r2, [r3, #5]

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                sendResponse = true;
 8006488:	2301      	movs	r3, #1
 800648a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 83f6 	beq.w	8006c82 <CO_SDO_process+0x121e>
                    *timerNext_us = 0;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
                }

                /* send response */
                sendResponse = true;
            }
            break;
 800649c:	e3f1      	b.n	8006c82 <CO_SDO_process+0x121e>
                SDO->bufferOffset = 0U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                SDO->sequence = 0U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	22b2      	movs	r2, #178	; 0xb2
 80064b2:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
                if(SDO->ODF_arg.dataLengthTotal != 0U){
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00f      	beq.n	80064e0 <CO_SDO_process+0xa7c>
                    uint32_t dlentot = SDO->ODF_arg.dataLengthTotal;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 80064c6:	61bb      	str	r3, [r7, #24]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &dlentot);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80064ce:	3309      	adds	r3, #9
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	601a      	str	r2, [r3, #0]
                    SDO->CANtxBuff->data[0] = 0x41U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80064da:	2241      	movs	r2, #65	; 0x41
 80064dc:	715a      	strb	r2, [r3, #5]
 80064de:	e004      	b.n	80064ea <CO_SDO_process+0xa86>
                    SDO->CANtxBuff->data[0] = 0x40U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80064e6:	2240      	movs	r2, #64	; 0x40
 80064e8:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 80064f0:	e3c7      	b.n	8006c82 <CO_SDO_process+0x121e>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80064fa:	2b60      	cmp	r3, #96	; 0x60
 80064fc:	d006      	beq.n	800650c <CO_SDO_process+0xaa8>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80064fe:	4923      	ldr	r1, [pc, #140]	; (800658c <CO_SDO_process+0xb28>)
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7ff fa6f 	bl	80059e4 <CO_SDO_abort>
                return -1;
 8006506:	f04f 33ff 	mov.w	r3, #4294967295
 800650a:	e3d7      	b.n	8006cbc <CO_SDO_process+0x1258>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	091b      	lsrs	r3, r3, #4
 8006512:	b29b      	uxth	r3, r3
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(i != SDO->sequence){
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8006522:	b29b      	uxth	r3, r3
 8006524:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006528:	429a      	cmp	r2, r3
 800652a:	d006      	beq.n	800653a <CO_SDO_process+0xad6>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 800652c:	4919      	ldr	r1, [pc, #100]	; (8006594 <CO_SDO_process+0xb30>)
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7ff fa58 	bl	80059e4 <CO_SDO_abort>
                return -1;
 8006534:	f04f 33ff 	mov.w	r3, #4294967295
 8006538:	e3c0      	b.n	8006cbc <CO_SDO_process+0x1258>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            if(len > 7U) len = 7U;
 800654c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006550:	2b07      	cmp	r3, #7
 8006552:	d902      	bls.n	800655a <CO_SDO_process+0xaf6>
 8006554:	2307      	movs	r3, #7
 8006556:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8006560:	2b00      	cmp	r3, #0
 8006562:	f040 8087 	bne.w	8006674 <CO_SDO_process+0xc10>
 8006566:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800656a:	2b06      	cmp	r3, #6
 800656c:	f200 8082 	bhi.w	8006674 <CO_SDO_process+0xc10>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 8006576:	2b00      	cmp	r3, #0
 8006578:	d17c      	bne.n	8006674 <CO_SDO_process+0xc10>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
 800657a:	2300      	movs	r3, #0
 800657c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006580:	e022      	b.n	80065c8 <CO_SDO_process+0xb64>
 8006582:	bf00      	nop
 8006584:	24924925 	.word	0x24924925
 8006588:	06040047 	.word	0x06040047
 800658c:	05040001 	.word	0x05040001
 8006590:	05040004 	.word	0x05040004
 8006594:	05030000 	.word	0x05030000
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	f8b2 2720 	ldrh.w	r2, [r2, #1824]	; 0x720
 80065a4:	4611      	mov	r1, r2
 80065a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80065aa:	440a      	add	r2, r1
 80065ac:	441a      	add	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 80065b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80065b8:	440b      	add	r3, r1
 80065ba:	7812      	ldrb	r2, [r2, #0]
 80065bc:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
 80065be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80065c2:	3301      	adds	r3, #1
 80065c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80065c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80065cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d3e1      	bcc.n	8006598 <CO_SDO_process+0xb34>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 80065da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80065de:	441a      	add	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8b3 1722 	ldrh.w	r1, [r3, #1826]	; 0x722
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 373a 	ldrb.w	r3, [r3, #1850]	; 0x73a
 80065f2:	461a      	mov	r2, r3
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7fe ff07 	bl	8005408 <CO_OD_getLength>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461a      	mov	r2, r3
 80065fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD(SDO, CO_CONFIG_SDO_BUFFER_SIZE);
 800660c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff f8dd 	bl	80057d0 <CO_SDO_readOD>
 8006616:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d006      	beq.n	800662c <CO_SDO_process+0xbc8>
                    CO_SDO_abort(SDO, abortCode);
 800661e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7ff f9df 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 8006626:	f04f 33ff 	mov.w	r3, #4294967295
 800662a:	e347      	b.n	8006cbc <CO_SDO_process+0x1258>
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 8006632:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006636:	425b      	negs	r3, r3
 8006638:	441a      	add	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                SDO->ODF_arg.dataLength +=  len;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8006646:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800664a:	4413      	add	r3, r2
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                SDO->bufferOffset = 0;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006662:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                if(len > 7U) len = 7U;
 8006666:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800666a:	2b07      	cmp	r3, #7
 800666c:	d902      	bls.n	8006674 <CO_SDO_process+0xc10>
 800666e:	2307      	movs	r3, #7
 8006670:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
 8006674:	2300      	movs	r3, #0
 8006676:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800667a:	e01a      	b.n	80066b2 <CO_SDO_process+0xc4e>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006688:	1c59      	adds	r1, r3, #1
 800668a:	b288      	uxth	r0, r1
 800668c:	68f9      	ldr	r1, [r7, #12]
 800668e:	f8a1 0720 	strh.w	r0, [r1, #1824]	; 0x720
 8006692:	18d1      	adds	r1, r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8d3 276c 	ldr.w	r2, [r3, #1900]	; 0x76c
 800669a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800669e:	3301      	adds	r3, #1
 80066a0:	7809      	ldrb	r1, [r1, #0]
 80066a2:	4413      	add	r3, r2
 80066a4:	460a      	mov	r2, r1
 80066a6:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
 80066a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80066ac:	3301      	adds	r3, #1
 80066ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80066b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80066b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d3de      	bcc.n	800667c <CO_SDO_process+0xc18>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <CO_SDO_process+0xc68>
 80066c8:	2210      	movs	r2, #16
 80066ca:	e000      	b.n	80066ce <CO_SDO_process+0xc6a>
 80066cc:	2200      	movs	r2, #0
 80066ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80066d2:	f1c3 0307 	rsb	r3, r3, #7
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	b25b      	sxtb	r3, r3
 80066da:	4313      	orrs	r3, r2
 80066dc:	b25a      	sxtb	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bf0c      	ite	eq
 80066f2:	2301      	moveq	r3, #1
 80066f4:	2300      	movne	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8b3 2720 	ldrh.w	r2, [r3, #1824]	; 0x720
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 800670c:	429a      	cmp	r2, r3
 800670e:	d119      	bne.n	8006744 <CO_SDO_process+0xce0>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 8006716:	2b00      	cmp	r3, #0
 8006718:	d014      	beq.n	8006744 <CO_SDO_process+0xce0>
                SDO->CANtxBuff->data[0] |= 0x01;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006720:	795a      	ldrb	r2, [r3, #5]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006728:	f042 0201 	orr.w	r2, r2, #1
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	715a      	strb	r2, [r3, #5]

                /* finish the communication and run mainline processing again */
                SDO->state = CO_SDO_ST_IDLE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <CO_SDO_process+0xce0>
                    *timerNext_us = 0;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]
#endif
            }

            /* send response */
            sendResponse = true;
 8006744:	2301      	movs	r3, #1
 8006746:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 800674a:	e29d      	b.n	8006c88 <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	7852      	ldrb	r2, [r2, #1]
 8006756:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	7892      	ldrb	r2, [r2, #2]
 8006762:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	78d2      	ldrb	r2, [r2, #3]
 800676e:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d013      	beq.n	80067a4 <CO_SDO_process+0xd40>
                SDO->crcEnabled = true;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2755 	strb.w	r2, [r3, #1877]	; 0x755
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006790:	2200      	movs	r2, #0
 8006792:	4619      	mov	r1, r3
 8006794:	f000 ff1e 	bl	80075d4 <crc16_ccitt>
 8006798:	4603      	mov	r3, r0
 800679a:	461a      	mov	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
 80067a2:	e007      	b.n	80067b4 <CO_SDO_process+0xd50>
            }
            else{
                SDO->crcEnabled = false;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2755 	strb.w	r2, [r3, #1877]	; 0x755
                SDO->crc = 0;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	791a      	ldrb	r2, [r3, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d006      	beq.n	80067d8 <CO_SDO_process+0xd74>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80067ca:	49a5      	ldr	r1, [pc, #660]	; (8006a60 <CO_SDO_process+0xffc>)
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff f909 	bl	80059e4 <CO_SDO_abort>
                return -1;
 80067d2:	f04f 33ff 	mov.w	r3, #4294967295
 80067d6:	e271      	b.n	8006cbc <CO_SDO_process+0x1258>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d016      	beq.n	8006810 <CO_SDO_process+0xdac>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80067e8:	b25b      	sxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	db10      	blt.n	8006810 <CO_SDO_process+0xdac>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80067f4:	461a      	mov	r2, r3
 80067f6:	4613      	mov	r3, r2
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 8006802:	4293      	cmp	r3, r2
 8006804:	d90b      	bls.n	800681e <CO_SDO_process+0xdba>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 800680c:	2b00      	cmp	r3, #0
 800680e:	d106      	bne.n	800681e <CO_SDO_process+0xdba>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 8006810:	4994      	ldr	r1, [pc, #592]	; (8006a64 <CO_SDO_process+0x1000>)
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7ff f8e6 	bl	80059e4 <CO_SDO_abort>
                return -1;
 8006818:	f04f 33ff 	mov.w	r3, #4294967295
 800681c:	e24e      	b.n	8006cbc <CO_SDO_process+0x1258>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00f      	beq.n	8006848 <CO_SDO_process+0xde4>
                uint32_t dlentot = SDO->ODF_arg.dataLengthTotal;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 3740 	ldr.w	r3, [r3, #1856]	; 0x740
 800682e:	617b      	str	r3, [r7, #20]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &dlentot);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006836:	3309      	adds	r3, #9
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	601a      	str	r2, [r3, #0]
                SDO->CANtxBuff->data[0] = 0xC6U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006842:	22c6      	movs	r2, #198	; 0xc6
 8006844:	715a      	strb	r2, [r3, #5]
 8006846:	e004      	b.n	8006852 <CO_SDO_process+0xdee>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 800684e:	22c4      	movs	r2, #196	; 0xc4
 8006850:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	22b5      	movs	r2, #181	; 0xb5
 8006856:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
            sendResponse = true;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            break;
 8006860:	e212      	b.n	8006c88 <CO_SDO_process+0x1224>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 800686a:	2ba3      	cmp	r3, #163	; 0xa3
 800686c:	d006      	beq.n	800687c <CO_SDO_process+0xe18>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 800686e:	497c      	ldr	r1, [pc, #496]	; (8006a60 <CO_SDO_process+0xffc>)
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7ff f8b7 	bl	80059e4 <CO_SDO_abort>
                return -1;
 8006876:	f04f 33ff 	mov.w	r3, #4294967295
 800687a:	e21f      	b.n	8006cbc <CO_SDO_process+0x1258>
            }

            SDO->bufferOffset = 0U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
            SDO->sequence = 0U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
            SDO->endOfTransfer = false;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
            CO_FLAG_CLEAR(SDO->CANrxNew);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	22b6      	movs	r2, #182	; 0xb6
 80068a0:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
        }
        // fallthrough

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(CO_FLAG_READ(SDO->CANrxNew)){
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8131 	beq.w	8006b12 <CO_SDO_process+0x10ae>
                uint8_t ackseq;
                uint16_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 80068b8:	2ba2      	cmp	r3, #162	; 0xa2
 80068ba:	d006      	beq.n	80068ca <CO_SDO_process+0xe66>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80068bc:	4968      	ldr	r1, [pc, #416]	; (8006a60 <CO_SDO_process+0xffc>)
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff f890 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 80068c4:	f04f 33ff 	mov.w	r3, #4294967295
 80068c8:	e1f8      	b.n	8006cbc <CO_SDO_process+0x1258>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 80068d8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80068dc:	429a      	cmp	r2, r3
 80068de:	d906      	bls.n	80068ee <CO_SDO_process+0xe8a>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
 80068e0:	4961      	ldr	r1, [pc, #388]	; (8006a68 <CO_SDO_process+0x1004>)
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff f87e 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 80068e8:	f04f 33ff 	mov.w	r3, #4294967295
 80068ec:	e1e6      	b.n	8006cbc <CO_SDO_process+0x1258>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 375a 	ldrb.w	r3, [r3, #1882]	; 0x75a
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d02c      	beq.n	8006952 <CO_SDO_process+0xeee>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80068fe:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006902:	429a      	cmp	r2, r3
 8006904:	d125      	bne.n	8006952 <CO_SDO_process+0xeee>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 800690c:	f1c3 0307 	rsb	r3, r3, #7
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	b25b      	sxtb	r3, r3
 8006914:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8006918:	b25a      	sxtb	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <CO_SDO_process+0xede>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006934:	3306      	adds	r3, #6
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	f202 7256 	addw	r2, r2, #1878	; 0x756
 800693c:	8812      	ldrh	r2, [r2, #0]
 800693e:	b292      	uxth	r2, r2
 8006940:	801a      	strh	r2, [r3, #0]

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	22b7      	movs	r2, #183	; 0xb7
 8006946:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749

                    /* send response */
                    sendResponse = true;
 800694a:	2301      	movs	r3, #1
 800694c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                    break;
 8006950:	e19a      	b.n	8006c88 <CO_SDO_process+0x1224>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 8006952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006956:	b29b      	uxth	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	00d2      	lsls	r2, r2, #3
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006962:	2300      	movs	r3, #0
 8006964:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006968:	e017      	b.n	800699a <CO_SDO_process+0xf36>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 8006970:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006974:	441a      	add	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 1728 	ldr.w	r1, [r3, #1832]	; 0x728
 800697c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006980:	440b      	add	r3, r1
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 8006986:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800698a:	3301      	adds	r3, #1
 800698c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006990:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006994:	3301      	adds	r3, #1
 8006996:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80069a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d3e0      	bcc.n	800696a <CO_SDO_process+0xf06>

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 80069ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	4619      	mov	r1, r3
 80069b6:	00c9      	lsls	r1, r1, #3
 80069b8:	1acb      	subs	r3, r1, r3
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	789a      	ldrb	r2, [r3, #2]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d173      	bne.n	8006ac2 <CO_SDO_process+0x105e>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 80069e0:	4619      	mov	r1, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 80069e8:	461a      	mov	r2, r3
 80069ea:	4613      	mov	r3, r2
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	4299      	cmp	r1, r3
 80069f2:	d266      	bcs.n	8006ac2 <CO_SDO_process+0x105e>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d161      	bne.n	8006ac2 <CO_SDO_process+0x105e>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006a04:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
                    SDO->ODF_arg.data += len;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 8006a0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a12:	441a      	add	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8b3 1722 	ldrh.w	r1, [r3, #1826]	; 0x722
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 373a 	ldrb.w	r3, [r3, #1850]	; 0x73a
 8006a26:	461a      	mov	r2, r3
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f7fe fced 	bl	8005408 <CO_OD_getLength>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	461a      	mov	r2, r3
 8006a32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD(SDO, CO_CONFIG_SDO_BUFFER_SIZE);
 8006a40:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7fe fec3 	bl	80057d0 <CO_SDO_readOD>
 8006a4a:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00c      	beq.n	8006a6c <CO_SDO_process+0x1008>
                        CO_SDO_abort(SDO, abortCode);
 8006a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f7fe ffc5 	bl	80059e4 <CO_SDO_abort>
                        return -1;
 8006a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5e:	e12d      	b.n	8006cbc <CO_SDO_process+0x1258>
 8006a60:	05040001 	.word	0x05040001
 8006a64:	05040002 	.word	0x05040002
 8006a68:	05040003 	.word	0x05040003
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f893 3755 	ldrb.w	r3, [r3, #1877]	; 0x755
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d011      	beq.n	8006a9a <CO_SDO_process+0x1036>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8d3 0728 	ldr.w	r0, [r3, #1832]	; 0x728
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006a82:	4619      	mov	r1, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8b3 3756 	ldrh.w	r3, [r3, #1878]	; 0x756
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f000 fda2 	bl	80075d4 <crc16_ccitt>
 8006a90:	4603      	mov	r3, r0
 8006a92:	461a      	mov	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8a3 2756 	strh.w	r2, [r3, #1878]	; 0x756
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 8006aa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006aa4:	425b      	negs	r3, r3
 8006aa6:	441a      	add	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
                    SDO->ODF_arg.dataLength +=  len;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8006ab4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ab8:	4413      	add	r3, r2
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8a3 2730 	strh.w	r2, [r3, #1840]	; 0x730
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 8006ac8:	461a      	mov	r2, r3
 8006aca:	4613      	mov	r3, r2
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	f8b2 2730 	ldrh.w	r2, [r2, #1840]	; 0x730
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d90b      	bls.n	8006af2 <CO_SDO_process+0x108e>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <CO_SDO_process+0x108e>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 8006ae4:	4977      	ldr	r1, [pc, #476]	; (8006cc4 <CO_SDO_process+0x1260>)
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7fe ff7c 	bl	80059e4 <CO_SDO_abort>
                    return -1;
 8006aec:	f04f 33ff 	mov.w	r3, #4294967295
 8006af0:	e0e4      	b.n	8006cbc <CO_SDO_process+0x1258>
                }

                SDO->bufferOffset = 0U;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8a3 2720 	strh.w	r2, [r3, #1824]	; 0x720
                SDO->sequence = 0U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
                SDO->endOfTransfer = false;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a

                /* clear flag here */
                CO_FLAG_CLEAR(SDO->CANrxNew);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 274a 	ldrb.w	r2, [r3, #1866]	; 0x74a
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f893 3754 	ldrb.w	r3, [r3, #1876]	; 0x754
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d004      	beq.n	8006b2c <CO_SDO_process+0x10c8>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 375a 	ldrb.w	r3, [r3, #1882]	; 0x75a
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <CO_SDO_process+0x10cc>
                return 1;/* don't call CO_FLAG_CLEAR, so return directly */
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0c5      	b.n	8006cbc <CO_SDO_process+0x1258>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8b3 2730 	ldrh.w	r2, [r3, #1840]	; 0x730
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            if(len > 7U){
 8006b4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b4e:	2b07      	cmp	r3, #7
 8006b50:	d902      	bls.n	8006b58 <CO_SDO_process+0x10f4>
                len = 7U;
 8006b52:	2307      	movs	r3, #7
 8006b54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b5e:	e01a      	b.n	8006b96 <CO_SDO_process+0x1132>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8d3 2728 	ldr.w	r2, [r3, #1832]	; 0x728
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8b3 3720 	ldrh.w	r3, [r3, #1824]	; 0x720
 8006b6c:	1c59      	adds	r1, r3, #1
 8006b6e:	b288      	uxth	r0, r1
 8006b70:	68f9      	ldr	r1, [r7, #12]
 8006b72:	f8a1 0720 	strh.w	r0, [r1, #1824]	; 0x720
 8006b76:	18d1      	adds	r1, r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8d3 276c 	ldr.w	r2, [r3, #1900]	; 0x76c
 8006b7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b82:	3301      	adds	r3, #1
 8006b84:	7809      	ldrb	r1, [r1, #0]
 8006b86:	4413      	add	r3, r2
 8006b88:	460a      	mov	r2, r1
 8006b8a:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
 8006b8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b90:	3301      	adds	r3, #1
 8006b92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006b9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d3de      	bcc.n	8006b60 <CO_SDO_process+0x10fc>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 374a 	ldrb.w	r3, [r3, #1866]	; 0x74a
 8006ba8:	3301      	adds	r3, #1
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	f892 274a 	ldrb.w	r2, [r2, #1866]	; 0x74a
 8006bbe:	715a      	strb	r2, [r3, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8b3 2720 	ldrh.w	r2, [r3, #1824]	; 0x720
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8b3 3730 	ldrh.w	r3, [r3, #1840]	; 0x730
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d11f      	bne.n	8006c10 <CO_SDO_process+0x11ac>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 373d 	ldrb.w	r3, [r3, #1853]	; 0x73d
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d01a      	beq.n	8006c10 <CO_SDO_process+0x11ac>
                SDO->CANtxBuff->data[0] |= 0x80;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006be0:	795a      	ldrb	r2, [r3, #5]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006be8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
 8006bf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
                SDO->blksize = SDO->sequence;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 274a 	ldrb.w	r2, [r3, #1866]	; 0x74a
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
                SDO->endOfTransfer = true;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
            }

            /* send response */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8d3 2768 	ldr.w	r2, [r3, #1896]	; 0x768
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f002 fc5a 	bl	80094d8 <CO_CANsend>

#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
            /* Inform OS to call this function again without delay. */
            if (timerNext_us != NULL) {
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <CO_SDO_process+0x11cc>
                *timerNext_us = 0;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
            }
#endif

            /* don't call CO_FLAG_CLEAR, so return directly */
            return 1;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e043      	b.n	8006cbc <CO_SDO_process+0x1258>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 8006c3c:	2ba1      	cmp	r3, #161	; 0xa1
 8006c3e:	d006      	beq.n	8006c4e <CO_SDO_process+0x11ea>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006c40:	4921      	ldr	r1, [pc, #132]	; (8006cc8 <CO_SDO_process+0x1264>)
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7fe fece 	bl	80059e4 <CO_SDO_abort>
                return -1;
 8006c48:	f04f 33ff 	mov.w	r3, #4294967295
 8006c4c:	e036      	b.n	8006cbc <CO_SDO_process+0x1258>
            }

            /* finish the communication and run mainline processing again */
            SDO->state = CO_SDO_ST_IDLE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
#if (CO_CONFIG_SDO) & CO_CONFIG_FLAG_TIMERNEXT
            if (timerNext_us != NULL)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d014      	beq.n	8006c86 <CO_SDO_process+0x1222>
                *timerNext_us = 0;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]
#endif
            break;
 8006c62:	e010      	b.n	8006c86 <CO_SDO_process+0x1222>
            /* Nothing to do, this never happens. */
            break;
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
 8006c64:	4919      	ldr	r1, [pc, #100]	; (8006ccc <CO_SDO_process+0x1268>)
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7fe febc 	bl	80059e4 <CO_SDO_abort>
            return -1;
 8006c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c70:	e024      	b.n	8006cbc <CO_SDO_process+0x1258>
            break;
 8006c72:	bf00      	nop
 8006c74:	e008      	b.n	8006c88 <CO_SDO_process+0x1224>
            break;
 8006c76:	bf00      	nop
 8006c78:	e006      	b.n	8006c88 <CO_SDO_process+0x1224>
            break;
 8006c7a:	bf00      	nop
 8006c7c:	e004      	b.n	8006c88 <CO_SDO_process+0x1224>
            break;
 8006c7e:	bf00      	nop
 8006c80:	e002      	b.n	8006c88 <CO_SDO_process+0x1224>
            break;
 8006c82:	bf00      	nop
 8006c84:	e000      	b.n	8006c88 <CO_SDO_process+0x1224>
            break;
 8006c86:	bf00      	nop
        }
    }

    /* free buffer and send message */
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c
    if(sendResponse) {
 8006c90:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d009      	beq.n	8006cac <CO_SDO_process+0x1248>
        CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 2768 	ldr.w	r2, [r3, #1896]	; 0x768
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8d3 376c 	ldr.w	r3, [r3, #1900]	; 0x76c
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	f002 fc16 	bl	80094d8 <CO_CANsend>
    }

    if(SDO->state != CO_SDO_ST_IDLE){
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 3749 	ldrb.w	r3, [r3, #1865]	; 0x749
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <CO_SDO_process+0x1256>
        return 1;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <CO_SDO_process+0x1258>
    }

    return 0;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	374c      	adds	r7, #76	; 0x4c
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd90      	pop	{r4, r7, pc}
 8006cc4:	05040002 	.word	0x05040002
 8006cc8:	05040001 	.word	0x05040001
 8006ccc:	06040047 	.word	0x06040047

08006cd0 <CO_getUint32>:
static inline uint32_t CO_getUint32(const uint8_t data[]){
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
    memcpy(&value, data, sizeof(value));
 8006cdc:	60fb      	str	r3, [r7, #12]
    return value;
 8006cde:	68fb      	ldr	r3, [r7, #12]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC;
    CO_NMT_internalState_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	617b      	str	r3, [r7, #20]
    operState = *SYNC->operatingState;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	74fb      	strb	r3, [r7, #19]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
 8006d02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d003      	beq.n	8006d12 <CO_SYNC_receive+0x26>
 8006d0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d10:	d143      	bne.n	8006d9a <CO_SYNC_receive+0xae>
        uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d18:	74bb      	strb	r3, [r7, #18]

        if(SYNC->counterOverflowValue == 0){
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	7d1b      	ldrb	r3, [r3, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10e      	bne.n	8006d40 <CO_SYNC_receive+0x54>
            if(DLC == 0U){
 8006d22:	7cbb      	ldrb	r3, [r7, #18]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <CO_SYNC_receive+0x44>
                CO_FLAG_SET(SYNC->CANrxNew);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	619a      	str	r2, [r3, #24]
 8006d2e:	e01c      	b.n	8006d6a <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)DLC | 0x0100U;
 8006d30:	7cbb      	ldrb	r3, [r7, #18]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	849a      	strh	r2, [r3, #36]	; 0x24
 8006d3e:	e014      	b.n	8006d6a <CO_SYNC_receive+0x7e>
            }
        }
        else{
            if(DLC == 1U){
 8006d40:	7cbb      	ldrb	r3, [r7, #18]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d10a      	bne.n	8006d5c <CO_SYNC_receive+0x70>
                uint8_t *data = CO_CANrxMsg_readData(msg);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	3321      	adds	r3, #33	; 0x21
 8006d4a:	60fb      	str	r3, [r7, #12]
                SYNC->counter = data[0];
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	775a      	strb	r2, [r3, #29]
                CO_FLAG_SET(SYNC->CANrxNew);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2201      	movs	r2, #1
 8006d58:	619a      	str	r2, [r3, #24]
 8006d5a:	e006      	b.n	8006d6a <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)DLC | 0x0200U;
 8006d5c:	7cbb      	ldrb	r3, [r7, #18]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	849a      	strh	r2, [r3, #36]	; 0x24
            }
        }
        if(CO_FLAG_READ(SYNC->CANrxNew)) {
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d013      	beq.n	8006d9a <CO_SYNC_receive+0xae>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	7f1b      	ldrb	r3, [r3, #28]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bf0c      	ite	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	2300      	movne	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	461a      	mov	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	771a      	strb	r2, [r3, #28]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_CALLBACK_PRE
            /* Optional signal to RTOS, which can resume task, which handles SYNC. */
            if(SYNC->pFunctSignalPre != NULL) {
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d005      	beq.n	8006d9a <CO_SYNC_receive+0xae>
                SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d96:	4610      	mov	r0, r2
 8006d98:	4798      	blx	r3
            }
#endif
        }
    }
}
 8006d9a:	bf00      	nop
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <CO_ODF_1005>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08c      	sub	sp, #48	; 0x30
 8006da8:	af04      	add	r7, sp, #16
 8006daa:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	61fb      	str	r3, [r7, #28]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	617b      	str	r3, [r7, #20]
    value = CO_getUint32(ODF_arg->data);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff ff88 	bl	8006cd0 <CO_getUint32>
 8006dc0:	6138      	str	r0, [r7, #16]

    if(!ODF_arg->reading){
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	7ddb      	ldrb	r3, [r3, #23]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d16f      	bne.n	8006eaa <CO_ODF_1005+0x106>
        uint8_t configureSyncProducer = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	76fb      	strb	r3, [r7, #27]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <CO_ODF_1005+0x3a>
            ret = CO_SDO_AB_INVALID_VALUE;
 8006dd8:	4b36      	ldr	r3, [pc, #216]	; (8006eb4 <CO_ODF_1005+0x110>)
 8006dda:	61fb      	str	r3, [r7, #28]
 8006ddc:	e00d      	b.n	8006dfa <CO_ODF_1005+0x56>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <CO_ODF_1005+0x56>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	7a1b      	ldrb	r3, [r3, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <CO_ODF_1005+0x52>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
 8006df0:	4b31      	ldr	r3, [pc, #196]	; (8006eb8 <CO_ODF_1005+0x114>)
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	e001      	b.n	8006dfa <CO_ODF_1005+0x56>
                }
                else{
                    configureSyncProducer = 1;
 8006df6:	2301      	movs	r3, #1
 8006df8:	76fb      	strb	r3, [r7, #27]
                }
            }
        }

        /* configure sync producer */
        if(ret == CO_SDO_AB_NONE){
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d139      	bne.n	8006e74 <CO_ODF_1005+0xd0>
            SYNC->COB_ID = (uint16_t)(value & 0x7FFU);
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	815a      	strh	r2, [r3, #10]

            if(configureSyncProducer){
 8006e0e:	7efb      	ldrb	r3, [r7, #27]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d02c      	beq.n	8006e6e <CO_ODF_1005+0xca>
                uint8_t len = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	76bb      	strb	r3, [r7, #26]
                if(SYNC->counterOverflowValue != 0U){
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	7d1b      	ldrb	r3, [r3, #20]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d007      	beq.n	8006e30 <CO_ODF_1005+0x8c>
                    len = 1U;
 8006e20:	2301      	movs	r3, #1
 8006e22:	76bb      	strb	r3, [r7, #26]
                    SYNC->counter = 0U;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2200      	movs	r2, #0
 8006e28:	775a      	strb	r2, [r3, #29]
                    SYNC->timer = 0U;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = CO_CANtxBufferInit(
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	895a      	ldrh	r2, [r3, #10]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	7ebb      	ldrb	r3, [r7, #26]
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	2300      	movs	r3, #0
 8006e48:	f002 fb06 	bl	8009458 <CO_CANtxBufferInit>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	63da      	str	r2, [r3, #60]	; 0x3c
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */

                if (SYNC->CANtxBuff == NULL) {
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d105      	bne.n	8006e66 <CO_ODF_1005+0xc2>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
 8006e5a:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <CO_ODF_1005+0x114>)
 8006e5c:	61fb      	str	r3, [r7, #28]
                    SYNC->isProducer = false;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2200      	movs	r2, #0
 8006e62:	721a      	strb	r2, [r3, #8]
 8006e64:	e006      	b.n	8006e74 <CO_ODF_1005+0xd0>
                } else {
                    SYNC->isProducer = true;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	721a      	strb	r2, [r3, #8]
 8006e6c:	e002      	b.n	8006e74 <CO_ODF_1005+0xd0>
                }
            }
            else{
                SYNC->isProducer = false;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2200      	movs	r2, #0
 8006e72:	721a      	strb	r2, [r3, #8]
            }
        }

        /* configure sync consumer */
        if (ret == CO_SDO_AB_NONE) {
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d117      	bne.n	8006eaa <CO_ODF_1005+0x106>
            CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	895a      	ldrh	r2, [r3, #10]
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <CO_ODF_1005+0x118>)
 8006e88:	9302      	str	r3, [sp, #8]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006e96:	f002 fa89 	bl	80093ac <CO_CANrxBufferInit>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73fb      	strb	r3, [r7, #15]
                0x7FF,                  /* mask */
                0,                      /* rtr */
                (void*)SYNC,            /* object passed to receive function */
                CO_SYNC_receive);       /* this function will process received message */

            if (CANret != CO_ERROR_NO) {
 8006e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <CO_ODF_1005+0x106>
                ret = CO_SDO_AB_DATA_DEV_STATE;
 8006ea6:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <CO_ODF_1005+0x114>)
 8006ea8:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    return ret;
 8006eaa:	69fb      	ldr	r3, [r7, #28]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3720      	adds	r7, #32
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	06090030 	.word	0x06090030
 8006eb8:	08000022 	.word	0x08000022
 8006ebc:	08006ced 	.word	0x08006ced

08006ec0 <CO_ODF_1006>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff fefa 	bl	8006cd0 <CO_getUint32>
 8006edc:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	7ddb      	ldrb	r3, [r3, #23]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d11f      	bne.n	8006f26 <CO_ODF_1006+0x66>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d105      	bne.n	8006efa <CO_ODF_1006+0x3a>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <CO_ODF_1006+0x3a>
            SYNC->counter = 0;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	775a      	strb	r2, [r3, #29]
        }

        SYNC->periodTime = value;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	60da      	str	r2, [r3, #12]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	085a      	lsrs	r2, r3, #1
 8006f04:	4613      	mov	r3, r2
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	441a      	add	r2, r3
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	611a      	str	r2, [r3, #16]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d903      	bls.n	8006f20 <CO_ODF_1006+0x60>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1e:	611a      	str	r2, [r3, #16]
        }

        SYNC->timer = 0;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2200      	movs	r2, #0
 8006f24:	621a      	str	r2, [r3, #32]
    }

    return ret;
 8006f26:	697b      	ldr	r3, [r7, #20]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <CO_ODF_1019>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDOserver.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7ddb      	ldrb	r3, [r3, #23]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d130      	bne.n	8006fb4 <CO_ODF_1019+0x84>
        uint8_t len = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <CO_ODF_1019+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
 8006f5e:	4b18      	ldr	r3, [pc, #96]	; (8006fc0 <CO_ODF_1019+0x90>)
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	e027      	b.n	8006fb4 <CO_ODF_1019+0x84>
        }
        else if((value == 1) || (value > 240)){
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d002      	beq.n	8006f70 <CO_ODF_1019+0x40>
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	2bf0      	cmp	r3, #240	; 0xf0
 8006f6e:	d902      	bls.n	8006f76 <CO_ODF_1019+0x46>
            ret = CO_SDO_AB_INVALID_VALUE;
 8006f70:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <CO_ODF_1019+0x94>)
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	e01e      	b.n	8006fb4 <CO_ODF_1019+0x84>
        }
        else{
            SYNC->counterOverflowValue = value;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	7afa      	ldrb	r2, [r7, #11]
 8006f7a:	751a      	strb	r2, [r3, #20]
            if(value != 0){
 8006f7c:	7afb      	ldrb	r3, [r7, #11]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <CO_ODF_1019+0x56>
                len = 1U;
 8006f82:	2301      	movs	r3, #1
 8006f84:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff = CO_CANtxBufferInit(
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	895a      	ldrh	r2, [r3, #10]
 8006f94:	2300      	movs	r3, #0
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	7cfb      	ldrb	r3, [r7, #19]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f002 fa5b 	bl	8009458 <CO_CANtxBufferInit>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	63da      	str	r2, [r3, #60]	; 0x3c
                    SYNC->COB_ID,           /* CAN identifier */
                    0,                      /* rtr */
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */

            if (SYNC->CANtxBuff == NULL) {
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <CO_ODF_1019+0x84>
                ret = CO_SDO_AB_DATA_DEV_STATE;
 8006fb0:	4b03      	ldr	r3, [pc, #12]	; (8006fc0 <CO_ODF_1019+0x90>)
 8006fb2:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return ret;
 8006fb4:	697b      	ldr	r3, [r7, #20]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	08000022 	.word	0x08000022
 8006fc4:	06090030 	.word	0x06090030

08006fc8 <CO_SYNC_init>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af04      	add	r7, sp, #16
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	75fb      	strb	r3, [r7, #23]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	75bb      	strb	r3, [r7, #22]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00e      	beq.n	8007002 <CO_SYNC_init+0x3a>
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00b      	beq.n	8007002 <CO_SYNC_init+0x3a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <CO_SYNC_init+0x3a>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <CO_SYNC_init+0x3a>
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <CO_SYNC_init+0x3a>
        CANdevRx==NULL || CANdevTx==NULL){
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d102      	bne.n	8007008 <CO_SYNC_init+0x40>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007002:	f04f 33ff 	mov.w	r3, #4294967295
 8007006:	e09d      	b.n	8007144 <CO_SYNC_init+0x17c>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	0f9b      	lsrs	r3, r3, #30
 800700c:	b2db      	uxtb	r3, r3
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	b2da      	uxtb	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	815a      	strh	r2, [r3, #10]

    SYNC->periodTime = communicationCyclePeriod;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702a:	60da      	str	r2, [r3, #12]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	085a      	lsrs	r2, r3, #1
 8007030:	4613      	mov	r3, r2
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	441a      	add	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	611a      	str	r2, [r3, #16]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007040:	429a      	cmp	r2, r3
 8007042:	d903      	bls.n	800704c <CO_SYNC_init+0x84>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f04f 32ff 	mov.w	r2, #4294967295
 800704a:	611a      	str	r2, [r3, #16]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007052:	751a      	strb	r2, [r3, #20]
    if(synchronousCounterOverflowValue) len = 1;
 8007054:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <CO_SYNC_init+0x98>
 800705c:	2301      	movs	r3, #1
 800705e:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	755a      	strb	r2, [r3, #21]

    CO_FLAG_CLEAR(SYNC->CANrxNew);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = false;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	771a      	strb	r2, [r3, #28]
    SYNC->timer = 0;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	775a      	strb	r2, [r3, #29]
    SYNC->receiveError = 0U;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	849a      	strh	r2, [r3, #36]	; 0x24

    SYNC->em = em;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800709a:	869a      	strh	r2, [r3, #52]	; 0x34

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_CALLBACK_PRE
    SYNC->pFunctSignalPre = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->functSignalObjectPre = NULL;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    CO_OD_configure(SDO, OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
 80070a8:	2300      	movs	r3, #0
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	2300      	movs	r3, #0
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4a26      	ldr	r2, [pc, #152]	; (800714c <CO_SYNC_init+0x184>)
 80070b4:	f241 0105 	movw	r1, #4101	; 0x1005
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7fe f8f5 	bl	80052a8 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
 80070be:	2300      	movs	r3, #0
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	2300      	movs	r3, #0
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4a21      	ldr	r2, [pc, #132]	; (8007150 <CO_SYNC_init+0x188>)
 80070ca:	f241 0106 	movw	r1, #4102	; 0x1006
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fe f8ea 	bl	80052a8 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
 80070d4:	2300      	movs	r3, #0
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	2300      	movs	r3, #0
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a1d      	ldr	r2, [pc, #116]	; (8007154 <CO_SYNC_init+0x18c>)
 80070e0:	f241 0119 	movw	r1, #4121	; 0x1019
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7fe f8df 	bl	80052a8 <CO_OD_configure>

    /* configure SYNC CAN reception */
    ret = CO_CANrxBufferInit(
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	895a      	ldrh	r2, [r3, #10]
 80070ee:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80070f0:	4b19      	ldr	r3, [pc, #100]	; (8007158 <CO_SYNC_init+0x190>)
 80070f2:	9302      	str	r3, [sp, #8]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	2300      	movs	r3, #0
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007102:	f002 f953 	bl	80093ac <CO_CANrxBufferInit>
 8007106:	4603      	mov	r3, r0
 8007108:	75bb      	strb	r3, [r7, #22]
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800710e:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	895a      	ldrh	r2, [r3, #10]
 800711c:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800711e:	2300      	movs	r3, #0
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	7dfb      	ldrb	r3, [r7, #23]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	2300      	movs	r3, #0
 8007128:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800712a:	f002 f995 	bl	8009458 <CO_CANtxBufferInit>
 800712e:	4602      	mov	r2, r0
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	63da      	str	r2, [r3, #60]	; 0x3c
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <CO_SYNC_init+0x178>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800713c:	23ff      	movs	r3, #255	; 0xff
 800713e:	75bb      	strb	r3, [r7, #22]
    }

    return ret;
 8007140:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	08006da5 	.word	0x08006da5
 8007150:	08006ec1 	.word	0x08006ec1
 8007154:	08006f31 	.word	0x08006f31
 8007158:	08006ced 	.word	0x08006ced

0800715c <CO_SYNC_process>:
CO_SYNC_status_t CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength,
        uint32_t               *timerNext_us)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	603b      	str	r3, [r7, #0]
    CO_SYNC_status_t ret = CO_SYNC_NONE;
 800716a:	2300      	movs	r3, #0
 800716c:	77fb      	strb	r3, [r7, #31]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f993 3000 	ldrsb.w	r3, [r3]
 8007176:	2b05      	cmp	r3, #5
 8007178:	d006      	beq.n	8007188 <CO_SYNC_process+0x2c>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f993 3000 	ldrsb.w	r3, [r3]
 8007182:	2b7f      	cmp	r3, #127	; 0x7f
 8007184:	f040 80a8 	bne.w	80072d8 <CO_SYNC_process+0x17c>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	4413      	add	r3, r2
 8007190:	61bb      	str	r3, [r7, #24]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	429a      	cmp	r2, r3
 800719a:	d902      	bls.n	80071a2 <CO_SYNC_process+0x46>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	621a      	str	r2, [r3, #32]

        /* was SYNC just received */
        if(CO_FLAG_READ(SYNC->CANrxNew)){
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d007      	beq.n	80071ba <CO_SYNC_process+0x5e>
            SYNC->timer = 0;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	621a      	str	r2, [r3, #32]
            ret = CO_SYNC_RECEIVED;
 80071b0:	2301      	movs	r3, #1
 80071b2:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	619a      	str	r2, [r3, #24]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	7a1b      	ldrb	r3, [r3, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d045      	beq.n	800724e <CO_SYNC_process+0xf2>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d041      	beq.n	800724e <CO_SYNC_process+0xf2>
            if(SYNC->timer >= SYNC->periodTime){
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a1a      	ldr	r2, [r3, #32]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d32a      	bcc.n	800722c <CO_SYNC_process+0xd0>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	7f5b      	ldrb	r3, [r3, #29]
 80071da:	3301      	adds	r3, #1
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	775a      	strb	r2, [r3, #29]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	7f5a      	ldrb	r2, [r3, #29]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	7d1b      	ldrb	r3, [r3, #20]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d902      	bls.n	80071f4 <CO_SYNC_process+0x98>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	775a      	strb	r2, [r3, #29]
                SYNC->timer = 0;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	621a      	str	r2, [r3, #32]
                ret = CO_SYNC_RECEIVED;
 80071fa:	2301      	movs	r3, #1
 80071fc:	77fb      	strb	r3, [r7, #31]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	7f1b      	ldrb	r3, [r3, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	bf0c      	ite	eq
 8007206:	2301      	moveq	r3, #1
 8007208:	2300      	movne	r3, #0
 800720a:	b2db      	uxtb	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	771a      	strb	r2, [r3, #28]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	7f52      	ldrb	r2, [r2, #29]
 800721a:	715a      	strb	r2, [r3, #5]
                CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007224:	4619      	mov	r1, r3
 8007226:	4610      	mov	r0, r2
 8007228:	f002 f956 	bl	80094d8 <CO_CANsend>
            }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_TIMERNEXT
            /* Calculate when next SYNC needs to be sent */
            if(timerNext_us != NULL){
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00d      	beq.n	800724e <CO_SYNC_process+0xf2>
                uint32_t diff = SYNC->periodTime - SYNC->timer;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	617b      	str	r3, [r7, #20]
                if(*timerNext_us > diff){
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	429a      	cmp	r2, r3
 8007246:	d202      	bcs.n	800724e <CO_SYNC_process+0xf2>
                    *timerNext_us = diff;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	601a      	str	r2, [r3, #0]
            }
#endif
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d012      	beq.n	800727a <CO_SYNC_process+0x11e>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	429a      	cmp	r2, r3
 800725c:	d209      	bcs.n	8007272 <CO_SYNC_process+0x116>
                if(SYNC->curentSyncTimeIsInsideWindow){
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	7d5b      	ldrb	r3, [r3, #21]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <CO_SYNC_process+0x10e>
                    ret = CO_SYNC_OUTSIDE_WINDOW;
 8007266:	2302      	movs	r3, #2
 8007268:	77fb      	strb	r3, [r7, #31]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	755a      	strb	r2, [r3, #21]
 8007270:	e006      	b.n	8007280 <CO_SYNC_process+0x124>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2201      	movs	r2, #1
 8007276:	755a      	strb	r2, [r3, #21]
 8007278:	e002      	b.n	8007280 <CO_SYNC_process+0x124>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	755a      	strb	r2, [r3, #21]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d02b      	beq.n	80072e0 <CO_SYNC_process+0x184>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f993 3000 	ldrsb.w	r3, [r3]
 8007290:	2b05      	cmp	r3, #5
 8007292:	d125      	bne.n	80072e0 <CO_SYNC_process+0x184>
            if(SYNC->timer > SYNC->periodTimeoutTime) {
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a1a      	ldr	r2, [r3, #32]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	429a      	cmp	r2, r3
 800729e:	d909      	bls.n	80072b4 <CO_SYNC_process+0x158>
                CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80072ac:	2118      	movs	r1, #24
 80072ae:	f7fb fcd8 	bl	8002c62 <CO_errorReport>
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 80072b2:	e015      	b.n	80072e0 <CO_SYNC_process+0x184>
            }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_TIMERNEXT
            else if(timerNext_us != NULL) {
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d012      	beq.n	80072e0 <CO_SYNC_process+0x184>
                uint32_t diff = SYNC->periodTimeoutTime - SYNC->timer;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	613b      	str	r3, [r7, #16]
                if(*timerNext_us > diff){
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d207      	bcs.n	80072e0 <CO_SYNC_process+0x184>
                    *timerNext_us = diff;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	601a      	str	r2, [r3, #0]
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 80072d6:	e003      	b.n	80072e0 <CO_SYNC_process+0x184>
            }
#endif
        }
    }
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	619a      	str	r2, [r3, #24]
 80072de:	e000      	b.n	80072e2 <CO_SYNC_process+0x186>
        if(SYNC->periodTime && *SYNC->operatingState == CO_NMT_OPERATIONAL) {
 80072e0:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00b      	beq.n	8007302 <CO_SYNC_process+0x1a6>
        CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6818      	ldr	r0, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072f2:	f248 2240 	movw	r2, #33344	; 0x8240
 80072f6:	2119      	movs	r1, #25
 80072f8:	f7fb fcb3 	bl	8002c62 <CO_errorReport>
        SYNC->receiveError = 0U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    return ret;
 8007302:	7ffb      	ldrb	r3, [r7, #31]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <CO_TIME_receive>:
 * Read received message from CAN module.
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received.
 */
static void CO_TIME_receive(void *object, void *msg){
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME;
    CO_NMT_internalState_t operState;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800731c:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	3321      	adds	r3, #33	; 0x21
 8007322:	613b      	str	r3, [r7, #16]

    TIME = (CO_TIME_t*)object;   /* this is the correct pointer type of the first argument */
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	60fb      	str	r3, [r7, #12]
    operState = *TIME->operatingState;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
 8007330:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007334:	2b05      	cmp	r3, #5
 8007336:	d003      	beq.n	8007340 <CO_TIME_receive+0x34>
 8007338:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800733c:	2b7f      	cmp	r3, #127	; 0x7f
 800733e:	d114      	bne.n	800736a <CO_TIME_receive+0x5e>
        // Process Time from msg buffer
        memcpy(&TIME->Time.ullValue, data, DLC);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3340      	adds	r3, #64	; 0x40
 8007344:	7dfa      	ldrb	r2, [r7, #23]
 8007346:	6939      	ldr	r1, [r7, #16]
 8007348:	4618      	mov	r0, r3
 800734a:	f010 f8c3 	bl	80174d4 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	615a      	str	r2, [r3, #20]

#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_CALLBACK_PRE
        /* Optional signal to RTOS, which can resume task, which handles TIME. */
        if(TIME->pFunctSignalPre != NULL) {
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <CO_TIME_receive+0x68>
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007364:	4610      	mov	r0, r2
 8007366:	4798      	blx	r3
        if(TIME->pFunctSignalPre != NULL) {
 8007368:	e004      	b.n	8007374 <CO_TIME_receive+0x68>
        }
#endif
    }
    else{
        TIME->receiveError = (uint16_t)DLC;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	b29a      	uxth	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	839a      	strh	r2, [r3, #28]
    }
}
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <CO_TIME_init>:
        uint32_t                TIMECyclePeriod,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	; 0x28
 8007380:	af04      	add	r7, sp, #16
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800738a:	2300      	movs	r3, #0
 800738c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(TIME==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00e      	beq.n	80073b2 <CO_TIME_init+0x36>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00b      	beq.n	80073b2 <CO_TIME_init+0x36>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <CO_TIME_init+0x36>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <CO_TIME_init+0x36>
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <CO_TIME_init+0x36>
    CANdevRx==NULL || CANdevTx==NULL){
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <CO_TIME_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80073b2:	f04f 33ff 	mov.w	r3, #4294967295
 80073b6:	e075      	b.n	80074a4 <CO_TIME_init+0x128>
    }

    /* Configure object variables */
    TIME->isConsumer = (COB_ID_TIMEMessage&0x80000000L) ? true : false;
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	0fdb      	lsrs	r3, r3, #31
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	721a      	strb	r2, [r3, #8]
    TIME->isProducer = (COB_ID_TIMEMessage&0x40000000L) ? true : false;
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	0f9b      	lsrs	r3, r3, #30
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	725a      	strb	r2, [r3, #9]
    TIME->COB_ID = COB_ID_TIMEMessage&0x7FF; // 11 bit ID
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	815a      	strh	r2, [r3, #10]

    TIME->periodTime = TIMECyclePeriod;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e4:	60da      	str	r2, [r3, #12]
    TIME->periodTimeoutTime = TIMECyclePeriod / 2 * 3;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	085a      	lsrs	r2, r3, #1
 80073ea:	4613      	mov	r3, r2
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	441a      	add	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	611a      	str	r2, [r3, #16]
    /* overflow? */
    if(TIME->periodTimeoutTime < TIMECyclePeriod)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d903      	bls.n	8007406 <CO_TIME_init+0x8a>
        TIME->periodTimeoutTime = 0xFFFFFFFFL;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f04f 32ff 	mov.w	r2, #4294967295
 8007404:	611a      	str	r2, [r3, #16]

    CO_FLAG_CLEAR(TIME->CANrxNew);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	615a      	str	r2, [r3, #20]
    TIME->timer = 0;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	619a      	str	r2, [r3, #24]
    TIME->receiveError = 0U;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	839a      	strh	r2, [r3, #28]

    TIME->em = em;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	601a      	str	r2, [r3, #0]
    TIME->operatingState = operatingState;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	605a      	str	r2, [r3, #4]

#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_CALLBACK_PRE
    TIME->pFunctSignalPre = NULL;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	621a      	str	r2, [r3, #32]
    TIME->functSignalObjectPre = NULL;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	625a      	str	r2, [r3, #36]	; 0x24
#endif


    /* configure TIME consumer message reception */
    TIME->CANdevRx = CANdevRx;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007434:	629a      	str	r2, [r3, #40]	; 0x28
    TIME->CANdevRxIdx = CANdevRxIdx;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800743a:	859a      	strh	r2, [r3, #44]	; 0x2c
	if (TIME->isConsumer) {
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	7a1b      	ldrb	r3, [r3, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00f      	beq.n	8007464 <CO_TIME_init+0xe8>
        ret = CO_CANrxBufferInit(
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	895a      	ldrh	r2, [r3, #10]
 8007448:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800744a:	4b18      	ldr	r3, [pc, #96]	; (80074ac <CO_TIME_init+0x130>)
 800744c:	9302      	str	r3, [sp, #8]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	2300      	movs	r3, #0
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800745a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800745c:	f001 ffa6 	bl	80093ac <CO_CANrxBufferInit>
 8007460:	4603      	mov	r3, r0
 8007462:	75fb      	strb	r3, [r7, #23]
                (void*)TIME,            /* object passed to receive function */
                CO_TIME_receive);       /* this function will process received message */
    }

    /* configure TIME producer message transmission */
    TIME->CANdevTx = CANdevTx;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007468:	631a      	str	r2, [r3, #48]	; 0x30
    TIME->CANdevTxIdx = CANdevTxIdx;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800746e:	869a      	strh	r2, [r3, #52]	; 0x34
    if (TIME->isProducer) {
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	7a5b      	ldrb	r3, [r3, #9]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d013      	beq.n	80074a0 <CO_TIME_init+0x124>
        TIME->TXbuff = CO_CANtxBufferInit(
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	895a      	ldrh	r2, [r3, #10]
 800747c:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800747e:	2300      	movs	r3, #0
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	2306      	movs	r3, #6
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	2300      	movs	r3, #0
 8007488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800748a:	f001 ffe5 	bl	8009458 <CO_CANtxBufferInit>
 800748e:	4602      	mov	r2, r0
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	639a      	str	r2, [r3, #56]	; 0x38
            TIME->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            TIME_MSG_LENGTH,        /* number of data bytes */
            0);                     /* synchronous message flag bit */

        if (TIME->TXbuff == NULL) {
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <CO_TIME_init+0x124>
            ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800749c:	23ff      	movs	r3, #255	; 0xff
 800749e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
 80074a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	0800730d 	.word	0x0800730d

080074b0 <CO_TIME_process>:

/******************************************************************************/
uint8_t CO_TIME_process(
        CO_TIME_t              *TIME,
        uint32_t                timeDifference_us)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
    uint8_t ret = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*TIME->operatingState == CO_NMT_OPERATIONAL || *TIME->operatingState == CO_NMT_PRE_OPERATIONAL){
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f993 3000 	ldrsb.w	r3, [r3]
 80074c6:	2b05      	cmp	r3, #5
 80074c8:	d005      	beq.n	80074d6 <CO_TIME_process+0x26>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f993 3000 	ldrsb.w	r3, [r3]
 80074d2:	2b7f      	cmp	r3, #127	; 0x7f
 80074d4:	d162      	bne.n	800759c <CO_TIME_process+0xec>
        /* update TIME timer, no overflow */
        uint32_t timeDifference_ms = (timeDifference_us+500) / 1000; //this should be optimized
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80074dc:	4a3c      	ldr	r2, [pc, #240]	; (80075d0 <CO_TIME_process+0x120>)
 80074de:	fba2 2303 	umull	r2, r3, r2, r3
 80074e2:	099b      	lsrs	r3, r3, #6
 80074e4:	613b      	str	r3, [r7, #16]
        timerNew = TIME->timer + timeDifference_ms;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	4413      	add	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
        if(timerNew > TIME->timer)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d902      	bls.n	8007500 <CO_TIME_process+0x50>
            TIME->timer = timerNew;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	619a      	str	r2, [r3, #24]

        /* was TIME just received */
        if(CO_FLAG_READ(TIME->CANrxNew)){
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d007      	beq.n	8007518 <CO_TIME_process+0x68>
            TIME->timer = 0;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	619a      	str	r2, [r3, #24]
            ret = 1;
 800750e:	2301      	movs	r3, #1
 8007510:	75fb      	strb	r3, [r7, #23]
            CO_FLAG_CLEAR(TIME->CANrxNew);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	615a      	str	r2, [r3, #20]
        }

        /* TIME producer */
        if(TIME->isProducer && TIME->periodTime){
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7a5b      	ldrb	r3, [r3, #9]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01f      	beq.n	8007560 <CO_TIME_process+0xb0>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01b      	beq.n	8007560 <CO_TIME_process+0xb0>
            if(TIME->timer >= TIME->periodTime){
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699a      	ldr	r2, [r3, #24]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	429a      	cmp	r2, r3
 8007532:	d315      	bcc.n	8007560 <CO_TIME_process+0xb0>
                TIME->timer = 0;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	619a      	str	r2, [r3, #24]
                ret = 1;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
                memcpy(TIME->TXbuff->data, &TIME->Time.ullValue, TIME_MSG_LENGTH);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	1d58      	adds	r0, r3, #5
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3340      	adds	r3, #64	; 0x40
 8007548:	2206      	movs	r2, #6
 800754a:	4619      	mov	r1, r3
 800754c:	f00f ffc2 	bl	80174d4 <memcpy>
                CO_CANsend(TIME->CANdevTx, TIME->TXbuff);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	4619      	mov	r1, r3
 800755a:	4610      	mov	r0, r2
 800755c:	f001 ffbc 	bl	80094d8 <CO_CANsend>
            }
        }

        /* Verify TIME timeout if node is consumer */
        if(TIME->isConsumer && TIME->periodTime && TIME->timer > TIME->periodTimeoutTime
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	7a1b      	ldrb	r3, [r3, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01d      	beq.n	80075a4 <CO_TIME_process+0xf4>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d019      	beq.n	80075a4 <CO_TIME_process+0xf4>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	429a      	cmp	r2, r3
 800757a:	d913      	bls.n	80075a4 <CO_TIME_process+0xf4>
        && *TIME->operatingState == CO_NMT_OPERATIONAL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f993 3000 	ldrsb.w	r3, [r3]
 8007584:	2b05      	cmp	r3, #5
 8007586:	d10d      	bne.n	80075a4 <CO_TIME_process+0xf4>
            CO_errorReport(TIME->em, CO_EM_TIME_TIMEOUT, CO_EMC_COMMUNICATION, TIME->timer);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8007594:	2109      	movs	r1, #9
 8007596:	f7fb fb64 	bl	8002c62 <CO_errorReport>
    if(*TIME->operatingState == CO_NMT_OPERATIONAL || *TIME->operatingState == CO_NMT_PRE_OPERATIONAL){
 800759a:	e003      	b.n	80075a4 <CO_TIME_process+0xf4>
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	615a      	str	r2, [r3, #20]
 80075a2:	e000      	b.n	80075a6 <CO_TIME_process+0xf6>
    if(*TIME->operatingState == CO_NMT_OPERATIONAL || *TIME->operatingState == CO_NMT_PRE_OPERATIONAL){
 80075a4:	bf00      	nop
    }

    /* verify error from receive function */
    if(TIME->receiveError != 0U){
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	8b9b      	ldrh	r3, [r3, #28]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00b      	beq.n	80075c6 <CO_TIME_process+0x116>
        CO_errorReport(TIME->em, CO_EM_TIME_LENGTH, CO_EMC_TIME_DATA_LENGTH, (uint32_t)TIME->receiveError);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	8b9b      	ldrh	r3, [r3, #28]
 80075b6:	f248 2260 	movw	r2, #33376	; 0x8260
 80075ba:	210a      	movs	r1, #10
 80075bc:	f7fb fb51 	bl	8002c62 <CO_errorReport>
        TIME->receiveError = 0U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	839a      	strh	r2, [r3, #28]
    }

    return ret;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	10624dd3 	.word	0x10624dd3

080075d4 <crc16_ccitt>:
/******************************************************************************/
unsigned short crc16_ccitt(
        const unsigned char     block[],
        unsigned int            blockLength,
        unsigned short          crc)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	4613      	mov	r3, r2
 80075e0:	80fb      	strh	r3, [r7, #6]
    unsigned int i;

    for(i=0U; i<blockLength; i++){
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	e015      	b.n	8007614 <crc16_ccitt+0x40>
        unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
 80075e8:	88fb      	ldrh	r3, [r7, #6]
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	440b      	add	r3, r1
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	4053      	eors	r3, r2
 80075fa:	827b      	strh	r3, [r7, #18]
        crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	021b      	lsls	r3, r3, #8
 8007600:	b29a      	uxth	r2, r3
 8007602:	8a7b      	ldrh	r3, [r7, #18]
 8007604:	4909      	ldr	r1, [pc, #36]	; (800762c <crc16_ccitt+0x58>)
 8007606:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800760a:	4053      	eors	r3, r2
 800760c:	80fb      	strh	r3, [r7, #6]
    for(i=0U; i<blockLength; i++){
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	3301      	adds	r3, #1
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	429a      	cmp	r2, r3
 800761a:	d3e5      	bcc.n	80075e8 <crc16_ccitt+0x14>
    }
    return crc;
 800761c:	88fb      	ldrh	r3, [r7, #6]
}
 800761e:	4618      	mov	r0, r3
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	08018b64 	.word	0x08018b64

08007630 <PP_reset>:
}DS402_PP_Data_t;

DS402_PP_Data_t g_MotorPPData;

void PP_reset()
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
	g_MotorPPData.reachWindow = 32;
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <PP_reset+0x1c>)
 8007636:	2220      	movs	r2, #32
 8007638:	605a      	str	r2, [r3, #4]
	g_MotorPPData.status = DS402_PP_None;
 800763a:	4b04      	ldr	r3, [pc, #16]	; (800764c <PP_reset+0x1c>)
 800763c:	2200      	movs	r2, #0
 800763e:	721a      	strb	r2, [r3, #8]
}
 8007640:	bf00      	nop
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000a00 	.word	0x20000a00

08007650 <PP_setSpeed>:

void PP_setSpeed(uint32_t speed)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	g_MotorPPData.speed = speed;
 8007658:	4a04      	ldr	r2, [pc, #16]	; (800766c <PP_setSpeed+0x1c>)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6013      	str	r3, [r2, #0]
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	20000a00 	.word	0x20000a00

08007670 <PP_Init>:

void PP_Init(uint32_t speed)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	PP_setSpeed(speed);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff ffe9 	bl	8007650 <PP_setSpeed>
	g_MotorPPData.targetReachedCB = NULL;
 800767e:	4b04      	ldr	r3, [pc, #16]	; (8007690 <PP_Init+0x20>)
 8007680:	2200      	movs	r2, #0
 8007682:	60da      	str	r2, [r3, #12]

	PP_reset();
 8007684:	f7ff ffd4 	bl	8007630 <PP_reset>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20000a00 	.word	0x20000a00

08007694 <PP_setTargetReachedCallback>:

void PP_setTargetReachedCallback(void (*pfunct)(int32_t position))
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
	g_MotorPPData.targetReachedCB = pfunct;
 800769c:	4a04      	ldr	r2, [pc, #16]	; (80076b0 <PP_setTargetReachedCallback+0x1c>)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60d3      	str	r3, [r2, #12]
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	20000a00 	.word	0x20000a00

080076b4 <PP_OnTargetReach>:

void PP_OnTargetReach(int32_t position)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	// LOG_Print(LOG_InfoLevel, "PP reach the position: %ld\n", position);
	if (g_MotorPPData.targetReachedCB){
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <PP_OnTargetReach+0x20>)
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d003      	beq.n	80076cc <PP_OnTargetReach+0x18>
		g_MotorPPData.targetReachedCB(position);
 80076c4:	4b03      	ldr	r3, [pc, #12]	; (80076d4 <PP_OnTargetReach+0x20>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	4798      	blx	r3
	}
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20000a00 	.word	0x20000a00

080076d8 <PP_active>:

void PP_active()
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
	if (g_MotorPPData.status == DS402_PP_None) {
 80076dc:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <PP_active+0x30>)
 80076de:	7a1b      	ldrb	r3, [r3, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10f      	bne.n	8007704 <PP_active+0x2c>
		g_MotorPPData.status = DS402_PP_Running;
 80076e4:	4b08      	ldr	r3, [pc, #32]	; (8007708 <PP_active+0x30>)
 80076e6:	2201      	movs	r2, #1
 80076e8:	721a      	strb	r2, [r3, #8]

		MT_setReachCallback(PP_OnTargetReach);
 80076ea:	4808      	ldr	r0, [pc, #32]	; (800770c <PP_active+0x34>)
 80076ec:	f002 fe12 	bl	800a314 <MT_setReachCallback>
		MT_setReachWindow(g_MotorPPData.reachWindow);
 80076f0:	4b05      	ldr	r3, [pc, #20]	; (8007708 <PP_active+0x30>)
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f002 fe1d 	bl	800a334 <MT_setReachWindow>
		MT_setSpeed(g_MotorPPData.speed);
 80076fa:	4b03      	ldr	r3, [pc, #12]	; (8007708 <PP_active+0x30>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f002 fe40 	bl	800a384 <MT_setSpeed>
	}
}
 8007704:	bf00      	nop
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20000a00 	.word	0x20000a00
 800770c:	080076b5 	.word	0x080076b5

08007710 <PP_exec>:

uint16_t PP_exec(uint16_t controlWord)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	80fb      	strh	r3, [r7, #6]
	uint16_t ret = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	81fb      	strh	r3, [r7, #14]

	uint16_t newSetPoint = controlWord & 0x10;
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	f003 0310 	and.w	r3, r3, #16
 8007724:	81bb      	strh	r3, [r7, #12]
	uint16_t changeSetImmediately = controlWord & 0x20;
 8007726:	88fb      	ldrh	r3, [r7, #6]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	817b      	strh	r3, [r7, #10]
	uint16_t halt = controlWord & 0x100;
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007734:	813b      	strh	r3, [r7, #8]

	if (halt){
 8007736:	893b      	ldrh	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <PP_exec+0x30>
		/*Reset the motion*/
		return ret;
 800773c:	89fb      	ldrh	r3, [r7, #14]
 800773e:	e000      	b.n	8007742 <PP_exec+0x32>

	if (changeSetImmediately){
		/*Set the motion posqueue pop position immediately*/
	}

	return ret;
 8007740:	89fb      	ldrh	r3, [r7, #14]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
	...

08007750 <DS402_buildStatusWordByStatus>:

	g_DSStateData.lastStatusWord = g_DSStateData.statusWord;
}*/

uint16_t DS402_buildStatusWordByStatus(uint16_t curStatusWord, DS402_Status_t status)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	4603      	mov	r3, r0
 8007758:	460a      	mov	r2, r1
 800775a:	80fb      	strh	r3, [r7, #6]
 800775c:	4613      	mov	r3, r2
 800775e:	717b      	strb	r3, [r7, #5]
	uint16_t newStatusWord = curStatusWord;
 8007760:	88fb      	ldrh	r3, [r7, #6]
 8007762:	81fb      	strh	r3, [r7, #14]

	switch(status){
 8007764:	797b      	ldrb	r3, [r7, #5]
 8007766:	3b01      	subs	r3, #1
 8007768:	2b20      	cmp	r3, #32
 800776a:	f200 8089 	bhi.w	8007880 <DS402_buildStatusWordByStatus+0x130>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <DS402_buildStatusWordByStatus+0x24>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	080077f9 	.word	0x080077f9
 8007778:	08007803 	.word	0x08007803
 800777c:	08007815 	.word	0x08007815
 8007780:	08007827 	.word	0x08007827
 8007784:	08007839 	.word	0x08007839
 8007788:	0800784b 	.word	0x0800784b
 800778c:	08007881 	.word	0x08007881
 8007790:	08007881 	.word	0x08007881
 8007794:	08007881 	.word	0x08007881
 8007798:	08007881 	.word	0x08007881
 800779c:	08007881 	.word	0x08007881
 80077a0:	08007881 	.word	0x08007881
 80077a4:	08007881 	.word	0x08007881
 80077a8:	08007881 	.word	0x08007881
 80077ac:	08007881 	.word	0x08007881
 80077b0:	08007881 	.word	0x08007881
 80077b4:	08007881 	.word	0x08007881
 80077b8:	08007881 	.word	0x08007881
 80077bc:	08007881 	.word	0x08007881
 80077c0:	08007881 	.word	0x08007881
 80077c4:	08007881 	.word	0x08007881
 80077c8:	08007881 	.word	0x08007881
 80077cc:	08007881 	.word	0x08007881
 80077d0:	08007881 	.word	0x08007881
 80077d4:	08007881 	.word	0x08007881
 80077d8:	08007881 	.word	0x08007881
 80077dc:	08007881 	.word	0x08007881
 80077e0:	08007881 	.word	0x08007881
 80077e4:	08007881 	.word	0x08007881
 80077e8:	08007881 	.word	0x08007881
 80077ec:	08007881 	.word	0x08007881
 80077f0:	0800785d 	.word	0x0800785d
 80077f4:	0800786f 	.word	0x0800786f
	case DS402_Status_NotReadyToSwitchON:
		newStatusWord &= 0xFFB0;
 80077f8:	89fb      	ldrh	r3, [r7, #14]
 80077fa:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 80077fe:	81fb      	strh	r3, [r7, #14]
		break;
 8007800:	e03f      	b.n	8007882 <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_SwitchONDisabled:
		newStatusWord &= 0xFFB0;
 8007802:	89fb      	ldrh	r3, [r7, #14]
 8007804:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007808:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0040;
 800780a:	89fb      	ldrh	r3, [r7, #14]
 800780c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007810:	81fb      	strh	r3, [r7, #14]
		break;
 8007812:	e036      	b.n	8007882 <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_ReadyToSwitchON:
		newStatusWord &= 0xFFB0;
 8007814:	89fb      	ldrh	r3, [r7, #14]
 8007816:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 800781a:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0021;
 800781c:	89fb      	ldrh	r3, [r7, #14]
 800781e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8007822:	81fb      	strh	r3, [r7, #14]
		break;
 8007824:	e02d      	b.n	8007882 <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_SwitchedON:
		newStatusWord &= 0xFFB0;
 8007826:	89fb      	ldrh	r3, [r7, #14]
 8007828:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 800782c:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0023;
 800782e:	89fb      	ldrh	r3, [r7, #14]
 8007830:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8007834:	81fb      	strh	r3, [r7, #14]
		break;
 8007836:	e024      	b.n	8007882 <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_OperationEnable:
		newStatusWord &= 0xFFB0;
 8007838:	89fb      	ldrh	r3, [r7, #14]
 800783a:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 800783e:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0027;
 8007840:	89fb      	ldrh	r3, [r7, #14]
 8007842:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8007846:	81fb      	strh	r3, [r7, #14]
		break;
 8007848:	e01b      	b.n	8007882 <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_QuickStopActive:
		newStatusWord &= 0xFF90;
 800784a:	89fb      	ldrh	r3, [r7, #14]
 800784c:	f023 036f 	bic.w	r3, r3, #111	; 0x6f
 8007850:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0007;
 8007852:	89fb      	ldrh	r3, [r7, #14]
 8007854:	f043 0307 	orr.w	r3, r3, #7
 8007858:	81fb      	strh	r3, [r7, #14]
		break;
 800785a:	e012      	b.n	8007882 <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_FaultReactionActive:
		newStatusWord &= 0xFFB0;
 800785c:	89fb      	ldrh	r3, [r7, #14]
 800785e:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007862:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x000F;
 8007864:	89fb      	ldrh	r3, [r7, #14]
 8007866:	f043 030f 	orr.w	r3, r3, #15
 800786a:	81fb      	strh	r3, [r7, #14]
		break;
 800786c:	e009      	b.n	8007882 <DS402_buildStatusWordByStatus+0x132>
	case DS402_Status_Fault:
		newStatusWord &= 0xFFB0;
 800786e:	89fb      	ldrh	r3, [r7, #14]
 8007870:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
 8007874:	81fb      	strh	r3, [r7, #14]
		newStatusWord |= 0x0008;
 8007876:	89fb      	ldrh	r3, [r7, #14]
 8007878:	f043 0308 	orr.w	r3, r3, #8
 800787c:	81fb      	strh	r3, [r7, #14]
		break;
 800787e:	e000      	b.n	8007882 <DS402_buildStatusWordByStatus+0x132>
	default:
		break;
 8007880:	bf00      	nop
	}

	return newStatusWord;
 8007882:	89fb      	ldrh	r3, [r7, #14]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <DS402_getStatus>:

	return controlWord;
}

DS402_Status_t DS402_getStatus(uint16_t statusWord)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	80fb      	strh	r3, [r7, #6]
	DS402_Status_t status = DS402_Status_Fault;
 800789a:	2321      	movs	r3, #33	; 0x21
 800789c:	73fb      	strb	r3, [r7, #15]
	uint16_t sw = statusWord & 0x6F;
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80078a4:	81bb      	strh	r3, [r7, #12]

	if (sw == 0x21) {
 80078a6:	89bb      	ldrh	r3, [r7, #12]
 80078a8:	2b21      	cmp	r3, #33	; 0x21
 80078aa:	d102      	bne.n	80078b2 <DS402_getStatus+0x22>
		status = DS402_Status_ReadyToSwitchON;
 80078ac:	2303      	movs	r3, #3
 80078ae:	73fb      	strb	r3, [r7, #15]
 80078b0:	e026      	b.n	8007900 <DS402_getStatus+0x70>
	}else if (sw == 0x23) {
 80078b2:	89bb      	ldrh	r3, [r7, #12]
 80078b4:	2b23      	cmp	r3, #35	; 0x23
 80078b6:	d102      	bne.n	80078be <DS402_getStatus+0x2e>
		status = DS402_Status_SwitchedON;
 80078b8:	2304      	movs	r3, #4
 80078ba:	73fb      	strb	r3, [r7, #15]
 80078bc:	e020      	b.n	8007900 <DS402_getStatus+0x70>
	}else if (sw == 0x27) {
 80078be:	89bb      	ldrh	r3, [r7, #12]
 80078c0:	2b27      	cmp	r3, #39	; 0x27
 80078c2:	d102      	bne.n	80078ca <DS402_getStatus+0x3a>
		status = DS402_Status_OperationEnable;
 80078c4:	2305      	movs	r3, #5
 80078c6:	73fb      	strb	r3, [r7, #15]
 80078c8:	e01a      	b.n	8007900 <DS402_getStatus+0x70>
	}else if (sw == 0x07) {
 80078ca:	89bb      	ldrh	r3, [r7, #12]
 80078cc:	2b07      	cmp	r3, #7
 80078ce:	d102      	bne.n	80078d6 <DS402_getStatus+0x46>
		status = DS402_Status_QuickStopActive;
 80078d0:	2306      	movs	r3, #6
 80078d2:	73fb      	strb	r3, [r7, #15]
 80078d4:	e014      	b.n	8007900 <DS402_getStatus+0x70>
	}else {
		sw &= 0x4F;
 80078d6:	89bb      	ldrh	r3, [r7, #12]
 80078d8:	f003 034f 	and.w	r3, r3, #79	; 0x4f
 80078dc:	81bb      	strh	r3, [r7, #12]
		if (sw == 0) {
 80078de:	89bb      	ldrh	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <DS402_getStatus+0x5a>
			status = DS402_Status_NotReadyToSwitchON;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
 80078e8:	e00a      	b.n	8007900 <DS402_getStatus+0x70>
		}else if (sw == 0x40) {
 80078ea:	89bb      	ldrh	r3, [r7, #12]
 80078ec:	2b40      	cmp	r3, #64	; 0x40
 80078ee:	d102      	bne.n	80078f6 <DS402_getStatus+0x66>
			status = DS402_Status_SwitchONDisabled;
 80078f0:	2302      	movs	r3, #2
 80078f2:	73fb      	strb	r3, [r7, #15]
 80078f4:	e004      	b.n	8007900 <DS402_getStatus+0x70>
		}else if (sw == 0x0F) {
 80078f6:	89bb      	ldrh	r3, [r7, #12]
 80078f8:	2b0f      	cmp	r3, #15
 80078fa:	d101      	bne.n	8007900 <DS402_getStatus+0x70>
			status = DS402_Status_FaultReactionActive;
 80078fc:	2320      	movs	r3, #32
 80078fe:	73fb      	strb	r3, [r7, #15]
		}
	}

	return status;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <DS402_getNewStatusByControlWord>:
	}
	return command;
}

DS402_Status_t DS402_getNewStatusByControlWord(uint16_t statusWord, uint16_t controlWord)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	4603      	mov	r3, r0
 8007916:	460a      	mov	r2, r1
 8007918:	80fb      	strh	r3, [r7, #6]
 800791a:	4613      	mov	r3, r2
 800791c:	80bb      	strh	r3, [r7, #4]
	DS402_Status_t newStatus = DS402_Status_Fault;
 800791e:	2321      	movs	r3, #33	; 0x21
 8007920:	73fb      	strb	r3, [r7, #15]
	DS402_Status_t curStatus = DS402_getStatus(statusWord);
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff ffb3 	bl	8007890 <DS402_getStatus>
 800792a:	4603      	mov	r3, r0
 800792c:	73bb      	strb	r3, [r7, #14]

	uint32_t cw = controlWord & 0x0F;
 800792e:	88bb      	ldrh	r3, [r7, #4]
 8007930:	f003 030f 	and.w	r3, r3, #15
 8007934:	60bb      	str	r3, [r7, #8]
	    if ((cw & 0x02) == 0){
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10d      	bne.n	800795c <DS402_getNewStatusByControlWord+0x4e>
	    	if (curStatus == DS402_Status_ReadyToSwitchON ||
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b03      	cmp	r3, #3
 8007944:	d008      	beq.n	8007958 <DS402_getNewStatusByControlWord+0x4a>
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b05      	cmp	r3, #5
 800794a:	d005      	beq.n	8007958 <DS402_getNewStatusByControlWord+0x4a>
	    		curStatus == DS402_Status_OperationEnable ||
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	2b04      	cmp	r3, #4
 8007950:	d002      	beq.n	8007958 <DS402_getNewStatusByControlWord+0x4a>
				curStatus == DS402_Status_SwitchedON ||
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b06      	cmp	r3, #6
 8007956:	d101      	bne.n	800795c <DS402_getNewStatusByControlWord+0x4e>
				curStatus == DS402_Status_QuickStopActive){
	    		newStatus = DS402_Status_SwitchONDisabled;
 8007958:	2302      	movs	r3, #2
 800795a:	73fb      	strb	r3, [r7, #15]
	    	}
	    }

	    if (cw == 0x06 || cw == 0x0E){
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d002      	beq.n	8007968 <DS402_getNewStatusByControlWord+0x5a>
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b0e      	cmp	r3, #14
 8007966:	d10b      	bne.n	8007980 <DS402_getNewStatusByControlWord+0x72>
	    	if (curStatus == DS402_Status_SwitchONDisabled ||
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b02      	cmp	r3, #2
 800796c:	d005      	beq.n	800797a <DS402_getNewStatusByControlWord+0x6c>
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b04      	cmp	r3, #4
 8007972:	d002      	beq.n	800797a <DS402_getNewStatusByControlWord+0x6c>
	    		curStatus == DS402_Status_SwitchedON ||
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b05      	cmp	r3, #5
 8007978:	d13e      	bne.n	80079f8 <DS402_getNewStatusByControlWord+0xea>
				curStatus == DS402_Status_OperationEnable){
	    		newStatus = DS402_Status_ReadyToSwitchON;
 800797a:	2303      	movs	r3, #3
 800797c:	73fb      	strb	r3, [r7, #15]
	    	if (curStatus == DS402_Status_SwitchONDisabled ||
 800797e:	e03b      	b.n	80079f8 <DS402_getNewStatusByControlWord+0xea>
	    	}
	    }else if (cw == 0x07){
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b07      	cmp	r3, #7
 8007984:	d10e      	bne.n	80079a4 <DS402_getNewStatusByControlWord+0x96>
	    	if (curStatus == DS402_Status_ReadyToSwitchON ||
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	2b03      	cmp	r3, #3
 800798a:	d002      	beq.n	8007992 <DS402_getNewStatusByControlWord+0x84>
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d102      	bne.n	8007998 <DS402_getNewStatusByControlWord+0x8a>
	    		curStatus == DS402_Status_SwitchONDisabled){
	    		newStatus = DS402_Status_SwitchedON;
 8007992:	2304      	movs	r3, #4
 8007994:	73fb      	strb	r3, [r7, #15]
 8007996:	e030      	b.n	80079fa <DS402_getNewStatusByControlWord+0xec>
	    	}else if (curStatus == DS402_Status_OperationEnable){
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b05      	cmp	r3, #5
 800799c:	d12d      	bne.n	80079fa <DS402_getNewStatusByControlWord+0xec>
	    		newStatus = DS402_Status_SwitchedON;
 800799e:	2304      	movs	r3, #4
 80079a0:	73fb      	strb	r3, [r7, #15]
 80079a2:	e02a      	b.n	80079fa <DS402_getNewStatusByControlWord+0xec>
	    	}
	    }else if (cw == 0x0F){
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b0f      	cmp	r3, #15
 80079a8:	d111      	bne.n	80079ce <DS402_getNewStatusByControlWord+0xc0>
	    	if (curStatus == DS402_Status_ReadyToSwitchON){
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d102      	bne.n	80079b6 <DS402_getNewStatusByControlWord+0xa8>
	    		newStatus = DS402_Status_SwitchedON;
 80079b0:	2304      	movs	r3, #4
 80079b2:	73fb      	strb	r3, [r7, #15]
 80079b4:	e021      	b.n	80079fa <DS402_getNewStatusByControlWord+0xec>
	    	}else if (curStatus == DS402_Status_SwitchedON ||
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	d005      	beq.n	80079c8 <DS402_getNewStatusByControlWord+0xba>
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b06      	cmp	r3, #6
 80079c0:	d002      	beq.n	80079c8 <DS402_getNewStatusByControlWord+0xba>
	    			curStatus == DS402_Status_QuickStopActive ||
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b05      	cmp	r3, #5
 80079c6:	d118      	bne.n	80079fa <DS402_getNewStatusByControlWord+0xec>
					curStatus == DS402_Status_OperationEnable){
	    		newStatus = DS402_Status_OperationEnable;
 80079c8:	2305      	movs	r3, #5
 80079ca:	73fb      	strb	r3, [r7, #15]
 80079cc:	e015      	b.n	80079fa <DS402_getNewStatusByControlWord+0xec>
	    	}
	    }else if (cw == 0x02 || cw == 0x03){
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d002      	beq.n	80079da <DS402_getNewStatusByControlWord+0xcc>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d10f      	bne.n	80079fa <DS402_getNewStatusByControlWord+0xec>
	    	if (curStatus == DS402_Status_ReadyToSwitchON ||
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d002      	beq.n	80079e6 <DS402_getNewStatusByControlWord+0xd8>
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d102      	bne.n	80079ec <DS402_getNewStatusByControlWord+0xde>
	    		curStatus == DS402_Status_SwitchedON){
	    		newStatus = DS402_Status_SwitchONDisabled;
 80079e6:	2302      	movs	r3, #2
 80079e8:	73fb      	strb	r3, [r7, #15]
 80079ea:	e006      	b.n	80079fa <DS402_getNewStatusByControlWord+0xec>
	    	}else if (curStatus == DS402_Status_OperationEnable){
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	2b05      	cmp	r3, #5
 80079f0:	d103      	bne.n	80079fa <DS402_getNewStatusByControlWord+0xec>
	    		newStatus = DS402_Status_QuickStopActive;
 80079f2:	2306      	movs	r3, #6
 80079f4:	73fb      	strb	r3, [r7, #15]
 80079f6:	e000      	b.n	80079fa <DS402_getNewStatusByControlWord+0xec>
	    	if (curStatus == DS402_Status_SwitchONDisabled ||
 80079f8:	bf00      	nop
	    	}
	    }
	return newStatus;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <DS402_getModeActionFromControlWord>:

DS402_OperMode_Action_t DS402_getModeActionFromControlWord(int8_t mode, uint16_t controlWord)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	460a      	mov	r2, r1
 8007a0e:	71fb      	strb	r3, [r7, #7]
 8007a10:	4613      	mov	r3, r2
 8007a12:	80bb      	strh	r3, [r7, #4]
	DS402_OperMode_Action_t action = DS402_OperMode_Halt;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]

	switch (mode) {
 8007a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1c:	2b07      	cmp	r3, #7
 8007a1e:	d01d      	beq.n	8007a5c <DS402_getModeActionFromControlWord+0x58>
 8007a20:	2b07      	cmp	r3, #7
 8007a22:	dc23      	bgt.n	8007a6c <DS402_getModeActionFromControlWord+0x68>
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d009      	beq.n	8007a3c <DS402_getModeActionFromControlWord+0x38>
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	d11f      	bne.n	8007a6c <DS402_getModeActionFromControlWord+0x68>
	case DS402_OperMode_Homing: {
		if ((controlWord & 0x10) == 0x10){
 8007a2c:	88bb      	ldrh	r3, [r7, #4]
 8007a2e:	f003 0310 	and.w	r3, r3, #16
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d01c      	beq.n	8007a70 <DS402_getModeActionFromControlWord+0x6c>
			action = DS402_OperMode_HomingStart;
 8007a36:	2310      	movs	r3, #16
 8007a38:	73fb      	strb	r3, [r7, #15]
		}
	}break;
 8007a3a:	e019      	b.n	8007a70 <DS402_getModeActionFromControlWord+0x6c>
	case DS402_OperMode_ProfilePosition: {
		if ((controlWord & 0x10) == 0x10){
 8007a3c:	88bb      	ldrh	r3, [r7, #4]
 8007a3e:	f003 0310 	and.w	r3, r3, #16
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <DS402_getModeActionFromControlWord+0x48>
			action = DS402_OperMode_NewSetPoint;
 8007a46:	2312      	movs	r3, #18
 8007a48:	73fb      	strb	r3, [r7, #15]
		}else if ((controlWord & 0x20) == 0x20) {
			action = DS402_OperMode_ChangeSetImmediately;
		}
	}break;
 8007a4a:	e013      	b.n	8007a74 <DS402_getModeActionFromControlWord+0x70>
		}else if ((controlWord & 0x20) == 0x20) {
 8007a4c:	88bb      	ldrh	r3, [r7, #4]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00e      	beq.n	8007a74 <DS402_getModeActionFromControlWord+0x70>
			action = DS402_OperMode_ChangeSetImmediately;
 8007a56:	2313      	movs	r3, #19
 8007a58:	73fb      	strb	r3, [r7, #15]
	}break;
 8007a5a:	e00b      	b.n	8007a74 <DS402_getModeActionFromControlWord+0x70>
	case DS402_OperMode_InterpolatedPosition: {
		if ((controlWord & 0x10) == 0x10){
 8007a5c:	88bb      	ldrh	r3, [r7, #4]
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <DS402_getModeActionFromControlWord+0x74>
			action = DS402_OperMode_EnableIP;
 8007a66:	2311      	movs	r3, #17
 8007a68:	73fb      	strb	r3, [r7, #15]
		}
	}break;
 8007a6a:	e005      	b.n	8007a78 <DS402_getModeActionFromControlWord+0x74>

	default:
		break;
 8007a6c:	bf00      	nop
 8007a6e:	e004      	b.n	8007a7a <DS402_getModeActionFromControlWord+0x76>
	}break;
 8007a70:	bf00      	nop
 8007a72:	e002      	b.n	8007a7a <DS402_getModeActionFromControlWord+0x76>
	}break;
 8007a74:	bf00      	nop
 8007a76:	e000      	b.n	8007a7a <DS402_getModeActionFromControlWord+0x76>
	}break;
 8007a78:	bf00      	nop
	}

	return action;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HOME_reset>:
extern volatile int32_t g_IncSteps;
extern QueueHandle_t g_MotionMsgQueue;
extern Node_DriveProfile_t g_NodeDriveProfile;

void HOME_reset()
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
	g_MotorHomeData.status = DS402_HOME_None;
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <HOME_reset+0x1c>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
	g_MotorHomeData.reachWindow = 32;
 8007a92:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <HOME_reset+0x1c>)
 8007a94:	2220      	movs	r2, #32
 8007a96:	611a      	str	r2, [r3, #16]
}
 8007a98:	bf00      	nop
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000a10 	.word	0x20000a10

08007aa8 <HOME_setProfile>:

void HOME_setProfile(int32_t offset, int8_t method, uint32_t speed, uint32_t acce)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	72fb      	strb	r3, [r7, #11]
	g_MotorHomeData.method = method;
 8007ab8:	4a08      	ldr	r2, [pc, #32]	; (8007adc <HOME_setProfile+0x34>)
 8007aba:	7afb      	ldrb	r3, [r7, #11]
 8007abc:	7713      	strb	r3, [r2, #28]
	g_MotorHomeData.offset = offset;
 8007abe:	4a07      	ldr	r2, [pc, #28]	; (8007adc <HOME_setProfile+0x34>)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6053      	str	r3, [r2, #4]
	g_MotorHomeData.speed  = speed;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a05      	ldr	r2, [pc, #20]	; (8007adc <HOME_setProfile+0x34>)
 8007ac8:	6093      	str	r3, [r2, #8]
	g_MotorHomeData.acce   = acce;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	4a03      	ldr	r2, [pc, #12]	; (8007adc <HOME_setProfile+0x34>)
 8007ace:	60d3      	str	r3, [r2, #12]
}
 8007ad0:	bf00      	nop
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	20000a10 	.word	0x20000a10

08007ae0 <HOME_Init>:

bool HOME_Init(int32_t offset, int8_t method, uint32_t speed, uint32_t acce)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	607a      	str	r2, [r7, #4]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	460b      	mov	r3, r1
 8007aee:	72fb      	strb	r3, [r7, #11]
	bool_t ret = true;
 8007af0:	2301      	movs	r3, #1
 8007af2:	75fb      	strb	r3, [r7, #23]

	HOME_setProfile(offset, method, speed, acce);
 8007af4:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7ff ffd3 	bl	8007aa8 <HOME_setProfile>
	g_MotorHomeData.finishedCallback = NULL;
 8007b02:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <HOME_Init+0x40>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	619a      	str	r2, [r3, #24]

	HOME_reset();
 8007b08:	f7ff ffbe 	bl	8007a88 <HOME_reset>

	return ret;
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bf14      	ite	ne
 8007b12:	2301      	movne	r3, #1
 8007b14:	2300      	moveq	r3, #0
 8007b16:	b2db      	uxtb	r3, r3
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20000a10 	.word	0x20000a10

08007b24 <HOME_setFinishedCallback>:

void HOME_setFinishedCallback(void (*pfunct)(int32_t offset))
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	g_MotorHomeData.finishedCallback = pfunct;
 8007b2c:	4a04      	ldr	r2, [pc, #16]	; (8007b40 <HOME_setFinishedCallback+0x1c>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6193      	str	r3, [r2, #24]
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000a10 	.word	0x20000a10

08007b44 <HOME_finish>:

void HOME_finish(int32_t position)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
	if (g_MotorHomeData.status != DS402_HOME_Finished) {
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <HOME_finish+0x34>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d00a      	beq.n	8007b6a <HOME_finish+0x26>
		g_MotorHomeData.status = DS402_HOME_Finished;
 8007b54:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <HOME_finish+0x34>)
 8007b56:	2203      	movs	r2, #3
 8007b58:	701a      	strb	r2, [r3, #0]
		if (g_MotorHomeData.finishedCallback){
 8007b5a:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <HOME_finish+0x34>)
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HOME_finish+0x26>
			g_MotorHomeData.finishedCallback(position);
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <HOME_finish+0x34>)
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
		}
	}

	MT_setReachCallback(NULL);
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	f002 fbd2 	bl	800a314 <MT_setReachCallback>
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20000a10 	.word	0x20000a10

08007b7c <HOME_active>:

void HOME_active()
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
	MT_setReachCallback(HOME_finish);
 8007b80:	4807      	ldr	r0, [pc, #28]	; (8007ba0 <HOME_active+0x24>)
 8007b82:	f002 fbc7 	bl	800a314 <MT_setReachCallback>
	MT_setSpeed(g_MotorHomeData.speed);
 8007b86:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <HOME_active+0x28>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f002 fbfa 	bl	800a384 <MT_setSpeed>
	MT_setReachWindow(g_MotorHomeData.reachWindow);
 8007b90:	4b04      	ldr	r3, [pc, #16]	; (8007ba4 <HOME_active+0x28>)
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f002 fbcd 	bl	800a334 <MT_setReachWindow>
}
 8007b9a:	bf00      	nop
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	08007b45 	.word	0x08007b45
 8007ba4:	20000a10 	.word	0x20000a10

08007ba8 <HOME_exec>:
/*Re-enter safe function
 * controlWord uint16_t : receive from host
 * return      uint16_t : execute result, and will be merged status word bit10, bit12 and bit13
 * */
uint16_t HOME_exec(uint16_t controlWord)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	80fb      	strh	r3, [r7, #6]
	uint16_t ret = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	83fb      	strh	r3, [r7, #30]

	/*Get the operation mode*/
	DS402_OperMode_Action_t action = DS402_getModeActionFromControlWord(DS402_OperMode_Homing, controlWord);
 8007bb6:	88fb      	ldrh	r3, [r7, #6]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	2006      	movs	r0, #6
 8007bbc:	f7ff ff22 	bl	8007a04 <DS402_getModeActionFromControlWord>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	777b      	strb	r3, [r7, #29]
	if (action == DS402_OperMode_HomingStart) {
 8007bc4:	7f7b      	ldrb	r3, [r7, #29]
 8007bc6:	2b10      	cmp	r3, #16
 8007bc8:	d149      	bne.n	8007c5e <HOME_exec+0xb6>
		if (g_MotorHomeData.status == DS402_HOME_None) {
 8007bca:	4b27      	ldr	r3, [pc, #156]	; (8007c68 <HOME_exec+0xc0>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d133      	bne.n	8007c3a <HOME_exec+0x92>

			printf("Motor start homeing.\n");
 8007bd2:	4826      	ldr	r0, [pc, #152]	; (8007c6c <HOME_exec+0xc4>)
 8007bd4:	f00f fe10 	bl	80177f8 <puts>

			/*Home begin*/
			g_MotorHomeData.status = DS402_HOME_SearchZeroPnt;
 8007bd8:	4b23      	ldr	r3, [pc, #140]	; (8007c68 <HOME_exec+0xc0>)
 8007bda:	2201      	movs	r2, #1
 8007bdc:	701a      	strb	r2, [r3, #0]

			/*Get home switch state*/
			GPIO_PinState state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2);
 8007bde:	2104      	movs	r1, #4
 8007be0:	4823      	ldr	r0, [pc, #140]	; (8007c70 <HOME_exec+0xc8>)
 8007be2:	f008 fa05 	bl	800fff0 <HAL_GPIO_ReadPin>
 8007be6:	4603      	mov	r3, r0
 8007be8:	773b      	strb	r3, [r7, #28]

			MotionMsgItem_t item;

			if (state == g_NodeDriveProfile.homestate){
 8007bea:	4b22      	ldr	r3, [pc, #136]	; (8007c74 <HOME_exec+0xcc>)
 8007bec:	78db      	ldrb	r3, [r3, #3]
 8007bee:	7f3a      	ldrb	r2, [r7, #28]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d106      	bne.n	8007c02 <HOME_exec+0x5a>
				/*Set the home offset point*/
				item.position = g_MotorHomeData.offset;
 8007bf4:	4b1c      	ldr	r3, [pc, #112]	; (8007c68 <HOME_exec+0xc0>)
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	613b      	str	r3, [r7, #16]

				/*Send Go home msg*/
				item.code = MMC_HomeGoHome;
 8007bfa:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007bfe:	813b      	strh	r3, [r7, #8]
 8007c00:	e012      	b.n	8007c28 <HOME_exec+0x80>
			}else {
				/*Set the home speed and accelerate*/
				item.velocity = g_MotorHomeData.speed;
 8007c02:	4b19      	ldr	r3, [pc, #100]	; (8007c68 <HOME_exec+0xc0>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c0e:	edc7 7a05 	vstr	s15, [r7, #20]
				item.acceleration = g_MotorHomeData.acce;
 8007c12:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <HOME_exec+0xc0>)
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c1e:	edc7 7a06 	vstr	s15, [r7, #24]

				/*Start motor, send home start msg*/
				item.code = MMC_HomeStart;
 8007c22:	f240 1301 	movw	r3, #257	; 0x101
 8007c26:	813b      	strh	r3, [r7, #8]
			}
			xQueueSend(g_MotionMsgQueue, &item, 0);
 8007c28:	4b13      	ldr	r3, [pc, #76]	; (8007c78 <HOME_exec+0xd0>)
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	f107 0108 	add.w	r1, r7, #8
 8007c30:	2300      	movs	r3, #0
 8007c32:	2200      	movs	r2, #0
 8007c34:	f00b fdce 	bl	80137d4 <xQueueGenericSend>
 8007c38:	e008      	b.n	8007c4c <HOME_exec+0xa4>
		}else {
			if (g_MotorHomeData.status == DS402_HOME_Error) {
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <HOME_exec+0xc0>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d104      	bne.n	8007c4c <HOME_exec+0xa4>
				/*Status 10 reach bit set 1(stop), 13 error bit set 1 */
				ret = (1 << 10) | (1 << 13);
 8007c42:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8007c46:	83fb      	strh	r3, [r7, #30]
				return ret;
 8007c48:	8bfb      	ldrh	r3, [r7, #30]
 8007c4a:	e009      	b.n	8007c60 <HOME_exec+0xb8>
			}
		}

		if (g_MotorHomeData.status == DS402_HOME_Finished) {
 8007c4c:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <HOME_exec+0xc0>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d104      	bne.n	8007c5e <HOME_exec+0xb6>
			/*Status 10 reach bit set 1(stop), 12 attain bit set 1 */
			ret = (1 << 10) | (1 << 12);
 8007c54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007c58:	83fb      	strh	r3, [r7, #30]
			return ret;
 8007c5a:	8bfb      	ldrh	r3, [r7, #30]
 8007c5c:	e000      	b.n	8007c60 <HOME_exec+0xb8>
		}
	}

	return ret;
 8007c5e:	8bfb      	ldrh	r3, [r7, #30]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3720      	adds	r7, #32
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000a10 	.word	0x20000a10
 8007c6c:	0801892c 	.word	0x0801892c
 8007c70:	40020c00 	.word	0x40020c00
 8007c74:	20000a94 	.word	0x20000a94
 8007c78:	20000678 	.word	0x20000678

08007c7c <HOME_OnSwitchSignal>:

void HOME_OnSwitchSignal(uint16_t pin)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	80fb      	strh	r3, [r7, #6]
	if (pin != GPIO_PIN_2) {
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	d130      	bne.n	8007cee <HOME_OnSwitchSignal+0x72>
		return;
	}

	if (g_MotorHomeData.status != DS402_HOME_GoHome && g_MotionMsgQueue != NULL){
 8007c8c:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <HOME_OnSwitchSignal+0x7c>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d02d      	beq.n	8007cf0 <HOME_OnSwitchSignal+0x74>
 8007c94:	4b19      	ldr	r3, [pc, #100]	; (8007cfc <HOME_OnSwitchSignal+0x80>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d029      	beq.n	8007cf0 <HOME_OnSwitchSignal+0x74>

		/*Reset the callback*/
		MT_setReachCallback(HOME_finish);
 8007c9c:	4818      	ldr	r0, [pc, #96]	; (8007d00 <HOME_OnSwitchSignal+0x84>)
 8007c9e:	f002 fb39 	bl	800a314 <MT_setReachCallback>

		/*Send go home message*/
		MotionMsgItem_t item;
		item.code = MMC_HomeGoHome;
 8007ca2:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007ca6:	81bb      	strh	r3, [r7, #12]
		item.position = g_MotorHomeData.offset;
 8007ca8:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <HOME_OnSwitchSignal+0x7c>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	617b      	str	r3, [r7, #20]

		BaseType_t highTaskWoken = pdFALSE;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60bb      	str	r3, [r7, #8]
		if (pdPASS == xQueueSendFromISR(g_MotionMsgQueue, &item, &highTaskWoken)){
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <HOME_OnSwitchSignal+0x80>)
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	f107 0208 	add.w	r2, r7, #8
 8007cba:	f107 010c 	add.w	r1, r7, #12
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f00b fe86 	bl	80139d0 <xQueueGenericSendFromISR>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d102      	bne.n	8007cd0 <HOME_OnSwitchSignal+0x54>
			g_MotorHomeData.status = DS402_HOME_GoHome;
 8007cca:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <HOME_OnSwitchSignal+0x7c>)
 8007ccc:	2202      	movs	r2, #2
 8007cce:	701a      	strb	r2, [r3, #0]
		}

		if(highTaskWoken == pdTRUE) {
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d10c      	bne.n	8007cf0 <HOME_OnSwitchSignal+0x74>
			portYIELD_FROM_ISR (highTaskWoken);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d009      	beq.n	8007cf0 <HOME_OnSwitchSignal+0x74>
 8007cdc:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <HOME_OnSwitchSignal+0x88>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	e000      	b.n	8007cf0 <HOME_OnSwitchSignal+0x74>
		return;
 8007cee:	bf00      	nop
		}
	}
}
 8007cf0:	3720      	adds	r7, #32
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000a10 	.word	0x20000a10
 8007cfc:	20000678 	.word	0x20000678
 8007d00:	08007b45 	.word	0x08007b45
 8007d04:	e000ed04 	.word	0xe000ed04

08007d08 <CO_new>:
                          CO_NO_LSS_CLIENT)


/* Create objects from heap ***************************************************/
#ifndef CO_USE_GLOBALS
CO_ReturnError_t CO_new(uint32_t *heapMemoryUsed) {
 8007d08:	b5b0      	push	{r4, r5, r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
    int16_t i;
    uint16_t errCnt = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	81bb      	strh	r3, [r7, #12]
    uint32_t CO_memoryUsed = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	60bb      	str	r3, [r7, #8]

    /* If CANopen was initialized before, return. */
    if (CO != NULL) {
 8007d18:	4b7f      	ldr	r3, [pc, #508]	; (8007f18 <CO_new+0x210>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <CO_new+0x1c>
        return CO_ERROR_NO;
 8007d20:	2300      	movs	r3, #0
 8007d22:	e15c      	b.n	8007fde <CO_new+0x2d6>
    }

    /* globals */
    CO = &COO;
 8007d24:	4b7c      	ldr	r3, [pc, #496]	; (8007f18 <CO_new+0x210>)
 8007d26:	4a7d      	ldr	r2, [pc, #500]	; (8007f1c <CO_new+0x214>)
 8007d28:	601a      	str	r2, [r3, #0]

    /* CANmodule */
    CO->CANmodule[0] = (CO_CANmodule_t *)calloc(1, sizeof(CO_CANmodule_t));
 8007d2a:	4b7b      	ldr	r3, [pc, #492]	; (8007f18 <CO_new+0x210>)
 8007d2c:	681c      	ldr	r4, [r3, #0]
 8007d2e:	2120      	movs	r1, #32
 8007d30:	2001      	movs	r0, #1
 8007d32:	f00f fa9b 	bl	801726c <calloc>
 8007d36:	4603      	mov	r3, r0
 8007d38:	6023      	str	r3, [r4, #0]
    if (CO->CANmodule[0] == NULL) errCnt++;
 8007d3a:	4b77      	ldr	r3, [pc, #476]	; (8007f18 <CO_new+0x210>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <CO_new+0x42>
 8007d44:	89bb      	ldrh	r3, [r7, #12]
 8007d46:	3301      	adds	r3, #1
 8007d48:	81bb      	strh	r3, [r7, #12]
    CO_CANmodule_rxArray0 =
        (CO_CANrx_t *)calloc(CO_RXCAN_NO_MSGS, sizeof(CO_CANrx_t));
 8007d4a:	210c      	movs	r1, #12
 8007d4c:	200d      	movs	r0, #13
 8007d4e:	f00f fa8d 	bl	801726c <calloc>
 8007d52:	4603      	mov	r3, r0
 8007d54:	461a      	mov	r2, r3
    CO_CANmodule_rxArray0 =
 8007d56:	4b72      	ldr	r3, [pc, #456]	; (8007f20 <CO_new+0x218>)
 8007d58:	601a      	str	r2, [r3, #0]
    if (CO_CANmodule_rxArray0 == NULL) errCnt++;
 8007d5a:	4b71      	ldr	r3, [pc, #452]	; (8007f20 <CO_new+0x218>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d102      	bne.n	8007d68 <CO_new+0x60>
 8007d62:	89bb      	ldrh	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	81bb      	strh	r3, [r7, #12]
    CO_CANmodule_txArray0 =
        (CO_CANtx_t *)calloc(CO_TXCAN_NO_MSGS, sizeof(CO_CANtx_t));
 8007d68:	2110      	movs	r1, #16
 8007d6a:	2009      	movs	r0, #9
 8007d6c:	f00f fa7e 	bl	801726c <calloc>
 8007d70:	4603      	mov	r3, r0
 8007d72:	461a      	mov	r2, r3
    CO_CANmodule_txArray0 =
 8007d74:	4b6b      	ldr	r3, [pc, #428]	; (8007f24 <CO_new+0x21c>)
 8007d76:	601a      	str	r2, [r3, #0]
    if (CO_CANmodule_txArray0 == NULL) errCnt++;
 8007d78:	4b6a      	ldr	r3, [pc, #424]	; (8007f24 <CO_new+0x21c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <CO_new+0x7e>
 8007d80:	89bb      	ldrh	r3, [r7, #12]
 8007d82:	3301      	adds	r3, #1
 8007d84:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_CANmodule_t) +
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8007d8c:	60bb      	str	r3, [r7, #8]
                     sizeof(CO_CANrx_t) * CO_RXCAN_NO_MSGS +
                     sizeof(CO_CANtx_t) * CO_TXCAN_NO_MSGS;

    /* SDOserver */
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8007d8e:	2300      	movs	r3, #0
 8007d90:	81fb      	strh	r3, [r7, #14]
 8007d92:	e01f      	b.n	8007dd4 <CO_new+0xcc>
        CO->SDO[i] = (CO_SDO_t *)calloc(1, sizeof(CO_SDO_t));
 8007d94:	4b60      	ldr	r3, [pc, #384]	; (8007f18 <CO_new+0x210>)
 8007d96:	681c      	ldr	r4, [r3, #0]
 8007d98:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 8007d9c:	f44f 61ee 	mov.w	r1, #1904	; 0x770
 8007da0:	2001      	movs	r0, #1
 8007da2:	f00f fa63 	bl	801726c <calloc>
 8007da6:	4603      	mov	r3, r0
 8007da8:	461a      	mov	r2, r3
 8007daa:	00ab      	lsls	r3, r5, #2
 8007dac:	4423      	add	r3, r4
 8007dae:	605a      	str	r2, [r3, #4]
        if (CO->SDO[i] == NULL) errCnt++;
 8007db0:	4b59      	ldr	r3, [pc, #356]	; (8007f18 <CO_new+0x210>)
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d102      	bne.n	8007dc8 <CO_new+0xc0>
 8007dc2:	89bb      	ldrh	r3, [r7, #12]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8007dc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	3301      	adds	r3, #1
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	81fb      	strh	r3, [r7, #14]
 8007dd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dddb      	ble.n	8007d94 <CO_new+0x8c>
    }
    CO_SDO_ODExtensions = (CO_OD_extension_t *)calloc(
 8007ddc:	210c      	movs	r1, #12
 8007dde:	2044      	movs	r0, #68	; 0x44
 8007de0:	f00f fa44 	bl	801726c <calloc>
 8007de4:	4603      	mov	r3, r0
 8007de6:	461a      	mov	r2, r3
 8007de8:	4b4f      	ldr	r3, [pc, #316]	; (8007f28 <CO_new+0x220>)
 8007dea:	601a      	str	r2, [r3, #0]
        CO_OD_NoOfElements, sizeof(CO_OD_extension_t));
    if (CO_SDO_ODExtensions == NULL) errCnt++;
 8007dec:	4b4e      	ldr	r3, [pc, #312]	; (8007f28 <CO_new+0x220>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <CO_new+0xf2>
 8007df4:	89bb      	ldrh	r3, [r7, #12]
 8007df6:	3301      	adds	r3, #1
 8007df8:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_SDO_t) * CO_NO_SDO_SERVER +
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 8007e00:	60bb      	str	r3, [r7, #8]
                     sizeof(CO_OD_extension_t) * CO_OD_NoOfElements;

    /* Emergency */
    CO->em = (CO_EM_t *)calloc(1, sizeof(CO_EM_t));
 8007e02:	4b45      	ldr	r3, [pc, #276]	; (8007f18 <CO_new+0x210>)
 8007e04:	681c      	ldr	r4, [r3, #0]
 8007e06:	2174      	movs	r1, #116	; 0x74
 8007e08:	2001      	movs	r0, #1
 8007e0a:	f00f fa2f 	bl	801726c <calloc>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	60a3      	str	r3, [r4, #8]
    if (CO->em == NULL) errCnt++;
 8007e12:	4b41      	ldr	r3, [pc, #260]	; (8007f18 <CO_new+0x210>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d102      	bne.n	8007e22 <CO_new+0x11a>
 8007e1c:	89bb      	ldrh	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	81bb      	strh	r3, [r7, #12]
    CO->emPr = (CO_EMpr_t *)calloc(1, sizeof(CO_EMpr_t));
 8007e22:	4b3d      	ldr	r3, [pc, #244]	; (8007f18 <CO_new+0x210>)
 8007e24:	681c      	ldr	r4, [r3, #0]
 8007e26:	211c      	movs	r1, #28
 8007e28:	2001      	movs	r0, #1
 8007e2a:	f00f fa1f 	bl	801726c <calloc>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	60e3      	str	r3, [r4, #12]
    if (CO->emPr == NULL) errCnt++;
 8007e32:	4b39      	ldr	r3, [pc, #228]	; (8007f18 <CO_new+0x210>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <CO_new+0x13a>
 8007e3c:	89bb      	ldrh	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_EM_t) + sizeof(CO_EMpr_t);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	3390      	adds	r3, #144	; 0x90
 8007e46:	60bb      	str	r3, [r7, #8]

    /* NMT_Heartbeat */
    CO->NMT = (CO_NMT_t *)calloc(1, sizeof(CO_NMT_t));
 8007e48:	4b33      	ldr	r3, [pc, #204]	; (8007f18 <CO_new+0x210>)
 8007e4a:	681c      	ldr	r4, [r3, #0]
 8007e4c:	2130      	movs	r1, #48	; 0x30
 8007e4e:	2001      	movs	r0, #1
 8007e50:	f00f fa0c 	bl	801726c <calloc>
 8007e54:	4603      	mov	r3, r0
 8007e56:	6123      	str	r3, [r4, #16]
    if (CO->NMT == NULL) errCnt++;
 8007e58:	4b2f      	ldr	r3, [pc, #188]	; (8007f18 <CO_new+0x210>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d102      	bne.n	8007e68 <CO_new+0x160>
 8007e62:	89bb      	ldrh	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_NMT_t);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	3330      	adds	r3, #48	; 0x30
 8007e6c:	60bb      	str	r3, [r7, #8]

#if CO_NO_SYNC == 1
    /* SYNC */
    CO->SYNC = (CO_SYNC_t *)calloc(1, sizeof(CO_SYNC_t));
 8007e6e:	4b2a      	ldr	r3, [pc, #168]	; (8007f18 <CO_new+0x210>)
 8007e70:	681c      	ldr	r4, [r3, #0]
 8007e72:	2144      	movs	r1, #68	; 0x44
 8007e74:	2001      	movs	r0, #1
 8007e76:	f00f f9f9 	bl	801726c <calloc>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	6163      	str	r3, [r4, #20]
    if (CO->SYNC == NULL) errCnt++;
 8007e7e:	4b26      	ldr	r3, [pc, #152]	; (8007f18 <CO_new+0x210>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <CO_new+0x186>
 8007e88:	89bb      	ldrh	r3, [r7, #12]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_SYNC_t);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	3344      	adds	r3, #68	; 0x44
 8007e92:	60bb      	str	r3, [r7, #8]
    CO->SYNC = NULL;
#endif

#if CO_NO_TIME == 1
    /* TIME */
    CO->TIME = (CO_TIME_t *)calloc(1, sizeof(CO_TIME_t));
 8007e94:	4b20      	ldr	r3, [pc, #128]	; (8007f18 <CO_new+0x210>)
 8007e96:	681c      	ldr	r4, [r3, #0]
 8007e98:	2148      	movs	r1, #72	; 0x48
 8007e9a:	2001      	movs	r0, #1
 8007e9c:	f00f f9e6 	bl	801726c <calloc>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	61a3      	str	r3, [r4, #24]
    if (CO->TIME == NULL) errCnt++;
 8007ea4:	4b1c      	ldr	r3, [pc, #112]	; (8007f18 <CO_new+0x210>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <CO_new+0x1ac>
 8007eae:	89bb      	ldrh	r3, [r7, #12]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_TIME_t);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	3348      	adds	r3, #72	; 0x48
 8007eb8:	60bb      	str	r3, [r7, #8]
#else
    CO->TIME = NULL;
#endif

    /* RPDO */
    for (i = 0; i < CO_NO_RPDO; i++) {
 8007eba:	2300      	movs	r3, #0
 8007ebc:	81fb      	strh	r3, [r7, #14]
 8007ebe:	e020      	b.n	8007f02 <CO_new+0x1fa>
        CO->RPDO[i] = (CO_RPDO_t *)calloc(1, sizeof(CO_RPDO_t));
 8007ec0:	4b15      	ldr	r3, [pc, #84]	; (8007f18 <CO_new+0x210>)
 8007ec2:	681c      	ldr	r4, [r3, #0]
 8007ec4:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 8007ec8:	216c      	movs	r1, #108	; 0x6c
 8007eca:	2001      	movs	r0, #1
 8007ecc:	f00f f9ce 	bl	801726c <calloc>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	1dab      	adds	r3, r5, #6
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4423      	add	r3, r4
 8007eda:	605a      	str	r2, [r3, #4]
        if (CO->RPDO[i] == NULL) errCnt++;
 8007edc:	4b0e      	ldr	r3, [pc, #56]	; (8007f18 <CO_new+0x210>)
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ee4:	3306      	adds	r3, #6
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <CO_new+0x1ee>
 8007ef0:	89bb      	ldrh	r3, [r7, #12]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < CO_NO_RPDO; i++) {
 8007ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	3301      	adds	r3, #1
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	81fb      	strh	r3, [r7, #14]
 8007f02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	ddda      	ble.n	8007ec0 <CO_new+0x1b8>
    }
    CO_memoryUsed += sizeof(CO_RPDO_t) * CO_NO_RPDO;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8007f10:	60bb      	str	r3, [r7, #8]

    /* TPDO */
    for (i = 0; i < CO_NO_TPDO; i++) {
 8007f12:	2300      	movs	r3, #0
 8007f14:	81fb      	strh	r3, [r7, #14]
 8007f16:	e02b      	b.n	8007f70 <CO_new+0x268>
 8007f18:	20000a70 	.word	0x20000a70
 8007f1c:	20000a30 	.word	0x20000a30
 8007f20:	20000a74 	.word	0x20000a74
 8007f24:	20000a78 	.word	0x20000a78
 8007f28:	20000a7c 	.word	0x20000a7c
        CO->TPDO[i] = (CO_TPDO_t *)calloc(1, sizeof(CO_TPDO_t));
 8007f2c:	4b2e      	ldr	r3, [pc, #184]	; (8007fe8 <CO_new+0x2e0>)
 8007f2e:	681c      	ldr	r4, [r3, #0]
 8007f30:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 8007f34:	2158      	movs	r1, #88	; 0x58
 8007f36:	2001      	movs	r0, #1
 8007f38:	f00f f998 	bl	801726c <calloc>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f105 030a 	add.w	r3, r5, #10
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4423      	add	r3, r4
 8007f48:	605a      	str	r2, [r3, #4]
        if (CO->TPDO[i] == NULL) errCnt++;
 8007f4a:	4b27      	ldr	r3, [pc, #156]	; (8007fe8 <CO_new+0x2e0>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f52:	330a      	adds	r3, #10
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d102      	bne.n	8007f64 <CO_new+0x25c>
 8007f5e:	89bb      	ldrh	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < CO_NO_TPDO; i++) {
 8007f64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	81fb      	strh	r3, [r7, #14]
 8007f70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	ddd9      	ble.n	8007f2c <CO_new+0x224>
    }
    CO_memoryUsed += sizeof(CO_TPDO_t) * CO_NO_TPDO;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007f7e:	60bb      	str	r3, [r7, #8]

    /* Heartbeat consumer */
    CO->HBcons = (CO_HBconsumer_t *)calloc(1, sizeof(CO_HBconsumer_t));
 8007f80:	4b19      	ldr	r3, [pc, #100]	; (8007fe8 <CO_new+0x2e0>)
 8007f82:	681c      	ldr	r4, [r3, #0]
 8007f84:	2120      	movs	r1, #32
 8007f86:	2001      	movs	r0, #1
 8007f88:	f00f f970 	bl	801726c <calloc>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (CO->HBcons == NULL) errCnt++;
 8007f90:	4b15      	ldr	r3, [pc, #84]	; (8007fe8 <CO_new+0x2e0>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d102      	bne.n	8007fa0 <CO_new+0x298>
 8007f9a:	89bb      	ldrh	r3, [r7, #12]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	81bb      	strh	r3, [r7, #12]
    CO_HBcons_monitoredNodes =
        (CO_HBconsNode_t *)calloc(CO_NO_HB_CONS, sizeof(CO_HBconsNode_t));
 8007fa0:	2134      	movs	r1, #52	; 0x34
 8007fa2:	2004      	movs	r0, #4
 8007fa4:	f00f f962 	bl	801726c <calloc>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	461a      	mov	r2, r3
    CO_HBcons_monitoredNodes =
 8007fac:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <CO_new+0x2e4>)
 8007fae:	601a      	str	r2, [r3, #0]
    if (CO_HBcons_monitoredNodes == NULL) errCnt++;
 8007fb0:	4b0e      	ldr	r3, [pc, #56]	; (8007fec <CO_new+0x2e4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d102      	bne.n	8007fbe <CO_new+0x2b6>
 8007fb8:	89bb      	ldrh	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	81bb      	strh	r3, [r7, #12]
    CO_memoryUsed += sizeof(CO_HBconsumer_t) +
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	33f0      	adds	r3, #240	; 0xf0
 8007fc2:	60bb      	str	r3, [r7, #8]
        }
        CO_memoryUsed += CO_traceBufferSize[i] * sizeof(uint32_t) * 2;
    }
#endif

    if(heapMemoryUsed != NULL) {
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <CO_new+0x2c8>
        *heapMemoryUsed = CO_memoryUsed;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	601a      	str	r2, [r3, #0]
    }

    return (errCnt == 0) ? CO_ERROR_NO : CO_ERROR_OUT_OF_MEMORY;
 8007fd0:	89bb      	ldrh	r3, [r7, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <CO_new+0x2d2>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e001      	b.n	8007fde <CO_new+0x2d6>
 8007fda:	f06f 0301 	mvn.w	r3, #1
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000a70 	.word	0x20000a70
 8007fec:	20000a80 	.word	0x20000a80

08007ff0 <CO_CANinit>:


/******************************************************************************/
CO_ReturnError_t CO_CANinit(void *CANptr,
                            uint16_t bitRate)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af04      	add	r7, sp, #16
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	807b      	strh	r3, [r7, #2]
    CO_ReturnError_t err;

    CO->CANmodule[0]->CANnormal = false;
 8007ffc:	4b10      	ldr	r3, [pc, #64]	; (8008040 <CO_CANinit+0x50>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2200      	movs	r2, #0
 8008004:	749a      	strb	r2, [r3, #18]
    CO_CANsetConfigurationMode(CANptr);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 f82e 	bl	8009068 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(CO->CANmodule[0],
 800800c:	4b0c      	ldr	r3, [pc, #48]	; (8008040 <CO_CANinit+0x50>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <CO_CANinit+0x54>)
 8008014:	6819      	ldr	r1, [r3, #0]
 8008016:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <CO_CANinit+0x58>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	887a      	ldrh	r2, [r7, #2]
 800801c:	9202      	str	r2, [sp, #8]
 800801e:	2209      	movs	r2, #9
 8008020:	9201      	str	r2, [sp, #4]
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	230d      	movs	r3, #13
 8008026:	460a      	mov	r2, r1
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	f001 f84b 	bl	80090c4 <CO_CANmodule_init>
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]
                            CO_RXCAN_NO_MSGS,
                            CO_CANmodule_txArray0,
                            CO_TXCAN_NO_MSGS,
                            bitRate);

    return err;
 8008032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20000a70 	.word	0x20000a70
 8008044:	20000a74 	.word	0x20000a74
 8008048:	20000a78 	.word	0x20000a78

0800804c <CO_CANopenInit>:
}
#endif /* CO_NO_LSS_SERVER == 1 */


/******************************************************************************/
CO_ReturnError_t CO_CANopenInit(uint8_t nodeId) {
 800804c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800804e:	b097      	sub	sp, #92	; 0x5c
 8008050:	af0a      	add	r7, sp, #40	; 0x28
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]
    int16_t i;
    CO_ReturnError_t err;

    /* Verify CANopen Node-ID */
    if (nodeId < 1 || nodeId > 127) {
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <CO_CANopenInit+0x18>
 800805c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008060:	2b00      	cmp	r3, #0
 8008062:	da02      	bge.n	800806a <CO_CANopenInit+0x1e>
        return CO_ERROR_PARAMETERS;
 8008064:	f06f 030b 	mvn.w	r3, #11
 8008068:	e256      	b.n	8008518 <CO_CANopenInit+0x4cc>
    }
#endif


    /* SDOserver */
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 800806a:	2300      	movs	r3, #0
 800806c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800806e:	e069      	b.n	8008144 <CO_CANopenInit+0xf8>
        uint32_t COB_IDClientToServer;
        uint32_t COB_IDServerToClient;
        if (i == 0) {
 8008070:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008074:	2b00      	cmp	r3, #0
 8008076:	d107      	bne.n	8008088 <CO_CANopenInit+0x3c>
            /*Default SDO server must be located at first index*/
            COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800807e:	62bb      	str	r3, [r7, #40]	; 0x28
            COB_IDServerToClient = CO_CAN_ID_TSDO + 0x01;
 8008080:	f240 5381 	movw	r3, #1409	; 0x581
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
 8008086:	e015      	b.n	80080b4 <CO_CANopenInit+0x68>
        }
        else {
            COB_IDClientToServer =
                OD_SDOServerParameter[i].COB_IDClientToServer;
 8008088:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
            COB_IDClientToServer =
 800808c:	4997      	ldr	r1, [pc, #604]	; (80082ec <CO_CANopenInit+0x2a0>)
 800808e:	4613      	mov	r3, r2
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	4413      	add	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	440b      	add	r3, r1
 8008098:	3368      	adds	r3, #104	; 0x68
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
            COB_IDServerToClient =
                OD_SDOServerParameter[i].COB_IDServerToClient;
 800809e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
            COB_IDServerToClient =
 80080a2:	4992      	ldr	r1, [pc, #584]	; (80082ec <CO_CANopenInit+0x2a0>)
 80080a4:	4613      	mov	r3, r2
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	440b      	add	r3, r1
 80080ae:	336c      	adds	r3, #108	; 0x6c
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
        }

        err = CO_SDO_init(CO->SDO[i],
 80080b4:	4b8e      	ldr	r3, [pc, #568]	; (80082f0 <CO_CANopenInit+0x2a4>)
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	685e      	ldr	r6, [r3, #4]
 80080c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080c4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80080c8:	fa1f fc83 	uxth.w	ip, r3
 80080cc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <CO_CANopenInit+0x90>
                          COB_IDClientToServer,
                          COB_IDServerToClient,
                          OD_H1200_SDO_SERVER_PARAM + i,
                          i == 0 ? 0 : CO->SDO[0],
 80080d4:	4b86      	ldr	r3, [pc, #536]	; (80082f0 <CO_CANopenInit+0x2a4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
        err = CO_SDO_init(CO->SDO[i],
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	e000      	b.n	80080de <CO_CANopenInit+0x92>
 80080dc:	2300      	movs	r3, #0
 80080de:	4a85      	ldr	r2, [pc, #532]	; (80082f4 <CO_CANopenInit+0x2a8>)
 80080e0:	6812      	ldr	r2, [r2, #0]
                          &CO_OD[0],
                          CO_OD_NoOfElements,
                          CO_SDO_ODExtensions,
                          nodeId,
                          30000,
                          CO->CANmodule[0],
 80080e2:	4983      	ldr	r1, [pc, #524]	; (80082f0 <CO_CANopenInit+0x2a4>)
 80080e4:	6809      	ldr	r1, [r1, #0]
        err = CO_SDO_init(CO->SDO[i],
 80080e6:	6809      	ldr	r1, [r1, #0]
 80080e8:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 80080ea:	3008      	adds	r0, #8
 80080ec:	b280      	uxth	r0, r0
                          CO_RXCAN_SDO_SRV + i,
                          CO->CANmodule[0],
 80080ee:	4c80      	ldr	r4, [pc, #512]	; (80082f0 <CO_CANopenInit+0x2a4>)
 80080f0:	6824      	ldr	r4, [r4, #0]
        err = CO_SDO_init(CO->SDO[i],
 80080f2:	6824      	ldr	r4, [r4, #0]
 80080f4:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 80080f6:	3507      	adds	r5, #7
 80080f8:	b2ad      	uxth	r5, r5
 80080fa:	9509      	str	r5, [sp, #36]	; 0x24
 80080fc:	9408      	str	r4, [sp, #32]
 80080fe:	9007      	str	r0, [sp, #28]
 8008100:	9106      	str	r1, [sp, #24]
 8008102:	f247 5130 	movw	r1, #30000	; 0x7530
 8008106:	9105      	str	r1, [sp, #20]
 8008108:	7df9      	ldrb	r1, [r7, #23]
 800810a:	9104      	str	r1, [sp, #16]
 800810c:	9203      	str	r2, [sp, #12]
 800810e:	2244      	movs	r2, #68	; 0x44
 8008110:	9202      	str	r2, [sp, #8]
 8008112:	4a79      	ldr	r2, [pc, #484]	; (80082f8 <CO_CANopenInit+0x2ac>)
 8008114:	9201      	str	r2, [sp, #4]
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	4663      	mov	r3, ip
 800811a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800811e:	4630      	mov	r0, r6
 8008120:	f7fc ffec 	bl	80050fc <CO_SDO_init>
 8008124:	4603      	mov	r3, r0
 8008126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                          CO_TXCAN_SDO_SRV + i);

        if (err) return err;
 800812a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <CO_CANopenInit+0xec>
 8008132:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008136:	e1ef      	b.n	8008518 <CO_CANopenInit+0x4cc>
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8008138:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800813c:	b29b      	uxth	r3, r3
 800813e:	3301      	adds	r3, #1
 8008140:	b29b      	uxth	r3, r3
 8008142:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008144:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008148:	2b00      	cmp	r3, #0
 800814a:	dd91      	ble.n	8008070 <CO_CANopenInit+0x24>
    }


    /* Emergency */
    err = CO_EM_init(CO->em,
 800814c:	4b68      	ldr	r3, [pc, #416]	; (80082f0 <CO_CANopenInit+0x2a4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6898      	ldr	r0, [r3, #8]
                     CO->emPr,
 8008152:	4b67      	ldr	r3, [pc, #412]	; (80082f0 <CO_CANopenInit+0x2a4>)
 8008154:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(CO->em,
 8008156:	68dc      	ldr	r4, [r3, #12]
                     CO->SDO[0],
 8008158:	4b65      	ldr	r3, [pc, #404]	; (80082f0 <CO_CANopenInit+0x2a4>)
 800815a:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(CO->em,
 800815c:	685d      	ldr	r5, [r3, #4]
                     &OD_errorStatusBits[0],
                     ODL_errorStatusBits_stringLength,
                     &OD_errorRegister,
                     &OD_preDefinedErrorField[0],
                     ODL_preDefinedErrorField_arrayLength,
                     CO->CANmodule[0],
 800815e:	4b64      	ldr	r3, [pc, #400]	; (80082f0 <CO_CANopenInit+0x2a4>)
 8008160:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(CO->em,
 8008162:	681b      	ldr	r3, [r3, #0]
                     CO_RXCAN_EMERG,
                     CO->CANmodule[0],
 8008164:	4a62      	ldr	r2, [pc, #392]	; (80082f0 <CO_CANopenInit+0x2a4>)
 8008166:	6812      	ldr	r2, [r2, #0]
    err = CO_EM_init(CO->em,
 8008168:	6812      	ldr	r2, [r2, #0]
 800816a:	7df9      	ldrb	r1, [r7, #23]
 800816c:	b289      	uxth	r1, r1
 800816e:	3180      	adds	r1, #128	; 0x80
 8008170:	b289      	uxth	r1, r1
 8008172:	9108      	str	r1, [sp, #32]
 8008174:	2101      	movs	r1, #1
 8008176:	9107      	str	r1, [sp, #28]
 8008178:	9206      	str	r2, [sp, #24]
 800817a:	2202      	movs	r2, #2
 800817c:	9205      	str	r2, [sp, #20]
 800817e:	9304      	str	r3, [sp, #16]
 8008180:	2308      	movs	r3, #8
 8008182:	9303      	str	r3, [sp, #12]
 8008184:	4b5d      	ldr	r3, [pc, #372]	; (80082fc <CO_CANopenInit+0x2b0>)
 8008186:	9302      	str	r3, [sp, #8]
 8008188:	4b5d      	ldr	r3, [pc, #372]	; (8008300 <CO_CANopenInit+0x2b4>)
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	230a      	movs	r3, #10
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	4b5c      	ldr	r3, [pc, #368]	; (8008304 <CO_CANopenInit+0x2b8>)
 8008192:	462a      	mov	r2, r5
 8008194:	4621      	mov	r1, r4
 8008196:	f7fa fb53 	bl	8002840 <CO_EM_init>
 800819a:	4603      	mov	r3, r0
 800819c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                     CO_TXCAN_EMERG,
                     (uint16_t)CO_CAN_ID_EMERGENCY + nodeId);

    if (err) return err;
 80081a0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <CO_CANopenInit+0x162>
 80081a8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80081ac:	e1b4      	b.n	8008518 <CO_CANopenInit+0x4cc>

    /* NMT_Heartbeat */
    err = CO_NMT_init(CO->NMT,
 80081ae:	4b50      	ldr	r3, [pc, #320]	; (80082f0 <CO_CANopenInit+0x2a4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	691c      	ldr	r4, [r3, #16]
                      CO->emPr,
 80081b4:	4b4e      	ldr	r3, [pc, #312]	; (80082f0 <CO_CANopenInit+0x2a4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(CO->NMT,
 80081b8:	68dd      	ldr	r5, [r3, #12]
                      nodeId,
                      500,
                      CO->CANmodule[0],
 80081ba:	4b4d      	ldr	r3, [pc, #308]	; (80082f0 <CO_CANopenInit+0x2a4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(CO->NMT,
 80081be:	681b      	ldr	r3, [r3, #0]
                      CO_RXCAN_NMT,
                      CO_CAN_ID_NMT_SERVICE,
                      CO->CANmodule[0],
 80081c0:	4a4b      	ldr	r2, [pc, #300]	; (80082f0 <CO_CANopenInit+0x2a4>)
 80081c2:	6812      	ldr	r2, [r2, #0]
    err = CO_NMT_init(CO->NMT,
 80081c4:	6812      	ldr	r2, [r2, #0]
                      CO_TXCAN_NMT,
                      CO_CAN_ID_NMT_SERVICE,
                      CO->CANmodule[0],
 80081c6:	494a      	ldr	r1, [pc, #296]	; (80082f0 <CO_CANopenInit+0x2a4>)
 80081c8:	6809      	ldr	r1, [r1, #0]
    err = CO_NMT_init(CO->NMT,
 80081ca:	6809      	ldr	r1, [r1, #0]
 80081cc:	7df8      	ldrb	r0, [r7, #23]
 80081ce:	b280      	uxth	r0, r0
 80081d0:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
 80081d4:	b280      	uxth	r0, r0
 80081d6:	7dfe      	ldrb	r6, [r7, #23]
 80081d8:	9008      	str	r0, [sp, #32]
 80081da:	2008      	movs	r0, #8
 80081dc:	9007      	str	r0, [sp, #28]
 80081de:	9106      	str	r1, [sp, #24]
 80081e0:	2100      	movs	r1, #0
 80081e2:	9105      	str	r1, [sp, #20]
 80081e4:	2100      	movs	r1, #0
 80081e6:	9104      	str	r1, [sp, #16]
 80081e8:	9203      	str	r2, [sp, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	9202      	str	r2, [sp, #8]
 80081ee:	2200      	movs	r2, #0
 80081f0:	9201      	str	r2, [sp, #4]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80081f8:	4632      	mov	r2, r6
 80081fa:	4629      	mov	r1, r5
 80081fc:	4620      	mov	r0, r4
 80081fe:	f7fb f9ad 	bl	800355c <CO_NMT_init>
 8008202:	4603      	mov	r3, r0
 8008204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                      CO_TXCAN_HB,
                      CO_CAN_ID_HEARTBEAT + nodeId);

    if (err) return err;
 8008208:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <CO_CANopenInit+0x1ca>
 8008210:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008214:	e180      	b.n	8008518 <CO_CANopenInit+0x4cc>

#if CO_NO_SYNC == 1
    /* SYNC */
    err = CO_SYNC_init(CO->SYNC,
 8008216:	4b36      	ldr	r3, [pc, #216]	; (80082f0 <CO_CANopenInit+0x2a4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	695d      	ldr	r5, [r3, #20]
                       CO->em,
 800821c:	4b34      	ldr	r3, [pc, #208]	; (80082f0 <CO_CANopenInit+0x2a4>)
 800821e:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(CO->SYNC,
 8008220:	689e      	ldr	r6, [r3, #8]
                       CO->SDO[0],
 8008222:	4b33      	ldr	r3, [pc, #204]	; (80082f0 <CO_CANopenInit+0x2a4>)
 8008224:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(CO->SYNC,
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	613b      	str	r3, [r7, #16]
                       &CO->NMT->operatingState,
 800822a:	4b31      	ldr	r3, [pc, #196]	; (80082f0 <CO_CANopenInit+0x2a4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	691b      	ldr	r3, [r3, #16]
    err = CO_SYNC_init(CO->SYNC,
 8008230:	f103 0c0c 	add.w	ip, r3, #12
 8008234:	4b2d      	ldr	r3, [pc, #180]	; (80082ec <CO_CANopenInit+0x2a0>)
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	4a2c      	ldr	r2, [pc, #176]	; (80082ec <CO_CANopenInit+0x2a0>)
 800823a:	68d2      	ldr	r2, [r2, #12]
 800823c:	492b      	ldr	r1, [pc, #172]	; (80082ec <CO_CANopenInit+0x2a0>)
 800823e:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
 8008242:	60f9      	str	r1, [r7, #12]
                       OD_COB_ID_SYNCMessage,
                       OD_communicationCyclePeriod,
                       OD_synchronousCounterOverflowValue,
                       CO->CANmodule[0],
 8008244:	482a      	ldr	r0, [pc, #168]	; (80082f0 <CO_CANopenInit+0x2a4>)
 8008246:	6800      	ldr	r0, [r0, #0]
    err = CO_SYNC_init(CO->SYNC,
 8008248:	6800      	ldr	r0, [r0, #0]
                       CO_RXCAN_SYNC,
                       CO->CANmodule[0],
 800824a:	4c29      	ldr	r4, [pc, #164]	; (80082f0 <CO_CANopenInit+0x2a4>)
 800824c:	6824      	ldr	r4, [r4, #0]
    err = CO_SYNC_init(CO->SYNC,
 800824e:	6824      	ldr	r4, [r4, #0]
 8008250:	2100      	movs	r1, #0
 8008252:	9106      	str	r1, [sp, #24]
 8008254:	9405      	str	r4, [sp, #20]
 8008256:	2401      	movs	r4, #1
 8008258:	9404      	str	r4, [sp, #16]
 800825a:	9003      	str	r0, [sp, #12]
 800825c:	68f9      	ldr	r1, [r7, #12]
 800825e:	9102      	str	r1, [sp, #8]
 8008260:	9201      	str	r2, [sp, #4]
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	4663      	mov	r3, ip
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	f7fe feac 	bl	8006fc8 <CO_SYNC_init>
 8008270:	4603      	mov	r3, r0
 8008272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                       CO_TXCAN_SYNC);

    if (err) return err;
 8008276:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <CO_CANopenInit+0x238>
 800827e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008282:	e149      	b.n	8008518 <CO_CANopenInit+0x4cc>
#endif

#if CO_NO_TIME == 1
    /* TIME */
    err = CO_TIME_init(CO->TIME,
 8008284:	4b1a      	ldr	r3, [pc, #104]	; (80082f0 <CO_CANopenInit+0x2a4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6998      	ldr	r0, [r3, #24]
                       CO->em,
 800828a:	4b19      	ldr	r3, [pc, #100]	; (80082f0 <CO_CANopenInit+0x2a4>)
 800828c:	681b      	ldr	r3, [r3, #0]
    err = CO_TIME_init(CO->TIME,
 800828e:	689c      	ldr	r4, [r3, #8]
                       CO->SDO[0],
 8008290:	4b17      	ldr	r3, [pc, #92]	; (80082f0 <CO_CANopenInit+0x2a4>)
 8008292:	681b      	ldr	r3, [r3, #0]
    err = CO_TIME_init(CO->TIME,
 8008294:	685d      	ldr	r5, [r3, #4]
                       &CO->NMT->operatingState,
 8008296:	4b16      	ldr	r3, [pc, #88]	; (80082f0 <CO_CANopenInit+0x2a4>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	691b      	ldr	r3, [r3, #16]
    err = CO_TIME_init(CO->TIME,
 800829c:	f103 060c 	add.w	r6, r3, #12
 80082a0:	4b12      	ldr	r3, [pc, #72]	; (80082ec <CO_CANopenInit+0x2a0>)
 80082a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a4:	613b      	str	r3, [r7, #16]
                       OD_COB_ID_TIME,
                       0,
                       CO->CANmodule[0],
 80082a6:	4a12      	ldr	r2, [pc, #72]	; (80082f0 <CO_CANopenInit+0x2a4>)
 80082a8:	6812      	ldr	r2, [r2, #0]
    err = CO_TIME_init(CO->TIME,
 80082aa:	6812      	ldr	r2, [r2, #0]
                       CO_RXCAN_TIME,
                       CO->CANmodule[0],
 80082ac:	4910      	ldr	r1, [pc, #64]	; (80082f0 <CO_CANopenInit+0x2a4>)
 80082ae:	6809      	ldr	r1, [r1, #0]
    err = CO_TIME_init(CO->TIME,
 80082b0:	6809      	ldr	r1, [r1, #0]
 80082b2:	2302      	movs	r3, #2
 80082b4:	9305      	str	r3, [sp, #20]
 80082b6:	9104      	str	r1, [sp, #16]
 80082b8:	2103      	movs	r1, #3
 80082ba:	9103      	str	r1, [sp, #12]
 80082bc:	9202      	str	r2, [sp, #8]
 80082be:	2200      	movs	r2, #0
 80082c0:	9201      	str	r2, [sp, #4]
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	4633      	mov	r3, r6
 80082c8:	462a      	mov	r2, r5
 80082ca:	4621      	mov	r1, r4
 80082cc:	f7ff f856 	bl	800737c <CO_TIME_init>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                       CO_TXCAN_TIME);

    if (err) return err;
 80082d6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <CO_CANopenInit+0x298>
 80082de:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80082e2:	e119      	b.n	8008518 <CO_CANopenInit+0x4cc>
#endif

    /* RPDO */
    for (i = 0; i < CO_NO_RPDO; i++) {
 80082e4:	2300      	movs	r3, #0
 80082e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80082e8:	e079      	b.n	80083de <CO_CANopenInit+0x392>
 80082ea:	bf00      	nop
 80082ec:	200001cc 	.word	0x200001cc
 80082f0:	20000a70 	.word	0x20000a70
 80082f4:	20000a7c 	.word	0x20000a7c
 80082f8:	08019194 	.word	0x08019194
 80082fc:	2000007c 	.word	0x2000007c
 8008300:	20000074 	.word	0x20000074
 8008304:	200000b4 	.word	0x200000b4
        CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
 8008308:	4b85      	ldr	r3, [pc, #532]	; (8008520 <CO_CANopenInit+0x4d4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	61fb      	str	r3, [r7, #28]
        uint16_t CANdevRxIdx = CO_RXCAN_RPDO + i;
 8008310:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008312:	3304      	adds	r3, #4
 8008314:	837b      	strh	r3, [r7, #26]

        err = CO_RPDO_init(CO->RPDO[i],
 8008316:	4b82      	ldr	r3, [pc, #520]	; (8008520 <CO_CANopenInit+0x4d4>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800831e:	3306      	adds	r3, #6
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	613b      	str	r3, [r7, #16]
                           CO->em,
 8008328:	4b7d      	ldr	r3, [pc, #500]	; (8008520 <CO_CANopenInit+0x4d4>)
 800832a:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(CO->RPDO[i],
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	60fb      	str	r3, [r7, #12]
                           CO->SDO[0],
 8008330:	4b7b      	ldr	r3, [pc, #492]	; (8008520 <CO_CANopenInit+0x4d4>)
 8008332:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(CO->RPDO[i],
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	60bb      	str	r3, [r7, #8]
                           (void *)CO->SYNC,
 8008338:	4b79      	ldr	r3, [pc, #484]	; (8008520 <CO_CANopenInit+0x4d4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	607b      	str	r3, [r7, #4]
                           &CO->NMT->operatingState,
 8008340:	4b77      	ldr	r3, [pc, #476]	; (8008520 <CO_CANopenInit+0x4d4>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	691b      	ldr	r3, [r3, #16]
        err = CO_RPDO_init(CO->RPDO[i],
 8008346:	f103 000c 	add.w	r0, r3, #12
 800834a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800834e:	2b03      	cmp	r3, #3
 8008350:	dc06      	bgt.n	8008360 <CO_CANopenInit+0x314>
                           nodeId,
                           ((i < 4) ? (CO_CAN_ID_RPDO_1 + i * 0x100) : 0),
 8008352:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008356:	3302      	adds	r3, #2
        err = CO_RPDO_init(CO->RPDO[i],
 8008358:	b29b      	uxth	r3, r3
 800835a:	021b      	lsls	r3, r3, #8
 800835c:	b29a      	uxth	r2, r3
 800835e:	e000      	b.n	8008362 <CO_CANopenInit+0x316>
 8008360:	2200      	movs	r2, #0
                           0,
                           (CO_RPDOCommPar_t*)&OD_RPDOCommunicationParameter[i],
 8008362:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8008366:	460b      	mov	r3, r1
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	440b      	add	r3, r1
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	3370      	adds	r3, #112	; 0x70
 8008370:	496c      	ldr	r1, [pc, #432]	; (8008524 <CO_CANopenInit+0x4d8>)
 8008372:	185c      	adds	r4, r3, r1
                           (CO_RPDOMapPar_t *)&OD_RPDOMappingParameter[i],
 8008374:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8008378:	460b      	mov	r3, r1
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	440b      	add	r3, r1
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	33a0      	adds	r3, #160	; 0xa0
 8008382:	4968      	ldr	r1, [pc, #416]	; (8008524 <CO_CANopenInit+0x4d8>)
 8008384:	440b      	add	r3, r1
        err = CO_RPDO_init(CO->RPDO[i],
 8008386:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8008388:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 800838c:	b289      	uxth	r1, r1
 800838e:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 8008390:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
 8008394:	b2ad      	uxth	r5, r5
 8008396:	8b7e      	ldrh	r6, [r7, #26]
 8008398:	9609      	str	r6, [sp, #36]	; 0x24
 800839a:	69fe      	ldr	r6, [r7, #28]
 800839c:	9608      	str	r6, [sp, #32]
 800839e:	9507      	str	r5, [sp, #28]
 80083a0:	9106      	str	r1, [sp, #24]
 80083a2:	9305      	str	r3, [sp, #20]
 80083a4:	9404      	str	r4, [sp, #16]
 80083a6:	2300      	movs	r3, #0
 80083a8:	9303      	str	r3, [sp, #12]
 80083aa:	9202      	str	r2, [sp, #8]
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	9000      	str	r0, [sp, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	68f9      	ldr	r1, [r7, #12]
 80083b8:	6938      	ldr	r0, [r7, #16]
 80083ba:	f7fc f9d1 	bl	8004760 <CO_RPDO_init>
 80083be:	4603      	mov	r3, r0
 80083c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                           OD_H1400_RXPDO_1_PARAM + i,
                           OD_H1600_RXPDO_1_MAPPING + i,
                           CANdevRx,
                           CANdevRxIdx);

        if (err) return err;
 80083c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <CO_CANopenInit+0x386>
 80083cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80083d0:	e0a2      	b.n	8008518 <CO_CANopenInit+0x4cc>
    for (i = 0; i < CO_NO_RPDO; i++) {
 80083d2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3301      	adds	r3, #1
 80083da:	b29b      	uxth	r3, r3
 80083dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80083de:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	dd90      	ble.n	8008308 <CO_CANopenInit+0x2bc>
    }

    /* TPDO */
    for (i = 0; i < CO_NO_TPDO; i++) {
 80083e6:	2300      	movs	r3, #0
 80083e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80083ea:	e06e      	b.n	80084ca <CO_CANopenInit+0x47e>
        err = CO_TPDO_init(CO->TPDO[i],
 80083ec:	4b4c      	ldr	r3, [pc, #304]	; (8008520 <CO_CANopenInit+0x4d4>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80083f4:	330a      	adds	r3, #10
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	613b      	str	r3, [r7, #16]
                           CO->em,
 80083fe:	4b48      	ldr	r3, [pc, #288]	; (8008520 <CO_CANopenInit+0x4d4>)
 8008400:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	60fb      	str	r3, [r7, #12]
                           CO->SDO[0],
 8008406:	4b46      	ldr	r3, [pc, #280]	; (8008520 <CO_CANopenInit+0x4d4>)
 8008408:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	60bb      	str	r3, [r7, #8]
                           (void *)CO->SYNC,
 800840e:	4b44      	ldr	r3, [pc, #272]	; (8008520 <CO_CANopenInit+0x4d4>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	607b      	str	r3, [r7, #4]
                           &CO->NMT->operatingState,
 8008416:	4b42      	ldr	r3, [pc, #264]	; (8008520 <CO_CANopenInit+0x4d4>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	691b      	ldr	r3, [r3, #16]
        err = CO_TPDO_init(CO->TPDO[i],
 800841c:	f103 000c 	add.w	r0, r3, #12
 8008420:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008424:	2b03      	cmp	r3, #3
 8008426:	dc06      	bgt.n	8008436 <CO_CANopenInit+0x3ea>
                           nodeId,
                           ((i < 4) ? (CO_CAN_ID_TPDO_1 + i * 0x100) : 0),
 8008428:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800842a:	021b      	lsls	r3, r3, #8
 800842c:	b29b      	uxth	r3, r3
        err = CO_TPDO_init(CO->TPDO[i],
 800842e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008432:	b29a      	uxth	r2, r3
 8008434:	e000      	b.n	8008438 <CO_CANopenInit+0x3ec>
 8008436:	2200      	movs	r2, #0
                           0,
                           (CO_TPDOCommPar_t*)&OD_TPDOCommunicationParameter[i],
 8008438:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 800843c:	460b      	mov	r3, r1
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8008448:	4936      	ldr	r1, [pc, #216]	; (8008524 <CO_CANopenInit+0x4d8>)
 800844a:	185c      	adds	r4, r3, r1
                           (CO_TPDOMapPar_t *)&OD_TPDOMappingParameter[i],
 800844c:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8008450:	460b      	mov	r3, r1
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	440b      	add	r3, r1
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800845c:	4931      	ldr	r1, [pc, #196]	; (8008524 <CO_CANopenInit+0x4d8>)
 800845e:	440b      	add	r3, r1
 8008460:	603b      	str	r3, [r7, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 8008462:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8008464:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8008468:	b289      	uxth	r1, r1
 800846a:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 800846c:	f505 55d0 	add.w	r5, r5, #6656	; 0x1a00
 8008470:	b2ad      	uxth	r5, r5
                           OD_H1800_TXPDO_1_PARAM + i,
                           OD_H1A00_TXPDO_1_MAPPING + i,
                           CO->CANmodule[0],
 8008472:	4e2b      	ldr	r6, [pc, #172]	; (8008520 <CO_CANopenInit+0x4d4>)
 8008474:	6836      	ldr	r6, [r6, #0]
        err = CO_TPDO_init(CO->TPDO[i],
 8008476:	6836      	ldr	r6, [r6, #0]
 8008478:	f8b7 c02e 	ldrh.w	ip, [r7, #46]	; 0x2e
 800847c:	f10c 0c03 	add.w	ip, ip, #3
 8008480:	fa1f f38c 	uxth.w	r3, ip
 8008484:	9309      	str	r3, [sp, #36]	; 0x24
 8008486:	9608      	str	r6, [sp, #32]
 8008488:	9507      	str	r5, [sp, #28]
 800848a:	9106      	str	r1, [sp, #24]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	9305      	str	r3, [sp, #20]
 8008490:	9404      	str	r4, [sp, #16]
 8008492:	2300      	movs	r3, #0
 8008494:	9303      	str	r3, [sp, #12]
 8008496:	9202      	str	r2, [sp, #8]
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	9301      	str	r3, [sp, #4]
 800849c:	9000      	str	r0, [sp, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	68f9      	ldr	r1, [r7, #12]
 80084a4:	6938      	ldr	r0, [r7, #16]
 80084a6:	f7fc f9d3 	bl	8004850 <CO_TPDO_init>
 80084aa:	4603      	mov	r3, r0
 80084ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                           CO_TXCAN_TPDO + i);

        if (err) return err;
 80084b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <CO_CANopenInit+0x472>
 80084b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80084bc:	e02c      	b.n	8008518 <CO_CANopenInit+0x4cc>
    for (i = 0; i < CO_NO_TPDO; i++) {
 80084be:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3301      	adds	r3, #1
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80084ca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	dd8c      	ble.n	80083ec <CO_CANopenInit+0x3a0>
    }

    /* Heartbeat consumer */
    err = CO_HBconsumer_init(CO->HBcons,
 80084d2:	4b13      	ldr	r3, [pc, #76]	; (8008520 <CO_CANopenInit+0x4d4>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
                             CO->em,
 80084d8:	4b11      	ldr	r3, [pc, #68]	; (8008520 <CO_CANopenInit+0x4d4>)
 80084da:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(CO->HBcons,
 80084dc:	6899      	ldr	r1, [r3, #8]
                             CO->SDO[0],
 80084de:	4b10      	ldr	r3, [pc, #64]	; (8008520 <CO_CANopenInit+0x4d4>)
 80084e0:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(CO->HBcons,
 80084e2:	685c      	ldr	r4, [r3, #4]
 80084e4:	4b10      	ldr	r3, [pc, #64]	; (8008528 <CO_CANopenInit+0x4dc>)
 80084e6:	681b      	ldr	r3, [r3, #0]
                             &OD_consumerHeartbeatTime[0],
                             CO_HBcons_monitoredNodes,
                             CO_NO_HB_CONS,
                             CO->CANmodule[0],
 80084e8:	4a0d      	ldr	r2, [pc, #52]	; (8008520 <CO_CANopenInit+0x4d4>)
 80084ea:	6812      	ldr	r2, [r2, #0]
    err = CO_HBconsumer_init(CO->HBcons,
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	2509      	movs	r5, #9
 80084f0:	9503      	str	r5, [sp, #12]
 80084f2:	9202      	str	r2, [sp, #8]
 80084f4:	2204      	movs	r2, #4
 80084f6:	9201      	str	r2, [sp, #4]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <CO_CANopenInit+0x4e0>)
 80084fc:	4622      	mov	r2, r4
 80084fe:	f7fa fd59 	bl	8002fb4 <CO_HBconsumer_init>
 8008502:	4603      	mov	r3, r0
 8008504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             CO_RXCAN_CONS_HB);

    if (err) return err;
 8008508:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <CO_CANopenInit+0x4ca>
 8008510:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008514:	e000      	b.n	8008518 <CO_CANopenInit+0x4cc>
                      OD_INDEX_TRACE_CONFIG + i,
                      OD_INDEX_TRACE + i);
    }
#endif

    return CO_ERROR_NO;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3734      	adds	r7, #52	; 0x34
 800851c:	46bd      	mov	sp, r7
 800851e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008520:	20000a70 	.word	0x20000a70
 8008524:	200001cc 	.word	0x200001cc
 8008528:	20000a80 	.word	0x20000a80
 800852c:	20000200 	.word	0x20000200

08008530 <CO_process>:

/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 8008530:	b590      	push	{r4, r7, lr}
 8008532:	b08b      	sub	sp, #44	; 0x2c
 8008534:	af04      	add	r7, sp, #16
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
    uint8_t i;
    bool_t NMTisPreOrOperational = false;
 800853c:	2300      	movs	r3, #0
 800853e:	75bb      	strb	r3, [r7, #22]
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8008540:	2300      	movs	r3, #0
 8008542:	757b      	strb	r3, [r7, #21]

    if (co->NMT->operatingState == CO_NMT_PRE_OPERATIONAL ||
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800854c:	2b7f      	cmp	r3, #127	; 0x7f
 800854e:	d005      	beq.n	800855c <CO_process+0x2c>
        co->NMT->operatingState == CO_NMT_OPERATIONAL)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	f993 300c 	ldrsb.w	r3, [r3, #12]
    if (co->NMT->operatingState == CO_NMT_PRE_OPERATIONAL ||
 8008558:	2b05      	cmp	r3, #5
 800855a:	d101      	bne.n	8008560 <CO_process+0x30>
        NMTisPreOrOperational = true;
 800855c:	2301      	movs	r3, #1
 800855e:	75bb      	strb	r3, [r7, #22]

    /* SDOserver */
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 8008560:	2300      	movs	r3, #0
 8008562:	75fb      	strb	r3, [r7, #23]
 8008564:	e00c      	b.n	8008580 <CO_process+0x50>
        CO_SDO_process(co->SDO[i],
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	6858      	ldr	r0, [r3, #4]
 8008570:	7db9      	ldrb	r1, [r7, #22]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	f7fd fa75 	bl	8005a64 <CO_SDO_process>
    for (i = 0; i < CO_NO_SDO_SERVER; i++) {
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	3301      	adds	r3, #1
 800857e:	75fb      	strb	r3, [r7, #23]
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0ef      	beq.n	8008566 <CO_process+0x36>
                       timeDifference_us,
                       timerNext_us);
    }

    /* Emergency */
    CO_EM_process(co->emPr,
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	68d8      	ldr	r0, [r3, #12]
 800858a:	4b18      	ldr	r3, [pc, #96]	; (80085ec <CO_process+0xbc>)
 800858c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800858e:	7db9      	ldrb	r1, [r7, #22]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	4613      	mov	r3, r2
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	f7fa fa12 	bl	80029c0 <CO_EM_process>
                  timeDifference_us,
                  OD_inhibitTimeEMCY,
                  timerNext_us);

    /* NMT_Heartbeat */
    reset = CO_NMT_process(co->NMT,
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6918      	ldr	r0, [r3, #16]
 80085a0:	4b12      	ldr	r3, [pc, #72]	; (80085ec <CO_process+0xbc>)
 80085a2:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 80085a6:	4b11      	ldr	r3, [pc, #68]	; (80085ec <CO_process+0xbc>)
 80085a8:	f8d3 4210 	ldr.w	r4, [r3, #528]	; 0x210
 80085ac:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <CO_process+0xc0>)
 80085ae:	791b      	ldrb	r3, [r3, #4]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	9202      	str	r2, [sp, #8]
 80085b4:	4a0f      	ldr	r2, [pc, #60]	; (80085f4 <CO_process+0xc4>)
 80085b6:	9201      	str	r2, [sp, #4]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	4623      	mov	r3, r4
 80085bc:	460a      	mov	r2, r1
 80085be:	68b9      	ldr	r1, [r7, #8]
 80085c0:	f7fb f86e 	bl	80036a0 <CO_NMT_process>
 80085c4:	4603      	mov	r3, r0
 80085c6:	757b      	strb	r3, [r7, #21]
                           OD_errorBehavior,
                           timerNext_us);

#if CO_NO_TIME == 1
    /* TIME */
    CO_TIME_process(co->TIME,
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe ff6e 	bl	80074b0 <CO_TIME_process>
                    timeDifference_us);
#endif

    /* Heartbeat consumer */
    CO_HBconsumer_process(co->HBcons,
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80085d8:	7db9      	ldrb	r1, [r7, #22]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	f7fa fe25 	bl	800322c <CO_HBconsumer_process>
                    CO_GTWA_ENABLE,
                    timeDifference_us,
                    timerNext_us);
#endif

    return reset;
 80085e2:	7d7b      	ldrb	r3, [r7, #21]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	371c      	adds	r7, #28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd90      	pop	{r4, r7, pc}
 80085ec:	200001cc 	.word	0x200001cc
 80085f0:	20000070 	.word	0x20000070
 80085f4:	20000229 	.word	0x20000229

080085f8 <CO_process_SYNC>:
/******************************************************************************/
#if CO_NO_SYNC == 1
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
    const CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6958      	ldr	r0, [r3, #20]
 8008608:	4b10      	ldr	r3, [pc, #64]	; (800864c <CO_process_SYNC+0x54>)
 800860a:	691a      	ldr	r2, [r3, #16]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	f7fe fda4 	bl	800715c <CO_SYNC_process>
 8008614:	4603      	mov	r3, r0
 8008616:	75bb      	strb	r3, [r7, #22]
                                   timeDifference_us,
                                   OD_synchronousWindowLength,
                                   timerNext_us);

    bool_t syncWas = false;
 8008618:	2300      	movs	r3, #0
 800861a:	75fb      	strb	r3, [r7, #23]

    switch (sync_process) {
 800861c:	7dbb      	ldrb	r3, [r7, #22]
 800861e:	2b02      	cmp	r3, #2
 8008620:	d008      	beq.n	8008634 <CO_process_SYNC+0x3c>
 8008622:	2b02      	cmp	r3, #2
 8008624:	dc0d      	bgt.n	8008642 <CO_process_SYNC+0x4a>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <CO_process_SYNC+0x48>
 800862a:	2b01      	cmp	r3, #1
 800862c:	d109      	bne.n	8008642 <CO_process_SYNC+0x4a>
    case CO_SYNC_NONE:
        break;
    case CO_SYNC_RECEIVED:
        syncWas = true;
 800862e:	2301      	movs	r3, #1
 8008630:	75fb      	strb	r3, [r7, #23]
        break;
 8008632:	e006      	b.n	8008642 <CO_process_SYNC+0x4a>
    case CO_SYNC_OUTSIDE_WINDOW:
        CO_CANclearPendingSyncPDOs(co->CANmodule[0]);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4618      	mov	r0, r3
 800863a:	f000 ffb9 	bl	80095b0 <CO_CANclearPendingSyncPDOs>
        break;
 800863e:	e000      	b.n	8008642 <CO_process_SYNC+0x4a>
        break;
 8008640:	bf00      	nop
    }

    return syncWas;
 8008642:	7dfb      	ldrb	r3, [r7, #23]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	200001cc 	.word	0x200001cc

08008650 <MCD_reachHome>:

extern Node_DriveProfile_t g_NodeDriveProfile;
extern volatile int32_t  g_IncSteps;

void MCD_reachHome(int32_t offset)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
	// LOG_Print(LOG_InfoLevel, "Home offset from zero point: %ld\n", offset);

	int16_t ret = (1 << 10) | (1 << 12);
 8008658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800865c:	81fb      	strh	r3, [r7, #14]
	g_MotorDriverData.statusWord |= ret;
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <MCD_reachHome+0x2c>)
 8008660:	885b      	ldrh	r3, [r3, #2]
 8008662:	b21a      	sxth	r2, r3
 8008664:	89fb      	ldrh	r3, [r7, #14]
 8008666:	4313      	orrs	r3, r2
 8008668:	b21b      	sxth	r3, r3
 800866a:	b29a      	uxth	r2, r3
 800866c:	4b03      	ldr	r3, [pc, #12]	; (800867c <MCD_reachHome+0x2c>)
 800866e:	805a      	strh	r2, [r3, #2]
}
 8008670:	bf00      	nop
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	200009dc 	.word	0x200009dc

08008680 <MCD_reachTarget>:

void MCD_reachTarget(int32_t position)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
	// LOG_Print(LOG_InfoLevel, "PP reach the target: %ld\n", position);
	int16_t ret = (1 << 10);
 8008688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868c:	81fb      	strh	r3, [r7, #14]
	g_MotorDriverData.statusWord |= ret;
 800868e:	4b07      	ldr	r3, [pc, #28]	; (80086ac <MCD_reachTarget+0x2c>)
 8008690:	885b      	ldrh	r3, [r3, #2]
 8008692:	b21a      	sxth	r2, r3
 8008694:	89fb      	ldrh	r3, [r7, #14]
 8008696:	4313      	orrs	r3, r2
 8008698:	b21b      	sxth	r3, r3
 800869a:	b29a      	uxth	r2, r3
 800869c:	4b03      	ldr	r3, [pc, #12]	; (80086ac <MCD_reachTarget+0x2c>)
 800869e:	805a      	strh	r2, [r3, #2]
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	200009dc 	.word	0x200009dc

080086b0 <MCD_reportActualPosition>:

void MCD_reportActualPosition(uint16_t timeDifference_us, int32_t steps)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	80fb      	strh	r3, [r7, #6]
	if (g_NodeDriveProfile.ratio == 0)
 80086bc:	4b3e      	ldr	r3, [pc, #248]	; (80087b8 <MCD_reportActualPosition+0x108>)
 80086be:	edd3 7a05 	vldr	s15, [r3, #20]
 80086c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80086c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ca:	d067      	beq.n	800879c <MCD_reportActualPosition+0xec>
		return;

	if (g_NodeDriveProfile.updatePositionDuration == 0){
 80086cc:	4b3a      	ldr	r3, [pc, #232]	; (80087b8 <MCD_reportActualPosition+0x108>)
 80086ce:	8b9b      	ldrh	r3, [r3, #28]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d065      	beq.n	80087a0 <MCD_reportActualPosition+0xf0>

	static uint32_t ticks = 0;
	static uint16_t samepos_resent = 0;
    static float    lastradpos = 0.0f;

    ticks += timeDifference_us / 1000;
 80086d4:	88fb      	ldrh	r3, [r7, #6]
 80086d6:	4a39      	ldr	r2, [pc, #228]	; (80087bc <MCD_reportActualPosition+0x10c>)
 80086d8:	fba2 2303 	umull	r2, r3, r2, r3
 80086dc:	099b      	lsrs	r3, r3, #6
 80086de:	b29b      	uxth	r3, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	4b37      	ldr	r3, [pc, #220]	; (80087c0 <MCD_reportActualPosition+0x110>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4413      	add	r3, r2
 80086e8:	4a35      	ldr	r2, [pc, #212]	; (80087c0 <MCD_reportActualPosition+0x110>)
 80086ea:	6013      	str	r3, [r2, #0]

    if (ticks < g_NodeDriveProfile.updatePositionDuration)
 80086ec:	4b32      	ldr	r3, [pc, #200]	; (80087b8 <MCD_reportActualPosition+0x108>)
 80086ee:	8b9b      	ldrh	r3, [r3, #28]
 80086f0:	461a      	mov	r2, r3
 80086f2:	4b33      	ldr	r3, [pc, #204]	; (80087c0 <MCD_reportActualPosition+0x110>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d854      	bhi.n	80087a4 <MCD_reportActualPosition+0xf4>
    	return;

    ticks = 0;
 80086fa:	4b31      	ldr	r3, [pc, #196]	; (80087c0 <MCD_reportActualPosition+0x110>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]

	int32_t pos = MT_ConvertStepsToPos(steps);
 8008700:	6838      	ldr	r0, [r7, #0]
 8008702:	f001 fd3f 	bl	800a184 <MT_ConvertStepsToPos>
 8008706:	6178      	str	r0, [r7, #20]

	float   radpos = (pos - g_NodeDriveProfile.lower_limit_range) / g_NodeDriveProfile.ratio;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008712:	4b29      	ldr	r3, [pc, #164]	; (80087b8 <MCD_reportActualPosition+0x108>)
 8008714:	edd3 7a04 	vldr	s15, [r3, #16]
 8008718:	ee77 6a67 	vsub.f32	s13, s14, s15
 800871c:	4b26      	ldr	r3, [pc, #152]	; (80087b8 <MCD_reportActualPosition+0x108>)
 800871e:	ed93 7a05 	vldr	s14, [r3, #20]
 8008722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008726:	edc7 7a03 	vstr	s15, [r7, #12]
	if (fabsf(lastradpos - radpos) <= 0.0004){
 800872a:	4b26      	ldr	r3, [pc, #152]	; (80087c4 <MCD_reportActualPosition+0x114>)
 800872c:	ed93 7a00 	vldr	s14, [r3]
 8008730:	edd7 7a03 	vldr	s15, [r7, #12]
 8008734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008738:	eef0 7ae7 	vabs.f32	s15, s15
 800873c:	ee17 0a90 	vmov	r0, s15
 8008740:	f7f7 ff02 	bl	8000548 <__aeabi_f2d>
 8008744:	a31a      	add	r3, pc, #104	; (adr r3, 80087b0 <MCD_reportActualPosition+0x100>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f8 f9d1 	bl	8000af0 <__aeabi_dcmple>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00a      	beq.n	800876a <MCD_reportActualPosition+0xba>
    	if (++samepos_resent >= SAMEPOS_RESENT)
 8008754:	4b1c      	ldr	r3, [pc, #112]	; (80087c8 <MCD_reportActualPosition+0x118>)
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	3301      	adds	r3, #1
 800875a:	b29a      	uxth	r2, r3
 800875c:	4b1a      	ldr	r3, [pc, #104]	; (80087c8 <MCD_reportActualPosition+0x118>)
 800875e:	801a      	strh	r2, [r3, #0]
 8008760:	4b19      	ldr	r3, [pc, #100]	; (80087c8 <MCD_reportActualPosition+0x118>)
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	2b02      	cmp	r3, #2
 8008766:	d903      	bls.n	8008770 <MCD_reportActualPosition+0xc0>
            return;
 8008768:	e01d      	b.n	80087a6 <MCD_reportActualPosition+0xf6>
    }else{
    	samepos_resent = 0;
 800876a:	4b17      	ldr	r3, [pc, #92]	; (80087c8 <MCD_reportActualPosition+0x118>)
 800876c:	2200      	movs	r2, #0
 800876e:	801a      	strh	r2, [r3, #0]
    }
    lastradpos = radpos;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4a14      	ldr	r2, [pc, #80]	; (80087c4 <MCD_reportActualPosition+0x114>)
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]

	/* Update the 0x6063 actual position*/
	memcpy((void*)&g_MotorDriverData.currentPos, &radpos, sizeof(int32_t));
 8008778:	4a14      	ldr	r2, [pc, #80]	; (80087cc <MCD_reportActualPosition+0x11c>)
 800877a:	6093      	str	r3, [r2, #8]

	bool_t syncWas = true;
 800877c:	2301      	movs	r3, #1
 800877e:	74fb      	strb	r3, [r7, #19]
	CO->TPDO[1]->sendRequest = true;
 8008780:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <MCD_reportActualPosition+0x120>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	2201      	movs	r2, #1
 8008788:	76da      	strb	r2, [r3, #27]

	/* TPDO 1 channel, 0x6063 sdo*/
	CO_TPDO_process(CO->TPDO[1], syncWas, timeDifference_us, NULL);
 800878a:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <MCD_reportActualPosition+0x120>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008790:	88fa      	ldrh	r2, [r7, #6]
 8008792:	7cf9      	ldrb	r1, [r7, #19]
 8008794:	2300      	movs	r3, #0
 8008796:	f7fc fab1 	bl	8004cfc <CO_TPDO_process>
 800879a:	e004      	b.n	80087a6 <MCD_reportActualPosition+0xf6>
		return;
 800879c:	bf00      	nop
 800879e:	e002      	b.n	80087a6 <MCD_reportActualPosition+0xf6>
		return;
 80087a0:	bf00      	nop
 80087a2:	e000      	b.n	80087a6 <MCD_reportActualPosition+0xf6>
    	return;
 80087a4:	bf00      	nop
}
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	f3af 8000 	nop.w
 80087b0:	eb1c432d 	.word	0xeb1c432d
 80087b4:	3f3a36e2 	.word	0x3f3a36e2
 80087b8:	20000a94 	.word	0x20000a94
 80087bc:	10624dd3 	.word	0x10624dd3
 80087c0:	20000a88 	.word	0x20000a88
 80087c4:	20000a8c 	.word	0x20000a8c
 80087c8:	20000a90 	.word	0x20000a90
 80087cc:	200009dc 	.word	0x200009dc
 80087d0:	20000a70 	.word	0x20000a70

080087d4 <MCD_reset>:

void MCD_reset()
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
	g_MotionType = MOTION_UNKNOWN_MODE;
 80087d8:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <MCD_reset+0x34>)
 80087da:	2200      	movs	r2, #0
 80087dc:	701a      	strb	r2, [r3, #0]

	g_MotorDriverData.statusWord = DS402_buildStatusWordByStatus(g_MotorDriverData.statusWord, DS402_Status_SwitchONDisabled);
 80087de:	4b0b      	ldr	r3, [pc, #44]	; (800880c <MCD_reset+0x38>)
 80087e0:	885b      	ldrh	r3, [r3, #2]
 80087e2:	2102      	movs	r1, #2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe ffb3 	bl	8007750 <DS402_buildStatusWordByStatus>
 80087ea:	4603      	mov	r3, r0
 80087ec:	461a      	mov	r2, r3
 80087ee:	4b07      	ldr	r3, [pc, #28]	; (800880c <MCD_reset+0x38>)
 80087f0:	805a      	strh	r2, [r3, #2]

	g_MotorDriverData.mode = DS402_OperMode_NoMode;
 80087f2:	4b06      	ldr	r3, [pc, #24]	; (800880c <MCD_reset+0x38>)
 80087f4:	22ff      	movs	r2, #255	; 0xff
 80087f6:	711a      	strb	r2, [r3, #4]
	g_MotorDriverData.displayMode = DS402_OperMode_NoMode;
 80087f8:	4b04      	ldr	r3, [pc, #16]	; (800880c <MCD_reset+0x38>)
 80087fa:	22ff      	movs	r2, #255	; 0xff
 80087fc:	715a      	strb	r2, [r3, #5]

	HOME_reset();
 80087fe:	f7ff f943 	bl	8007a88 <HOME_reset>
}
 8008802:	bf00      	nop
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000a84 	.word	0x20000a84
 800880c:	200009dc 	.word	0x200009dc

08008810 <MCD_setOn>:

/*Called by node's operational routine*/
void MCD_setOn()
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWokenByPost = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	607b      	str	r3, [r7, #4]
	StatusMsgItem_t item;
	item.code = MMC_StatusUpdate;
 800881a:	f240 3301 	movw	r3, #769	; 0x301
 800881e:	803b      	strh	r3, [r7, #0]
	xQueueSendFromISR(g_StatusMsgQueue, &item, &xHigherPriorityTaskWokenByPost);
 8008820:	4b0c      	ldr	r3, [pc, #48]	; (8008854 <MCD_setOn+0x44>)
 8008822:	6818      	ldr	r0, [r3, #0]
 8008824:	1d3a      	adds	r2, r7, #4
 8008826:	4639      	mov	r1, r7
 8008828:	2300      	movs	r3, #0
 800882a:	f00b f8d1 	bl	80139d0 <xQueueGenericSendFromISR>

	if(xHigherPriorityTaskWokenByPost == pdTRUE) {
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d10a      	bne.n	800884a <MCD_setOn+0x3a>
		portYIELD_FROM_ISR(xHigherPriorityTaskWokenByPost);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d007      	beq.n	800884a <MCD_setOn+0x3a>
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <MCD_setOn+0x48>)
 800883c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	f3bf 8f6f 	isb	sy
	}
}
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000680 	.word	0x20000680
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <MCD_Init>:

void MCD_Init()
{
 800885c:	b580      	push	{r7, lr}
 800885e:	af00      	add	r7, sp, #0
	MCD_reset();
 8008860:	f7ff ffb8 	bl	80087d4 <MCD_reset>

	/*Initialize the home, pp, ip mode callback*/
	HOME_Init(g_NodeDriveProfile.home_offset, 17, g_NodeDriveProfile.home_speed, 4*g_NodeDriveProfile.home_speed);
 8008864:	4b11      	ldr	r3, [pc, #68]	; (80088ac <MCD_Init+0x50>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	4618      	mov	r0, r3
 800886a:	4b10      	ldr	r3, [pc, #64]	; (80088ac <MCD_Init+0x50>)
 800886c:	689a      	ldr	r2, [r3, #8]
 800886e:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <MCD_Init+0x50>)
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	2111      	movs	r1, #17
 8008876:	f7ff f933 	bl	8007ae0 <HOME_Init>
	HOME_setFinishedCallback(MCD_reachHome);
 800887a:	480d      	ldr	r0, [pc, #52]	; (80088b0 <MCD_Init+0x54>)
 800887c:	f7ff f952 	bl	8007b24 <HOME_setFinishedCallback>

	PP_Init(g_NodeDriveProfile.speed);
 8008880:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <MCD_Init+0x50>)
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe fef3 	bl	8007670 <PP_Init>
	PP_setTargetReachedCallback(MCD_reachTarget);
 800888a:	480a      	ldr	r0, [pc, #40]	; (80088b4 <MCD_Init+0x58>)
 800888c:	f7fe ff02 	bl	8007694 <PP_setTargetReachedCallback>

	/*Trajectory position blocks*/
	TPB_Init();
 8008890:	f002 fffe 	bl	800b890 <TPB_Init>

	g_MotorDriverData.statusWord = DS402_buildStatusWordByStatus(g_MotorDriverData.statusWord, DS402_Status_NotReadyToSwitchON);
 8008894:	4b08      	ldr	r3, [pc, #32]	; (80088b8 <MCD_Init+0x5c>)
 8008896:	885b      	ldrh	r3, [r3, #2]
 8008898:	2101      	movs	r1, #1
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe ff58 	bl	8007750 <DS402_buildStatusWordByStatus>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461a      	mov	r2, r3
 80088a4:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <MCD_Init+0x5c>)
 80088a6:	805a      	strh	r2, [r3, #2]
}
 80088a8:	bf00      	nop
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20000a94 	.word	0x20000a94
 80088b0:	08008651 	.word	0x08008651
 80088b4:	08008681 	.word	0x08008681
 80088b8:	200009dc 	.word	0x200009dc

080088bc <MCD_broadState>:
		lastUploadStatus = status;
	}
}

void MCD_broadState(uint16_t timeDifference_us, bool_t syncWas)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	460a      	mov	r2, r1
 80088c6:	80fb      	strh	r3, [r7, #6]
 80088c8:	4613      	mov	r3, r2
 80088ca:	717b      	strb	r3, [r7, #5]
	BaseType_t result;
	StatusMsgItem_t item;
    result = xQueueReceive(g_StatusMsgQueue, &item, 0);
 80088cc:	4b12      	ldr	r3, [pc, #72]	; (8008918 <MCD_broadState+0x5c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f107 0108 	add.w	r1, r7, #8
 80088d4:	2200      	movs	r2, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f00b f9a0 	bl	8013c1c <xQueueReceive>
 80088dc:	60f8      	str	r0, [r7, #12]
	if (result == pdTRUE){
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d10b      	bne.n	80088fc <MCD_broadState+0x40>
		// report the status message
		CO->TPDO[0]->sendRequest = true;
 80088e4:	4b0d      	ldr	r3, [pc, #52]	; (800891c <MCD_broadState+0x60>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	2201      	movs	r2, #1
 80088ec:	76da      	strb	r2, [r3, #27]
		CO_TPDOsend(CO->TPDO[0]);
 80088ee:	4b0b      	ldr	r3, [pc, #44]	; (800891c <MCD_broadState+0x60>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fc f843 	bl	8004980 <CO_TPDOsend>
 80088fa:	e00a      	b.n	8008912 <MCD_broadState+0x56>
        return;
	}

	if (g_MotionType != MOTION_UNKNOWN_MODE){
 80088fc:	4b08      	ldr	r3, [pc, #32]	; (8008920 <MCD_broadState+0x64>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d006      	beq.n	8008912 <MCD_broadState+0x56>
		MCD_reportActualPosition(timeDifference_us, g_IncSteps);
 8008904:	4b07      	ldr	r3, [pc, #28]	; (8008924 <MCD_broadState+0x68>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	88fb      	ldrh	r3, [r7, #6]
 800890a:	4611      	mov	r1, r2
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff fecf 	bl	80086b0 <MCD_reportActualPosition>
	}
}
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20000680 	.word	0x20000680
 800891c:	20000a70 	.word	0x20000a70
 8008920:	20000a84 	.word	0x20000a84
 8008924:	20000670 	.word	0x20000670

08008928 <MCD_changeMode>:

/* Motor control driver, change mode
 * mode: received from host
 * displaymode: set right mode if initialize successfully */
void MCD_changeMode(int8_t mode)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	71fb      	strb	r3, [r7, #7]
	if (mode == DS402_OperMode_Homing ) {
 8008932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008936:	2b06      	cmp	r3, #6
 8008938:	d105      	bne.n	8008946 <MCD_changeMode+0x1e>
		g_MotorDriverData.displayMode = mode;
 800893a:	4a0d      	ldr	r2, [pc, #52]	; (8008970 <MCD_changeMode+0x48>)
 800893c:	79fb      	ldrb	r3, [r7, #7]
 800893e:	7153      	strb	r3, [r2, #5]

		HOME_active();
 8008940:	f7ff f91c 	bl	8007b7c <HOME_active>
		g_MotorDriverData.statusWord &= ~0x1400;
		g_MotorDriverData.displayMode = mode;

		PP_active();
	}
}
 8008944:	e00f      	b.n	8008966 <MCD_changeMode+0x3e>
	}else if (mode == DS402_OperMode_ProfilePosition){
 8008946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d10b      	bne.n	8008966 <MCD_changeMode+0x3e>
		g_MotorDriverData.statusWord &= ~0x1400;
 800894e:	4b08      	ldr	r3, [pc, #32]	; (8008970 <MCD_changeMode+0x48>)
 8008950:	885b      	ldrh	r3, [r3, #2]
 8008952:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8008956:	b29a      	uxth	r2, r3
 8008958:	4b05      	ldr	r3, [pc, #20]	; (8008970 <MCD_changeMode+0x48>)
 800895a:	805a      	strh	r2, [r3, #2]
		g_MotorDriverData.displayMode = mode;
 800895c:	4a04      	ldr	r2, [pc, #16]	; (8008970 <MCD_changeMode+0x48>)
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	7153      	strb	r3, [r2, #5]
		PP_active();
 8008962:	f7fe feb9 	bl	80076d8 <PP_active>
}
 8008966:	bf00      	nop
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	200009dc 	.word	0x200009dc

08008974 <MCD_OnProfileUpdate>:

void MCD_OnProfileUpdate(Node_DriveProfile_t *profile)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
	/*Reset the home and pp*/
	HOME_setProfile(profile->home_offset, 17, profile->home_speed, 4*profile->home_speed);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	4618      	mov	r0, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689a      	ldr	r2, [r3, #8]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	2111      	movs	r1, #17
 800898e:	f7ff f88b 	bl	8007aa8 <HOME_setProfile>
	PP_setSpeed(profile->speed);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fe5a 	bl	8007650 <PP_setSpeed>
	MT_setProfile(profile);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 fc5d 	bl	800a25c <MT_setProfile>
}
 80089a2:	bf00      	nop
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
	...

080089ac <MCD_handleModeAction>:

void MCD_handleModeAction(uint16_t controlWord)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	80fb      	strh	r3, [r7, #6]
	if (g_MotorDriverData.displayMode == DS402_OperMode_Homing){
 80089b6:	4b23      	ldr	r3, [pc, #140]	; (8008a44 <MCD_handleModeAction+0x98>)
 80089b8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80089bc:	2b06      	cmp	r3, #6
 80089be:	d10d      	bne.n	80089dc <MCD_handleModeAction+0x30>
		uint16_t ret = HOME_exec(controlWord);
 80089c0:	88fb      	ldrh	r3, [r7, #6]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff f8f0 	bl	8007ba8 <HOME_exec>
 80089c8:	4603      	mov	r3, r0
 80089ca:	817b      	strh	r3, [r7, #10]

		/*Bit 10, target reached*/
		/*Bit 12, home attained*/
		/*Bit 13, homing error happen*/
		g_MotorDriverData.statusWord |= ret;
 80089cc:	4b1d      	ldr	r3, [pc, #116]	; (8008a44 <MCD_handleModeAction+0x98>)
 80089ce:	885a      	ldrh	r2, [r3, #2]
 80089d0:	897b      	ldrh	r3, [r7, #10]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	4b1b      	ldr	r3, [pc, #108]	; (8008a44 <MCD_handleModeAction+0x98>)
 80089d8:	805a      	strh	r2, [r3, #2]
		/*Bit 12 Set-point acknowledge */
		/*Bit 13 Following error  */
		uint16_t ret = PP_exec(controlWord);
		g_MotorDriverData.statusWord |= ret;
	}
}
 80089da:	e02f      	b.n	8008a3c <MCD_handleModeAction+0x90>
	}else if (g_MotorDriverData.displayMode == DS402_OperMode_ProfilePosition){
 80089dc:	4b19      	ldr	r3, [pc, #100]	; (8008a44 <MCD_handleModeAction+0x98>)
 80089de:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d12a      	bne.n	8008a3c <MCD_handleModeAction+0x90>
		uint16_t mode = controlWord & 0x021f;
 80089e6:	88fb      	ldrh	r3, [r7, #6]
 80089e8:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80089ec:	059b      	lsls	r3, r3, #22
 80089ee:	0d9b      	lsrs	r3, r3, #22
 80089f0:	81fb      	strh	r3, [r7, #14]
		if (mode == 0x021f){
 80089f2:	89fb      	ldrh	r3, [r7, #14]
 80089f4:	f240 221f 	movw	r2, #543	; 0x21f
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d103      	bne.n	8008a04 <MCD_handleModeAction+0x58>
			g_MotionType = MOTION_COMPLEX_MODE;
 80089fc:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <MCD_handleModeAction+0x9c>)
 80089fe:	2203      	movs	r2, #3
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	e00e      	b.n	8008a22 <MCD_handleModeAction+0x76>
		}else if (mode == 0x1f){
 8008a04:	89fb      	ldrh	r3, [r7, #14]
 8008a06:	2b1f      	cmp	r3, #31
 8008a08:	d103      	bne.n	8008a12 <MCD_handleModeAction+0x66>
			g_MotionType = MOTION_QUEUED_MODE;
 8008a0a:	4b0f      	ldr	r3, [pc, #60]	; (8008a48 <MCD_handleModeAction+0x9c>)
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	701a      	strb	r2, [r3, #0]
 8008a10:	e007      	b.n	8008a22 <MCD_handleModeAction+0x76>
			if ((mode & 0x0f) != 0x0f){
 8008a12:	89fb      	ldrh	r3, [r7, #14]
 8008a14:	f003 030f 	and.w	r3, r3, #15
 8008a18:	2b0f      	cmp	r3, #15
 8008a1a:	d002      	beq.n	8008a22 <MCD_handleModeAction+0x76>
				g_MotionType = MOTION_UNKNOWN_MODE;
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <MCD_handleModeAction+0x9c>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	701a      	strb	r2, [r3, #0]
		uint16_t ret = PP_exec(controlWord);
 8008a22:	88fb      	ldrh	r3, [r7, #6]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fe fe73 	bl	8007710 <PP_exec>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	81bb      	strh	r3, [r7, #12]
		g_MotorDriverData.statusWord |= ret;
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <MCD_handleModeAction+0x98>)
 8008a30:	885a      	ldrh	r2, [r3, #2]
 8008a32:	89bb      	ldrh	r3, [r7, #12]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	4b02      	ldr	r3, [pc, #8]	; (8008a44 <MCD_handleModeAction+0x98>)
 8008a3a:	805a      	strh	r2, [r3, #2]
}
 8008a3c:	bf00      	nop
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	200009dc 	.word	0x200009dc
 8008a48:	20000a84 	.word	0x20000a84

08008a4c <MCD_changeStatus>:

void MCD_changeStatus(DS402_Status_t status)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	71fb      	strb	r3, [r7, #7]
	g_MotorDriverData.statusWord = DS402_buildStatusWordByStatus(g_MotorDriverData.statusWord, status);
 8008a56:	4b07      	ldr	r3, [pc, #28]	; (8008a74 <MCD_changeStatus+0x28>)
 8008a58:	885b      	ldrh	r3, [r3, #2]
 8008a5a:	79fa      	ldrb	r2, [r7, #7]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe fe76 	bl	8007750 <DS402_buildStatusWordByStatus>
 8008a64:	4603      	mov	r3, r0
 8008a66:	461a      	mov	r2, r3
 8008a68:	4b02      	ldr	r3, [pc, #8]	; (8008a74 <MCD_changeStatus+0x28>)
 8008a6a:	805a      	strh	r2, [r3, #2]
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	200009dc 	.word	0x200009dc

08008a78 <MCD_OnControlWordUpdate>:

void MCD_OnControlWordUpdate()
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
	DS402_Status_t curStatus = DS402_getStatus(g_MotorDriverData.statusWord);
 8008a7e:	4b1f      	ldr	r3, [pc, #124]	; (8008afc <MCD_OnControlWordUpdate+0x84>)
 8008a80:	885b      	ldrh	r3, [r3, #2]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe ff04 	bl	8007890 <DS402_getStatus>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	71fb      	strb	r3, [r7, #7]

	DS402_Status_t newStatus = DS402_getNewStatusByControlWord(g_MotorDriverData.statusWord, g_MotorDriverData.controlWord);
 8008a8c:	4b1b      	ldr	r3, [pc, #108]	; (8008afc <MCD_OnControlWordUpdate+0x84>)
 8008a8e:	885b      	ldrh	r3, [r3, #2]
 8008a90:	4a1a      	ldr	r2, [pc, #104]	; (8008afc <MCD_OnControlWordUpdate+0x84>)
 8008a92:	8812      	ldrh	r2, [r2, #0]
 8008a94:	4611      	mov	r1, r2
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe ff39 	bl	800790e <DS402_getNewStatusByControlWord>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	71bb      	strb	r3, [r7, #6]
	if (newStatus != curStatus) {
 8008aa0:	79ba      	ldrb	r2, [r7, #6]
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d003      	beq.n	8008ab0 <MCD_OnControlWordUpdate+0x38>
		/*Change current status*/
		MCD_changeStatus(newStatus);
 8008aa8:	79bb      	ldrb	r3, [r7, #6]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff ffce 	bl	8008a4c <MCD_changeStatus>
	}

	if (newStatus == DS402_Status_OperationEnable) {
 8008ab0:	79bb      	ldrb	r3, [r7, #6]
 8008ab2:	2b05      	cmp	r3, #5
 8008ab4:	d113      	bne.n	8008ade <MCD_OnControlWordUpdate+0x66>
		if (g_MotorDriverData.mode != g_MotorDriverData.displayMode) {
 8008ab6:	4b11      	ldr	r3, [pc, #68]	; (8008afc <MCD_OnControlWordUpdate+0x84>)
 8008ab8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8008abc:	4b0f      	ldr	r3, [pc, #60]	; (8008afc <MCD_OnControlWordUpdate+0x84>)
 8008abe:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d006      	beq.n	8008ad4 <MCD_OnControlWordUpdate+0x5c>
			/*Change current mode*/
			MCD_changeMode(g_MotorDriverData.mode);
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	; (8008afc <MCD_OnControlWordUpdate+0x84>)
 8008ac8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7ff ff2b 	bl	8008928 <MCD_changeMode>
 8008ad2:	e004      	b.n	8008ade <MCD_OnControlWordUpdate+0x66>
		}else {
			MCD_handleModeAction(g_MotorDriverData.controlWord);
 8008ad4:	4b09      	ldr	r3, [pc, #36]	; (8008afc <MCD_OnControlWordUpdate+0x84>)
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7ff ff67 	bl	80089ac <MCD_handleModeAction>
		}
	}

	/*Always uploads the status after control word update*/
	StatusMsgItem_t item;
	item.code = MMC_StatusUpdate;
 8008ade:	f240 3301 	movw	r3, #769	; 0x301
 8008ae2:	803b      	strh	r3, [r7, #0]
	xQueueSend(g_StatusMsgQueue, &item, 0);
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <MCD_OnControlWordUpdate+0x88>)
 8008ae6:	6818      	ldr	r0, [r3, #0]
 8008ae8:	4639      	mov	r1, r7
 8008aea:	2300      	movs	r3, #0
 8008aec:	2200      	movs	r2, #0
 8008aee:	f00a fe71 	bl	80137d4 <xQueueGenericSend>
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	200009dc 	.word	0x200009dc
 8008b00:	20000680 	.word	0x20000680

08008b04 <MCD_OnCommandSerialNumberUpdate>:

void MCD_OnCommandSerialNumberUpdate()
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
	int32_t commandSerialNumber = g_MotorDriverData.commandSerialNumber;
 8008b0a:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <MCD_OnCommandSerialNumberUpdate+0x1c>)
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	607b      	str	r3, [r7, #4]
	TPB_commandSerialNumberUpdate(commandSerialNumber);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f002 ff83 	bl	800ba1c <TPB_commandSerialNumberUpdate>
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	200009dc 	.word	0x200009dc

08008b24 <MCD_OnTargetUpdate>:

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"

void MCD_OnTargetUpdate()
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
	float ftarget = *(float*)&g_MotorDriverData.targetPos;
 8008b2a:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <MCD_OnTargetUpdate+0x1c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	607b      	str	r3, [r7, #4]
	TPB_positionUpdate(ftarget);
 8008b30:	ed97 0a01 	vldr	s0, [r7, #4]
 8008b34:	f002 ff54 	bl	800b9e0 <TPB_positionUpdate>
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	200009f0 	.word	0x200009f0

08008b44 <MCD_OnVelocityUpdate>:

void MCD_OnVelocityUpdate()
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
	float fvelocity = *(float*)&g_MotorDriverData.profileVel;
 8008b4a:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <MCD_OnVelocityUpdate+0x1c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	607b      	str	r3, [r7, #4]
	TPB_velocityUpdate(fvelocity);
 8008b50:	ed97 0a01 	vldr	s0, [r7, #4]
 8008b54:	f002 ff7e 	bl	800ba54 <TPB_velocityUpdate>
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	200009f4 	.word	0x200009f4

08008b64 <MCD_OnAccelerationUpdate>:

void MCD_OnAccelerationUpdate()
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
	float facceleration = *(float*)&g_MotorDriverData.acce;
 8008b6a:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <MCD_OnAccelerationUpdate+0x1c>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	607b      	str	r3, [r7, #4]
	TPB_accelerationUpdate(facceleration);
 8008b70:	ed97 0a01 	vldr	s0, [r7, #4]
 8008b74:	f002 ff8c 	bl	800ba90 <TPB_accelerationUpdate>
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	200009f8 	.word	0x200009f8

08008b84 <NmtState2Str>:
/*Node driver profile*/
Node_DriveProfile_t g_NodeDriveProfile;

/* return string description of NMT state. */
static char *NmtState2Str(CO_NMT_internalState_t state)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 8008b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b92:	2b7f      	cmp	r3, #127	; 0x7f
 8008b94:	d00c      	beq.n	8008bb0 <NmtState2Str+0x2c>
 8008b96:	2b7f      	cmp	r3, #127	; 0x7f
 8008b98:	dc10      	bgt.n	8008bbc <NmtState2Str+0x38>
 8008b9a:	2b05      	cmp	r3, #5
 8008b9c:	d00a      	beq.n	8008bb4 <NmtState2Str+0x30>
 8008b9e:	2b05      	cmp	r3, #5
 8008ba0:	dc0c      	bgt.n	8008bbc <NmtState2Str+0x38>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <NmtState2Str+0x28>
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	d006      	beq.n	8008bb8 <NmtState2Str+0x34>
 8008baa:	e007      	b.n	8008bbc <NmtState2Str+0x38>
        case CO_NMT_INITIALIZING:    return "initializing";
 8008bac:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <NmtState2Str+0x48>)
 8008bae:	e006      	b.n	8008bbe <NmtState2Str+0x3a>
        case CO_NMT_PRE_OPERATIONAL: return "pre-operational";
 8008bb0:	4b07      	ldr	r3, [pc, #28]	; (8008bd0 <NmtState2Str+0x4c>)
 8008bb2:	e004      	b.n	8008bbe <NmtState2Str+0x3a>
        case CO_NMT_OPERATIONAL:     return "operational";
 8008bb4:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <NmtState2Str+0x50>)
 8008bb6:	e002      	b.n	8008bbe <NmtState2Str+0x3a>
        case CO_NMT_STOPPED:         return "stopped";
 8008bb8:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <NmtState2Str+0x54>)
 8008bba:	e000      	b.n	8008bbe <NmtState2Str+0x3a>
        default:                     return "unknown";
 8008bbc:	4b07      	ldr	r3, [pc, #28]	; (8008bdc <NmtState2Str+0x58>)
    }
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	08018944 	.word	0x08018944
 8008bd0:	08018954 	.word	0x08018954
 8008bd4:	08018964 	.word	0x08018964
 8008bd8:	08018970 	.word	0x08018970
 8008bdc:	08018978 	.word	0x08018978

08008be0 <NODE_NMTCallback>:

void NODE_NMTCallback(CO_NMT_internalState_t state)
{
 8008be0:	b590      	push	{r4, r7, lr}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	71fb      	strb	r3, [r7, #7]
	printf("Node NM state(%d): %s\n", state, NmtState2Str(state));
 8008bea:	f997 4007 	ldrsb.w	r4, [r7, #7]
 8008bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff ffc6 	bl	8008b84 <NmtState2Str>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4807      	ldr	r0, [pc, #28]	; (8008c1c <NODE_NMTCallback+0x3c>)
 8008c00:	f00e fd74 	bl	80176ec <iprintf>
	if (state == CO_NMT_OPERATIONAL){
 8008c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c08:	2b05      	cmp	r3, #5
 8008c0a:	d103      	bne.n	8008c14 <NODE_NMTCallback+0x34>
		/*Should reset the motor*/
		MCD_reset();
 8008c0c:	f7ff fde2 	bl	80087d4 <MCD_reset>

		/*Push on the mc driver*/
		MCD_setOn();
 8008c10:	f7ff fdfe 	bl	8008810 <MCD_setOn>
	}
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd90      	pop	{r4, r7, pc}
 8008c1c:	08018980 	.word	0x08018980

08008c20 <NODE_OnProfileUpdate>:

CO_SDO_abortCode_t NODE_OnProfileUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60fb      	str	r3, [r7, #12]

	if (ODF_arg != NULL && ODF_arg->index == 0xC120 && ODF_arg->subIndex == 4) {
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d01d      	beq.n	8008c6e <NODE_OnProfileUpdate+0x4e>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	8a9b      	ldrh	r3, [r3, #20]
 8008c36:	f24c 1220 	movw	r2, #49440	; 0xc120
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d117      	bne.n	8008c6e <NODE_OnProfileUpdate+0x4e>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	7d9b      	ldrb	r3, [r3, #22]
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d113      	bne.n	8008c6e <NODE_OnProfileUpdate+0x4e>
		// ds402 profile
		// Update the version
		CO_OD_ROM.ds402Profile.version = (uint32_t)(*(uint32_t*)&ODF_arg->data[0]);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a0a      	ldr	r2, [pc, #40]	; (8008c78 <NODE_OnProfileUpdate+0x58>)
 8008c4e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c

		// Update the driver profile
		memcpy(&g_NodeDriveProfile, (unsigned char*)&ODF_arg->data[4], sizeof(Node_DriveProfile_t));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	3304      	adds	r3, #4
 8008c58:	2220      	movs	r2, #32
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4807      	ldr	r0, [pc, #28]	; (8008c7c <NODE_OnProfileUpdate+0x5c>)
 8008c5e:	f00e fc39 	bl	80174d4 <memcpy>

		g_NodeDriveProfile.updatePositionDuration = 50; // 50ms report actual position
 8008c62:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <NODE_OnProfileUpdate+0x5c>)
 8008c64:	2232      	movs	r2, #50	; 0x32
 8008c66:	839a      	strh	r2, [r3, #28]
		MCD_OnProfileUpdate(&g_NodeDriveProfile);
 8008c68:	4804      	ldr	r0, [pc, #16]	; (8008c7c <NODE_OnProfileUpdate+0x5c>)
 8008c6a:	f7ff fe83 	bl	8008974 <MCD_OnProfileUpdate>
	}

	return abort;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	200001cc 	.word	0x200001cc
 8008c7c:	20000a94 	.word	0x20000a94

08008c80 <NODE_OnControlWordUpdate>:

CO_SDO_abortCode_t NODE_OnControlWordUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]
	MCD_OnControlWordUpdate();
 8008c8c:	f7ff fef4 	bl	8008a78 <MCD_OnControlWordUpdate>
	return abort;
 8008c90:	68fb      	ldr	r3, [r7, #12]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <NODE_OnTargetUpdate>:

CO_SDO_abortCode_t NODE_OnTargetUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]
	MCD_OnTargetUpdate();
 8008ca6:	f7ff ff3d 	bl	8008b24 <MCD_OnTargetUpdate>
	return abort;
 8008caa:	68fb      	ldr	r3, [r7, #12]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <NODE_OnCommandSerialNumberUpdate>:

CO_SDO_abortCode_t NODE_OnCommandSerialNumberUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]
	MCD_OnCommandSerialNumberUpdate();
 8008cc0:	f7ff ff20 	bl	8008b04 <MCD_OnCommandSerialNumberUpdate>
	return abort;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <NODE_OnVelocityUpdate>:

CO_SDO_abortCode_t NODE_OnVelocityUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]
	MCD_OnVelocityUpdate();
 8008cda:	f7ff ff33 	bl	8008b44 <MCD_OnVelocityUpdate>
	return abort;
 8008cde:	68fb      	ldr	r3, [r7, #12]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <NODE_OnAccelerationUpdate>:

CO_SDO_abortCode_t NODE_OnAccelerationUpdate(CO_ODF_arg_t *ODF_arg)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
	CO_SDO_abortCode_t abort = CO_SDO_AB_NONE;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]
	MCD_OnAccelerationUpdate();
 8008cf4:	f7ff ff36 	bl	8008b64 <MCD_OnAccelerationUpdate>
	return abort;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <NODE_new>:

uint8_t NODE_new()
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
	uint32_t COMem;
	CO_ReturnError_t ret = CO_new(&COMem);
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fffb 	bl	8007d08 <CO_new>
 8008d12:	4603      	mov	r3, r0
 8008d14:	71fb      	strb	r3, [r7, #7]
	if (ret) {
 8008d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d008      	beq.n	8008d30 <NODE_new+0x2c>
		LOG_Print(2, "CO new failed: %ld\n", ret);
 8008d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d22:	461a      	mov	r2, r3
 8008d24:	4905      	ldr	r1, [pc, #20]	; (8008d3c <NODE_new+0x38>)
 8008d26:	2002      	movs	r0, #2
 8008d28:	f000 fdda 	bl	80098e0 <LOG_Print>
		return ret;
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	e000      	b.n	8008d32 <NODE_new+0x2e>
	}

	return CO_ERROR_NO;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	08018998 	.word	0x08018998

08008d40 <NODE_Init>:

uint8_t NODE_Init(void* canDevice, uint8_t nodeId)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
	CO_ReturnError_t ret;

    ret = CO_CANinit(canDevice, 250);
 8008d4c:	21fa      	movs	r1, #250	; 0xfa
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff f94e 	bl	8007ff0 <CO_CANinit>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8008d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d008      	beq.n	8008d72 <NODE_Init+0x32>
		LOG_Print(2, "CO CAN module init failed: %ld\n", ret);
 8008d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d64:	461a      	mov	r2, r3
 8008d66:	4971      	ldr	r1, [pc, #452]	; (8008f2c <NODE_Init+0x1ec>)
 8008d68:	2002      	movs	r0, #2
 8008d6a:	f000 fdb9 	bl	80098e0 <LOG_Print>
		return ret;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	e0d7      	b.n	8008f22 <NODE_Init+0x1e2>
	}

	ret = CO_CANopenInit(nodeId);
 8008d72:	78fb      	ldrb	r3, [r7, #3]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7ff f969 	bl	800804c <CO_CANopenInit>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8008d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d008      	beq.n	8008d98 <NODE_Init+0x58>
		LOG_Print(2, "CO CAN node init failed: %ld\n", ret);
 8008d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4968      	ldr	r1, [pc, #416]	; (8008f30 <NODE_Init+0x1f0>)
 8008d8e:	2002      	movs	r0, #2
 8008d90:	f000 fda6 	bl	80098e0 <LOG_Print>
		return ret;
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	e0c4      	b.n	8008f22 <NODE_Init+0x1e2>
	}

	/*Motion control drive intialize*/
	MCD_Init();
 8008d98:	f7ff fd60 	bl	800885c <MCD_Init>

	/* CO node management*/
	/* Implement a simple node management*/
	CO_NMT_initCallbackChanged(CO->NMT, NODE_NMTCallback);
 8008d9c:	4b65      	ldr	r3, [pc, #404]	; (8008f34 <NODE_Init+0x1f4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	4965      	ldr	r1, [pc, #404]	; (8008f38 <NODE_Init+0x1f8>)
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fa fc61 	bl	800366c <CO_NMT_initCallbackChanged>

	/* Register 0xC120 od entry download callback*/
	uint16_t entryNo = CO_OD_find(CO->SDO[0], 0xC120);
 8008daa:	4b62      	ldr	r3, [pc, #392]	; (8008f34 <NODE_Init+0x1f4>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f24c 1120 	movw	r1, #49440	; 0xc120
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fc facf 	bl	8005358 <CO_OD_find>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF){
 8008dbe:	89bb      	ldrh	r3, [r7, #12]
 8008dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d00c      	beq.n	8008de2 <NODE_Init+0xa2>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnProfileUpdate;
 8008dc8:	4b5a      	ldr	r3, [pc, #360]	; (8008f34 <NODE_Init+0x1f4>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008dd2:	89ba      	ldrh	r2, [r7, #12]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	440b      	add	r3, r1
 8008dde:	4a57      	ldr	r2, [pc, #348]	; (8008f3c <NODE_Init+0x1fc>)
 8008de0:	601a      	str	r2, [r3, #0]
	}

	/* Register 0x6040 od entry control word update callback*/
	entryNo = CO_OD_find(CO->SDO[0], 0x6040);
 8008de2:	4b54      	ldr	r3, [pc, #336]	; (8008f34 <NODE_Init+0x1f4>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f246 0140 	movw	r1, #24640	; 0x6040
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fc fab3 	bl	8005358 <CO_OD_find>
 8008df2:	4603      	mov	r3, r0
 8008df4:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008df6:	89bb      	ldrh	r3, [r7, #12]
 8008df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d00c      	beq.n	8008e1a <NODE_Init+0xda>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnControlWordUpdate;
 8008e00:	4b4c      	ldr	r3, [pc, #304]	; (8008f34 <NODE_Init+0x1f4>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008e0a:	89ba      	ldrh	r2, [r7, #12]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	440b      	add	r3, r1
 8008e16:	4a4a      	ldr	r2, [pc, #296]	; (8008f40 <NODE_Init+0x200>)
 8008e18:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0x607A);
 8008e1a:	4b46      	ldr	r3, [pc, #280]	; (8008f34 <NODE_Init+0x1f4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f246 017a 	movw	r1, #24698	; 0x607a
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fc fa97 	bl	8005358 <CO_OD_find>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008e2e:	89bb      	ldrh	r3, [r7, #12]
 8008e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00c      	beq.n	8008e52 <NODE_Init+0x112>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnTargetUpdate;
 8008e38:	4b3e      	ldr	r3, [pc, #248]	; (8008f34 <NODE_Init+0x1f4>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008e42:	89ba      	ldrh	r2, [r7, #12]
 8008e44:	4613      	mov	r3, r2
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	4413      	add	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	440b      	add	r3, r1
 8008e4e:	4a3d      	ldr	r2, [pc, #244]	; (8008f44 <NODE_Init+0x204>)
 8008e50:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0x6081);
 8008e52:	4b38      	ldr	r3, [pc, #224]	; (8008f34 <NODE_Init+0x1f4>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f246 0181 	movw	r1, #24705	; 0x6081
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fc fa7b 	bl	8005358 <CO_OD_find>
 8008e62:	4603      	mov	r3, r0
 8008e64:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008e66:	89bb      	ldrh	r3, [r7, #12]
 8008e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00c      	beq.n	8008e8a <NODE_Init+0x14a>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnVelocityUpdate;
 8008e70:	4b30      	ldr	r3, [pc, #192]	; (8008f34 <NODE_Init+0x1f4>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008e7a:	89ba      	ldrh	r2, [r7, #12]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	440b      	add	r3, r1
 8008e86:	4a30      	ldr	r2, [pc, #192]	; (8008f48 <NODE_Init+0x208>)
 8008e88:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0x6083);
 8008e8a:	4b2a      	ldr	r3, [pc, #168]	; (8008f34 <NODE_Init+0x1f4>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f246 0183 	movw	r1, #24707	; 0x6083
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fc fa5f 	bl	8005358 <CO_OD_find>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008e9e:	89bb      	ldrh	r3, [r7, #12]
 8008ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00c      	beq.n	8008ec2 <NODE_Init+0x182>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnAccelerationUpdate;
 8008ea8:	4b22      	ldr	r3, [pc, #136]	; (8008f34 <NODE_Init+0x1f4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008eb2:	89ba      	ldrh	r2, [r7, #12]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	4a23      	ldr	r2, [pc, #140]	; (8008f4c <NODE_Init+0x20c>)
 8008ec0:	601a      	str	r2, [r3, #0]
	}

	entryNo = CO_OD_find(CO->SDO[0], 0xC101);
 8008ec2:	4b1c      	ldr	r3, [pc, #112]	; (8008f34 <NODE_Init+0x1f4>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f24c 1101 	movw	r1, #49409	; 0xc101
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fc fa43 	bl	8005358 <CO_OD_find>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	81bb      	strh	r3, [r7, #12]
	if (entryNo != 0xFFFF) {
 8008ed6:	89bb      	ldrh	r3, [r7, #12]
 8008ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d00c      	beq.n	8008efa <NODE_Init+0x1ba>
		CO->SDO[0]->ODExtensions[entryNo].pODFunc = NODE_OnCommandSerialNumberUpdate;
 8008ee0:	4b14      	ldr	r3, [pc, #80]	; (8008f34 <NODE_Init+0x1f4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f8d3 171c 	ldr.w	r1, [r3, #1820]	; 0x71c
 8008eea:	89ba      	ldrh	r2, [r7, #12]
 8008eec:	4613      	mov	r3, r2
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	440b      	add	r3, r1
 8008ef6:	4a16      	ldr	r2, [pc, #88]	; (8008f50 <NODE_Init+0x210>)
 8008ef8:	601a      	str	r2, [r3, #0]
	}
	/* CO node start the CAN driver*/
	CO_CANsetNormalMode(CO->CANmodule[0]);
 8008efa:	4b0e      	ldr	r3, [pc, #56]	; (8008f34 <NODE_Init+0x1f4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 f8bb 	bl	800907c <CO_CANsetNormalMode>
	if (!CO->CANmodule[0]->CANnormal){
 8008f06:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <NODE_Init+0x1f4>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	7c9b      	ldrb	r3, [r3, #18]
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d105      	bne.n	8008f20 <NODE_Init+0x1e0>
		LOG_Print(2, "CAN module initialize and start failed.\n");
 8008f14:	490f      	ldr	r1, [pc, #60]	; (8008f54 <NODE_Init+0x214>)
 8008f16:	2002      	movs	r0, #2
 8008f18:	f000 fce2 	bl	80098e0 <LOG_Print>
		return CO_ERROR_SYSCALL;
 8008f1c:	23ef      	movs	r3, #239	; 0xef
 8008f1e:	e000      	b.n	8008f22 <NODE_Init+0x1e2>
	}

	return CO_ERROR_NO;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	080189ac 	.word	0x080189ac
 8008f30:	080189cc 	.word	0x080189cc
 8008f34:	20000a70 	.word	0x20000a70
 8008f38:	08008be1 	.word	0x08008be1
 8008f3c:	08008c21 	.word	0x08008c21
 8008f40:	08008c81 	.word	0x08008c81
 8008f44:	08008c9b 	.word	0x08008c9b
 8008f48:	08008ccf 	.word	0x08008ccf
 8008f4c:	08008ce9 	.word	0x08008ce9
 8008f50:	08008cb5 	.word	0x08008cb5
 8008f54:	080189ec 	.word	0x080189ec

08008f58 <Node_processRPDO0>:


static void Node_processRPDO0(CO_RPDO_t *RPDO)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
	if (!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL)) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7e5b      	ldrb	r3, [r3, #25]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <Node_processRPDO0+0x1c>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f993 3000 	ldrsb.w	r3, [r3]
 8008f70:	2b05      	cmp	r3, #5
 8008f72:	d003      	beq.n	8008f7c <Node_processRPDO0+0x24>
        CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	645a      	str	r2, [r3, #68]	; 0x44
        return;
 8008f7a:	e042      	b.n	8009002 <Node_processRPDO0+0xaa>
    }

	uint8_t update = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t bufNo = 0; bufNo <= 1; bufNo++){
 8008f80:	2300      	movs	r3, #0
 8008f82:	75bb      	strb	r3, [r7, #22]
 8008f84:	e035      	b.n	8008ff2 <Node_processRPDO0+0x9a>
	  if(CO_FLAG_READ(RPDO->CANrxNew[bufNo])){
 8008f86:	7dbb      	ldrb	r3, [r7, #22]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	3310      	adds	r3, #16
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d02a      	beq.n	8008fec <Node_processRPDO0+0x94>
	    int16_t i;
	    uint8_t* pPDOdataByte;
	    uint8_t** ppODdataByte;

	    i = RPDO->dataLength;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	7e9b      	ldrb	r3, [r3, #26]
 8008f9a:	82bb      	strh	r3, [r7, #20]
	    pPDOdataByte = &RPDO->CANrxData[bufNo][0];
 8008f9c:	7dbb      	ldrb	r3, [r7, #22]
 8008f9e:	3309      	adds	r3, #9
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	613b      	str	r3, [r7, #16]
	    ppODdataByte = &RPDO->mapPointer[0];
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	331c      	adds	r3, #28
 8008fae:	60fb      	str	r3, [r7, #12]

	    /* Copy data to Object dictionary. If between the copy operation CANrxNew
	     * is set to true by receive thread, then copy the latest data again. */
	    CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8008fb0:	7dbb      	ldrb	r3, [r7, #22]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	3310      	adds	r3, #16
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	2200      	movs	r2, #0
 8008fbc:	605a      	str	r2, [r3, #4]
	    for(; i>0; i--) {
 8008fbe:	e00e      	b.n	8008fde <Node_processRPDO0+0x86>
	        **(ppODdataByte++) = *(pPDOdataByte++);
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	613a      	str	r2, [r7, #16]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	1d11      	adds	r1, r2, #4
 8008fca:	60f9      	str	r1, [r7, #12]
 8008fcc:	6812      	ldr	r2, [r2, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	7013      	strb	r3, [r2, #0]
	    for(; i>0; i--) {
 8008fd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	82bb      	strh	r3, [r7, #20]
 8008fde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	dcec      	bgt.n	8008fc0 <Node_processRPDO0+0x68>
	    }
	    update = 1;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	75fb      	strb	r3, [r7, #23]
	    break;
 8008fea:	e005      	b.n	8008ff8 <Node_processRPDO0+0xa0>
	for (uint8_t bufNo = 0; bufNo <= 1; bufNo++){
 8008fec:	7dbb      	ldrb	r3, [r7, #22]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	75bb      	strb	r3, [r7, #22]
 8008ff2:	7dbb      	ldrb	r3, [r7, #22]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d9c6      	bls.n	8008f86 <Node_processRPDO0+0x2e>
	  }
	}

	if (update) {
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <Node_processRPDO0+0xaa>
		MCD_OnControlWordUpdate();
 8008ffe:	f7ff fd3b 	bl	8008a78 <MCD_OnControlWordUpdate>
	}
}
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <NODE_process>:

void NODE_process(uint16_t timeDifference_us, bool_t syncWas)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	460a      	mov	r2, r1
 8009012:	80fb      	strh	r3, [r7, #6]
 8009014:	4613      	mov	r3, r2
 8009016:	717b      	strb	r3, [r7, #5]
	Node_processRPDO0(CO->RPDO[0]);
 8009018:	4b12      	ldr	r3, [pc, #72]	; (8009064 <NODE_process+0x5c>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	4618      	mov	r0, r3
 8009020:	f7ff ff9a 	bl	8008f58 <Node_processRPDO0>

	uint8_t i = 0;
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
	for (i = 1; i < CO_NO_RPDO; i++) {
 8009028:	2301      	movs	r3, #1
 800902a:	73fb      	strb	r3, [r7, #15]
 800902c:	e00d      	b.n	800904a <NODE_process+0x42>
	  CO_RPDO_process(CO->RPDO[i], true);
 800902e:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <NODE_process+0x5c>)
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	3306      	adds	r3, #6
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	2101      	movs	r1, #1
 800903e:	4618      	mov	r0, r3
 8009040:	f7fb fd56 	bl	8004af0 <CO_RPDO_process>
	for (i = 1; i < CO_NO_RPDO; i++) {
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	3301      	adds	r3, #1
 8009048:	73fb      	strb	r3, [r7, #15]
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	2b03      	cmp	r3, #3
 800904e:	d9ee      	bls.n	800902e <NODE_process+0x26>
    }

	MCD_broadState(timeDifference_us, syncWas);
 8009050:	797a      	ldrb	r2, [r7, #5]
 8009052:	88fb      	ldrh	r3, [r7, #6]
 8009054:	4611      	mov	r1, r2
 8009056:	4618      	mov	r0, r3
 8009058:	f7ff fc30 	bl	80088bc <MCD_broadState>
}
 800905c:	bf00      	nop
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20000a70 	.word	0x20000a70

08009068 <CO_CANsetConfigurationMode>:
#include "CO_OD.h"

static CAN_TxHeaderTypeDef TxHeader;

/******************************************************************************/
void CO_CANsetConfigurationMode(void *CANptr){
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <CO_CANsetNormalMode>:


/******************************************************************************/
void CO_CANsetNormalMode(CO_CANmodule_t *CANmodule){
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */

  if (HAL_CAN_ActivateNotification(CANmodule->CANptr,
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2113      	movs	r1, #19
 800908a:	4618      	mov	r0, r3
 800908c:	f005 fdff 	bl	800ec8e <HAL_CAN_ActivateNotification>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d002      	beq.n	800909c <CO_CANsetNormalMode+0x20>
		  CAN_IT_RX_FIFO0_MSG_PENDING |
		  CAN_IT_RX_FIFO1_MSG_PENDING |
		  CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
    CANmodule->CANnormal = false;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	749a      	strb	r2, [r3, #18]
  }

  if (HAL_CAN_Start(CANmodule->CANptr) != HAL_OK){
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f005 fb1d 	bl	800e6e0 <HAL_CAN_Start>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <CO_CANsetNormalMode+0x38>
	CANmodule->CANnormal = false;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	749a      	strb	r2, [r3, #18]
  }else{
    CANmodule->CANnormal = true;
  }
}
 80090b2:	e002      	b.n	80090ba <CO_CANsetNormalMode+0x3e>
    CANmodule->CANnormal = true;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	749a      	strb	r2, [r3, #18]
}
 80090ba:	bf00      	nop
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <CO_CANmodule_init>:
        CO_CANrx_t              rxArray[],
        uint16_t                rxSize,
        CO_CANtx_t              txArray[],
        uint16_t                txSize,
        uint16_t                CANbitRate)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b094      	sub	sp, #80	; 0x50
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	807b      	strh	r3, [r7, #2]
    uint16_t i;

    /* verify arguments */
    if(CANmodule==NULL || rxArray==NULL || txArray==NULL){
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d005      	beq.n	80090e4 <CO_CANmodule_init+0x20>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <CO_CANmodule_init+0x20>
 80090de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d102      	bne.n	80090ea <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80090e4:	f04f 33ff 	mov.w	r3, #4294967295
 80090e8:	e144      	b.n	8009374 <CO_CANmodule_init+0x2b0>
    }

    /* Configure object variables */
    CANmodule->CANptr = CANptr;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	601a      	str	r2, [r3, #0]
    CANmodule->rxArray = rxArray;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	887a      	ldrh	r2, [r7, #2]
 80090fa:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009100:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009108:	821a      	strh	r2, [r3, #16]
    CANmodule->CANnormal = false;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	749a      	strb	r2, [r3, #18]

    CANmodule->useCANrxFilters = false; /* Use standard id, none id filter */
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	74da      	strb	r2, [r3, #19]

    CANmodule->bufferInhibitFlag = false;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	751a      	strb	r2, [r3, #20]
    CANmodule->firstCANtxMessage = true;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2201      	movs	r2, #1
 8009120:	755a      	strb	r2, [r3, #21]
    CANmodule->CANtxCount = 0U;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	82da      	strh	r2, [r3, #22]
    CANmodule->errOld = 0U;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	619a      	str	r2, [r3, #24]
    CANmodule->em = NULL;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	61da      	str	r2, [r3, #28]

    for(i=0U; i<rxSize; i++){
 8009134:	2300      	movs	r3, #0
 8009136:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800913a:	e031      	b.n	80091a0 <CO_CANmodule_init+0xdc>
        rxArray[i].ident = 0U;
 800913c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009140:	4613      	mov	r3, r2
 8009142:	005b      	lsls	r3, r3, #1
 8009144:	4413      	add	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	461a      	mov	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4413      	add	r3, r2
 800914e:	2200      	movs	r2, #0
 8009150:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8009152:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009156:	4613      	mov	r3, r2
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	4413      	add	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	461a      	mov	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4413      	add	r3, r2
 8009164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009168:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 800916a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800916e:	4613      	mov	r3, r2
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4413      	add	r3, r2
 800917c:	2200      	movs	r2, #0
 800917e:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8009180:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009184:	4613      	mov	r3, r2
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	461a      	mov	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4413      	add	r3, r2
 8009192:	2200      	movs	r2, #0
 8009194:	609a      	str	r2, [r3, #8]
    for(i=0U; i<rxSize; i++){
 8009196:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800919a:	3301      	adds	r3, #1
 800919c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80091a0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80091a4:	887b      	ldrh	r3, [r7, #2]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d3c8      	bcc.n	800913c <CO_CANmodule_init+0x78>
    }

    for(i=0U; i<txSize; i++){
 80091aa:	2300      	movs	r3, #0
 80091ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80091b0:	e00b      	b.n	80091ca <CO_CANmodule_init+0x106>
        txArray[i].bufferFull = false;
 80091b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80091b6:	011b      	lsls	r3, r3, #4
 80091b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091ba:	4413      	add	r3, r2
 80091bc:	2200      	movs	r2, #0
 80091be:	735a      	strb	r2, [r3, #13]
    for(i=0U; i<txSize; i++){
 80091c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80091c4:	3301      	adds	r3, #1
 80091c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80091ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80091ce:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d3ed      	bcc.n	80091b2 <CO_CANmodule_init+0xee>
    }

    /*STM32 CAN initialize*/
    CO_CANmodule_disable(CANmodule);
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 f8d2 	bl	8009380 <CO_CANmodule_disable>
    HAL_CAN_MspDeInit(CANmodule->CANptr);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7f7 feeb 	bl	8000fbc <HAL_CAN_MspDeInit>

    /*ReInitialize msp gpio and nvic*/
    HAL_CAN_MspInit(CANmodule->CANptr);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7f7 fe7e 	bl	8000eec <HAL_CAN_MspInit>

    /* Time rate calc with http://www.bittiming.can-wiki.info/
     * The base MCU F405, CAN system clock: 42M
     * */
    uint32_t Prescaler;
    uint32_t seg1 = CAN_BS1_10TQ;
 80091f0:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 80091f4:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t seg2 = CAN_BS2_1TQ;
 80091f6:	2300      	movs	r3, #0
 80091f8:	643b      	str	r3, [r7, #64]	; 0x40

    switch(CANbitRate){
 80091fa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80091fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009202:	d01d      	beq.n	8009240 <CO_CANmodule_init+0x17c>
 8009204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009208:	dc5e      	bgt.n	80092c8 <CO_CANmodule_init+0x204>
 800920a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800920e:	d020      	beq.n	8009252 <CO_CANmodule_init+0x18e>
 8009210:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009214:	dc58      	bgt.n	80092c8 <CO_CANmodule_init+0x204>
 8009216:	2bfa      	cmp	r3, #250	; 0xfa
 8009218:	d024      	beq.n	8009264 <CO_CANmodule_init+0x1a0>
 800921a:	2bfa      	cmp	r3, #250	; 0xfa
 800921c:	dc54      	bgt.n	80092c8 <CO_CANmodule_init+0x204>
 800921e:	2b7d      	cmp	r3, #125	; 0x7d
 8009220:	d029      	beq.n	8009276 <CO_CANmodule_init+0x1b2>
 8009222:	2b7d      	cmp	r3, #125	; 0x7d
 8009224:	dc50      	bgt.n	80092c8 <CO_CANmodule_init+0x204>
 8009226:	2b64      	cmp	r3, #100	; 0x64
 8009228:	d02d      	beq.n	8009286 <CO_CANmodule_init+0x1c2>
 800922a:	2b64      	cmp	r3, #100	; 0x64
 800922c:	dc4c      	bgt.n	80092c8 <CO_CANmodule_init+0x204>
 800922e:	2b32      	cmp	r3, #50	; 0x32
 8009230:	d031      	beq.n	8009296 <CO_CANmodule_init+0x1d2>
 8009232:	2b32      	cmp	r3, #50	; 0x32
 8009234:	dc48      	bgt.n	80092c8 <CO_CANmodule_init+0x204>
 8009236:	2b0a      	cmp	r3, #10
 8009238:	d03d      	beq.n	80092b6 <CO_CANmodule_init+0x1f2>
 800923a:	2b14      	cmp	r3, #20
 800923c:	d033      	beq.n	80092a6 <CO_CANmodule_init+0x1e2>
 800923e:	e043      	b.n	80092c8 <CO_CANmodule_init+0x204>
    case 1000: {
    	Prescaler = 3;
 8009240:	2303      	movs	r3, #3
 8009242:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_11TQ;
 8009244:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8009248:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_2TQ;
 800924a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800924e:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8009250:	e041      	b.n	80092d6 <CO_CANmodule_init+0x212>
    }
    case 500:  {
    	Prescaler = 5;
 8009252:	2305      	movs	r3, #5
 8009254:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_13TQ;
 8009256:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800925a:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_2TQ;
 800925c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009260:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8009262:	e038      	b.n	80092d6 <CO_CANmodule_init+0x212>
    }
    case 250:  {
    	Prescaler = 10;
 8009264:	230a      	movs	r3, #10
 8009266:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_13TQ;
 8009268:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800926c:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_2TQ;
 800926e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009272:	643b      	str	r3, [r7, #64]	; 0x40
    	break;   // default is 8
 8009274:	e02f      	b.n	80092d6 <CO_CANmodule_init+0x212>
    }
    case 125:  {
    	Prescaler = 28;
 8009276:	231c      	movs	r3, #28
 8009278:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 800927a:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800927e:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 8009280:	2300      	movs	r3, #0
 8009282:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8009284:	e027      	b.n	80092d6 <CO_CANmodule_init+0x212>
    }
    case 100:  {
    	Prescaler = 35;
 8009286:	2323      	movs	r3, #35	; 0x23
 8009288:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 800928a:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800928e:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 8009290:	2300      	movs	r3, #0
 8009292:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 8009294:	e01f      	b.n	80092d6 <CO_CANmodule_init+0x212>
    }
    case 50:   {
    	Prescaler = 70;
 8009296:	2346      	movs	r3, #70	; 0x46
 8009298:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 800929a:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800929e:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 80092a0:	2300      	movs	r3, #0
 80092a2:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 80092a4:	e017      	b.n	80092d6 <CO_CANmodule_init+0x212>
    }
    case 20:   {
    	Prescaler = 175;
 80092a6:	23af      	movs	r3, #175	; 0xaf
 80092a8:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 80092aa:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 80092ae:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 80092b0:	2300      	movs	r3, #0
 80092b2:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 80092b4:	e00f      	b.n	80092d6 <CO_CANmodule_init+0x212>
    }
    case 10:   {
    	Prescaler = 350;
 80092b6:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80092ba:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 80092bc:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 80092c0:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 80092c2:	2300      	movs	r3, #0
 80092c4:	643b      	str	r3, [r7, #64]	; 0x40
    	break;
 80092c6:	e006      	b.n	80092d6 <CO_CANmodule_init+0x212>
    }
    default: {// default setting
    	Prescaler = 7;
 80092c8:	2307      	movs	r3, #7
 80092ca:	64bb      	str	r3, [r7, #72]	; 0x48
    	seg1 = CAN_BS1_10TQ;
 80092cc:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 80092d0:	647b      	str	r3, [r7, #68]	; 0x44
    	seg2 = CAN_BS2_1TQ;
 80092d2:	2300      	movs	r3, #0
 80092d4:	643b      	str	r3, [r7, #64]	; 0x40
    }
    }

    /*Target baudrate 500K, now accept 250K compatible with FDCAN*/

    CAN_HandleTypeDef* canHandle = (CAN_HandleTypeDef*)CANmodule->CANptr;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	63fb      	str	r3, [r7, #60]	; 0x3c
    canHandle->Instance = CAN1;
 80092dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092de:	4a27      	ldr	r2, [pc, #156]	; (800937c <CO_CANmodule_init+0x2b8>)
 80092e0:	601a      	str	r2, [r3, #0]
    canHandle->Init.Prescaler = Prescaler;
 80092e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092e6:	605a      	str	r2, [r3, #4]
    canHandle->Init.Mode = CAN_MODE_NORMAL;
 80092e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ea:	2200      	movs	r2, #0
 80092ec:	609a      	str	r2, [r3, #8]
    canHandle->Init.SyncJumpWidth = CAN_SJW_1TQ;
 80092ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f0:	2200      	movs	r2, #0
 80092f2:	60da      	str	r2, [r3, #12]
    canHandle->Init.TimeSeg1 = seg1;
 80092f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092f8:	611a      	str	r2, [r3, #16]
    canHandle->Init.TimeSeg2 = seg2;
 80092fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092fe:	615a      	str	r2, [r3, #20]
    canHandle->Init.TimeTriggeredMode = DISABLE;
 8009300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009302:	2200      	movs	r2, #0
 8009304:	761a      	strb	r2, [r3, #24]
    canHandle->Init.AutoBusOff = ENABLE;
 8009306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009308:	2201      	movs	r2, #1
 800930a:	765a      	strb	r2, [r3, #25]
    canHandle->Init.AutoWakeUp = DISABLE;
 800930c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930e:	2200      	movs	r2, #0
 8009310:	769a      	strb	r2, [r3, #26]
    canHandle->Init.AutoRetransmission = ENABLE;
 8009312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009314:	2201      	movs	r2, #1
 8009316:	76da      	strb	r2, [r3, #27]
    canHandle->Init.ReceiveFifoLocked = DISABLE;
 8009318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931a:	2200      	movs	r2, #0
 800931c:	771a      	strb	r2, [r3, #28]
    canHandle->Init.TransmitFifoPriority = DISABLE;
 800931e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009320:	2200      	movs	r2, #0
 8009322:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(canHandle) != HAL_OK)
 8009324:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009326:	f004 ffff 	bl	800e328 <HAL_CAN_Init>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <CO_CANmodule_init+0x270>
    {
      Error_Handler();
 8009330:	f7f8 fb2e 	bl	8001990 <Error_Handler>
    }

    CAN_FilterTypeDef filter;
    filter.FilterBank = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	62bb      	str	r3, [r7, #40]	; 0x28
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8009338:	2300      	movs	r3, #0
 800933a:	627b      	str	r3, [r7, #36]	; 0x24
    filter.FilterIdHigh = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]
    filter.FilterIdLow = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	61bb      	str	r3, [r7, #24]
    filter.FilterMaskIdHigh = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	61fb      	str	r3, [r7, #28]
    filter.FilterMaskIdLow = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	623b      	str	r3, [r7, #32]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800934c:	2300      	movs	r3, #0
 800934e:	62fb      	str	r3, [r7, #44]	; 0x2c
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8009350:	2301      	movs	r3, #1
 8009352:	633b      	str	r3, [r7, #48]	; 0x30
    filter.FilterActivation = CAN_FILTER_ENABLE;
 8009354:	2301      	movs	r3, #1
 8009356:	637b      	str	r3, [r7, #52]	; 0x34
    filter.SlaveStartFilterBank = 14;
 8009358:	230e      	movs	r3, #14
 800935a:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(canHandle, &filter) != HAL_OK) {
 800935c:	f107 0314 	add.w	r3, r7, #20
 8009360:	4619      	mov	r1, r3
 8009362:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009364:	f005 f8dc 	bl	800e520 <HAL_CAN_ConfigFilter>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <CO_CANmodule_init+0x2ae>
    	Error_Handler();
 800936e:	f7f8 fb0f 	bl	8001990 <Error_Handler>
    }

    return CO_ERROR_NO;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3750      	adds	r7, #80	; 0x50
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	40006400 	.word	0x40006400

08009380 <CO_CANmodule_disable>:


/******************************************************************************/
void CO_CANmodule_disable(CO_CANmodule_t *CANmodule){
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
    /* turn off the module */
  CANmodule->CANnormal = false;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	749a      	strb	r2, [r3, #18]
  HAL_CAN_DeactivateNotification(CANmodule->CANptr,
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2113      	movs	r1, #19
 8009394:	4618      	mov	r0, r3
 8009396:	f005 fca0 	bl	800ecda <HAL_CAN_DeactivateNotification>
		  CAN_IT_RX_FIFO0_MSG_PENDING |
		  		  CAN_IT_RX_FIFO1_MSG_PENDING |
		  		  CAN_IT_TX_MAILBOX_EMPTY);
  HAL_CAN_Stop(CANmodule->CANptr);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4618      	mov	r0, r3
 80093a0:	f005 f9e2 	bl	800e768 <HAL_CAN_Stop>
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <CO_CANrxBufferInit>:
        uint16_t                ident,
        uint16_t                mask,
        bool_t                  rtr,
        void                   *object,
        void                  (*CANrx_callback)(void *object, void *message))
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	4608      	mov	r0, r1
 80093b6:	4611      	mov	r1, r2
 80093b8:	461a      	mov	r2, r3
 80093ba:	4603      	mov	r3, r0
 80093bc:	817b      	strh	r3, [r7, #10]
 80093be:	460b      	mov	r3, r1
 80093c0:	813b      	strh	r3, [r7, #8]
 80093c2:	4613      	mov	r3, r2
 80093c4:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]

    if((CANmodule!=NULL) && (object!=NULL) && (CANrx_callback!=NULL) && (index < CANmodule->rxSize)){
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d039      	beq.n	8009444 <CO_CANrxBufferInit+0x98>
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d036      	beq.n	8009444 <CO_CANrxBufferInit+0x98>
 80093d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d033      	beq.n	8009444 <CO_CANrxBufferInit+0x98>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	891b      	ldrh	r3, [r3, #8]
 80093e0:	897a      	ldrh	r2, [r7, #10]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d22e      	bcs.n	8009444 <CO_CANrxBufferInit+0x98>
        /* buffer, which will be configured */
        CO_CANrx_t *buffer = &CANmodule->rxArray[index];
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6859      	ldr	r1, [r3, #4]
 80093ea:	897a      	ldrh	r2, [r7, #10]
 80093ec:	4613      	mov	r3, r2
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	440b      	add	r3, r1
 80093f6:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093fc:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009402:	609a      	str	r2, [r3, #8]

        /* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
        buffer->ident = ident << 2;
 8009404:	893b      	ldrh	r3, [r7, #8]
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	b29a      	uxth	r2, r3
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	801a      	strh	r2, [r3, #0]
        if (rtr) buffer->ident |= 0x02;
 800940e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d006      	beq.n	8009424 <CO_CANrxBufferInit+0x78>
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	f043 0302 	orr.w	r3, r3, #2
 800941e:	b29a      	uxth	r2, r3
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	801a      	strh	r2, [r3, #0]
        buffer->mask = ((mask & 0x07FF) << 2) | 0x02;
 8009424:	88fb      	ldrh	r3, [r7, #6]
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	b21a      	sxth	r2, r3
 800942a:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 800942e:	4013      	ands	r3, r2
 8009430:	b21b      	sxth	r3, r3
 8009432:	f043 0302 	orr.w	r3, r3, #2
 8009436:	b21b      	sxth	r3, r3
 8009438:	b29a      	uxth	r2, r3
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if(CANmodule->useCANrxFilters){
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	7cdb      	ldrb	r3, [r3, #19]
    if((CANmodule!=NULL) && (object!=NULL) && (CANrx_callback!=NULL) && (index < CANmodule->rxSize)){
 8009442:	e001      	b.n	8009448 <CO_CANrxBufferInit+0x9c>

        }
    }
    else{
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8009444:	23ff      	movs	r3, #255	; 0xff
 8009446:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8009448:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800944c:	4618      	mov	r0, r3
 800944e:	371c      	adds	r7, #28
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <CO_CANtxBufferInit>:
        uint16_t                index,
        uint16_t                ident,
        bool_t                  rtr,
        uint8_t                 noOfBytes,
        bool_t                  syncFlag)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	4608      	mov	r0, r1
 8009462:	4611      	mov	r1, r2
 8009464:	461a      	mov	r2, r3
 8009466:	4603      	mov	r3, r0
 8009468:	817b      	strh	r3, [r7, #10]
 800946a:	460b      	mov	r3, r1
 800946c:	813b      	strh	r3, [r7, #8]
 800946e:	4613      	mov	r3, r2
 8009470:	71fb      	strb	r3, [r7, #7]
    CO_CANtx_t *buffer = NULL;
 8009472:	2300      	movs	r3, #0
 8009474:	617b      	str	r3, [r7, #20]

    if((CANmodule != NULL) && (index < CANmodule->txSize)){
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d026      	beq.n	80094ca <CO_CANtxBufferInit+0x72>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8a1b      	ldrh	r3, [r3, #16]
 8009480:	897a      	ldrh	r2, [r7, #10]
 8009482:	429a      	cmp	r2, r3
 8009484:	d221      	bcs.n	80094ca <CO_CANtxBufferInit+0x72>
        /* get specific buffer */
        buffer = &CANmodule->txArray[index];
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	897b      	ldrh	r3, [r7, #10]
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	4413      	add	r3, r2
 8009490:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.
         * Microcontroller specific. */
        buffer->ident = (ident & 0x07FF) << 2;
 8009492:	893b      	ldrh	r3, [r7, #8]
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	461a      	mov	r2, r3
 8009498:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 800949c:	4013      	ands	r3, r2
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	6013      	str	r3, [r2, #0]
        if (rtr) buffer->ident |= 0x02;
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d005      	beq.n	80094b4 <CO_CANtxBufferInit+0x5c>
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f043 0202 	orr.w	r2, r3, #2
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	601a      	str	r2, [r3, #0]

        buffer->DLC = noOfBytes;
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80094ba:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	2200      	movs	r2, #0
 80094c0:	735a      	strb	r2, [r3, #13]
        buffer->syncFlag = syncFlag;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80094c8:	739a      	strb	r2, [r3, #14]
    }

    return buffer;
 80094ca:	697b      	ldr	r3, [r7, #20]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	371c      	adds	r7, #28
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t CO_CANsend(CO_CANmodule_t *CANmodule, CO_CANtx_t *buffer){
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]

    /* Verify overflow */
    if(buffer->bufferFull){
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	7b5b      	ldrb	r3, [r3, #13]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00f      	beq.n	8009510 <CO_CANsend+0x38>
        if(!CANmodule->firstCANtxMessage){
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	7d5b      	ldrb	r3, [r3, #21]
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d108      	bne.n	800950c <CO_CANsend+0x34>
            /* don't set error, if bootup message is still on buffers */
            CO_errorReport((CO_EM_t*)CANmodule->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	69d8      	ldr	r0, [r3, #28]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f248 1210 	movw	r2, #33040	; 0x8110
 8009506:	2114      	movs	r1, #20
 8009508:	f7f9 fbab 	bl	8002c62 <CO_errorReport>
        }
        err = CO_ERROR_TX_OVERFLOW;
 800950c:	23f7      	movs	r3, #247	; 0xf7
 800950e:	73fb      	strb	r3, [r7, #15]
    }

    CO_LOCK_CAN_SEND();

    /* if CAN TX buffer is free, copy message to it */
    if(CANmodule->CANtxCount == 0 && (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0)){
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	8adb      	ldrh	r3, [r3, #22]
 8009514:	b29b      	uxth	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d137      	bne.n	800958a <CO_CANsend+0xb2>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4618      	mov	r0, r3
 8009520:	f005 fa46 	bl	800e9b0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d02f      	beq.n	800958a <CO_CANsend+0xb2>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	7b9b      	ldrb	r3, [r3, #14]
 800952e:	b2da      	uxtb	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	751a      	strb	r2, [r3, #20]
        /* copy message and txRequest */

        TxHeader.StdId   = (buffer->ident >> 2) & 0x7FF;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	089b      	lsrs	r3, r3, #2
 800953a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800953e:	4a1b      	ldr	r2, [pc, #108]	; (80095ac <CO_CANsend+0xd4>)
 8009540:	6013      	str	r3, [r2, #0]
        TxHeader.DLC     = buffer->DLC;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	791b      	ldrb	r3, [r3, #4]
 8009546:	461a      	mov	r2, r3
 8009548:	4b18      	ldr	r3, [pc, #96]	; (80095ac <CO_CANsend+0xd4>)
 800954a:	611a      	str	r2, [r3, #16]
        TxHeader.ExtId   = 0;
 800954c:	4b17      	ldr	r3, [pc, #92]	; (80095ac <CO_CANsend+0xd4>)
 800954e:	2200      	movs	r2, #0
 8009550:	605a      	str	r2, [r3, #4]
        TxHeader.IDE     = CAN_ID_STD;
 8009552:	4b16      	ldr	r3, [pc, #88]	; (80095ac <CO_CANsend+0xd4>)
 8009554:	2200      	movs	r2, #0
 8009556:	609a      	str	r2, [r3, #8]
        TxHeader.RTR     = buffer->ident & 0x02;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	4a12      	ldr	r2, [pc, #72]	; (80095ac <CO_CANsend+0xd4>)
 8009562:	60d3      	str	r3, [r2, #12]

        uint32_t mailBox;
        if (HAL_CAN_AddTxMessage(CANmodule->CANptr, &TxHeader, &buffer->data[0], &mailBox) != HAL_OK){
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	1d5a      	adds	r2, r3, #5
 800956c:	f107 0308 	add.w	r3, r7, #8
 8009570:	490e      	ldr	r1, [pc, #56]	; (80095ac <CO_CANsend+0xd4>)
 8009572:	f005 f942 	bl	800e7fa <HAL_CAN_AddTxMessage>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <CO_CANsend+0xaa>
          err = CO_ERROR_TX_OVERFLOW;
 800957c:	23f7      	movs	r3, #247	; 0xf7
 800957e:	73fb      	strb	r3, [r7, #15]
    if(CANmodule->CANtxCount == 0 && (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0)){
 8009580:	e00d      	b.n	800959e <CO_CANsend+0xc6>
        }else{
        	/* First CAN message (bootup) was sent successfully */
        	CANmodule->firstCANtxMessage = false;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	755a      	strb	r2, [r3, #21]
    if(CANmodule->CANtxCount == 0 && (HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANptr) > 0)){
 8009588:	e009      	b.n	800959e <CO_CANsend+0xc6>
        }

    }
    /* if no buffer is free, message will be sent by interrupt */
    else{
        buffer->bufferFull = true;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	2201      	movs	r2, #1
 800958e:	735a      	strb	r2, [r3, #13]
        CANmodule->CANtxCount++;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	8adb      	ldrh	r3, [r3, #22]
 8009594:	b29b      	uxth	r3, r3
 8009596:	3301      	adds	r3, #1
 8009598:	b29a      	uxth	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	82da      	strh	r2, [r3, #22]
    }
    CO_UNLOCK_CAN_SEND();

    return err;
 800959e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20000ab4 	.word	0x20000ab4

080095b0 <CO_CANclearPendingSyncPDOs>:


/******************************************************************************/
void CO_CANclearPendingSyncPDOs(CO_CANmodule_t *CANmodule){
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	617b      	str	r3, [r7, #20]

    CO_LOCK_CAN_SEND();
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if(/*messageIsOnCanBuffer && */CANmodule->bufferInhibitFlag){
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	7d1b      	ldrb	r3, [r3, #20]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d004      	beq.n	80095d0 <CO_CANclearPendingSyncPDOs+0x20>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	751a      	strb	r2, [r3, #20]
        tpdoDeleted = 1U;
 80095cc:	2301      	movs	r3, #1
 80095ce:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if(CANmodule->CANtxCount != 0U){
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	8adb      	ldrh	r3, [r3, #22]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d025      	beq.n	8009626 <CO_CANclearPendingSyncPDOs+0x76>
        uint16_t i;
        CO_CANtx_t *buffer = &CANmodule->txArray[0];
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	60fb      	str	r3, [r7, #12]
        for(i = CANmodule->txSize; i > 0U; i--){
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	8a1b      	ldrh	r3, [r3, #16]
 80095e4:	827b      	strh	r3, [r7, #18]
 80095e6:	e01b      	b.n	8009620 <CO_CANclearPendingSyncPDOs+0x70>
            if(buffer->bufferFull){
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	7b5b      	ldrb	r3, [r3, #13]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d010      	beq.n	8009614 <CO_CANclearPendingSyncPDOs+0x64>
                if(buffer->syncFlag){
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	7b9b      	ldrb	r3, [r3, #14]
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00b      	beq.n	8009614 <CO_CANclearPendingSyncPDOs+0x64>
                    buffer->bufferFull = false;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	735a      	strb	r2, [r3, #13]
                    CANmodule->CANtxCount--;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	8adb      	ldrh	r3, [r3, #22]
 8009606:	b29b      	uxth	r3, r3
 8009608:	3b01      	subs	r3, #1
 800960a:	b29a      	uxth	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	82da      	strh	r2, [r3, #22]
                    tpdoDeleted = 2U;
 8009610:	2302      	movs	r3, #2
 8009612:	617b      	str	r3, [r7, #20]
                }
            }
            buffer++;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	3310      	adds	r3, #16
 8009618:	60fb      	str	r3, [r7, #12]
        for(i = CANmodule->txSize; i > 0U; i--){
 800961a:	8a7b      	ldrh	r3, [r7, #18]
 800961c:	3b01      	subs	r3, #1
 800961e:	827b      	strh	r3, [r7, #18]
 8009620:	8a7b      	ldrh	r3, [r7, #18]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e0      	bne.n	80095e8 <CO_CANclearPendingSyncPDOs+0x38>
        }
    }
    CO_UNLOCK_CAN_SEND();


    if(tpdoDeleted != 0U){
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d007      	beq.n	800963c <CO_CANclearPendingSyncPDOs+0x8c>
        CO_errorReport((CO_EM_t*)CANmodule->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	69d8      	ldr	r0, [r3, #28]
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8009636:	2115      	movs	r1, #21
 8009638:	f7f9 fb13 	bl	8002c62 <CO_errorReport>
    }
}
 800963c:	bf00      	nop
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <CO_CANverifyErrors>:
		}
	}
}
/******************************************************************************/
void CO_CANverifyErrors(CO_CANmodule_t *CANmodule)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
    CO_EM_t* em = (CO_EM_t*)CANmodule->em;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	617b      	str	r3, [r7, #20]

    /* get error counters from module. Id possible, function may use different way to
     * determine errors. */
    uint32_t err = ((CAN_HandleTypeDef*)(CANmodule->CANptr))->ErrorCode;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009658:	613b      	str	r3, [r7, #16]

    if(CANmodule->errOld != err){
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	429a      	cmp	r2, r3
 8009662:	d06f      	beq.n	8009744 <CO_CANverifyErrors+0x100>
        CANmodule->errOld = err;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	619a      	str	r2, [r3, #24]

        if(err & HAL_CAN_ERROR_BOF){
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d007      	beq.n	8009684 <CO_CANverifyErrors+0x40>
        	/* bus off, 离线状态 */
            CO_errorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, err);
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	f248 1240 	movw	r2, #33088	; 0x8140
 800967a:	2112      	movs	r1, #18
 800967c:	6978      	ldr	r0, [r7, #20]
 800967e:	f7f9 faf0 	bl	8002c62 <CO_errorReport>
 8009682:	e048      	b.n	8009716 <CO_CANverifyErrors+0xd2>
        }
        else{
        	/* not bus off, 在线恢复 */
            CO_errorReset(em, CO_EM_CAN_TX_BUS_OFF, err);
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	2112      	movs	r1, #18
 8009688:	6978      	ldr	r0, [r7, #20]
 800968a:	f7f9 fb70 	bl	8002d6e <CO_errorReset>

            if(err & HAL_CAN_ERROR_EWG){
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d005      	beq.n	80096a4 <CO_CANverifyErrors+0x60>
            	/* bus warning */
                CO_errorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, err);
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	2200      	movs	r2, #0
 800969c:	2101      	movs	r1, #1
 800969e:	6978      	ldr	r0, [r7, #20]
 80096a0:	f7f9 fadf 	bl	8002c62 <CO_errorReport>
            }

            if(err & HAL_CAN_ERROR_EPV){
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d013      	beq.n	80096d6 <CO_CANverifyErrors+0x92>
            	/* RX/TX bus passive, 被动错误 */
                CO_errorReport(em, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, err);
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	f248 1220 	movw	r2, #33056	; 0x8120
 80096b4:	2106      	movs	r1, #6
 80096b6:	6978      	ldr	r0, [r7, #20]
 80096b8:	f7f9 fad3 	bl	8002c62 <CO_errorReport>

                if(!CANmodule->firstCANtxMessage){
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	7d5b      	ldrb	r3, [r3, #21]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d11f      	bne.n	8009706 <CO_CANverifyErrors+0xc2>
                	CO_errorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, err);
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f248 1220 	movw	r2, #33056	; 0x8120
 80096cc:	2107      	movs	r1, #7
 80096ce:	6978      	ldr	r0, [r7, #20]
 80096d0:	f7f9 fac7 	bl	8002c62 <CO_errorReport>
 80096d4:	e017      	b.n	8009706 <CO_CANverifyErrors+0xc2>
                }
            }
            else{
                CO_errorReset(em, CO_EM_CAN_RX_BUS_PASSIVE, err);
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	2106      	movs	r1, #6
 80096da:	6978      	ldr	r0, [r7, #20]
 80096dc:	f7f9 fb47 	bl	8002d6e <CO_errorReset>

                bool_t isError = CO_isError(em, CO_EM_CAN_TX_BUS_PASSIVE);
 80096e0:	2107      	movs	r1, #7
 80096e2:	6978      	ldr	r0, [r7, #20]
 80096e4:	f7f9 fbcb 	bl	8002e7e <CO_isError>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]
                if(isError){
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d009      	beq.n	8009706 <CO_CANverifyErrors+0xc2>
                    CO_errorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, err);
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	2107      	movs	r1, #7
 80096f6:	6978      	ldr	r0, [r7, #20]
 80096f8:	f7f9 fb39 	bl	8002d6e <CO_errorReset>
                    CO_errorReset(em, CO_EM_CAN_TX_OVERFLOW, err);
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	2114      	movs	r1, #20
 8009700:	6978      	ldr	r0, [r7, #20]
 8009702:	f7f9 fb34 	bl	8002d6e <CO_errorReset>
                }
            }

            if(err == HAL_CAN_ERROR_NONE){       /* no error */
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d104      	bne.n	8009716 <CO_CANverifyErrors+0xd2>
                CO_errorReset(em, CO_EM_CAN_BUS_WARNING, err);
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	2101      	movs	r1, #1
 8009710:	6978      	ldr	r0, [r7, #20]
 8009712:	f7f9 fb2c 	bl	8002d6e <CO_errorReset>
            }
        }

        if((err & HAL_CAN_ERROR_RX_FOV0) || (err & HAL_CAN_ERROR_RX_FOV1)){
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800971c:	2b00      	cmp	r3, #0
 800971e:	d104      	bne.n	800972a <CO_CANverifyErrors+0xe6>
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009726:	2b00      	cmp	r3, #0
 8009728:	d007      	beq.n	800973a <CO_CANverifyErrors+0xf6>
        	/* CAN RX bus overflow */
            CO_errorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, err);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f248 1210 	movw	r2, #33040	; 0x8110
 8009730:	2113      	movs	r1, #19
 8009732:	6978      	ldr	r0, [r7, #20]
 8009734:	f7f9 fa95 	bl	8002c62 <CO_errorReport>
        }else{
        	CO_errorReset(em, CO_EM_CAN_RXB_OVERFLOW, err);
        }
    }
}
 8009738:	e004      	b.n	8009744 <CO_CANverifyErrors+0x100>
        	CO_errorReset(em, CO_EM_CAN_RXB_OVERFLOW, err);
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	2113      	movs	r1, #19
 800973e:	6978      	ldr	r0, [r7, #20]
 8009740:	f7f9 fb15 	bl	8002d6e <CO_errorReset>
}
 8009744:	bf00      	nop
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <CO_CANinterrupt>:


/******************************************************************************/
void CO_CANinterrupt(CO_CANmodule_t *CANmodule, uint32_t RxFifo)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b090      	sub	sp, #64	; 0x40
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
    /* receive interrupt */
    if(1){
        CO_CANrxMsg_t rcvMsg;      /* pointer to received message in CAN module */
        uint16_t index;             /* index of received message */

        CO_CANrx_t *buffer = NULL;  /* receive message buffer from CO_CANmodule_t object. */
 8009756:	2300      	movs	r3, #0
 8009758:	63bb      	str	r3, [r7, #56]	; 0x38
        bool_t msgMatched = false;
 800975a:	2300      	movs	r3, #0
 800975c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        HAL_CAN_GetRxMessage(CANmodule->CANptr, RxFifo, &rcvMsg.header, &rcvMsg.data[0]);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	f107 0308 	add.w	r3, r7, #8
 8009768:	3321      	adds	r3, #33	; 0x21
 800976a:	f107 0208 	add.w	r2, r7, #8
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	f005 f953 	bl	800ea1a <HAL_CAN_GetRxMessage>

        rcvMsg.DLC   = rcvMsg.header.DLC;
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        rcvMsg.ident = rcvMsg.header.StdId;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	627b      	str	r3, [r7, #36]	; 0x24

        /*Expand with CANopen rx/tx buffer setting*/
        rcvMsg.ident <<= 2;
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	627b      	str	r3, [r7, #36]	; 0x24
        rcvMsg.ident |= rcvMsg.header.RTR;
 8009786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	4313      	orrs	r3, r2
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
				cobId, nodeId,
				rcvMsg.header.DLC,
				rcvMsg.data[0]);
		*/

        if(CANmodule->useCANrxFilters){
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	7cdb      	ldrb	r3, [r3, #19]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01c      	beq.n	80097d2 <CO_CANinterrupt+0x86>
            /* CAN module filters are used. Message with known 11-bit identifier has */
            /* been received */
            index = 0;  /* get index of the received message here. Or something similar */
 8009798:	2300      	movs	r3, #0
 800979a:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(index < CANmodule->rxSize){
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	891b      	ldrh	r3, [r3, #8]
 80097a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d232      	bcs.n	800980c <CO_CANinterrupt+0xc0>
                buffer = &CANmodule->rxArray[index];
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6859      	ldr	r1, [r3, #4]
 80097aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80097ac:	4613      	mov	r3, r2
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	440b      	add	r3, r1
 80097b6:	63bb      	str	r3, [r7, #56]	; 0x38
                /* verify also RTR */
                if(((rcvMsg.ident ^ buffer->ident) & buffer->mask) == 0U){
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097bc:	8812      	ldrh	r2, [r2, #0]
 80097be:	4053      	eors	r3, r2
 80097c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097c2:	8852      	ldrh	r2, [r2, #2]
 80097c4:	4013      	ands	r3, r2
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d120      	bne.n	800980c <CO_CANinterrupt+0xc0>
                    msgMatched = true;
 80097ca:	2301      	movs	r3, #1
 80097cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80097d0:	e01c      	b.n	800980c <CO_CANinterrupt+0xc0>
            }
        }
        else{
            /* CAN module filters are not used, message with any standard 11-bit identifier */
            /* has been received. Search rxArray form CANmodule for the same CAN-ID. */
            buffer = &CANmodule->rxArray[0];
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	63bb      	str	r3, [r7, #56]	; 0x38
            for(index = CANmodule->rxSize; index > 0U; index--){
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	891b      	ldrh	r3, [r3, #8]
 80097dc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80097de:	e012      	b.n	8009806 <CO_CANinterrupt+0xba>
                if(((rcvMsg.ident ^ buffer->ident) & buffer->mask) == 0U){
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097e4:	8812      	ldrh	r2, [r2, #0]
 80097e6:	4053      	eors	r3, r2
 80097e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097ea:	8852      	ldrh	r2, [r2, #2]
 80097ec:	4013      	ands	r3, r2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d103      	bne.n	80097fa <CO_CANinterrupt+0xae>
                    msgMatched = true;
 80097f2:	2301      	movs	r3, #1
 80097f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    break;
 80097f8:	e008      	b.n	800980c <CO_CANinterrupt+0xc0>
                }
                buffer++;
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	330c      	adds	r3, #12
 80097fe:	63bb      	str	r3, [r7, #56]	; 0x38
            for(index = CANmodule->rxSize; index > 0U; index--){
 8009800:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009802:	3b01      	subs	r3, #1
 8009804:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009806:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e9      	bne.n	80097e0 <CO_CANinterrupt+0x94>
            }
        }

        /* Call specific function, which will process the message */
        if(msgMatched && (buffer != NULL) && (buffer->CANrx_callback != NULL)){
 800980c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00e      	beq.n	8009832 <CO_CANinterrupt+0xe6>
 8009814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00b      	beq.n	8009832 <CO_CANinterrupt+0xe6>
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d007      	beq.n	8009832 <CO_CANinterrupt+0xe6>
            buffer->CANrx_callback(buffer->object, (void*) &rcvMsg);
 8009822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009828:	6852      	ldr	r2, [r2, #4]
 800982a:	f107 0108 	add.w	r1, r7, #8
 800982e:	4610      	mov	r0, r2
 8009830:	4798      	blx	r3
        }
    }
    else{
        /* some other interrupt reason */
    }
}
 8009832:	bf00      	nop
 8009834:	3740      	adds	r7, #64	; 0x40
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
	...

0800983c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) > 0){
 8009844:	e006      	b.n	8009854 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		CO_CANinterrupt(CO->CANmodule[0], CAN_RX_FIFO0);
 8009846:	4b09      	ldr	r3, [pc, #36]	; (800986c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2100      	movs	r1, #0
 800984e:	4618      	mov	r0, r3
 8009850:	f7ff ff7c 	bl	800974c <CO_CANinterrupt>
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) > 0){
 8009854:	2100      	movs	r1, #0
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f005 f9f1 	bl	800ec3e <HAL_CAN_GetRxFifoFillLevel>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1f1      	bne.n	8009846 <HAL_CAN_RxFifo0MsgPendingCallback+0xa>
	}
}
 8009862:	bf00      	nop
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20000a70 	.word	0x20000a70

08009870 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0){
 8009878:	e006      	b.n	8009888 <HAL_CAN_RxFifo1MsgPendingCallback+0x18>
		CO_CANinterrupt(CO->CANmodule[0], CAN_RX_FIFO1);
 800987a:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2101      	movs	r1, #1
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff ff62 	bl	800974c <CO_CANinterrupt>
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0){
 8009888:	2101      	movs	r1, #1
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f005 f9d7 	bl	800ec3e <HAL_CAN_GetRxFifoFillLevel>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1f1      	bne.n	800987a <HAL_CAN_RxFifo1MsgPendingCallback+0xa>
	}
}
 8009896:	bf00      	nop
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	20000a70 	.word	0x20000a70

080098a4 <LOG_Init>:
uint8_t g_LogLevel;
uint8_t g_LogOn;
uint8_t g_LogOutput;

void LOG_Init(uint8_t level, uint8_t on, uint8_t output)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	71fb      	strb	r3, [r7, #7]
 80098ae:	460b      	mov	r3, r1
 80098b0:	71bb      	strb	r3, [r7, #6]
 80098b2:	4613      	mov	r3, r2
 80098b4:	717b      	strb	r3, [r7, #5]
	g_LogLevel = level;
 80098b6:	4a07      	ldr	r2, [pc, #28]	; (80098d4 <LOG_Init+0x30>)
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	7013      	strb	r3, [r2, #0]
	g_LogOn = on;
 80098bc:	4a06      	ldr	r2, [pc, #24]	; (80098d8 <LOG_Init+0x34>)
 80098be:	79bb      	ldrb	r3, [r7, #6]
 80098c0:	7013      	strb	r3, [r2, #0]
	g_LogOutput = output;
 80098c2:	4a06      	ldr	r2, [pc, #24]	; (80098dc <LOG_Init+0x38>)
 80098c4:	797b      	ldrb	r3, [r7, #5]
 80098c6:	7013      	strb	r3, [r2, #0]
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	20000acc 	.word	0x20000acc
 80098d8:	20000acd 	.word	0x20000acd
 80098dc:	20000ace 	.word	0x20000ace

080098e0 <LOG_Print>:
	if (level > LOG_DbgLevel) return;
	g_LogLevel = level;
}

void LOG_Print(uint8_t level, const char* fmt, ...)
{
 80098e0:	b40e      	push	{r1, r2, r3}
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b095      	sub	sp, #84	; 0x54
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	4603      	mov	r3, r0
 80098ea:	71fb      	strb	r3, [r7, #7]
	if (!g_LogOn) return;
 80098ec:	4b1e      	ldr	r3, [pc, #120]	; (8009968 <LOG_Print+0x88>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d030      	beq.n	8009956 <LOG_Print+0x76>
	if (level > g_LogLevel) return;
 80098f4:	4b1d      	ldr	r3, [pc, #116]	; (800996c <LOG_Print+0x8c>)
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	79fa      	ldrb	r2, [r7, #7]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d82d      	bhi.n	800995a <LOG_Print+0x7a>

	va_list v1;
	va_start(v1, fmt);
 80098fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009902:	64fb      	str	r3, [r7, #76]	; 0x4c

	char buffer[64];
	memset(buffer, 0, 64);
 8009904:	f107 030c 	add.w	r3, r7, #12
 8009908:	2240      	movs	r2, #64	; 0x40
 800990a:	2100      	movs	r1, #0
 800990c:	4618      	mov	r0, r3
 800990e:	f00d fdef 	bl	80174f0 <memset>

	vsnprintf(buffer, 64, fmt, v1);
 8009912:	f107 000c 	add.w	r0, r7, #12
 8009916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009918:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800991a:	2140      	movs	r1, #64	; 0x40
 800991c:	f00e f836 	bl	801798c <vsniprintf>

	if (g_LogOutput == LOG_MonOut){
 8009920:	4b13      	ldr	r3, [pc, #76]	; (8009970 <LOG_Print+0x90>)
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d105      	bne.n	8009934 <LOG_Print+0x54>
		// print to rdi monito
		printf(buffer);
 8009928:	f107 030c 	add.w	r3, r7, #12
 800992c:	4618      	mov	r0, r3
 800992e:	f00d fedd 	bl	80176ec <iprintf>
 8009932:	e013      	b.n	800995c <LOG_Print+0x7c>
	}else if (g_LogOutput == LOG_USARTOut) {
 8009934:	4b0e      	ldr	r3, [pc, #56]	; (8009970 <LOG_Print+0x90>)
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d10f      	bne.n	800995c <LOG_Print+0x7c>
		// print to usart
		JNT_dbgOutput(buffer, strlen(buffer));
 800993c:	f107 030c 	add.w	r3, r7, #12
 8009940:	4618      	mov	r0, r3
 8009942:	f7f6 fc45 	bl	80001d0 <strlen>
 8009946:	4602      	mov	r2, r0
 8009948:	f107 030c 	add.w	r3, r7, #12
 800994c:	4611      	mov	r1, r2
 800994e:	4618      	mov	r0, r3
 8009950:	f000 fb0c 	bl	8009f6c <JNT_dbgOutput>
 8009954:	e002      	b.n	800995c <LOG_Print+0x7c>
	if (!g_LogOn) return;
 8009956:	bf00      	nop
 8009958:	e000      	b.n	800995c <LOG_Print+0x7c>
	if (level > g_LogLevel) return;
 800995a:	bf00      	nop
	}
	va_end(v1);
}
 800995c:	3754      	adds	r7, #84	; 0x54
 800995e:	46bd      	mov	sp, r7
 8009960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009964:	b003      	add	sp, #12
 8009966:	4770      	bx	lr
 8009968:	20000acd 	.word	0x20000acd
 800996c:	20000acc 	.word	0x20000acc
 8009970:	20000ace 	.word	0x20000ace

08009974 <AS5048A_Init>:

#define SPI_AS5048A_CS_LOW()   HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET)
#define SPI_AS5048A_CS_HIGH()  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET)

void AS5048A_Init()
{
 8009974:	b480      	push	{r7}
 8009976:	af00      	add	r7, sp, #0

}
 8009978:	bf00      	nop
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
	...

08009984 <AS5048A_SPI_WriteData>:

static uint16_t AS5048A_SPI_WriteData(uint16_t data, uint16_t *rx)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af02      	add	r7, sp, #8
 800998a:	4603      	mov	r3, r0
 800998c:	6039      	str	r1, [r7, #0]
 800998e:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	SPI_AS5048A_CS_LOW();
 8009990:	2200      	movs	r2, #0
 8009992:	2101      	movs	r1, #1
 8009994:	480c      	ldr	r0, [pc, #48]	; (80099c8 <AS5048A_SPI_WriteData+0x44>)
 8009996:	f006 fb43 	bl	8010020 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi3, (uint8_t*)&data, (uint8_t*)rx, 1, HAL_MAX_DELAY);
 800999a:	1db9      	adds	r1, r7, #6
 800999c:	f04f 33ff 	mov.w	r3, #4294967295
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	2301      	movs	r3, #1
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	4809      	ldr	r0, [pc, #36]	; (80099cc <AS5048A_SPI_WriteData+0x48>)
 80099a8:	f007 f85c 	bl	8010a64 <HAL_SPI_TransmitReceive>
 80099ac:	4603      	mov	r3, r0
 80099ae:	73fb      	strb	r3, [r7, #15]
	SPI_AS5048A_CS_HIGH();
 80099b0:	2201      	movs	r2, #1
 80099b2:	2101      	movs	r1, #1
 80099b4:	4804      	ldr	r0, [pc, #16]	; (80099c8 <AS5048A_SPI_WriteData+0x44>)
 80099b6:	f006 fb33 	bl	8010020 <HAL_GPIO_WritePin>

	return status;
 80099ba:	7bfb      	ldrb	r3, [r7, #15]
 80099bc:	b29b      	uxth	r3, r3
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	40020800 	.word	0x40020800
 80099cc:	200006f8 	.word	0x200006f8

080099d0 <parity_even>:

static uint8_t parity_even(uint16_t v)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	80fb      	strh	r3, [r7, #6]
	if (v == 0) return 0;
 80099da:	88fb      	ldrh	r3, [r7, #6]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <parity_even+0x14>
 80099e0:	2300      	movs	r3, #0
 80099e2:	e01c      	b.n	8009a1e <parity_even+0x4e>

    v ^= v >> 8;
 80099e4:	88fb      	ldrh	r3, [r7, #6]
 80099e6:	0a1b      	lsrs	r3, r3, #8
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	88fb      	ldrh	r3, [r7, #6]
 80099ec:	4053      	eors	r3, r2
 80099ee:	80fb      	strh	r3, [r7, #6]
    v ^= v >> 4;
 80099f0:	88fb      	ldrh	r3, [r7, #6]
 80099f2:	091b      	lsrs	r3, r3, #4
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	88fb      	ldrh	r3, [r7, #6]
 80099f8:	4053      	eors	r3, r2
 80099fa:	80fb      	strh	r3, [r7, #6]
    v ^= v >> 2;
 80099fc:	88fb      	ldrh	r3, [r7, #6]
 80099fe:	089b      	lsrs	r3, r3, #2
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	88fb      	ldrh	r3, [r7, #6]
 8009a04:	4053      	eors	r3, r2
 8009a06:	80fb      	strh	r3, [r7, #6]
    v ^= v >> 1;
 8009a08:	88fb      	ldrh	r3, [r7, #6]
 8009a0a:	085b      	lsrs	r3, r3, #1
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	88fb      	ldrh	r3, [r7, #6]
 8009a10:	4053      	eors	r3, r2
 8009a12:	80fb      	strh	r3, [r7, #6]

    return v & 1;
 8009a14:	88fb      	ldrh	r3, [r7, #6]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	b2db      	uxtb	r3, r3
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	370c      	adds	r7, #12
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr

08009a2a <AS5048A_ClearAndNop>:

static void AS5048A_ClearAndNop()
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b082      	sub	sp, #8
 8009a2e:	af00      	add	r7, sp, #0
	uint16_t res = 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	80bb      	strh	r3, [r7, #4]
	uint16_t command = CMD_CLEAR;
 8009a34:	f244 0301 	movw	r3, #16385	; 0x4001
 8009a38:	80fb      	strh	r3, [r7, #6]

	command |= ((uint16_t)parity_even(command) << 15);
 8009a3a:	88fb      	ldrh	r3, [r7, #6]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7ff ffc7 	bl	80099d0 <parity_even>
 8009a42:	4603      	mov	r3, r0
 8009a44:	03db      	lsls	r3, r3, #15
 8009a46:	b21a      	sxth	r2, r3
 8009a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	b21b      	sxth	r3, r3
 8009a50:	80fb      	strh	r3, [r7, #6]
	AS5048A_SPI_WriteData(command, &res);
 8009a52:	1d3a      	adds	r2, r7, #4
 8009a54:	88fb      	ldrh	r3, [r7, #6]
 8009a56:	4611      	mov	r1, r2
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff ff93 	bl	8009984 <AS5048A_SPI_WriteData>

	res = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	80bb      	strh	r3, [r7, #4]
	AS5048A_SPI_WriteData(command, &res);
 8009a62:	1d3a      	adds	r2, r7, #4
 8009a64:	88fb      	ldrh	r3, [r7, #6]
 8009a66:	4611      	mov	r1, r2
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7ff ff8b 	bl	8009984 <AS5048A_SPI_WriteData>
}
 8009a6e:	bf00      	nop
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <AS5048A_ReadReg>:

uint16_t AS5048A_ReadReg(uint16_t cmd, uint16_t *val)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b084      	sub	sp, #16
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	6039      	str	r1, [r7, #0]
 8009a80:	80fb      	strh	r3, [r7, #6]
	uint16_t status;

	uint16_t rx;
	uint16_t command = 0x4000;
 8009a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a86:	81bb      	strh	r3, [r7, #12]

	command = command | cmd;
 8009a88:	89ba      	ldrh	r2, [r7, #12]
 8009a8a:	88fb      	ldrh	r3, [r7, #6]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	81bb      	strh	r3, [r7, #12]
	command |= ((uint16_t)parity_even(command) << 15);
 8009a90:	89bb      	ldrh	r3, [r7, #12]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7ff ff9c 	bl	80099d0 <parity_even>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	03db      	lsls	r3, r3, #15
 8009a9c:	b21a      	sxth	r2, r3
 8009a9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	b21b      	sxth	r3, r3
 8009aa6:	81bb      	strh	r3, [r7, #12]

	status = AS5048A_SPI_WriteData(command, &rx);
 8009aa8:	f107 020a 	add.w	r2, r7, #10
 8009aac:	89bb      	ldrh	r3, [r7, #12]
 8009aae:	4611      	mov	r1, r2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7ff ff67 	bl	8009984 <AS5048A_SPI_WriteData>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	81fb      	strh	r3, [r7, #14]

	if (status != HAL_OK)
 8009aba:	89fb      	ldrh	r3, [r7, #14]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <AS5048A_ReadReg+0x50>
		return REG_ERROR;
 8009ac0:	f641 7301 	movw	r3, #7937	; 0x1f01
 8009ac4:	e01b      	b.n	8009afe <AS5048A_ReadReg+0x88>

	command = CMD_NOP;
 8009ac6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009aca:	81bb      	strh	r3, [r7, #12]
	status = AS5048A_SPI_WriteData(command, val);
 8009acc:	89bb      	ldrh	r3, [r7, #12]
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff ff57 	bl	8009984 <AS5048A_SPI_WriteData>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	81fb      	strh	r3, [r7, #14]
	if (status != HAL_OK)
 8009ada:	89fb      	ldrh	r3, [r7, #14]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <AS5048A_ReadReg+0x70>
		return REG_ERROR;
 8009ae0:	f641 7301 	movw	r3, #7937	; 0x1f01
 8009ae4:	e00b      	b.n	8009afe <AS5048A_ReadReg+0x88>

	if ((*val & 0x4000) != 0){
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d004      	beq.n	8009afc <AS5048A_ReadReg+0x86>
		AS5048A_ClearAndNop();
 8009af2:	f7ff ff9a 	bl	8009a2a <AS5048A_ClearAndNop>
		status = READ_ERROR;
 8009af6:	f641 7302 	movw	r3, #7938	; 0x1f02
 8009afa:	81fb      	strh	r3, [r7, #14]
	}

	return status;
 8009afc:	89fb      	ldrh	r3, [r7, #14]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <AS5048A_ReadValue>:

	return HAL_OK;
}

uint16_t AS5048A_ReadValue(uint16_t cmd, uint16_t *value)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	6039      	str	r1, [r7, #0]
 8009b10:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t rx;

	status = AS5048A_ReadReg(cmd, &rx);
 8009b12:	f107 0208 	add.w	r2, r7, #8
 8009b16:	88fb      	ldrh	r3, [r7, #6]
 8009b18:	4611      	mov	r1, r2
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7ff ffab 	bl	8009a76 <AS5048A_ReadReg>
 8009b20:	4603      	mov	r3, r0
 8009b22:	73fb      	strb	r3, [r7, #15]

	uint16_t data = rx & 0x3fff;
 8009b24:	893b      	ldrh	r3, [r7, #8]
 8009b26:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009b2a:	81bb      	strh	r3, [r7, #12]
	uint16_t error = parity_even(data) ^ (rx >> 15);
 8009b2c:	89bb      	ldrh	r3, [r7, #12]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff ff4e 	bl	80099d0 <parity_even>
 8009b34:	4603      	mov	r3, r0
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	893b      	ldrh	r3, [r7, #8]
 8009b3a:	0bdb      	lsrs	r3, r3, #15
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	4053      	eors	r3, r2
 8009b40:	817b      	strh	r3, [r7, #10]

	if (error){
 8009b42:	897b      	ldrh	r3, [r7, #10]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d005      	beq.n	8009b54 <AS5048A_ReadValue+0x4e>
		*value = 0;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	801a      	strh	r2, [r3, #0]
		return EVEN_ERROR;
 8009b4e:	f641 6301 	movw	r3, #7681	; 0x1e01
 8009b52:	e004      	b.n	8009b5e <AS5048A_ReadValue+0x58>
	}else{
		*value = data;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	89ba      	ldrh	r2, [r7, #12]
 8009b58:	801a      	strh	r2, [r3, #0]
	}

	return status;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	b29b      	uxth	r3, r3
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <AS5048A_ReadAngle>:

uint16_t AS5048A_ReadAngle(uint16_t *angle)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  uint16_t status;
  status = AS5048A_ReadValue(CMD_ANGLE, angle);
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8009b74:	f7ff ffc7 	bl	8009b06 <AS5048A_ReadValue>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	81fb      	strh	r3, [r7, #14]

  return status;
 8009b7c:	89fb      	ldrh	r3, [r7, #14]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <RND_Init>:
}Round_Inc_t;

Round_Inc_t      g_RoundRecord;

void RND_Init(uint16_t angle)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	80fb      	strh	r3, [r7, #6]
	// Set the home angle
	g_RoundRecord.homeAngle = angle;
 8009b92:	4a21      	ldr	r2, [pc, #132]	; (8009c18 <RND_Init+0x90>)
 8009b94:	88fb      	ldrh	r3, [r7, #6]
 8009b96:	8153      	strh	r3, [r2, #10]

	g_RoundRecord.quat[0] = angle;
 8009b98:	4a1f      	ldr	r2, [pc, #124]	; (8009c18 <RND_Init+0x90>)
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	8013      	strh	r3, [r2, #0]
	g_RoundRecord.quat[1] = (g_RoundRecord.quat[0] + RES_QUADRANT) % (ANGLE_RESOLUTION);
 8009b9e:	4b1e      	ldr	r3, [pc, #120]	; (8009c18 <RND_Init+0x90>)
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba6:	425a      	negs	r2, r3
 8009ba8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009bac:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009bb0:	bf58      	it	pl
 8009bb2:	4253      	negpl	r3, r2
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	4b18      	ldr	r3, [pc, #96]	; (8009c18 <RND_Init+0x90>)
 8009bb8:	805a      	strh	r2, [r3, #2]
	g_RoundRecord.quat[2] = (g_RoundRecord.quat[1] + RES_QUADRANT) % (ANGLE_RESOLUTION);
 8009bba:	4b17      	ldr	r3, [pc, #92]	; (8009c18 <RND_Init+0x90>)
 8009bbc:	885b      	ldrh	r3, [r3, #2]
 8009bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc2:	425a      	negs	r2, r3
 8009bc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009bc8:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009bcc:	bf58      	it	pl
 8009bce:	4253      	negpl	r3, r2
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	4b11      	ldr	r3, [pc, #68]	; (8009c18 <RND_Init+0x90>)
 8009bd4:	809a      	strh	r2, [r3, #4]
	g_RoundRecord.quat[3] = (g_RoundRecord.quat[2] + RES_QUADRANT) % (ANGLE_RESOLUTION);
 8009bd6:	4b10      	ldr	r3, [pc, #64]	; (8009c18 <RND_Init+0x90>)
 8009bd8:	889b      	ldrh	r3, [r3, #4]
 8009bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bde:	425a      	negs	r2, r3
 8009be0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009be4:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009be8:	bf58      	it	pl
 8009bea:	4253      	negpl	r3, r2
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <RND_Init+0x90>)
 8009bf0:	80da      	strh	r2, [r3, #6]
	g_RoundRecord.quat[4] = (angle) % (ANGLE_RESOLUTION);
 8009bf2:	88fb      	ldrh	r3, [r7, #6]
 8009bf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <RND_Init+0x90>)
 8009bfc:	811a      	strh	r2, [r3, #8]

	// 4象限, homeAngle 设置为第0象限
	g_RoundRecord.quadRant = 0;
 8009bfe:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <RND_Init+0x90>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	81da      	strh	r2, [r3, #14]

	// 初始象限增加值为0
	g_RoundRecord.RantInc = 0;
 8009c04:	4b04      	ldr	r3, [pc, #16]	; (8009c18 <RND_Init+0x90>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	819a      	strh	r2, [r3, #12]
}
 8009c0a:	bf00      	nop
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	20000ad0 	.word	0x20000ad0

08009c1c <RND_Input>:

void RND_Input(uint16_t angle)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	80fb      	strh	r3, [r7, #6]
	// 当前在第几象限
	int16_t rant = -1;
 8009c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c2a:	81fb      	strh	r3, [r7, #14]

	for (int16_t i = 0; i < 4; i++){
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	81bb      	strh	r3, [r7, #12]
 8009c30:	e03e      	b.n	8009cb0 <RND_Input+0x94>
		if (angle >= g_RoundRecord.quat[i] && angle < g_RoundRecord.quat[i+1]){
 8009c32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c36:	4a56      	ldr	r2, [pc, #344]	; (8009d90 <RND_Input+0x174>)
 8009c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c3c:	88fa      	ldrh	r2, [r7, #6]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d30b      	bcc.n	8009c5a <RND_Input+0x3e>
 8009c42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	4a51      	ldr	r2, [pc, #324]	; (8009d90 <RND_Input+0x174>)
 8009c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c4e:	88fa      	ldrh	r2, [r7, #6]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d202      	bcs.n	8009c5a <RND_Input+0x3e>
			rant = i;
 8009c54:	89bb      	ldrh	r3, [r7, #12]
 8009c56:	81fb      	strh	r3, [r7, #14]
			break;
 8009c58:	e02e      	b.n	8009cb8 <RND_Input+0x9c>
		}

		if (g_RoundRecord.quat[i] > g_RoundRecord.quat[i+1]){
 8009c5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c5e:	4a4c      	ldr	r2, [pc, #304]	; (8009d90 <RND_Input+0x174>)
 8009c60:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8009c64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	4949      	ldr	r1, [pc, #292]	; (8009d90 <RND_Input+0x174>)
 8009c6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d917      	bls.n	8009ca4 <RND_Input+0x88>
			if ((angle >= g_RoundRecord.quat[i] && angle <= ANGLE_RESOLUTION) ||
 8009c74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c78:	4a45      	ldr	r2, [pc, #276]	; (8009d90 <RND_Input+0x174>)
 8009c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c7e:	88fa      	ldrh	r2, [r7, #6]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d303      	bcc.n	8009c8c <RND_Input+0x70>
 8009c84:	88fb      	ldrh	r3, [r7, #6]
 8009c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c8a:	d908      	bls.n	8009c9e <RND_Input+0x82>
				(angle >= 0 && angle < g_RoundRecord.quat[i+1])){
 8009c8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c90:	3301      	adds	r3, #1
 8009c92:	4a3f      	ldr	r2, [pc, #252]	; (8009d90 <RND_Input+0x174>)
 8009c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			if ((angle >= g_RoundRecord.quat[i] && angle <= ANGLE_RESOLUTION) ||
 8009c98:	88fa      	ldrh	r2, [r7, #6]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d202      	bcs.n	8009ca4 <RND_Input+0x88>
				rant = i;
 8009c9e:	89bb      	ldrh	r3, [r7, #12]
 8009ca0:	81fb      	strh	r3, [r7, #14]
				break;
 8009ca2:	e009      	b.n	8009cb8 <RND_Input+0x9c>
	for (int16_t i = 0; i < 4; i++){
 8009ca4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	3301      	adds	r3, #1
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	81bb      	strh	r3, [r7, #12]
 8009cb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	ddbc      	ble.n	8009c32 <RND_Input+0x16>
			}
		}
	}

	if (abs(g_RoundRecord.quadRant - rant) == 2){
 8009cb8:	4b35      	ldr	r3, [pc, #212]	; (8009d90 <RND_Input+0x174>)
 8009cba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bfb8      	it	lt
 8009cca:	425b      	neglt	r3, r3
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d103      	bne.n	8009cd8 <RND_Input+0xbc>
		// 转速太快, 失步, 或角度数据读取不出
		printf("Lost steps too much.\n");
 8009cd0:	4830      	ldr	r0, [pc, #192]	; (8009d94 <RND_Input+0x178>)
 8009cd2:	f00d fd91 	bl	80177f8 <puts>
		return;
 8009cd6:	e058      	b.n	8009d8a <RND_Input+0x16e>
	}

	if (rant == -1) {
 8009cd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce0:	d107      	bne.n	8009cf2 <RND_Input+0xd6>
		printf("Not an effective angle, %d, home: %d\n", angle, g_RoundRecord.homeAngle);
 8009ce2:	88fb      	ldrh	r3, [r7, #6]
 8009ce4:	4a2a      	ldr	r2, [pc, #168]	; (8009d90 <RND_Input+0x174>)
 8009ce6:	8952      	ldrh	r2, [r2, #10]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	482b      	ldr	r0, [pc, #172]	; (8009d98 <RND_Input+0x17c>)
 8009cec:	f00d fcfe 	bl	80176ec <iprintf>
		return;
 8009cf0:	e04b      	b.n	8009d8a <RND_Input+0x16e>
	}

	// 计算象限增加值
	if (rant == g_RoundRecord.quadRant - 1)
 8009cf2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009cf6:	4b26      	ldr	r3, [pc, #152]	; (8009d90 <RND_Input+0x174>)
 8009cf8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d109      	bne.n	8009d16 <RND_Input+0xfa>
		g_RoundRecord.RantInc --;
 8009d02:	4b23      	ldr	r3, [pc, #140]	; (8009d90 <RND_Input+0x174>)
 8009d04:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	b21a      	sxth	r2, r3
 8009d10:	4b1f      	ldr	r3, [pc, #124]	; (8009d90 <RND_Input+0x174>)
 8009d12:	819a      	strh	r2, [r3, #12]
 8009d14:	e036      	b.n	8009d84 <RND_Input+0x168>
	else if (rant == g_RoundRecord.quadRant + 1)
 8009d16:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009d1a:	4b1d      	ldr	r3, [pc, #116]	; (8009d90 <RND_Input+0x174>)
 8009d1c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009d20:	3301      	adds	r3, #1
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d109      	bne.n	8009d3a <RND_Input+0x11e>
		g_RoundRecord.RantInc ++;
 8009d26:	4b1a      	ldr	r3, [pc, #104]	; (8009d90 <RND_Input+0x174>)
 8009d28:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	3301      	adds	r3, #1
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	b21a      	sxth	r2, r3
 8009d34:	4b16      	ldr	r3, [pc, #88]	; (8009d90 <RND_Input+0x174>)
 8009d36:	819a      	strh	r2, [r3, #12]
 8009d38:	e024      	b.n	8009d84 <RND_Input+0x168>
	else {
		if (g_RoundRecord.quadRant == 0 && rant == 3)
 8009d3a:	4b15      	ldr	r3, [pc, #84]	; (8009d90 <RND_Input+0x174>)
 8009d3c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10d      	bne.n	8009d60 <RND_Input+0x144>
 8009d44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d109      	bne.n	8009d60 <RND_Input+0x144>
			g_RoundRecord.RantInc --;
 8009d4c:	4b10      	ldr	r3, [pc, #64]	; (8009d90 <RND_Input+0x174>)
 8009d4e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	3b01      	subs	r3, #1
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	b21a      	sxth	r2, r3
 8009d5a:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <RND_Input+0x174>)
 8009d5c:	819a      	strh	r2, [r3, #12]
 8009d5e:	e011      	b.n	8009d84 <RND_Input+0x168>
		else if (g_RoundRecord.quadRant == 3 && rant == 0)
 8009d60:	4b0b      	ldr	r3, [pc, #44]	; (8009d90 <RND_Input+0x174>)
 8009d62:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d10c      	bne.n	8009d84 <RND_Input+0x168>
 8009d6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d108      	bne.n	8009d84 <RND_Input+0x168>
			g_RoundRecord.RantInc ++;
 8009d72:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <RND_Input+0x174>)
 8009d74:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	b21a      	sxth	r2, r3
 8009d80:	4b03      	ldr	r3, [pc, #12]	; (8009d90 <RND_Input+0x174>)
 8009d82:	819a      	strh	r2, [r3, #12]
	}

	// 象限设置
	g_RoundRecord.quadRant = rant;
 8009d84:	4a02      	ldr	r2, [pc, #8]	; (8009d90 <RND_Input+0x174>)
 8009d86:	89fb      	ldrh	r3, [r7, #14]
 8009d88:	81d3      	strh	r3, [r2, #14]
}
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	20000ad0 	.word	0x20000ad0
 8009d94:	08018a18 	.word	0x08018a18
 8009d98:	08018a30 	.word	0x08018a30

08009d9c <RND_GetCrossAngle>:

/*
 * 角度传感器，逆时针 角度增大
 * */
int32_t RND_GetCrossAngle(uint16_t angle)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b089      	sub	sp, #36	; 0x24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	80fb      	strh	r3, [r7, #6]
	int32_t delta;
	int32_t side;

	int32_t home   = g_RoundRecord.homeAngle;
 8009da6:	4b51      	ldr	r3, [pc, #324]	; (8009eec <RND_GetCrossAngle+0x150>)
 8009da8:	895b      	ldrh	r3, [r3, #10]
 8009daa:	613b      	str	r3, [r7, #16]
	int32_t homePi = (home + ANGLE_RESOLUTION / 2) % ANGLE_RESOLUTION;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009db2:	425a      	negs	r2, r3
 8009db4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009db8:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009dbc:	bf58      	it	pl
 8009dbe:	4253      	negpl	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]

	if (home > homePi) {
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	dd23      	ble.n	8009e12 <RND_GetCrossAngle+0x76>
		// home 在0点右边
		if ((angle >= 0 && angle < homePi) || (angle >= home && angle <= ANGLE_RESOLUTION)) {
 8009dca:	88fb      	ldrh	r3, [r7, #6]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	dc07      	bgt.n	8009de2 <RND_GetCrossAngle+0x46>
 8009dd2:	88fb      	ldrh	r3, [r7, #6]
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	dc13      	bgt.n	8009e02 <RND_GetCrossAngle+0x66>
 8009dda:	88fb      	ldrh	r3, [r7, #6]
 8009ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009de0:	d80f      	bhi.n	8009e02 <RND_GetCrossAngle+0x66>
			// angle 在 home的左边
			delta = (angle + ANGLE_RESOLUTION - home) % ANGLE_RESOLUTION;
 8009de2:	88fb      	ldrh	r3, [r7, #6]
 8009de4:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	425a      	negs	r2, r3
 8009dee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009df2:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009df6:	bf58      	it	pl
 8009df8:	4253      	negpl	r3, r2
 8009dfa:	61fb      	str	r3, [r7, #28]
			side = 1;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	61bb      	str	r3, [r7, #24]
 8009e00:	e026      	b.n	8009e50 <RND_GetCrossAngle+0xb4>
		}else {
			// angle 在 home的左边
			delta = home - angle;
 8009e02:	88fb      	ldrh	r3, [r7, #6]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	61fb      	str	r3, [r7, #28]
			side = -1;
 8009e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0e:	61bb      	str	r3, [r7, #24]
 8009e10:	e01e      	b.n	8009e50 <RND_GetCrossAngle+0xb4>
		}
	}else {
		// home 在 0 点的左边
		if (angle >= home && angle < homePi) {
 8009e12:	88fb      	ldrh	r3, [r7, #6]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	dc0a      	bgt.n	8009e30 <RND_GetCrossAngle+0x94>
 8009e1a:	88fb      	ldrh	r3, [r7, #6]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	dd06      	ble.n	8009e30 <RND_GetCrossAngle+0x94>
			// angle 在 home的左边
			delta = angle - home;
 8009e22:	88fa      	ldrh	r2, [r7, #6]
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	61fb      	str	r3, [r7, #28]
			side = 1;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	61bb      	str	r3, [r7, #24]
 8009e2e:	e00f      	b.n	8009e50 <RND_GetCrossAngle+0xb4>
		}else {
			// angle 在 home的右边
			delta = (home - angle + ANGLE_RESOLUTION) % ANGLE_RESOLUTION;
 8009e30:	88fb      	ldrh	r3, [r7, #6]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8009e3a:	425a      	negs	r2, r3
 8009e3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009e40:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8009e44:	bf58      	it	pl
 8009e46:	4253      	negpl	r3, r2
 8009e48:	61fb      	str	r3, [r7, #28]
			side = -1;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4e:	61bb      	str	r3, [r7, #24]
		}
	}

	delta *= side;
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	fb02 f303 	mul.w	r3, r2, r3
 8009e58:	61fb      	str	r3, [r7, #28]

	int32_t round;
	if (g_RoundRecord.RantInc >= 0){
 8009e5a:	4b24      	ldr	r3, [pc, #144]	; (8009eec <RND_GetCrossAngle+0x150>)
 8009e5c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	db09      	blt.n	8009e78 <RND_GetCrossAngle+0xdc>
		round = g_RoundRecord.RantInc / 4;
 8009e64:	4b21      	ldr	r3, [pc, #132]	; (8009eec <RND_GetCrossAngle+0x150>)
 8009e66:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	da00      	bge.n	8009e70 <RND_GetCrossAngle+0xd4>
 8009e6e:	3303      	adds	r3, #3
 8009e70:	109b      	asrs	r3, r3, #2
 8009e72:	b21b      	sxth	r3, r3
 8009e74:	617b      	str	r3, [r7, #20]
 8009e76:	e008      	b.n	8009e8a <RND_GetCrossAngle+0xee>
	}else{
		round = (g_RoundRecord.RantInc + 1) / 4;
 8009e78:	4b1c      	ldr	r3, [pc, #112]	; (8009eec <RND_GetCrossAngle+0x150>)
 8009e7a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	da00      	bge.n	8009e86 <RND_GetCrossAngle+0xea>
 8009e84:	3303      	adds	r3, #3
 8009e86:	109b      	asrs	r3, r3, #2
 8009e88:	617b      	str	r3, [r7, #20]
	}

	if (g_RoundRecord.RantInc > 0) {
 8009e8a:	4b18      	ldr	r3, [pc, #96]	; (8009eec <RND_GetCrossAngle+0x150>)
 8009e8c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	dd0f      	ble.n	8009eb4 <RND_GetCrossAngle+0x118>
		if (delta >= 0) {
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	db05      	blt.n	8009ea6 <RND_GetCrossAngle+0x10a>
			delta += round * ANGLE_RESOLUTION;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	039b      	lsls	r3, r3, #14
 8009e9e:	69fa      	ldr	r2, [r7, #28]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	61fb      	str	r3, [r7, #28]
 8009ea4:	e01b      	b.n	8009ede <RND_GetCrossAngle+0x142>
		}else {
			delta += (round + 1)* ANGLE_RESOLUTION;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	039b      	lsls	r3, r3, #14
 8009eac:	69fa      	ldr	r2, [r7, #28]
 8009eae:	4413      	add	r3, r2
 8009eb0:	61fb      	str	r3, [r7, #28]
 8009eb2:	e014      	b.n	8009ede <RND_GetCrossAngle+0x142>
		}
	}else if (g_RoundRecord.RantInc < -1) {
 8009eb4:	4b0d      	ldr	r3, [pc, #52]	; (8009eec <RND_GetCrossAngle+0x150>)
 8009eb6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ebe:	da0e      	bge.n	8009ede <RND_GetCrossAngle+0x142>
		if (delta < 0){
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	da05      	bge.n	8009ed2 <RND_GetCrossAngle+0x136>
			delta += round * ANGLE_RESOLUTION;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	039b      	lsls	r3, r3, #14
 8009eca:	69fa      	ldr	r2, [r7, #28]
 8009ecc:	4413      	add	r3, r2
 8009ece:	61fb      	str	r3, [r7, #28]
 8009ed0:	e005      	b.n	8009ede <RND_GetCrossAngle+0x142>
		}else {
			delta += (round - 1)* ANGLE_RESOLUTION;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	039b      	lsls	r3, r3, #14
 8009ed8:	69fa      	ldr	r2, [r7, #28]
 8009eda:	4413      	add	r3, r2
 8009edc:	61fb      	str	r3, [r7, #28]
		}
	}

	return delta;
 8009ede:	69fb      	ldr	r3, [r7, #28]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3724      	adds	r7, #36	; 0x24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	20000ad0 	.word	0x20000ad0

08009ef0 <RND_GetIncSteps>:

	return round;
}

int32_t RND_GetIncSteps(uint16_t angle, float ms)
{
 8009ef0:	b5b0      	push	{r4, r5, r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	ed87 0a00 	vstr	s0, [r7]
 8009efc:	80fb      	strh	r3, [r7, #6]
	float ca = (float)RND_GetCrossAngle(angle);
 8009efe:	88fb      	ldrh	r3, [r7, #6]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7ff ff4b 	bl	8009d9c <RND_GetCrossAngle>
 8009f06:	ee07 0a90 	vmov	s15, r0
 8009f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f0e:	edc7 7a03 	vstr	s15, [r7, #12]

	// 一圈 = 200 * 细分，
	int32_t steps = ca * (200.0 * ms) / (float)ANGLE_RESOLUTION;
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7f6 fb18 	bl	8000548 <__aeabi_f2d>
 8009f18:	4604      	mov	r4, r0
 8009f1a:	460d      	mov	r5, r1
 8009f1c:	6838      	ldr	r0, [r7, #0]
 8009f1e:	f7f6 fb13 	bl	8000548 <__aeabi_f2d>
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	4b0f      	ldr	r3, [pc, #60]	; (8009f64 <RND_GetIncSteps+0x74>)
 8009f28:	f7f6 fb66 	bl	80005f8 <__aeabi_dmul>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4620      	mov	r0, r4
 8009f32:	4629      	mov	r1, r5
 8009f34:	f7f6 fb60 	bl	80005f8 <__aeabi_dmul>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4619      	mov	r1, r3
 8009f40:	f04f 0200 	mov.w	r2, #0
 8009f44:	4b08      	ldr	r3, [pc, #32]	; (8009f68 <RND_GetIncSteps+0x78>)
 8009f46:	f7f6 fc81 	bl	800084c <__aeabi_ddiv>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4610      	mov	r0, r2
 8009f50:	4619      	mov	r1, r3
 8009f52:	f7f6 fdeb 	bl	8000b2c <__aeabi_d2iz>
 8009f56:	4603      	mov	r3, r0
 8009f58:	60bb      	str	r3, [r7, #8]
	return steps;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bdb0      	pop	{r4, r5, r7, pc}
 8009f64:	40690000 	.word	0x40690000
 8009f68:	40d00000 	.word	0x40d00000

08009f6c <JNT_dbgOutput>:

	return paramsSz;
}

void JNT_dbgOutput(char* str, size_t cnt)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
	  msg.type = (uint8_t)'-'; //MSG_STRING_TYPE;
	  msg.code = (uint8_t)'-'; //JNT_LOGFEEDBACK;
	  msg.len  = (uint8_t)'-'; //cnt;
	  msg.crc  = (uint8_t)'-'; //msg.len ^ 0x1E;
      */
	  msg.type = MSG_STRING_TYPE;
 8009f76:	2322      	movs	r3, #34	; 0x22
 8009f78:	733b      	strb	r3, [r7, #12]
	  msg.code = JNT_LOGFEEDBACK;
 8009f7a:	23f1      	movs	r3, #241	; 0xf1
 8009f7c:	737b      	strb	r3, [r7, #13]
	  msg.len  = cnt;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	73bb      	strb	r3, [r7, #14]
	  msg.crc  = msg.len ^ 0x1E;
 8009f84:	7bbb      	ldrb	r3, [r7, #14]
 8009f86:	f083 031e 	eor.w	r3, r3, #30
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	73fb      	strb	r3, [r7, #15]

	  FUART_sendMsg(&msg, (uint8_t*)str, msg.len);
 8009f8e:	7bbb      	ldrb	r3, [r7, #14]
 8009f90:	461a      	mov	r2, r3
 8009f92:	f107 030c 	add.w	r3, r7, #12
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f003 ff15 	bl	800ddc8 <FUART_sendMsg>
	//}
}
 8009f9e:	bf00      	nop
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <JNT_registerDriver>:
{
	g_driver = driver;
}
#elif (USE_TMC5160 == 1)
void JNT_registerDriver(TMC5160Stepper* driver)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
	g_driver = driver;
 8009fb0:	4a04      	ldr	r2, [pc, #16]	; (8009fc4 <JNT_registerDriver+0x1c>)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6013      	str	r3, [r2, #0]
}
 8009fb6:	bf00      	nop
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20000ae0 	.word	0x20000ae0

08009fc8 <PIDProfile_Step>:
/* External outputs (root outports fed by signals with default storage) */
PIDExtY rtPIDY;

/* Model step function */
void PIDProfile_Step(real32_T ts, real32_T curPos)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	ed87 0a01 	vstr	s0, [r7, #4]
 8009fd2:	edc7 0a00 	vstr	s1, [r7]

  /* Sum: '<Root>/Sum' incorporates:
   *  Inport: '<Root>/CurrentPos'
   *  Inport: '<Root>/TargetPos'
   */
  rtb_perr = rtPIDU.TargetPos - curPos;
 8009fd6:	4b40      	ldr	r3, [pc, #256]	; (800a0d8 <PIDProfile_Step+0x110>)
 8009fd8:	ed93 7a00 	vldr	s14, [r3]
 8009fdc:	edd7 7a00 	vldr	s15, [r7]
 8009fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fe4:	edc7 7a04 	vstr	s15, [r7, #16]
  /* Gain: '<S36>/Filter Coefficient' incorporates:
   *  DiscreteIntegrator: '<S28>/Filter'
   *  Gain: '<S27>/Derivative Gain'
   *  Sum: '<S28>/SumD'
   */
  rtb_FilterCoefficient = (rtPID.Kd * rtb_perr - rtPIDDW.Filter_DSTATE) * rtPID.DerFilter;
 8009fe8:	4b3c      	ldr	r3, [pc, #240]	; (800a0dc <PIDProfile_Step+0x114>)
 8009fea:	ed93 7a02 	vldr	s14, [r3, #8]
 8009fee:	edd7 7a04 	vldr	s15, [r7, #16]
 8009ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ff6:	4b3a      	ldr	r3, [pc, #232]	; (800a0e0 <PIDProfile_Step+0x118>)
 8009ff8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009ffc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a000:	4b36      	ldr	r3, [pc, #216]	; (800a0dc <PIDProfile_Step+0x114>)
 800a002:	edd3 7a03 	vldr	s15, [r3, #12]
 800a006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a00a:	edc7 7a03 	vstr	s15, [r7, #12]
  /* Outport: '<Root>/CmdPos' incorporates:
   *  DiscreteIntegrator: '<S33>/Integrator'
   *  Gain: '<S38>/Proportional Gain'
   *  Sum: '<S42>/Sum'
   */
  rtPIDY.CmdPos = (rtPID.Kp * rtb_perr + rtPIDDW.Integrator_DSTATE) +
 800a00e:	4b33      	ldr	r3, [pc, #204]	; (800a0dc <PIDProfile_Step+0x114>)
 800a010:	ed93 7a00 	vldr	s14, [r3]
 800a014:	edd7 7a04 	vldr	s15, [r7, #16]
 800a018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a01c:	4b30      	ldr	r3, [pc, #192]	; (800a0e0 <PIDProfile_Step+0x118>)
 800a01e:	edd3 7a00 	vldr	s15, [r3]
 800a022:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a026:	edd7 7a03 	vldr	s15, [r7, #12]
 800a02a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a02e:	4b2d      	ldr	r3, [pc, #180]	; (800a0e4 <PIDProfile_Step+0x11c>)
 800a030:	edc3 7a00 	vstr	s15, [r3]
	rtb_FilterCoefficient;

  /* Update for DiscreteIntegrator: '<S33>/Integrator' incorporates:
   *  Gain: '<S30>/Integral Gain'
   */
  rtPIDDW.Integrator_DSTATE += rtPID.Ki * rtb_perr * ts;
 800a034:	4b2a      	ldr	r3, [pc, #168]	; (800a0e0 <PIDProfile_Step+0x118>)
 800a036:	ed93 7a00 	vldr	s14, [r3]
 800a03a:	4b28      	ldr	r3, [pc, #160]	; (800a0dc <PIDProfile_Step+0x114>)
 800a03c:	edd3 6a01 	vldr	s13, [r3, #4]
 800a040:	edd7 7a04 	vldr	s15, [r7, #16]
 800a044:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a048:	edd7 7a01 	vldr	s15, [r7, #4]
 800a04c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a050:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a054:	4b22      	ldr	r3, [pc, #136]	; (800a0e0 <PIDProfile_Step+0x118>)
 800a056:	edc3 7a00 	vstr	s15, [r3]

  /* Update for DiscreteIntegrator: '<S28>/Filter' */
  rtPIDDW.Filter_DSTATE += ts * rtb_FilterCoefficient;
 800a05a:	4b21      	ldr	r3, [pc, #132]	; (800a0e0 <PIDProfile_Step+0x118>)
 800a05c:	ed93 7a01 	vldr	s14, [r3, #4]
 800a060:	edd7 6a01 	vldr	s13, [r7, #4]
 800a064:	edd7 7a03 	vldr	s15, [r7, #12]
 800a068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a06c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a070:	4b1b      	ldr	r3, [pc, #108]	; (800a0e0 <PIDProfile_Step+0x118>)
 800a072:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Calculate the cmd velocity*/
  real32_T cv = rtb_perr / ts;
 800a076:	edd7 6a04 	vldr	s13, [r7, #16]
 800a07a:	ed97 7a01 	vldr	s14, [r7, #4]
 800a07e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a082:	edc7 7a05 	vstr	s15, [r7, #20]

  if (cv > rtPIDU.MaxVel)
 800a086:	4b14      	ldr	r3, [pc, #80]	; (800a0d8 <PIDProfile_Step+0x110>)
 800a088:	edd3 7a01 	vldr	s15, [r3, #4]
 800a08c:	ed97 7a05 	vldr	s14, [r7, #20]
 800a090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a098:	dd02      	ble.n	800a0a0 <PIDProfile_Step+0xd8>
	  cv = rtPIDU.MaxVel;
 800a09a:	4b0f      	ldr	r3, [pc, #60]	; (800a0d8 <PIDProfile_Step+0x110>)
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	617b      	str	r3, [r7, #20]

  if (cv < -rtPIDU.MaxVel)
 800a0a0:	4b0d      	ldr	r3, [pc, #52]	; (800a0d8 <PIDProfile_Step+0x110>)
 800a0a2:	edd3 7a01 	vldr	s15, [r3, #4]
 800a0a6:	eef1 7a67 	vneg.f32	s15, s15
 800a0aa:	ed97 7a05 	vldr	s14, [r7, #20]
 800a0ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b6:	d506      	bpl.n	800a0c6 <PIDProfile_Step+0xfe>
	  cv = -rtPIDU.MaxVel;
 800a0b8:	4b07      	ldr	r3, [pc, #28]	; (800a0d8 <PIDProfile_Step+0x110>)
 800a0ba:	edd3 7a01 	vldr	s15, [r3, #4]
 800a0be:	eef1 7a67 	vneg.f32	s15, s15
 800a0c2:	edc7 7a05 	vstr	s15, [r7, #20]

  rtPIDY.CmdVel = cv;
 800a0c6:	4a07      	ldr	r2, [pc, #28]	; (800a0e4 <PIDProfile_Step+0x11c>)
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	6053      	str	r3, [r2, #4]
}
 800a0cc:	bf00      	nop
 800a0ce:	371c      	adds	r7, #28
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	20000afc 	.word	0x20000afc
 800a0dc:	20000ae4 	.word	0x20000ae4
 800a0e0:	20000af4 	.word	0x20000af4
 800a0e4:	20000b0c 	.word	0x20000b0c

0800a0e8 <PIDProfile_Start>:

void PIDProfile_Start(real32_T targetPos, real32_T maxVel, real32_T maxAcce, real32_T maxJerk)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	ed87 0a03 	vstr	s0, [r7, #12]
 800a0f2:	edc7 0a02 	vstr	s1, [r7, #8]
 800a0f6:	ed87 1a01 	vstr	s2, [r7, #4]
 800a0fa:	edc7 1a00 	vstr	s3, [r7]
	rtPIDU.TargetPos = targetPos;
 800a0fe:	4a0f      	ldr	r2, [pc, #60]	; (800a13c <PIDProfile_Start+0x54>)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6013      	str	r3, [r2, #0]
	rtPIDU.MaxVel    = maxVel;
 800a104:	4a0d      	ldr	r2, [pc, #52]	; (800a13c <PIDProfile_Start+0x54>)
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	6053      	str	r3, [r2, #4]
	rtPIDU.MaxAcce   = maxAcce;
 800a10a:	4a0c      	ldr	r2, [pc, #48]	; (800a13c <PIDProfile_Start+0x54>)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6093      	str	r3, [r2, #8]
	rtPIDU.MaxJerk   = maxJerk;
 800a110:	4a0a      	ldr	r2, [pc, #40]	; (800a13c <PIDProfile_Start+0x54>)
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	60d3      	str	r3, [r2, #12]

	/* Initialize the output value*/
	rtPIDY.CmdPos = 0.0f;
 800a116:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <PIDProfile_Start+0x58>)
 800a118:	f04f 0200 	mov.w	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]
	rtPIDY.CmdVel = 0.0f;
 800a11e:	4b08      	ldr	r3, [pc, #32]	; (800a140 <PIDProfile_Start+0x58>)
 800a120:	f04f 0200 	mov.w	r2, #0
 800a124:	605a      	str	r2, [r3, #4]
	rtPIDY.CmdAcce = 0.0f;
 800a126:	4b06      	ldr	r3, [pc, #24]	; (800a140 <PIDProfile_Start+0x58>)
 800a128:	f04f 0200 	mov.w	r2, #0
 800a12c:	609a      	str	r2, [r3, #8]

}
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	20000afc 	.word	0x20000afc
 800a140:	20000b0c 	.word	0x20000b0c

0800a144 <PIDProfile_Initialize>:

void PIDProfile_Initialize(real32_T Kp, real32_T Ki, real32_T Kd, real32_T dc)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	ed87 0a03 	vstr	s0, [r7, #12]
 800a14e:	edc7 0a02 	vstr	s1, [r7, #8]
 800a152:	ed87 1a01 	vstr	s2, [r7, #4]
 800a156:	edc7 1a00 	vstr	s3, [r7]
	rtPID.Kp = Kp;
 800a15a:	4a09      	ldr	r2, [pc, #36]	; (800a180 <PIDProfile_Initialize+0x3c>)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6013      	str	r3, [r2, #0]
	rtPID.Ki = Ki;
 800a160:	4a07      	ldr	r2, [pc, #28]	; (800a180 <PIDProfile_Initialize+0x3c>)
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	6053      	str	r3, [r2, #4]
	rtPID.Kd = Kd;
 800a166:	4a06      	ldr	r2, [pc, #24]	; (800a180 <PIDProfile_Initialize+0x3c>)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6093      	str	r3, [r2, #8]
	rtPID.DerFilter = dc;
 800a16c:	4a04      	ldr	r2, [pc, #16]	; (800a180 <PIDProfile_Initialize+0x3c>)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	60d3      	str	r3, [r2, #12]
}
 800a172:	bf00      	nop
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	20000ae4 	.word	0x20000ae4

0800a184 <MT_ConvertStepsToPos>:
	uint32_t estimate_time;  // ms
	uint32_t use_time;       // ms
}MT_ResultBlock;

int32_t MT_ConvertStepsToPos(int32_t steps)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
	int32_t pos = (steps - g_MotionDriveHandle.homePoint) / ((g_MotionDriveHandle.cwDir==g_MotionDriveHandle.switchdir)?-1:1);
 800a18c:	4b0c      	ldr	r3, [pc, #48]	; (800a1c0 <MT_ConvertStepsToPos+0x3c>)
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	1ad2      	subs	r2, r2, r3
 800a194:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <MT_ConvertStepsToPos+0x3c>)
 800a196:	f993 1035 	ldrsb.w	r1, [r3, #53]	; 0x35
 800a19a:	4b09      	ldr	r3, [pc, #36]	; (800a1c0 <MT_ConvertStepsToPos+0x3c>)
 800a19c:	f993 3037 	ldrsb.w	r3, [r3, #55]	; 0x37
 800a1a0:	4299      	cmp	r1, r3
 800a1a2:	d102      	bne.n	800a1aa <MT_ConvertStepsToPos+0x26>
 800a1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a8:	e000      	b.n	800a1ac <MT_ConvertStepsToPos+0x28>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	fb92 f3f3 	sdiv	r3, r2, r3
 800a1b0:	60fb      	str	r3, [r7, #12]
	return pos;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	20000b18 	.word	0x20000b18

0800a1c4 <MT_reset>:

void MT_reset()
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
	g_MotionDriveHandle.target = MOTION_INVAILD_POS;
 800a1c8:	4b22      	ldr	r3, [pc, #136]	; (800a254 <MT_reset+0x90>)
 800a1ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a1ce:	601a      	str	r2, [r3, #0]

	g_MotionDriveHandle.switchPoint = 0;
 800a1d0:	4b20      	ldr	r3, [pc, #128]	; (800a254 <MT_reset+0x90>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	605a      	str	r2, [r3, #4]
	g_MotionDriveHandle.homePoint = 0;
 800a1d6:	4b1f      	ldr	r3, [pc, #124]	; (800a254 <MT_reset+0x90>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	609a      	str	r2, [r3, #8]

	g_MotionDriveHandle.adMode = MT_ADMode_Normal;
 800a1dc:	4b1d      	ldr	r3, [pc, #116]	; (800a254 <MT_reset+0x90>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	731a      	strb	r2, [r3, #12]
	g_MotionDriveHandle.lock   = 0;
 800a1e2:	4b1c      	ldr	r3, [pc, #112]	; (800a254 <MT_reset+0x90>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	g_MotionDriveHandle.posQueueMode = MT_PQ_SetAck;
 800a1ea:	4b1a      	ldr	r3, [pc, #104]	; (800a254 <MT_reset+0x90>)
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	735a      	strb	r2, [r3, #13]
	g_MotionDriveHandle.usePID = 0;
 800a1f0:	4b18      	ldr	r3, [pc, #96]	; (800a254 <MT_reset+0x90>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	/*Default settings*/
	g_MotionDriveHandle.reachWindow = 32;
 800a1f8:	4b16      	ldr	r3, [pc, #88]	; (800a254 <MT_reset+0x90>)
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	611a      	str	r2, [r3, #16]
	g_MotionDriveHandle.win1_8 = 4;
 800a1fe:	4b15      	ldr	r3, [pc, #84]	; (800a254 <MT_reset+0x90>)
 800a200:	2204      	movs	r2, #4
 800a202:	615a      	str	r2, [r3, #20]
	g_MotionDriveHandle.win1_4 = 8;
 800a204:	4b13      	ldr	r3, [pc, #76]	; (800a254 <MT_reset+0x90>)
 800a206:	2208      	movs	r2, #8
 800a208:	619a      	str	r2, [r3, #24]
	g_MotionDriveHandle.win1_2 = 16;
 800a20a:	4b12      	ldr	r3, [pc, #72]	; (800a254 <MT_reset+0x90>)
 800a20c:	2210      	movs	r2, #16
 800a20e:	61da      	str	r2, [r3, #28]

	/*Initialize the profile parameters*/
	MT_setProfile(&g_NodeDriveProfile);
 800a210:	4811      	ldr	r0, [pc, #68]	; (800a258 <MT_reset+0x94>)
 800a212:	f000 f823 	bl	800a25c <MT_setProfile>

	g_MotionDriveHandle.lock = 0;
 800a216:	4b0f      	ldr	r3, [pc, #60]	; (800a254 <MT_reset+0x90>)
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	/*Reset the queue and list*/
	if (g_MotionDriveHandle.msgQueue){
 800a21e:	4b0d      	ldr	r3, [pc, #52]	; (800a254 <MT_reset+0x90>)
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	2b00      	cmp	r3, #0
 800a224:	d005      	beq.n	800a232 <MT_reset+0x6e>
		xQueueReset( g_MotionDriveHandle.msgQueue);
 800a226:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <MT_reset+0x90>)
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	2100      	movs	r1, #0
 800a22c:	4618      	mov	r0, r3
 800a22e:	f009 f95b 	bl	80134e8 <xQueueGenericReset>
	}

	if (g_MotionDriveHandle.posQueue){
 800a232:	4b08      	ldr	r3, [pc, #32]	; (800a254 <MT_reset+0x90>)
 800a234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a236:	2b00      	cmp	r3, #0
 800a238:	d005      	beq.n	800a246 <MT_reset+0x82>
		xQueueReset( g_MotionDriveHandle.posQueue);
 800a23a:	4b06      	ldr	r3, [pc, #24]	; (800a254 <MT_reset+0x90>)
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	2100      	movs	r1, #0
 800a240:	4618      	mov	r0, r3
 800a242:	f009 f951 	bl	80134e8 <xQueueGenericReset>
	}

	g_MotionDriveHandle.state = MT_IDLE;
 800a246:	4b03      	ldr	r3, [pc, #12]	; (800a254 <MT_reset+0x90>)
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 800a24e:	bf00      	nop
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000b18 	.word	0x20000b18
 800a258:	20000a94 	.word	0x20000a94

0800a25c <MT_setProfile>:

void MT_setProfile(Node_DriveProfile_t* profile)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
	g_MotionDriveHandle.cwDir = profile->motordir;   // default 0
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	b25a      	sxtb	r2, r3
 800a26a:	4b0f      	ldr	r3, [pc, #60]	; (800a2a8 <MT_setProfile+0x4c>)
 800a26c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	g_MotionDriveHandle.ccwDir = (g_MotionDriveHandle.cwDir == 1) ? 0 : 1;  // default 1
 800a270:	4b0d      	ldr	r3, [pc, #52]	; (800a2a8 <MT_setProfile+0x4c>)
 800a272:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 800a276:	2b01      	cmp	r3, #1
 800a278:	bf14      	ite	ne
 800a27a:	2301      	movne	r3, #1
 800a27c:	2300      	moveq	r3, #0
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	b25a      	sxtb	r2, r3
 800a282:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <MT_setProfile+0x4c>)
 800a284:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	g_MotionDriveHandle.switchdir = profile->switchdir; // default 0
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	785b      	ldrb	r3, [r3, #1]
 800a28c:	b25a      	sxtb	r2, r3
 800a28e:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <MT_setProfile+0x4c>)
 800a290:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	g_MotionDriveHandle.speed = profile->speed;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	4a03      	ldr	r2, [pc, #12]	; (800a2a8 <MT_setProfile+0x4c>)
 800a29a:	6213      	str	r3, [r2, #32]
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	20000b18 	.word	0x20000b18

0800a2ac <MT_Init>:

void MT_Init(QueueHandle_t msgQueue, QueueHandle_t posQueue, QueueHandle_t statusQueue)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
	MT_reset();
 800a2b8:	f7ff ff84 	bl	800a1c4 <MT_reset>
	g_MotionDriveHandle.msgQueue = msgQueue;
 800a2bc:	4a0f      	ldr	r2, [pc, #60]	; (800a2fc <MT_Init+0x50>)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6253      	str	r3, [r2, #36]	; 0x24
	g_MotionDriveHandle.posQueue = posQueue;
 800a2c2:	4a0e      	ldr	r2, [pc, #56]	; (800a2fc <MT_Init+0x50>)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	6293      	str	r3, [r2, #40]	; 0x28
	g_MotionDriveHandle.statusQueue = statusQueue;
 800a2c8:	4a0c      	ldr	r2, [pc, #48]	; (800a2fc <MT_Init+0x50>)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	62d3      	str	r3, [r2, #44]	; 0x2c

	g_MotionRequest.direction = Stepper_GetDir();
 800a2ce:	f001 fccb 	bl	800bc68 <Stepper_GetDir>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <MT_Init+0x54>)
 800a2d8:	731a      	strb	r2, [r3, #12]

	/* Initialize position profile model*/
	PosProfile_Initialize();
 800a2da:	f001 fa53 	bl	800b784 <PosProfile_Initialize>

	/* Initialize pid profile*/
	PIDProfile_Initialize(0.49f, 1.21f, -0.28f, 1.76f);
 800a2de:	eddf 1a09 	vldr	s3, [pc, #36]	; 800a304 <MT_Init+0x58>
 800a2e2:	ed9f 1a09 	vldr	s2, [pc, #36]	; 800a308 <MT_Init+0x5c>
 800a2e6:	eddf 0a09 	vldr	s1, [pc, #36]	; 800a30c <MT_Init+0x60>
 800a2ea:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a310 <MT_Init+0x64>
 800a2ee:	f7ff ff29 	bl	800a144 <PIDProfile_Initialize>
}
 800a2f2:	bf00      	nop
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20000b18 	.word	0x20000b18
 800a300:	20000b58 	.word	0x20000b58
 800a304:	3fe147ae 	.word	0x3fe147ae
 800a308:	be8f5c29 	.word	0xbe8f5c29
 800a30c:	3f9ae148 	.word	0x3f9ae148
 800a310:	3efae148 	.word	0x3efae148

0800a314 <MT_setReachCallback>:

void MT_setReachCallback(void (*pFunct)(int32_t position))
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
	g_MotionDriveHandle.reachCB = pFunct;
 800a31c:	4a04      	ldr	r2, [pc, #16]	; (800a330 <MT_setReachCallback+0x1c>)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6313      	str	r3, [r2, #48]	; 0x30
}
 800a322:	bf00      	nop
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	20000b18 	.word	0x20000b18

0800a334 <MT_setReachWindow>:
	vPortExitCritical();
}

/*32 multiples number for window is the best*/
void MT_setReachWindow(int32_t window)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
	vPortEnterCritical();
 800a33c:	f00b fd32 	bl	8015da4 <vPortEnterCritical>
	g_MotionDriveHandle.reachWindow = window;
 800a340:	4a0f      	ldr	r2, [pc, #60]	; (800a380 <MT_setReachWindow+0x4c>)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6113      	str	r3, [r2, #16]
	g_MotionDriveHandle.win1_8 = window / 8;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	da00      	bge.n	800a34e <MT_setReachWindow+0x1a>
 800a34c:	3307      	adds	r3, #7
 800a34e:	10db      	asrs	r3, r3, #3
 800a350:	461a      	mov	r2, r3
 800a352:	4b0b      	ldr	r3, [pc, #44]	; (800a380 <MT_setReachWindow+0x4c>)
 800a354:	615a      	str	r2, [r3, #20]
	g_MotionDriveHandle.win1_4 = window / 4;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	da00      	bge.n	800a35e <MT_setReachWindow+0x2a>
 800a35c:	3303      	adds	r3, #3
 800a35e:	109b      	asrs	r3, r3, #2
 800a360:	461a      	mov	r2, r3
 800a362:	4b07      	ldr	r3, [pc, #28]	; (800a380 <MT_setReachWindow+0x4c>)
 800a364:	619a      	str	r2, [r3, #24]
	g_MotionDriveHandle.win1_2 = window / 2;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	0fda      	lsrs	r2, r3, #31
 800a36a:	4413      	add	r3, r2
 800a36c:	105b      	asrs	r3, r3, #1
 800a36e:	461a      	mov	r2, r3
 800a370:	4b03      	ldr	r3, [pc, #12]	; (800a380 <MT_setReachWindow+0x4c>)
 800a372:	61da      	str	r2, [r3, #28]
	vPortExitCritical();
 800a374:	f00b fd46 	bl	8015e04 <vPortExitCritical>
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	20000b18 	.word	0x20000b18

0800a384 <MT_setSpeed>:

void MT_setSpeed(uint32_t speed)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
	vPortEnterCritical();
 800a38c:	f00b fd0a 	bl	8015da4 <vPortEnterCritical>
	g_MotionDriveHandle.speed = speed;
 800a390:	4a06      	ldr	r2, [pc, #24]	; (800a3ac <MT_setSpeed+0x28>)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6213      	str	r3, [r2, #32]
	Stepper_SetSpeed(speed);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	b29b      	uxth	r3, r3
 800a39a:	4618      	mov	r0, r3
 800a39c:	f001 fc9e 	bl	800bcdc <Stepper_SetSpeed>
	vPortExitCritical();
 800a3a0:	f00b fd30 	bl	8015e04 <vPortExitCritical>
}
 800a3a4:	bf00      	nop
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	20000b18 	.word	0x20000b18

0800a3b0 <MT_Start>:

	return reached;
}

void MT_Start(MotionMsgItem_t* pitem, uint32_t ticks)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08a      	sub	sp, #40	; 0x28
 800a3b4:	af02      	add	r7, sp, #8
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
	uint32_t targetVel = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	61fb      	str	r3, [r7, #28]
	uint32_t maxVel = 36000;
 800a3be:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 800a3c2:	61bb      	str	r3, [r7, #24]
	uint32_t maxAcce = 28000;
 800a3c4:	f646 5360 	movw	r3, #28000	; 0x6d60
 800a3c8:	617b      	str	r3, [r7, #20]
	uint32_t maxJerk = 28000;
 800a3ca:	f646 5360 	movw	r3, #28000	; 0x6d60
 800a3ce:	613b      	str	r3, [r7, #16]
	real32_T ts = (real32_T)ticks / 1000.0f;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	ee07 3a90 	vmov	s15, r3
 800a3d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a3da:	eddf 6a20 	vldr	s13, [pc, #128]	; 800a45c <MT_Start+0xac>
 800a3de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a3e2:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Build a motion block*/
	g_MotionRequest.start_pos = g_IncSteps;
 800a3e6:	4b1e      	ldr	r3, [pc, #120]	; (800a460 <MT_Start+0xb0>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a1e      	ldr	r2, [pc, #120]	; (800a464 <MT_Start+0xb4>)
 800a3ec:	6013      	str	r3, [r2, #0]
	g_MotionRequest.direction = Stepper_GetDir();
 800a3ee:	f001 fc3b 	bl	800bc68 <Stepper_GetDir>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4b1b      	ldr	r3, [pc, #108]	; (800a464 <MT_Start+0xb4>)
 800a3f8:	731a      	strb	r2, [r3, #12]

	if (g_MotionRequest.direction == STEPPER_Dir_CW)
 800a3fa:	4b1a      	ldr	r3, [pc, #104]	; (800a464 <MT_Start+0xb4>)
 800a3fc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d107      	bne.n	800a414 <MT_Start+0x64>
		g_MotionRequest.target_pos = g_MotionRequest.start_pos + pitem->position;
 800a404:	4b17      	ldr	r3, [pc, #92]	; (800a464 <MT_Start+0xb4>)
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	4413      	add	r3, r2
 800a40e:	4a15      	ldr	r2, [pc, #84]	; (800a464 <MT_Start+0xb4>)
 800a410:	6053      	str	r3, [r2, #4]
 800a412:	e006      	b.n	800a422 <MT_Start+0x72>
	else
		g_MotionRequest.target_pos = g_MotionRequest.start_pos - pitem->position;
 800a414:	4b13      	ldr	r3, [pc, #76]	; (800a464 <MT_Start+0xb4>)
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	4a11      	ldr	r2, [pc, #68]	; (800a464 <MT_Start+0xb4>)
 800a420:	6053      	str	r3, [r2, #4]

	PosProfile_Start(pitem->position, 0, targetVel, maxVel, maxAcce, maxJerk, ts);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	4618      	mov	r0, r3
 800a428:	69fa      	ldr	r2, [r7, #28]
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	ed97 0a03 	vldr	s0, [r7, #12]
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	2100      	movs	r1, #0
 800a43a:	f001 f9b5 	bl	800b7a8 <PosProfile_Start>

	printf("%ld\n", g_IncSteps);
 800a43e:	4b08      	ldr	r3, [pc, #32]	; (800a460 <MT_Start+0xb0>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4619      	mov	r1, r3
 800a444:	4808      	ldr	r0, [pc, #32]	; (800a468 <MT_Start+0xb8>)
 800a446:	f00d f951 	bl	80176ec <iprintf>

	Stepper_Run();
 800a44a:	f001 fc83 	bl	800bd54 <Stepper_Run>
	MOTION_STATUS = MOTION_RUNNING;
 800a44e:	4b07      	ldr	r3, [pc, #28]	; (800a46c <MT_Start+0xbc>)
 800a450:	2201      	movs	r2, #1
 800a452:	601a      	str	r2, [r3, #0]
}
 800a454:	bf00      	nop
 800a456:	3720      	adds	r7, #32
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	447a0000 	.word	0x447a0000
 800a460:	20000670 	.word	0x20000670
 800a464:	20000b58 	.word	0x20000b58
 800a468:	08018a58 	.word	0x08018a58
 800a46c:	20000b54 	.word	0x20000b54

0800a470 <MT_ProfileStep>:

void MT_ProfileStep(uint32_t ticks)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
	int32_t perr = abs(g_IncSteps - g_MotionRequest.start_pos);
 800a478:	4b10      	ldr	r3, [pc, #64]	; (800a4bc <MT_ProfileStep+0x4c>)
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	4b10      	ldr	r3, [pc, #64]	; (800a4c0 <MT_ProfileStep+0x50>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	2b00      	cmp	r3, #0
 800a484:	bfb8      	it	lt
 800a486:	425b      	neglt	r3, r3
 800a488:	60fb      	str	r3, [r7, #12]
	PosProfile_Step(perr);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	ee07 3a90 	vmov	s15, r3
 800a490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a494:	eeb0 0a67 	vmov.f32	s0, s15
 800a498:	f000 fb66 	bl	800ab68 <PosProfile_Step>
	Stepper_SetSpeed(rtY.CmdVel);
 800a49c:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <MT_ProfileStep+0x54>)
 800a49e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a4a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4a6:	ee17 3a90 	vmov	r3, s15
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f001 fc15 	bl	800bcdc <Stepper_SetSpeed>
}
 800a4b2:	bf00      	nop
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000670 	.word	0x20000670
 800a4c0:	20000b58 	.word	0x20000b58
 800a4c4:	20000ba4 	.word	0x20000ba4

0800a4c8 <MT_OverTime>:

boolean_T MT_OverTime(uint32_t ticks)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
	return PosProfile_StepOver(ticks);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f001 f9c9 	bl	800b868 <PosProfile_StepOver>
 800a4d6:	4603      	mov	r3, r0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <MT_Stop>:

void MT_Stop()
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
	MOTION_STATUS = MOTION_STOP;
 800a4e4:	4b06      	ldr	r3, [pc, #24]	; (800a500 <MT_Stop+0x20>)
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	601a      	str	r2, [r3, #0]
	Stepper_Stop();
 800a4ea:	f001 fc21 	bl	800bd30 <Stepper_Stop>

	printf("%ld\n", g_IncSteps);
 800a4ee:	4b05      	ldr	r3, [pc, #20]	; (800a504 <MT_Stop+0x24>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4804      	ldr	r0, [pc, #16]	; (800a508 <MT_Stop+0x28>)
 800a4f6:	f00d f8f9 	bl	80176ec <iprintf>
}
 800a4fa:	bf00      	nop
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20000b54 	.word	0x20000b54
 800a504:	20000670 	.word	0x20000670
 800a508:	08018a58 	.word	0x08018a58

0800a50c <MT_IsReach>:

boolean_T MT_IsReach()
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
	int32_t diff = abs(g_IncSteps - g_MotionRequest.target_pos);
 800a512:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <MT_IsReach+0x30>)
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <MT_IsReach+0x34>)
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bfb8      	it	lt
 800a520:	425b      	neglt	r3, r3
 800a522:	607b      	str	r3, [r7, #4]
	if (diff <= 4)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b04      	cmp	r3, #4
 800a528:	dc01      	bgt.n	800a52e <MT_IsReach+0x22>
		return true;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <MT_IsReach+0x24>

	return false;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	20000670 	.word	0x20000670
 800a540:	20000b58 	.word	0x20000b58

0800a544 <MT_Correcting>:

void MT_Correcting()
{
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
	MOTION_STATUS = MOTION_CORRECTING;
 800a548:	4b0a      	ldr	r3, [pc, #40]	; (800a574 <MT_Correcting+0x30>)
 800a54a:	2203      	movs	r2, #3
 800a54c:	601a      	str	r2, [r3, #0]
	//printf("correct: %ld\n", g_IncSteps);
	PIDProfile_Start(g_MotionRequest.target_pos, 1200.0f, 1000.0f, 1000.0f);
 800a54e:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <MT_Correcting+0x34>)
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	ee07 3a90 	vmov	s15, r3
 800a556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a55a:	eddf 1a08 	vldr	s3, [pc, #32]	; 800a57c <MT_Correcting+0x38>
 800a55e:	ed9f 1a07 	vldr	s2, [pc, #28]	; 800a57c <MT_Correcting+0x38>
 800a562:	eddf 0a07 	vldr	s1, [pc, #28]	; 800a580 <MT_Correcting+0x3c>
 800a566:	eeb0 0a67 	vmov.f32	s0, s15
 800a56a:	f7ff fdbd 	bl	800a0e8 <PIDProfile_Start>
}
 800a56e:	bf00      	nop
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000b54 	.word	0x20000b54
 800a578:	20000b58 	.word	0x20000b58
 800a57c:	447a0000 	.word	0x447a0000
 800a580:	44960000 	.word	0x44960000

0800a584 <MT_CorrectingStep>:

void MT_CorrectingStep(uint32_t ticks)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
	real32_T ts = ticks/1000.0f;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	ee07 3a90 	vmov	s15, r3
 800a592:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a596:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800a604 <MT_CorrectingStep+0x80>
 800a59a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a59e:	edc7 7a04 	vstr	s15, [r7, #16]

	PIDProfile_Step(ts, g_IncSteps);
 800a5a2:	4b19      	ldr	r3, [pc, #100]	; (800a608 <MT_CorrectingStep+0x84>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	ee07 3a90 	vmov	s15, r3
 800a5aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5ae:	eef0 0a67 	vmov.f32	s1, s15
 800a5b2:	ed97 0a04 	vldr	s0, [r7, #16]
 800a5b6:	f7ff fd07 	bl	8009fc8 <PIDProfile_Step>

	int32_t vel = rtPIDY.CmdVel;
 800a5ba:	4b14      	ldr	r3, [pc, #80]	; (800a60c <MT_CorrectingStep+0x88>)
 800a5bc:	edd3 7a01 	vldr	s15, [r3, #4]
 800a5c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5c4:	ee17 3a90 	vmov	r3, s15
 800a5c8:	60fb      	str	r3, [r7, #12]
	int8_t dir = g_MotionRequest.direction;
 800a5ca:	4b11      	ldr	r3, [pc, #68]	; (800a610 <MT_CorrectingStep+0x8c>)
 800a5cc:	7b1b      	ldrb	r3, [r3, #12]
 800a5ce:	75fb      	strb	r3, [r7, #23]

	if (vel < 0){
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	da02      	bge.n	800a5dc <MT_CorrectingStep+0x58>
		dir = STEPPER_Dir_CCW;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	75fb      	strb	r3, [r7, #23]
 800a5da:	e001      	b.n	800a5e0 <MT_CorrectingStep+0x5c>
	}else{
		dir = STEPPER_Dir_CW;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	75fb      	strb	r3, [r7, #23]
	}

	Stepper_SetDir(dir);
 800a5e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f001 fb4b 	bl	800bc80 <Stepper_SetDir>
	Stepper_SetSpeed(abs(vel));
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bfb8      	it	lt
 800a5f0:	425b      	neglt	r3, r3
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f001 fb71 	bl	800bcdc <Stepper_SetSpeed>
}
 800a5fa:	bf00      	nop
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	447a0000 	.word	0x447a0000
 800a608:	20000670 	.word	0x20000670
 800a60c:	20000b0c 	.word	0x20000b0c
 800a610:	20000b58 	.word	0x20000b58

0800a614 <MT_AddTestBlock>:

void MT_AddTestBlock()
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af00      	add	r7, sp, #0
	int8_t dir = g_MotionRequest.direction;
 800a61a:	4b12      	ldr	r3, [pc, #72]	; (800a664 <MT_AddTestBlock+0x50>)
 800a61c:	7b1b      	ldrb	r3, [r3, #12]
 800a61e:	75fb      	strb	r3, [r7, #23]
	if (dir == STEPPER_Dir_CW)
 800a620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d102      	bne.n	800a62e <MT_AddTestBlock+0x1a>
		dir = STEPPER_Dir_CCW;
 800a628:	2300      	movs	r3, #0
 800a62a:	75fb      	strb	r3, [r7, #23]
 800a62c:	e001      	b.n	800a632 <MT_AddTestBlock+0x1e>
	else
		dir = STEPPER_Dir_CW;
 800a62e:	2301      	movs	r3, #1
 800a630:	75fb      	strb	r3, [r7, #23]
	Stepper_SetDir(dir);
 800a632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a636:	4618      	mov	r0, r3
 800a638:	f001 fb22 	bl	800bc80 <Stepper_SetDir>
	g_MotionRequest.direction = Stepper_GetDir();
 800a63c:	f001 fb14 	bl	800bc68 <Stepper_GetDir>
 800a640:	4603      	mov	r3, r0
 800a642:	461a      	mov	r2, r3
 800a644:	4b07      	ldr	r3, [pc, #28]	; (800a664 <MT_AddTestBlock+0x50>)
 800a646:	731a      	strb	r2, [r3, #12]

	MotionMsgItem_t item;
	item.position = 24800;
 800a648:	f246 03e0 	movw	r3, #24800	; 0x60e0
 800a64c:	60bb      	str	r3, [r7, #8]
	xQueueSend(g_MotionDriveHandle.msgQueue, &item, 0);
 800a64e:	4b06      	ldr	r3, [pc, #24]	; (800a668 <MT_AddTestBlock+0x54>)
 800a650:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a652:	4639      	mov	r1, r7
 800a654:	2300      	movs	r3, #0
 800a656:	2200      	movs	r2, #0
 800a658:	f009 f8bc 	bl	80137d4 <xQueueGenericSend>
}
 800a65c:	bf00      	nop
 800a65e:	3718      	adds	r7, #24
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	20000b58 	.word	0x20000b58
 800a668:	20000b18 	.word	0x20000b18

0800a66c <MT_process_v3>:

void MT_process_v3(uint32_t ticks)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b08a      	sub	sp, #40	; 0x28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
	static uint32_t lasttick = 0;
	uint32_t curtick = HAL_GetTick();
 800a674:	f003 fe28 	bl	800e2c8 <HAL_GetTick>
 800a678:	6278      	str	r0, [r7, #36]	; 0x24

	MotionMsgItem_t item;

	/*handle msg queue*/
	if (g_MotionDriveHandle.msgQueue != NULL) {
 800a67a:	4b25      	ldr	r3, [pc, #148]	; (800a710 <MT_process_v3+0xa4>)
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d015      	beq.n	800a6ae <MT_process_v3+0x42>
		BaseType_t result = xQueueReceive(g_MotionDriveHandle.msgQueue, &item, 0);
 800a682:	4b23      	ldr	r3, [pc, #140]	; (800a710 <MT_process_v3+0xa4>)
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	f107 010c 	add.w	r1, r7, #12
 800a68a:	2200      	movs	r2, #0
 800a68c:	4618      	mov	r0, r3
 800a68e:	f009 fac5 	bl	8013c1c <xQueueReceive>
 800a692:	6238      	str	r0, [r7, #32]
		if (result == pdPASS) {
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d109      	bne.n	800a6ae <MT_process_v3+0x42>
			/*Motion plan and run*/
			MT_Start(&item, ticks);
 800a69a:	f107 030c 	add.w	r3, r7, #12
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff fe85 	bl	800a3b0 <MT_Start>
			lasttick = curtick;
 800a6a6:	4a1b      	ldr	r2, [pc, #108]	; (800a714 <MT_process_v3+0xa8>)
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	e02c      	b.n	800a708 <MT_process_v3+0x9c>
			return;
		}
	}

	if (MOTION_STATUS == MOTION_RUNNING){
 800a6ae:	4b1a      	ldr	r3, [pc, #104]	; (800a718 <MT_process_v3+0xac>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d118      	bne.n	800a6e8 <MT_process_v3+0x7c>
		MT_ProfileStep(ticks);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff feda 	bl	800a470 <MT_ProfileStep>
		if (MT_OverTime(curtick - lasttick)){
 800a6bc:	4b15      	ldr	r3, [pc, #84]	; (800a714 <MT_process_v3+0xa8>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff feff 	bl	800a4c8 <MT_OverTime>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00b      	beq.n	800a6e8 <MT_process_v3+0x7c>
			if (MT_IsReach()){
 800a6d0:	f7ff ff1c 	bl	800a50c <MT_IsReach>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d004      	beq.n	800a6e4 <MT_process_v3+0x78>
				MT_Stop();
 800a6da:	f7ff ff01 	bl	800a4e0 <MT_Stop>
				MT_AddTestBlock();
 800a6de:	f7ff ff99 	bl	800a614 <MT_AddTestBlock>
 800a6e2:	e001      	b.n	800a6e8 <MT_process_v3+0x7c>
			}else{
				MT_Correcting();
 800a6e4:	f7ff ff2e 	bl	800a544 <MT_Correcting>
			}
		}
	}

	if (MOTION_STATUS == MOTION_CORRECTING){
 800a6e8:	4b0b      	ldr	r3, [pc, #44]	; (800a718 <MT_process_v3+0xac>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b03      	cmp	r3, #3
 800a6ee:	d10b      	bne.n	800a708 <MT_process_v3+0x9c>
		MT_CorrectingStep(ticks);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7ff ff47 	bl	800a584 <MT_CorrectingStep>
		if (MT_IsReach()){
 800a6f6:	f7ff ff09 	bl	800a50c <MT_IsReach>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d003      	beq.n	800a708 <MT_process_v3+0x9c>
			MT_Stop();
 800a700:	f7ff feee 	bl	800a4e0 <MT_Stop>
			MT_AddTestBlock();
 800a704:	f7ff ff86 	bl	800a614 <MT_AddTestBlock>
		}
	}
}
 800a708:	3728      	adds	r7, #40	; 0x28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20000b18 	.word	0x20000b18
 800a714:	20000b68 	.word	0x20000b68
 800a718:	20000b54 	.word	0x20000b54

0800a71c <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetInf(void)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800a722:	2340      	movs	r3, #64	; 0x40
 800a724:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800a726:	f04f 0200 	mov.w	r2, #0
 800a72a:	f04f 0300 	mov.w	r3, #0
 800a72e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b20      	cmp	r3, #32
 800a736:	d10b      	bne.n	800a750 <rtGetInf+0x34>
    inf = rtGetInfF();
 800a738:	f000 f820 	bl	800a77c <rtGetInfF>
 800a73c:	ee10 3a10 	vmov	r3, s0
 800a740:	4618      	mov	r0, r3
 800a742:	f7f5 ff01 	bl	8000548 <__aeabi_f2d>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800a74e:	e007      	b.n	800a760 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800a750:	4b09      	ldr	r3, [pc, #36]	; (800a778 <rtGetInf+0x5c>)
 800a752:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800a754:	2300      	movs	r3, #0
 800a756:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800a758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a75c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800a760:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a764:	ec43 2b17 	vmov	d7, r2, r3
}
 800a768:	eeb0 0a47 	vmov.f32	s0, s14
 800a76c:	eef0 0a67 	vmov.f32	s1, s15
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	7ff00000 	.word	0x7ff00000

0800a77c <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetInfF(void)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800a782:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800a786:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	ee07 3a90 	vmov	s15, r3
}
 800a78e:	eeb0 0a67 	vmov.f32	s0, s15
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetMinusInf(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800a7a2:	2340      	movs	r3, #64	; 0x40
 800a7a4:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800a7a6:	f04f 0200 	mov.w	r2, #0
 800a7aa:	f04f 0300 	mov.w	r3, #0
 800a7ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b20      	cmp	r3, #32
 800a7b6:	d10b      	bne.n	800a7d0 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800a7b8:	f000 f820 	bl	800a7fc <rtGetMinusInfF>
 800a7bc:	ee10 3a10 	vmov	r3, s0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7f5 fec1 	bl	8000548 <__aeabi_f2d>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800a7ce:	e007      	b.n	800a7e0 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800a7d0:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <rtGetMinusInf+0x5c>)
 800a7d2:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800a7d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800a7e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a7e4:	ec43 2b17 	vmov	d7, r2, r3
}
 800a7e8:	eeb0 0a47 	vmov.f32	s0, s14
 800a7ec:	eef0 0a67 	vmov.f32	s1, s15
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	fff00000 	.word	0xfff00000

0800a7fc <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetMinusInfF(void)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800a802:	4b06      	ldr	r3, [pc, #24]	; (800a81c <rtGetMinusInfF+0x20>)
 800a804:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	ee07 3a90 	vmov	s15, r3
}
 800a80c:	eeb0 0a67 	vmov.f32	s0, s15
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	ff800000 	.word	0xff800000

0800a820 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetNaN(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800a826:	2340      	movs	r3, #64	; 0x40
 800a828:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800a82a:	f04f 0200 	mov.w	r2, #0
 800a82e:	f04f 0300 	mov.w	r3, #0
 800a832:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b20      	cmp	r3, #32
 800a83a:	d10b      	bne.n	800a854 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800a83c:	f000 f820 	bl	800a880 <rtGetNaNF>
 800a840:	ee10 3a10 	vmov	r3, s0
 800a844:	4618      	mov	r0, r3
 800a846:	f7f5 fe7f 	bl	8000548 <__aeabi_f2d>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800a852:	e007      	b.n	800a864 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800a854:	4b09      	ldr	r3, [pc, #36]	; (800a87c <rtGetNaN+0x5c>)
 800a856:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800a858:	2300      	movs	r3, #0
 800a85a:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800a85c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a860:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800a864:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a868:	ec43 2b17 	vmov	d7, r2, r3
}
 800a86c:	eeb0 0a47 	vmov.f32	s0, s14
 800a870:	eef0 0a67 	vmov.f32	s1, s15
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	fff80000 	.word	0xfff80000

0800a880 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetNaNF(void)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800a886:	f04f 0300 	mov.w	r3, #0
 800a88a:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800a88c:	4b05      	ldr	r3, [pc, #20]	; (800a8a4 <rtGetNaNF+0x24>)
 800a88e:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	ee07 3a90 	vmov	s15, r3
}
 800a896:	eeb0 0a67 	vmov.f32	s0, s15
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr
 800a8a4:	ffc00000 	.word	0xffc00000

0800a8a8 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
static void rt_InitInfAndNaN(size_t realSize)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800a8b0:	f7ff ffb6 	bl	800a820 <rtGetNaN>
 800a8b4:	eeb0 7a40 	vmov.f32	s14, s0
 800a8b8:	eef0 7a60 	vmov.f32	s15, s1
 800a8bc:	4b16      	ldr	r3, [pc, #88]	; (800a918 <rt_InitInfAndNaN+0x70>)
 800a8be:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800a8c2:	f7ff ffdd 	bl	800a880 <rtGetNaNF>
 800a8c6:	eef0 7a40 	vmov.f32	s15, s0
 800a8ca:	4b14      	ldr	r3, [pc, #80]	; (800a91c <rt_InitInfAndNaN+0x74>)
 800a8cc:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800a8d0:	f7ff ff24 	bl	800a71c <rtGetInf>
 800a8d4:	eeb0 7a40 	vmov.f32	s14, s0
 800a8d8:	eef0 7a60 	vmov.f32	s15, s1
 800a8dc:	4b10      	ldr	r3, [pc, #64]	; (800a920 <rt_InitInfAndNaN+0x78>)
 800a8de:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800a8e2:	f7ff ff4b 	bl	800a77c <rtGetInfF>
 800a8e6:	eef0 7a40 	vmov.f32	s15, s0
 800a8ea:	4b0e      	ldr	r3, [pc, #56]	; (800a924 <rt_InitInfAndNaN+0x7c>)
 800a8ec:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800a8f0:	f7ff ff54 	bl	800a79c <rtGetMinusInf>
 800a8f4:	eeb0 7a40 	vmov.f32	s14, s0
 800a8f8:	eef0 7a60 	vmov.f32	s15, s1
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <rt_InitInfAndNaN+0x80>)
 800a8fe:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800a902:	f7ff ff7b 	bl	800a7fc <rtGetMinusInfF>
 800a906:	eef0 7a40 	vmov.f32	s15, s0
 800a90a:	4b08      	ldr	r3, [pc, #32]	; (800a92c <rt_InitInfAndNaN+0x84>)
 800a90c:	edc3 7a00 	vstr	s15, [r3]
}
 800a910:	bf00      	nop
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20000bd8 	.word	0x20000bd8
 800a91c:	20000be8 	.word	0x20000be8
 800a920:	20000bc8 	.word	0x20000bc8
 800a924:	20000be0 	.word	0x20000be0
 800a928:	20000bd0 	.word	0x20000bd0
 800a92c:	20000be4 	.word	0x20000be4

0800a930 <rtIsInfF>:


/* Test if single-precision value is infinite */
static boolean_T rtIsInfF(real32_T value)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	ed87 0a01 	vstr	s0, [r7, #4]
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
 800a93a:	4b0e      	ldr	r3, [pc, #56]	; (800a974 <rtIsInfF+0x44>)
 800a93c:	edd3 7a00 	vldr	s15, [r3]
 800a940:	ed97 7a01 	vldr	s14, [r7, #4]
 800a944:	eeb4 7a67 	vcmp.f32	s14, s15
 800a948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94c:	d009      	beq.n	800a962 <rtIsInfF+0x32>
 800a94e:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <rtIsInfF+0x48>)
 800a950:	edd3 7a00 	vldr	s15, [r3]
 800a954:	ed97 7a01 	vldr	s14, [r7, #4]
 800a958:	eeb4 7a67 	vcmp.f32	s14, s15
 800a95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a960:	d101      	bne.n	800a966 <rtIsInfF+0x36>
 800a962:	2301      	movs	r3, #1
 800a964:	e000      	b.n	800a968 <rtIsInfF+0x38>
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	20000be0 	.word	0x20000be0
 800a978:	20000be4 	.word	0x20000be4

0800a97c <rtIsNaNF>:


/* Test if single-precision value is not a number */
static boolean_T rtIsNaNF(real32_T value)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800a990:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a994:	d106      	bne.n	800a9a4 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <rtIsNaNF+0x28>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e000      	b.n	800a9a6 <rtIsNaNF+0x2a>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	b2db      	uxtb	r3, r3
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <rt_powf_snf>:

real32_T rt_powf_snf(real32_T u0, real32_T u1)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	ed87 0a01 	vstr	s0, [r7, #4]
 800a9be:	edc7 0a00 	vstr	s1, [r7]
  real32_T tmp;
  real32_T tmp_0;
  real32_T y;
  if (rtIsNaNF(u0) || rtIsNaNF(u1)) {
 800a9c2:	ed97 0a01 	vldr	s0, [r7, #4]
 800a9c6:	f7ff ffd9 	bl	800a97c <rtIsNaNF>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d106      	bne.n	800a9de <rt_powf_snf+0x2a>
 800a9d0:	ed97 0a00 	vldr	s0, [r7]
 800a9d4:	f7ff ffd2 	bl	800a97c <rtIsNaNF>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <rt_powf_snf+0x32>
    y = (rtNaNF);
 800a9de:	4b60      	ldr	r3, [pc, #384]	; (800ab60 <rt_powf_snf+0x1ac>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	617b      	str	r3, [r7, #20]
 800a9e4:	e0b4      	b.n	800ab50 <rt_powf_snf+0x19c>
  } else {
    tmp = fabsf(u0);
 800a9e6:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9ea:	eef0 7ae7 	vabs.f32	s15, s15
 800a9ee:	edc7 7a04 	vstr	s15, [r7, #16]
    tmp_0 = fabsf(u1);
 800a9f2:	edd7 7a00 	vldr	s15, [r7]
 800a9f6:	eef0 7ae7 	vabs.f32	s15, s15
 800a9fa:	edc7 7a03 	vstr	s15, [r7, #12]
    if (rtIsInfF(u1)) {
 800a9fe:	ed97 0a00 	vldr	s0, [r7]
 800aa02:	f7ff ff95 	bl	800a930 <rtIsInfF>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d033      	beq.n	800aa74 <rt_powf_snf+0xc0>
      if (tmp == 1.0F) {
 800aa0c:	edd7 7a04 	vldr	s15, [r7, #16]
 800aa10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa14:	eef4 7a47 	vcmp.f32	s15, s14
 800aa18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa1c:	d103      	bne.n	800aa26 <rt_powf_snf+0x72>
        y = 1.0F;
 800aa1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800aa22:	617b      	str	r3, [r7, #20]
 800aa24:	e094      	b.n	800ab50 <rt_powf_snf+0x19c>
      } else if (tmp > 1.0F) {
 800aa26:	edd7 7a04 	vldr	s15, [r7, #16]
 800aa2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa36:	dd0e      	ble.n	800aa56 <rt_powf_snf+0xa2>
        if (u1 > 0.0F) {
 800aa38:	edd7 7a00 	vldr	s15, [r7]
 800aa3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa44:	dd03      	ble.n	800aa4e <rt_powf_snf+0x9a>
          y = (rtInfF);
 800aa46:	4b47      	ldr	r3, [pc, #284]	; (800ab64 <rt_powf_snf+0x1b0>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	e080      	b.n	800ab50 <rt_powf_snf+0x19c>
        } else {
          y = 0.0F;
 800aa4e:	f04f 0300 	mov.w	r3, #0
 800aa52:	617b      	str	r3, [r7, #20]
 800aa54:	e07c      	b.n	800ab50 <rt_powf_snf+0x19c>
        }
      } else if (u1 > 0.0F) {
 800aa56:	edd7 7a00 	vldr	s15, [r7]
 800aa5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa62:	dd03      	ble.n	800aa6c <rt_powf_snf+0xb8>
        y = 0.0F;
 800aa64:	f04f 0300 	mov.w	r3, #0
 800aa68:	617b      	str	r3, [r7, #20]
 800aa6a:	e071      	b.n	800ab50 <rt_powf_snf+0x19c>
      } else {
        y = (rtInfF);
 800aa6c:	4b3d      	ldr	r3, [pc, #244]	; (800ab64 <rt_powf_snf+0x1b0>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	617b      	str	r3, [r7, #20]
 800aa72:	e06d      	b.n	800ab50 <rt_powf_snf+0x19c>
      }
    } else if (tmp_0 == 0.0F) {
 800aa74:	edd7 7a03 	vldr	s15, [r7, #12]
 800aa78:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aa7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa80:	d103      	bne.n	800aa8a <rt_powf_snf+0xd6>
      y = 1.0F;
 800aa82:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	e062      	b.n	800ab50 <rt_powf_snf+0x19c>
    } else if (tmp_0 == 1.0F) {
 800aa8a:	edd7 7a03 	vldr	s15, [r7, #12]
 800aa8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa92:	eef4 7a47 	vcmp.f32	s15, s14
 800aa96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9a:	d112      	bne.n	800aac2 <rt_powf_snf+0x10e>
      if (u1 > 0.0F) {
 800aa9c:	edd7 7a00 	vldr	s15, [r7]
 800aaa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aaa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa8:	dd02      	ble.n	800aab0 <rt_powf_snf+0xfc>
        y = u0;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	617b      	str	r3, [r7, #20]
 800aaae:	e04f      	b.n	800ab50 <rt_powf_snf+0x19c>
      } else {
        y = 1.0F / u0;
 800aab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aab4:	ed97 7a01 	vldr	s14, [r7, #4]
 800aab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aabc:	edc7 7a05 	vstr	s15, [r7, #20]
 800aac0:	e046      	b.n	800ab50 <rt_powf_snf+0x19c>
      }
    } else if (u1 == 2.0F) {
 800aac2:	edd7 7a00 	vldr	s15, [r7]
 800aac6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aaca:	eef4 7a47 	vcmp.f32	s15, s14
 800aace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad2:	d106      	bne.n	800aae2 <rt_powf_snf+0x12e>
      y = u0 * u0;
 800aad4:	edd7 7a01 	vldr	s15, [r7, #4]
 800aad8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aadc:	edc7 7a05 	vstr	s15, [r7, #20]
 800aae0:	e036      	b.n	800ab50 <rt_powf_snf+0x19c>
    } else if ((u1 == 0.5F) && (u0 >= 0.0F)) {
 800aae2:	edd7 7a00 	vldr	s15, [r7]
 800aae6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aaea:	eef4 7a47 	vcmp.f32	s15, s14
 800aaee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf2:	d10d      	bne.n	800ab10 <rt_powf_snf+0x15c>
 800aaf4:	edd7 7a01 	vldr	s15, [r7, #4]
 800aaf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab00:	db06      	blt.n	800ab10 <rt_powf_snf+0x15c>
      y = sqrtf(u0);
 800ab02:	ed97 0a01 	vldr	s0, [r7, #4]
 800ab06:	f00c f811 	bl	8016b2c <sqrtf>
 800ab0a:	ed87 0a05 	vstr	s0, [r7, #20]
 800ab0e:	e01f      	b.n	800ab50 <rt_powf_snf+0x19c>
    } else if ((u0 < 0.0F) && (u1 > floorf(u1))) {
 800ab10:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ab18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1c:	d510      	bpl.n	800ab40 <rt_powf_snf+0x18c>
 800ab1e:	ed97 0a00 	vldr	s0, [r7]
 800ab22:	f00b ff4f 	bl	80169c4 <floorf>
 800ab26:	eeb0 7a40 	vmov.f32	s14, s0
 800ab2a:	edd7 7a00 	vldr	s15, [r7]
 800ab2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab36:	dd03      	ble.n	800ab40 <rt_powf_snf+0x18c>
      y = (rtNaNF);
 800ab38:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <rt_powf_snf+0x1ac>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	617b      	str	r3, [r7, #20]
 800ab3e:	e007      	b.n	800ab50 <rt_powf_snf+0x19c>
    } else {
      y = powf(u0, u1);
 800ab40:	edd7 0a00 	vldr	s1, [r7]
 800ab44:	ed97 0a01 	vldr	s0, [r7, #4]
 800ab48:	f00b ff98 	bl	8016a7c <powf>
 800ab4c:	ed87 0a05 	vstr	s0, [r7, #20]
    }
  }

  return y;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	ee07 3a90 	vmov	s15, r3
}
 800ab56:	eeb0 0a67 	vmov.f32	s0, s15
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20000be8 	.word	0x20000be8
 800ab64:	20000be0 	.word	0x20000be0

0800ab68 <PosProfile_Step>:

/* Model step function */
void PosProfile_Step(real32_T curPos)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T jerk = 0.0f;
 800ab72:	f04f 0300 	mov.w	r3, #0
 800ab76:	60fb      	str	r3, [r7, #12]

  /* DiscreteIntegrator: '<S1>/Pos Integrator' incorporates:
   *  Inport: '<Root>/InitPos'
   */
  if (rtDW.PosIntegrator_IC_LOADING != 0) {
 800ab78:	4bac      	ldr	r3, [pc, #688]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ab7a:	7d1b      	ldrb	r3, [r3, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d003      	beq.n	800ab88 <PosProfile_Step+0x20>
    rtDW.PosIntegrator_DSTATE = rtU.InitPos;
 800ab80:	4bab      	ldr	r3, [pc, #684]	; (800ae30 <PosProfile_Step+0x2c8>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4aa9      	ldr	r2, [pc, #676]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ab86:	6013      	str	r3, [r2, #0]
  }

  /* Outport: '<Root>/CmdPos' incorporates:
   *  DiscreteIntegrator: '<S1>/Pos Integrator'
   */
  rtY.CmdPos = rtDW.PosIntegrator_DSTATE;
 800ab88:	4ba8      	ldr	r3, [pc, #672]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4aa9      	ldr	r2, [pc, #676]	; (800ae34 <PosProfile_Step+0x2cc>)
 800ab8e:	6013      	str	r3, [r2, #0]

  /* DiscreteIntegrator: '<S1>/Vel Integrator' incorporates:
   *  Inport: '<Root>/InitVel'
   */
  if (rtDW.VelIntegrator_IC_LOADING != 0) {
 800ab90:	4ba6      	ldr	r3, [pc, #664]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ab92:	7d5b      	ldrb	r3, [r3, #21]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d003      	beq.n	800aba0 <PosProfile_Step+0x38>
    rtDW.VelIntegrator_DSTATE = rtU.InitVel;
 800ab98:	4ba5      	ldr	r3, [pc, #660]	; (800ae30 <PosProfile_Step+0x2c8>)
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	4aa3      	ldr	r2, [pc, #652]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ab9e:	6053      	str	r3, [r2, #4]
  }

  /* Outport: '<Root>/CmdVel' incorporates:
   *  DiscreteIntegrator: '<S1>/Vel Integrator'
   */
  rtY.CmdVel = rtDW.VelIntegrator_DSTATE;
 800aba0:	4ba2      	ldr	r3, [pc, #648]	; (800ae2c <PosProfile_Step+0x2c4>)
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	4aa3      	ldr	r2, [pc, #652]	; (800ae34 <PosProfile_Step+0x2cc>)
 800aba6:	6053      	str	r3, [r2, #4]

  /* Update for DiscreteIntegrator: '<S1>/Pos Integrator' incorporates:
   *  DiscreteIntegrator: '<S1>/Vel Integrator'
   */
  rtDW.PosIntegrator_IC_LOADING = 0U;
 800aba8:	4ba0      	ldr	r3, [pc, #640]	; (800ae2c <PosProfile_Step+0x2c4>)
 800abaa:	2200      	movs	r2, #0
 800abac:	751a      	strb	r2, [r3, #20]
  rtDW.PosIntegrator_DSTATE += rtU.Ts * rtDW.VelIntegrator_DSTATE;
 800abae:	4b9f      	ldr	r3, [pc, #636]	; (800ae2c <PosProfile_Step+0x2c4>)
 800abb0:	ed93 7a00 	vldr	s14, [r3]
 800abb4:	4b9e      	ldr	r3, [pc, #632]	; (800ae30 <PosProfile_Step+0x2c8>)
 800abb6:	edd3 6a07 	vldr	s13, [r3, #28]
 800abba:	4b9c      	ldr	r3, [pc, #624]	; (800ae2c <PosProfile_Step+0x2c4>)
 800abbc:	edd3 7a01 	vldr	s15, [r3, #4]
 800abc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abc8:	4b98      	ldr	r3, [pc, #608]	; (800ae2c <PosProfile_Step+0x2c4>)
 800abca:	edc3 7a00 	vstr	s15, [r3]

  /* Update for DiscreteIntegrator: '<S1>/Vel Integrator' incorporates:
   *  DiscreteIntegrator: '<S1>/Acce Integrator'
   */
  rtDW.VelIntegrator_IC_LOADING = 0U;
 800abce:	4b97      	ldr	r3, [pc, #604]	; (800ae2c <PosProfile_Step+0x2c4>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	755a      	strb	r2, [r3, #21]
  rtDW.VelIntegrator_DSTATE += rtU.Ts * rtDW.AcceIntegrator_DSTATE;
 800abd4:	4b95      	ldr	r3, [pc, #596]	; (800ae2c <PosProfile_Step+0x2c4>)
 800abd6:	ed93 7a01 	vldr	s14, [r3, #4]
 800abda:	4b95      	ldr	r3, [pc, #596]	; (800ae30 <PosProfile_Step+0x2c8>)
 800abdc:	edd3 6a07 	vldr	s13, [r3, #28]
 800abe0:	4b92      	ldr	r3, [pc, #584]	; (800ae2c <PosProfile_Step+0x2c4>)
 800abe2:	edd3 7a02 	vldr	s15, [r3, #8]
 800abe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abee:	4b8f      	ldr	r3, [pc, #572]	; (800ae2c <PosProfile_Step+0x2c4>)
 800abf0:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Correct velocity*/
  real32_T uv = truncf(rtDW.VelIntegrator_DSTATE);
 800abf4:	4b8d      	ldr	r3, [pc, #564]	; (800ae2c <PosProfile_Step+0x2c4>)
 800abf6:	edd3 7a01 	vldr	s15, [r3, #4]
 800abfa:	eeb0 0a67 	vmov.f32	s0, s15
 800abfe:	f00b ff23 	bl	8016a48 <truncf>
 800ac02:	ed87 0a02 	vstr	s0, [r7, #8]
  rtDW.VelTrancErr += rtDW.VelIntegrator_DSTATE - uv;
 800ac06:	4b89      	ldr	r3, [pc, #548]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac08:	ed93 7a04 	vldr	s14, [r3, #16]
 800ac0c:	4b87      	ldr	r3, [pc, #540]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac0e:	edd3 6a01 	vldr	s13, [r3, #4]
 800ac12:	edd7 7a02 	vldr	s15, [r7, #8]
 800ac16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ac1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac1e:	4b83      	ldr	r3, [pc, #524]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac20:	edc3 7a04 	vstr	s15, [r3, #16]

  /* Floating value tranc to UINT32*/
  if (rtDW.VelTrancErr >= 1.0f){
 800ac24:	4b81      	ldr	r3, [pc, #516]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac26:	edd3 7a04 	vldr	s15, [r3, #16]
 800ac2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac36:	db13      	blt.n	800ac60 <PosProfile_Step+0xf8>
	  rtDW.VelIntegrator_DSTATE += 1.0F;
 800ac38:	4b7c      	ldr	r3, [pc, #496]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac3a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ac3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac42:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac46:	4b79      	ldr	r3, [pc, #484]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac48:	edc3 7a01 	vstr	s15, [r3, #4]
	  rtDW.VelTrancErr -= 1.0F;
 800ac4c:	4b77      	ldr	r3, [pc, #476]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac4e:	edd3 7a04 	vldr	s15, [r3, #16]
 800ac52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac5a:	4b74      	ldr	r3, [pc, #464]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac5c:	edc3 7a04 	vstr	s15, [r3, #16]
  }

  if (!rtDW.t_not_empty) {
 800ac60:	4b72      	ldr	r3, [pc, #456]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac62:	7d9b      	ldrb	r3, [r3, #22]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d107      	bne.n	800ac78 <PosProfile_Step+0x110>
      rtDW.t = 0.0F;
 800ac68:	4b70      	ldr	r3, [pc, #448]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac6a:	f04f 0200 	mov.w	r2, #0
 800ac6e:	60da      	str	r2, [r3, #12]
      rtDW.t_not_empty = true;
 800ac70:	4b6e      	ldr	r3, [pc, #440]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac72:	2201      	movs	r2, #1
 800ac74:	759a      	strb	r2, [r3, #22]
 800ac76:	e00a      	b.n	800ac8e <PosProfile_Step+0x126>
  } else {
      rtDW.t += rtU.Ts;
 800ac78:	4b6c      	ldr	r3, [pc, #432]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac7a:	ed93 7a03 	vldr	s14, [r3, #12]
 800ac7e:	4b6c      	ldr	r3, [pc, #432]	; (800ae30 <PosProfile_Step+0x2c8>)
 800ac80:	edd3 7a07 	vldr	s15, [r3, #28]
 800ac84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac88:	4b68      	ldr	r3, [pc, #416]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac8a:	edc3 7a03 	vstr	s15, [r3, #12]
  }

  /* MATLAB Function: '<S1>/ppmode' incorporates:
   *  Inport: '<Root>/MaxJerk'
   */
  if ((rtDW.t >= 0.0F) && (rtDW.t < PosPTiming.Tj1)) {
 800ac8e:	4b67      	ldr	r3, [pc, #412]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ac90:	edd3 7a03 	vldr	s15, [r3, #12]
 800ac94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ac98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9c:	db0e      	blt.n	800acbc <PosProfile_Step+0x154>
 800ac9e:	4b63      	ldr	r3, [pc, #396]	; (800ae2c <PosProfile_Step+0x2c4>)
 800aca0:	ed93 7a03 	vldr	s14, [r3, #12]
 800aca4:	4b64      	ldr	r3, [pc, #400]	; (800ae38 <PosProfile_Step+0x2d0>)
 800aca6:	edd3 7a03 	vldr	s15, [r3, #12]
 800acaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800acae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb2:	d503      	bpl.n	800acbc <PosProfile_Step+0x154>
	  /*Phase 1*/
	  jerk = rtU.MaxJerk;
 800acb4:	4b5e      	ldr	r3, [pc, #376]	; (800ae30 <PosProfile_Step+0x2c8>)
 800acb6:	699b      	ldr	r3, [r3, #24]
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	e0e1      	b.n	800ae80 <PosProfile_Step+0x318>
  } else if ((rtDW.t >= PosPTiming.Tj1) && (rtDW.t < (PosPTiming.Ta - PosPTiming.Tj1))) {
 800acbc:	4b5b      	ldr	r3, [pc, #364]	; (800ae2c <PosProfile_Step+0x2c4>)
 800acbe:	ed93 7a03 	vldr	s14, [r3, #12]
 800acc2:	4b5d      	ldr	r3, [pc, #372]	; (800ae38 <PosProfile_Step+0x2d0>)
 800acc4:	edd3 7a03 	vldr	s15, [r3, #12]
 800acc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800accc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd0:	db13      	blt.n	800acfa <PosProfile_Step+0x192>
 800acd2:	4b56      	ldr	r3, [pc, #344]	; (800ae2c <PosProfile_Step+0x2c4>)
 800acd4:	ed93 7a03 	vldr	s14, [r3, #12]
 800acd8:	4b57      	ldr	r3, [pc, #348]	; (800ae38 <PosProfile_Step+0x2d0>)
 800acda:	edd3 6a02 	vldr	s13, [r3, #8]
 800acde:	4b56      	ldr	r3, [pc, #344]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ace0:	edd3 7a03 	vldr	s15, [r3, #12]
 800ace4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ace8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800acec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf0:	d503      	bpl.n	800acfa <PosProfile_Step+0x192>
	  /*Phase 2*/
	  jerk = 0.0F;
 800acf2:	f04f 0300 	mov.w	r3, #0
 800acf6:	60fb      	str	r3, [r7, #12]
 800acf8:	e0c2      	b.n	800ae80 <PosProfile_Step+0x318>
  } else if ((rtDW.t >= (PosPTiming.Ta - PosPTiming.Tj1)) && (rtDW.t < PosPTiming.Ta)) {
 800acfa:	4b4c      	ldr	r3, [pc, #304]	; (800ae2c <PosProfile_Step+0x2c4>)
 800acfc:	ed93 7a03 	vldr	s14, [r3, #12]
 800ad00:	4b4d      	ldr	r3, [pc, #308]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ad02:	edd3 6a02 	vldr	s13, [r3, #8]
 800ad06:	4b4c      	ldr	r3, [pc, #304]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ad08:	edd3 7a03 	vldr	s15, [r3, #12]
 800ad0c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ad10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad18:	db12      	blt.n	800ad40 <PosProfile_Step+0x1d8>
 800ad1a:	4b44      	ldr	r3, [pc, #272]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ad1c:	ed93 7a03 	vldr	s14, [r3, #12]
 800ad20:	4b45      	ldr	r3, [pc, #276]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ad22:	edd3 7a02 	vldr	s15, [r3, #8]
 800ad26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad2e:	d507      	bpl.n	800ad40 <PosProfile_Step+0x1d8>
	  /*Phase 3*/
	  jerk = -rtU.MaxJerk;
 800ad30:	4b3f      	ldr	r3, [pc, #252]	; (800ae30 <PosProfile_Step+0x2c8>)
 800ad32:	edd3 7a06 	vldr	s15, [r3, #24]
 800ad36:	eef1 7a67 	vneg.f32	s15, s15
 800ad3a:	edc7 7a03 	vstr	s15, [r7, #12]
 800ad3e:	e09f      	b.n	800ae80 <PosProfile_Step+0x318>
  } else if ((rtDW.t >= PosPTiming.Ta) && (rtDW.t < PosPTiming.Ta + PosPTiming.Tv)) {
 800ad40:	4b3a      	ldr	r3, [pc, #232]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ad42:	ed93 7a03 	vldr	s14, [r3, #12]
 800ad46:	4b3c      	ldr	r3, [pc, #240]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ad48:	edd3 7a02 	vldr	s15, [r3, #8]
 800ad4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad54:	db13      	blt.n	800ad7e <PosProfile_Step+0x216>
 800ad56:	4b35      	ldr	r3, [pc, #212]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ad58:	ed93 7a03 	vldr	s14, [r3, #12]
 800ad5c:	4b36      	ldr	r3, [pc, #216]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ad5e:	edd3 6a02 	vldr	s13, [r3, #8]
 800ad62:	4b35      	ldr	r3, [pc, #212]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ad64:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad74:	d503      	bpl.n	800ad7e <PosProfile_Step+0x216>
	  /*Phase 4*/
	  jerk = 0.0F;
 800ad76:	f04f 0300 	mov.w	r3, #0
 800ad7a:	60fb      	str	r3, [r7, #12]
 800ad7c:	e080      	b.n	800ae80 <PosProfile_Step+0x318>
  } else if ((rtDW.t >= (PosPTiming.T - PosPTiming.Td)) && (rtDW.t < (PosPTiming.T - PosPTiming.Td + PosPTiming.Tj2))){
 800ad7e:	4b2b      	ldr	r3, [pc, #172]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ad80:	ed93 7a03 	vldr	s14, [r3, #12]
 800ad84:	4b2c      	ldr	r3, [pc, #176]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ad86:	edd3 6a00 	vldr	s13, [r3]
 800ad8a:	4b2b      	ldr	r3, [pc, #172]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ad8c:	edd3 7a04 	vldr	s15, [r3, #16]
 800ad90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ad94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9c:	db1c      	blt.n	800add8 <PosProfile_Step+0x270>
 800ad9e:	4b23      	ldr	r3, [pc, #140]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ada0:	ed93 7a03 	vldr	s14, [r3, #12]
 800ada4:	4b24      	ldr	r3, [pc, #144]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ada6:	edd3 6a00 	vldr	s13, [r3]
 800adaa:	4b23      	ldr	r3, [pc, #140]	; (800ae38 <PosProfile_Step+0x2d0>)
 800adac:	edd3 7a04 	vldr	s15, [r3, #16]
 800adb0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800adb4:	4b20      	ldr	r3, [pc, #128]	; (800ae38 <PosProfile_Step+0x2d0>)
 800adb6:	edd3 7a05 	vldr	s15, [r3, #20]
 800adba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc6:	d507      	bpl.n	800add8 <PosProfile_Step+0x270>
	  /*Phase 4*/
	  jerk = -rtU.MaxJerk;
 800adc8:	4b19      	ldr	r3, [pc, #100]	; (800ae30 <PosProfile_Step+0x2c8>)
 800adca:	edd3 7a06 	vldr	s15, [r3, #24]
 800adce:	eef1 7a67 	vneg.f32	s15, s15
 800add2:	edc7 7a03 	vstr	s15, [r7, #12]
 800add6:	e053      	b.n	800ae80 <PosProfile_Step+0x318>
  } else if ((rtDW.t >= (PosPTiming.T - PosPTiming.Td + PosPTiming.Tj2)) && (rtDW.t < (PosPTiming.T - PosPTiming.Tj2))) {
 800add8:	4b14      	ldr	r3, [pc, #80]	; (800ae2c <PosProfile_Step+0x2c4>)
 800adda:	ed93 7a03 	vldr	s14, [r3, #12]
 800adde:	4b16      	ldr	r3, [pc, #88]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ade0:	edd3 6a00 	vldr	s13, [r3]
 800ade4:	4b14      	ldr	r3, [pc, #80]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ade6:	edd3 7a04 	vldr	s15, [r3, #16]
 800adea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800adee:	4b12      	ldr	r3, [pc, #72]	; (800ae38 <PosProfile_Step+0x2d0>)
 800adf0:	edd3 7a05 	vldr	s15, [r3, #20]
 800adf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae00:	db1c      	blt.n	800ae3c <PosProfile_Step+0x2d4>
 800ae02:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <PosProfile_Step+0x2c4>)
 800ae04:	ed93 7a03 	vldr	s14, [r3, #12]
 800ae08:	4b0b      	ldr	r3, [pc, #44]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ae0a:	edd3 6a00 	vldr	s13, [r3]
 800ae0e:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <PosProfile_Step+0x2d0>)
 800ae10:	edd3 7a05 	vldr	s15, [r3, #20]
 800ae14:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ae18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae20:	d50c      	bpl.n	800ae3c <PosProfile_Step+0x2d4>
	  /*Phase 4*/
	  jerk = 0.0F;
 800ae22:	f04f 0300 	mov.w	r3, #0
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	e02a      	b.n	800ae80 <PosProfile_Step+0x318>
 800ae2a:	bf00      	nop
 800ae2c:	20000b6c 	.word	0x20000b6c
 800ae30:	20000b84 	.word	0x20000b84
 800ae34:	20000ba4 	.word	0x20000ba4
 800ae38:	20000bac 	.word	0x20000bac
  } else if (rtDW.t >= (PosPTiming.T - PosPTiming.Tj2) && rtDW.t < PosPTiming.T) {
 800ae3c:	4b1a      	ldr	r3, [pc, #104]	; (800aea8 <PosProfile_Step+0x340>)
 800ae3e:	ed93 7a03 	vldr	s14, [r3, #12]
 800ae42:	4b1a      	ldr	r3, [pc, #104]	; (800aeac <PosProfile_Step+0x344>)
 800ae44:	edd3 6a00 	vldr	s13, [r3]
 800ae48:	4b18      	ldr	r3, [pc, #96]	; (800aeac <PosProfile_Step+0x344>)
 800ae4a:	edd3 7a05 	vldr	s15, [r3, #20]
 800ae4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ae52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5a:	db0e      	blt.n	800ae7a <PosProfile_Step+0x312>
 800ae5c:	4b12      	ldr	r3, [pc, #72]	; (800aea8 <PosProfile_Step+0x340>)
 800ae5e:	ed93 7a03 	vldr	s14, [r3, #12]
 800ae62:	4b12      	ldr	r3, [pc, #72]	; (800aeac <PosProfile_Step+0x344>)
 800ae64:	edd3 7a00 	vldr	s15, [r3]
 800ae68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae70:	d503      	bpl.n	800ae7a <PosProfile_Step+0x312>
	  /*Phase 4*/
	  jerk = rtU.MaxJerk;
 800ae72:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <PosProfile_Step+0x348>)
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	e002      	b.n	800ae80 <PosProfile_Step+0x318>
  } else {
	  /*Phase 4*/
	  jerk = 0.0F;
 800ae7a:	f04f 0300 	mov.w	r3, #0
 800ae7e:	60fb      	str	r3, [r7, #12]
  }

  /* Update for DiscreteIntegrator: '<S1>/Acce Integrator' */
  rtDW.AcceIntegrator_DSTATE += rtU.Ts * jerk;
 800ae80:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <PosProfile_Step+0x340>)
 800ae82:	ed93 7a02 	vldr	s14, [r3, #8]
 800ae86:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <PosProfile_Step+0x348>)
 800ae88:	edd3 6a07 	vldr	s13, [r3, #28]
 800ae8c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae98:	4b03      	ldr	r3, [pc, #12]	; (800aea8 <PosProfile_Step+0x340>)
 800ae9a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800ae9e:	bf00      	nop
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20000b6c 	.word	0x20000b6c
 800aeac:	20000bac 	.word	0x20000bac
 800aeb0:	20000b84 	.word	0x20000b84

0800aeb4 <PosProfile_CalcTimePhase>:

void PosProfile_CalcTimePhase()
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	ed2d 8b04 	vpush	{d8-d9}
 800aeba:	b08c      	sub	sp, #48	; 0x30
 800aebc:	af00      	add	r7, sp, #0
   *  Inport: '<Root>/MaxVel'
   *  Inport: '<Root>/TargetPos'
   *  Inport: '<Root>/TargetVel'
   *  Inport: '<Root>/Ts'
   */
  amax = rtU.MaxAcce;
 800aebe:	4b4e      	ldr	r3, [pc, #312]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	62fb      	str	r3, [r7, #44]	; 0x2c

  real32_T deltaV0 = rtU.MaxVel - rtU.InitVel;
 800aec4:	4b4c      	ldr	r3, [pc, #304]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800aec6:	ed93 7a02 	vldr	s14, [r3, #8]
 800aeca:	4b4b      	ldr	r3, [pc, #300]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800aecc:	edd3 7a03 	vldr	s15, [r3, #12]
 800aed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aed4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Ta_tmp = rtU.MaxAcce * rtU.MaxAcce;
 800aed8:	4b47      	ldr	r3, [pc, #284]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800aeda:	ed93 7a05 	vldr	s14, [r3, #20]
 800aede:	4b46      	ldr	r3, [pc, #280]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800aee0:	edd3 7a05 	vldr	s15, [r3, #20]
 800aee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee8:	edc7 7a08 	vstr	s15, [r7, #32]

  if (deltaV0 * rtU.MaxJerk < Ta_tmp) {
 800aeec:	4b42      	ldr	r3, [pc, #264]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800aeee:	ed93 7a06 	vldr	s14, [r3, #24]
 800aef2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800aef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefa:	ed97 7a08 	vldr	s14, [r7, #32]
 800aefe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af06:	dd2c      	ble.n	800af62 <PosProfile_CalcTimePhase+0xae>
	if (rtU.InitVel > rtU.MaxVel) {
 800af08:	4b3b      	ldr	r3, [pc, #236]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800af0a:	ed93 7a03 	vldr	s14, [r3, #12]
 800af0e:	4b3a      	ldr	r3, [pc, #232]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800af10:	edd3 7a02 	vldr	s15, [r3, #8]
 800af14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1c:	dd08      	ble.n	800af30 <PosProfile_CalcTimePhase+0x7c>
	  PosPTiming.Tj1 = 0.0F;
 800af1e:	4b37      	ldr	r3, [pc, #220]	; (800affc <PosProfile_CalcTimePhase+0x148>)
 800af20:	f04f 0200 	mov.w	r2, #0
 800af24:	60da      	str	r2, [r3, #12]
	  PosPTiming.Ta = 0.0F;
 800af26:	4b35      	ldr	r3, [pc, #212]	; (800affc <PosProfile_CalcTimePhase+0x148>)
 800af28:	f04f 0200 	mov.w	r2, #0
 800af2c:	609a      	str	r2, [r3, #8]
 800af2e:	e032      	b.n	800af96 <PosProfile_CalcTimePhase+0xe2>
	} else {
	  PosPTiming.Tj1 = sqrtf(deltaV0 / rtU.MaxJerk);
 800af30:	4b31      	ldr	r3, [pc, #196]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800af32:	edd3 7a06 	vldr	s15, [r3, #24]
 800af36:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800af3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800af3e:	eeb0 0a66 	vmov.f32	s0, s13
 800af42:	f00b fdf3 	bl	8016b2c <sqrtf>
 800af46:	eef0 7a40 	vmov.f32	s15, s0
 800af4a:	4b2c      	ldr	r3, [pc, #176]	; (800affc <PosProfile_CalcTimePhase+0x148>)
 800af4c:	edc3 7a03 	vstr	s15, [r3, #12]
	  PosPTiming.Ta = 2.0F * PosPTiming.Tj1;
 800af50:	4b2a      	ldr	r3, [pc, #168]	; (800affc <PosProfile_CalcTimePhase+0x148>)
 800af52:	edd3 7a03 	vldr	s15, [r3, #12]
 800af56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af5a:	4b28      	ldr	r3, [pc, #160]	; (800affc <PosProfile_CalcTimePhase+0x148>)
 800af5c:	edc3 7a02 	vstr	s15, [r3, #8]
 800af60:	e019      	b.n	800af96 <PosProfile_CalcTimePhase+0xe2>
	}
  } else {
	  PosPTiming.Tj1 = rtU.MaxAcce / rtU.MaxJerk;
 800af62:	4b25      	ldr	r3, [pc, #148]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800af64:	edd3 6a05 	vldr	s13, [r3, #20]
 800af68:	4b23      	ldr	r3, [pc, #140]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800af6a:	ed93 7a06 	vldr	s14, [r3, #24]
 800af6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af72:	4b22      	ldr	r3, [pc, #136]	; (800affc <PosProfile_CalcTimePhase+0x148>)
 800af74:	edc3 7a03 	vstr	s15, [r3, #12]
	  PosPTiming.Ta = deltaV0 / rtU.MaxAcce + PosPTiming.Tj1;
 800af78:	4b1f      	ldr	r3, [pc, #124]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800af7a:	edd3 7a05 	vldr	s15, [r3, #20]
 800af7e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800af82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af86:	4b1d      	ldr	r3, [pc, #116]	; (800affc <PosProfile_CalcTimePhase+0x148>)
 800af88:	edd3 7a03 	vldr	s15, [r3, #12]
 800af8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af90:	4b1a      	ldr	r3, [pc, #104]	; (800affc <PosProfile_CalcTimePhase+0x148>)
 800af92:	edc3 7a02 	vstr	s15, [r3, #8]
  }

  real32_T deltaV1 = rtU.MaxVel - rtU.TargetVel;
 800af96:	4b18      	ldr	r3, [pc, #96]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800af98:	ed93 7a02 	vldr	s14, [r3, #8]
 800af9c:	4b16      	ldr	r3, [pc, #88]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800af9e:	edd3 7a04 	vldr	s15, [r3, #16]
 800afa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afa6:	edc7 7a07 	vstr	s15, [r7, #28]
  if (deltaV1 * rtU.MaxJerk < Ta_tmp) {
 800afaa:	4b13      	ldr	r3, [pc, #76]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800afac:	ed93 7a06 	vldr	s14, [r3, #24]
 800afb0:	edd7 7a07 	vldr	s15, [r7, #28]
 800afb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb8:	ed97 7a08 	vldr	s14, [r7, #32]
 800afbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800afc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc4:	dd1c      	ble.n	800b000 <PosProfile_CalcTimePhase+0x14c>
	  PosPTiming.Tj2 = sqrtf(deltaV1 / rtU.MaxJerk);
 800afc6:	4b0c      	ldr	r3, [pc, #48]	; (800aff8 <PosProfile_CalcTimePhase+0x144>)
 800afc8:	edd3 7a06 	vldr	s15, [r3, #24]
 800afcc:	ed97 7a07 	vldr	s14, [r7, #28]
 800afd0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800afd4:	eeb0 0a66 	vmov.f32	s0, s13
 800afd8:	f00b fda8 	bl	8016b2c <sqrtf>
 800afdc:	eef0 7a40 	vmov.f32	s15, s0
 800afe0:	4b06      	ldr	r3, [pc, #24]	; (800affc <PosProfile_CalcTimePhase+0x148>)
 800afe2:	edc3 7a05 	vstr	s15, [r3, #20]
	  PosPTiming.Td = 2.0F * PosPTiming.Tj1;
 800afe6:	4b05      	ldr	r3, [pc, #20]	; (800affc <PosProfile_CalcTimePhase+0x148>)
 800afe8:	edd3 7a03 	vldr	s15, [r3, #12]
 800afec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aff0:	4b02      	ldr	r3, [pc, #8]	; (800affc <PosProfile_CalcTimePhase+0x148>)
 800aff2:	edc3 7a04 	vstr	s15, [r3, #16]
 800aff6:	e01d      	b.n	800b034 <PosProfile_CalcTimePhase+0x180>
 800aff8:	20000b84 	.word	0x20000b84
 800affc:	20000bac 	.word	0x20000bac
  } else {
	  PosPTiming.Tj2 = rtU.MaxAcce / rtU.MaxJerk;
 800b000:	4bc5      	ldr	r3, [pc, #788]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b002:	edd3 6a05 	vldr	s13, [r3, #20]
 800b006:	4bc4      	ldr	r3, [pc, #784]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b008:	ed93 7a06 	vldr	s14, [r3, #24]
 800b00c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b010:	4bc2      	ldr	r3, [pc, #776]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b012:	edc3 7a05 	vstr	s15, [r3, #20]
	  PosPTiming.Td = deltaV1 / rtU.MaxAcce + PosPTiming.Tj2;
 800b016:	4bc0      	ldr	r3, [pc, #768]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b018:	edd3 7a05 	vldr	s15, [r3, #20]
 800b01c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b024:	4bbd      	ldr	r3, [pc, #756]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b026:	edd3 7a05 	vldr	s15, [r3, #20]
 800b02a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b02e:	4bbb      	ldr	r3, [pc, #748]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b030:	edc3 7a04 	vstr	s15, [r3, #16]
  }

  /* T = Tv + Ta + Td */
  /* Make sure the targetPos great than initPos
   * assert(rtU.TargetPos > rtU.InitPos);*/
  Tv_tmp_tmp = rtU.TargetPos - rtU.InitPos;
 800b034:	4bb8      	ldr	r3, [pc, #736]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b036:	ed93 7a01 	vldr	s14, [r3, #4]
 800b03a:	4bb7      	ldr	r3, [pc, #732]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b03c:	edd3 7a00 	vldr	s15, [r3]
 800b040:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b044:	edc7 7a06 	vstr	s15, [r7, #24]

  PosPTiming.Tv = (Tv_tmp_tmp / rtU.MaxVel - (rtU.InitVel / rtU.MaxVel + 1.0F) * (PosPTiming.Ta / 2.0F))
 800b048:	4bb3      	ldr	r3, [pc, #716]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b04a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b04e:	edd7 6a06 	vldr	s13, [r7, #24]
 800b052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b056:	4bb0      	ldr	r3, [pc, #704]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b058:	ed93 6a03 	vldr	s12, [r3, #12]
 800b05c:	4bae      	ldr	r3, [pc, #696]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b05e:	edd3 6a02 	vldr	s13, [r3, #8]
 800b062:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b06a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800b06e:	4bab      	ldr	r3, [pc, #684]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b070:	ed93 6a02 	vldr	s12, [r3, #8]
 800b074:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b07c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b080:	ee37 7a67 	vsub.f32	s14, s14, s15
	- (rtU.TargetVel / rtU.MaxVel + 1.0F) * (PosPTiming.Td / 2.0F);
 800b084:	4ba4      	ldr	r3, [pc, #656]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b086:	ed93 6a04 	vldr	s12, [r3, #16]
 800b08a:	4ba3      	ldr	r3, [pc, #652]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b08c:	edd3 6a02 	vldr	s13, [r3, #8]
 800b090:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b098:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800b09c:	4b9f      	ldr	r3, [pc, #636]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b09e:	ed93 6a04 	vldr	s12, [r3, #16]
 800b0a2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b0ae:	ee77 7a67 	vsub.f32	s15, s14, s15
  PosPTiming.Tv = (Tv_tmp_tmp / rtU.MaxVel - (rtU.InitVel / rtU.MaxVel + 1.0F) * (PosPTiming.Ta / 2.0F))
 800b0b2:	4b9a      	ldr	r3, [pc, #616]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b0b4:	edc3 7a01 	vstr	s15, [r3, #4]

  if (PosPTiming.Tv <= 0.0F) {
 800b0b8:	4b98      	ldr	r3, [pc, #608]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b0ba:	edd3 7a01 	vldr	s15, [r3, #4]
 800b0be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c6:	f200 8332 	bhi.w	800b72e <PosProfile_CalcTimePhase+0x87a>
	  /*Cannot acceed the max velocity*/
	  PosPTiming.Tv = 0.0F;
 800b0ca:	4b94      	ldr	r3, [pc, #592]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b0cc:	f04f 0200 	mov.w	r2, #0
 800b0d0:	605a      	str	r2, [r3, #4]
	  delta_tmp = rtU.MaxJerk * rtU.MaxJerk;
 800b0d2:	4b91      	ldr	r3, [pc, #580]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b0d4:	ed93 7a06 	vldr	s14, [r3, #24]
 800b0d8:	4b8f      	ldr	r3, [pc, #572]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b0da:	edd3 7a06 	vldr	s15, [r3, #24]
 800b0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e2:	edc7 7a05 	vstr	s15, [r7, #20]
	  delta_tmp_0 = (rtU.InitVel * rtU.InitVel + rtU.TargetVel * rtU.TargetVel) *
 800b0e6:	4b8c      	ldr	r3, [pc, #560]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b0e8:	ed93 7a03 	vldr	s14, [r3, #12]
 800b0ec:	4b8a      	ldr	r3, [pc, #552]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b0ee:	edd3 7a03 	vldr	s15, [r3, #12]
 800b0f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0f6:	4b88      	ldr	r3, [pc, #544]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b0f8:	edd3 6a04 	vldr	s13, [r3, #16]
 800b0fc:	4b86      	ldr	r3, [pc, #536]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b0fe:	edd3 7a04 	vldr	s15, [r3, #16]
 800b102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b10a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b10e:	edc7 7a04 	vstr	s15, [r7, #16]
	  2.0F;
	  delta_tmp_tmp = rtU.InitVel + rtU.TargetVel;
 800b112:	4b81      	ldr	r3, [pc, #516]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b114:	ed93 7a03 	vldr	s14, [r3, #12]
 800b118:	4b7f      	ldr	r3, [pc, #508]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b11a:	edd3 7a04 	vldr	s15, [r3, #16]
 800b11e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b122:	edc7 7a03 	vstr	s15, [r7, #12]
	  delta_tmp_1 = Tv_tmp_tmp * 4.0F;
 800b126:	edd7 7a06 	vldr	s15, [r7, #24]
 800b12a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b12e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b132:	edc7 7a02 	vstr	s15, [r7, #8]
	  delta = (delta_tmp_1 - 2.0F * rtU.MaxAcce / rtU.MaxJerk * delta_tmp_tmp) *
 800b136:	4b78      	ldr	r3, [pc, #480]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b138:	edd3 7a05 	vldr	s15, [r3, #20]
 800b13c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b140:	4b75      	ldr	r3, [pc, #468]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b142:	edd3 7a06 	vldr	s15, [r3, #24]
 800b146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b14a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b152:	ed97 7a02 	vldr	s14, [r7, #8]
 800b156:	ee37 7a67 	vsub.f32	s14, s14, s15
			  rtU.MaxAcce + (delta_tmp_0 + rt_powf_snf(rtU.MaxAcce, 4.0F) / delta_tmp);
 800b15a:	4b6f      	ldr	r3, [pc, #444]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b15c:	edd3 7a05 	vldr	s15, [r3, #20]
	  delta = (delta_tmp_1 - 2.0F * rtU.MaxAcce / rtU.MaxJerk * delta_tmp_tmp) *
 800b160:	ee27 8a27 	vmul.f32	s16, s14, s15
			  rtU.MaxAcce + (delta_tmp_0 + rt_powf_snf(rtU.MaxAcce, 4.0F) / delta_tmp);
 800b164:	4b6c      	ldr	r3, [pc, #432]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b166:	edd3 7a05 	vldr	s15, [r3, #20]
 800b16a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800b16e:	eeb0 0a67 	vmov.f32	s0, s15
 800b172:	f7ff fc1f 	bl	800a9b4 <rt_powf_snf>
 800b176:	eef0 6a40 	vmov.f32	s13, s0
 800b17a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b182:	edd7 7a04 	vldr	s15, [r7, #16]
 800b186:	ee77 7a27 	vadd.f32	s15, s14, s15
	  delta = (delta_tmp_1 - 2.0F * rtU.MaxAcce / rtU.MaxJerk * delta_tmp_tmp) *
 800b18a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800b18e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  PosPTiming.Tj1 = rtU.MaxAcce / rtU.MaxJerk;
 800b192:	4b61      	ldr	r3, [pc, #388]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b194:	edd3 6a05 	vldr	s13, [r3, #20]
 800b198:	4b5f      	ldr	r3, [pc, #380]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b19a:	ed93 7a06 	vldr	s14, [r3, #24]
 800b19e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1a2:	4b5e      	ldr	r3, [pc, #376]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b1a4:	edc3 7a03 	vstr	s15, [r3, #12]
	  PosPTiming.Td = sqrtf(delta);
 800b1a8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800b1ac:	f00b fcbe 	bl	8016b2c <sqrtf>
 800b1b0:	eef0 7a40 	vmov.f32	s15, s0
 800b1b4:	4b59      	ldr	r3, [pc, #356]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b1b6:	edc3 7a04 	vstr	s15, [r3, #16]
	  Ta_tmp /= rtU.MaxJerk;
 800b1ba:	4b57      	ldr	r3, [pc, #348]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b1bc:	ed93 7a06 	vldr	s14, [r3, #24]
 800b1c0:	edd7 6a08 	vldr	s13, [r7, #32]
 800b1c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c8:	edc7 7a08 	vstr	s15, [r7, #32]
	  PosPTiming.Ta = ((Ta_tmp - 2.0F * rtU.InitVel) + PosPTiming.Td) / 2.0F / rtU.MaxAcce;
 800b1cc:	4b52      	ldr	r3, [pc, #328]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b1ce:	edd3 7a03 	vldr	s15, [r3, #12]
 800b1d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b1d6:	ed97 7a08 	vldr	s14, [r7, #32]
 800b1da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b1de:	4b4f      	ldr	r3, [pc, #316]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b1e0:	edd3 7a04 	vldr	s15, [r3, #16]
 800b1e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b1ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b1f0:	4b49      	ldr	r3, [pc, #292]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b1f2:	ed93 7a05 	vldr	s14, [r3, #20]
 800b1f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1fa:	4b48      	ldr	r3, [pc, #288]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b1fc:	edc3 7a02 	vstr	s15, [r3, #8]
	  PosPTiming.Tj2 = rtU.MaxAcce / rtU.MaxJerk;
 800b200:	4b45      	ldr	r3, [pc, #276]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b202:	edd3 6a05 	vldr	s13, [r3, #20]
 800b206:	4b44      	ldr	r3, [pc, #272]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b208:	ed93 7a06 	vldr	s14, [r3, #24]
 800b20c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b210:	4b42      	ldr	r3, [pc, #264]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b212:	edc3 7a05 	vstr	s15, [r3, #20]
	  PosPTiming.Td = ((Ta_tmp - 2.0F * rtU.TargetVel) + PosPTiming.Td) / 2.0F / rtU.MaxAcce;
 800b216:	4b40      	ldr	r3, [pc, #256]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b218:	edd3 7a04 	vldr	s15, [r3, #16]
 800b21c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b220:	ed97 7a08 	vldr	s14, [r7, #32]
 800b224:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b228:	4b3c      	ldr	r3, [pc, #240]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b22a:	edd3 7a04 	vldr	s15, [r3, #16]
 800b22e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b232:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b236:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b23a:	4b37      	ldr	r3, [pc, #220]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b23c:	ed93 7a05 	vldr	s14, [r3, #20]
 800b240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b244:	4b35      	ldr	r3, [pc, #212]	; (800b31c <PosProfile_CalcTimePhase+0x468>)
 800b246:	edc3 7a04 	vstr	s15, [r3, #16]

	  while ((PosPTiming.Ta < 2.0F * PosPTiming.Tj1) || (PosPTiming.Td < 2.0F * PosPTiming.Tj2)) {
 800b24a:	e0f1      	b.n	800b430 <PosProfile_CalcTimePhase+0x57c>
		  amax -= rtU.MaxAcce * 0.1F;
 800b24c:	4b32      	ldr	r3, [pc, #200]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b24e:	edd3 7a05 	vldr	s15, [r3, #20]
 800b252:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800b320 <PosProfile_CalcTimePhase+0x46c>
 800b256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b25a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b25e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b262:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		  if (amax > 0.0F) {
 800b266:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b26a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b272:	dd57      	ble.n	800b324 <PosProfile_CalcTimePhase+0x470>
			  delta = ((rtU.TargetPos - rtU.InitPos) * 4.0F - 2.0F * amax /
 800b274:	4b28      	ldr	r3, [pc, #160]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b276:	ed93 7a01 	vldr	s14, [r3, #4]
 800b27a:	4b27      	ldr	r3, [pc, #156]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b27c:	edd3 7a00 	vldr	s15, [r3]
 800b280:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b284:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b288:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b28c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b290:	ee37 6aa7 	vadd.f32	s12, s15, s15
					  rtU.MaxJerk * (rtU.InitVel + rtU.TargetVel)) * amax +
 800b294:	4b20      	ldr	r3, [pc, #128]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b296:	edd3 7a06 	vldr	s15, [r3, #24]
			  delta = ((rtU.TargetPos - rtU.InitPos) * 4.0F - 2.0F * amax /
 800b29a:	eec6 6a27 	vdiv.f32	s13, s12, s15
					  rtU.MaxJerk * (rtU.InitVel + rtU.TargetVel)) * amax +
 800b29e:	4b1e      	ldr	r3, [pc, #120]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b2a0:	ed93 6a03 	vldr	s12, [r3, #12]
 800b2a4:	4b1c      	ldr	r3, [pc, #112]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b2a6:	edd3 7a04 	vldr	s15, [r3, #16]
 800b2aa:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b2ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  delta = ((rtU.TargetPos - rtU.InitPos) * 4.0F - 2.0F * amax /
 800b2b2:	ee37 7a67 	vsub.f32	s14, s14, s15
					  rtU.MaxJerk * (rtU.InitVel + rtU.TargetVel)) * amax +
 800b2b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b2ba:	ee27 8a27 	vmul.f32	s16, s14, s15
						 ((rtU.InitVel * rtU.InitVel + rtU.TargetVel * rtU.TargetVel) * 2.0F +
 800b2be:	4b16      	ldr	r3, [pc, #88]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b2c0:	ed93 7a03 	vldr	s14, [r3, #12]
 800b2c4:	4b14      	ldr	r3, [pc, #80]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b2c6:	edd3 7a03 	vldr	s15, [r3, #12]
 800b2ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2ce:	4b12      	ldr	r3, [pc, #72]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b2d0:	edd3 6a04 	vldr	s13, [r3, #16]
 800b2d4:	4b10      	ldr	r3, [pc, #64]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b2d6:	edd3 7a04 	vldr	s15, [r3, #16]
 800b2da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2e2:	ee77 8aa7 	vadd.f32	s17, s15, s15
								 rt_powf_snf(amax, 4.0F) / (rtU.MaxJerk * rtU.MaxJerk));
 800b2e6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800b2ea:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800b2ee:	f7ff fb61 	bl	800a9b4 <rt_powf_snf>
 800b2f2:	eef0 6a40 	vmov.f32	s13, s0
 800b2f6:	4b08      	ldr	r3, [pc, #32]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b2f8:	ed93 7a06 	vldr	s14, [r3, #24]
 800b2fc:	4b06      	ldr	r3, [pc, #24]	; (800b318 <PosProfile_CalcTimePhase+0x464>)
 800b2fe:	edd3 7a06 	vldr	s15, [r3, #24]
 800b302:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b306:	eec6 7a87 	vdiv.f32	s15, s13, s14
						 ((rtU.InitVel * rtU.InitVel + rtU.TargetVel * rtU.TargetVel) * 2.0F +
 800b30a:	ee78 7aa7 	vadd.f32	s15, s17, s15
			  delta = ((rtU.TargetPos - rtU.InitPos) * 4.0F - 2.0F * amax /
 800b30e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800b312:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800b316:	e02e      	b.n	800b376 <PosProfile_CalcTimePhase+0x4c2>
 800b318:	20000b84 	.word	0x20000b84
 800b31c:	20000bac 	.word	0x20000bac
 800b320:	3dcccccd 	.word	0x3dcccccd
		  } else {
			  delta = (delta_tmp_0 + rt_powf_snf(amax, 4.0F) / delta_tmp) -
 800b324:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800b328:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800b32c:	f7ff fb42 	bl	800a9b4 <rt_powf_snf>
 800b330:	eef0 6a40 	vmov.f32	s13, s0
 800b334:	edd7 7a05 	vldr	s15, [r7, #20]
 800b338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b33c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b340:	ee37 7a27 	vadd.f32	s14, s14, s15
					  (delta_tmp_1 - 2.0F * amax / rtU.MaxJerk * delta_tmp_tmp) * amax;
 800b344:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b348:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800b34c:	4ba3      	ldr	r3, [pc, #652]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b34e:	edd3 7a06 	vldr	s15, [r3, #24]
 800b352:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800b356:	edd7 7a03 	vldr	s15, [r7, #12]
 800b35a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b35e:	edd7 6a02 	vldr	s13, [r7, #8]
 800b362:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b366:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b36a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  delta = (delta_tmp_0 + rt_powf_snf(amax, 4.0F) / delta_tmp) -
 800b36e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b372:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  }

	  PosPTiming.Tj1 = amax / rtU.MaxJerk;
 800b376:	4b99      	ldr	r3, [pc, #612]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b378:	ed93 7a06 	vldr	s14, [r3, #24]
 800b37c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b384:	4b96      	ldr	r3, [pc, #600]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b386:	edc3 7a03 	vstr	s15, [r3, #12]
	  PosPTiming.Td = sqrtf(delta);
 800b38a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800b38e:	f00b fbcd 	bl	8016b2c <sqrtf>
 800b392:	eef0 7a40 	vmov.f32	s15, s0
 800b396:	4b92      	ldr	r3, [pc, #584]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b398:	edc3 7a04 	vstr	s15, [r3, #16]
	  PosPTiming.Ta = ((amax * amax / rtU.MaxJerk - 2.0F * rtU.InitVel) + PosPTiming.Td) / 2.0F / amax;
 800b39c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b3a0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b3a4:	4b8d      	ldr	r3, [pc, #564]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b3a6:	edd3 7a06 	vldr	s15, [r3, #24]
 800b3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ae:	4b8b      	ldr	r3, [pc, #556]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b3b0:	edd3 7a03 	vldr	s15, [r3, #12]
 800b3b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b3b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b3bc:	4b88      	ldr	r3, [pc, #544]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b3be:	edd3 7a04 	vldr	s15, [r3, #16]
 800b3c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3c6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b3ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b3ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b3d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3d6:	4b82      	ldr	r3, [pc, #520]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b3d8:	edc3 7a02 	vstr	s15, [r3, #8]
	  PosPTiming.Tj2 = amax / rtU.MaxJerk;
 800b3dc:	4b7f      	ldr	r3, [pc, #508]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b3de:	ed93 7a06 	vldr	s14, [r3, #24]
 800b3e2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b3e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3ea:	4b7d      	ldr	r3, [pc, #500]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b3ec:	edc3 7a05 	vstr	s15, [r3, #20]
	  PosPTiming.Td = ((amax * amax / rtU.MaxJerk - 2.0F * rtU.TargetVel) + PosPTiming.Td) / 2.0F /
 800b3f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b3f4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b3f8:	4b78      	ldr	r3, [pc, #480]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b3fa:	edd3 7a06 	vldr	s15, [r3, #24]
 800b3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b402:	4b76      	ldr	r3, [pc, #472]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b404:	edd3 7a04 	vldr	s15, [r3, #16]
 800b408:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b40c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b410:	4b73      	ldr	r3, [pc, #460]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b412:	edd3 7a04 	vldr	s15, [r3, #16]
 800b416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b41a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b41e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b422:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b42a:	4b6d      	ldr	r3, [pc, #436]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b42c:	edc3 7a04 	vstr	s15, [r3, #16]
	  while ((PosPTiming.Ta < 2.0F * PosPTiming.Tj1) || (PosPTiming.Td < 2.0F * PosPTiming.Tj2)) {
 800b430:	4b6b      	ldr	r3, [pc, #428]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b432:	ed93 7a02 	vldr	s14, [r3, #8]
 800b436:	4b6a      	ldr	r3, [pc, #424]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b438:	edd3 7a03 	vldr	s15, [r3, #12]
 800b43c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b448:	f53f af00 	bmi.w	800b24c <PosProfile_CalcTimePhase+0x398>
 800b44c:	4b64      	ldr	r3, [pc, #400]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b44e:	ed93 7a04 	vldr	s14, [r3, #16]
 800b452:	4b63      	ldr	r3, [pc, #396]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b454:	edd3 7a05 	vldr	s15, [r3, #20]
 800b458:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b45c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b464:	f53f aef2 	bmi.w	800b24c <PosProfile_CalcTimePhase+0x398>
		amax;
	}

	real32_T deltaV = fabsf(rtU.TargetVel - rtU.InitVel);
 800b468:	4b5c      	ldr	r3, [pc, #368]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b46a:	ed93 7a04 	vldr	s14, [r3, #16]
 800b46e:	4b5b      	ldr	r3, [pc, #364]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b470:	edd3 7a03 	vldr	s15, [r3, #12]
 800b474:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b478:	eef0 7ae7 	vabs.f32	s15, s15
 800b47c:	edc7 7a01 	vstr	s15, [r7, #4]
	if ((PosPTiming.Ta < 0.0F) || (PosPTiming.Td < 0.0F)) {
 800b480:	4b57      	ldr	r3, [pc, #348]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b482:	edd3 7a02 	vldr	s15, [r3, #8]
 800b486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b48e:	d408      	bmi.n	800b4a2 <PosProfile_CalcTimePhase+0x5ee>
 800b490:	4b53      	ldr	r3, [pc, #332]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b492:	edd3 7a04 	vldr	s15, [r3, #16]
 800b496:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49e:	f140 8098 	bpl.w	800b5d2 <PosProfile_CalcTimePhase+0x71e>

	  if (rtU.InitVel > rtU.TargetVel) {
 800b4a2:	4b4e      	ldr	r3, [pc, #312]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b4a4:	ed93 7a03 	vldr	s14, [r3, #12]
 800b4a8:	4b4c      	ldr	r3, [pc, #304]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b4aa:	edd3 7a04 	vldr	s15, [r3, #16]
 800b4ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b6:	dd46      	ble.n	800b546 <PosProfile_CalcTimePhase+0x692>
		  /*仅包含减速段*/
		  PosPTiming.Ta = 0.0F;
 800b4b8:	4b49      	ldr	r3, [pc, #292]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b4ba:	f04f 0200 	mov.w	r2, #0
 800b4be:	609a      	str	r2, [r3, #8]
		  PosPTiming.Tj1 = 0.0F;
 800b4c0:	4b47      	ldr	r3, [pc, #284]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b4c2:	f04f 0200 	mov.w	r2, #0
 800b4c6:	60da      	str	r2, [r3, #12]
		  PosPTiming.Td = Tv_tmp_tmp * 2.0F / delta_tmp_tmp;
 800b4c8:	edd7 7a06 	vldr	s15, [r7, #24]
 800b4cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b4d0:	ed97 7a03 	vldr	s14, [r7, #12]
 800b4d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4d8:	4b41      	ldr	r3, [pc, #260]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b4da:	edc3 7a04 	vstr	s15, [r3, #16]
		  PosPTiming.Tj2 = (Tv_tmp_tmp * rtU.MaxJerk - sqrtf((Tv_tmp_tmp * Tv_tmp_tmp *
 800b4de:	4b3f      	ldr	r3, [pc, #252]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b4e0:	ed93 7a06 	vldr	s14, [r3, #24]
 800b4e4:	edd7 7a06 	vldr	s15, [r7, #24]
 800b4e8:	ee27 8a27 	vmul.f32	s16, s14, s15
 800b4ec:	edd7 7a06 	vldr	s15, [r7, #24]
 800b4f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
				 rtU.MaxJerk + delta_tmp_tmp * delta_tmp_tmp * deltaV) * rtU.MaxJerk)) / rtU.MaxJerk / delta_tmp_tmp;
 800b4f4:	4b39      	ldr	r3, [pc, #228]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b4f6:	edd3 7a06 	vldr	s15, [r3, #24]
		  PosPTiming.Tj2 = (Tv_tmp_tmp * rtU.MaxJerk - sqrtf((Tv_tmp_tmp * Tv_tmp_tmp *
 800b4fa:	ee27 7a27 	vmul.f32	s14, s14, s15
				 rtU.MaxJerk + delta_tmp_tmp * delta_tmp_tmp * deltaV) * rtU.MaxJerk)) / rtU.MaxJerk / delta_tmp_tmp;
 800b4fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800b502:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b506:	edd7 7a01 	vldr	s15, [r7, #4]
 800b50a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b50e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b512:	4b32      	ldr	r3, [pc, #200]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b514:	edd3 7a06 	vldr	s15, [r3, #24]
		  PosPTiming.Tj2 = (Tv_tmp_tmp * rtU.MaxJerk - sqrtf((Tv_tmp_tmp * Tv_tmp_tmp *
 800b518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b51c:	eeb0 0a67 	vmov.f32	s0, s15
 800b520:	f00b fb04 	bl	8016b2c <sqrtf>
 800b524:	eef0 7a40 	vmov.f32	s15, s0
 800b528:	ee38 7a67 	vsub.f32	s14, s16, s15
				 rtU.MaxJerk + delta_tmp_tmp * delta_tmp_tmp * deltaV) * rtU.MaxJerk)) / rtU.MaxJerk / delta_tmp_tmp;
 800b52c:	4b2b      	ldr	r3, [pc, #172]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b52e:	edd3 7a06 	vldr	s15, [r3, #24]
 800b532:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b536:	ed97 7a03 	vldr	s14, [r7, #12]
 800b53a:	eec6 7a87 	vdiv.f32	s15, s13, s14
		  PosPTiming.Tj2 = (Tv_tmp_tmp * rtU.MaxJerk - sqrtf((Tv_tmp_tmp * Tv_tmp_tmp *
 800b53e:	4b28      	ldr	r3, [pc, #160]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b540:	edc3 7a05 	vstr	s15, [r3, #20]
 800b544:	e045      	b.n	800b5d2 <PosProfile_CalcTimePhase+0x71e>
	  } else {
		  PosPTiming.Td = 0.0F;
 800b546:	4b26      	ldr	r3, [pc, #152]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b548:	f04f 0200 	mov.w	r2, #0
 800b54c:	611a      	str	r2, [r3, #16]
		  PosPTiming.Tj2 = 0.0F;
 800b54e:	4b24      	ldr	r3, [pc, #144]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b550:	f04f 0200 	mov.w	r2, #0
 800b554:	615a      	str	r2, [r3, #20]
		  PosPTiming.Ta = Tv_tmp_tmp * 2.0F / delta_tmp_tmp;
 800b556:	edd7 7a06 	vldr	s15, [r7, #24]
 800b55a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b55e:	ed97 7a03 	vldr	s14, [r7, #12]
 800b562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b566:	4b1e      	ldr	r3, [pc, #120]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b568:	edc3 7a02 	vstr	s15, [r3, #8]
		  PosPTiming.Tj1 = (Tv_tmp_tmp * rtU.MaxJerk - sqrtf((Tv_tmp_tmp * Tv_tmp_tmp *
 800b56c:	4b1b      	ldr	r3, [pc, #108]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b56e:	ed93 7a06 	vldr	s14, [r3, #24]
 800b572:	edd7 7a06 	vldr	s15, [r7, #24]
 800b576:	ee27 8a27 	vmul.f32	s16, s14, s15
 800b57a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b57e:	ee27 7aa7 	vmul.f32	s14, s15, s15
				 rtU.MaxJerk - delta_tmp_tmp * delta_tmp_tmp * deltaV) * rtU.MaxJerk)) / rtU.MaxJerk / delta_tmp_tmp;
 800b582:	4b16      	ldr	r3, [pc, #88]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b584:	edd3 7a06 	vldr	s15, [r3, #24]
		  PosPTiming.Tj1 = (Tv_tmp_tmp * rtU.MaxJerk - sqrtf((Tv_tmp_tmp * Tv_tmp_tmp *
 800b588:	ee27 7a27 	vmul.f32	s14, s14, s15
				 rtU.MaxJerk - delta_tmp_tmp * delta_tmp_tmp * deltaV) * rtU.MaxJerk)) / rtU.MaxJerk / delta_tmp_tmp;
 800b58c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b590:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b594:	edd7 7a01 	vldr	s15, [r7, #4]
 800b598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b59c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b5a0:	4b0e      	ldr	r3, [pc, #56]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b5a2:	edd3 7a06 	vldr	s15, [r3, #24]
		  PosPTiming.Tj1 = (Tv_tmp_tmp * rtU.MaxJerk - sqrtf((Tv_tmp_tmp * Tv_tmp_tmp *
 800b5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b5ae:	f00b fabd 	bl	8016b2c <sqrtf>
 800b5b2:	eef0 7a40 	vmov.f32	s15, s0
 800b5b6:	ee38 7a67 	vsub.f32	s14, s16, s15
				 rtU.MaxJerk - delta_tmp_tmp * delta_tmp_tmp * deltaV) * rtU.MaxJerk)) / rtU.MaxJerk / delta_tmp_tmp;
 800b5ba:	4b08      	ldr	r3, [pc, #32]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b5bc:	edd3 7a06 	vldr	s15, [r3, #24]
 800b5c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b5c4:	ed97 7a03 	vldr	s14, [r7, #12]
 800b5c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
		  PosPTiming.Tj1 = (Tv_tmp_tmp * rtU.MaxJerk - sqrtf((Tv_tmp_tmp * Tv_tmp_tmp *
 800b5cc:	4b04      	ldr	r3, [pc, #16]	; (800b5e0 <PosProfile_CalcTimePhase+0x72c>)
 800b5ce:	edc3 7a03 	vstr	s15, [r3, #12]
	  }
	}

	amax = rtU.MaxAcce;
 800b5d2:	4b02      	ldr	r3, [pc, #8]	; (800b5dc <PosProfile_CalcTimePhase+0x728>)
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (PosPTiming.Td < 2.0F * PosPTiming.Tj2) {
 800b5d8:	e03e      	b.n	800b658 <PosProfile_CalcTimePhase+0x7a4>
 800b5da:	bf00      	nop
 800b5dc:	20000b84 	.word	0x20000b84
 800b5e0:	20000bac 	.word	0x20000bac
	  amax -= rtU.MaxAcce * 0.1F;
 800b5e4:	4b63      	ldr	r3, [pc, #396]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b5e6:	edd3 7a05 	vldr	s15, [r3, #20]
 800b5ea:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800b778 <PosProfile_CalcTimePhase+0x8c4>
 800b5ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5f2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b5f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5fa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  PosPTiming.Tj2 = amax / rtU.MaxJerk;
 800b5fe:	4b5d      	ldr	r3, [pc, #372]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b600:	ed93 7a06 	vldr	s14, [r3, #24]
 800b604:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b60c:	4b5b      	ldr	r3, [pc, #364]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b60e:	edc3 7a05 	vstr	s15, [r3, #20]
	  PosPTiming.Td = ((amax * amax / rtU.MaxJerk - 2.0F * rtU.TargetVel) + sqrtf(delta)) /
 800b612:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b616:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b61a:	4b56      	ldr	r3, [pc, #344]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b61c:	edd3 7a06 	vldr	s15, [r3, #24]
 800b620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b624:	4b53      	ldr	r3, [pc, #332]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b626:	edd3 7a04 	vldr	s15, [r3, #16]
 800b62a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b62e:	ee37 8a67 	vsub.f32	s16, s14, s15
 800b632:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800b636:	f00b fa79 	bl	8016b2c <sqrtf>
 800b63a:	eef0 7a40 	vmov.f32	s15, s0
 800b63e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800b642:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b646:	eec7 6a87 	vdiv.f32	s13, s15, s14
		2.0F / amax;
 800b64a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b64e:	eec6 7a87 	vdiv.f32	s15, s13, s14
	  PosPTiming.Td = ((amax * amax / rtU.MaxJerk - 2.0F * rtU.TargetVel) + sqrtf(delta)) /
 800b652:	4b4a      	ldr	r3, [pc, #296]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b654:	edc3 7a04 	vstr	s15, [r3, #16]
	while (PosPTiming.Td < 2.0F * PosPTiming.Tj2) {
 800b658:	4b48      	ldr	r3, [pc, #288]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b65a:	ed93 7a04 	vldr	s14, [r3, #16]
 800b65e:	4b47      	ldr	r3, [pc, #284]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b660:	edd3 7a05 	vldr	s15, [r3, #20]
 800b664:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b670:	d4b8      	bmi.n	800b5e4 <PosProfile_CalcTimePhase+0x730>
	}

	if (PosPTiming.Td < 0.0F) {
 800b672:	4b42      	ldr	r3, [pc, #264]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b674:	edd3 7a04 	vldr	s15, [r3, #16]
 800b678:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b680:	d555      	bpl.n	800b72e <PosProfile_CalcTimePhase+0x87a>
		/*仅包含加速段*/
		PosPTiming.Td = 0.0F;
 800b682:	4b3e      	ldr	r3, [pc, #248]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b684:	f04f 0200 	mov.w	r2, #0
 800b688:	611a      	str	r2, [r3, #16]
		PosPTiming.Tj2 = 0.0F;
 800b68a:	4b3c      	ldr	r3, [pc, #240]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b68c:	f04f 0200 	mov.w	r2, #0
 800b690:	615a      	str	r2, [r3, #20]
		PosPTiming.Ta = (rtU.TargetPos - rtU.InitPos) * 2.0F / (rtU.TargetVel + rtU.InitVel);
 800b692:	4b38      	ldr	r3, [pc, #224]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b694:	ed93 7a01 	vldr	s14, [r3, #4]
 800b698:	4b36      	ldr	r3, [pc, #216]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b69a:	edd3 7a00 	vldr	s15, [r3]
 800b69e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6a2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b6a6:	4b33      	ldr	r3, [pc, #204]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b6a8:	ed93 7a04 	vldr	s14, [r3, #16]
 800b6ac:	4b31      	ldr	r3, [pc, #196]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b6ae:	edd3 7a03 	vldr	s15, [r3, #12]
 800b6b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6ba:	4b30      	ldr	r3, [pc, #192]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b6bc:	edc3 7a02 	vstr	s15, [r3, #8]
		PosPTiming.Tj1 = ((rtU.TargetPos - rtU.InitPos) * rtU.MaxJerk - (Tv_tmp_tmp *
 800b6c0:	4b2c      	ldr	r3, [pc, #176]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b6c2:	ed93 7a01 	vldr	s14, [r3, #4]
 800b6c6:	4b2b      	ldr	r3, [pc, #172]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b6c8:	edd3 7a00 	vldr	s15, [r3]
 800b6cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b6d0:	4b28      	ldr	r3, [pc, #160]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b6d2:	edd3 7a06 	vldr	s15, [r3, #24]
 800b6d6:	ee27 8a27 	vmul.f32	s16, s14, s15
 800b6da:	edd7 7a06 	vldr	s15, [r7, #24]
 800b6de:	ee27 7aa7 	vmul.f32	s14, s15, s15
			  Tv_tmp_tmp * rtU.MaxJerk - delta_tmp_tmp * delta_tmp_tmp * sqrtf(deltaV)) * rtU.MaxJerk) / rtU.MaxJerk /
 800b6e2:	4b24      	ldr	r3, [pc, #144]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b6e4:	edd3 7a06 	vldr	s15, [r3, #24]
 800b6e8:	ee67 8a27 	vmul.f32	s17, s14, s15
 800b6ec:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6f0:	ee27 9aa7 	vmul.f32	s18, s15, s15
 800b6f4:	ed97 0a01 	vldr	s0, [r7, #4]
 800b6f8:	f00b fa18 	bl	8016b2c <sqrtf>
 800b6fc:	eef0 7a40 	vmov.f32	s15, s0
 800b700:	ee69 7a27 	vmul.f32	s15, s18, s15
 800b704:	ee38 7ae7 	vsub.f32	s14, s17, s15
 800b708:	4b1a      	ldr	r3, [pc, #104]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b70a:	edd3 7a06 	vldr	s15, [r3, #24]
 800b70e:	ee67 7a27 	vmul.f32	s15, s14, s15
		PosPTiming.Tj1 = ((rtU.TargetPos - rtU.InitPos) * rtU.MaxJerk - (Tv_tmp_tmp *
 800b712:	ee38 7a67 	vsub.f32	s14, s16, s15
			  Tv_tmp_tmp * rtU.MaxJerk - delta_tmp_tmp * delta_tmp_tmp * sqrtf(deltaV)) * rtU.MaxJerk) / rtU.MaxJerk /
 800b716:	4b17      	ldr	r3, [pc, #92]	; (800b774 <PosProfile_CalcTimePhase+0x8c0>)
 800b718:	edd3 7a06 	vldr	s15, [r3, #24]
 800b71c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b720:	ed97 7a03 	vldr	s14, [r7, #12]
 800b724:	eec6 7a87 	vdiv.f32	s15, s13, s14
		PosPTiming.Tj1 = ((rtU.TargetPos - rtU.InitPos) * rtU.MaxJerk - (Tv_tmp_tmp *
 800b728:	4b14      	ldr	r3, [pc, #80]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b72a:	edc3 7a03 	vstr	s15, [r3, #12]
  /* All time phase calculate end
   * T = Tv + Ta + Td
   * Ta >= 2*Tj1
   * Td >= 2*Tj2
   * */
  PosPTiming.T = PosPTiming.Tv + PosPTiming.Ta + PosPTiming.Td;
 800b72e:	4b13      	ldr	r3, [pc, #76]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b730:	ed93 7a01 	vldr	s14, [r3, #4]
 800b734:	4b11      	ldr	r3, [pc, #68]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b736:	edd3 7a02 	vldr	s15, [r3, #8]
 800b73a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b73e:	4b0f      	ldr	r3, [pc, #60]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b740:	edd3 7a04 	vldr	s15, [r3, #16]
 800b744:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b748:	4b0c      	ldr	r3, [pc, #48]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b74a:	edc3 7a00 	vstr	s15, [r3]
  PosPTiming.ticks = PosPTiming.T * 1000;
 800b74e:	4b0b      	ldr	r3, [pc, #44]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b750:	edd3 7a00 	vldr	s15, [r3]
 800b754:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800b780 <PosProfile_CalcTimePhase+0x8cc>
 800b758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b75c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b760:	ee17 2a90 	vmov	r2, s15
 800b764:	4b05      	ldr	r3, [pc, #20]	; (800b77c <PosProfile_CalcTimePhase+0x8c8>)
 800b766:	619a      	str	r2, [r3, #24]
}
 800b768:	bf00      	nop
 800b76a:	3730      	adds	r7, #48	; 0x30
 800b76c:	46bd      	mov	sp, r7
 800b76e:	ecbd 8b04 	vpop	{d8-d9}
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20000b84 	.word	0x20000b84
 800b778:	3dcccccd 	.word	0x3dcccccd
 800b77c:	20000bac 	.word	0x20000bac
 800b780:	447a0000 	.word	0x447a0000

0800b784 <PosProfile_Initialize>:

/* Model initialize function */
void PosProfile_Initialize(void)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 800b788:	2008      	movs	r0, #8
 800b78a:	f7ff f88d 	bl	800a8a8 <rt_InitInfAndNaN>

  /* InitializeConditions for DiscreteIntegrator: '<S1>/Pos Integrator' */
  rtDW.PosIntegrator_IC_LOADING = 1U;
 800b78e:	4b05      	ldr	r3, [pc, #20]	; (800b7a4 <PosProfile_Initialize+0x20>)
 800b790:	2201      	movs	r2, #1
 800b792:	751a      	strb	r2, [r3, #20]

  /* InitializeConditions for DiscreteIntegrator: '<S1>/Vel Integrator' */
  rtDW.VelIntegrator_IC_LOADING = 1U;
 800b794:	4b03      	ldr	r3, [pc, #12]	; (800b7a4 <PosProfile_Initialize+0x20>)
 800b796:	2201      	movs	r2, #1
 800b798:	755a      	strb	r2, [r3, #21]

  /* Initialize the ts counter*/
  rtDW.t_not_empty = false;
 800b79a:	4b02      	ldr	r3, [pc, #8]	; (800b7a4 <PosProfile_Initialize+0x20>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	759a      	strb	r2, [r3, #22]
}
 800b7a0:	bf00      	nop
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	20000b6c 	.word	0x20000b6c

0800b7a8 <PosProfile_Start>:
 * maxAcce:   max acceleration
 * maxJerk:   max jerk
 * ts:        profile per step time stamp
 * */
void PosProfile_Start(uint32_T distance, int32_T curVel, int32_T targetVel, uint32_T maxVel, uint32_T maxAcce, uint32_T maxJerk, real32_T ts)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6178      	str	r0, [r7, #20]
 800b7b0:	6139      	str	r1, [r7, #16]
 800b7b2:	60fa      	str	r2, [r7, #12]
 800b7b4:	60bb      	str	r3, [r7, #8]
 800b7b6:	ed87 0a01 	vstr	s0, [r7, #4]
	rtU.InitPos = 0.0F;
 800b7ba:	4b29      	ldr	r3, [pc, #164]	; (800b860 <PosProfile_Start+0xb8>)
 800b7bc:	f04f 0200 	mov.w	r2, #0
 800b7c0:	601a      	str	r2, [r3, #0]
	rtU.TargetPos = distance;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	ee07 3a90 	vmov	s15, r3
 800b7c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7cc:	4b24      	ldr	r3, [pc, #144]	; (800b860 <PosProfile_Start+0xb8>)
 800b7ce:	edc3 7a01 	vstr	s15, [r3, #4]

	rtU.InitVel = curVel;
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	ee07 3a90 	vmov	s15, r3
 800b7d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7dc:	4b20      	ldr	r3, [pc, #128]	; (800b860 <PosProfile_Start+0xb8>)
 800b7de:	edc3 7a03 	vstr	s15, [r3, #12]
	rtU.TargetVel = targetVel;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	ee07 3a90 	vmov	s15, r3
 800b7e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7ec:	4b1c      	ldr	r3, [pc, #112]	; (800b860 <PosProfile_Start+0xb8>)
 800b7ee:	edc3 7a04 	vstr	s15, [r3, #16]

	rtU.MaxVel  = maxVel;
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	ee07 3a90 	vmov	s15, r3
 800b7f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7fc:	4b18      	ldr	r3, [pc, #96]	; (800b860 <PosProfile_Start+0xb8>)
 800b7fe:	edc3 7a02 	vstr	s15, [r3, #8]
	rtU.MaxAcce = maxAcce;
 800b802:	6a3b      	ldr	r3, [r7, #32]
 800b804:	ee07 3a90 	vmov	s15, r3
 800b808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b80c:	4b14      	ldr	r3, [pc, #80]	; (800b860 <PosProfile_Start+0xb8>)
 800b80e:	edc3 7a05 	vstr	s15, [r3, #20]
	rtU.MaxJerk = maxJerk;
 800b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81c:	4b10      	ldr	r3, [pc, #64]	; (800b860 <PosProfile_Start+0xb8>)
 800b81e:	edc3 7a06 	vstr	s15, [r3, #24]

	/*Time space per profile discrete step*/
	rtU.Ts = ts;
 800b822:	4a0f      	ldr	r2, [pc, #60]	; (800b860 <PosProfile_Start+0xb8>)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	61d3      	str	r3, [r2, #28]

	/* InitializeConditions for DiscreteIntegrator: '<S1>/Pos Integrator' */
	rtDW.PosIntegrator_IC_LOADING = 0U;
 800b828:	4b0e      	ldr	r3, [pc, #56]	; (800b864 <PosProfile_Start+0xbc>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	751a      	strb	r2, [r3, #20]
    rtDW.PosIntegrator_DSTATE = rtU.InitPos;
 800b82e:	4b0c      	ldr	r3, [pc, #48]	; (800b860 <PosProfile_Start+0xb8>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a0c      	ldr	r2, [pc, #48]	; (800b864 <PosProfile_Start+0xbc>)
 800b834:	6013      	str	r3, [r2, #0]

	/* InitializeConditions for DiscreteIntegrator: '<S1>/Vel Integrator' */
	rtDW.VelIntegrator_IC_LOADING = 0U;
 800b836:	4b0b      	ldr	r3, [pc, #44]	; (800b864 <PosProfile_Start+0xbc>)
 800b838:	2200      	movs	r2, #0
 800b83a:	755a      	strb	r2, [r3, #21]
    rtDW.VelIntegrator_DSTATE = rtU.InitVel;
 800b83c:	4b08      	ldr	r3, [pc, #32]	; (800b860 <PosProfile_Start+0xb8>)
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	4a08      	ldr	r2, [pc, #32]	; (800b864 <PosProfile_Start+0xbc>)
 800b842:	6053      	str	r3, [r2, #4]

    /* Reset the ts counter*/
    rtDW.t_not_empty = false;
 800b844:	4b07      	ldr	r3, [pc, #28]	; (800b864 <PosProfile_Start+0xbc>)
 800b846:	2200      	movs	r2, #0
 800b848:	759a      	strb	r2, [r3, #22]

    /* Velocity tranc error*/
    rtDW.VelTrancErr = 0.0F;
 800b84a:	4b06      	ldr	r3, [pc, #24]	; (800b864 <PosProfile_Start+0xbc>)
 800b84c:	f04f 0200 	mov.w	r2, #0
 800b850:	611a      	str	r2, [r3, #16]

	PosProfile_CalcTimePhase();
 800b852:	f7ff fb2f 	bl	800aeb4 <PosProfile_CalcTimePhase>
}
 800b856:	bf00      	nop
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000b84 	.word	0x20000b84
 800b864:	20000b6c 	.word	0x20000b6c

0800b868 <PosProfile_StepOver>:

boolean_T PosProfile_StepOver(uint32_T ticks)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
	if (ticks >= PosPTiming.ticks){
 800b870:	4b06      	ldr	r3, [pc, #24]	; (800b88c <PosProfile_StepOver+0x24>)
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	429a      	cmp	r2, r3
 800b878:	d301      	bcc.n	800b87e <PosProfile_StepOver+0x16>
		return true;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e000      	b.n	800b880 <PosProfile_StepOver+0x18>
	}
	return false;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	20000bac 	.word	0x20000bac

0800b890 <TPB_Init>:

extern MT_MotionDrive_t g_MotionDriveHandle;
extern Node_DriveProfile_t g_NodeDriveProfile;

void TPB_Init()
{
 800b890:	b580      	push	{r7, lr}
 800b892:	af00      	add	r7, sp, #0
	g_BlocksChain.pair = 0;
 800b894:	4b09      	ldr	r3, [pc, #36]	; (800b8bc <TPB_Init+0x2c>)
 800b896:	2200      	movs	r2, #0
 800b898:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	g_BlocksChain.tickcount = 0;
 800b89c:	4b07      	ldr	r3, [pc, #28]	; (800b8bc <TPB_Init+0x2c>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	629a      	str	r2, [r3, #40]	; 0x28
	memset(&g_BlocksChain.curBlock, 0, sizeof(TPBlock));
 800b8a2:	2214      	movs	r2, #20
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	4805      	ldr	r0, [pc, #20]	; (800b8bc <TPB_Init+0x2c>)
 800b8a8:	f00b fe22 	bl	80174f0 <memset>
	memset(&g_BlocksChain.lastBlock, 0, sizeof(TPBlock));
 800b8ac:	2214      	movs	r2, #20
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	4803      	ldr	r0, [pc, #12]	; (800b8c0 <TPB_Init+0x30>)
 800b8b2:	f00b fe1d 	bl	80174f0 <memset>
}
 800b8b6:	bf00      	nop
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20000bec 	.word	0x20000bec
 800b8c0:	20000c00 	.word	0x20000c00
 800b8c4:	00000000 	.word	0x00000000

0800b8c8 <TPB_blockspairReady>:

void TPB_blockspairReady()
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b088      	sub	sp, #32
 800b8cc:	af00      	add	r7, sp, #0
	/*rad ratio: (-12416-8357)/(1.57-0.01) = -13316.0256*/

	/*Joint 2: home - upperlimit = 12123, homeoffset: 8357, upperlimit(appr): 469*/
	/*rad ratio: (12123-469)/(1.57-0.01) = 8618.590*/

	float joint_lowerlimit_fromOrigin = g_NodeDriveProfile.lower_limit_range;
 800b8ce:	4b30      	ldr	r3, [pc, #192]	; (800b990 <TPB_blockspairReady+0xc8>)
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	61fb      	str	r3, [r7, #28]
	float ratio = g_NodeDriveProfile.ratio;
 800b8d4:	4b2e      	ldr	r3, [pc, #184]	; (800b990 <TPB_blockspairReady+0xc8>)
 800b8d6:	695b      	ldr	r3, [r3, #20]
 800b8d8:	61bb      	str	r3, [r7, #24]

	/*setup the acceleration*/
	/*setup the final speed*/
	MotionMsgItem_t item;

	item.velocity = g_BlocksChain.curBlock.velocity * ratio;
 800b8da:	4b2e      	ldr	r3, [pc, #184]	; (800b994 <TPB_blockspairReady+0xcc>)
 800b8dc:	ed93 7a03 	vldr	s14, [r3, #12]
 800b8e0:	edd7 7a06 	vldr	s15, [r7, #24]
 800b8e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e8:	edc7 7a04 	vstr	s15, [r7, #16]
	item.acceleration =  g_BlocksChain.curBlock.acceleration * ratio;
 800b8ec:	4b29      	ldr	r3, [pc, #164]	; (800b994 <TPB_blockspairReady+0xcc>)
 800b8ee:	ed93 7a04 	vldr	s14, [r3, #16]
 800b8f2:	edd7 7a06 	vldr	s15, [r7, #24]
 800b8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8fa:	edc7 7a05 	vstr	s15, [r7, #20]

	item.position = ceilf(g_BlocksChain.curBlock.position * ratio) + joint_lowerlimit_fromOrigin;
 800b8fe:	4b25      	ldr	r3, [pc, #148]	; (800b994 <TPB_blockspairReady+0xcc>)
 800b900:	ed93 7a02 	vldr	s14, [r3, #8]
 800b904:	edd7 7a06 	vldr	s15, [r7, #24]
 800b908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b90c:	eeb0 0a67 	vmov.f32	s0, s15
 800b910:	f00b f816 	bl	8016940 <ceilf>
 800b914:	eeb0 7a40 	vmov.f32	s14, s0
 800b918:	edd7 7a07 	vldr	s15, [r7, #28]
 800b91c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b924:	ee17 3a90 	vmov	r3, s15
 800b928:	60fb      	str	r3, [r7, #12]

	item.duration = g_BlocksChain.curBlock.serialNumber - g_BlocksChain.lastBlock.serialNumber;
 800b92a:	4b1a      	ldr	r3, [pc, #104]	; (800b994 <TPB_blockspairReady+0xcc>)
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	4b19      	ldr	r3, [pc, #100]	; (800b994 <TPB_blockspairReady+0xcc>)
 800b930:	699b      	ldr	r3, [r3, #24]
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	60bb      	str	r3, [r7, #8]
	if (item.duration > 10) {
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	2b0a      	cmp	r3, #10
 800b93a:	dd01      	ble.n	800b940 <TPB_blockspairReady+0x78>
		item.duration = 1;
 800b93c:	2301      	movs	r3, #1
 800b93e:	60bb      	str	r3, [r7, #8]
	}

	item.code = MMC_TargetSet;
 800b940:	f240 2301 	movw	r3, #513	; 0x201
 800b944:	80bb      	strh	r3, [r7, #4]

	if (fabsf(item.velocity) <= 0.0001) {
 800b946:	edd7 7a04 	vldr	s15, [r7, #16]
 800b94a:	eef0 7ae7 	vabs.f32	s15, s15
 800b94e:	ee17 0a90 	vmov	r0, s15
 800b952:	f7f4 fdf9 	bl	8000548 <__aeabi_f2d>
 800b956:	a30c      	add	r3, pc, #48	; (adr r3, 800b988 <TPB_blockspairReady+0xc0>)
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	f7f5 f8c8 	bl	8000af0 <__aeabi_dcmple>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <TPB_blockspairReady+0xa4>
		/*S-Curve interpolation*/
		item.type = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	80fb      	strh	r3, [r7, #6]
 800b96a:	e001      	b.n	800b970 <TPB_blockspairReady+0xa8>
	}else {
		/*Polyminic interpolation*/
		item.type = 1;
 800b96c:	2301      	movs	r3, #1
 800b96e:	80fb      	strh	r3, [r7, #6]
	}

	xQueueSend(g_MotionDriveHandle.posQueue, &item, 0);
 800b970:	4b09      	ldr	r3, [pc, #36]	; (800b998 <TPB_blockspairReady+0xd0>)
 800b972:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b974:	1d39      	adds	r1, r7, #4
 800b976:	2300      	movs	r3, #0
 800b978:	2200      	movs	r2, #0
 800b97a:	f007 ff2b 	bl	80137d4 <xQueueGenericSend>
}
 800b97e:	bf00      	nop
 800b980:	3720      	adds	r7, #32
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	eb1c432d 	.word	0xeb1c432d
 800b98c:	3f1a36e2 	.word	0x3f1a36e2
 800b990:	20000a94 	.word	0x20000a94
 800b994:	20000bec 	.word	0x20000bec
 800b998:	20000b18 	.word	0x20000b18

0800b99c <TPB_curblockReady>:

void TPB_curblockReady()
{
 800b99c:	b5b0      	push	{r4, r5, r7, lr}
 800b99e:	af00      	add	r7, sp, #0
	/*compare the last block msg*/
	if (g_BlocksChain.lastBlock.position != g_BlocksChain.curBlock.position) {
 800b9a0:	4b0e      	ldr	r3, [pc, #56]	; (800b9dc <TPB_curblockReady+0x40>)
 800b9a2:	ed93 7a07 	vldr	s14, [r3, #28]
 800b9a6:	4b0d      	ldr	r3, [pc, #52]	; (800b9dc <TPB_curblockReady+0x40>)
 800b9a8:	edd3 7a02 	vldr	s15, [r3, #8]
 800b9ac:	eeb4 7a67 	vcmp.f32	s14, s15
 800b9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b4:	d001      	beq.n	800b9ba <TPB_curblockReady+0x1e>
		/*hold point*/
		TPB_blockspairReady();
 800b9b6:	f7ff ff87 	bl	800b8c8 <TPB_blockspairReady>
	}else {

	}

	memcpy(&g_BlocksChain.lastBlock, &g_BlocksChain.curBlock, sizeof(TPBlock));
 800b9ba:	4b08      	ldr	r3, [pc, #32]	; (800b9dc <TPB_curblockReady+0x40>)
 800b9bc:	4a07      	ldr	r2, [pc, #28]	; (800b9dc <TPB_curblockReady+0x40>)
 800b9be:	f103 0414 	add.w	r4, r3, #20
 800b9c2:	4615      	mov	r5, r2
 800b9c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	6023      	str	r3, [r4, #0]
	memset(&g_BlocksChain.curBlock, 0, sizeof(TPBlock));
 800b9cc:	2214      	movs	r2, #20
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	4802      	ldr	r0, [pc, #8]	; (800b9dc <TPB_curblockReady+0x40>)
 800b9d2:	f00b fd8d 	bl	80174f0 <memset>
}
 800b9d6:	bf00      	nop
 800b9d8:	bdb0      	pop	{r4, r5, r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20000bec 	.word	0x20000bec

0800b9e0 <TPB_positionUpdate>:

void TPB_positionUpdate(float position)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	ed87 0a01 	vstr	s0, [r7, #4]
	g_BlocksChain.curBlock.position = position;
 800b9ea:	4a0b      	ldr	r2, [pc, #44]	; (800ba18 <TPB_positionUpdate+0x38>)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6093      	str	r3, [r2, #8]
	g_BlocksChain.curBlock.mark |= 0x01;
 800b9f0:	4b09      	ldr	r3, [pc, #36]	; (800ba18 <TPB_positionUpdate+0x38>)
 800b9f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9f6:	f043 0301 	orr.w	r3, r3, #1
 800b9fa:	b21a      	sxth	r2, r3
 800b9fc:	4b06      	ldr	r3, [pc, #24]	; (800ba18 <TPB_positionUpdate+0x38>)
 800b9fe:	801a      	strh	r2, [r3, #0]

	if (g_BlocksChain.curBlock.mark == 0x0F) {
 800ba00:	4b05      	ldr	r3, [pc, #20]	; (800ba18 <TPB_positionUpdate+0x38>)
 800ba02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba06:	2b0f      	cmp	r3, #15
 800ba08:	d101      	bne.n	800ba0e <TPB_positionUpdate+0x2e>
		TPB_curblockReady();
 800ba0a:	f7ff ffc7 	bl	800b99c <TPB_curblockReady>
	}
}
 800ba0e:	bf00      	nop
 800ba10:	3708      	adds	r7, #8
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20000bec 	.word	0x20000bec

0800ba1c <TPB_commandSerialNumberUpdate>:

void TPB_commandSerialNumberUpdate(int32_t serialNumber)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
	g_BlocksChain.curBlock.serialNumber = serialNumber;
 800ba24:	4a0a      	ldr	r2, [pc, #40]	; (800ba50 <TPB_commandSerialNumberUpdate+0x34>)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6053      	str	r3, [r2, #4]
	g_BlocksChain.curBlock.mark |= 0x08;
 800ba2a:	4b09      	ldr	r3, [pc, #36]	; (800ba50 <TPB_commandSerialNumberUpdate+0x34>)
 800ba2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba30:	f043 0308 	orr.w	r3, r3, #8
 800ba34:	b21a      	sxth	r2, r3
 800ba36:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <TPB_commandSerialNumberUpdate+0x34>)
 800ba38:	801a      	strh	r2, [r3, #0]
	if (g_BlocksChain.curBlock.mark == 0x0F) {
 800ba3a:	4b05      	ldr	r3, [pc, #20]	; (800ba50 <TPB_commandSerialNumberUpdate+0x34>)
 800ba3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba40:	2b0f      	cmp	r3, #15
 800ba42:	d101      	bne.n	800ba48 <TPB_commandSerialNumberUpdate+0x2c>
		TPB_curblockReady();
 800ba44:	f7ff ffaa 	bl	800b99c <TPB_curblockReady>
	}
}
 800ba48:	bf00      	nop
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	20000bec 	.word	0x20000bec

0800ba54 <TPB_velocityUpdate>:

void TPB_velocityUpdate(float velocity)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	ed87 0a01 	vstr	s0, [r7, #4]
	g_BlocksChain.curBlock.velocity = velocity;
 800ba5e:	4a0b      	ldr	r2, [pc, #44]	; (800ba8c <TPB_velocityUpdate+0x38>)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	60d3      	str	r3, [r2, #12]
	g_BlocksChain.curBlock.mark |= 0x02;
 800ba64:	4b09      	ldr	r3, [pc, #36]	; (800ba8c <TPB_velocityUpdate+0x38>)
 800ba66:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba6a:	f043 0302 	orr.w	r3, r3, #2
 800ba6e:	b21a      	sxth	r2, r3
 800ba70:	4b06      	ldr	r3, [pc, #24]	; (800ba8c <TPB_velocityUpdate+0x38>)
 800ba72:	801a      	strh	r2, [r3, #0]

	if (g_BlocksChain.curBlock.mark == 0x0F) {
 800ba74:	4b05      	ldr	r3, [pc, #20]	; (800ba8c <TPB_velocityUpdate+0x38>)
 800ba76:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba7a:	2b0f      	cmp	r3, #15
 800ba7c:	d101      	bne.n	800ba82 <TPB_velocityUpdate+0x2e>
		TPB_curblockReady();
 800ba7e:	f7ff ff8d 	bl	800b99c <TPB_curblockReady>
	}
}
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20000bec 	.word	0x20000bec

0800ba90 <TPB_accelerationUpdate>:

void TPB_accelerationUpdate(float acceleration)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	ed87 0a01 	vstr	s0, [r7, #4]
	g_BlocksChain.curBlock.acceleration = acceleration;
 800ba9a:	4a0b      	ldr	r2, [pc, #44]	; (800bac8 <TPB_accelerationUpdate+0x38>)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6113      	str	r3, [r2, #16]
	g_BlocksChain.curBlock.mark |= 0x04;
 800baa0:	4b09      	ldr	r3, [pc, #36]	; (800bac8 <TPB_accelerationUpdate+0x38>)
 800baa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800baa6:	f043 0304 	orr.w	r3, r3, #4
 800baaa:	b21a      	sxth	r2, r3
 800baac:	4b06      	ldr	r3, [pc, #24]	; (800bac8 <TPB_accelerationUpdate+0x38>)
 800baae:	801a      	strh	r2, [r3, #0]

	if (g_BlocksChain.curBlock.mark == 0x0F) {
 800bab0:	4b05      	ldr	r3, [pc, #20]	; (800bac8 <TPB_accelerationUpdate+0x38>)
 800bab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bab6:	2b0f      	cmp	r3, #15
 800bab8:	d101      	bne.n	800babe <TPB_accelerationUpdate+0x2e>
		TPB_curblockReady();
 800baba:	f7ff ff6f 	bl	800b99c <TPB_curblockReady>
	}
}
 800babe:	bf00      	nop
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	20000bec 	.word	0x20000bec

0800bacc <_ZN11SW_SPIClassC1Ettt>:
#include "spi.h"

#define SPI_TMC5160_CS_LOW()   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET)
#define SPI_TMC5160_CS_HIGH()  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET)

SW_SPIClass::SW_SPIClass(uint16_t mosi, uint16_t miso, uint16_t sck) :
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	4608      	mov	r0, r1
 800bad6:	4611      	mov	r1, r2
 800bad8:	461a      	mov	r2, r3
 800bada:	4603      	mov	r3, r0
 800badc:	817b      	strh	r3, [r7, #10]
 800bade:	460b      	mov	r3, r1
 800bae0:	813b      	strh	r3, [r7, #8]
 800bae2:	4613      	mov	r3, r2
 800bae4:	80fb      	strh	r3, [r7, #6]
  mosi_pin(mosi),
  miso_pin(miso),
  sck_pin(sck)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	897a      	ldrh	r2, [r7, #10]
 800baea:	801a      	strh	r2, [r3, #0]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	893a      	ldrh	r2, [r7, #8]
 800baf0:	805a      	strh	r2, [r3, #2]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	88fa      	ldrh	r2, [r7, #6]
 800baf6:	809a      	strh	r2, [r3, #4]
  {}
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	4618      	mov	r0, r3
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr

0800bb06 <_ZN11SW_SPIClass4initEv>:

void SW_SPIClass::init() {
 800bb06:	b480      	push	{r7}
 800bb08:	b083      	sub	sp, #12
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
}
 800bb0e:	bf00      	nop
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
	...

0800bb1c <_ZN11SW_SPIClass11switchCSpinEb>:

void SW_SPIClass::switchCSpin(bool state)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
	if (state){
 800bb28:	78fb      	ldrb	r3, [r7, #3]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d008      	beq.n	800bb40 <_ZN11SW_SPIClass11switchCSpinEb+0x24>
		SPI_TMC5160_CS_HIGH();
 800bb2e:	2201      	movs	r2, #1
 800bb30:	2102      	movs	r1, #2
 800bb32:	4809      	ldr	r0, [pc, #36]	; (800bb58 <_ZN11SW_SPIClass11switchCSpinEb+0x3c>)
 800bb34:	f004 fa74 	bl	8010020 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800bb38:	2002      	movs	r0, #2
 800bb3a:	f002 fbd1 	bl	800e2e0 <HAL_Delay>
	}else{
		SPI_TMC5160_CS_LOW();
		HAL_Delay(2);
	}
}
 800bb3e:	e007      	b.n	800bb50 <_ZN11SW_SPIClass11switchCSpinEb+0x34>
		SPI_TMC5160_CS_LOW();
 800bb40:	2200      	movs	r2, #0
 800bb42:	2102      	movs	r1, #2
 800bb44:	4804      	ldr	r0, [pc, #16]	; (800bb58 <_ZN11SW_SPIClass11switchCSpinEb+0x3c>)
 800bb46:	f004 fa6b 	bl	8010020 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800bb4a:	2002      	movs	r0, #2
 800bb4c:	f002 fbc8 	bl	800e2e0 <HAL_Delay>
}
 800bb50:	bf00      	nop
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	40020000 	.word	0x40020000

0800bb5c <_ZN11SW_SPIClass8transferEh>:

uint8_t SW_SPIClass::transfer(uint8_t ulVal)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b086      	sub	sp, #24
 800bb60:	af02      	add	r7, sp, #8
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	70fb      	strb	r3, [r7, #3]
  uint8_t rx;

  HAL_StatusTypeDef status;
  //SPI_TMC5160_CS_LOW();
  status = HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&ulVal, (uint8_t*)&rx, 1, HAL_MAX_DELAY);
 800bb68:	f107 020e 	add.w	r2, r7, #14
 800bb6c:	1cf9      	adds	r1, r7, #3
 800bb6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	2301      	movs	r3, #1
 800bb76:	4807      	ldr	r0, [pc, #28]	; (800bb94 <_ZN11SW_SPIClass8transferEh+0x38>)
 800bb78:	f004 ff74 	bl	8010a64 <HAL_SPI_TransmitReceive>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73fb      	strb	r3, [r7, #15]
  //SPI_TMC5160_CS_HIGH();

  if (status != HAL_OK)
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <_ZN11SW_SPIClass8transferEh+0x2e>
	  return 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	e000      	b.n	800bb8c <_ZN11SW_SPIClass8transferEh+0x30>

  return rx;
 800bb8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3710      	adds	r7, #16
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	200006a0 	.word	0x200006a0

0800bb98 <discard_current_block>:
}Stepper_Run_Data_t;

Stepper_Run_Data_t  g_StepperData;

/*完成当前block*/
static void discard_current_block() {
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	af00      	add	r7, sp, #0
  current_block = NULL;
 800bb9c:	4b0a      	ldr	r3, [pc, #40]	; (800bbc8 <discard_current_block+0x30>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	601a      	str	r2, [r3, #0]

  acceleration_time = 0;
 800bba2:	4b0a      	ldr	r3, [pc, #40]	; (800bbcc <discard_current_block+0x34>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]
  deceleration_time = 0;
 800bba8:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <discard_current_block+0x38>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	601a      	str	r2, [r3, #0]

  if (g_StepperData.motionFinishedCB != NULL){
 800bbae:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <discard_current_block+0x3c>)
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d006      	beq.n	800bbc4 <discard_current_block+0x2c>
	// Interpolation motion finished
	g_StepperData.motionFinishedCB(SCURVE_MOTION_TYPE);
 800bbb6:	4b07      	ldr	r3, [pc, #28]	; (800bbd4 <discard_current_block+0x3c>)
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbba:	2001      	movs	r0, #1
 800bbbc:	4798      	blx	r3
	g_StepperData.motionFinishedCB = NULL;
 800bbbe:	4b05      	ldr	r3, [pc, #20]	; (800bbd4 <discard_current_block+0x3c>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800bbc4:	bf00      	nop
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	20000c28 	.word	0x20000c28
 800bbcc:	20000c1c 	.word	0x20000c1c
 800bbd0:	20000c20 	.word	0x20000c20
 800bbd4:	20000c2c 	.word	0x20000c2c

0800bbd8 <Stepper_Init>:
/*
 * Stepper motor Initialize
 * microsteps
 */
void Stepper_Init(uint8_t microsteps)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	4603      	mov	r3, r0
 800bbe0:	71fb      	strb	r3, [r7, #7]
	g_StepperData.micros = microsteps;
 800bbe2:	4a20      	ldr	r2, [pc, #128]	; (800bc64 <Stepper_Init+0x8c>)
 800bbe4:	79fb      	ldrb	r3, [r7, #7]
 800bbe6:	7393      	strb	r3, [r2, #14]
	g_StepperData.dir    = STEPPER_Dir_CW;  // clockwise
 800bbe8:	4b1e      	ldr	r3, [pc, #120]	; (800bc64 <Stepper_Init+0x8c>)
 800bbea:	2201      	movs	r2, #1
 800bbec:	73da      	strb	r2, [r3, #15]

	g_StepperData.mode = RUN_Mode_Normal;
 800bbee:	4b1d      	ldr	r3, [pc, #116]	; (800bc64 <Stepper_Init+0x8c>)
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	835a      	strh	r2, [r3, #26]
	g_StepperData.state = STEPPER_State_Stop;
 800bbf4:	4b1b      	ldr	r3, [pc, #108]	; (800bc64 <Stepper_Init+0x8c>)
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	831a      	strh	r2, [r3, #24]

	g_StepperData.currentPos = 0;
 800bbfa:	4b1a      	ldr	r3, [pc, #104]	; (800bc64 <Stepper_Init+0x8c>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	605a      	str	r2, [r3, #4]
	g_StepperData.targetPos = 0;
 800bc00:	4b18      	ldr	r3, [pc, #96]	; (800bc64 <Stepper_Init+0x8c>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	601a      	str	r2, [r3, #0]

	g_StepperData.currentAngle = 0;
 800bc06:	4b17      	ldr	r3, [pc, #92]	; (800bc64 <Stepper_Init+0x8c>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	83da      	strh	r2, [r3, #30]
	g_StepperData.targetAngle = 0;
 800bc0c:	4b15      	ldr	r3, [pc, #84]	; (800bc64 <Stepper_Init+0x8c>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	839a      	strh	r2, [r3, #28]

	g_StepperData.steps = 0;
 800bc12:	4b14      	ldr	r3, [pc, #80]	; (800bc64 <Stepper_Init+0x8c>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	609a      	str	r2, [r3, #8]

	g_StepperData.speed = 400;  // default setting 1 round per second
 800bc18:	4b12      	ldr	r3, [pc, #72]	; (800bc64 <Stepper_Init+0x8c>)
 800bc1a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bc1e:	819a      	strh	r2, [r3, #12]
	g_StepperData.acce  = 4 * g_StepperData.speed;  // 4x speed
 800bc20:	4b10      	ldr	r3, [pc, #64]	; (800bc64 <Stepper_Init+0x8c>)
 800bc22:	899b      	ldrh	r3, [r3, #12]
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	461a      	mov	r2, r3
 800bc28:	4b0e      	ldr	r3, [pc, #56]	; (800bc64 <Stepper_Init+0x8c>)
 800bc2a:	611a      	str	r2, [r3, #16]
	g_StepperData.dece  = 8 * g_StepperData.speed;  // 8x speed
 800bc2c:	4b0d      	ldr	r3, [pc, #52]	; (800bc64 <Stepper_Init+0x8c>)
 800bc2e:	899b      	ldrh	r3, [r3, #12]
 800bc30:	00db      	lsls	r3, r3, #3
 800bc32:	461a      	mov	r2, r3
 800bc34:	4b0b      	ldr	r3, [pc, #44]	; (800bc64 <Stepper_Init+0x8c>)
 800bc36:	615a      	str	r2, [r3, #20]

	g_StepperData.motion = NULL;
 800bc38:	4b0a      	ldr	r3, [pc, #40]	; (800bc64 <Stepper_Init+0x8c>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	621a      	str	r2, [r3, #32]
	g_StepperData.motionFinishedCB = NULL;
 800bc3e:	4b09      	ldr	r3, [pc, #36]	; (800bc64 <Stepper_Init+0x8c>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	625a      	str	r2, [r3, #36]	; 0x24

	Stepper_SetSpeed(g_StepperData.speed);
 800bc44:	4b07      	ldr	r3, [pc, #28]	; (800bc64 <Stepper_Init+0x8c>)
 800bc46:	899b      	ldrh	r3, [r3, #12]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f000 f847 	bl	800bcdc <Stepper_SetSpeed>
	Stepper_SetDir(g_StepperData.dir);
 800bc4e:	4b05      	ldr	r3, [pc, #20]	; (800bc64 <Stepper_Init+0x8c>)
 800bc50:	f993 300f 	ldrsb.w	r3, [r3, #15]
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 f813 	bl	800bc80 <Stepper_SetDir>
}
 800bc5a:	bf00      	nop
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20000c2c 	.word	0x20000c2c

0800bc68 <Stepper_GetDir>:

/*
 *  Get current stepper motor direction
 */
int8_t Stepper_GetDir()
{
 800bc68:	b480      	push	{r7}
 800bc6a:	af00      	add	r7, sp, #0
	return g_StepperData.dir;
 800bc6c:	4b03      	ldr	r3, [pc, #12]	; (800bc7c <Stepper_GetDir+0x14>)
 800bc6e:	f993 300f 	ldrsb.w	r3, [r3, #15]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	20000c2c 	.word	0x20000c2c

0800bc80 <Stepper_SetDir>:

/*
 *  Set stepper motor direction
 */
void Stepper_SetDir(uint32_t dir)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
	if (dir == STEPPER_Dir_CW) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d10a      	bne.n	800bca4 <Stepper_SetDir+0x24>
		g_StepperData.dir = dir;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	b25a      	sxtb	r2, r3
 800bc92:	4b0f      	ldr	r3, [pc, #60]	; (800bcd0 <Stepper_SetDir+0x50>)
 800bc94:	73da      	strb	r2, [r3, #15]
		HAL_GPIO_WritePin(Stepper_Dir_GPIO_Port, Stepper_Dir_Pin, GPIO_PIN_SET);
 800bc96:	2201      	movs	r2, #1
 800bc98:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bc9c:	480d      	ldr	r0, [pc, #52]	; (800bcd4 <Stepper_SetDir+0x54>)
 800bc9e:	f004 f9bf 	bl	8010020 <HAL_GPIO_WritePin>
 800bca2:	e00c      	b.n	800bcbe <Stepper_SetDir+0x3e>
	}else if (dir == STEPPER_Dir_CCW) {
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d109      	bne.n	800bcbe <Stepper_SetDir+0x3e>
		g_StepperData.dir = dir;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	b25a      	sxtb	r2, r3
 800bcae:	4b08      	ldr	r3, [pc, #32]	; (800bcd0 <Stepper_SetDir+0x50>)
 800bcb0:	73da      	strb	r2, [r3, #15]
		HAL_GPIO_WritePin(Stepper_Dir_GPIO_Port, Stepper_Dir_Pin, GPIO_PIN_RESET);
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bcb8:	4806      	ldr	r0, [pc, #24]	; (800bcd4 <Stepper_SetDir+0x54>)
 800bcba:	f004 f9b1 	bl	8010020 <HAL_GPIO_WritePin>
	}

    last_direction_bits = dir;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <Stepper_SetDir+0x58>)
 800bcc4:	701a      	strb	r2, [r3, #0]
}
 800bcc6:	bf00      	nop
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	20000c2c 	.word	0x20000c2c
 800bcd4:	40020800 	.word	0x40020800
 800bcd8:	20000c24 	.word	0x20000c24

0800bcdc <Stepper_SetSpeed>:

/*
 *  Set stepper motor speed
 */
void Stepper_SetSpeed(uint16_t speed)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	80fb      	strh	r3, [r7, #6]
	if (speed == 0) return;
 800bce6:	88fb      	ldrh	r3, [r7, #6]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d014      	beq.n	800bd16 <Stepper_SetSpeed+0x3a>
	if (speed >= 320000) return;

	/*Speed calc, steps(speed) per 1 second*/
	g_StepperData.speed = speed;
 800bcec:	4a0d      	ldr	r2, [pc, #52]	; (800bd24 <Stepper_SetSpeed+0x48>)
 800bcee:	88fb      	ldrh	r3, [r7, #6]
 800bcf0:	8193      	strh	r3, [r2, #12]

	uint32_t prescaler = 2000000; // 2M tim1 clock
 800bcf2:	4b0d      	ldr	r3, [pc, #52]	; (800bd28 <Stepper_SetSpeed+0x4c>)
 800bcf4:	60fb      	str	r3, [r7, #12]
	uint32_t period = (prescaler / speed) - 1;
 800bcf6:	88fb      	ldrh	r3, [r7, #6]
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	60bb      	str	r3, [r7, #8]
	htim1.Instance->ARR = period;
 800bd02:	4b0a      	ldr	r3, [pc, #40]	; (800bd2c <Stepper_SetSpeed+0x50>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR1 = period / 2;  // pulse width
 800bd0a:	4b08      	ldr	r3, [pc, #32]	; (800bd2c <Stepper_SetSpeed+0x50>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	0852      	lsrs	r2, r2, #1
 800bd12:	635a      	str	r2, [r3, #52]	; 0x34
 800bd14:	e000      	b.n	800bd18 <Stepper_SetSpeed+0x3c>
	if (speed == 0) return;
 800bd16:	bf00      	nop
}
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	20000c2c 	.word	0x20000c2c
 800bd28:	001e8480 	.word	0x001e8480
 800bd2c:	20000794 	.word	0x20000794

0800bd30 <Stepper_Stop>:
	Stepper_RunSteps(steps);
}

/* Stepper motor stop*/
void Stepper_Stop()
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	af00      	add	r7, sp, #0
	g_StepperData.state = STEPPER_State_Stop;
 800bd34:	4b05      	ldr	r3, [pc, #20]	; (800bd4c <Stepper_Stop+0x1c>)
 800bd36:	2202      	movs	r2, #2
 800bd38:	831a      	strh	r2, [r3, #24]
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	4804      	ldr	r0, [pc, #16]	; (800bd50 <Stepper_Stop+0x20>)
 800bd3e:	f005 fa51 	bl	80111e4 <HAL_TIM_PWM_Stop_IT>

	//Clear all of blocks
	discard_current_block();
 800bd42:	f7ff ff29 	bl	800bb98 <discard_current_block>
}
 800bd46:	bf00      	nop
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20000c2c 	.word	0x20000c2c
 800bd50:	20000794 	.word	0x20000794

0800bd54 <Stepper_Run>:
	return g_StepperData.state;
}

/* Stepper motor run*/
void Stepper_Run()
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	af00      	add	r7, sp, #0
	g_StepperData.mode  = RUN_Mode_Normal;
 800bd58:	4b05      	ldr	r3, [pc, #20]	; (800bd70 <Stepper_Run+0x1c>)
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	835a      	strh	r2, [r3, #26]
	g_StepperData.state = STEPPER_State_Running;
 800bd5e:	4b04      	ldr	r3, [pc, #16]	; (800bd70 <Stepper_Run+0x1c>)
 800bd60:	2201      	movs	r2, #1
 800bd62:	831a      	strh	r2, [r3, #24]
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800bd64:	2100      	movs	r1, #0
 800bd66:	4803      	ldr	r0, [pc, #12]	; (800bd74 <Stepper_Run+0x20>)
 800bd68:	f005 f9b8 	bl	80110dc <HAL_TIM_PWM_Start_IT>
}
 800bd6c:	bf00      	nop
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	20000c2c 	.word	0x20000c2c
 800bd74:	20000794 	.word	0x20000794

0800bd78 <Stepper_StepsISR>:
}


/* Per step interrupt service routine*/
void Stepper_StepsISR()
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	af00      	add	r7, sp, #0
	// record the count
	if (g_StepperData.dir == STEPPER_Dir_CW){
 800bd7c:	4b0b      	ldr	r3, [pc, #44]	; (800bdac <Stepper_StepsISR+0x34>)
 800bd7e:	f993 300f 	ldrsb.w	r3, [r3, #15]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d105      	bne.n	800bd92 <Stepper_StepsISR+0x1a>
		g_StepperData.steps --;
 800bd86:	4b09      	ldr	r3, [pc, #36]	; (800bdac <Stepper_StepsISR+0x34>)
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	4a07      	ldr	r2, [pc, #28]	; (800bdac <Stepper_StepsISR+0x34>)
 800bd8e:	6093      	str	r3, [r2, #8]
 800bd90:	e004      	b.n	800bd9c <Stepper_StepsISR+0x24>
	}else{
		g_StepperData.steps ++;
 800bd92:	4b06      	ldr	r3, [pc, #24]	; (800bdac <Stepper_StepsISR+0x34>)
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	3301      	adds	r3, #1
 800bd98:	4a04      	ldr	r2, [pc, #16]	; (800bdac <Stepper_StepsISR+0x34>)
 800bd9a:	6093      	str	r3, [r2, #8]
	}

	if (g_StepperData.steps == 0){
 800bd9c:	4b03      	ldr	r3, [pc, #12]	; (800bdac <Stepper_StepsISR+0x34>)
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <Stepper_StepsISR+0x30>
		Stepper_Stop();
 800bda4:	f7ff ffc4 	bl	800bd30 <Stepper_Stop>
	}
}
 800bda8:	bf00      	nop
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	20000c2c 	.word	0x20000c2c

0800bdb0 <HAL_TIM_PWM_PulseFinishedCallback>:

/*
 * User defined cb, Stepper Tim channel:
 **/
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a08      	ldr	r2, [pc, #32]	; (800bde0 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d10a      	bne.n	800bdd8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		// check the channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	7f1b      	ldrb	r3, [r3, #28]
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d106      	bne.n	800bdd8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>

			/*Per step call back stepsisr*/
			if (g_StepperData.mode == RUN_Mode_StepsControl){
 800bdca:	4b06      	ldr	r3, [pc, #24]	; (800bde4 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 800bdcc:	8b5b      	ldrh	r3, [r3, #26]
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	d102      	bne.n	800bdd8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
				Stepper_StepsISR();
 800bdd2:	f7ff ffd1 	bl	800bd78 <Stepper_StepsISR>
				return;
 800bdd6:	bf00      	nop
			}

			/**/
		}
	}
}
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	40010000 	.word	0x40010000
 800bde4:	20000c2c 	.word	0x20000c2c

0800bde8 <_ZN14TMC2130Stepper8CHOPCONFEv>:
#include "TMC_MACROS.h"

#define SET_REG(SETTING) CHOPCONF_register.SETTING = B; write(CHOPCONF_register.address, CHOPCONF_register.sr)

// CHOPCONF
uint32_t TMC2130Stepper::CHOPCONF() {
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
	return read(CHOPCONF_register.address);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	216c      	movs	r1, #108	; 0x6c
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	4798      	blx	r3
 800bdfe:	4603      	mov	r3, r0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <_ZN14TMC2130Stepper8CHOPCONFEm>:
void TMC2130Stepper::CHOPCONF(uint32_t input) {
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
	CHOPCONF_register.sr = input;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	f8c3 2025 	str.w	r2, [r3, #37]	; 0x25
	write(CHOPCONF_register.address, CHOPCONF_register.sr);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800be26:	216c      	movs	r1, #108	; 0x6c
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	4798      	blx	r3
}
 800be2c:	bf00      	nop
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <_ZN14TMC2130Stepper4toffEh>:

void TMC2130Stepper::toff(		uint8_t B )	{ SET_REG(toff);	}
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	460b      	mov	r3, r1
 800be3e:	70fb      	strb	r3, [r7, #3]
 800be40:	78fb      	ldrb	r3, [r7, #3]
 800be42:	f003 030f 	and.w	r3, r3, #15
 800be46:	b2d9      	uxtb	r1, r3
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800be4e:	f361 0303 	bfi	r3, r1, #0, #4
 800be52:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800be62:	216c      	movs	r1, #108	; 0x6c
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	4798      	blx	r3
 800be68:	bf00      	nop
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <_ZN14TMC2130Stepper5hstrtEh>:
void TMC2130Stepper::hstrt(		uint8_t B )	{ SET_REG(hstrt);	}
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
 800be7c:	78fb      	ldrb	r3, [r7, #3]
 800be7e:	f003 0307 	and.w	r3, r3, #7
 800be82:	b2d9      	uxtb	r1, r3
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800be8a:	f361 1306 	bfi	r3, r1, #4, #3
 800be8e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800be9e:	216c      	movs	r1, #108	; 0x6c
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	4798      	blx	r3
 800bea4:	bf00      	nop
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <_ZN14TMC2130Stepper4hendEh>:
void TMC2130Stepper::hend(		uint8_t B )	{ SET_REG(hend);	}
 800beac:	b590      	push	{r4, r7, lr}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	460b      	mov	r3, r1
 800beb6:	70fb      	strb	r3, [r7, #3]
 800beb8:	78fb      	ldrb	r3, [r7, #3]
 800beba:	f003 030f 	and.w	r3, r3, #15
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f002 0101 	and.w	r1, r2, #1
 800bec6:	01cc      	lsls	r4, r1, #7
 800bec8:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 800becc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800bed0:	4608      	mov	r0, r1
 800bed2:	4621      	mov	r1, r4
 800bed4:	4301      	orrs	r1, r0
 800bed6:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
 800beda:	0852      	lsrs	r2, r2, #1
 800bedc:	b2d2      	uxtb	r2, r2
 800bede:	f002 0207 	and.w	r2, r2, #7
 800bee2:	f002 0007 	and.w	r0, r2, #7
 800bee6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800beea:	f022 0207 	bic.w	r2, r2, #7
 800beee:	4611      	mov	r1, r2
 800bef0:	4602      	mov	r2, r0
 800bef2:	430a      	orrs	r2, r1
 800bef4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800bf04:	216c      	movs	r1, #108	; 0x6c
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	4798      	blx	r3
 800bf0a:	bf00      	nop
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd90      	pop	{r4, r7, pc}

0800bf12 <_ZN14TMC2130Stepper3chmEb>:
//void TMC2130Stepper::fd(		uint8_t B )	{ SET_REG(fd);		}
void TMC2130Stepper::disfdcc(	bool 	B )	{ SET_REG(disfdcc);	}
void TMC2130Stepper::rndtf(		bool 	B )	{ SET_REG(rndtf);	}
void TMC2130Stepper::chm(		bool 	B )	{ SET_REG(chm);		}
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b082      	sub	sp, #8
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	70fb      	strb	r3, [r7, #3]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800bf24:	78f9      	ldrb	r1, [r7, #3]
 800bf26:	f361 1386 	bfi	r3, r1, #6, #1
 800bf2a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800bf3a:	216c      	movs	r1, #108	; 0x6c
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	4798      	blx	r3
 800bf40:	bf00      	nop
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <_ZN14TMC2130Stepper3tblEh>:
void TMC2130Stepper::tbl(		uint8_t B )	{ SET_REG(tbl);		}
 800bf48:	b590      	push	{r4, r7, lr}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	460b      	mov	r3, r1
 800bf52:	70fb      	strb	r3, [r7, #3]
 800bf54:	78fb      	ldrb	r3, [r7, #3]
 800bf56:	f003 0303 	and.w	r3, r3, #3
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f002 0101 	and.w	r1, r2, #1
 800bf62:	01cc      	lsls	r4, r1, #7
 800bf64:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 800bf68:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4301      	orrs	r1, r0
 800bf72:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
 800bf76:	0852      	lsrs	r2, r2, #1
 800bf78:	b2d2      	uxtb	r2, r2
 800bf7a:	f002 0201 	and.w	r2, r2, #1
 800bf7e:	f002 0001 	and.w	r0, r2, #1
 800bf82:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800bf86:	f022 0201 	bic.w	r2, r2, #1
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800bfa0:	216c      	movs	r1, #108	; 0x6c
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	4798      	blx	r3
 800bfa6:	bf00      	nop
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd90      	pop	{r4, r7, pc}

0800bfae <_ZN14TMC2130Stepper6vsenseEb>:
void TMC2130Stepper::vsense(	bool 	B )	{ SET_REG(vsense);	}
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	70fb      	strb	r3, [r7, #3]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
 800bfc0:	78f9      	ldrb	r1, [r7, #3]
 800bfc2:	f361 0341 	bfi	r3, r1, #1, #1
 800bfc6:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800bfd6:	216c      	movs	r1, #108	; 0x6c
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	4798      	blx	r3
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <_ZN14TMC2130Stepper4mresEh>:
void TMC2130Stepper::vhighfs(	bool 	B )	{ SET_REG(vhighfs);	}
void TMC2130Stepper::vhighchm(	bool 	B )	{ SET_REG(vhighchm);}
void TMC2130Stepper::sync(		uint8_t B )	{ SET_REG(sync);	}
void TMC2130Stepper::mres(		uint8_t B )	{ SET_REG(mres);	}
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
 800bff0:	78fb      	ldrb	r3, [r7, #3]
 800bff2:	f003 030f 	and.w	r3, r3, #15
 800bff6:	b2d9      	uxtb	r1, r3
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800bffe:	f361 0303 	bfi	r3, r1, #0, #4
 800c002:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c012:	216c      	movs	r1, #108	; 0x6c
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	4798      	blx	r3
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <_ZN14TMC2130Stepper6intpolEb>:
void TMC2130Stepper::intpol(	bool 	B )	{ SET_REG(intpol);	}
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	460b      	mov	r3, r1
 800c02a:	70fb      	strb	r3, [r7, #3]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800c032:	78f9      	ldrb	r1, [r7, #3]
 800c034:	f361 1304 	bfi	r3, r1, #4, #1
 800c038:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	f8d2 2025 	ldr.w	r2, [r2, #37]	; 0x25
 800c048:	216c      	movs	r1, #108	; 0x6c
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	4798      	blx	r3
 800c04e:	bf00      	nop
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <_ZN14TMC2130Stepper4toffEv>:
void TMC2130Stepper::dedge(		bool 	B )	{ SET_REG(dedge);	}
void TMC2130Stepper::diss2g(	bool 	B )	{ SET_REG(diss2g);	}

uint8_t TMC2130Stepper::toff()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;	}
 800c056:	b580      	push	{r7, lr}
 800c058:	b084      	sub	sp, #16
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	2300      	movs	r3, #0
 800c060:	60fb      	str	r3, [r7, #12]
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7ff fec0 	bl	800bde8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c068:	4603      	mov	r3, r0
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	7b3b      	ldrb	r3, [r7, #12]
 800c06e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c072:	b2db      	uxtb	r3, r3
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <_ZN14TMC2130Stepper5hstrtEv>:
uint8_t TMC2130Stepper::hstrt()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;	}
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	2300      	movs	r3, #0
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7ff fead 	bl	800bde8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c08e:	4603      	mov	r3, r0
 800c090:	60fb      	str	r3, [r7, #12]
 800c092:	7b3b      	ldrb	r3, [r7, #12]
 800c094:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	4618      	mov	r0, r3
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <_ZN14TMC2130Stepper4hendEv>:
uint8_t TMC2130Stepper::hend()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;	}
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b084      	sub	sp, #16
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f7ff fe9a 	bl	800bde8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	89bb      	ldrh	r3, [r7, #12]
 800c0ba:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <_ZN14TMC2130Stepper3tblEv>:
//uint8_t TMC2130Stepper::fd()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.fd;		}
bool 	TMC2130Stepper::disfdcc()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.disfdcc;	}
bool 	TMC2130Stepper::rndtf()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.rndtf;	}
bool 	TMC2130Stepper::chm()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.chm;		}
uint8_t TMC2130Stepper::tbl()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;		}
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7ff fe87 	bl	800bde8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	60fb      	str	r3, [r7, #12]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <_ZN14TMC2130Stepper6vsenseEv>:
bool 	TMC2130Stepper::vsense()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;	}
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f7ff fe74 	bl	800bde8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c100:	4603      	mov	r3, r0
 800c102:	60fb      	str	r3, [r7, #12]
 800c104:	7bbb      	ldrb	r3, [r7, #14]
 800c106:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <_ZN14TMC2130Stepper4mresEv>:
bool 	TMC2130Stepper::vhighfs()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighfs;	}
bool 	TMC2130Stepper::vhighchm()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighchm;}
uint8_t TMC2130Stepper::sync()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.sync;	}
uint8_t TMC2130Stepper::mres()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;	}
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	2300      	movs	r3, #0
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7ff fe61 	bl	800bde8 <_ZN14TMC2130Stepper8CHOPCONFEv>
 800c126:	4603      	mov	r3, r0
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	7bfb      	ldrb	r3, [r7, #15]
 800c12c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c130:	b2db      	uxtb	r3, r3
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <_ZN14TMC2130Stepper8COOLCONFEm>:
#define SET_REG(SETTING) COOLCONF_register.SETTING = B; write(COOLCONF_register.address, COOLCONF_register.sr);
#define GET_REG(SETTING) return COOLCONF_register.SETTING;

// COOLCONF
uint32_t TMC2130Stepper::COOLCONF() { return COOLCONF_register.sr; }
void TMC2130Stepper::COOLCONF(uint32_t input) {
 800c13a:	b590      	push	{r4, r7, lr}
 800c13c:	b083      	sub	sp, #12
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]
	COOLCONF_register.sr = input;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
 800c150:	0209      	lsls	r1, r1, #8
 800c152:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c154:	b2c0      	uxtb	r0, r0
 800c156:	4301      	orrs	r1, r0
 800c158:	6299      	str	r1, [r3, #40]	; 0x28
 800c15a:	0e12      	lsrs	r2, r2, #24
 800c15c:	f002 0201 	and.w	r2, r2, #1
 800c160:	f002 0001 	and.w	r0, r2, #1
 800c164:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c168:	f022 0201 	bic.w	r2, r2, #1
 800c16c:	4611      	mov	r1, r2
 800c16e:	4602      	mov	r2, r0
 800c170:	430a      	orrs	r2, r1
 800c172:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	write(COOLCONF_register.address, COOLCONF_register.sr);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681c      	ldr	r4, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c180:	0a12      	lsrs	r2, r2, #8
 800c182:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	061b      	lsls	r3, r3, #24
 800c18c:	4313      	orrs	r3, r2
 800c18e:	461a      	mov	r2, r3
 800c190:	216d      	movs	r1, #109	; 0x6d
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	47a0      	blx	r4
}
 800c196:	bf00      	nop
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd90      	pop	{r4, r7, pc}

0800c19e <_ZN14TMC2130Stepper5seminEh>:

void TMC2130Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 800c19e:	b590      	push	{r4, r7, lr}
 800c1a0:	b083      	sub	sp, #12
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	70fb      	strb	r3, [r7, #3]
 800c1aa:	78fb      	ldrb	r3, [r7, #3]
 800c1ac:	f003 030f 	and.w	r3, r3, #15
 800c1b0:	b2d9      	uxtb	r1, r3
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 800c1b8:	f361 0303 	bfi	r3, r1, #0, #4
 800c1bc:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681c      	ldr	r4, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1ca:	0a12      	lsrs	r2, r2, #8
 800c1cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c1d0:	f003 0301 	and.w	r3, r3, #1
 800c1d4:	061b      	lsls	r3, r3, #24
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	461a      	mov	r2, r3
 800c1da:	216d      	movs	r1, #109	; 0x6d
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	47a0      	blx	r4
 800c1e0:	bf00      	nop
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd90      	pop	{r4, r7, pc}

0800c1e8 <_ZN14TMC2130Stepper5semaxEh>:
void TMC2130Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2130Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 800c1e8:	b590      	push	{r4, r7, lr}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	70fb      	strb	r3, [r7, #3]
 800c1f4:	78fb      	ldrb	r3, [r7, #3]
 800c1f6:	f003 030f 	and.w	r3, r3, #15
 800c1fa:	b2d9      	uxtb	r1, r3
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800c202:	f361 0303 	bfi	r3, r1, #0, #4
 800c206:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681c      	ldr	r4, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c214:	0a12      	lsrs	r2, r2, #8
 800c216:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c21a:	f003 0301 	and.w	r3, r3, #1
 800c21e:	061b      	lsls	r3, r3, #24
 800c220:	4313      	orrs	r3, r2
 800c222:	461a      	mov	r2, r3
 800c224:	216d      	movs	r1, #109	; 0x6d
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	47a0      	blx	r4
 800c22a:	bf00      	nop
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd90      	pop	{r4, r7, pc}

0800c232 <_ZN14TMC2130Stepper4sednEh>:
void TMC2130Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 800c232:	b590      	push	{r4, r7, lr}
 800c234:	b083      	sub	sp, #12
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	460b      	mov	r3, r1
 800c23c:	70fb      	strb	r3, [r7, #3]
 800c23e:	78fb      	ldrb	r3, [r7, #3]
 800c240:	f003 0303 	and.w	r3, r3, #3
 800c244:	b2d9      	uxtb	r1, r3
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800c24c:	f361 1346 	bfi	r3, r1, #5, #2
 800c250:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681c      	ldr	r4, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c25e:	0a12      	lsrs	r2, r2, #8
 800c260:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	061b      	lsls	r3, r3, #24
 800c26a:	4313      	orrs	r3, r2
 800c26c:	461a      	mov	r2, r3
 800c26e:	216d      	movs	r1, #109	; 0x6d
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	47a0      	blx	r4
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd90      	pop	{r4, r7, pc}

0800c27c <_ZN14TMC2130Stepper3sgtEa>:
void TMC2130Stepper::seimin(bool 	B )	{ SET_REG(seimin);	}
void TMC2130Stepper::sgt(	int8_t  B )	{ SET_REG(sgt);		}
 800c27c:	b590      	push	{r4, r7, lr}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	460b      	mov	r3, r1
 800c286:	70fb      	strb	r3, [r7, #3]
 800c288:	78fb      	ldrb	r3, [r7, #3]
 800c28a:	005b      	lsls	r3, r3, #1
 800c28c:	b25b      	sxtb	r3, r3
 800c28e:	105b      	asrs	r3, r3, #1
 800c290:	b259      	sxtb	r1, r3
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 800c298:	f361 0306 	bfi	r3, r1, #0, #7
 800c29c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681c      	ldr	r4, [r3, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2aa:	0a12      	lsrs	r2, r2, #8
 800c2ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	061b      	lsls	r3, r3, #24
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	216d      	movs	r1, #109	; 0x6d
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	47a0      	blx	r4
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd90      	pop	{r4, r7, pc}

0800c2c8 <_ZN14TMC2160Stepper8DRV_CONFEm>:
#define SET_REG(SETTING) DRV_CONF_register.SETTING = B; write(DRV_CONF_register.address, DRV_CONF_register.sr);
#define GET_REG(SETTING) return DRV_CONF_register.SETTING;

// W: DRV_CONF
uint32_t TMC2160Stepper::DRV_CONF() { return DRV_CONF_register.sr; }
void TMC2160Stepper::DRV_CONF(uint32_t input) {
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
	DRV_CONF_register.sr = input;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	f3c3 0115 	ubfx	r1, r3, #0, #22
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c2dc:	f361 0315 	bfi	r3, r1, #0, #22
 800c2e0:	6413      	str	r3, [r2, #64]	; 0x40
	write(DRV_CONF_register.address, DRV_CONF_register.sr);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c2ee:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800c2f2:	210a      	movs	r1, #10
 800c2f4:	4798      	blx	r3
}
 800c2f6:	bf00      	nop
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <_ZN14TMC2130Stepper10DRV_STATUSEv>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

#define GET_REG(NS, SETTING) NS::DRV_STATUS_t r{0}; r.sr = DRV_STATUS(); return r.SETTING

uint32_t TMC2130Stepper::DRV_STATUS() { return read(DRV_STATUS_t::address); }
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3304      	adds	r3, #4
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	216f      	movs	r1, #111	; 0x6f
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	4798      	blx	r3
 800c314:	4603      	mov	r3, r0
 800c316:	4618      	mov	r0, r3
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <_ZN14TMC5130Stepper7ENCMODEEm>:

// ENCMODE
uint32_t TMC5130Stepper::ENCMODE() {
	return read(ENCMODE_register.address);
}
void TMC5130Stepper::ENCMODE(uint32_t input) {
 800c31e:	b580      	push	{r7, lr}
 800c320:	b082      	sub	sp, #8
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
 800c326:	6039      	str	r1, [r7, #0]
	ENCMODE_register.sr = input;
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c32e:	b299      	uxth	r1, r3
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	f8b2 306c 	ldrh.w	r3, [r2, #108]	; 0x6c
 800c336:	f361 030a 	bfi	r3, r1, #0, #11
 800c33a:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
	write(ENCMODE_register.address, ENCMODE_register.sr);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 800c34c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800c350:	b292      	uxth	r2, r2
 800c352:	2138      	movs	r1, #56	; 0x38
 800c354:	4798      	blx	r3
}
 800c356:	bf00      	nop
 800c358:	3708      	adds	r7, #8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <_ZN14TMC2130Stepper5GCONFEm>:

// GCONF
uint32_t TMC2130Stepper::GCONF() {
	return read(GCONF_register.address);
}
void TMC2130Stepper::GCONF(uint32_t input) {
 800c35e:	b580      	push	{r7, lr}
 800c360:	b082      	sub	sp, #8
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	6039      	str	r1, [r7, #0]
	GCONF_register.sr = input;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	6953      	ldr	r3, [r2, #20]
 800c372:	f361 2319 	bfi	r3, r1, #8, #18
 800c376:	6153      	str	r3, [r2, #20]
	write(GCONF_register.address, GCONF_register.sr);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	6952      	ldr	r2, [r2, #20]
 800c382:	f3c2 2211 	ubfx	r2, r2, #8, #18
 800c386:	2100      	movs	r1, #0
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	4798      	blx	r3
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <_ZN10TMCStepper10IHOLD_IRUNEm>:
#define SET_REG(SETTING) IHOLD_IRUN_register.SETTING = B; write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
#define GET_REG(SETTING) return IHOLD_IRUN_register.SETTING;

// IHOLD_IRUN
uint32_t TMCStepper::IHOLD_IRUN() { return IHOLD_IRUN_register.sr; }
void TMCStepper::IHOLD_IRUN(uint32_t input) {
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
	IHOLD_IRUN_register.sr = input;
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	6853      	ldr	r3, [r2, #4]
 800c3a8:	f361 0313 	bfi	r3, r1, #0, #20
 800c3ac:	6053      	str	r3, [r2, #4]
	write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	6852      	ldr	r2, [r2, #4]
 800c3b8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c3bc:	2110      	movs	r1, #16
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	4798      	blx	r3
}
 800c3c2:	bf00      	nop
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <_ZN10TMCStepper5iholdEh>:

void 	TMCStepper::ihold(uint8_t B) 		{ SET_REG(ihold);		}
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b082      	sub	sp, #8
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	70fb      	strb	r3, [r7, #3]
 800c3d6:	78fb      	ldrb	r3, [r7, #3]
 800c3d8:	f003 031f 	and.w	r3, r3, #31
 800c3dc:	b2d9      	uxtb	r1, r3
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	7913      	ldrb	r3, [r2, #4]
 800c3e2:	f361 0304 	bfi	r3, r1, #0, #5
 800c3e6:	7113      	strb	r3, [r2, #4]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	6852      	ldr	r2, [r2, #4]
 800c3f2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c3f6:	2110      	movs	r1, #16
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	4798      	blx	r3
 800c3fc:	bf00      	nop
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <_ZN10TMCStepper4irunEh>:
void 	TMCStepper::irun(uint8_t B)  		{ SET_REG(irun); 		}
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	70fb      	strb	r3, [r7, #3]
 800c410:	78fb      	ldrb	r3, [r7, #3]
 800c412:	f003 031f 	and.w	r3, r3, #31
 800c416:	b2d9      	uxtb	r1, r3
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	7953      	ldrb	r3, [r2, #5]
 800c41c:	f361 0304 	bfi	r3, r1, #0, #5
 800c420:	7153      	strb	r3, [r2, #5]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	6852      	ldr	r2, [r2, #4]
 800c42c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c430:	2110      	movs	r1, #16
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	4798      	blx	r3
 800c436:	bf00      	nop
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <_ZN14TMC2160Stepper7PWMCONFEm>:
uint8_t TMC2130Stepper::freewheel()		{ GET_REG(freewheel);		}

uint32_t TMC2160Stepper::PWMCONF() {
	return PWMCONF_register.sr;
}
void TMC2160Stepper::PWMCONF(uint32_t input) {
 800c43e:	b580      	push	{r7, lr}
 800c440:	b082      	sub	sp, #8
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	6039      	str	r1, [r7, #0]
	PWMCONF_register.sr = input;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	645a      	str	r2, [r3, #68]	; 0x44
	write(PWMCONF_register.address, PWMCONF_register.sr);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c45a:	2170      	movs	r1, #112	; 0x70
 800c45c:	4798      	blx	r3
}
 800c45e:	bf00      	nop
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <_ZN14TMC2160Stepper8pwm_freqEh>:

void TMC2160Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
 800c466:	b580      	push	{r7, lr}
 800c468:	b082      	sub	sp, #8
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	460b      	mov	r3, r1
 800c470:	70fb      	strb	r3, [r7, #3]
 800c472:	78fb      	ldrb	r3, [r7, #3]
 800c474:	f003 0303 	and.w	r3, r3, #3
 800c478:	b2d9      	uxtb	r1, r3
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 800c480:	f361 0301 	bfi	r3, r1, #0, #2
 800c484:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c494:	2170      	movs	r1, #112	; 0x70
 800c496:	4798      	blx	r3
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <_ZN14TMC2160Stepper10SHORT_CONFEm>:

#define SET_REG(SETTING) SHORT_CONF_register.SETTING = B; write(SHORT_CONF_register.address, SHORT_CONF_register.sr)
#define GET_REG(SETTING) return SHORT_CONF_register.SETTING

uint32_t TMC2160Stepper::SHORT_CONF() { return SHORT_CONF_register.sr; }
void TMC2160Stepper::SHORT_CONF(uint32_t input) {
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
	SHORT_CONF_register.sr = input;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	f3c3 0112 	ubfx	r1, r3, #0, #19
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800c4b4:	f361 231a 	bfi	r3, r1, #8, #19
 800c4b8:	63d3      	str	r3, [r2, #60]	; 0x3c
	write(SHORT_CONF_register.address, SHORT_CONF_register.sr);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c4c6:	f3c2 2212 	ubfx	r2, r2, #8, #19
 800c4ca:	2109      	movs	r1, #9
 800c4cc:	4798      	blx	r3
}
 800c4ce:	bf00      	nop
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <_ZN14TMC5130Stepper7SW_MODEEm>:

// SW_MODE
uint32_t TMC5130Stepper::SW_MODE() {
	return read(SW_MODE_register.address);
}
void TMC5130Stepper::SW_MODE(uint32_t input) {
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b082      	sub	sp, #8
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	6039      	str	r1, [r7, #0]
	SW_MODE_register.sr = input;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4e6:	b299      	uxth	r1, r3
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	f8b2 306a 	ldrh.w	r3, [r2, #106]	; 0x6a
 800c4ee:	f361 030b 	bfi	r3, r1, #0, #12
 800c4f2:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
	write(SW_MODE_register.address, SW_MODE_register.sr);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 800c504:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800c508:	b292      	uxth	r2, r2
 800c50a:	2134      	movs	r1, #52	; 0x34
 800c50c:	4798      	blx	r3
}
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <_ZN10TMCStepperC1Ef>:
		uint32_t MSCURACT();
		int16_t cur_a();
		int16_t cur_b();

	protected:
		TMCStepper(float RS) : Rsense(RS) {};
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	ed87 0a00 	vstr	s0, [r7]
 800c524:	4a10      	ldr	r2, [pc, #64]	; (800c568 <_ZN10TMCStepperC1Ef+0x50>)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	601a      	str	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	3304      	adds	r3, #4
 800c52e:	2100      	movs	r1, #0
 800c530:	460a      	mov	r2, r1
 800c532:	801a      	strh	r2, [r3, #0]
 800c534:	460a      	mov	r2, r1
 800c536:	709a      	strb	r2, [r3, #2]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	71da      	strb	r2, [r3, #7]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	811a      	strh	r2, [r3, #8]
 800c544:	7a9a      	ldrb	r2, [r3, #10]
 800c546:	f022 020f 	bic.w	r2, r2, #15
 800c54a:	729a      	strb	r2, [r3, #10]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	683a      	ldr	r2, [r7, #0]
 800c550:	60da      	str	r2, [r3, #12]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800c558:	611a      	str	r2, [r3, #16]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	08019508 	.word	0x08019508

0800c56c <_ZN14TMC2130StepperC1Etfttta>:

    if (link > chain_length)
      chain_length = link;
  }

TMC2130Stepper::TMC2130Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
 800c56c:	b590      	push	{r4, r7, lr}
 800c56e:	b087      	sub	sp, #28
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	4608      	mov	r0, r1
 800c576:	ed87 0a01 	vstr	s0, [r7, #4]
 800c57a:	4611      	mov	r1, r2
 800c57c:	461a      	mov	r2, r3
 800c57e:	4603      	mov	r3, r0
 800c580:	817b      	strh	r3, [r7, #10]
 800c582:	460b      	mov	r3, r1
 800c584:	813b      	strh	r3, [r7, #8]
 800c586:	4613      	mov	r3, r2
 800c588:	807b      	strh	r3, [r7, #2]
  TMCStepper(RS),
  _pinCS(pinCS),
  link_index(link)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	ed97 0a01 	vldr	s0, [r7, #4]
 800c590:	4618      	mov	r0, r3
 800c592:	f7ff ffc1 	bl	800c518 <_ZN10TMCStepperC1Ef>
 800c596:	4a3d      	ldr	r2, [pc, #244]	; (800c68c <_ZN14TMC2130StepperC1Etfttta+0x120>)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	3315      	adds	r3, #21
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	801a      	strh	r2, [r3, #0]
 800c5a4:	709a      	strb	r2, [r3, #2]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	831a      	strh	r2, [r3, #24]
 800c5ac:	7e9a      	ldrb	r2, [r3, #26]
 800c5ae:	f022 020f 	bic.w	r2, r2, #15
 800c5b2:	769a      	strb	r2, [r3, #26]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	76da      	strb	r2, [r3, #27]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	771a      	strb	r2, [r3, #28]
 800c5be:	7f5a      	ldrb	r2, [r3, #29]
 800c5c0:	f022 020f 	bic.w	r2, r2, #15
 800c5c4:	775a      	strb	r2, [r3, #29]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	83da      	strh	r2, [r3, #30]
 800c5cc:	8c1a      	ldrh	r2, [r3, #32]
 800c5ce:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800c5d2:	f022 0201 	bic.w	r2, r2, #1
 800c5d6:	841a      	strh	r2, [r3, #32]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	845a      	strh	r2, [r3, #34]	; 0x22
 800c5de:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c5e2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800c5e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5ee:	b2d2      	uxtb	r2, r2
 800c5f0:	625a      	str	r2, [r3, #36]	; 0x24
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5fc:	b2d2      	uxtb	r2, r2
 800c5fe:	629a      	str	r2, [r3, #40]	; 0x28
 800c600:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c604:	f022 0201 	bic.w	r2, r2, #1
 800c608:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	332d      	adds	r3, #45	; 0x2d
 800c610:	2200      	movs	r2, #0
 800c612:	801a      	strh	r2, [r3, #0]
 800c614:	709a      	strb	r2, [r3, #2]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	3330      	adds	r3, #48	; 0x30
 800c61a:	2100      	movs	r1, #0
 800c61c:	460a      	mov	r2, r1
 800c61e:	801a      	strh	r2, [r3, #0]
 800c620:	460a      	mov	r2, r1
 800c622:	709a      	strb	r2, [r3, #2]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 800c62a:	f36f 0301 	bfc	r3, #0, #2
 800c62e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	897a      	ldrh	r2, [r7, #10]
 800c636:	869a      	strh	r2, [r3, #52]	; 0x34
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2200      	movs	r2, #0
 800c63c:	639a      	str	r2, [r3, #56]	; 0x38
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  {
    SW_SPIClass *SW_SPI_Obj = new SW_SPIClass(pinMOSI, pinMISO, pinSCK);
 800c648:	2006      	movs	r0, #6
 800c64a:	f00a f94b 	bl	80168e4 <_Znwj>
 800c64e:	4603      	mov	r3, r0
 800c650:	461c      	mov	r4, r3
 800c652:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c654:	887a      	ldrh	r2, [r7, #2]
 800c656:	8939      	ldrh	r1, [r7, #8]
 800c658:	4620      	mov	r0, r4
 800c65a:	f7ff fa37 	bl	800bacc <_ZN11SW_SPIClassC1Ettt>
 800c65e:	617c      	str	r4, [r7, #20]
    TMC_SW_SPI = SW_SPI_Obj;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	639a      	str	r2, [r3, #56]	; 0x38
    defaults();
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	f000 f814 	bl	800c694 <_ZN14TMC2130Stepper8defaultsEv>

    if (link > chain_length)
 800c66c:	4b08      	ldr	r3, [pc, #32]	; (800c690 <_ZN14TMC2130StepperC1Etfttta+0x124>)
 800c66e:	f993 3000 	ldrsb.w	r3, [r3]
 800c672:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 800c676:	429a      	cmp	r2, r3
 800c678:	dd03      	ble.n	800c682 <_ZN14TMC2130StepperC1Etfttta+0x116>
      chain_length = link;
 800c67a:	4a05      	ldr	r2, [pc, #20]	; (800c690 <_ZN14TMC2130StepperC1Etfttta+0x124>)
 800c67c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c680:	7013      	strb	r3, [r2, #0]
  }
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	4618      	mov	r0, r3
 800c686:	371c      	adds	r7, #28
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd90      	pop	{r4, r7, pc}
 800c68c:	080194cc 	.word	0x080194cc
 800c690:	20000c54 	.word	0x20000c54

0800c694 <_ZN14TMC2130Stepper8defaultsEv>:

void TMC2130Stepper::defaults() {
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c6a0:	4904      	ldr	r1, [pc, #16]	; (800c6b4 <_ZN14TMC2130Stepper8defaultsEv+0x20>)
 800c6a2:	f361 0315 	bfi	r3, r1, #0, #22
 800c6a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr
 800c6b4:	00050480 	.word	0x00050480

0800c6b8 <_ZN14TMC2130Stepper11switchCSpinEb>:
void TMC2130Stepper::setSPISpeed(uint32_t speed) {
  spi_speed = speed;
}

__attribute__((weak))
void TMC2130Stepper::switchCSpin(bool state) {
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	70fb      	strb	r3, [r7, #3]
// gpio write CS
  if (TMC_SW_SPI != nullptr){
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d006      	beq.n	800c6da <_ZN14TMC2130Stepper11switchCSpinEb+0x22>
	  TMC_SW_SPI->switchCSpin(state);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d0:	78fa      	ldrb	r2, [r7, #3]
 800c6d2:	4611      	mov	r1, r2
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7ff fa21 	bl	800bb1c <_ZN11SW_SPIClass11switchCSpinEb>
  }
}
 800c6da:	bf00      	nop
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <_ZN14TMC2130Stepper16beginTransactionEv>:

__attribute__((weak))
void TMC2130Stepper::beginTransaction() {
 800c6e2:	b480      	push	{r7}
 800c6e4:	b083      	sub	sp, #12
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
  }
}
 800c6ea:	bf00      	nop
 800c6ec:	370c      	adds	r7, #12
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr

0800c6f6 <_ZN14TMC2130Stepper14endTransactionEv>:
__attribute__((weak))
void TMC2130Stepper::endTransaction() {
 800c6f6:	b480      	push	{r7}
 800c6f8:	b083      	sub	sp, #12
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.endTransaction();
  }
}
 800c6fe:	bf00      	nop
 800c700:	370c      	adds	r7, #12
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <_ZN14TMC2130Stepper8transferEh>:

__attribute__((weak))
uint8_t TMC2130Stepper::transfer(const uint8_t data) {
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	460b      	mov	r3, r1
 800c714:	70fb      	strb	r3, [r7, #3]
  uint8_t out = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	73fb      	strb	r3, [r7, #15]
  if (TMC_SW_SPI != nullptr) {
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d008      	beq.n	800c734 <_ZN14TMC2130Stepper8transferEh+0x2a>
    out = TMC_SW_SPI->transfer(data);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c726:	78fa      	ldrb	r2, [r7, #3]
 800c728:	4611      	mov	r1, r2
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7ff fa16 	bl	800bb5c <_ZN11SW_SPIClass8transferEh>
 800c730:	4603      	mov	r3, r0
 800c732:	73fb      	strb	r3, [r7, #15]
  }
  else {
    //out = SPI.transfer(data);
  }
  return out;
 800c734:	7bfb      	ldrb	r3, [r7, #15]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <_ZN14TMC2130Stepper18transferEmptyBytesEh>:

void TMC2130Stepper::transferEmptyBytes(const uint8_t n) {
 800c73e:	b580      	push	{r7, lr}
 800c740:	b084      	sub	sp, #16
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	460b      	mov	r3, r1
 800c748:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i = 0; i < n; i++) {
 800c74a:	2300      	movs	r3, #0
 800c74c:	73fb      	strb	r3, [r7, #15]
 800c74e:	7bfa      	ldrb	r2, [r7, #15]
 800c750:	78fb      	ldrb	r3, [r7, #3]
 800c752:	429a      	cmp	r2, r3
 800c754:	d207      	bcs.n	800c766 <_ZN14TMC2130Stepper18transferEmptyBytesEh+0x28>
    transfer(0x00);
 800c756:	2100      	movs	r1, #0
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7ff ffd6 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>
  for (uint8_t i = 0; i < n; i++) {
 800c75e:	7bfb      	ldrb	r3, [r7, #15]
 800c760:	3301      	adds	r3, #1
 800c762:	73fb      	strb	r3, [r7, #15]
 800c764:	e7f3      	b.n	800c74e <_ZN14TMC2130Stepper18transferEmptyBytesEh+0x10>
  }
}
 800c766:	bf00      	nop
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
	...

0800c770 <_ZN14TMC2130Stepper4readEh>:

__attribute__((weak))
uint32_t TMC2130Stepper::read(uint8_t addressByte) {
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	460b      	mov	r3, r1
 800c77a:	70fb      	strb	r3, [r7, #3]
  uint32_t out = 0UL;
 800c77c:	2300      	movs	r3, #0
 800c77e:	60bb      	str	r3, [r7, #8]
  int8_t i = 1;
 800c780:	2301      	movs	r3, #1
 800c782:	73fb      	strb	r3, [r7, #15]

  beginTransaction();
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff ffac 	bl	800c6e2 <_ZN14TMC2130Stepper16beginTransactionEv>
  switchCSpin(LOW);
 800c78a:	2100      	movs	r1, #0
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f7ff ff93 	bl	800c6b8 <_ZN14TMC2130Stepper11switchCSpinEb>
  transfer(addressByte);
 800c792:	78fb      	ldrb	r3, [r7, #3]
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7ff ffb7 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>
  // Clear SPI
  transferEmptyBytes(4);
 800c79c:	2104      	movs	r1, #4
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7ff ffcd 	bl	800c73e <_ZN14TMC2130Stepper18transferEmptyBytesEh>

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 800c7aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	da0a      	bge.n	800c7c8 <_ZN14TMC2130Stepper4readEh+0x58>
    transferEmptyBytes(5);
 800c7b2:	2105      	movs	r1, #5
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff ffc2 	bl	800c73e <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 800c7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	73fb      	strb	r3, [r7, #15]
  while(i < link_index) {
 800c7c6:	e7ed      	b.n	800c7a4 <_ZN14TMC2130Stepper4readEh+0x34>
  }

  switchCSpin(HIGH);
 800c7c8:	2101      	movs	r1, #1
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7ff ff74 	bl	800c6b8 <_ZN14TMC2130Stepper11switchCSpinEb>
  switchCSpin(LOW);
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff ff70 	bl	800c6b8 <_ZN14TMC2130Stepper11switchCSpinEb>

  // Shift data from target link into the last one...
  while(i < chain_length) {
 800c7d8:	4b28      	ldr	r3, [pc, #160]	; (800c87c <_ZN14TMC2130Stepper4readEh+0x10c>)
 800c7da:	f993 3000 	ldrsb.w	r3, [r3]
 800c7de:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	da0a      	bge.n	800c7fc <_ZN14TMC2130Stepper4readEh+0x8c>
    transferEmptyBytes(5);
 800c7e6:	2105      	movs	r1, #5
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f7ff ffa8 	bl	800c73e <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 800c7ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	73fb      	strb	r3, [r7, #15]
  while(i < chain_length) {
 800c7fa:	e7ed      	b.n	800c7d8 <_ZN14TMC2130Stepper4readEh+0x68>
  }

  // ...and once more to MCU
  status_response = transfer(addressByte); // Send the address byte again
 800c7fc:	78fb      	ldrb	r3, [r7, #3]
 800c7fe:	4619      	mov	r1, r3
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7ff ff82 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>
 800c806:	4603      	mov	r3, r0
 800c808:	461a      	mov	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	751a      	strb	r2, [r3, #20]
  out  = transfer(0x00);
 800c80e:	2100      	movs	r1, #0
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7ff ff7a 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>
 800c816:	4603      	mov	r3, r0
 800c818:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	021b      	lsls	r3, r3, #8
 800c81e:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 800c820:	2100      	movs	r1, #0
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7ff ff71 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>
 800c828:	4603      	mov	r3, r0
 800c82a:	461a      	mov	r2, r3
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	4313      	orrs	r3, r2
 800c830:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	021b      	lsls	r3, r3, #8
 800c836:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 800c838:	2100      	movs	r1, #0
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7ff ff65 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>
 800c840:	4603      	mov	r3, r0
 800c842:	461a      	mov	r2, r3
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	4313      	orrs	r3, r2
 800c848:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	021b      	lsls	r3, r3, #8
 800c84e:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 800c850:	2100      	movs	r1, #0
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7ff ff59 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>
 800c858:	4603      	mov	r3, r0
 800c85a:	461a      	mov	r2, r3
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	4313      	orrs	r3, r2
 800c860:	60bb      	str	r3, [r7, #8]

  endTransaction();
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7ff ff47 	bl	800c6f6 <_ZN14TMC2130Stepper14endTransactionEv>
  switchCSpin(HIGH);
 800c868:	2101      	movs	r1, #1
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7ff ff24 	bl	800c6b8 <_ZN14TMC2130Stepper11switchCSpinEb>
  return out;
 800c870:	68bb      	ldr	r3, [r7, #8]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	20000c54 	.word	0x20000c54

0800c880 <_ZN14TMC2130Stepper5writeEhm>:

__attribute__((weak))
void TMC2130Stepper::write(uint8_t addressByte, uint32_t config) {
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	460b      	mov	r3, r1
 800c88a:	607a      	str	r2, [r7, #4]
 800c88c:	72fb      	strb	r3, [r7, #11]
  addressByte |= TMC_WRITE;
 800c88e:	7afb      	ldrb	r3, [r7, #11]
 800c890:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c894:	72fb      	strb	r3, [r7, #11]
  int8_t i = 1;
 800c896:	2301      	movs	r3, #1
 800c898:	75fb      	strb	r3, [r7, #23]

  beginTransaction();
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f7ff ff21 	bl	800c6e2 <_ZN14TMC2130Stepper16beginTransactionEv>
  switchCSpin(LOW);
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f7ff ff08 	bl	800c6b8 <_ZN14TMC2130Stepper11switchCSpinEb>
  status_response = transfer(addressByte);
 800c8a8:	7afb      	ldrb	r3, [r7, #11]
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f7ff ff2c 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	751a      	strb	r2, [r3, #20]
  transfer(config>>24);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	0e1b      	lsrs	r3, r3, #24
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f7ff ff21 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>
  transfer(config>>16);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	0c1b      	lsrs	r3, r3, #16
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f7ff ff1a 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>
  transfer(config>>8);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	0a1b      	lsrs	r3, r3, #8
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	4619      	mov	r1, r3
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f7ff ff13 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>
  transfer(config);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f7ff ff0d 	bl	800c70a <_ZN14TMC2130Stepper8transferEh>

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f993 303c 	ldrsb.w	r3, [r3, #60]	; 0x3c
 800c8f6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	da0a      	bge.n	800c914 <_ZN14TMC2130Stepper5writeEhm+0x94>
    transferEmptyBytes(5);
 800c8fe:	2105      	movs	r1, #5
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f7ff ff1c 	bl	800c73e <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 800c906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	3301      	adds	r3, #1
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	75fb      	strb	r3, [r7, #23]
  while(i < link_index) {
 800c912:	e7ed      	b.n	800c8f0 <_ZN14TMC2130Stepper5writeEhm+0x70>
  }

  endTransaction();
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f7ff feee 	bl	800c6f6 <_ZN14TMC2130Stepper14endTransactionEv>
  switchCSpin(HIGH);
 800c91a:	2101      	movs	r1, #1
 800c91c:	68f8      	ldr	r0, [r7, #12]
 800c91e:	f7ff fecb 	bl	800c6b8 <_ZN14TMC2130Stepper11switchCSpinEb>
}
 800c922:	bf00      	nop
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <_ZN14TMC2130Stepper9isEnabledEv>:

/**
 *  Helper functions
 */

bool TMC2130Stepper::isEnabled() { return !drv_enn_cfg6() && toff(); }
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b082      	sub	sp, #8
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f823 	bl	800c97e <_ZN14TMC2130Stepper12drv_enn_cfg6Ev>
 800c938:	4603      	mov	r3, r0
 800c93a:	f083 0301 	eor.w	r3, r3, #1
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	d007      	beq.n	800c954 <_ZN14TMC2130Stepper9isEnabledEv+0x2a>
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7ff fb86 	bl	800c056 <_ZN14TMC2130Stepper4toffEv>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d001      	beq.n	800c954 <_ZN14TMC2130Stepper9isEnabledEv+0x2a>
 800c950:	2301      	movs	r3, #1
 800c952:	e000      	b.n	800c956 <_ZN14TMC2130Stepper9isEnabledEv+0x2c>
 800c954:	2300      	movs	r3, #0
 800c956:	4618      	mov	r0, r3
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <_ZN14TMC2130Stepper4IOINEv>:
  ENCM_CTRL(ENCM_CTRL_register.sr);
}

///////////////////////////////////////////////////////////////////////////////////////
// R: IOIN
uint32_t  TMC2130Stepper::IOIN()    { return read(IOIN_t::address); }
 800c95e:	b580      	push	{r7, lr}
 800c960:	b082      	sub	sp, #8
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	3304      	adds	r3, #4
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2104      	movs	r1, #4
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	4798      	blx	r3
 800c974:	4603      	mov	r3, r0
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <_ZN14TMC2130Stepper12drv_enn_cfg6Ev>:
bool TMC2130Stepper::step()         { IOIN_t r{0}; r.sr = IOIN(); return r.step; }
bool TMC2130Stepper::dir()          { IOIN_t r{0}; r.sr = IOIN(); return r.dir; }
bool TMC2130Stepper::dcen_cfg4()    { IOIN_t r{0}; r.sr = IOIN(); return r.dcen_cfg4; }
bool TMC2130Stepper::dcin_cfg5()    { IOIN_t r{0}; r.sr = IOIN(); return r.dcin_cfg5; }
bool TMC2130Stepper::drv_enn_cfg6() { IOIN_t r{0}; r.sr = IOIN(); return r.drv_enn_cfg6; }
 800c97e:	b580      	push	{r7, lr}
 800c980:	b084      	sub	sp, #16
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	2300      	movs	r3, #0
 800c988:	60fb      	str	r3, [r7, #12]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7ff ffe7 	bl	800c95e <_ZN14TMC2130Stepper4IOINEv>
 800c990:	4603      	mov	r3, r0
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	7b3b      	ldrb	r3, [r7, #12]
 800c996:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <_ZN14TMC2130Stepper9TCOOLTHRSEm>:
bool TMC2130Stepper::dco()          { IOIN_t r{0}; r.sr = IOIN(); return r.dco; }
uint8_t TMC2130Stepper::version()   { IOIN_t r{0}; r.sr = IOIN(); return r.version; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TCOOLTHRS
uint32_t TMC2130Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2130Stepper::TCOOLTHRS(uint32_t input) {
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	b291      	uxth	r1, r2
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	4301      	orrs	r1, r0
 800c9bc:	8319      	strh	r1, [r3, #24]
 800c9be:	0c12      	lsrs	r2, r2, #16
 800c9c0:	f002 020f 	and.w	r2, r2, #15
 800c9c4:	f002 000f 	and.w	r0, r2, #15
 800c9c8:	7e9a      	ldrb	r2, [r3, #26]
 800c9ca:	f022 020f 	bic.w	r2, r2, #15
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	430a      	orrs	r2, r1
 800c9d4:	769a      	strb	r2, [r3, #26]
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	6992      	ldr	r2, [r2, #24]
 800c9e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c9e4:	2114      	movs	r1, #20
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	4798      	blx	r3
}
 800c9ea:	bf00      	nop
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <_ZN14TMC2130Stepper5THIGHEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: THIGH
uint32_t TMC2130Stepper::THIGH() { return THIGH_register.sr; }
void TMC2130Stepper::THIGH(uint32_t input) {
 800c9f2:	b590      	push	{r4, r7, lr}
 800c9f4:	b083      	sub	sp, #12
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	6039      	str	r1, [r7, #0]
  THIGH_register.sr = input;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	b2d1      	uxtb	r1, r2
 800ca06:	2000      	movs	r0, #0
 800ca08:	4301      	orrs	r1, r0
 800ca0a:	76d9      	strb	r1, [r3, #27]
 800ca0c:	0a11      	lsrs	r1, r2, #8
 800ca0e:	b2c9      	uxtb	r1, r1
 800ca10:	2000      	movs	r0, #0
 800ca12:	4301      	orrs	r1, r0
 800ca14:	7719      	strb	r1, [r3, #28]
 800ca16:	0c12      	lsrs	r2, r2, #16
 800ca18:	f002 020f 	and.w	r2, r2, #15
 800ca1c:	f002 000f 	and.w	r0, r2, #15
 800ca20:	7f5a      	ldrb	r2, [r3, #29]
 800ca22:	f022 020f 	bic.w	r2, r2, #15
 800ca26:	4611      	mov	r1, r2
 800ca28:	4602      	mov	r2, r0
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	775a      	strb	r2, [r3, #29]
  write(THIGH_register.address, THIGH_register.sr);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681c      	ldr	r4, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	7eda      	ldrb	r2, [r3, #27]
 800ca38:	8b9b      	ldrh	r3, [r3, #28]
 800ca3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca3e:	021b      	lsls	r3, r3, #8
 800ca40:	4313      	orrs	r3, r2
 800ca42:	461a      	mov	r2, r3
 800ca44:	2115      	movs	r1, #21
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	47a0      	blx	r4
}
 800ca4a:	bf00      	nop
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd90      	pop	{r4, r7, pc}

0800ca52 <_ZN14TMC2130Stepper7XDIRECTEm>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: XDIRECT
uint32_t TMC2130Stepper::XDIRECT() {
  return read(XDIRECT_register.address);
}
void TMC2130Stepper::XDIRECT(uint32_t input) {
 800ca52:	b590      	push	{r4, r7, lr}
 800ca54:	b083      	sub	sp, #12
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
 800ca5a:	6039      	str	r1, [r7, #0]
  XDIRECT_register.sr = input;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	b291      	uxth	r1, r2
 800ca66:	2000      	movs	r0, #0
 800ca68:	4301      	orrs	r1, r0
 800ca6a:	83d9      	strh	r1, [r3, #30]
 800ca6c:	0c12      	lsrs	r2, r2, #16
 800ca6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca72:	f3c2 0008 	ubfx	r0, r2, #0, #9
 800ca76:	8c1a      	ldrh	r2, [r3, #32]
 800ca78:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800ca7c:	f022 0201 	bic.w	r2, r2, #1
 800ca80:	4611      	mov	r1, r2
 800ca82:	4602      	mov	r2, r0
 800ca84:	430a      	orrs	r2, r1
 800ca86:	841a      	strh	r2, [r3, #32]
  write(XDIRECT_register.address, XDIRECT_register.sr);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681c      	ldr	r4, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	8bda      	ldrh	r2, [r3, #30]
 800ca92:	8c1b      	ldrh	r3, [r3, #32]
 800ca94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca98:	041b      	lsls	r3, r3, #16
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	212d      	movs	r1, #45	; 0x2d
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	47a0      	blx	r4
}
 800caa4:	bf00      	nop
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd90      	pop	{r4, r7, pc}

0800caac <_ZN14TMC2130Stepper6VDCMINEm>:
int16_t TMC2130Stepper::coil_A()        { XDIRECT_t r{0}; r.sr = XDIRECT(); return r.coil_A; }
int16_t TMC2130Stepper::coil_B()        { XDIRECT_t r{0}; r.sr = XDIRECT(); return r.coil_B; }
///////////////////////////////////////////////////////////////////////////////////////
// W: VDCMIN
uint32_t TMC2130Stepper::VDCMIN() { return VDCMIN_register.sr; }
void TMC2130Stepper::VDCMIN(uint32_t input) {
 800caac:	b590      	push	{r4, r7, lr}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  VDCMIN_register.sr = input;
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	b291      	uxth	r1, r2
 800cac0:	2000      	movs	r0, #0
 800cac2:	4301      	orrs	r1, r0
 800cac4:	8459      	strh	r1, [r3, #34]	; 0x22
 800cac6:	0c12      	lsrs	r2, r2, #16
 800cac8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cacc:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 800cad0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800cad4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800cad8:	4611      	mov	r1, r2
 800cada:	4602      	mov	r2, r0
 800cadc:	430a      	orrs	r2, r1
 800cade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  write(VDCMIN_register.address, VDCMIN_register.sr);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	681c      	ldr	r4, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800caec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800caf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf4:	041b      	lsls	r3, r3, #16
 800caf6:	4313      	orrs	r3, r2
 800caf8:	461a      	mov	r2, r3
 800cafa:	2133      	movs	r1, #51	; 0x33
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	47a0      	blx	r4
}
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd90      	pop	{r4, r7, pc}

0800cb08 <_ZN14TMC2130Stepper6DCCTRLEm>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: DCCTRL
void TMC2130Stepper::DCCTRL(uint32_t input) {
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
	DCCTRL_register.sr = input;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cb1c:	f361 231f 	bfi	r3, r1, #8, #24
 800cb20:	62d3      	str	r3, [r2, #44]	; 0x2c
	write(DCCTRL_register.address, DCCTRL_register.sr);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cb2c:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800cb30:	216e      	movs	r1, #110	; 0x6e
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	4798      	blx	r3
}
 800cb36:	bf00      	nop
 800cb38:	3708      	adds	r7, #8
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
	...

0800cb40 <_ZN14TMC2160StepperC1Etfttta>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2130Stepper(pinCS, RS, link)
  { defaults(); }
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
 800cb40:	b590      	push	{r4, r7, lr}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af02      	add	r7, sp, #8
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	4608      	mov	r0, r1
 800cb4a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb4e:	4611      	mov	r1, r2
 800cb50:	461a      	mov	r2, r3
 800cb52:	4603      	mov	r3, r0
 800cb54:	817b      	strh	r3, [r7, #10]
 800cb56:	460b      	mov	r3, r1
 800cb58:	813b      	strh	r3, [r7, #8]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	807b      	strh	r3, [r7, #2]
  TMC2130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	887c      	ldrh	r4, [r7, #2]
 800cb62:	893a      	ldrh	r2, [r7, #8]
 800cb64:	8979      	ldrh	r1, [r7, #10]
 800cb66:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800cb6a:	9301      	str	r3, [sp, #4]
 800cb6c:	8c3b      	ldrh	r3, [r7, #32]
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	4623      	mov	r3, r4
 800cb72:	ed97 0a01 	vldr	s0, [r7, #4]
 800cb76:	f7ff fcf9 	bl	800c56c <_ZN14TMC2130StepperC1Etfttta>
 800cb7a:	4a0f      	ldr	r2, [pc, #60]	; (800cbb8 <_ZN14TMC2160StepperC1Etfttta+0x78>)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	601a      	str	r2, [r3, #0]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	333d      	adds	r3, #61	; 0x3d
 800cb84:	2200      	movs	r2, #0
 800cb86:	801a      	strh	r2, [r3, #0]
 800cb88:	709a      	strb	r2, [r3, #2]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	3340      	adds	r3, #64	; 0x40
 800cb8e:	2100      	movs	r1, #0
 800cb90:	460a      	mov	r2, r1
 800cb92:	801a      	strh	r2, [r3, #0]
 800cb94:	460a      	mov	r2, r1
 800cb96:	709a      	strb	r2, [r3, #2]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	645a      	str	r2, [r3, #68]	; 0x44
  { defaults(); }
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f000 f858 	bl	800cc5c <_ZN14TMC2160Stepper8defaultsEv>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd90      	pop	{r4, r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	08019544 	.word	0x08019544

0800cbbc <_ZN14TMC2160Stepper5beginEv>:
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
  TMC2130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC2160Stepper::begin() {
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  //set pins
  //pinMode(_pinCS, OUTPUT);
  switchCSpin(HIGH);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7ff fd75 	bl	800c6b8 <_ZN14TMC2130Stepper11switchCSpinEb>

  if (TMC_SW_SPI != nullptr) TMC_SW_SPI->init();
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d004      	beq.n	800cbe0 <_ZN14TMC2160Stepper5beginEv+0x24>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fe ff93 	bl	800bb06 <_ZN11SW_SPIClass4initEv>

  GCONF(GCONF_register.sr);
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	f3c3 2311 	ubfx	r3, r3, #8, #18
 800cbea:	4619      	mov	r1, r3
 800cbec:	4610      	mov	r0, r2
 800cbee:	f7ff fbb6 	bl	800c35e <_ZN14TMC2130Stepper5GCONFEm>
  CHOPCONF(CHOPCONF_register.sr);
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	4610      	mov	r0, r2
 800cbfe:	f7ff f903 	bl	800be08 <_ZN14TMC2130Stepper8CHOPCONFEm>
  COOLCONF(COOLCONF_register.sr);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc08:	0a12      	lsrs	r2, r2, #8
 800cc0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc0e:	f003 0301 	and.w	r3, r3, #1
 800cc12:	061b      	lsls	r3, r3, #24
 800cc14:	4313      	orrs	r3, r2
 800cc16:	4619      	mov	r1, r3
 800cc18:	f7ff fa8f 	bl	800c13a <_ZN14TMC2130Stepper8COOLCONFEm>
  PWMCONF(PWMCONF_register.sr);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7ff fc0b 	bl	800c43e <_ZN14TMC2160Stepper7PWMCONFEm>
  IHOLD_IRUN(IHOLD_IRUN_register.sr);
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc32:	4619      	mov	r1, r3
 800cc34:	4610      	mov	r0, r2
 800cc36:	f7ff fbad 	bl	800c394 <_ZN10TMCStepper10IHOLD_IRUNEm>

  toff(8); //off_time(8);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2108      	movs	r1, #8
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7ff f8f8 	bl	800be34 <_ZN14TMC2130Stepper4toffEh>
  tbl(1); //blank_time(24);
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	332c      	adds	r3, #44	; 0x2c
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2101      	movs	r1, #1
 800cc50:	4610      	mov	r0, r2
 800cc52:	4798      	blx	r3
}
 800cc54:	bf00      	nop
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <_ZN14TMC2160Stepper8defaultsEv>:

void TMC2160Stepper::defaults() {
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
 800cc6a:	2106      	movs	r1, #6
 800cc6c:	f361 0303 	bfi	r3, r1, #0, #4
 800cc70:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  SHORT_CONF_register.s2g_level = 6;
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800cc7a:	2106      	movs	r1, #6
 800cc7c:	f361 0303 	bfi	r3, r1, #0, #4
 800cc80:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
  SHORT_CONF_register.shortfilter = 0b01;
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800cc8a:	2101      	movs	r1, #1
 800cc8c:	f361 0301 	bfi	r3, r1, #0, #2
 800cc90:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  SHORT_CONF_register.shortdelay = 0;
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800cc9a:	f36f 0382 	bfc	r3, #2, #1
 800cc9e:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  DRV_CONF_register.bbmtime = 0;
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cca8:	f36f 0304 	bfc	r3, #0, #5
 800ccac:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
  DRV_CONF_register.bbmclks = 4;
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ccb6:	2104      	movs	r1, #4
 800ccb8:	f361 0303 	bfi	r3, r1, #0, #4
 800ccbc:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  DRV_CONF_register.otselect = 0b00;
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800ccc6:	f36f 0301 	bfc	r3, #0, #2
 800ccca:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.drvstrength = 0b10;
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800ccd4:	2102      	movs	r1, #2
 800ccd6:	f361 0383 	bfi	r3, r1, #2, #2
 800ccda:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.filt_isense = 0b00;
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800cce4:	f36f 1305 	bfc	r3, #4, #2
 800cce8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  TPOWERDOWN_register.sr = 10;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	220a      	movs	r2, #10
 800ccf0:	71da      	strb	r2, [r3, #7]
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccf6:	b2d2      	uxtb	r2, r2
 800ccf8:	f042 4282 	orr.w	r2, r2, #1090519040	; 0x41000000
 800ccfc:	f442 32a8 	orr.w	r2, r2, #86016	; 0x15000
 800cd00:	625a      	str	r2, [r3, #36]	; 0x24
 800cd02:	2200      	movs	r2, #0
 800cd04:	f042 0210 	orr.w	r2, r2, #16
 800cd08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  PWMCONF_register.sr = 0xC40C001E;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	4a04      	ldr	r2, [pc, #16]	; (800cd20 <_ZN14TMC2160Stepper8defaultsEv+0xc4>)
 800cd10:	645a      	str	r2, [r3, #68]	; 0x44
}
 800cd12:	bf00      	nop
 800cd14:	370c      	adds	r7, #12
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	c40c001e 	.word	0xc40c001e

0800cd24 <_ZN14TMC2160Stepper11rms_currentEt>:
                 32 * 256 * sqrt(2) * I_rms * R_sense    |
  GLOBALSCALER = ------------------------------------    |
                           (CS + 1) * V_fs               | V_fs = 0.325

*/
void TMC2160Stepper::rms_current(uint16_t mA) {
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08a      	sub	sp, #40	; 0x28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	817b      	strh	r3, [r7, #10]
  constexpr uint32_t V_fs = 325; // 0.325 * 1000
 800cd30:	f240 1345 	movw	r3, #325	; 0x145
 800cd34:	61fb      	str	r3, [r7, #28]
  uint8_t CS = 31;
 800cd36:	231f      	movs	r3, #31
 800cd38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t scaler = 0; // = 256
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	623b      	str	r3, [r7, #32]

  const uint16_t RS_scaled = Rsense * 0xFFFF; // Scale to 16b
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	edd3 7a03 	vldr	s15, [r3, #12]
 800cd46:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800ce1c <_ZN14TMC2160Stepper11rms_currentEt+0xf8>
 800cd4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd52:	ee17 3a90 	vmov	r3, s15
 800cd56:	837b      	strh	r3, [r7, #26]
  uint32_t numerator = 11585; // 32 * 256 * sqrt(2)
 800cd58:	f642 5341 	movw	r3, #11585	; 0x2d41
 800cd5c:	617b      	str	r3, [r7, #20]
  numerator *= RS_scaled;
 800cd5e:	8b7a      	ldrh	r2, [r7, #26]
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	fb02 f303 	mul.w	r3, r2, r3
 800cd66:	617b      	str	r3, [r7, #20]
  numerator >>= 8;
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	0a1b      	lsrs	r3, r3, #8
 800cd6c:	617b      	str	r3, [r7, #20]
  numerator *= mA;
 800cd6e:	897a      	ldrh	r2, [r7, #10]
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	fb02 f303 	mul.w	r3, r2, r3
 800cd76:	617b      	str	r3, [r7, #20]

  do {
    uint32_t denominator = V_fs * 0xFFFF >> 8;
 800cd78:	4b29      	ldr	r3, [pc, #164]	; (800ce20 <_ZN14TMC2160Stepper11rms_currentEt+0xfc>)
 800cd7a:	613b      	str	r3, [r7, #16]
    denominator *= CS+1;
 800cd7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd80:	3301      	adds	r3, #1
 800cd82:	461a      	mov	r2, r3
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	fb02 f303 	mul.w	r3, r2, r3
 800cd8a:	613b      	str	r3, [r7, #16]
    scaler = numerator / denominator;
 800cd8c:	697a      	ldr	r2, [r7, #20]
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd94:	623b      	str	r3, [r7, #32]

    if (scaler > 255) scaler = 0; // Maximum
 800cd96:	6a3b      	ldr	r3, [r7, #32]
 800cd98:	2bff      	cmp	r3, #255	; 0xff
 800cd9a:	d902      	bls.n	800cda2 <_ZN14TMC2160Stepper11rms_currentEt+0x7e>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	623b      	str	r3, [r7, #32]
 800cda0:	e007      	b.n	800cdb2 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
    else if (scaler < 128) CS--;  // Try again with smaller CS
 800cda2:	6a3b      	ldr	r3, [r7, #32]
 800cda4:	2b7f      	cmp	r3, #127	; 0x7f
 800cda6:	d804      	bhi.n	800cdb2 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
 800cda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdac:	3b01      	subs	r3, #1
 800cdae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while(0 < scaler && scaler < 128);
 800cdb2:	6a3b      	ldr	r3, [r7, #32]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d003      	beq.n	800cdc0 <_ZN14TMC2160Stepper11rms_currentEt+0x9c>
 800cdb8:	6a3b      	ldr	r3, [r7, #32]
 800cdba:	2b7f      	cmp	r3, #127	; 0x7f
 800cdbc:	d800      	bhi.n	800cdc0 <_ZN14TMC2160Stepper11rms_currentEt+0x9c>
  do {
 800cdbe:	e7db      	b.n	800cd78 <_ZN14TMC2160Stepper11rms_currentEt+0x54>


  if (CS > 31)
 800cdc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdc4:	2b1f      	cmp	r3, #31
 800cdc6:	d902      	bls.n	800cdce <_ZN14TMC2160Stepper11rms_currentEt+0xaa>
    CS = 31;
 800cdc8:	231f      	movs	r3, #31
 800cdca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  GLOBAL_SCALER(scaler);
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f000 f825 	bl	800ce24 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>
  irun(CS);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cde0:	4611      	mov	r1, r2
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7ff fb0e 	bl	800c404 <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdee:	ee07 3a90 	vmov	s15, r3
 800cdf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	edd3 7a04 	vldr	s15, [r3, #16]
 800cdfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce04:	edc7 7a01 	vstr	s15, [r7, #4]
 800ce08:	793b      	ldrb	r3, [r7, #4]
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	4610      	mov	r0, r2
 800ce10:	f7ff fadb 	bl	800c3ca <_ZN10TMCStepper5iholdEh>
}
 800ce14:	bf00      	nop
 800ce16:	3728      	adds	r7, #40	; 0x28
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	477fff00 	.word	0x477fff00
 800ce20:	000144fe 	.word	0x000144fe

0800ce24 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>:
bool    TMC2160Stepper::dco_cfg6()       { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.dco_cfg6; }
uint8_t TMC2160Stepper::version()        { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.version; }

// W: GLOBAL_SCALER
uint8_t TMC2160Stepper::GLOBAL_SCALER() { return GLOBAL_SCALER_register.sr; }
void TMC2160Stepper::GLOBAL_SCALER(uint8_t input) {
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	70fb      	strb	r3, [r7, #3]
  GLOBAL_SCALER_register.sr = input;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	78fa      	ldrb	r2, [r7, #3]
 800ce34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  write(GLOBAL_SCALER_register.address, GLOBAL_SCALER_register.sr);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800ce46:	210b      	movs	r1, #11
 800ce48:	4798      	blx	r3
}
 800ce4a:	bf00      	nop
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
	...

0800ce54 <_ZN14TMC5130StepperC1Etfttta>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2160Stepper(pinCS, RS, link)
  { defaults(); }
TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link):
 800ce54:	b590      	push	{r4, r7, lr}
 800ce56:	b087      	sub	sp, #28
 800ce58:	af02      	add	r7, sp, #8
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	4608      	mov	r0, r1
 800ce5e:	ed87 0a01 	vstr	s0, [r7, #4]
 800ce62:	4611      	mov	r1, r2
 800ce64:	461a      	mov	r2, r3
 800ce66:	4603      	mov	r3, r0
 800ce68:	817b      	strh	r3, [r7, #10]
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	813b      	strh	r3, [r7, #8]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	807b      	strh	r3, [r7, #2]
  TMC2160Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800ce72:	68f8      	ldr	r0, [r7, #12]
 800ce74:	887c      	ldrh	r4, [r7, #2]
 800ce76:	893a      	ldrh	r2, [r7, #8]
 800ce78:	8979      	ldrh	r1, [r7, #10]
 800ce7a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800ce7e:	9301      	str	r3, [sp, #4]
 800ce80:	8c3b      	ldrh	r3, [r7, #32]
 800ce82:	9300      	str	r3, [sp, #0]
 800ce84:	4623      	mov	r3, r4
 800ce86:	ed97 0a01 	vldr	s0, [r7, #4]
 800ce8a:	f7ff fe59 	bl	800cb40 <_ZN14TMC2160StepperC1Etfttta>
 800ce8e:	4a48      	ldr	r2, [pc, #288]	; (800cfb0 <_ZN14TMC5130StepperC1Etfttta+0x15c>)
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 800ce9a:	f36f 030b 	bfc	r3, #0, #12
 800ce9e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 800cea8:	f36f 0300 	bfc	r3, #0, #1
 800ceac:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800cebe:	2200      	movs	r2, #0
 800cec0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800cec4:	2200      	movs	r2, #0
 800cec6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	f892 304f 	ldrb.w	r3, [r2, #79]	; 0x4f
 800ced0:	f36f 0301 	bfc	r3, #0, #2
 800ced4:	f882 304f 	strb.w	r3, [r2, #79]	; 0x4f
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	651a      	str	r2, [r3, #80]	; 0x50
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800cee6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800ceea:	f022 0203 	bic.w	r2, r2, #3
 800ceee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800cf0e:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800cf12:	f022 020f 	bic.w	r2, r2, #15
 800cf16:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800cf2a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800cf2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800cf32:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800cf60:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800cf64:	f022 0203 	bic.w	r2, r2, #3
 800cf68:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	f8b2 306a 	ldrh.w	r3, [r2, #106]	; 0x6a
 800cf7a:	f36f 030b 	bfc	r3, #0, #12
 800cf7e:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	f8b2 306c 	ldrh.w	r3, [r2, #108]	; 0x6c
 800cf88:	f36f 030a 	bfc	r3, #0, #11
 800cf8c:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  { defaults(); }
 800cf9e:	68f8      	ldr	r0, [r7, #12]
 800cfa0:	f000 f81c 	bl	800cfdc <_ZN14TMC5130Stepper8defaultsEv>
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd90      	pop	{r4, r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	08019580 	.word	0x08019580

0800cfb4 <_ZN14TMC5130Stepper5beginEv>:
TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
  TMC2160Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5130Stepper::begin() {
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  TMC2160Stepper::begin();
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7ff fdfc 	bl	800cbbc <_ZN14TMC2160Stepper5beginEv>

  XTARGET(0);
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fa4e 	bl	800d468 <_ZN14TMC5130Stepper7XTARGETEl>
  XACTUAL(0);
 800cfcc:	2100      	movs	r1, #0
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 f8e0 	bl	800d194 <_ZN14TMC5130Stepper7XACTUALEl>
  //while (( RAMP_STAT() & cfg.VZERO_bm) != cfg.VZERO_bm) {}
}
 800cfd4:	bf00      	nop
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <_ZN14TMC5130Stepper8defaultsEv>:

void TMC5130Stepper::defaults() {
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  OUTPUT_register.sr = 1;
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 800cfea:	f043 0301 	orr.w	r3, r3, #1
 800cfee:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
  ENC_CONST_register.sr = 65536;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800cffa:	2200      	movs	r2, #0
 800cffc:	f042 0201 	orr.w	r2, r2, #1
 800d000:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	4a04      	ldr	r2, [pc, #16]	; (800d018 <_ZN14TMC5130Stepper8defaultsEv+0x3c>)
 800d008:	645a      	str	r2, [r3, #68]	; 0x44
}
 800d00a:	bf00      	nop
 800d00c:	370c      	adds	r7, #12
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	00050480 	.word	0x00050480

0800d01c <_ZN14TMC5130Stepper9SLAVECONFEt>:
// R: IFCNT
uint8_t TMC5130Stepper::IFCNT() { return read(IFCNT_t::address); }
///////////////////////////////////////////////////////////////////////////////////////
// W: SLAVECONF
uint16_t TMC5130Stepper::SLAVECONF() { return SLAVECONF_register.sr; }
void TMC5130Stepper::SLAVECONF(uint16_t input) {
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	460b      	mov	r3, r1
 800d026:	807b      	strh	r3, [r7, #2]
  SLAVECONF_register.sr = input;
 800d028:	887b      	ldrh	r3, [r7, #2]
 800d02a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d02e:	b299      	uxth	r1, r3
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 800d036:	f361 030b 	bfi	r3, r1, #0, #12
 800d03a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
  write(SLAVECONF_register.address, SLAVECONF_register.sr);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800d04c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800d050:	b292      	uxth	r2, r2
 800d052:	2103      	movs	r1, #3
 800d054:	4798      	blx	r3
}
 800d056:	bf00      	nop
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <_ZN14TMC5130Stepper4IOINEv>:
///////////////////////////////////////////////////////////////////////////////////////
// R: IOIN
uint32_t  TMC5130Stepper::IOIN() {
 800d05e:	b580      	push	{r7, lr}
 800d060:	b082      	sub	sp, #8
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
  return read(TMC5130_n::IOIN_t::address);
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	3304      	adds	r3, #4
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2104      	movs	r1, #4
 800d072:	4610      	mov	r0, r2
 800d074:	4798      	blx	r3
 800d076:	4603      	mov	r3, r0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <_ZN14TMC5130Stepper7sd_modeEv>:
bool    TMC5130Stepper::refr_dir()       { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.refr_dir; }
bool    TMC5130Stepper::encb_dcen_cfg4() { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.encb_dcen_cfg4; }
bool    TMC5130Stepper::enca_dcin_cfg5() { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.enca_dcin_cfg5; }
bool    TMC5130Stepper::drv_enn_cfg6()   { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.drv_enn_cfg6; }
bool    TMC5130Stepper::enc_n_dco()      { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.enc_n_dco; }
bool    TMC5130Stepper::sd_mode()        { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.sd_mode; }
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	2300      	movs	r3, #0
 800d08a:	60fb      	str	r3, [r7, #12]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7ff ffe6 	bl	800d05e <_ZN14TMC5130Stepper4IOINEv>
 800d092:	4603      	mov	r3, r0
 800d094:	60fb      	str	r3, [r7, #12]
 800d096:	7b3b      	ldrb	r3, [r7, #12]
 800d098:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <_ZN14TMC5130Stepper7versionEv>:
bool    TMC5130Stepper::swcomp_in()      { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.swcomp_in; }
uint8_t   TMC5130Stepper::version()      { TMC5130_n::IOIN_t r{0}; r.sr = IOIN(); return r.version; }
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b084      	sub	sp, #16
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	60fb      	str	r3, [r7, #12]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7ff ffd3 	bl	800d05e <_ZN14TMC5130Stepper4IOINEv>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	60fb      	str	r3, [r7, #12]
 800d0bc:	7bfb      	ldrb	r3, [r7, #15]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <_ZN14TMC5130Stepper10TMC_OUTPUTEb>:
///////////////////////////////////////////////////////////////////////////////////////
// W: OUTPUT
bool TMC5130Stepper::TMC_OUTPUT() { return OUTPUT_register.sr; }
void TMC5130Stepper::TMC_OUTPUT(bool input) {
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b082      	sub	sp, #8
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	70fb      	strb	r3, [r7, #3]
  OUTPUT_register.sr = input;
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 800d0d8:	78f9      	ldrb	r1, [r7, #3]
 800d0da:	f361 0300 	bfi	r3, r1, #0, #1
 800d0de:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
  write(OUTPUT_register.address, OUTPUT_register.sr);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 800d0f0:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800d0f4:	b2d2      	uxtb	r2, r2
 800d0f6:	2104      	movs	r1, #4
 800d0f8:	4798      	blx	r3
}
 800d0fa:	bf00      	nop
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <_ZN14TMC5130Stepper9X_COMPAREEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: X_COMPARE
uint32_t TMC5130Stepper::X_COMPARE() { return X_COMPARE_register.sr; }
void TMC5130Stepper::X_COMPARE(uint32_t input) {
 800d102:	b580      	push	{r7, lr}
 800d104:	b082      	sub	sp, #8
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	6039      	str	r1, [r7, #0]
  X_COMPARE_register.sr = input;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	f8c3 204b 	str.w	r2, [r3, #75]	; 0x4b
  write(X_COMPARE_register.address, X_COMPARE_register.sr);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	f8d2 204b 	ldr.w	r2, [r2, #75]	; 0x4b
 800d122:	2105      	movs	r1, #5
 800d124:	4798      	blx	r3
}
 800d126:	bf00      	nop
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}

0800d12e <_ZN14TMC5130Stepper8RAMPMODEEv>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: RAMPMODE
uint8_t TMC5130Stepper::RAMPMODE() { return read(RAMPMODE_register.address); }
 800d12e:	b580      	push	{r7, lr}
 800d130:	b082      	sub	sp, #8
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	3304      	adds	r3, #4
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2120      	movs	r1, #32
 800d142:	4610      	mov	r0, r2
 800d144:	4798      	blx	r3
 800d146:	4603      	mov	r3, r0
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	4618      	mov	r0, r3
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <_ZN14TMC5130Stepper8RAMPMODEEh>:
void TMC5130Stepper::RAMPMODE(uint8_t input) {
 800d152:	b580      	push	{r7, lr}
 800d154:	b082      	sub	sp, #8
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	460b      	mov	r3, r1
 800d15c:	70fb      	strb	r3, [r7, #3]
  RAMPMODE_register.sr = input;
 800d15e:	78fb      	ldrb	r3, [r7, #3]
 800d160:	f003 0303 	and.w	r3, r3, #3
 800d164:	b2d9      	uxtb	r1, r3
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	f892 304f 	ldrb.w	r3, [r2, #79]	; 0x4f
 800d16c:	f361 0301 	bfi	r3, r1, #0, #2
 800d170:	f882 304f 	strb.w	r3, [r2, #79]	; 0x4f
  write(RAMPMODE_register.address, RAMPMODE_register.sr);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	f892 204f 	ldrb.w	r2, [r2, #79]	; 0x4f
 800d182:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800d186:	b2d2      	uxtb	r2, r2
 800d188:	2120      	movs	r1, #32
 800d18a:	4798      	blx	r3
}
 800d18c:	bf00      	nop
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <_ZN14TMC5130Stepper7XACTUALEl>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: XACTUAL
int32_t TMC5130Stepper::XACTUAL() { return read(XACTUAL_register.address); }
void TMC5130Stepper::XACTUAL(int32_t input) {
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  write(XACTUAL_register.address, input);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	2121      	movs	r1, #33	; 0x21
 800d1aa:	4798      	blx	r3
}
 800d1ac:	bf00      	nop
 800d1ae:	3708      	adds	r7, #8
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <_ZN14TMC5130Stepper7VACTUALEv>:
///////////////////////////////////////////////////////////////////////////////////////
// R: VACTUAL
int32_t TMC5130Stepper::VACTUAL() {
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  uint32_t int24 = read(VACTUAL_t::address);
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2122      	movs	r1, #34	; 0x22
 800d1c8:	4610      	mov	r0, r2
 800d1ca:	4798      	blx	r3
 800d1cc:	60f8      	str	r0, [r7, #12]
  if((int24 >> 23) & 0x01) {
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d003      	beq.n	800d1e0 <_ZN14TMC5130Stepper7VACTUALEv+0x2c>
    int24 |= 0xFF000000;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1de:	60fb      	str	r3, [r7, #12]
  }
  return int24;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <_ZN14TMC5130Stepper6VSTARTEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: VSTART
uint32_t TMC5130Stepper::VSTART() { return VSTART_register.sr; }
void TMC5130Stepper::VSTART(uint32_t input) {
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b082      	sub	sp, #8
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	6039      	str	r1, [r7, #0]
  VSTART_register.sr = input;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	b291      	uxth	r1, r2
 800d1fe:	2000      	movs	r0, #0
 800d200:	4301      	orrs	r1, r0
 800d202:	f8a3 1054 	strh.w	r1, [r3, #84]	; 0x54
 800d206:	0c12      	lsrs	r2, r2, #16
 800d208:	f002 0203 	and.w	r2, r2, #3
 800d20c:	f002 0003 	and.w	r0, r2, #3
 800d210:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800d214:	f022 0203 	bic.w	r2, r2, #3
 800d218:	4611      	mov	r1, r2
 800d21a:	4602      	mov	r2, r0
 800d21c:	430a      	orrs	r2, r1
 800d21e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  write(VSTART_register.address, VSTART_register.sr);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d22e:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800d232:	2123      	movs	r1, #35	; 0x23
 800d234:	4798      	blx	r3
}
 800d236:	bf00      	nop
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <_ZN14TMC5130Stepper2A1Et>:
///////////////////////////////////////////////////////////////////////////////////////
// W: A1
uint16_t TMC5130Stepper::A1() { return A1_register.sr; }
void TMC5130Stepper::A1(uint16_t input) {
 800d23e:	b580      	push	{r7, lr}
 800d240:	b082      	sub	sp, #8
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	460b      	mov	r3, r1
 800d248:	807b      	strh	r3, [r7, #2]
  A1_register.sr = input;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	887a      	ldrh	r2, [r7, #2]
 800d24e:	f8a3 2057 	strh.w	r2, [r3, #87]	; 0x57
  write(A1_register.address, A1_register.sr);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	f8b2 2057 	ldrh.w	r2, [r2, #87]	; 0x57
 800d260:	b292      	uxth	r2, r2
 800d262:	2124      	movs	r1, #36	; 0x24
 800d264:	4798      	blx	r3
}
 800d266:	bf00      	nop
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <_ZN14TMC5130Stepper2V1Em>:
///////////////////////////////////////////////////////////////////////////////////////
// W: V1
uint32_t TMC5130Stepper::V1() { return V1_register.sr; }
void TMC5130Stepper::V1(uint32_t input) {
 800d26e:	b580      	push	{r7, lr}
 800d270:	b082      	sub	sp, #8
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	6039      	str	r1, [r7, #0]
  V1_register.sr = input;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	b2d1      	uxtb	r1, r2
 800d282:	2000      	movs	r0, #0
 800d284:	4301      	orrs	r1, r0
 800d286:	f883 1059 	strb.w	r1, [r3, #89]	; 0x59
 800d28a:	0a11      	lsrs	r1, r2, #8
 800d28c:	b2c9      	uxtb	r1, r1
 800d28e:	2000      	movs	r0, #0
 800d290:	4301      	orrs	r1, r0
 800d292:	f883 105a 	strb.w	r1, [r3, #90]	; 0x5a
 800d296:	0c12      	lsrs	r2, r2, #16
 800d298:	f002 020f 	and.w	r2, r2, #15
 800d29c:	f002 000f 	and.w	r0, r2, #15
 800d2a0:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800d2a4:	f022 020f 	bic.w	r2, r2, #15
 800d2a8:	4611      	mov	r1, r2
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	430a      	orrs	r2, r1
 800d2ae:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  write(V1_register.address, V1_register.sr);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d2be:	f3c2 2213 	ubfx	r2, r2, #8, #20
 800d2c2:	2125      	movs	r1, #37	; 0x25
 800d2c4:	4798      	blx	r3
}
 800d2c6:	bf00      	nop
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <_ZN14TMC5130Stepper4AMAXEt>:
///////////////////////////////////////////////////////////////////////////////////////
// W: AMAX
uint16_t TMC5130Stepper::AMAX() { return AMAX_register.sr; }
void TMC5130Stepper::AMAX(uint16_t input) {
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b082      	sub	sp, #8
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	807b      	strh	r3, [r7, #2]
  AMAX_register.sr = input;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	887a      	ldrh	r2, [r7, #2]
 800d2de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  write(AMAX_register.address, AMAX_register.sr);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800d2f0:	2126      	movs	r1, #38	; 0x26
 800d2f2:	4798      	blx	r3
}
 800d2f4:	bf00      	nop
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <_ZN14TMC5130Stepper4VMAXEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: VMAX
uint32_t TMC5130Stepper::VMAX() { return VMAX_register.sr; }
void TMC5130Stepper::VMAX(uint32_t input) {
 800d2fc:	b590      	push	{r4, r7, lr}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  VMAX_register.sr = input;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	b291      	uxth	r1, r2
 800d310:	2000      	movs	r0, #0
 800d312:	4301      	orrs	r1, r0
 800d314:	f8a3 105e 	strh.w	r1, [r3, #94]	; 0x5e
 800d318:	0c12      	lsrs	r2, r2, #16
 800d31a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d31e:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 800d322:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800d326:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800d32a:	4611      	mov	r1, r2
 800d32c:	4602      	mov	r2, r0
 800d32e:	430a      	orrs	r2, r1
 800d330:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  write(VMAX_register.address, VMAX_register.sr);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	681c      	ldr	r4, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800d342:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d34a:	041b      	lsls	r3, r3, #16
 800d34c:	4313      	orrs	r3, r2
 800d34e:	461a      	mov	r2, r3
 800d350:	2127      	movs	r1, #39	; 0x27
 800d352:	47a0      	blx	r4
}
 800d354:	bf00      	nop
 800d356:	370c      	adds	r7, #12
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd90      	pop	{r4, r7, pc}

0800d35c <_ZN14TMC5130Stepper4DMAXEt>:
///////////////////////////////////////////////////////////////////////////////////////
// W: DMAX
uint16_t TMC5130Stepper::DMAX() { return DMAX_register.sr; }
void TMC5130Stepper::DMAX(uint16_t input) {
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	807b      	strh	r3, [r7, #2]
  DMAX_register.sr = input;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	887a      	ldrh	r2, [r7, #2]
 800d36c:	f8a3 2061 	strh.w	r2, [r3, #97]	; 0x61
  write(DMAX_register.address, DMAX_register.sr);
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	f8b2 2061 	ldrh.w	r2, [r2, #97]	; 0x61
 800d37e:	b292      	uxth	r2, r2
 800d380:	2128      	movs	r1, #40	; 0x28
 800d382:	4798      	blx	r3
}
 800d384:	bf00      	nop
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <_ZN14TMC5130Stepper2D1Et>:
///////////////////////////////////////////////////////////////////////////////////////
// W: D1
uint16_t TMC5130Stepper::D1() { return D1_register.sr; }
void TMC5130Stepper::D1(uint16_t input) {
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	460b      	mov	r3, r1
 800d396:	807b      	strh	r3, [r7, #2]
  D1_register.sr = input;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	887a      	ldrh	r2, [r7, #2]
 800d39c:	f8a3 2063 	strh.w	r2, [r3, #99]	; 0x63
  write(D1_register.address, D1_register.sr);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	f8b2 2063 	ldrh.w	r2, [r2, #99]	; 0x63
 800d3ae:	b292      	uxth	r2, r2
 800d3b0:	212a      	movs	r1, #42	; 0x2a
 800d3b2:	4798      	blx	r3
}
 800d3b4:	bf00      	nop
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <_ZN14TMC5130Stepper5VSTOPEm>:
///////////////////////////////////////////////////////////////////////////////////////
// W: VSTOP
uint32_t TMC5130Stepper::VSTOP() { return VSTOP_register.sr; }
void TMC5130Stepper::VSTOP(uint32_t input) {
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  if (input == 0 && RAMPMODE() == 0) return;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d107      	bne.n	800d3dc <_ZN14TMC5130Stepper5VSTOPEm+0x20>
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff feae 	bl	800d12e <_ZN14TMC5130Stepper8RAMPMODEEv>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d101      	bne.n	800d3dc <_ZN14TMC5130Stepper5VSTOPEm+0x20>
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e000      	b.n	800d3de <_ZN14TMC5130Stepper5VSTOPEm+0x22>
 800d3dc:	2300      	movs	r3, #0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d127      	bne.n	800d432 <_ZN14TMC5130Stepper5VSTOPEm+0x76>
  VSTOP_register.sr = input;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	b2d1      	uxtb	r1, r2
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	4301      	orrs	r1, r0
 800d3f0:	f883 1065 	strb.w	r1, [r3, #101]	; 0x65
 800d3f4:	0a11      	lsrs	r1, r2, #8
 800d3f6:	b2c9      	uxtb	r1, r1
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	4301      	orrs	r1, r0
 800d3fc:	f883 1066 	strb.w	r1, [r3, #102]	; 0x66
 800d400:	0c12      	lsrs	r2, r2, #16
 800d402:	f002 0203 	and.w	r2, r2, #3
 800d406:	f002 0003 	and.w	r0, r2, #3
 800d40a:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800d40e:	f022 0203 	bic.w	r2, r2, #3
 800d412:	4611      	mov	r1, r2
 800d414:	4602      	mov	r2, r0
 800d416:	430a      	orrs	r2, r1
 800d418:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
  write(VSTOP_register.address, VSTOP_register.sr);
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d428:	f3c2 2211 	ubfx	r2, r2, #8, #18
 800d42c:	212b      	movs	r1, #43	; 0x2b
 800d42e:	4798      	blx	r3
 800d430:	e000      	b.n	800d434 <_ZN14TMC5130Stepper5VSTOPEm+0x78>
  if (input == 0 && RAMPMODE() == 0) return;
 800d432:	bf00      	nop
}
 800d434:	3708      	adds	r7, #8
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <_ZN14TMC5130Stepper9TZEROWAITEt>:
///////////////////////////////////////////////////////////////////////////////////////
// W: TZEROWAIT
uint16_t TMC5130Stepper::TZEROWAIT() { return TZEROWAIT_register.sr; }
void TMC5130Stepper::TZEROWAIT(uint16_t input) {
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b082      	sub	sp, #8
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
 800d442:	460b      	mov	r3, r1
 800d444:	807b      	strh	r3, [r7, #2]
  TZEROWAIT_register.sr = input;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	887a      	ldrh	r2, [r7, #2]
 800d44a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  write(TZEROWAIT_register.address, TZEROWAIT_register.sr);
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 800d45c:	212c      	movs	r1, #44	; 0x2c
 800d45e:	4798      	blx	r3
}
 800d460:	bf00      	nop
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <_ZN14TMC5130Stepper7XTARGETEl>:
///////////////////////////////////////////////////////////////////////////////////////
// RW: XTARGET
int32_t TMC5130Stepper::XTARGET() { return read(XTARGET_t::address); }
void TMC5130Stepper::XTARGET(int32_t input) {
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  write(XTARGET_t::address, input);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	212d      	movs	r1, #45	; 0x2d
 800d47e:	4798      	blx	r3
}
 800d480:	bf00      	nop
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <_ZN14TMC5130Stepper9ENC_CONSTEm>:
  write(X_ENC_t::address, input);
}
///////////////////////////////////////////////////////////////////////////////////////
// W: ENC_CONST
uint32_t TMC5130Stepper::ENC_CONST() { return ENC_CONST_register.sr; }
void TMC5130Stepper::ENC_CONST(uint32_t input) {
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  ENC_CONST_register.sr = input;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	683a      	ldr	r2, [r7, #0]
 800d496:	f8c3 206e 	str.w	r2, [r3, #110]	; 0x6e
  write(ENC_CONST_register.address, ENC_CONST_register.sr);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	f8d2 206e 	ldr.w	r2, [r2, #110]	; 0x6e
 800d4a8:	213a      	movs	r1, #58	; 0x3a
 800d4aa:	4798      	blx	r3
}
 800d4ac:	bf00      	nop
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <_ZN14TMC5160StepperC1Etfttta>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC5130Stepper(pinCS, RS, link)
  { defaults(); }
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
 800d4b4:	b590      	push	{r4, r7, lr}
 800d4b6:	b087      	sub	sp, #28
 800d4b8:	af02      	add	r7, sp, #8
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	4608      	mov	r0, r1
 800d4be:	ed87 0a01 	vstr	s0, [r7, #4]
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	817b      	strh	r3, [r7, #10]
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	813b      	strh	r3, [r7, #8]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	807b      	strh	r3, [r7, #2]
  TMC5130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	887c      	ldrh	r4, [r7, #2]
 800d4d6:	893a      	ldrh	r2, [r7, #8]
 800d4d8:	8979      	ldrh	r1, [r7, #10]
 800d4da:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800d4de:	9301      	str	r3, [sp, #4]
 800d4e0:	8c3b      	ldrh	r3, [r7, #32]
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	4623      	mov	r3, r4
 800d4e6:	ed97 0a01 	vldr	s0, [r7, #4]
 800d4ea:	f7ff fcb3 	bl	800ce54 <_ZN14TMC5130StepperC1Etfttta>
 800d4ee:	4a0a      	ldr	r2, [pc, #40]	; (800d518 <_ZN14TMC5160StepperC1Etfttta+0x64>)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800d4fc:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800d500:	f022 020f 	bic.w	r2, r2, #15
 800d504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  { defaults(); }
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f000 f807 	bl	800d51c <_ZN14TMC5160Stepper8defaultsEv>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	4618      	mov	r0, r3
 800d512:	3714      	adds	r7, #20
 800d514:	46bd      	mov	sp, r7
 800d516:	bd90      	pop	{r4, r7, pc}
 800d518:	080195bc 	.word	0x080195bc

0800d51c <_ZN14TMC5160Stepper8defaultsEv>:
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
  TMC5130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5160Stepper::defaults() {
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
 800d52a:	2106      	movs	r1, #6
 800d52c:	f361 0303 	bfi	r3, r1, #0, #4
 800d530:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  SHORT_CONF_register.s2g_level = 6;
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800d53a:	2106      	movs	r1, #6
 800d53c:	f361 0303 	bfi	r3, r1, #0, #4
 800d540:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
  SHORT_CONF_register.shortfilter = 0b01;
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800d54a:	2101      	movs	r1, #1
 800d54c:	f361 0301 	bfi	r3, r1, #0, #2
 800d550:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  SHORT_CONF_register.shortdelay = 0;
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800d55a:	f36f 0382 	bfc	r3, #2, #1
 800d55e:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  DRV_CONF_register.bbmtime = 0;
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d568:	f36f 0304 	bfc	r3, #0, #5
 800d56c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
  DRV_CONF_register.bbmclks = 4;
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d576:	2104      	movs	r1, #4
 800d578:	f361 0303 	bfi	r3, r1, #0, #4
 800d57c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  DRV_CONF_register.otselect = 0b00;
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d586:	f36f 0301 	bfc	r3, #0, #2
 800d58a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.drvstrength = 0b10;
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d594:	2102      	movs	r1, #2
 800d596:	f361 0383 	bfi	r3, r1, #2, #2
 800d59a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  DRV_CONF_register.filt_isense = 0b00;
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d5a4:	f36f 1305 	bfc	r3, #4, #2
 800d5a8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  TPOWERDOWN_register.sr = 10;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	220a      	movs	r2, #10
 800d5b0:	71da      	strb	r2, [r3, #7]
  VSTOP_register.sr = 1;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f042 0201 	orr.w	r2, r2, #1
 800d5ba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800d5c4:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800d5c8:	f022 0203 	bic.w	r2, r2, #3
 800d5cc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
  ENC_CONST_register.sr = 65536;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f042 0201 	orr.w	r2, r2, #1
 800d5de:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5e6:	b2d2      	uxtb	r2, r2
 800d5e8:	f042 4282 	orr.w	r2, r2, #1090519040	; 0x41000000
 800d5ec:	f442 32a8 	orr.w	r2, r2, #86016	; 0x15000
 800d5f0:	625a      	str	r2, [r3, #36]	; 0x24
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f042 0210 	orr.w	r2, r2, #16
 800d5f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  PWMCONF_register.sr = 0xC40C001E;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4a04      	ldr	r2, [pc, #16]	; (800d610 <_ZN14TMC5160Stepper8defaultsEv+0xf4>)
 800d600:	645a      	str	r2, [r3, #68]	; 0x44
}
 800d602:	bf00      	nop
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	c40c001e 	.word	0xc40c001e

0800d614 <_ZN14TMC5160Stepper4pushEv>:

void TMC5160Stepper::push() {
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
    IHOLD_IRUN(IHOLD_IRUN_register.sr);
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d626:	4619      	mov	r1, r3
 800d628:	4610      	mov	r0, r2
 800d62a:	f7fe feb3 	bl	800c394 <_ZN10TMCStepper10IHOLD_IRUNEm>
    TPOWERDOWN(TPOWERDOWN_register.sr);
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	79db      	ldrb	r3, [r3, #7]
 800d634:	4619      	mov	r1, r3
 800d636:	4610      	mov	r0, r2
 800d638:	f000 fabe 	bl	800dbb8 <_ZN10TMCStepper10TPOWERDOWNEh>
    TPWMTHRS(TPWMTHRS_register.sr);
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d646:	4619      	mov	r1, r3
 800d648:	4610      	mov	r0, r2
 800d64a:	f000 faca 	bl	800dbe2 <_ZN10TMCStepper8TPWMTHRSEm>
    GCONF(GCONF_register.sr);
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	695b      	ldr	r3, [r3, #20]
 800d654:	f3c3 2311 	ubfx	r3, r3, #8, #18
 800d658:	4619      	mov	r1, r3
 800d65a:	4610      	mov	r0, r2
 800d65c:	f7fe fe7f 	bl	800c35e <_ZN14TMC2130Stepper5GCONFEm>
    TCOOLTHRS(TCOOLTHRS_register.sr);
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	699b      	ldr	r3, [r3, #24]
 800d666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d66a:	4619      	mov	r1, r3
 800d66c:	4610      	mov	r0, r2
 800d66e:	f7ff f999 	bl	800c9a4 <_ZN14TMC2130Stepper9TCOOLTHRSEm>
    THIGH(THIGH_register.sr);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	7eda      	ldrb	r2, [r3, #27]
 800d678:	8b9b      	ldrh	r3, [r3, #28]
 800d67a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d67e:	021b      	lsls	r3, r3, #8
 800d680:	4313      	orrs	r3, r2
 800d682:	4619      	mov	r1, r3
 800d684:	f7ff f9b5 	bl	800c9f2 <_ZN14TMC2130Stepper5THIGHEm>
    XDIRECT(XDIRECT_register.sr);
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	8bda      	ldrh	r2, [r3, #30]
 800d68e:	8c1b      	ldrh	r3, [r3, #32]
 800d690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d694:	041b      	lsls	r3, r3, #16
 800d696:	4313      	orrs	r3, r2
 800d698:	4619      	mov	r1, r3
 800d69a:	f7ff f9da 	bl	800ca52 <_ZN14TMC2130Stepper7XDIRECTEm>
    VDCMIN(VDCMIN_register.sr);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800d6a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d6a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ac:	041b      	lsls	r3, r3, #16
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	f7ff f9fb 	bl	800caac <_ZN14TMC2130Stepper6VDCMINEm>
    CHOPCONF(CHOPCONF_register.sr);
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
 800d6be:	4619      	mov	r1, r3
 800d6c0:	4610      	mov	r0, r2
 800d6c2:	f7fe fba1 	bl	800be08 <_ZN14TMC2130Stepper8CHOPCONFEm>
    COOLCONF(COOLCONF_register.sr);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6cc:	0a12      	lsrs	r2, r2, #8
 800d6ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6d2:	f003 0301 	and.w	r3, r3, #1
 800d6d6:	061b      	lsls	r3, r3, #24
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	4619      	mov	r1, r3
 800d6dc:	f7fe fd2d 	bl	800c13a <_ZN14TMC2130Stepper8COOLCONFEm>
    DCCTRL(DCCTRL_register.sr);
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	4610      	mov	r0, r2
 800d6ee:	f7ff fa0b 	bl	800cb08 <_ZN14TMC2130Stepper6DCCTRLEm>
    PWMCONF(PWMCONF_register.sr);
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	4610      	mov	r0, r2
 800d6fc:	f7fe fe9f 	bl	800c43e <_ZN14TMC2160Stepper7PWMCONFEm>
    SHORT_CONF(SHORT_CONF_register.sr);
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d706:	f3c3 2312 	ubfx	r3, r3, #8, #19
 800d70a:	4619      	mov	r1, r3
 800d70c:	4610      	mov	r0, r2
 800d70e:	f7fe fec7 	bl	800c4a0 <_ZN14TMC2160Stepper10SHORT_CONFEm>
    DRV_CONF(DRV_CONF_register.sr);
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d718:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d71c:	4619      	mov	r1, r3
 800d71e:	4610      	mov	r0, r2
 800d720:	f7fe fdd2 	bl	800c2c8 <_ZN14TMC2160Stepper8DRV_CONFEm>
    GLOBAL_SCALER(GLOBAL_SCALER_register.sr);
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d72c:	4619      	mov	r1, r3
 800d72e:	4610      	mov	r0, r2
 800d730:	f7ff fb78 	bl	800ce24 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>
    SLAVECONF(SLAVECONF_register.sr);
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d73c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d740:	b29b      	uxth	r3, r3
 800d742:	4619      	mov	r1, r3
 800d744:	4610      	mov	r0, r2
 800d746:	f7ff fc69 	bl	800d01c <_ZN14TMC5130Stepper9SLAVECONFEt>
    TMC_OUTPUT(OUTPUT_register.sr);
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d752:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d756:	b2db      	uxtb	r3, r3
 800d758:	4619      	mov	r1, r3
 800d75a:	4610      	mov	r0, r2
 800d75c:	f7ff fcb3 	bl	800d0c6 <_ZN14TMC5130Stepper10TMC_OUTPUTEb>
    X_COMPARE(X_COMPARE_register.sr);
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 304b 	ldr.w	r3, [r3, #75]	; 0x4b
 800d768:	4619      	mov	r1, r3
 800d76a:	4610      	mov	r0, r2
 800d76c:	f7ff fcc9 	bl	800d102 <_ZN14TMC5130Stepper9X_COMPAREEm>
    RAMPMODE(RAMPMODE_register.sr);
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800d778:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	4619      	mov	r1, r3
 800d780:	4610      	mov	r0, r2
 800d782:	f7ff fce6 	bl	800d152 <_ZN14TMC5130Stepper8RAMPMODEEh>
    XACTUAL(XACTUAL_register.sr);
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d78c:	4619      	mov	r1, r3
 800d78e:	4610      	mov	r0, r2
 800d790:	f7ff fd00 	bl	800d194 <_ZN14TMC5130Stepper7XACTUALEl>
    VSTART(VSTART_register.sr);
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d79a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d79e:	4619      	mov	r1, r3
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	f7ff fd22 	bl	800d1ea <_ZN14TMC5130Stepper6VSTARTEm>
    A1(A1_register.sr);
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8b3 3057 	ldrh.w	r3, [r3, #87]	; 0x57
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	4610      	mov	r0, r2
 800d7b4:	f7ff fd43 	bl	800d23e <_ZN14TMC5130Stepper2A1Et>
    V1(V1_register.sr);
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7be:	f3c3 2313 	ubfx	r3, r3, #8, #20
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4610      	mov	r0, r2
 800d7c6:	f7ff fd52 	bl	800d26e <_ZN14TMC5130Stepper2V1Em>
    AMAX(AMAX_register.sr);
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	4610      	mov	r0, r2
 800d7d6:	f7ff fd7a 	bl	800d2ce <_ZN14TMC5130Stepper4AMAXEt>
    VMAX(VMAX_register.sr);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800d7e2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d7e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ea:	041b      	lsls	r3, r3, #16
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	f7ff fd84 	bl	800d2fc <_ZN14TMC5130Stepper4VMAXEm>
    DMAX(DMAX_register.sr);
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8b3 3061 	ldrh.w	r3, [r3, #97]	; 0x61
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	4619      	mov	r1, r3
 800d800:	4610      	mov	r0, r2
 800d802:	f7ff fdab 	bl	800d35c <_ZN14TMC5130Stepper4DMAXEt>
    D1(D1_register.sr);
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8b3 3063 	ldrh.w	r3, [r3, #99]	; 0x63
 800d80e:	b29b      	uxth	r3, r3
 800d810:	4619      	mov	r1, r3
 800d812:	4610      	mov	r0, r2
 800d814:	f7ff fdba 	bl	800d38c <_ZN14TMC5130Stepper2D1Et>
    VSTOP(VSTOP_register.sr);
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d81e:	f3c3 2311 	ubfx	r3, r3, #8, #18
 800d822:	4619      	mov	r1, r3
 800d824:	4610      	mov	r0, r2
 800d826:	f7ff fdc9 	bl	800d3bc <_ZN14TMC5130Stepper5VSTOPEm>
    TZEROWAIT(TZEROWAIT_register.sr);
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d832:	4619      	mov	r1, r3
 800d834:	4610      	mov	r0, r2
 800d836:	f7ff fe00 	bl	800d43a <_ZN14TMC5130Stepper9TZEROWAITEt>
    SW_MODE(SW_MODE_register.sr);
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d846:	b29b      	uxth	r3, r3
 800d848:	4619      	mov	r1, r3
 800d84a:	4610      	mov	r0, r2
 800d84c:	f7fe fe43 	bl	800c4d6 <_ZN14TMC5130Stepper7SW_MODEEm>
    ENCMODE(ENCMODE_register.sr);
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d858:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	4619      	mov	r1, r3
 800d860:	4610      	mov	r0, r2
 800d862:	f7fe fd5c 	bl	800c31e <_ZN14TMC5130Stepper7ENCMODEEm>
    ENC_CONST(ENC_CONST_register.sr);
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 306e 	ldr.w	r3, [r3, #110]	; 0x6e
 800d86e:	4619      	mov	r1, r3
 800d870:	4610      	mov	r0, r2
 800d872:	f7ff fe09 	bl	800d488 <_ZN14TMC5130Stepper9ENC_CONSTEm>
	ENC_DEVIATION(ENC_DEVIATION_register.sr);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 800d87c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d880:	f003 030f 	and.w	r3, r3, #15
 800d884:	041b      	lsls	r3, r3, #16
 800d886:	4313      	orrs	r3, r2
 800d888:	4619      	mov	r1, r3
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 f804 	bl	800d898 <_ZN14TMC5160Stepper13ENC_DEVIATIONEm>
}
 800d890:	bf00      	nop
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <_ZN14TMC5160Stepper13ENC_DEVIATIONEm>:
	write(ENC_STATUS_t::address, input & 0x3);
}

// W: ENC_DEVIATION
uint32_t TMC5160Stepper::ENC_DEVIATION() { return ENC_DEVIATION_register.sr; }
void TMC5160Stepper::ENC_DEVIATION(uint32_t input) {
 800d898:	b590      	push	{r4, r7, lr}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
	ENC_DEVIATION_register.sr = input;
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	b291      	uxth	r1, r2
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	4301      	orrs	r1, r0
 800d8b0:	f8a3 1072 	strh.w	r1, [r3, #114]	; 0x72
 800d8b4:	0c12      	lsrs	r2, r2, #16
 800d8b6:	f002 020f 	and.w	r2, r2, #15
 800d8ba:	f002 000f 	and.w	r0, r2, #15
 800d8be:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800d8c2:	f022 020f 	bic.w	r2, r2, #15
 800d8c6:	4611      	mov	r1, r2
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	430a      	orrs	r2, r1
 800d8cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	write(ENC_DEVIATION_register.address, ENC_DEVIATION_register.sr);
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	681c      	ldr	r4, [r3, #0]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 800d8de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d8e2:	f003 030f 	and.w	r3, r3, #15
 800d8e6:	041b      	lsls	r3, r3, #16
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	213d      	movs	r1, #61	; 0x3d
 800d8ee:	47a0      	blx	r4
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd90      	pop	{r4, r7, pc}

0800d8f8 <_ZN10TMCStepper15test_connectionEv>:

uint16_t TMCStepper::rms_current() {
  return cs2rms(irun());
}

uint8_t TMCStepper::test_connection() {
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  uint32_t drv_status = DRV_STATUS();
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	3310      	adds	r3, #16
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	4798      	blx	r3
 800d90c:	60f8      	str	r0, [r7, #12]
  switch (drv_status) {
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d005      	beq.n	800d920 <_ZN10TMCStepper15test_connectionEv+0x28>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d91a:	d103      	bne.n	800d924 <_ZN10TMCStepper15test_connectionEv+0x2c>
      case 0xFFFFFFFF: return 1;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e002      	b.n	800d926 <_ZN10TMCStepper15test_connectionEv+0x2e>
      case 0: return 2;
 800d920:	2302      	movs	r3, #2
 800d922:	e000      	b.n	800d926 <_ZN10TMCStepper15test_connectionEv+0x2e>
      default: return 0;
 800d924:	2300      	movs	r3, #0
  }
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
	...

0800d930 <_ZN10TMCStepper10microstepsEt>:
int8_t TMCStepper::hysteresis_end() { return hend()-3; };

void TMCStepper::hysteresis_start(uint8_t value) { hstrt(value-1); }
uint8_t TMCStepper::hysteresis_start() { return hstrt()+1; }

void TMCStepper::microsteps(uint16_t ms) {
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	460b      	mov	r3, r1
 800d93a:	807b      	strh	r3, [r7, #2]
  switch(ms) {
 800d93c:	887b      	ldrh	r3, [r7, #2]
 800d93e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d942:	d058      	beq.n	800d9f6 <_ZN10TMCStepper10microstepsEt+0xc6>
 800d944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d948:	f300 809d 	bgt.w	800da86 <_ZN10TMCStepper10microstepsEt+0x156>
 800d94c:	2b80      	cmp	r3, #128	; 0x80
 800d94e:	d05a      	beq.n	800da06 <_ZN10TMCStepper10microstepsEt+0xd6>
 800d950:	2b80      	cmp	r3, #128	; 0x80
 800d952:	f300 8098 	bgt.w	800da86 <_ZN10TMCStepper10microstepsEt+0x156>
 800d956:	2b20      	cmp	r3, #32
 800d958:	dc4a      	bgt.n	800d9f0 <_ZN10TMCStepper10microstepsEt+0xc0>
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	f2c0 8093 	blt.w	800da86 <_ZN10TMCStepper10microstepsEt+0x156>
 800d960:	2b20      	cmp	r3, #32
 800d962:	f200 8090 	bhi.w	800da86 <_ZN10TMCStepper10microstepsEt+0x156>
 800d966:	a201      	add	r2, pc, #4	; (adr r2, 800d96c <_ZN10TMCStepper10microstepsEt+0x3c>)
 800d968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d96c:	0800da77 	.word	0x0800da77
 800d970:	0800da87 	.word	0x0800da87
 800d974:	0800da67 	.word	0x0800da67
 800d978:	0800da87 	.word	0x0800da87
 800d97c:	0800da57 	.word	0x0800da57
 800d980:	0800da87 	.word	0x0800da87
 800d984:	0800da87 	.word	0x0800da87
 800d988:	0800da87 	.word	0x0800da87
 800d98c:	0800da47 	.word	0x0800da47
 800d990:	0800da87 	.word	0x0800da87
 800d994:	0800da87 	.word	0x0800da87
 800d998:	0800da87 	.word	0x0800da87
 800d99c:	0800da87 	.word	0x0800da87
 800d9a0:	0800da87 	.word	0x0800da87
 800d9a4:	0800da87 	.word	0x0800da87
 800d9a8:	0800da87 	.word	0x0800da87
 800d9ac:	0800da37 	.word	0x0800da37
 800d9b0:	0800da87 	.word	0x0800da87
 800d9b4:	0800da87 	.word	0x0800da87
 800d9b8:	0800da87 	.word	0x0800da87
 800d9bc:	0800da87 	.word	0x0800da87
 800d9c0:	0800da87 	.word	0x0800da87
 800d9c4:	0800da87 	.word	0x0800da87
 800d9c8:	0800da87 	.word	0x0800da87
 800d9cc:	0800da87 	.word	0x0800da87
 800d9d0:	0800da87 	.word	0x0800da87
 800d9d4:	0800da87 	.word	0x0800da87
 800d9d8:	0800da87 	.word	0x0800da87
 800d9dc:	0800da87 	.word	0x0800da87
 800d9e0:	0800da87 	.word	0x0800da87
 800d9e4:	0800da87 	.word	0x0800da87
 800d9e8:	0800da87 	.word	0x0800da87
 800d9ec:	0800da27 	.word	0x0800da27
 800d9f0:	2b40      	cmp	r3, #64	; 0x40
 800d9f2:	d010      	beq.n	800da16 <_ZN10TMCStepper10microstepsEt+0xe6>
    case  16: mres(4); break;
    case   8: mres(5); break;
    case   4: mres(6); break;
    case   2: mres(7); break;
    case   0: mres(8); break;
    default: break;
 800d9f4:	e047      	b.n	800da86 <_ZN10TMCStepper10microstepsEt+0x156>
    case 256: mres(0); break;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	3324      	adds	r3, #36	; 0x24
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2100      	movs	r1, #0
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	4798      	blx	r3
 800da04:	e040      	b.n	800da88 <_ZN10TMCStepper10microstepsEt+0x158>
    case 128: mres(1); break;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	3324      	adds	r3, #36	; 0x24
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2101      	movs	r1, #1
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	4798      	blx	r3
 800da14:	e038      	b.n	800da88 <_ZN10TMCStepper10microstepsEt+0x158>
    case  64: mres(2); break;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	3324      	adds	r3, #36	; 0x24
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2102      	movs	r1, #2
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	4798      	blx	r3
 800da24:	e030      	b.n	800da88 <_ZN10TMCStepper10microstepsEt+0x158>
    case  32: mres(3); break;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	3324      	adds	r3, #36	; 0x24
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	2103      	movs	r1, #3
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	4798      	blx	r3
 800da34:	e028      	b.n	800da88 <_ZN10TMCStepper10microstepsEt+0x158>
    case  16: mres(4); break;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	3324      	adds	r3, #36	; 0x24
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2104      	movs	r1, #4
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	4798      	blx	r3
 800da44:	e020      	b.n	800da88 <_ZN10TMCStepper10microstepsEt+0x158>
    case   8: mres(5); break;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	3324      	adds	r3, #36	; 0x24
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2105      	movs	r1, #5
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	4798      	blx	r3
 800da54:	e018      	b.n	800da88 <_ZN10TMCStepper10microstepsEt+0x158>
    case   4: mres(6); break;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3324      	adds	r3, #36	; 0x24
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2106      	movs	r1, #6
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	4798      	blx	r3
 800da64:	e010      	b.n	800da88 <_ZN10TMCStepper10microstepsEt+0x158>
    case   2: mres(7); break;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	3324      	adds	r3, #36	; 0x24
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2107      	movs	r1, #7
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	4798      	blx	r3
 800da74:	e008      	b.n	800da88 <_ZN10TMCStepper10microstepsEt+0x158>
    case   0: mres(8); break;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	3324      	adds	r3, #36	; 0x24
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2108      	movs	r1, #8
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	4798      	blx	r3
 800da84:	e000      	b.n	800da88 <_ZN10TMCStepper10microstepsEt+0x158>
    default: break;
 800da86:	bf00      	nop
  }
}
 800da88:	bf00      	nop
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <_ZN10TMCStepper10microstepsEv>:

uint16_t TMCStepper::microsteps() {
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  switch(mres()) {
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3328      	adds	r3, #40	; 0x28
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	4798      	blx	r3
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b08      	cmp	r3, #8
 800daa8:	d827      	bhi.n	800dafa <_ZN10TMCStepper10microstepsEv+0x6a>
 800daaa:	a201      	add	r2, pc, #4	; (adr r2, 800dab0 <_ZN10TMCStepper10microstepsEv+0x20>)
 800daac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab0:	0800dad5 	.word	0x0800dad5
 800dab4:	0800dadb 	.word	0x0800dadb
 800dab8:	0800dadf 	.word	0x0800dadf
 800dabc:	0800dae3 	.word	0x0800dae3
 800dac0:	0800dae7 	.word	0x0800dae7
 800dac4:	0800daeb 	.word	0x0800daeb
 800dac8:	0800daef 	.word	0x0800daef
 800dacc:	0800daf3 	.word	0x0800daf3
 800dad0:	0800daf7 	.word	0x0800daf7
    case 0: return 256;
 800dad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dad8:	e010      	b.n	800dafc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 1: return 128;
 800dada:	2380      	movs	r3, #128	; 0x80
 800dadc:	e00e      	b.n	800dafc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 2: return  64;
 800dade:	2340      	movs	r3, #64	; 0x40
 800dae0:	e00c      	b.n	800dafc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 3: return  32;
 800dae2:	2320      	movs	r3, #32
 800dae4:	e00a      	b.n	800dafc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 4: return  16;
 800dae6:	2310      	movs	r3, #16
 800dae8:	e008      	b.n	800dafc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 5: return   8;
 800daea:	2308      	movs	r3, #8
 800daec:	e006      	b.n	800dafc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 6: return   4;
 800daee:	2304      	movs	r3, #4
 800daf0:	e004      	b.n	800dafc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 7: return   2;
 800daf2:	2302      	movs	r3, #2
 800daf4:	e002      	b.n	800dafc <_ZN10TMCStepper10microstepsEv+0x6c>
    case 8: return   0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	e000      	b.n	800dafc <_ZN10TMCStepper10microstepsEv+0x6c>
  }
  return 0;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <_ZN10TMCStepper10blank_timeEh>:

void TMCStepper::blank_time(uint8_t value) {
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	460b      	mov	r3, r1
 800db0e:	70fb      	strb	r3, [r7, #3]
  switch (value) {
 800db10:	78fb      	ldrb	r3, [r7, #3]
 800db12:	2b36      	cmp	r3, #54	; 0x36
 800db14:	d022      	beq.n	800db5c <_ZN10TMCStepper10blank_timeEh+0x58>
 800db16:	2b36      	cmp	r3, #54	; 0x36
 800db18:	dc28      	bgt.n	800db6c <_ZN10TMCStepper10blank_timeEh+0x68>
 800db1a:	2b24      	cmp	r3, #36	; 0x24
 800db1c:	d016      	beq.n	800db4c <_ZN10TMCStepper10blank_timeEh+0x48>
 800db1e:	2b24      	cmp	r3, #36	; 0x24
 800db20:	dc24      	bgt.n	800db6c <_ZN10TMCStepper10blank_timeEh+0x68>
 800db22:	2b10      	cmp	r3, #16
 800db24:	d002      	beq.n	800db2c <_ZN10TMCStepper10blank_timeEh+0x28>
 800db26:	2b18      	cmp	r3, #24
 800db28:	d008      	beq.n	800db3c <_ZN10TMCStepper10blank_timeEh+0x38>
    case 16: tbl(0b00); break;
    case 24: tbl(0b01); break;
    case 36: tbl(0b10); break;
    case 54: tbl(0b11); break;
  }
}
 800db2a:	e01f      	b.n	800db6c <_ZN10TMCStepper10blank_timeEh+0x68>
    case 16: tbl(0b00); break;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	332c      	adds	r3, #44	; 0x2c
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2100      	movs	r1, #0
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	4798      	blx	r3
 800db3a:	e017      	b.n	800db6c <_ZN10TMCStepper10blank_timeEh+0x68>
    case 24: tbl(0b01); break;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	332c      	adds	r3, #44	; 0x2c
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2101      	movs	r1, #1
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	4798      	blx	r3
 800db4a:	e00f      	b.n	800db6c <_ZN10TMCStepper10blank_timeEh+0x68>
    case 36: tbl(0b10); break;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	332c      	adds	r3, #44	; 0x2c
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2102      	movs	r1, #2
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	4798      	blx	r3
 800db5a:	e007      	b.n	800db6c <_ZN10TMCStepper10blank_timeEh+0x68>
    case 54: tbl(0b11); break;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	332c      	adds	r3, #44	; 0x2c
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	2103      	movs	r1, #3
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	4798      	blx	r3
 800db6a:	bf00      	nop
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <_ZN10TMCStepper5GSTATEv>:
  return 0;
}

///////////////////////////////////////////////////////////////////////////////////////
// R+C: GSTAT
uint8_t TMCStepper::GSTAT()  { return read(GSTAT_t::address); }
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	3304      	adds	r3, #4
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2101      	movs	r1, #1
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	4798      	blx	r3
 800db8a:	4603      	mov	r3, r0
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	4618      	mov	r0, r3
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <_ZN10TMCStepper5GSTATEh>:
void  TMCStepper::GSTAT(uint8_t){ write(GSTAT_t::address, 0b111); }
 800db96:	b580      	push	{r7, lr}
 800db98:	b082      	sub	sp, #8
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	460b      	mov	r3, r1
 800dba0:	70fb      	strb	r3, [r7, #3]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2207      	movs	r2, #7
 800dbaa:	2101      	movs	r1, #1
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	4798      	blx	r3
 800dbb0:	bf00      	nop
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <_ZN10TMCStepper10TPOWERDOWNEh>:
bool  TMCStepper::drv_err()  { GSTAT_t r; r.sr = GSTAT(); return r.drv_err; }
bool  TMCStepper::uv_cp()    { GSTAT_t r; r.sr = GSTAT(); return r.uv_cp; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPOWERDOWN
uint8_t TMCStepper::TPOWERDOWN() { return TPOWERDOWN_register.sr; }
void TMCStepper::TPOWERDOWN(uint8_t input) {
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	70fb      	strb	r3, [r7, #3]
  TPOWERDOWN_register.sr = input;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	78fa      	ldrb	r2, [r7, #3]
 800dbc8:	71da      	strb	r2, [r3, #7]
  write(TPOWERDOWN_register.address, TPOWERDOWN_register.sr);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	79d2      	ldrb	r2, [r2, #7]
 800dbd4:	2111      	movs	r1, #17
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	4798      	blx	r3
}
 800dbda:	bf00      	nop
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <_ZN10TMCStepper8TPWMTHRSEm>:
// R: TSTEP
uint32_t TMCStepper::TSTEP() { return read(TSTEP_t::address); }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPWMTHRS
uint32_t TMCStepper::TPWMTHRS() { return TPWMTHRS_register.sr; }
void TMCStepper::TPWMTHRS(uint32_t input) {
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b082      	sub	sp, #8
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	6039      	str	r1, [r7, #0]
  TPWMTHRS_register.sr = input;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	b291      	uxth	r1, r2
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	4301      	orrs	r1, r0
 800dbfa:	8119      	strh	r1, [r3, #8]
 800dbfc:	0c12      	lsrs	r2, r2, #16
 800dbfe:	f002 020f 	and.w	r2, r2, #15
 800dc02:	f002 000f 	and.w	r0, r2, #15
 800dc06:	7a9a      	ldrb	r2, [r3, #10]
 800dc08:	f022 020f 	bic.w	r2, r2, #15
 800dc0c:	4611      	mov	r1, r2
 800dc0e:	4602      	mov	r2, r0
 800dc10:	430a      	orrs	r2, r1
 800dc12:	729a      	strb	r2, [r3, #10]
  write(TPWMTHRS_register.address, TPWMTHRS_register.sr);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	6892      	ldr	r2, [r2, #8]
 800dc1e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dc22:	2113      	movs	r1, #19
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	4798      	blx	r3
}
 800dc28:	bf00      	nop
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <CO_fifo_getOccupied>:
 *
 * @param fifo This object
 *
 * @return number of occupied bytes
 */
static inline size_t CO_fifo_getOccupied(CO_fifo_t *fifo) {
 800dc30:	b480      	push	{r7}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - fifo->readPtr;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	689a      	ldr	r2, [r3, #8]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	da04      	bge.n	800dc54 <CO_fifo_getOccupied+0x24>
        sizeOccupied += fifo->bufSize;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	685a      	ldr	r2, [r3, #4]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	4413      	add	r3, r2
 800dc52:	60fb      	str	r3, [r7, #12]
    }

    return (size_t) sizeOccupied;
 800dc54:	68fb      	ldr	r3, [r7, #12]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3714      	adds	r7, #20
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr
	...

0800dc64 <FUART_Init>:
CO_fifo_t g_txFifo;
SemaphoreHandle_t g_txMutex = NULL;
SemaphoreHandle_t g_rxMutex = NULL;

void FUART_Init()
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	af00      	add	r7, sp, #0
	CO_fifo_init(&g_rxFifo, g_RxFifoBuf, RXFIFO_BUFSIZE);
 800dc68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc6c:	490b      	ldr	r1, [pc, #44]	; (800dc9c <FUART_Init+0x38>)
 800dc6e:	480c      	ldr	r0, [pc, #48]	; (800dca0 <FUART_Init+0x3c>)
 800dc70:	f000 f9a2 	bl	800dfb8 <CO_fifo_init>
	CO_fifo_init(&g_txFifo, g_TxFifoBuf, TXFIFO_BUFSIZE);
 800dc74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc78:	490a      	ldr	r1, [pc, #40]	; (800dca4 <FUART_Init+0x40>)
 800dc7a:	480b      	ldr	r0, [pc, #44]	; (800dca8 <FUART_Init+0x44>)
 800dc7c:	f000 f99c 	bl	800dfb8 <CO_fifo_init>

	g_txMutex = xSemaphoreCreateMutex();
 800dc80:	2001      	movs	r0, #1
 800dc82:	f005 fd8e 	bl	80137a2 <xQueueCreateMutex>
 800dc86:	4603      	mov	r3, r0
 800dc88:	4a08      	ldr	r2, [pc, #32]	; (800dcac <FUART_Init+0x48>)
 800dc8a:	6013      	str	r3, [r2, #0]
	g_rxMutex = xSemaphoreCreateMutex();
 800dc8c:	2001      	movs	r0, #1
 800dc8e:	f005 fd88 	bl	80137a2 <xQueueCreateMutex>
 800dc92:	4603      	mov	r3, r0
 800dc94:	4a06      	ldr	r2, [pc, #24]	; (800dcb0 <FUART_Init+0x4c>)
 800dc96:	6013      	str	r3, [r2, #0]
}
 800dc98:	bf00      	nop
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	20000c58 	.word	0x20000c58
 800dca0:	20002458 	.word	0x20002458
 800dca4:	20001458 	.word	0x20001458
 800dca8:	2000246c 	.word	0x2000246c
 800dcac:	20002480 	.word	0x20002480
 800dcb0:	20002484 	.word	0x20002484

0800dcb4 <FUART_beginReceive>:

void FUART_beginReceive(UART_HandleTypeDef* uart)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart, (uint8_t*)g_UARTRxDMABuf, UART_RXDMA_BUFSIZE);
 800dcbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dcc0:	4903      	ldr	r1, [pc, #12]	; (800dcd0 <FUART_beginReceive+0x1c>)
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f004 f986 	bl	8011fd4 <HAL_UART_Receive_DMA>
}
 800dcc8:	bf00      	nop
 800dcca:	3708      	adds	r7, #8
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	20002058 	.word	0x20002058

0800dcd4 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t>:

void FUART_pushMsgToFifo(Joint_Msg_t *msg, uint8_t *data, size_t datalen, CO_fifo_t* fifo)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
 800dce0:	603b      	str	r3, [r7, #0]
	// Enter critical section
	if (xSemaphoreTake(g_txMutex,  (TickType_t) 0)) {
 800dce2:	4b14      	ldr	r3, [pc, #80]	; (800dd34 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x60>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2100      	movs	r1, #0
 800dce8:	4618      	mov	r0, r3
 800dcea:	f006 f877 	bl	8013ddc <xQueueSemaphoreTake>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	bf14      	ite	ne
 800dcf4:	2301      	movne	r3, #1
 800dcf6:	2300      	moveq	r3, #0
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d016      	beq.n	800dd2c <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x58>
		CO_fifo_write(fifo, (const char *)msg, JOINT_MSG_LEN, NULL);
 800dcfe:	2300      	movs	r3, #0
 800dd00:	2204      	movs	r2, #4
 800dd02:	68f9      	ldr	r1, [r7, #12]
 800dd04:	6838      	ldr	r0, [r7, #0]
 800dd06:	f000 f979 	bl	800dffc <CO_fifo_write>
		if (msg->len > 0){
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	789b      	ldrb	r3, [r3, #2]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d005      	beq.n	800dd1e <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x4a>
			CO_fifo_write(fifo, (const char *)data, datalen, NULL);
 800dd12:	2300      	movs	r3, #0
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	68b9      	ldr	r1, [r7, #8]
 800dd18:	6838      	ldr	r0, [r7, #0]
 800dd1a:	f000 f96f 	bl	800dffc <CO_fifo_write>
		}
		xSemaphoreGive(g_txMutex);
 800dd1e:	4b05      	ldr	r3, [pc, #20]	; (800dd34 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t+0x60>)
 800dd20:	6818      	ldr	r0, [r3, #0]
 800dd22:	2300      	movs	r3, #0
 800dd24:	2200      	movs	r2, #0
 800dd26:	2100      	movs	r1, #0
 800dd28:	f005 fd54 	bl	80137d4 <xQueueGenericSend>
	}
	// Exit critical
}
 800dd2c:	bf00      	nop
 800dd2e:	3710      	adds	r7, #16
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	20002480 	.word	0x20002480

0800dd38 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh>:

static size_t internalPeekMsgFromFifo(CO_fifo_t* fifo, uint8_t *buf)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
	size_t len = CO_fifo_getOccupied(fifo);
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f7ff ff74 	bl	800dc30 <CO_fifo_getOccupied>
 800dd48:	60f8      	str	r0, [r7, #12]
	if (len < JOINT_MSG_LEN){
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2b03      	cmp	r3, #3
 800dd4e:	d801      	bhi.n	800dd54 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x1c>
		return 0;
 800dd50:	2300      	movs	r3, #0
 800dd52:	e035      	b.n	800ddc0 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x88>
	}

	// read message hdr
	CO_fifo_altBegin(fifo, 0);
 800dd54:	2100      	movs	r1, #0
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f9a4 	bl	800e0a4 <CO_fifo_altBegin>
	CO_fifo_altRead(fifo, (char*)buf, JOINT_MSG_LEN);
 800dd5c:	2204      	movs	r2, #4
 800dd5e:	6839      	ldr	r1, [r7, #0]
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 fa0e 	bl	800e182 <CO_fifo_altRead>
	Joint_Msg_t* msg = (Joint_Msg_t*)buf;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	60bb      	str	r3, [r7, #8]
	if (msg->len > 0){
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	789b      	ldrb	r3, [r3, #2]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d01f      	beq.n	800ddb2 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x7a>
		if (len < (uint16_t)(msg->len + JOINT_MSG_LEN)){
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	789b      	ldrb	r3, [r3, #2]
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	3304      	adds	r3, #4
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d201      	bcs.n	800dd88 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x50>
			// message not ready yet
			return 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	e01b      	b.n	800ddc0 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x88>
		}

		// read message params from fifo
		CO_fifo_altBegin(fifo, JOINT_MSG_LEN);
 800dd88:	2104      	movs	r1, #4
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 f98a 	bl	800e0a4 <CO_fifo_altBegin>
		CO_fifo_altRead(fifo, (char*)(buf + JOINT_MSG_LEN), msg->len);
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	1d19      	adds	r1, r3, #4
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	789b      	ldrb	r3, [r3, #2]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 f9f1 	bl	800e182 <CO_fifo_altRead>
		CO_fifo_altFinish(fifo, NULL);
 800dda0:	2100      	movs	r1, #0
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 f9b4 	bl	800e110 <CO_fifo_altFinish>
		len = msg->len + JOINT_MSG_LEN;
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	789b      	ldrb	r3, [r3, #2]
 800ddac:	3304      	adds	r3, #4
 800ddae:	60fb      	str	r3, [r7, #12]
 800ddb0:	e005      	b.n	800ddbe <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh+0x86>
	}else {
		CO_fifo_altFinish(fifo, NULL);
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 f9ab 	bl	800e110 <CO_fifo_altFinish>
		len = JOINT_MSG_LEN;
 800ddba:	2304      	movs	r3, #4
 800ddbc:	60fb      	str	r3, [r7, #12]
	}

	return len;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <FUART_sendMsg>:

void FUART_sendMsg(Joint_Msg_t *msg, uint8_t *data, size_t len)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
	// Check UART transmit busy
	if (huart1.gState != HAL_UART_STATE_READY || (huart1.Instance->CR3 & USART_CR3_DMAT)){
 800ddd4:	4b23      	ldr	r3, [pc, #140]	; (800de64 <FUART_sendMsg+0x9c>)
 800ddd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	2b20      	cmp	r3, #32
 800ddde:	d106      	bne.n	800ddee <FUART_sendMsg+0x26>
 800dde0:	4b20      	ldr	r3, [pc, #128]	; (800de64 <FUART_sendMsg+0x9c>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d001      	beq.n	800ddf2 <FUART_sendMsg+0x2a>
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e000      	b.n	800ddf4 <FUART_sendMsg+0x2c>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d006      	beq.n	800de06 <FUART_sendMsg+0x3e>
		FUART_pushMsgToFifo(msg, data, len, &g_txFifo);
 800ddf8:	4b1b      	ldr	r3, [pc, #108]	; (800de68 <FUART_sendMsg+0xa0>)
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	68b9      	ldr	r1, [r7, #8]
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f7ff ff68 	bl	800dcd4 <_Z19FUART_pushMsgToFifoP9Joint_MsgPhjP9CO_fifo_t>
		return;
 800de04:	e02b      	b.n	800de5e <FUART_sendMsg+0x96>
	}

	// UART Transmit
	if (xSemaphoreTake(g_txMutex, (TickType_t)0)){
 800de06:	4b19      	ldr	r3, [pc, #100]	; (800de6c <FUART_sendMsg+0xa4>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	2100      	movs	r1, #0
 800de0c:	4618      	mov	r0, r3
 800de0e:	f005 ffe5 	bl	8013ddc <xQueueSemaphoreTake>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	bf14      	ite	ne
 800de18:	2301      	movne	r3, #1
 800de1a:	2300      	moveq	r3, #0
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d01d      	beq.n	800de5e <FUART_sendMsg+0x96>
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	461a      	mov	r2, r3
		memcpy(g_UARTTxDMABuf, msg, JOINT_MSG_LEN);
 800de28:	4b11      	ldr	r3, [pc, #68]	; (800de70 <FUART_sendMsg+0xa8>)
 800de2a:	601a      	str	r2, [r3, #0]
		if (msg->len > 0){
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	789b      	ldrb	r3, [r3, #2]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d004      	beq.n	800de3e <FUART_sendMsg+0x76>
			memcpy(&g_UARTTxDMABuf[JOINT_MSG_LEN], data, len);
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	68b9      	ldr	r1, [r7, #8]
 800de38:	480e      	ldr	r0, [pc, #56]	; (800de74 <FUART_sendMsg+0xac>)
 800de3a:	f009 fb4b 	bl	80174d4 <memcpy>
		}
		HAL_UART_Transmit_DMA(&huart1, g_UARTTxDMABuf, len + JOINT_MSG_LEN);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	b29b      	uxth	r3, r3
 800de42:	3304      	adds	r3, #4
 800de44:	b29b      	uxth	r3, r3
 800de46:	461a      	mov	r2, r3
 800de48:	4909      	ldr	r1, [pc, #36]	; (800de70 <FUART_sendMsg+0xa8>)
 800de4a:	4806      	ldr	r0, [pc, #24]	; (800de64 <FUART_sendMsg+0x9c>)
 800de4c:	f004 f856 	bl	8011efc <HAL_UART_Transmit_DMA>
		xSemaphoreGive(g_txMutex);
 800de50:	4b06      	ldr	r3, [pc, #24]	; (800de6c <FUART_sendMsg+0xa4>)
 800de52:	6818      	ldr	r0, [r3, #0]
 800de54:	2300      	movs	r3, #0
 800de56:	2200      	movs	r2, #0
 800de58:	2100      	movs	r1, #0
 800de5a:	f005 fcbb 	bl	80137d4 <xQueueGenericSend>
	}
}
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	200008d4 	.word	0x200008d4
 800de68:	2000246c 	.word	0x2000246c
 800de6c:	20002480 	.word	0x20002480
 800de70:	20001c58 	.word	0x20001c58
 800de74:	20001c5c 	.word	0x20001c5c

0800de78 <HAL_UART_TxCpltCallback>:
//
// UART callback functions
//

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a1e      	ldr	r2, [pc, #120]	; (800df00 <HAL_UART_TxCpltCallback+0x88>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d136      	bne.n	800def8 <HAL_UART_TxCpltCallback+0x80>

		// Move to next message
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800de8a:	2300      	movs	r3, #0
 800de8c:	60bb      	str	r3, [r7, #8]
		if (xSemaphoreTakeFromISR(g_txMutex, &xHigherPriorityTaskWoken)){
 800de8e:	4b1d      	ldr	r3, [pc, #116]	; (800df04 <HAL_UART_TxCpltCallback+0x8c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f107 0208 	add.w	r2, r7, #8
 800de96:	2100      	movs	r1, #0
 800de98:	4618      	mov	r0, r3
 800de9a:	f006 f8ab 	bl	8013ff4 <xQueueReceiveFromISR>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	bf14      	ite	ne
 800dea4:	2301      	movne	r3, #1
 800dea6:	2300      	moveq	r3, #0
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d016      	beq.n	800dedc <HAL_UART_TxCpltCallback+0x64>
			size_t len = internalPeekMsgFromFifo(&g_txFifo, g_UARTTxDMABuf);
 800deae:	4916      	ldr	r1, [pc, #88]	; (800df08 <HAL_UART_TxCpltCallback+0x90>)
 800deb0:	4816      	ldr	r0, [pc, #88]	; (800df0c <HAL_UART_TxCpltCallback+0x94>)
 800deb2:	f7ff ff41 	bl	800dd38 <_ZL23internalPeekMsgFromFifoP9CO_fifo_tPh>
 800deb6:	60f8      	str	r0, [r7, #12]
			if (len > 0) {
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d006      	beq.n	800decc <HAL_UART_TxCpltCallback+0x54>
				HAL_UART_Transmit_DMA(&huart1, g_UARTTxDMABuf, len);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	461a      	mov	r2, r3
 800dec4:	4910      	ldr	r1, [pc, #64]	; (800df08 <HAL_UART_TxCpltCallback+0x90>)
 800dec6:	4812      	ldr	r0, [pc, #72]	; (800df10 <HAL_UART_TxCpltCallback+0x98>)
 800dec8:	f004 f818 	bl	8011efc <HAL_UART_Transmit_DMA>
			}
			xSemaphoreGiveFromISR(g_txMutex, &xHigherPriorityTaskWoken);
 800decc:	4b0d      	ldr	r3, [pc, #52]	; (800df04 <HAL_UART_TxCpltCallback+0x8c>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f107 0208 	add.w	r2, r7, #8
 800ded4:	4611      	mov	r1, r2
 800ded6:	4618      	mov	r0, r3
 800ded8:	f005 fe12 	bl	8013b00 <xQueueGiveFromISR>
		}

		if (xHigherPriorityTaskWoken == pdTRUE){
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d10a      	bne.n	800def8 <HAL_UART_TxCpltCallback+0x80>
			portYIELD_FROM_ISR (xHigherPriorityTaskWoken);
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d007      	beq.n	800def8 <HAL_UART_TxCpltCallback+0x80>
 800dee8:	4b0a      	ldr	r3, [pc, #40]	; (800df14 <HAL_UART_TxCpltCallback+0x9c>)
 800deea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deee:	601a      	str	r2, [r3, #0]
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	f3bf 8f6f 	isb	sy
		}

	}
}
 800def8:	bf00      	nop
 800defa:	3710      	adds	r7, #16
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	40011000 	.word	0x40011000
 800df04:	20002480 	.word	0x20002480
 800df08:	20001c58 	.word	0x20001c58
 800df0c:	2000246c 	.word	0x2000246c
 800df10:	200008d4 	.word	0x200008d4
 800df14:	e000ed04 	.word	0xe000ed04

0800df18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
		// Do nothing
	}
}
 800df20:	bf00      	nop
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b086      	sub	sp, #24
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a1d      	ldr	r2, [pc, #116]	; (800dfb0 <HAL_UART_ErrorCallback+0x84>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d134      	bne.n	800dfa8 <HAL_UART_ErrorCallback+0x7c>
		uint32_t tmp1 = 0U, tmp2 = 0U;
 800df3e:	2300      	movs	r3, #0
 800df40:	617b      	str	r3, [r7, #20]
 800df42:	2300      	movs	r3, #0
 800df44:	613b      	str	r3, [r7, #16]
		tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f003 0308 	and.w	r3, r3, #8
 800df50:	2b08      	cmp	r3, #8
 800df52:	bf0c      	ite	eq
 800df54:	2301      	moveq	r3, #1
 800df56:	2300      	movne	r3, #0
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	617b      	str	r3, [r7, #20]
		tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	695b      	ldr	r3, [r3, #20]
 800df62:	f003 0301 	and.w	r3, r3, #1
 800df66:	613b      	str	r3, [r7, #16]

		if (tmp1 != RESET && tmp2 != RESET) {
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d01c      	beq.n	800dfa8 <HAL_UART_ErrorCallback+0x7c>
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d019      	beq.n	800dfa8 <HAL_UART_ErrorCallback+0x7c>
			printf("Usart1 happens over run error.\n");
 800df74:	480f      	ldr	r0, [pc, #60]	; (800dfb4 <HAL_UART_ErrorCallback+0x88>)
 800df76:	f009 fc3f 	bl	80177f8 <puts>

		    volatile uint8_t sysRxChar; // clear the regular interrupt
	        sysRxChar = (uint8_t) huart->Instance->DR; // not sure whether it is correct, but it does not work
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	b2db      	uxtb	r3, r3
 800df82:	73fb      	strb	r3, [r7, #15]
	        (void) sysRxChar;
 800df84:	7bfb      	ldrb	r3, [r7, #15]

	        __HAL_UART_CLEAR_OREFLAG(huart);
 800df86:	2300      	movs	r3, #0
 800df88:	60bb      	str	r3, [r7, #8]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	60bb      	str	r3, [r7, #8]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	60bb      	str	r3, [r7, #8]
 800df9a:	68bb      	ldr	r3, [r7, #8]
	        huart->ErrorCode &= ~HAL_UART_ERROR_ORE;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa0:	f023 0208 	bic.w	r2, r3, #8
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
}
 800dfa8:	bf00      	nop
 800dfaa:	3718      	adds	r7, #24
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	40011000 	.word	0x40011000
 800dfb4:	08018a60 	.word	0x08018a60

0800dfb8 <CO_fifo_init>:
#define DELIM_COMMENT '#'
#endif /* CO_CONFIG_FIFO_ASCII_COMMANDS == 1 */


/******************************************************************************/
void CO_fifo_init(CO_fifo_t *fifo, char *buf, size_t bufSize) {
 800dfb8:	b480      	push	{r7}
 800dfba:	b085      	sub	sp, #20
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	607a      	str	r2, [r7, #4]

    if (fifo == NULL || buf == NULL || bufSize < 2) {
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d012      	beq.n	800dff0 <CO_fifo_init+0x38>
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00f      	beq.n	800dff0 <CO_fifo_init+0x38>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d90c      	bls.n	800dff0 <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	68ba      	ldr	r2, [r7, #8]
 800dfe6:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	605a      	str	r2, [r3, #4]

    return;
 800dfee:	e000      	b.n	800dff2 <CO_fifo_init+0x3a>
        return;
 800dff0:	bf00      	nop
}
 800dff2:	3714      	adds	r7, #20
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <CO_fifo_write>:
 ******************************************************************************/
size_t CO_fifo_write(CO_fifo_t *fifo,
                     const char *buf,
                     size_t count,
                     uint16_t *crc)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b089      	sub	sp, #36	; 0x24
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	607a      	str	r2, [r7, #4]
 800e008:	603b      	str	r3, [r7, #0]
    size_t i;
    char *bufDest;

    if (fifo == NULL || buf == NULL) {
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d002      	beq.n	800e016 <CO_fifo_write+0x1a>
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d101      	bne.n	800e01a <CO_fifo_write+0x1e>
        return 0;
 800e016:	2300      	movs	r3, #0
 800e018:	e03e      	b.n	800e098 <CO_fifo_write+0x9c>
    }

    bufDest = &fifo->buf[fifo->writePtr];
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	4413      	add	r3, r2
 800e024:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	61fb      	str	r3, [r7, #28]
 800e02a:	e02f      	b.n	800e08c <CO_fifo_write+0x90>
        size_t writePtrNext = fifo->writePtr + 1;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	3301      	adds	r3, #1
 800e032:	617b      	str	r3, [r7, #20]

        /* is circular buffer full */
        if (writePtrNext == fifo->readPtr ||
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	697a      	ldr	r2, [r7, #20]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d029      	beq.n	800e092 <CO_fifo_write+0x96>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	685b      	ldr	r3, [r3, #4]
        if (writePtrNext == fifo->readPtr ||
 800e042:	697a      	ldr	r2, [r7, #20]
 800e044:	429a      	cmp	r2, r3
 800e046:	d103      	bne.n	800e050 <CO_fifo_write+0x54>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d020      	beq.n	800e092 <CO_fifo_write+0x96>
            break;
        }

        *bufDest = *buf;
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	781a      	ldrb	r2, [r3, #0]
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	701a      	strb	r2, [r3, #0]
            CO_fifo_crc16_ccitt(crc, *buf);
        }
#endif

        /* increment variables */
        if (writePtrNext == fifo->bufSize) {
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	697a      	ldr	r2, [r7, #20]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d106      	bne.n	800e070 <CO_fifo_write+0x74>
            fifo->writePtr = 0;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2200      	movs	r2, #0
 800e066:	609a      	str	r2, [r3, #8]
            bufDest = &fifo->buf[0];
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	61bb      	str	r3, [r7, #24]
 800e06e:	e007      	b.n	800e080 <CO_fifo_write+0x84>
        }
        else {
            fifo->writePtr++;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	1c5a      	adds	r2, r3, #1
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	609a      	str	r2, [r3, #8]
            bufDest++;
 800e07a:	69bb      	ldr	r3, [r7, #24]
 800e07c:	3301      	adds	r3, #1
 800e07e:	61bb      	str	r3, [r7, #24]
        }
        buf++;
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	3301      	adds	r3, #1
 800e084:	60bb      	str	r3, [r7, #8]
    for (i = count; i > 0; i--) {
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	3b01      	subs	r3, #1
 800e08a:	61fb      	str	r3, [r7, #28]
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1cc      	bne.n	800e02c <CO_fifo_write+0x30>
    }

    return count - i;
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	1ad3      	subs	r3, r2, r3
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3724      	adds	r7, #36	; 0x24
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <CO_fifo_altBegin>:
}


#if CO_CONFIG_FIFO_ALT_READ == 1
/******************************************************************************/
size_t CO_fifo_altBegin(CO_fifo_t *fifo, size_t offset) {
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
    size_t i;

    if (fifo == NULL) {
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d101      	bne.n	800e0b8 <CO_fifo_altBegin+0x14>
        return 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	e025      	b.n	800e104 <CO_fifo_altBegin+0x60>
    }

    fifo->altReadPtr = fifo->readPtr;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	68da      	ldr	r2, [r3, #12]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	611a      	str	r2, [r3, #16]
    for (i = offset; i > 0; i--) {
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	60fb      	str	r3, [r7, #12]
 800e0c4:	e016      	b.n	800e0f4 <CO_fifo_altBegin+0x50>
        /* is circular buffer empty */
        if (fifo->altReadPtr == fifo->writePtr) {
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	691a      	ldr	r2, [r3, #16]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d014      	beq.n	800e0fc <CO_fifo_altBegin+0x58>
            break;
        }

        /* increment variable */
        if (++fifo->altReadPtr == fifo->bufSize) {
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	691b      	ldr	r3, [r3, #16]
 800e0d6:	1c5a      	adds	r2, r3, #1
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	611a      	str	r2, [r3, #16]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	691a      	ldr	r2, [r3, #16]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d102      	bne.n	800e0ee <CO_fifo_altBegin+0x4a>
            fifo->altReadPtr = 0;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	611a      	str	r2, [r3, #16]
    for (i = offset; i > 0; i--) {
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	3b01      	subs	r3, #1
 800e0f2:	60fb      	str	r3, [r7, #12]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1e5      	bne.n	800e0c6 <CO_fifo_altBegin+0x22>
 800e0fa:	e000      	b.n	800e0fe <CO_fifo_altBegin+0x5a>
            break;
 800e0fc:	bf00      	nop
        }
    }

    return offset - i;
 800e0fe:	683a      	ldr	r2, [r7, #0]
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	1ad3      	subs	r3, r2, r3
}
 800e104:	4618      	mov	r0, r3
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <CO_fifo_altFinish>:

void CO_fifo_altFinish(CO_fifo_t *fifo, uint16_t *crc) {
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]

    if (fifo == NULL) {
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d02a      	beq.n	800e176 <CO_fifo_altFinish+0x66>
        return;
    }

    if (crc == NULL) {
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d104      	bne.n	800e130 <CO_fifo_altFinish+0x20>
        fifo->readPtr = fifo->altReadPtr;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	691a      	ldr	r2, [r3, #16]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	60da      	str	r2, [r3, #12]
 800e12e:	e023      	b.n	800e178 <CO_fifo_altFinish+0x68>
    }
    else {
        const char *bufSrc = &fifo->buf[fifo->readPtr];
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	4413      	add	r3, r2
 800e13a:	60fb      	str	r3, [r7, #12]
        while (fifo->readPtr != fifo->altReadPtr) {
 800e13c:	e014      	b.n	800e168 <CO_fifo_altFinish+0x58>
#if CO_CONFIG_FIFO_CRC16_CCITT > 0
            CO_fifo_crc16_ccitt(crc, *bufSrc);
#endif
            /* increment variable */
            if (++fifo->readPtr == fifo->bufSize) {
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	1c5a      	adds	r2, r3, #1
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	60da      	str	r2, [r3, #12]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	68da      	ldr	r2, [r3, #12]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	429a      	cmp	r2, r3
 800e152:	d106      	bne.n	800e162 <CO_fifo_altFinish+0x52>
                fifo->readPtr = 0;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	60da      	str	r2, [r3, #12]
                bufSrc = &fifo->buf[0];
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	60fb      	str	r3, [r7, #12]
 800e160:	e002      	b.n	800e168 <CO_fifo_altFinish+0x58>
            }
            else {
                bufSrc++;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	3301      	adds	r3, #1
 800e166:	60fb      	str	r3, [r7, #12]
        while (fifo->readPtr != fifo->altReadPtr) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	68da      	ldr	r2, [r3, #12]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	691b      	ldr	r3, [r3, #16]
 800e170:	429a      	cmp	r2, r3
 800e172:	d1e4      	bne.n	800e13e <CO_fifo_altFinish+0x2e>
 800e174:	e000      	b.n	800e178 <CO_fifo_altFinish+0x68>
        return;
 800e176:	bf00      	nop
            }
        }
    }
}
 800e178:	3714      	adds	r7, #20
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr

0800e182 <CO_fifo_altRead>:

size_t CO_fifo_altRead(CO_fifo_t *fifo, char *buf, size_t count) {
 800e182:	b480      	push	{r7}
 800e184:	b089      	sub	sp, #36	; 0x24
 800e186:	af00      	add	r7, sp, #0
 800e188:	60f8      	str	r0, [r7, #12]
 800e18a:	60b9      	str	r1, [r7, #8]
 800e18c:	607a      	str	r2, [r7, #4]
    size_t i;
    const char *bufSrc;

    bufSrc = &fifo->buf[fifo->altReadPtr];
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	691b      	ldr	r3, [r3, #16]
 800e196:	4413      	add	r3, r2
 800e198:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	61fb      	str	r3, [r7, #28]
 800e19e:	e025      	b.n	800e1ec <CO_fifo_altRead+0x6a>
        const char c = *bufSrc;
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	75fb      	strb	r3, [r7, #23]

        /* is there no more data */
        if (fifo->altReadPtr == fifo->writePtr) {
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	691a      	ldr	r2, [r3, #16]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d020      	beq.n	800e1f4 <CO_fifo_altRead+0x72>
            break;
        }

        *(buf++) = c;
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	1c5a      	adds	r2, r3, #1
 800e1b6:	60ba      	str	r2, [r7, #8]
 800e1b8:	7dfa      	ldrb	r2, [r7, #23]
 800e1ba:	701a      	strb	r2, [r3, #0]

        /* increment variables */
        if (++fifo->altReadPtr == fifo->bufSize) {
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	691b      	ldr	r3, [r3, #16]
 800e1c0:	1c5a      	adds	r2, r3, #1
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	611a      	str	r2, [r3, #16]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	691a      	ldr	r2, [r3, #16]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d106      	bne.n	800e1e0 <CO_fifo_altRead+0x5e>
            fifo->altReadPtr = 0;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	611a      	str	r2, [r3, #16]
            bufSrc = &fifo->buf[0];
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	61bb      	str	r3, [r7, #24]
 800e1de:	e002      	b.n	800e1e6 <CO_fifo_altRead+0x64>
        }
        else {
            bufSrc++;
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	3b01      	subs	r3, #1
 800e1ea:	61fb      	str	r3, [r7, #28]
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d1d6      	bne.n	800e1a0 <CO_fifo_altRead+0x1e>
 800e1f2:	e000      	b.n	800e1f6 <CO_fifo_altRead+0x74>
            break;
 800e1f4:	bf00      	nop
        }
    }

    return count - i;
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	1ad3      	subs	r3, r2, r3
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3724      	adds	r7, #36	; 0x24
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e208:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e240 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e20c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e20e:	e003      	b.n	800e218 <LoopCopyDataInit>

0800e210 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e210:	4b0c      	ldr	r3, [pc, #48]	; (800e244 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e212:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e214:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e216:	3104      	adds	r1, #4

0800e218 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e218:	480b      	ldr	r0, [pc, #44]	; (800e248 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e21a:	4b0c      	ldr	r3, [pc, #48]	; (800e24c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e21c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e21e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e220:	d3f6      	bcc.n	800e210 <CopyDataInit>
  ldr  r2, =_sbss
 800e222:	4a0b      	ldr	r2, [pc, #44]	; (800e250 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e224:	e002      	b.n	800e22c <LoopFillZerobss>

0800e226 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e226:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e228:	f842 3b04 	str.w	r3, [r2], #4

0800e22c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e22c:	4b09      	ldr	r3, [pc, #36]	; (800e254 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e22e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e230:	d3f9      	bcc.n	800e226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e232:	f7f3 fe2d 	bl	8001e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e236:	f009 f91d 	bl	8017474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e23a:	f7f3 fb03 	bl	8001844 <main>
  bx  lr    
 800e23e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e240:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e244:	080196d4 	.word	0x080196d4
  ldr  r0, =_sdata
 800e248:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e24c:	20000624 	.word	0x20000624
  ldr  r2, =_sbss
 800e250:	20000628 	.word	0x20000628
  ldr  r3, = _ebss
 800e254:	20006e94 	.word	0x20006e94

0800e258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e258:	e7fe      	b.n	800e258 <ADC_IRQHandler>
	...

0800e25c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e260:	4b0e      	ldr	r3, [pc, #56]	; (800e29c <HAL_Init+0x40>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a0d      	ldr	r2, [pc, #52]	; (800e29c <HAL_Init+0x40>)
 800e266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e26a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e26c:	4b0b      	ldr	r3, [pc, #44]	; (800e29c <HAL_Init+0x40>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a0a      	ldr	r2, [pc, #40]	; (800e29c <HAL_Init+0x40>)
 800e272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e278:	4b08      	ldr	r3, [pc, #32]	; (800e29c <HAL_Init+0x40>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a07      	ldr	r2, [pc, #28]	; (800e29c <HAL_Init+0x40>)
 800e27e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e284:	2003      	movs	r0, #3
 800e286:	f001 f846 	bl	800f316 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e28a:	2000      	movs	r0, #0
 800e28c:	f7f3 fcbc 	bl	8001c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e290:	f7f3 fc92 	bl	8001bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	40023c00 	.word	0x40023c00

0800e2a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e2a4:	4b06      	ldr	r3, [pc, #24]	; (800e2c0 <HAL_IncTick+0x20>)
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	4b06      	ldr	r3, [pc, #24]	; (800e2c4 <HAL_IncTick+0x24>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	4a04      	ldr	r2, [pc, #16]	; (800e2c4 <HAL_IncTick+0x24>)
 800e2b2:	6013      	str	r3, [r2, #0]
}
 800e2b4:	bf00      	nop
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	200005ac 	.word	0x200005ac
 800e2c4:	20002488 	.word	0x20002488

0800e2c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	af00      	add	r7, sp, #0
  return uwTick;
 800e2cc:	4b03      	ldr	r3, [pc, #12]	; (800e2dc <HAL_GetTick+0x14>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	20002488 	.word	0x20002488

0800e2e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e2e8:	f7ff ffee 	bl	800e2c8 <HAL_GetTick>
 800e2ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f8:	d005      	beq.n	800e306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e2fa:	4b0a      	ldr	r3, [pc, #40]	; (800e324 <HAL_Delay+0x44>)
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	461a      	mov	r2, r3
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	4413      	add	r3, r2
 800e304:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e306:	bf00      	nop
 800e308:	f7ff ffde 	bl	800e2c8 <HAL_GetTick>
 800e30c:	4602      	mov	r2, r0
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	68fa      	ldr	r2, [r7, #12]
 800e314:	429a      	cmp	r2, r3
 800e316:	d8f7      	bhi.n	800e308 <HAL_Delay+0x28>
  {
  }
}
 800e318:	bf00      	nop
 800e31a:	bf00      	nop
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	200005ac 	.word	0x200005ac

0800e328 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d101      	bne.n	800e33a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	e0ed      	b.n	800e516 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e340:	b2db      	uxtb	r3, r3
 800e342:	2b00      	cmp	r3, #0
 800e344:	d102      	bne.n	800e34c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7f2 fdd0 	bl	8000eec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f022 0202 	bic.w	r2, r2, #2
 800e35a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e35c:	f7ff ffb4 	bl	800e2c8 <HAL_GetTick>
 800e360:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e362:	e012      	b.n	800e38a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e364:	f7ff ffb0 	bl	800e2c8 <HAL_GetTick>
 800e368:	4602      	mov	r2, r0
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	1ad3      	subs	r3, r2, r3
 800e36e:	2b0a      	cmp	r3, #10
 800e370:	d90b      	bls.n	800e38a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e376:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2205      	movs	r2, #5
 800e382:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e386:	2301      	movs	r3, #1
 800e388:	e0c5      	b.n	800e516 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	f003 0302 	and.w	r3, r3, #2
 800e394:	2b00      	cmp	r3, #0
 800e396:	d1e5      	bne.n	800e364 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f042 0201 	orr.w	r2, r2, #1
 800e3a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e3a8:	f7ff ff8e 	bl	800e2c8 <HAL_GetTick>
 800e3ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e3ae:	e012      	b.n	800e3d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e3b0:	f7ff ff8a 	bl	800e2c8 <HAL_GetTick>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	1ad3      	subs	r3, r2, r3
 800e3ba:	2b0a      	cmp	r3, #10
 800e3bc:	d90b      	bls.n	800e3d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2205      	movs	r2, #5
 800e3ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	e09f      	b.n	800e516 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d0e5      	beq.n	800e3b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	7e1b      	ldrb	r3, [r3, #24]
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d108      	bne.n	800e3fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	e007      	b.n	800e40e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e40c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	7e5b      	ldrb	r3, [r3, #25]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d108      	bne.n	800e428 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	e007      	b.n	800e438 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e436:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	7e9b      	ldrb	r3, [r3, #26]
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d108      	bne.n	800e452 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f042 0220 	orr.w	r2, r2, #32
 800e44e:	601a      	str	r2, [r3, #0]
 800e450:	e007      	b.n	800e462 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f022 0220 	bic.w	r2, r2, #32
 800e460:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	7edb      	ldrb	r3, [r3, #27]
 800e466:	2b01      	cmp	r3, #1
 800e468:	d108      	bne.n	800e47c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f022 0210 	bic.w	r2, r2, #16
 800e478:	601a      	str	r2, [r3, #0]
 800e47a:	e007      	b.n	800e48c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f042 0210 	orr.w	r2, r2, #16
 800e48a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	7f1b      	ldrb	r3, [r3, #28]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d108      	bne.n	800e4a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f042 0208 	orr.w	r2, r2, #8
 800e4a2:	601a      	str	r2, [r3, #0]
 800e4a4:	e007      	b.n	800e4b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f022 0208 	bic.w	r2, r2, #8
 800e4b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	7f5b      	ldrb	r3, [r3, #29]
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d108      	bne.n	800e4d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f042 0204 	orr.w	r2, r2, #4
 800e4cc:	601a      	str	r2, [r3, #0]
 800e4ce:	e007      	b.n	800e4e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f022 0204 	bic.w	r2, r2, #4
 800e4de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	689a      	ldr	r2, [r3, #8]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	431a      	orrs	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	691b      	ldr	r3, [r3, #16]
 800e4ee:	431a      	orrs	r2, r3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	695b      	ldr	r3, [r3, #20]
 800e4f4:	ea42 0103 	orr.w	r1, r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	1e5a      	subs	r2, r3, #1
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	430a      	orrs	r2, r1
 800e504:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2201      	movs	r2, #1
 800e510:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3710      	adds	r7, #16
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
	...

0800e520 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800e520:	b480      	push	{r7}
 800e522:	b087      	sub	sp, #28
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e536:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800e538:	7cfb      	ldrb	r3, [r7, #19]
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d003      	beq.n	800e546 <HAL_CAN_ConfigFilter+0x26>
 800e53e:	7cfb      	ldrb	r3, [r7, #19]
 800e540:	2b02      	cmp	r3, #2
 800e542:	f040 80be 	bne.w	800e6c2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800e546:	4b65      	ldr	r3, [pc, #404]	; (800e6dc <HAL_CAN_ConfigFilter+0x1bc>)
 800e548:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e550:	f043 0201 	orr.w	r2, r3, #1
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e560:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e574:	021b      	lsls	r3, r3, #8
 800e576:	431a      	orrs	r2, r3
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	695b      	ldr	r3, [r3, #20]
 800e582:	f003 031f 	and.w	r3, r3, #31
 800e586:	2201      	movs	r2, #1
 800e588:	fa02 f303 	lsl.w	r3, r2, r3
 800e58c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	43db      	mvns	r3, r3
 800e598:	401a      	ands	r2, r3
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	69db      	ldr	r3, [r3, #28]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d123      	bne.n	800e5f0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	43db      	mvns	r3, r3
 800e5b2:	401a      	ands	r2, r3
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e5c6:	683a      	ldr	r2, [r7, #0]
 800e5c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800e5ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	3248      	adds	r2, #72	; 0x48
 800e5d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e5e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e5e6:	6979      	ldr	r1, [r7, #20]
 800e5e8:	3348      	adds	r3, #72	; 0x48
 800e5ea:	00db      	lsls	r3, r3, #3
 800e5ec:	440b      	add	r3, r1
 800e5ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	69db      	ldr	r3, [r3, #28]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d122      	bne.n	800e63e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	431a      	orrs	r2, r3
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e614:	683a      	ldr	r2, [r7, #0]
 800e616:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800e618:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	3248      	adds	r2, #72	; 0x48
 800e61e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e632:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e634:	6979      	ldr	r1, [r7, #20]
 800e636:	3348      	adds	r3, #72	; 0x48
 800e638:	00db      	lsls	r3, r3, #3
 800e63a:	440b      	add	r3, r1
 800e63c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	699b      	ldr	r3, [r3, #24]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d109      	bne.n	800e65a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	43db      	mvns	r3, r3
 800e650:	401a      	ands	r2, r3
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e658:	e007      	b.n	800e66a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	431a      	orrs	r2, r3
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d109      	bne.n	800e686 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	43db      	mvns	r3, r3
 800e67c:	401a      	ands	r2, r3
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800e684:	e007      	b.n	800e696 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	431a      	orrs	r2, r3
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	6a1b      	ldr	r3, [r3, #32]
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d107      	bne.n	800e6ae <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	431a      	orrs	r2, r3
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e6b4:	f023 0201 	bic.w	r2, r3, #1
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	e006      	b.n	800e6d0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e6ce:	2301      	movs	r3, #1
  }
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	371c      	adds	r7, #28
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr
 800e6dc:	40006400 	.word	0x40006400

0800e6e0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d12e      	bne.n	800e752 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2202      	movs	r2, #2
 800e6f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f022 0201 	bic.w	r2, r2, #1
 800e70a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e70c:	f7ff fddc 	bl	800e2c8 <HAL_GetTick>
 800e710:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800e712:	e012      	b.n	800e73a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e714:	f7ff fdd8 	bl	800e2c8 <HAL_GetTick>
 800e718:	4602      	mov	r2, r0
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	2b0a      	cmp	r3, #10
 800e720:	d90b      	bls.n	800e73a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e726:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2205      	movs	r2, #5
 800e732:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800e736:	2301      	movs	r3, #1
 800e738:	e012      	b.n	800e760 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	f003 0301 	and.w	r3, r3, #1
 800e744:	2b00      	cmp	r3, #0
 800e746:	d1e5      	bne.n	800e714 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800e74e:	2300      	movs	r3, #0
 800e750:	e006      	b.n	800e760 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e756:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e75e:	2301      	movs	r3, #1
  }
}
 800e760:	4618      	mov	r0, r3
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e776:	b2db      	uxtb	r3, r3
 800e778:	2b02      	cmp	r3, #2
 800e77a:	d133      	bne.n	800e7e4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f042 0201 	orr.w	r2, r2, #1
 800e78a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e78c:	f7ff fd9c 	bl	800e2c8 <HAL_GetTick>
 800e790:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e792:	e012      	b.n	800e7ba <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e794:	f7ff fd98 	bl	800e2c8 <HAL_GetTick>
 800e798:	4602      	mov	r2, r0
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	2b0a      	cmp	r3, #10
 800e7a0:	d90b      	bls.n	800e7ba <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2205      	movs	r2, #5
 800e7b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e01b      	b.n	800e7f2 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d0e5      	beq.n	800e794 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f022 0202 	bic.w	r2, r2, #2
 800e7d6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	e006      	b.n	800e7f2 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e7f0:	2301      	movs	r3, #1
  }
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}

0800e7fa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800e7fa:	b480      	push	{r7}
 800e7fc:	b089      	sub	sp, #36	; 0x24
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	60f8      	str	r0, [r7, #12]
 800e802:	60b9      	str	r1, [r7, #8]
 800e804:	607a      	str	r2, [r7, #4]
 800e806:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e80e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800e818:	7ffb      	ldrb	r3, [r7, #31]
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d003      	beq.n	800e826 <HAL_CAN_AddTxMessage+0x2c>
 800e81e:	7ffb      	ldrb	r3, [r7, #31]
 800e820:	2b02      	cmp	r3, #2
 800e822:	f040 80b8 	bne.w	800e996 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800e826:	69bb      	ldr	r3, [r7, #24]
 800e828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d10a      	bne.n	800e846 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800e836:	2b00      	cmp	r3, #0
 800e838:	d105      	bne.n	800e846 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800e840:	2b00      	cmp	r3, #0
 800e842:	f000 80a0 	beq.w	800e986 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	0e1b      	lsrs	r3, r3, #24
 800e84a:	f003 0303 	and.w	r3, r3, #3
 800e84e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	2b02      	cmp	r3, #2
 800e854:	d907      	bls.n	800e866 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e85a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e862:	2301      	movs	r3, #1
 800e864:	e09e      	b.n	800e9a4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800e866:	2201      	movs	r2, #1
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	409a      	lsls	r2, r3
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10d      	bne.n	800e894 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800e882:	68f9      	ldr	r1, [r7, #12]
 800e884:	6809      	ldr	r1, [r1, #0]
 800e886:	431a      	orrs	r2, r3
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	3318      	adds	r3, #24
 800e88c:	011b      	lsls	r3, r3, #4
 800e88e:	440b      	add	r3, r1
 800e890:	601a      	str	r2, [r3, #0]
 800e892:	e00f      	b.n	800e8b4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e89e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e8a4:	68f9      	ldr	r1, [r7, #12]
 800e8a6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800e8a8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	3318      	adds	r3, #24
 800e8ae:	011b      	lsls	r3, r3, #4
 800e8b0:	440b      	add	r3, r1
 800e8b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6819      	ldr	r1, [r3, #0]
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	691a      	ldr	r2, [r3, #16]
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	3318      	adds	r3, #24
 800e8c0:	011b      	lsls	r3, r3, #4
 800e8c2:	440b      	add	r3, r1
 800e8c4:	3304      	adds	r3, #4
 800e8c6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	7d1b      	ldrb	r3, [r3, #20]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d111      	bne.n	800e8f4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	3318      	adds	r3, #24
 800e8d8:	011b      	lsls	r3, r3, #4
 800e8da:	4413      	add	r3, r2
 800e8dc:	3304      	adds	r3, #4
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	6811      	ldr	r1, [r2, #0]
 800e8e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	3318      	adds	r3, #24
 800e8ec:	011b      	lsls	r3, r3, #4
 800e8ee:	440b      	add	r3, r1
 800e8f0:	3304      	adds	r3, #4
 800e8f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	3307      	adds	r3, #7
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	061a      	lsls	r2, r3, #24
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	3306      	adds	r3, #6
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	041b      	lsls	r3, r3, #16
 800e904:	431a      	orrs	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	3305      	adds	r3, #5
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	021b      	lsls	r3, r3, #8
 800e90e:	4313      	orrs	r3, r2
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	3204      	adds	r2, #4
 800e914:	7812      	ldrb	r2, [r2, #0]
 800e916:	4610      	mov	r0, r2
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	6811      	ldr	r1, [r2, #0]
 800e91c:	ea43 0200 	orr.w	r2, r3, r0
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	011b      	lsls	r3, r3, #4
 800e924:	440b      	add	r3, r1
 800e926:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800e92a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	3303      	adds	r3, #3
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	061a      	lsls	r2, r3, #24
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	3302      	adds	r3, #2
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	041b      	lsls	r3, r3, #16
 800e93c:	431a      	orrs	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	3301      	adds	r3, #1
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	021b      	lsls	r3, r3, #8
 800e946:	4313      	orrs	r3, r2
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	7812      	ldrb	r2, [r2, #0]
 800e94c:	4610      	mov	r0, r2
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	6811      	ldr	r1, [r2, #0]
 800e952:	ea43 0200 	orr.w	r2, r3, r0
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	011b      	lsls	r3, r3, #4
 800e95a:	440b      	add	r3, r1
 800e95c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800e960:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	3318      	adds	r3, #24
 800e96a:	011b      	lsls	r3, r3, #4
 800e96c:	4413      	add	r3, r2
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	6811      	ldr	r1, [r2, #0]
 800e974:	f043 0201 	orr.w	r2, r3, #1
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	3318      	adds	r3, #24
 800e97c:	011b      	lsls	r3, r3, #4
 800e97e:	440b      	add	r3, r1
 800e980:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	e00e      	b.n	800e9a4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800e992:	2301      	movs	r3, #1
 800e994:	e006      	b.n	800e9a4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e99a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
  }
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3724      	adds	r7, #36	; 0x24
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e9c2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800e9c4:	7afb      	ldrb	r3, [r7, #11]
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d002      	beq.n	800e9d0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800e9ca:	7afb      	ldrb	r3, [r7, #11]
 800e9cc:	2b02      	cmp	r3, #2
 800e9ce:	d11d      	bne.n	800ea0c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d002      	beq.n	800e9e4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	689b      	ldr	r3, [r3, #8]
 800e9ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d002      	beq.n	800e9f8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	689b      	ldr	r3, [r3, #8]
 800e9fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d002      	beq.n	800ea0c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	3301      	adds	r3, #1
 800ea0a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800ea1a:	b480      	push	{r7}
 800ea1c:	b087      	sub	sp, #28
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	60f8      	str	r0, [r7, #12]
 800ea22:	60b9      	str	r1, [r7, #8]
 800ea24:	607a      	str	r2, [r7, #4]
 800ea26:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea2e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800ea30:	7dfb      	ldrb	r3, [r7, #23]
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d003      	beq.n	800ea3e <HAL_CAN_GetRxMessage+0x24>
 800ea36:	7dfb      	ldrb	r3, [r7, #23]
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	f040 80f3 	bne.w	800ec24 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d10e      	bne.n	800ea62 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	68db      	ldr	r3, [r3, #12]
 800ea4a:	f003 0303 	and.w	r3, r3, #3
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d116      	bne.n	800ea80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e0e7      	b.n	800ec32 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	691b      	ldr	r3, [r3, #16]
 800ea68:	f003 0303 	and.w	r3, r3, #3
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d107      	bne.n	800ea80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e0d8      	b.n	800ec32 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	331b      	adds	r3, #27
 800ea88:	011b      	lsls	r3, r3, #4
 800ea8a:	4413      	add	r3, r2
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f003 0204 	and.w	r2, r3, #4
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	689b      	ldr	r3, [r3, #8]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d10c      	bne.n	800eab8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	331b      	adds	r3, #27
 800eaa6:	011b      	lsls	r3, r3, #4
 800eaa8:	4413      	add	r3, r2
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	0d5b      	lsrs	r3, r3, #21
 800eaae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	e00b      	b.n	800ead0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	331b      	adds	r3, #27
 800eac0:	011b      	lsls	r3, r3, #4
 800eac2:	4413      	add	r3, r2
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	08db      	lsrs	r3, r3, #3
 800eac8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	331b      	adds	r3, #27
 800ead8:	011b      	lsls	r3, r3, #4
 800eada:	4413      	add	r3, r2
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f003 0202 	and.w	r2, r3, #2
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	331b      	adds	r3, #27
 800eaee:	011b      	lsls	r3, r3, #4
 800eaf0:	4413      	add	r3, r2
 800eaf2:	3304      	adds	r3, #4
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f003 020f 	and.w	r2, r3, #15
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	331b      	adds	r3, #27
 800eb06:	011b      	lsls	r3, r3, #4
 800eb08:	4413      	add	r3, r2
 800eb0a:	3304      	adds	r3, #4
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	0a1b      	lsrs	r3, r3, #8
 800eb10:	b2da      	uxtb	r2, r3
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	331b      	adds	r3, #27
 800eb1e:	011b      	lsls	r3, r3, #4
 800eb20:	4413      	add	r3, r2
 800eb22:	3304      	adds	r3, #4
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	0c1b      	lsrs	r3, r3, #16
 800eb28:	b29a      	uxth	r2, r3
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	011b      	lsls	r3, r3, #4
 800eb36:	4413      	add	r3, r2
 800eb38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	b2da      	uxtb	r2, r3
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	011b      	lsls	r3, r3, #4
 800eb4c:	4413      	add	r3, r2
 800eb4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	0a1a      	lsrs	r2, r3, #8
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	b2d2      	uxtb	r2, r2
 800eb5c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	011b      	lsls	r3, r3, #4
 800eb66:	4413      	add	r3, r2
 800eb68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	0c1a      	lsrs	r2, r3, #16
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	3302      	adds	r3, #2
 800eb74:	b2d2      	uxtb	r2, r2
 800eb76:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	011b      	lsls	r3, r3, #4
 800eb80:	4413      	add	r3, r2
 800eb82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	0e1a      	lsrs	r2, r3, #24
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	3303      	adds	r3, #3
 800eb8e:	b2d2      	uxtb	r2, r2
 800eb90:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	011b      	lsls	r3, r3, #4
 800eb9a:	4413      	add	r3, r2
 800eb9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	3304      	adds	r3, #4
 800eba6:	b2d2      	uxtb	r2, r2
 800eba8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	011b      	lsls	r3, r3, #4
 800ebb2:	4413      	add	r3, r2
 800ebb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	0a1a      	lsrs	r2, r3, #8
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	3305      	adds	r3, #5
 800ebc0:	b2d2      	uxtb	r2, r2
 800ebc2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	011b      	lsls	r3, r3, #4
 800ebcc:	4413      	add	r3, r2
 800ebce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	0c1a      	lsrs	r2, r3, #16
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	3306      	adds	r3, #6
 800ebda:	b2d2      	uxtb	r2, r2
 800ebdc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	011b      	lsls	r3, r3, #4
 800ebe6:	4413      	add	r3, r2
 800ebe8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	0e1a      	lsrs	r2, r3, #24
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	3307      	adds	r3, #7
 800ebf4:	b2d2      	uxtb	r2, r2
 800ebf6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d108      	bne.n	800ec10 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	68da      	ldr	r2, [r3, #12]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f042 0220 	orr.w	r2, r2, #32
 800ec0c:	60da      	str	r2, [r3, #12]
 800ec0e:	e007      	b.n	800ec20 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	691a      	ldr	r2, [r3, #16]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f042 0220 	orr.w	r2, r2, #32
 800ec1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800ec20:	2300      	movs	r3, #0
 800ec22:	e006      	b.n	800ec32 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ec30:	2301      	movs	r3, #1
  }
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	371c      	adds	r7, #28
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr

0800ec3e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800ec3e:	b480      	push	{r7}
 800ec40:	b085      	sub	sp, #20
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ec52:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800ec54:	7afb      	ldrb	r3, [r7, #11]
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d002      	beq.n	800ec60 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800ec5a:	7afb      	ldrb	r3, [r7, #11]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d10f      	bne.n	800ec80 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d106      	bne.n	800ec74 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	f003 0303 	and.w	r3, r3, #3
 800ec70:	60fb      	str	r3, [r7, #12]
 800ec72:	e005      	b.n	800ec80 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	691b      	ldr	r3, [r3, #16]
 800ec7a:	f003 0303 	and.w	r3, r3, #3
 800ec7e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800ec80:	68fb      	ldr	r3, [r7, #12]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3714      	adds	r7, #20
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr

0800ec8e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800ec8e:	b480      	push	{r7}
 800ec90:	b085      	sub	sp, #20
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
 800ec96:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ec9e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800eca0:	7bfb      	ldrb	r3, [r7, #15]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d002      	beq.n	800ecac <HAL_CAN_ActivateNotification+0x1e>
 800eca6:	7bfb      	ldrb	r3, [r7, #15]
 800eca8:	2b02      	cmp	r3, #2
 800ecaa:	d109      	bne.n	800ecc0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	6959      	ldr	r1, [r3, #20]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	683a      	ldr	r2, [r7, #0]
 800ecb8:	430a      	orrs	r2, r1
 800ecba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	e006      	b.n	800ecce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800eccc:	2301      	movs	r3, #1
  }
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3714      	adds	r7, #20
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr

0800ecda <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800ecda:	b480      	push	{r7}
 800ecdc:	b085      	sub	sp, #20
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
 800ece2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ecea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800ecec:	7bfb      	ldrb	r3, [r7, #15]
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d002      	beq.n	800ecf8 <HAL_CAN_DeactivateNotification+0x1e>
 800ecf2:	7bfb      	ldrb	r3, [r7, #15]
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d10a      	bne.n	800ed0e <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	6959      	ldr	r1, [r3, #20]
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	43da      	mvns	r2, r3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	400a      	ands	r2, r1
 800ed08:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	e006      	b.n	800ed1c <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ed1a:	2301      	movs	r3, #1
  }
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3714      	adds	r7, #20
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b08a      	sub	sp, #40	; 0x28
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800ed30:	2300      	movs	r3, #0
 800ed32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	695b      	ldr	r3, [r3, #20]
 800ed3a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	691b      	ldr	r3, [r3, #16]
 800ed5a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	699b      	ldr	r3, [r3, #24]
 800ed62:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800ed64:	6a3b      	ldr	r3, [r7, #32]
 800ed66:	f003 0301 	and.w	r3, r3, #1
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d07c      	beq.n	800ee68 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	f003 0301 	and.w	r3, r3, #1
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d023      	beq.n	800edc0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	f003 0302 	and.w	r3, r3, #2
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d003      	beq.n	800ed92 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f000 f983 	bl	800f096 <HAL_CAN_TxMailbox0CompleteCallback>
 800ed90:	e016      	b.n	800edc0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	f003 0304 	and.w	r3, r3, #4
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d004      	beq.n	800eda6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800eda2:	627b      	str	r3, [r7, #36]	; 0x24
 800eda4:	e00c      	b.n	800edc0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	f003 0308 	and.w	r3, r3, #8
 800edac:	2b00      	cmp	r3, #0
 800edae:	d004      	beq.n	800edba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800edb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800edb6:	627b      	str	r3, [r7, #36]	; 0x24
 800edb8:	e002      	b.n	800edc0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f000 f989 	bl	800f0d2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d024      	beq.n	800ee14 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800edd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800edd4:	69bb      	ldr	r3, [r7, #24]
 800edd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d003      	beq.n	800ede6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 f963 	bl	800f0aa <HAL_CAN_TxMailbox1CompleteCallback>
 800ede4:	e016      	b.n	800ee14 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800edec:	2b00      	cmp	r3, #0
 800edee:	d004      	beq.n	800edfa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800edf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800edf6:	627b      	str	r3, [r7, #36]	; 0x24
 800edf8:	e00c      	b.n	800ee14 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d004      	beq.n	800ee0e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800ee04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ee0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee0c:	e002      	b.n	800ee14 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f000 f969 	bl	800f0e6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d024      	beq.n	800ee68 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ee26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d003      	beq.n	800ee3a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f000 f943 	bl	800f0be <HAL_CAN_TxMailbox2CompleteCallback>
 800ee38:	e016      	b.n	800ee68 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d004      	beq.n	800ee4e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800ee44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee4c:	e00c      	b.n	800ee68 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d004      	beq.n	800ee62 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800ee58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee5e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee60:	e002      	b.n	800ee68 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 f949 	bl	800f0fa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800ee68:	6a3b      	ldr	r3, [r7, #32]
 800ee6a:	f003 0308 	and.w	r3, r3, #8
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00c      	beq.n	800ee8c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	f003 0310 	and.w	r3, r3, #16
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d007      	beq.n	800ee8c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800ee7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ee82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2210      	movs	r2, #16
 800ee8a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800ee8c:	6a3b      	ldr	r3, [r7, #32]
 800ee8e:	f003 0304 	and.w	r3, r3, #4
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d00b      	beq.n	800eeae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	f003 0308 	and.w	r3, r3, #8
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d006      	beq.n	800eeae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2208      	movs	r2, #8
 800eea6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f000 f930 	bl	800f10e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800eeae:	6a3b      	ldr	r3, [r7, #32]
 800eeb0:	f003 0302 	and.w	r3, r3, #2
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d009      	beq.n	800eecc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	f003 0303 	and.w	r3, r3, #3
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d002      	beq.n	800eecc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7fa fcb8 	bl	800983c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800eecc:	6a3b      	ldr	r3, [r7, #32]
 800eece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d00c      	beq.n	800eef0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	f003 0310 	and.w	r3, r3, #16
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d007      	beq.n	800eef0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eee6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2210      	movs	r2, #16
 800eeee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800eef0:	6a3b      	ldr	r3, [r7, #32]
 800eef2:	f003 0320 	and.w	r3, r3, #32
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00b      	beq.n	800ef12 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	f003 0308 	and.w	r3, r3, #8
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d006      	beq.n	800ef12 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	2208      	movs	r2, #8
 800ef0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 f908 	bl	800f122 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800ef12:	6a3b      	ldr	r3, [r7, #32]
 800ef14:	f003 0310 	and.w	r3, r3, #16
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d009      	beq.n	800ef30 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	f003 0303 	and.w	r3, r3, #3
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d002      	beq.n	800ef30 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f7fa fca0 	bl	8009870 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800ef30:	6a3b      	ldr	r3, [r7, #32]
 800ef32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00b      	beq.n	800ef52 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	f003 0310 	and.w	r3, r3, #16
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d006      	beq.n	800ef52 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2210      	movs	r2, #16
 800ef4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 f8f2 	bl	800f136 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800ef52:	6a3b      	ldr	r3, [r7, #32]
 800ef54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d00b      	beq.n	800ef74 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	f003 0308 	and.w	r3, r3, #8
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d006      	beq.n	800ef74 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2208      	movs	r2, #8
 800ef6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 f8eb 	bl	800f14a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800ef74:	6a3b      	ldr	r3, [r7, #32]
 800ef76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d07b      	beq.n	800f076 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	f003 0304 	and.w	r3, r3, #4
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d072      	beq.n	800f06e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ef88:	6a3b      	ldr	r3, [r7, #32]
 800ef8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d008      	beq.n	800efa4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d003      	beq.n	800efa4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800ef9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9e:	f043 0301 	orr.w	r3, r3, #1
 800efa2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800efa4:	6a3b      	ldr	r3, [r7, #32]
 800efa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d008      	beq.n	800efc0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d003      	beq.n	800efc0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800efb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efba:	f043 0302 	orr.w	r3, r3, #2
 800efbe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800efc0:	6a3b      	ldr	r3, [r7, #32]
 800efc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d008      	beq.n	800efdc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d003      	beq.n	800efdc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	f043 0304 	orr.w	r3, r3, #4
 800efda:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800efdc:	6a3b      	ldr	r3, [r7, #32]
 800efde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d043      	beq.n	800f06e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800efec:	2b00      	cmp	r3, #0
 800efee:	d03e      	beq.n	800f06e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eff6:	2b60      	cmp	r3, #96	; 0x60
 800eff8:	d02b      	beq.n	800f052 <HAL_CAN_IRQHandler+0x32a>
 800effa:	2b60      	cmp	r3, #96	; 0x60
 800effc:	d82e      	bhi.n	800f05c <HAL_CAN_IRQHandler+0x334>
 800effe:	2b50      	cmp	r3, #80	; 0x50
 800f000:	d022      	beq.n	800f048 <HAL_CAN_IRQHandler+0x320>
 800f002:	2b50      	cmp	r3, #80	; 0x50
 800f004:	d82a      	bhi.n	800f05c <HAL_CAN_IRQHandler+0x334>
 800f006:	2b40      	cmp	r3, #64	; 0x40
 800f008:	d019      	beq.n	800f03e <HAL_CAN_IRQHandler+0x316>
 800f00a:	2b40      	cmp	r3, #64	; 0x40
 800f00c:	d826      	bhi.n	800f05c <HAL_CAN_IRQHandler+0x334>
 800f00e:	2b30      	cmp	r3, #48	; 0x30
 800f010:	d010      	beq.n	800f034 <HAL_CAN_IRQHandler+0x30c>
 800f012:	2b30      	cmp	r3, #48	; 0x30
 800f014:	d822      	bhi.n	800f05c <HAL_CAN_IRQHandler+0x334>
 800f016:	2b10      	cmp	r3, #16
 800f018:	d002      	beq.n	800f020 <HAL_CAN_IRQHandler+0x2f8>
 800f01a:	2b20      	cmp	r3, #32
 800f01c:	d005      	beq.n	800f02a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800f01e:	e01d      	b.n	800f05c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800f020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f022:	f043 0308 	orr.w	r3, r3, #8
 800f026:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f028:	e019      	b.n	800f05e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800f02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02c:	f043 0310 	orr.w	r3, r3, #16
 800f030:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f032:	e014      	b.n	800f05e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800f034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f036:	f043 0320 	orr.w	r3, r3, #32
 800f03a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f03c:	e00f      	b.n	800f05e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800f03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f044:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f046:	e00a      	b.n	800f05e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800f048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f04e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f050:	e005      	b.n	800f05e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800f052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f058:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f05a:	e000      	b.n	800f05e <HAL_CAN_IRQHandler+0x336>
            break;
 800f05c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	699a      	ldr	r2, [r3, #24]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f06c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2204      	movs	r2, #4
 800f074:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800f076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d008      	beq.n	800f08e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f082:	431a      	orrs	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 f868 	bl	800f15e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800f08e:	bf00      	nop
 800f090:	3728      	adds	r7, #40	; 0x28
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}

0800f096 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f096:	b480      	push	{r7}
 800f098:	b083      	sub	sp, #12
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800f09e:	bf00      	nop
 800f0a0:	370c      	adds	r7, #12
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr

0800f0aa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f0aa:	b480      	push	{r7}
 800f0ac:	b083      	sub	sp, #12
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800f0b2:	bf00      	nop
 800f0b4:	370c      	adds	r7, #12
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr

0800f0be <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f0be:	b480      	push	{r7}
 800f0c0:	b083      	sub	sp, #12
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800f0c6:	bf00      	nop
 800f0c8:	370c      	adds	r7, #12
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr

0800f0d2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f0d2:	b480      	push	{r7}
 800f0d4:	b083      	sub	sp, #12
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800f0da:	bf00      	nop
 800f0dc:	370c      	adds	r7, #12
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr

0800f0e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f0e6:	b480      	push	{r7}
 800f0e8:	b083      	sub	sp, #12
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800f0ee:	bf00      	nop
 800f0f0:	370c      	adds	r7, #12
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr

0800f0fa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f0fa:	b480      	push	{r7}
 800f0fc:	b083      	sub	sp, #12
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800f102:	bf00      	nop
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr

0800f10e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800f10e:	b480      	push	{r7}
 800f110:	b083      	sub	sp, #12
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800f116:	bf00      	nop
 800f118:	370c      	adds	r7, #12
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr

0800f122 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800f122:	b480      	push	{r7}
 800f124:	b083      	sub	sp, #12
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800f12a:	bf00      	nop
 800f12c:	370c      	adds	r7, #12
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr

0800f136 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800f136:	b480      	push	{r7}
 800f138:	b083      	sub	sp, #12
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800f13e:	bf00      	nop
 800f140:	370c      	adds	r7, #12
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr

0800f14a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800f14a:	b480      	push	{r7}
 800f14c:	b083      	sub	sp, #12
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800f152:	bf00      	nop
 800f154:	370c      	adds	r7, #12
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr

0800f15e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800f15e:	b480      	push	{r7}
 800f160:	b083      	sub	sp, #12
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800f166:	bf00      	nop
 800f168:	370c      	adds	r7, #12
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr
	...

0800f174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f003 0307 	and.w	r3, r3, #7
 800f182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f184:	4b0c      	ldr	r3, [pc, #48]	; (800f1b8 <__NVIC_SetPriorityGrouping+0x44>)
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f18a:	68ba      	ldr	r2, [r7, #8]
 800f18c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f190:	4013      	ands	r3, r2
 800f192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f19c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f1a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f1a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f1a6:	4a04      	ldr	r2, [pc, #16]	; (800f1b8 <__NVIC_SetPriorityGrouping+0x44>)
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	60d3      	str	r3, [r2, #12]
}
 800f1ac:	bf00      	nop
 800f1ae:	3714      	adds	r7, #20
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr
 800f1b8:	e000ed00 	.word	0xe000ed00

0800f1bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f1c0:	4b04      	ldr	r3, [pc, #16]	; (800f1d4 <__NVIC_GetPriorityGrouping+0x18>)
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	0a1b      	lsrs	r3, r3, #8
 800f1c6:	f003 0307 	and.w	r3, r3, #7
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr
 800f1d4:	e000ed00 	.word	0xe000ed00

0800f1d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	4603      	mov	r3, r0
 800f1e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f1e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	db0b      	blt.n	800f202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f1ea:	79fb      	ldrb	r3, [r7, #7]
 800f1ec:	f003 021f 	and.w	r2, r3, #31
 800f1f0:	4907      	ldr	r1, [pc, #28]	; (800f210 <__NVIC_EnableIRQ+0x38>)
 800f1f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1f6:	095b      	lsrs	r3, r3, #5
 800f1f8:	2001      	movs	r0, #1
 800f1fa:	fa00 f202 	lsl.w	r2, r0, r2
 800f1fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f202:	bf00      	nop
 800f204:	370c      	adds	r7, #12
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop
 800f210:	e000e100 	.word	0xe000e100

0800f214 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	4603      	mov	r3, r0
 800f21c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f21e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f222:	2b00      	cmp	r3, #0
 800f224:	db12      	blt.n	800f24c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f226:	79fb      	ldrb	r3, [r7, #7]
 800f228:	f003 021f 	and.w	r2, r3, #31
 800f22c:	490a      	ldr	r1, [pc, #40]	; (800f258 <__NVIC_DisableIRQ+0x44>)
 800f22e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f232:	095b      	lsrs	r3, r3, #5
 800f234:	2001      	movs	r0, #1
 800f236:	fa00 f202 	lsl.w	r2, r0, r2
 800f23a:	3320      	adds	r3, #32
 800f23c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800f240:	f3bf 8f4f 	dsb	sy
}
 800f244:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f246:	f3bf 8f6f 	isb	sy
}
 800f24a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800f24c:	bf00      	nop
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	e000e100 	.word	0xe000e100

0800f25c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b083      	sub	sp, #12
 800f260:	af00      	add	r7, sp, #0
 800f262:	4603      	mov	r3, r0
 800f264:	6039      	str	r1, [r7, #0]
 800f266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	db0a      	blt.n	800f286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	b2da      	uxtb	r2, r3
 800f274:	490c      	ldr	r1, [pc, #48]	; (800f2a8 <__NVIC_SetPriority+0x4c>)
 800f276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f27a:	0112      	lsls	r2, r2, #4
 800f27c:	b2d2      	uxtb	r2, r2
 800f27e:	440b      	add	r3, r1
 800f280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f284:	e00a      	b.n	800f29c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	b2da      	uxtb	r2, r3
 800f28a:	4908      	ldr	r1, [pc, #32]	; (800f2ac <__NVIC_SetPriority+0x50>)
 800f28c:	79fb      	ldrb	r3, [r7, #7]
 800f28e:	f003 030f 	and.w	r3, r3, #15
 800f292:	3b04      	subs	r3, #4
 800f294:	0112      	lsls	r2, r2, #4
 800f296:	b2d2      	uxtb	r2, r2
 800f298:	440b      	add	r3, r1
 800f29a:	761a      	strb	r2, [r3, #24]
}
 800f29c:	bf00      	nop
 800f29e:	370c      	adds	r7, #12
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr
 800f2a8:	e000e100 	.word	0xe000e100
 800f2ac:	e000ed00 	.word	0xe000ed00

0800f2b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b089      	sub	sp, #36	; 0x24
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	60f8      	str	r0, [r7, #12]
 800f2b8:	60b9      	str	r1, [r7, #8]
 800f2ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f003 0307 	and.w	r3, r3, #7
 800f2c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	f1c3 0307 	rsb	r3, r3, #7
 800f2ca:	2b04      	cmp	r3, #4
 800f2cc:	bf28      	it	cs
 800f2ce:	2304      	movcs	r3, #4
 800f2d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	3304      	adds	r3, #4
 800f2d6:	2b06      	cmp	r3, #6
 800f2d8:	d902      	bls.n	800f2e0 <NVIC_EncodePriority+0x30>
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	3b03      	subs	r3, #3
 800f2de:	e000      	b.n	800f2e2 <NVIC_EncodePriority+0x32>
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2e8:	69bb      	ldr	r3, [r7, #24]
 800f2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800f2ee:	43da      	mvns	r2, r3
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	401a      	ands	r2, r3
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f2f8:	f04f 31ff 	mov.w	r1, #4294967295
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	fa01 f303 	lsl.w	r3, r1, r3
 800f302:	43d9      	mvns	r1, r3
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f308:	4313      	orrs	r3, r2
         );
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3724      	adds	r7, #36	; 0x24
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr

0800f316 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f316:	b580      	push	{r7, lr}
 800f318:	b082      	sub	sp, #8
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f7ff ff28 	bl	800f174 <__NVIC_SetPriorityGrouping>
}
 800f324:	bf00      	nop
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b086      	sub	sp, #24
 800f330:	af00      	add	r7, sp, #0
 800f332:	4603      	mov	r3, r0
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	607a      	str	r2, [r7, #4]
 800f338:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f33a:	2300      	movs	r3, #0
 800f33c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f33e:	f7ff ff3d 	bl	800f1bc <__NVIC_GetPriorityGrouping>
 800f342:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	68b9      	ldr	r1, [r7, #8]
 800f348:	6978      	ldr	r0, [r7, #20]
 800f34a:	f7ff ffb1 	bl	800f2b0 <NVIC_EncodePriority>
 800f34e:	4602      	mov	r2, r0
 800f350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f354:	4611      	mov	r1, r2
 800f356:	4618      	mov	r0, r3
 800f358:	f7ff ff80 	bl	800f25c <__NVIC_SetPriority>
}
 800f35c:	bf00      	nop
 800f35e:	3718      	adds	r7, #24
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	4603      	mov	r3, r0
 800f36c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f36e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f372:	4618      	mov	r0, r3
 800f374:	f7ff ff30 	bl	800f1d8 <__NVIC_EnableIRQ>
}
 800f378:	bf00      	nop
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	4603      	mov	r3, r0
 800f388:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800f38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff ff40 	bl	800f214 <__NVIC_DisableIRQ>
}
 800f394:	bf00      	nop
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b086      	sub	sp, #24
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f3a8:	f7fe ff8e 	bl	800e2c8 <HAL_GetTick>
 800f3ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d101      	bne.n	800f3b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e099      	b.n	800f4ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2202      	movs	r2, #2
 800f3c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f022 0201 	bic.w	r2, r2, #1
 800f3d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f3d8:	e00f      	b.n	800f3fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f3da:	f7fe ff75 	bl	800e2c8 <HAL_GetTick>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	1ad3      	subs	r3, r2, r3
 800f3e4:	2b05      	cmp	r3, #5
 800f3e6:	d908      	bls.n	800f3fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2220      	movs	r2, #32
 800f3ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2203      	movs	r2, #3
 800f3f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f3f6:	2303      	movs	r3, #3
 800f3f8:	e078      	b.n	800f4ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f003 0301 	and.w	r3, r3, #1
 800f404:	2b00      	cmp	r3, #0
 800f406:	d1e8      	bne.n	800f3da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f410:	697a      	ldr	r2, [r7, #20]
 800f412:	4b38      	ldr	r3, [pc, #224]	; (800f4f4 <HAL_DMA_Init+0x158>)
 800f414:	4013      	ands	r3, r2
 800f416:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	685a      	ldr	r2, [r3, #4]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	689b      	ldr	r3, [r3, #8]
 800f420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f426:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	691b      	ldr	r3, [r3, #16]
 800f42c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	699b      	ldr	r3, [r3, #24]
 800f438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f43e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6a1b      	ldr	r3, [r3, #32]
 800f444:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f446:	697a      	ldr	r2, [r7, #20]
 800f448:	4313      	orrs	r3, r2
 800f44a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f450:	2b04      	cmp	r3, #4
 800f452:	d107      	bne.n	800f464 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f45c:	4313      	orrs	r3, r2
 800f45e:	697a      	ldr	r2, [r7, #20]
 800f460:	4313      	orrs	r3, r2
 800f462:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	697a      	ldr	r2, [r7, #20]
 800f46a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	695b      	ldr	r3, [r3, #20]
 800f472:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	f023 0307 	bic.w	r3, r3, #7
 800f47a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f480:	697a      	ldr	r2, [r7, #20]
 800f482:	4313      	orrs	r3, r2
 800f484:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f48a:	2b04      	cmp	r3, #4
 800f48c:	d117      	bne.n	800f4be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f492:	697a      	ldr	r2, [r7, #20]
 800f494:	4313      	orrs	r3, r2
 800f496:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d00e      	beq.n	800f4be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 fa91 	bl	800f9c8 <DMA_CheckFifoParam>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d008      	beq.n	800f4be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2240      	movs	r2, #64	; 0x40
 800f4b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	e016      	b.n	800f4ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	697a      	ldr	r2, [r7, #20]
 800f4c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 fa48 	bl	800f95c <DMA_CalcBaseAndBitshift>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4d4:	223f      	movs	r2, #63	; 0x3f
 800f4d6:	409a      	lsls	r2, r3
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f4ea:	2300      	movs	r3, #0
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3718      	adds	r7, #24
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	f010803f 	.word	0xf010803f

0800f4f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b086      	sub	sp, #24
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
 800f504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f506:	2300      	movs	r3, #0
 800f508:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f50e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f516:	2b01      	cmp	r3, #1
 800f518:	d101      	bne.n	800f51e <HAL_DMA_Start_IT+0x26>
 800f51a:	2302      	movs	r3, #2
 800f51c:	e040      	b.n	800f5a0 <HAL_DMA_Start_IT+0xa8>
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2201      	movs	r2, #1
 800f522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d12f      	bne.n	800f592 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2202      	movs	r2, #2
 800f536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2200      	movs	r2, #0
 800f53e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	68b9      	ldr	r1, [r7, #8]
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f000 f9da 	bl	800f900 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f550:	223f      	movs	r2, #63	; 0x3f
 800f552:	409a      	lsls	r2, r3
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f042 0216 	orr.w	r2, r2, #22
 800f566:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d007      	beq.n	800f580 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f042 0208 	orr.w	r2, r2, #8
 800f57e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f042 0201 	orr.w	r2, r2, #1
 800f58e:	601a      	str	r2, [r3, #0]
 800f590:	e005      	b.n	800f59e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2200      	movs	r2, #0
 800f596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f59a:	2302      	movs	r3, #2
 800f59c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3718      	adds	r7, #24
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	2b02      	cmp	r3, #2
 800f5ba:	d004      	beq.n	800f5c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2280      	movs	r2, #128	; 0x80
 800f5c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	e00c      	b.n	800f5e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2205      	movs	r2, #5
 800f5ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f022 0201 	bic.w	r2, r2, #1
 800f5dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b086      	sub	sp, #24
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f5f8:	4b8e      	ldr	r3, [pc, #568]	; (800f834 <HAL_DMA_IRQHandler+0x248>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a8e      	ldr	r2, [pc, #568]	; (800f838 <HAL_DMA_IRQHandler+0x24c>)
 800f5fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f602:	0a9b      	lsrs	r3, r3, #10
 800f604:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f60a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f616:	2208      	movs	r2, #8
 800f618:	409a      	lsls	r2, r3
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	4013      	ands	r3, r2
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d01a      	beq.n	800f658 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f003 0304 	and.w	r3, r3, #4
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d013      	beq.n	800f658 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	681a      	ldr	r2, [r3, #0]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f022 0204 	bic.w	r2, r2, #4
 800f63e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f644:	2208      	movs	r2, #8
 800f646:	409a      	lsls	r2, r3
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f650:	f043 0201 	orr.w	r2, r3, #1
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f65c:	2201      	movs	r2, #1
 800f65e:	409a      	lsls	r2, r3
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	4013      	ands	r3, r2
 800f664:	2b00      	cmp	r3, #0
 800f666:	d012      	beq.n	800f68e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	695b      	ldr	r3, [r3, #20]
 800f66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f672:	2b00      	cmp	r3, #0
 800f674:	d00b      	beq.n	800f68e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f67a:	2201      	movs	r2, #1
 800f67c:	409a      	lsls	r2, r3
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f686:	f043 0202 	orr.w	r2, r3, #2
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f692:	2204      	movs	r2, #4
 800f694:	409a      	lsls	r2, r3
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	4013      	ands	r3, r2
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d012      	beq.n	800f6c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f003 0302 	and.w	r3, r3, #2
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d00b      	beq.n	800f6c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6b0:	2204      	movs	r2, #4
 800f6b2:	409a      	lsls	r2, r3
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6bc:	f043 0204 	orr.w	r2, r3, #4
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6c8:	2210      	movs	r2, #16
 800f6ca:	409a      	lsls	r2, r3
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	4013      	ands	r3, r2
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d043      	beq.n	800f75c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f003 0308 	and.w	r3, r3, #8
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d03c      	beq.n	800f75c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6e6:	2210      	movs	r2, #16
 800f6e8:	409a      	lsls	r2, r3
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d018      	beq.n	800f72e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f706:	2b00      	cmp	r3, #0
 800f708:	d108      	bne.n	800f71c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d024      	beq.n	800f75c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	4798      	blx	r3
 800f71a:	e01f      	b.n	800f75c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f720:	2b00      	cmp	r3, #0
 800f722:	d01b      	beq.n	800f75c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	4798      	blx	r3
 800f72c:	e016      	b.n	800f75c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d107      	bne.n	800f74c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f022 0208 	bic.w	r2, r2, #8
 800f74a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f750:	2b00      	cmp	r3, #0
 800f752:	d003      	beq.n	800f75c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f760:	2220      	movs	r2, #32
 800f762:	409a      	lsls	r2, r3
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	4013      	ands	r3, r2
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 808f 	beq.w	800f88c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f003 0310 	and.w	r3, r3, #16
 800f778:	2b00      	cmp	r3, #0
 800f77a:	f000 8087 	beq.w	800f88c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f782:	2220      	movs	r2, #32
 800f784:	409a      	lsls	r2, r3
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f790:	b2db      	uxtb	r3, r3
 800f792:	2b05      	cmp	r3, #5
 800f794:	d136      	bne.n	800f804 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f022 0216 	bic.w	r2, r2, #22
 800f7a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	695a      	ldr	r2, [r3, #20]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f7b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d103      	bne.n	800f7c6 <HAL_DMA_IRQHandler+0x1da>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d007      	beq.n	800f7d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f022 0208 	bic.w	r2, r2, #8
 800f7d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7da:	223f      	movs	r2, #63	; 0x3f
 800f7dc:	409a      	lsls	r2, r3
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d07e      	beq.n	800f8f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	4798      	blx	r3
        }
        return;
 800f802:	e079      	b.n	800f8f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d01d      	beq.n	800f84e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d10d      	bne.n	800f83c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f824:	2b00      	cmp	r3, #0
 800f826:	d031      	beq.n	800f88c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	4798      	blx	r3
 800f830:	e02c      	b.n	800f88c <HAL_DMA_IRQHandler+0x2a0>
 800f832:	bf00      	nop
 800f834:	20000014 	.word	0x20000014
 800f838:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f840:	2b00      	cmp	r3, #0
 800f842:	d023      	beq.n	800f88c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	4798      	blx	r3
 800f84c:	e01e      	b.n	800f88c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d10f      	bne.n	800f87c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f022 0210 	bic.w	r2, r2, #16
 800f86a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2201      	movs	r2, #1
 800f878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f880:	2b00      	cmp	r3, #0
 800f882:	d003      	beq.n	800f88c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f890:	2b00      	cmp	r3, #0
 800f892:	d032      	beq.n	800f8fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f898:	f003 0301 	and.w	r3, r3, #1
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d022      	beq.n	800f8e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2205      	movs	r2, #5
 800f8a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f022 0201 	bic.w	r2, r2, #1
 800f8b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	60bb      	str	r3, [r7, #8]
 800f8be:	697a      	ldr	r2, [r7, #20]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d307      	bcc.n	800f8d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f003 0301 	and.w	r3, r3, #1
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1f2      	bne.n	800f8b8 <HAL_DMA_IRQHandler+0x2cc>
 800f8d2:	e000      	b.n	800f8d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800f8d4:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d005      	beq.n	800f8fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	4798      	blx	r3
 800f8f6:	e000      	b.n	800f8fa <HAL_DMA_IRQHandler+0x30e>
        return;
 800f8f8:	bf00      	nop
    }
  }
}
 800f8fa:	3718      	adds	r7, #24
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f900:	b480      	push	{r7}
 800f902:	b085      	sub	sp, #20
 800f904:	af00      	add	r7, sp, #0
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	607a      	str	r2, [r7, #4]
 800f90c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f91c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	683a      	ldr	r2, [r7, #0]
 800f924:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	689b      	ldr	r3, [r3, #8]
 800f92a:	2b40      	cmp	r3, #64	; 0x40
 800f92c:	d108      	bne.n	800f940 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	68ba      	ldr	r2, [r7, #8]
 800f93c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f93e:	e007      	b.n	800f950 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	68ba      	ldr	r2, [r7, #8]
 800f946:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	60da      	str	r2, [r3, #12]
}
 800f950:	bf00      	nop
 800f952:	3714      	adds	r7, #20
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b085      	sub	sp, #20
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	3b10      	subs	r3, #16
 800f96c:	4a14      	ldr	r2, [pc, #80]	; (800f9c0 <DMA_CalcBaseAndBitshift+0x64>)
 800f96e:	fba2 2303 	umull	r2, r3, r2, r3
 800f972:	091b      	lsrs	r3, r3, #4
 800f974:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f976:	4a13      	ldr	r2, [pc, #76]	; (800f9c4 <DMA_CalcBaseAndBitshift+0x68>)
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	4413      	add	r3, r2
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	461a      	mov	r2, r3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2b03      	cmp	r3, #3
 800f988:	d909      	bls.n	800f99e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f992:	f023 0303 	bic.w	r3, r3, #3
 800f996:	1d1a      	adds	r2, r3, #4
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	659a      	str	r2, [r3, #88]	; 0x58
 800f99c:	e007      	b.n	800f9ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f9a6:	f023 0303 	bic.w	r3, r3, #3
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	aaaaaaab 	.word	0xaaaaaaab
 800f9c4:	080195f0 	.word	0x080195f0

0800f9c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	699b      	ldr	r3, [r3, #24]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d11f      	bne.n	800fa22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	2b03      	cmp	r3, #3
 800f9e6:	d856      	bhi.n	800fa96 <DMA_CheckFifoParam+0xce>
 800f9e8:	a201      	add	r2, pc, #4	; (adr r2, 800f9f0 <DMA_CheckFifoParam+0x28>)
 800f9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ee:	bf00      	nop
 800f9f0:	0800fa01 	.word	0x0800fa01
 800f9f4:	0800fa13 	.word	0x0800fa13
 800f9f8:	0800fa01 	.word	0x0800fa01
 800f9fc:	0800fa97 	.word	0x0800fa97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d046      	beq.n	800fa9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fa10:	e043      	b.n	800fa9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fa1a:	d140      	bne.n	800fa9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fa20:	e03d      	b.n	800fa9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	699b      	ldr	r3, [r3, #24]
 800fa26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa2a:	d121      	bne.n	800fa70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	2b03      	cmp	r3, #3
 800fa30:	d837      	bhi.n	800faa2 <DMA_CheckFifoParam+0xda>
 800fa32:	a201      	add	r2, pc, #4	; (adr r2, 800fa38 <DMA_CheckFifoParam+0x70>)
 800fa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa38:	0800fa49 	.word	0x0800fa49
 800fa3c:	0800fa4f 	.word	0x0800fa4f
 800fa40:	0800fa49 	.word	0x0800fa49
 800fa44:	0800fa61 	.word	0x0800fa61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	73fb      	strb	r3, [r7, #15]
      break;
 800fa4c:	e030      	b.n	800fab0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d025      	beq.n	800faa6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fa5e:	e022      	b.n	800faa6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fa68:	d11f      	bne.n	800faaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800fa6e:	e01c      	b.n	800faaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	2b02      	cmp	r3, #2
 800fa74:	d903      	bls.n	800fa7e <DMA_CheckFifoParam+0xb6>
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	2b03      	cmp	r3, #3
 800fa7a:	d003      	beq.n	800fa84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fa7c:	e018      	b.n	800fab0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	73fb      	strb	r3, [r7, #15]
      break;
 800fa82:	e015      	b.n	800fab0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d00e      	beq.n	800faae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800fa90:	2301      	movs	r3, #1
 800fa92:	73fb      	strb	r3, [r7, #15]
      break;
 800fa94:	e00b      	b.n	800faae <DMA_CheckFifoParam+0xe6>
      break;
 800fa96:	bf00      	nop
 800fa98:	e00a      	b.n	800fab0 <DMA_CheckFifoParam+0xe8>
      break;
 800fa9a:	bf00      	nop
 800fa9c:	e008      	b.n	800fab0 <DMA_CheckFifoParam+0xe8>
      break;
 800fa9e:	bf00      	nop
 800faa0:	e006      	b.n	800fab0 <DMA_CheckFifoParam+0xe8>
      break;
 800faa2:	bf00      	nop
 800faa4:	e004      	b.n	800fab0 <DMA_CheckFifoParam+0xe8>
      break;
 800faa6:	bf00      	nop
 800faa8:	e002      	b.n	800fab0 <DMA_CheckFifoParam+0xe8>
      break;   
 800faaa:	bf00      	nop
 800faac:	e000      	b.n	800fab0 <DMA_CheckFifoParam+0xe8>
      break;
 800faae:	bf00      	nop
    }
  } 
  
  return status; 
 800fab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3714      	adds	r7, #20
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr
 800fabe:	bf00      	nop

0800fac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b089      	sub	sp, #36	; 0x24
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800faca:	2300      	movs	r3, #0
 800facc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800face:	2300      	movs	r3, #0
 800fad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fad2:	2300      	movs	r3, #0
 800fad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fad6:	2300      	movs	r3, #0
 800fad8:	61fb      	str	r3, [r7, #28]
 800fada:	e16b      	b.n	800fdb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fadc:	2201      	movs	r2, #1
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	fa02 f303 	lsl.w	r3, r2, r3
 800fae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	697a      	ldr	r2, [r7, #20]
 800faec:	4013      	ands	r3, r2
 800faee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800faf0:	693a      	ldr	r2, [r7, #16]
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	f040 815a 	bne.w	800fdae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d00b      	beq.n	800fb1a <HAL_GPIO_Init+0x5a>
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	2b02      	cmp	r3, #2
 800fb08:	d007      	beq.n	800fb1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fb0e:	2b11      	cmp	r3, #17
 800fb10:	d003      	beq.n	800fb1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	2b12      	cmp	r3, #18
 800fb18:	d130      	bne.n	800fb7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	005b      	lsls	r3, r3, #1
 800fb24:	2203      	movs	r2, #3
 800fb26:	fa02 f303 	lsl.w	r3, r2, r3
 800fb2a:	43db      	mvns	r3, r3
 800fb2c:	69ba      	ldr	r2, [r7, #24]
 800fb2e:	4013      	ands	r3, r2
 800fb30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	68da      	ldr	r2, [r3, #12]
 800fb36:	69fb      	ldr	r3, [r7, #28]
 800fb38:	005b      	lsls	r3, r3, #1
 800fb3a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb3e:	69ba      	ldr	r2, [r7, #24]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	69ba      	ldr	r2, [r7, #24]
 800fb48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fb50:	2201      	movs	r2, #1
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	fa02 f303 	lsl.w	r3, r2, r3
 800fb58:	43db      	mvns	r3, r3
 800fb5a:	69ba      	ldr	r2, [r7, #24]
 800fb5c:	4013      	ands	r3, r2
 800fb5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	091b      	lsrs	r3, r3, #4
 800fb66:	f003 0201 	and.w	r2, r3, #1
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb70:	69ba      	ldr	r2, [r7, #24]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	69ba      	ldr	r2, [r7, #24]
 800fb7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fb82:	69fb      	ldr	r3, [r7, #28]
 800fb84:	005b      	lsls	r3, r3, #1
 800fb86:	2203      	movs	r2, #3
 800fb88:	fa02 f303 	lsl.w	r3, r2, r3
 800fb8c:	43db      	mvns	r3, r3
 800fb8e:	69ba      	ldr	r2, [r7, #24]
 800fb90:	4013      	ands	r3, r2
 800fb92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	689a      	ldr	r2, [r3, #8]
 800fb98:	69fb      	ldr	r3, [r7, #28]
 800fb9a:	005b      	lsls	r3, r3, #1
 800fb9c:	fa02 f303 	lsl.w	r3, r2, r3
 800fba0:	69ba      	ldr	r2, [r7, #24]
 800fba2:	4313      	orrs	r3, r2
 800fba4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	69ba      	ldr	r2, [r7, #24]
 800fbaa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	2b02      	cmp	r3, #2
 800fbb2:	d003      	beq.n	800fbbc <HAL_GPIO_Init+0xfc>
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	2b12      	cmp	r3, #18
 800fbba:	d123      	bne.n	800fc04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	08da      	lsrs	r2, r3, #3
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	3208      	adds	r2, #8
 800fbc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	f003 0307 	and.w	r3, r3, #7
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	220f      	movs	r2, #15
 800fbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800fbd8:	43db      	mvns	r3, r3
 800fbda:	69ba      	ldr	r2, [r7, #24]
 800fbdc:	4013      	ands	r3, r2
 800fbde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	691a      	ldr	r2, [r3, #16]
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	f003 0307 	and.w	r3, r3, #7
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	fa02 f303 	lsl.w	r3, r2, r3
 800fbf0:	69ba      	ldr	r2, [r7, #24]
 800fbf2:	4313      	orrs	r3, r2
 800fbf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	08da      	lsrs	r2, r3, #3
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	3208      	adds	r2, #8
 800fbfe:	69b9      	ldr	r1, [r7, #24]
 800fc00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fc0a:	69fb      	ldr	r3, [r7, #28]
 800fc0c:	005b      	lsls	r3, r3, #1
 800fc0e:	2203      	movs	r2, #3
 800fc10:	fa02 f303 	lsl.w	r3, r2, r3
 800fc14:	43db      	mvns	r3, r3
 800fc16:	69ba      	ldr	r2, [r7, #24]
 800fc18:	4013      	ands	r3, r2
 800fc1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	f003 0203 	and.w	r2, r3, #3
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	005b      	lsls	r3, r3, #1
 800fc28:	fa02 f303 	lsl.w	r3, r2, r3
 800fc2c:	69ba      	ldr	r2, [r7, #24]
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	69ba      	ldr	r2, [r7, #24]
 800fc36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f000 80b4 	beq.w	800fdae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fc46:	2300      	movs	r3, #0
 800fc48:	60fb      	str	r3, [r7, #12]
 800fc4a:	4b60      	ldr	r3, [pc, #384]	; (800fdcc <HAL_GPIO_Init+0x30c>)
 800fc4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc4e:	4a5f      	ldr	r2, [pc, #380]	; (800fdcc <HAL_GPIO_Init+0x30c>)
 800fc50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fc54:	6453      	str	r3, [r2, #68]	; 0x44
 800fc56:	4b5d      	ldr	r3, [pc, #372]	; (800fdcc <HAL_GPIO_Init+0x30c>)
 800fc58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc5e:	60fb      	str	r3, [r7, #12]
 800fc60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800fc62:	4a5b      	ldr	r2, [pc, #364]	; (800fdd0 <HAL_GPIO_Init+0x310>)
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	089b      	lsrs	r3, r3, #2
 800fc68:	3302      	adds	r3, #2
 800fc6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fc70:	69fb      	ldr	r3, [r7, #28]
 800fc72:	f003 0303 	and.w	r3, r3, #3
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	220f      	movs	r2, #15
 800fc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800fc7e:	43db      	mvns	r3, r3
 800fc80:	69ba      	ldr	r2, [r7, #24]
 800fc82:	4013      	ands	r3, r2
 800fc84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4a52      	ldr	r2, [pc, #328]	; (800fdd4 <HAL_GPIO_Init+0x314>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d02b      	beq.n	800fce6 <HAL_GPIO_Init+0x226>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4a51      	ldr	r2, [pc, #324]	; (800fdd8 <HAL_GPIO_Init+0x318>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d025      	beq.n	800fce2 <HAL_GPIO_Init+0x222>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4a50      	ldr	r2, [pc, #320]	; (800fddc <HAL_GPIO_Init+0x31c>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d01f      	beq.n	800fcde <HAL_GPIO_Init+0x21e>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4a4f      	ldr	r2, [pc, #316]	; (800fde0 <HAL_GPIO_Init+0x320>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d019      	beq.n	800fcda <HAL_GPIO_Init+0x21a>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	4a4e      	ldr	r2, [pc, #312]	; (800fde4 <HAL_GPIO_Init+0x324>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d013      	beq.n	800fcd6 <HAL_GPIO_Init+0x216>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4a4d      	ldr	r2, [pc, #308]	; (800fde8 <HAL_GPIO_Init+0x328>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d00d      	beq.n	800fcd2 <HAL_GPIO_Init+0x212>
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	4a4c      	ldr	r2, [pc, #304]	; (800fdec <HAL_GPIO_Init+0x32c>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d007      	beq.n	800fcce <HAL_GPIO_Init+0x20e>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	4a4b      	ldr	r2, [pc, #300]	; (800fdf0 <HAL_GPIO_Init+0x330>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d101      	bne.n	800fcca <HAL_GPIO_Init+0x20a>
 800fcc6:	2307      	movs	r3, #7
 800fcc8:	e00e      	b.n	800fce8 <HAL_GPIO_Init+0x228>
 800fcca:	2308      	movs	r3, #8
 800fccc:	e00c      	b.n	800fce8 <HAL_GPIO_Init+0x228>
 800fcce:	2306      	movs	r3, #6
 800fcd0:	e00a      	b.n	800fce8 <HAL_GPIO_Init+0x228>
 800fcd2:	2305      	movs	r3, #5
 800fcd4:	e008      	b.n	800fce8 <HAL_GPIO_Init+0x228>
 800fcd6:	2304      	movs	r3, #4
 800fcd8:	e006      	b.n	800fce8 <HAL_GPIO_Init+0x228>
 800fcda:	2303      	movs	r3, #3
 800fcdc:	e004      	b.n	800fce8 <HAL_GPIO_Init+0x228>
 800fcde:	2302      	movs	r3, #2
 800fce0:	e002      	b.n	800fce8 <HAL_GPIO_Init+0x228>
 800fce2:	2301      	movs	r3, #1
 800fce4:	e000      	b.n	800fce8 <HAL_GPIO_Init+0x228>
 800fce6:	2300      	movs	r3, #0
 800fce8:	69fa      	ldr	r2, [r7, #28]
 800fcea:	f002 0203 	and.w	r2, r2, #3
 800fcee:	0092      	lsls	r2, r2, #2
 800fcf0:	4093      	lsls	r3, r2
 800fcf2:	69ba      	ldr	r2, [r7, #24]
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fcf8:	4935      	ldr	r1, [pc, #212]	; (800fdd0 <HAL_GPIO_Init+0x310>)
 800fcfa:	69fb      	ldr	r3, [r7, #28]
 800fcfc:	089b      	lsrs	r3, r3, #2
 800fcfe:	3302      	adds	r3, #2
 800fd00:	69ba      	ldr	r2, [r7, #24]
 800fd02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fd06:	4b3b      	ldr	r3, [pc, #236]	; (800fdf4 <HAL_GPIO_Init+0x334>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	43db      	mvns	r3, r3
 800fd10:	69ba      	ldr	r2, [r7, #24]
 800fd12:	4013      	ands	r3, r2
 800fd14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d003      	beq.n	800fd2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800fd22:	69ba      	ldr	r2, [r7, #24]
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	4313      	orrs	r3, r2
 800fd28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800fd2a:	4a32      	ldr	r2, [pc, #200]	; (800fdf4 <HAL_GPIO_Init+0x334>)
 800fd2c:	69bb      	ldr	r3, [r7, #24]
 800fd2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800fd30:	4b30      	ldr	r3, [pc, #192]	; (800fdf4 <HAL_GPIO_Init+0x334>)
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	43db      	mvns	r3, r3
 800fd3a:	69ba      	ldr	r2, [r7, #24]
 800fd3c:	4013      	ands	r3, r2
 800fd3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d003      	beq.n	800fd54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800fd4c:	69ba      	ldr	r2, [r7, #24]
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	4313      	orrs	r3, r2
 800fd52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800fd54:	4a27      	ldr	r2, [pc, #156]	; (800fdf4 <HAL_GPIO_Init+0x334>)
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fd5a:	4b26      	ldr	r3, [pc, #152]	; (800fdf4 <HAL_GPIO_Init+0x334>)
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	43db      	mvns	r3, r3
 800fd64:	69ba      	ldr	r2, [r7, #24]
 800fd66:	4013      	ands	r3, r2
 800fd68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d003      	beq.n	800fd7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800fd76:	69ba      	ldr	r2, [r7, #24]
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	4313      	orrs	r3, r2
 800fd7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800fd7e:	4a1d      	ldr	r2, [pc, #116]	; (800fdf4 <HAL_GPIO_Init+0x334>)
 800fd80:	69bb      	ldr	r3, [r7, #24]
 800fd82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800fd84:	4b1b      	ldr	r3, [pc, #108]	; (800fdf4 <HAL_GPIO_Init+0x334>)
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	43db      	mvns	r3, r3
 800fd8e:	69ba      	ldr	r2, [r7, #24]
 800fd90:	4013      	ands	r3, r2
 800fd92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d003      	beq.n	800fda8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800fda0:	69ba      	ldr	r2, [r7, #24]
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	4313      	orrs	r3, r2
 800fda6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800fda8:	4a12      	ldr	r2, [pc, #72]	; (800fdf4 <HAL_GPIO_Init+0x334>)
 800fdaa:	69bb      	ldr	r3, [r7, #24]
 800fdac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fdae:	69fb      	ldr	r3, [r7, #28]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	61fb      	str	r3, [r7, #28]
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	2b0f      	cmp	r3, #15
 800fdb8:	f67f ae90 	bls.w	800fadc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800fdbc:	bf00      	nop
 800fdbe:	bf00      	nop
 800fdc0:	3724      	adds	r7, #36	; 0x24
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr
 800fdca:	bf00      	nop
 800fdcc:	40023800 	.word	0x40023800
 800fdd0:	40013800 	.word	0x40013800
 800fdd4:	40020000 	.word	0x40020000
 800fdd8:	40020400 	.word	0x40020400
 800fddc:	40020800 	.word	0x40020800
 800fde0:	40020c00 	.word	0x40020c00
 800fde4:	40021000 	.word	0x40021000
 800fde8:	40021400 	.word	0x40021400
 800fdec:	40021800 	.word	0x40021800
 800fdf0:	40021c00 	.word	0x40021c00
 800fdf4:	40013c00 	.word	0x40013c00

0800fdf8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b087      	sub	sp, #28
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fe02:	2300      	movs	r3, #0
 800fe04:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800fe06:	2300      	movs	r3, #0
 800fe08:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fe0e:	2300      	movs	r3, #0
 800fe10:	617b      	str	r3, [r7, #20]
 800fe12:	e0cd      	b.n	800ffb0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fe14:	2201      	movs	r2, #1
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	fa02 f303 	lsl.w	r3, r2, r3
 800fe1c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800fe1e:	683a      	ldr	r2, [r7, #0]
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	4013      	ands	r3, r2
 800fe24:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	f040 80bd 	bne.w	800ffaa <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800fe30:	4a65      	ldr	r2, [pc, #404]	; (800ffc8 <HAL_GPIO_DeInit+0x1d0>)
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	089b      	lsrs	r3, r3, #2
 800fe36:	3302      	adds	r3, #2
 800fe38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe3c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	f003 0303 	and.w	r3, r3, #3
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	220f      	movs	r2, #15
 800fe48:	fa02 f303 	lsl.w	r3, r2, r3
 800fe4c:	68ba      	ldr	r2, [r7, #8]
 800fe4e:	4013      	ands	r3, r2
 800fe50:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4a5d      	ldr	r2, [pc, #372]	; (800ffcc <HAL_GPIO_DeInit+0x1d4>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d02b      	beq.n	800feb2 <HAL_GPIO_DeInit+0xba>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4a5c      	ldr	r2, [pc, #368]	; (800ffd0 <HAL_GPIO_DeInit+0x1d8>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d025      	beq.n	800feae <HAL_GPIO_DeInit+0xb6>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4a5b      	ldr	r2, [pc, #364]	; (800ffd4 <HAL_GPIO_DeInit+0x1dc>)
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d01f      	beq.n	800feaa <HAL_GPIO_DeInit+0xb2>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4a5a      	ldr	r2, [pc, #360]	; (800ffd8 <HAL_GPIO_DeInit+0x1e0>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d019      	beq.n	800fea6 <HAL_GPIO_DeInit+0xae>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4a59      	ldr	r2, [pc, #356]	; (800ffdc <HAL_GPIO_DeInit+0x1e4>)
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d013      	beq.n	800fea2 <HAL_GPIO_DeInit+0xaa>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	4a58      	ldr	r2, [pc, #352]	; (800ffe0 <HAL_GPIO_DeInit+0x1e8>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d00d      	beq.n	800fe9e <HAL_GPIO_DeInit+0xa6>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	4a57      	ldr	r2, [pc, #348]	; (800ffe4 <HAL_GPIO_DeInit+0x1ec>)
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d007      	beq.n	800fe9a <HAL_GPIO_DeInit+0xa2>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4a56      	ldr	r2, [pc, #344]	; (800ffe8 <HAL_GPIO_DeInit+0x1f0>)
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d101      	bne.n	800fe96 <HAL_GPIO_DeInit+0x9e>
 800fe92:	2307      	movs	r3, #7
 800fe94:	e00e      	b.n	800feb4 <HAL_GPIO_DeInit+0xbc>
 800fe96:	2308      	movs	r3, #8
 800fe98:	e00c      	b.n	800feb4 <HAL_GPIO_DeInit+0xbc>
 800fe9a:	2306      	movs	r3, #6
 800fe9c:	e00a      	b.n	800feb4 <HAL_GPIO_DeInit+0xbc>
 800fe9e:	2305      	movs	r3, #5
 800fea0:	e008      	b.n	800feb4 <HAL_GPIO_DeInit+0xbc>
 800fea2:	2304      	movs	r3, #4
 800fea4:	e006      	b.n	800feb4 <HAL_GPIO_DeInit+0xbc>
 800fea6:	2303      	movs	r3, #3
 800fea8:	e004      	b.n	800feb4 <HAL_GPIO_DeInit+0xbc>
 800feaa:	2302      	movs	r3, #2
 800feac:	e002      	b.n	800feb4 <HAL_GPIO_DeInit+0xbc>
 800feae:	2301      	movs	r3, #1
 800feb0:	e000      	b.n	800feb4 <HAL_GPIO_DeInit+0xbc>
 800feb2:	2300      	movs	r3, #0
 800feb4:	697a      	ldr	r2, [r7, #20]
 800feb6:	f002 0203 	and.w	r2, r2, #3
 800feba:	0092      	lsls	r2, r2, #2
 800febc:	4093      	lsls	r3, r2
 800febe:	68ba      	ldr	r2, [r7, #8]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d132      	bne.n	800ff2a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800fec4:	4b49      	ldr	r3, [pc, #292]	; (800ffec <HAL_GPIO_DeInit+0x1f4>)
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	43db      	mvns	r3, r3
 800fecc:	4947      	ldr	r1, [pc, #284]	; (800ffec <HAL_GPIO_DeInit+0x1f4>)
 800fece:	4013      	ands	r3, r2
 800fed0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800fed2:	4b46      	ldr	r3, [pc, #280]	; (800ffec <HAL_GPIO_DeInit+0x1f4>)
 800fed4:	685a      	ldr	r2, [r3, #4]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	43db      	mvns	r3, r3
 800feda:	4944      	ldr	r1, [pc, #272]	; (800ffec <HAL_GPIO_DeInit+0x1f4>)
 800fedc:	4013      	ands	r3, r2
 800fede:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800fee0:	4b42      	ldr	r3, [pc, #264]	; (800ffec <HAL_GPIO_DeInit+0x1f4>)
 800fee2:	689a      	ldr	r2, [r3, #8]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	43db      	mvns	r3, r3
 800fee8:	4940      	ldr	r1, [pc, #256]	; (800ffec <HAL_GPIO_DeInit+0x1f4>)
 800feea:	4013      	ands	r3, r2
 800feec:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800feee:	4b3f      	ldr	r3, [pc, #252]	; (800ffec <HAL_GPIO_DeInit+0x1f4>)
 800fef0:	68da      	ldr	r2, [r3, #12]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	43db      	mvns	r3, r3
 800fef6:	493d      	ldr	r1, [pc, #244]	; (800ffec <HAL_GPIO_DeInit+0x1f4>)
 800fef8:	4013      	ands	r3, r2
 800fefa:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	f003 0303 	and.w	r3, r3, #3
 800ff02:	009b      	lsls	r3, r3, #2
 800ff04:	220f      	movs	r2, #15
 800ff06:	fa02 f303 	lsl.w	r3, r2, r3
 800ff0a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ff0c:	4a2e      	ldr	r2, [pc, #184]	; (800ffc8 <HAL_GPIO_DeInit+0x1d0>)
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	089b      	lsrs	r3, r3, #2
 800ff12:	3302      	adds	r3, #2
 800ff14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	43da      	mvns	r2, r3
 800ff1c:	482a      	ldr	r0, [pc, #168]	; (800ffc8 <HAL_GPIO_DeInit+0x1d0>)
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	089b      	lsrs	r3, r3, #2
 800ff22:	400a      	ands	r2, r1
 800ff24:	3302      	adds	r3, #2
 800ff26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681a      	ldr	r2, [r3, #0]
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	005b      	lsls	r3, r3, #1
 800ff32:	2103      	movs	r1, #3
 800ff34:	fa01 f303 	lsl.w	r3, r1, r3
 800ff38:	43db      	mvns	r3, r3
 800ff3a:	401a      	ands	r2, r3
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	08da      	lsrs	r2, r3, #3
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	3208      	adds	r2, #8
 800ff48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	f003 0307 	and.w	r3, r3, #7
 800ff52:	009b      	lsls	r3, r3, #2
 800ff54:	220f      	movs	r2, #15
 800ff56:	fa02 f303 	lsl.w	r3, r2, r3
 800ff5a:	43db      	mvns	r3, r3
 800ff5c:	697a      	ldr	r2, [r7, #20]
 800ff5e:	08d2      	lsrs	r2, r2, #3
 800ff60:	4019      	ands	r1, r3
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	3208      	adds	r2, #8
 800ff66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	68da      	ldr	r2, [r3, #12]
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	005b      	lsls	r3, r3, #1
 800ff72:	2103      	movs	r1, #3
 800ff74:	fa01 f303 	lsl.w	r3, r1, r3
 800ff78:	43db      	mvns	r3, r3
 800ff7a:	401a      	ands	r2, r3
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	685a      	ldr	r2, [r3, #4]
 800ff84:	2101      	movs	r1, #1
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	fa01 f303 	lsl.w	r3, r1, r3
 800ff8c:	43db      	mvns	r3, r3
 800ff8e:	401a      	ands	r2, r3
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	689a      	ldr	r2, [r3, #8]
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	005b      	lsls	r3, r3, #1
 800ff9c:	2103      	movs	r1, #3
 800ff9e:	fa01 f303 	lsl.w	r3, r1, r3
 800ffa2:	43db      	mvns	r3, r3
 800ffa4:	401a      	ands	r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	3301      	adds	r3, #1
 800ffae:	617b      	str	r3, [r7, #20]
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	2b0f      	cmp	r3, #15
 800ffb4:	f67f af2e 	bls.w	800fe14 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800ffb8:	bf00      	nop
 800ffba:	bf00      	nop
 800ffbc:	371c      	adds	r7, #28
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop
 800ffc8:	40013800 	.word	0x40013800
 800ffcc:	40020000 	.word	0x40020000
 800ffd0:	40020400 	.word	0x40020400
 800ffd4:	40020800 	.word	0x40020800
 800ffd8:	40020c00 	.word	0x40020c00
 800ffdc:	40021000 	.word	0x40021000
 800ffe0:	40021400 	.word	0x40021400
 800ffe4:	40021800 	.word	0x40021800
 800ffe8:	40021c00 	.word	0x40021c00
 800ffec:	40013c00 	.word	0x40013c00

0800fff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b085      	sub	sp, #20
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	460b      	mov	r3, r1
 800fffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	691a      	ldr	r2, [r3, #16]
 8010000:	887b      	ldrh	r3, [r7, #2]
 8010002:	4013      	ands	r3, r2
 8010004:	2b00      	cmp	r3, #0
 8010006:	d002      	beq.n	801000e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8010008:	2301      	movs	r3, #1
 801000a:	73fb      	strb	r3, [r7, #15]
 801000c:	e001      	b.n	8010012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801000e:	2300      	movs	r3, #0
 8010010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010012:	7bfb      	ldrb	r3, [r7, #15]
}
 8010014:	4618      	mov	r0, r3
 8010016:	3714      	adds	r7, #20
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010020:	b480      	push	{r7}
 8010022:	b083      	sub	sp, #12
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	460b      	mov	r3, r1
 801002a:	807b      	strh	r3, [r7, #2]
 801002c:	4613      	mov	r3, r2
 801002e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010030:	787b      	ldrb	r3, [r7, #1]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d003      	beq.n	801003e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010036:	887a      	ldrh	r2, [r7, #2]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801003c:	e003      	b.n	8010046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801003e:	887b      	ldrh	r3, [r7, #2]
 8010040:	041a      	lsls	r2, r3, #16
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	619a      	str	r2, [r3, #24]
}
 8010046:	bf00      	nop
 8010048:	370c      	adds	r7, #12
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr
	...

08010054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	4603      	mov	r3, r0
 801005c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801005e:	4b08      	ldr	r3, [pc, #32]	; (8010080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010060:	695a      	ldr	r2, [r3, #20]
 8010062:	88fb      	ldrh	r3, [r7, #6]
 8010064:	4013      	ands	r3, r2
 8010066:	2b00      	cmp	r3, #0
 8010068:	d006      	beq.n	8010078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801006a:	4a05      	ldr	r2, [pc, #20]	; (8010080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801006c:	88fb      	ldrh	r3, [r7, #6]
 801006e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010070:	88fb      	ldrh	r3, [r7, #6]
 8010072:	4618      	mov	r0, r3
 8010074:	f000 f806 	bl	8010084 <HAL_GPIO_EXTI_Callback>
  }
}
 8010078:	bf00      	nop
 801007a:	3708      	adds	r7, #8
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	40013c00 	.word	0x40013c00

08010084 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	4603      	mov	r3, r0
 801008c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801008e:	bf00      	nop
 8010090:	370c      	adds	r7, #12
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr
	...

0801009c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b086      	sub	sp, #24
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d101      	bne.n	80100ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80100aa:	2301      	movs	r3, #1
 80100ac:	e25e      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f003 0301 	and.w	r3, r3, #1
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d075      	beq.n	80101a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80100ba:	4b88      	ldr	r3, [pc, #544]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 80100bc:	689b      	ldr	r3, [r3, #8]
 80100be:	f003 030c 	and.w	r3, r3, #12
 80100c2:	2b04      	cmp	r3, #4
 80100c4:	d00c      	beq.n	80100e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80100c6:	4b85      	ldr	r3, [pc, #532]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 80100c8:	689b      	ldr	r3, [r3, #8]
 80100ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80100ce:	2b08      	cmp	r3, #8
 80100d0:	d112      	bne.n	80100f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80100d2:	4b82      	ldr	r3, [pc, #520]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80100da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80100de:	d10b      	bne.n	80100f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80100e0:	4b7e      	ldr	r3, [pc, #504]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d05b      	beq.n	80101a4 <HAL_RCC_OscConfig+0x108>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d157      	bne.n	80101a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80100f4:	2301      	movs	r3, #1
 80100f6:	e239      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010100:	d106      	bne.n	8010110 <HAL_RCC_OscConfig+0x74>
 8010102:	4b76      	ldr	r3, [pc, #472]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a75      	ldr	r2, [pc, #468]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 8010108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801010c:	6013      	str	r3, [r2, #0]
 801010e:	e01d      	b.n	801014c <HAL_RCC_OscConfig+0xb0>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010118:	d10c      	bne.n	8010134 <HAL_RCC_OscConfig+0x98>
 801011a:	4b70      	ldr	r3, [pc, #448]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	4a6f      	ldr	r2, [pc, #444]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 8010120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010124:	6013      	str	r3, [r2, #0]
 8010126:	4b6d      	ldr	r3, [pc, #436]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4a6c      	ldr	r2, [pc, #432]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 801012c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010130:	6013      	str	r3, [r2, #0]
 8010132:	e00b      	b.n	801014c <HAL_RCC_OscConfig+0xb0>
 8010134:	4b69      	ldr	r3, [pc, #420]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	4a68      	ldr	r2, [pc, #416]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 801013a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801013e:	6013      	str	r3, [r2, #0]
 8010140:	4b66      	ldr	r3, [pc, #408]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4a65      	ldr	r2, [pc, #404]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 8010146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801014a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d013      	beq.n	801017c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010154:	f7fe f8b8 	bl	800e2c8 <HAL_GetTick>
 8010158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801015a:	e008      	b.n	801016e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801015c:	f7fe f8b4 	bl	800e2c8 <HAL_GetTick>
 8010160:	4602      	mov	r2, r0
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	1ad3      	subs	r3, r2, r3
 8010166:	2b64      	cmp	r3, #100	; 0x64
 8010168:	d901      	bls.n	801016e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801016a:	2303      	movs	r3, #3
 801016c:	e1fe      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801016e:	4b5b      	ldr	r3, [pc, #364]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010176:	2b00      	cmp	r3, #0
 8010178:	d0f0      	beq.n	801015c <HAL_RCC_OscConfig+0xc0>
 801017a:	e014      	b.n	80101a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801017c:	f7fe f8a4 	bl	800e2c8 <HAL_GetTick>
 8010180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010182:	e008      	b.n	8010196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010184:	f7fe f8a0 	bl	800e2c8 <HAL_GetTick>
 8010188:	4602      	mov	r2, r0
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	1ad3      	subs	r3, r2, r3
 801018e:	2b64      	cmp	r3, #100	; 0x64
 8010190:	d901      	bls.n	8010196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010192:	2303      	movs	r3, #3
 8010194:	e1ea      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010196:	4b51      	ldr	r3, [pc, #324]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d1f0      	bne.n	8010184 <HAL_RCC_OscConfig+0xe8>
 80101a2:	e000      	b.n	80101a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80101a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f003 0302 	and.w	r3, r3, #2
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d063      	beq.n	801027a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80101b2:	4b4a      	ldr	r3, [pc, #296]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	f003 030c 	and.w	r3, r3, #12
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d00b      	beq.n	80101d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80101be:	4b47      	ldr	r3, [pc, #284]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 80101c0:	689b      	ldr	r3, [r3, #8]
 80101c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80101c6:	2b08      	cmp	r3, #8
 80101c8:	d11c      	bne.n	8010204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80101ca:	4b44      	ldr	r3, [pc, #272]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d116      	bne.n	8010204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80101d6:	4b41      	ldr	r3, [pc, #260]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f003 0302 	and.w	r3, r3, #2
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d005      	beq.n	80101ee <HAL_RCC_OscConfig+0x152>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d001      	beq.n	80101ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80101ea:	2301      	movs	r3, #1
 80101ec:	e1be      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80101ee:	4b3b      	ldr	r3, [pc, #236]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	691b      	ldr	r3, [r3, #16]
 80101fa:	00db      	lsls	r3, r3, #3
 80101fc:	4937      	ldr	r1, [pc, #220]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 80101fe:	4313      	orrs	r3, r2
 8010200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010202:	e03a      	b.n	801027a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d020      	beq.n	801024e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801020c:	4b34      	ldr	r3, [pc, #208]	; (80102e0 <HAL_RCC_OscConfig+0x244>)
 801020e:	2201      	movs	r2, #1
 8010210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010212:	f7fe f859 	bl	800e2c8 <HAL_GetTick>
 8010216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010218:	e008      	b.n	801022c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801021a:	f7fe f855 	bl	800e2c8 <HAL_GetTick>
 801021e:	4602      	mov	r2, r0
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	1ad3      	subs	r3, r2, r3
 8010224:	2b02      	cmp	r3, #2
 8010226:	d901      	bls.n	801022c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010228:	2303      	movs	r3, #3
 801022a:	e19f      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801022c:	4b2b      	ldr	r3, [pc, #172]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f003 0302 	and.w	r3, r3, #2
 8010234:	2b00      	cmp	r3, #0
 8010236:	d0f0      	beq.n	801021a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010238:	4b28      	ldr	r3, [pc, #160]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	691b      	ldr	r3, [r3, #16]
 8010244:	00db      	lsls	r3, r3, #3
 8010246:	4925      	ldr	r1, [pc, #148]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 8010248:	4313      	orrs	r3, r2
 801024a:	600b      	str	r3, [r1, #0]
 801024c:	e015      	b.n	801027a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801024e:	4b24      	ldr	r3, [pc, #144]	; (80102e0 <HAL_RCC_OscConfig+0x244>)
 8010250:	2200      	movs	r2, #0
 8010252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010254:	f7fe f838 	bl	800e2c8 <HAL_GetTick>
 8010258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801025a:	e008      	b.n	801026e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801025c:	f7fe f834 	bl	800e2c8 <HAL_GetTick>
 8010260:	4602      	mov	r2, r0
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	1ad3      	subs	r3, r2, r3
 8010266:	2b02      	cmp	r3, #2
 8010268:	d901      	bls.n	801026e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801026a:	2303      	movs	r3, #3
 801026c:	e17e      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801026e:	4b1b      	ldr	r3, [pc, #108]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f003 0302 	and.w	r3, r3, #2
 8010276:	2b00      	cmp	r3, #0
 8010278:	d1f0      	bne.n	801025c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f003 0308 	and.w	r3, r3, #8
 8010282:	2b00      	cmp	r3, #0
 8010284:	d036      	beq.n	80102f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	695b      	ldr	r3, [r3, #20]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d016      	beq.n	80102bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801028e:	4b15      	ldr	r3, [pc, #84]	; (80102e4 <HAL_RCC_OscConfig+0x248>)
 8010290:	2201      	movs	r2, #1
 8010292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010294:	f7fe f818 	bl	800e2c8 <HAL_GetTick>
 8010298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801029a:	e008      	b.n	80102ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801029c:	f7fe f814 	bl	800e2c8 <HAL_GetTick>
 80102a0:	4602      	mov	r2, r0
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	1ad3      	subs	r3, r2, r3
 80102a6:	2b02      	cmp	r3, #2
 80102a8:	d901      	bls.n	80102ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80102aa:	2303      	movs	r3, #3
 80102ac:	e15e      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80102ae:	4b0b      	ldr	r3, [pc, #44]	; (80102dc <HAL_RCC_OscConfig+0x240>)
 80102b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102b2:	f003 0302 	and.w	r3, r3, #2
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d0f0      	beq.n	801029c <HAL_RCC_OscConfig+0x200>
 80102ba:	e01b      	b.n	80102f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80102bc:	4b09      	ldr	r3, [pc, #36]	; (80102e4 <HAL_RCC_OscConfig+0x248>)
 80102be:	2200      	movs	r2, #0
 80102c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80102c2:	f7fe f801 	bl	800e2c8 <HAL_GetTick>
 80102c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80102c8:	e00e      	b.n	80102e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80102ca:	f7fd fffd 	bl	800e2c8 <HAL_GetTick>
 80102ce:	4602      	mov	r2, r0
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	1ad3      	subs	r3, r2, r3
 80102d4:	2b02      	cmp	r3, #2
 80102d6:	d907      	bls.n	80102e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80102d8:	2303      	movs	r3, #3
 80102da:	e147      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
 80102dc:	40023800 	.word	0x40023800
 80102e0:	42470000 	.word	0x42470000
 80102e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80102e8:	4b88      	ldr	r3, [pc, #544]	; (801050c <HAL_RCC_OscConfig+0x470>)
 80102ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102ec:	f003 0302 	and.w	r3, r3, #2
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d1ea      	bne.n	80102ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f003 0304 	and.w	r3, r3, #4
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f000 8097 	beq.w	8010430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010302:	2300      	movs	r3, #0
 8010304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010306:	4b81      	ldr	r3, [pc, #516]	; (801050c <HAL_RCC_OscConfig+0x470>)
 8010308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801030a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801030e:	2b00      	cmp	r3, #0
 8010310:	d10f      	bne.n	8010332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010312:	2300      	movs	r3, #0
 8010314:	60bb      	str	r3, [r7, #8]
 8010316:	4b7d      	ldr	r3, [pc, #500]	; (801050c <HAL_RCC_OscConfig+0x470>)
 8010318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801031a:	4a7c      	ldr	r2, [pc, #496]	; (801050c <HAL_RCC_OscConfig+0x470>)
 801031c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010320:	6413      	str	r3, [r2, #64]	; 0x40
 8010322:	4b7a      	ldr	r3, [pc, #488]	; (801050c <HAL_RCC_OscConfig+0x470>)
 8010324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801032a:	60bb      	str	r3, [r7, #8]
 801032c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801032e:	2301      	movs	r3, #1
 8010330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010332:	4b77      	ldr	r3, [pc, #476]	; (8010510 <HAL_RCC_OscConfig+0x474>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801033a:	2b00      	cmp	r3, #0
 801033c:	d118      	bne.n	8010370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801033e:	4b74      	ldr	r3, [pc, #464]	; (8010510 <HAL_RCC_OscConfig+0x474>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	4a73      	ldr	r2, [pc, #460]	; (8010510 <HAL_RCC_OscConfig+0x474>)
 8010344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801034a:	f7fd ffbd 	bl	800e2c8 <HAL_GetTick>
 801034e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010350:	e008      	b.n	8010364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010352:	f7fd ffb9 	bl	800e2c8 <HAL_GetTick>
 8010356:	4602      	mov	r2, r0
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	2b02      	cmp	r3, #2
 801035e:	d901      	bls.n	8010364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8010360:	2303      	movs	r3, #3
 8010362:	e103      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010364:	4b6a      	ldr	r3, [pc, #424]	; (8010510 <HAL_RCC_OscConfig+0x474>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801036c:	2b00      	cmp	r3, #0
 801036e:	d0f0      	beq.n	8010352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	689b      	ldr	r3, [r3, #8]
 8010374:	2b01      	cmp	r3, #1
 8010376:	d106      	bne.n	8010386 <HAL_RCC_OscConfig+0x2ea>
 8010378:	4b64      	ldr	r3, [pc, #400]	; (801050c <HAL_RCC_OscConfig+0x470>)
 801037a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801037c:	4a63      	ldr	r2, [pc, #396]	; (801050c <HAL_RCC_OscConfig+0x470>)
 801037e:	f043 0301 	orr.w	r3, r3, #1
 8010382:	6713      	str	r3, [r2, #112]	; 0x70
 8010384:	e01c      	b.n	80103c0 <HAL_RCC_OscConfig+0x324>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	2b05      	cmp	r3, #5
 801038c:	d10c      	bne.n	80103a8 <HAL_RCC_OscConfig+0x30c>
 801038e:	4b5f      	ldr	r3, [pc, #380]	; (801050c <HAL_RCC_OscConfig+0x470>)
 8010390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010392:	4a5e      	ldr	r2, [pc, #376]	; (801050c <HAL_RCC_OscConfig+0x470>)
 8010394:	f043 0304 	orr.w	r3, r3, #4
 8010398:	6713      	str	r3, [r2, #112]	; 0x70
 801039a:	4b5c      	ldr	r3, [pc, #368]	; (801050c <HAL_RCC_OscConfig+0x470>)
 801039c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801039e:	4a5b      	ldr	r2, [pc, #364]	; (801050c <HAL_RCC_OscConfig+0x470>)
 80103a0:	f043 0301 	orr.w	r3, r3, #1
 80103a4:	6713      	str	r3, [r2, #112]	; 0x70
 80103a6:	e00b      	b.n	80103c0 <HAL_RCC_OscConfig+0x324>
 80103a8:	4b58      	ldr	r3, [pc, #352]	; (801050c <HAL_RCC_OscConfig+0x470>)
 80103aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103ac:	4a57      	ldr	r2, [pc, #348]	; (801050c <HAL_RCC_OscConfig+0x470>)
 80103ae:	f023 0301 	bic.w	r3, r3, #1
 80103b2:	6713      	str	r3, [r2, #112]	; 0x70
 80103b4:	4b55      	ldr	r3, [pc, #340]	; (801050c <HAL_RCC_OscConfig+0x470>)
 80103b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103b8:	4a54      	ldr	r2, [pc, #336]	; (801050c <HAL_RCC_OscConfig+0x470>)
 80103ba:	f023 0304 	bic.w	r3, r3, #4
 80103be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d015      	beq.n	80103f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80103c8:	f7fd ff7e 	bl	800e2c8 <HAL_GetTick>
 80103cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80103ce:	e00a      	b.n	80103e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80103d0:	f7fd ff7a 	bl	800e2c8 <HAL_GetTick>
 80103d4:	4602      	mov	r2, r0
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	1ad3      	subs	r3, r2, r3
 80103da:	f241 3288 	movw	r2, #5000	; 0x1388
 80103de:	4293      	cmp	r3, r2
 80103e0:	d901      	bls.n	80103e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80103e2:	2303      	movs	r3, #3
 80103e4:	e0c2      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80103e6:	4b49      	ldr	r3, [pc, #292]	; (801050c <HAL_RCC_OscConfig+0x470>)
 80103e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103ea:	f003 0302 	and.w	r3, r3, #2
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d0ee      	beq.n	80103d0 <HAL_RCC_OscConfig+0x334>
 80103f2:	e014      	b.n	801041e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80103f4:	f7fd ff68 	bl	800e2c8 <HAL_GetTick>
 80103f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80103fa:	e00a      	b.n	8010412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80103fc:	f7fd ff64 	bl	800e2c8 <HAL_GetTick>
 8010400:	4602      	mov	r2, r0
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	1ad3      	subs	r3, r2, r3
 8010406:	f241 3288 	movw	r2, #5000	; 0x1388
 801040a:	4293      	cmp	r3, r2
 801040c:	d901      	bls.n	8010412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801040e:	2303      	movs	r3, #3
 8010410:	e0ac      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010412:	4b3e      	ldr	r3, [pc, #248]	; (801050c <HAL_RCC_OscConfig+0x470>)
 8010414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010416:	f003 0302 	and.w	r3, r3, #2
 801041a:	2b00      	cmp	r3, #0
 801041c:	d1ee      	bne.n	80103fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801041e:	7dfb      	ldrb	r3, [r7, #23]
 8010420:	2b01      	cmp	r3, #1
 8010422:	d105      	bne.n	8010430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010424:	4b39      	ldr	r3, [pc, #228]	; (801050c <HAL_RCC_OscConfig+0x470>)
 8010426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010428:	4a38      	ldr	r2, [pc, #224]	; (801050c <HAL_RCC_OscConfig+0x470>)
 801042a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801042e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	699b      	ldr	r3, [r3, #24]
 8010434:	2b00      	cmp	r3, #0
 8010436:	f000 8098 	beq.w	801056a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801043a:	4b34      	ldr	r3, [pc, #208]	; (801050c <HAL_RCC_OscConfig+0x470>)
 801043c:	689b      	ldr	r3, [r3, #8]
 801043e:	f003 030c 	and.w	r3, r3, #12
 8010442:	2b08      	cmp	r3, #8
 8010444:	d05c      	beq.n	8010500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	699b      	ldr	r3, [r3, #24]
 801044a:	2b02      	cmp	r3, #2
 801044c:	d141      	bne.n	80104d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801044e:	4b31      	ldr	r3, [pc, #196]	; (8010514 <HAL_RCC_OscConfig+0x478>)
 8010450:	2200      	movs	r2, #0
 8010452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010454:	f7fd ff38 	bl	800e2c8 <HAL_GetTick>
 8010458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801045a:	e008      	b.n	801046e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801045c:	f7fd ff34 	bl	800e2c8 <HAL_GetTick>
 8010460:	4602      	mov	r2, r0
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	1ad3      	subs	r3, r2, r3
 8010466:	2b02      	cmp	r3, #2
 8010468:	d901      	bls.n	801046e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801046a:	2303      	movs	r3, #3
 801046c:	e07e      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801046e:	4b27      	ldr	r3, [pc, #156]	; (801050c <HAL_RCC_OscConfig+0x470>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010476:	2b00      	cmp	r3, #0
 8010478:	d1f0      	bne.n	801045c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	69da      	ldr	r2, [r3, #28]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6a1b      	ldr	r3, [r3, #32]
 8010482:	431a      	orrs	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010488:	019b      	lsls	r3, r3, #6
 801048a:	431a      	orrs	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010490:	085b      	lsrs	r3, r3, #1
 8010492:	3b01      	subs	r3, #1
 8010494:	041b      	lsls	r3, r3, #16
 8010496:	431a      	orrs	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801049c:	061b      	lsls	r3, r3, #24
 801049e:	491b      	ldr	r1, [pc, #108]	; (801050c <HAL_RCC_OscConfig+0x470>)
 80104a0:	4313      	orrs	r3, r2
 80104a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80104a4:	4b1b      	ldr	r3, [pc, #108]	; (8010514 <HAL_RCC_OscConfig+0x478>)
 80104a6:	2201      	movs	r2, #1
 80104a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104aa:	f7fd ff0d 	bl	800e2c8 <HAL_GetTick>
 80104ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80104b0:	e008      	b.n	80104c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80104b2:	f7fd ff09 	bl	800e2c8 <HAL_GetTick>
 80104b6:	4602      	mov	r2, r0
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	2b02      	cmp	r3, #2
 80104be:	d901      	bls.n	80104c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80104c0:	2303      	movs	r3, #3
 80104c2:	e053      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80104c4:	4b11      	ldr	r3, [pc, #68]	; (801050c <HAL_RCC_OscConfig+0x470>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d0f0      	beq.n	80104b2 <HAL_RCC_OscConfig+0x416>
 80104d0:	e04b      	b.n	801056a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80104d2:	4b10      	ldr	r3, [pc, #64]	; (8010514 <HAL_RCC_OscConfig+0x478>)
 80104d4:	2200      	movs	r2, #0
 80104d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104d8:	f7fd fef6 	bl	800e2c8 <HAL_GetTick>
 80104dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80104de:	e008      	b.n	80104f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80104e0:	f7fd fef2 	bl	800e2c8 <HAL_GetTick>
 80104e4:	4602      	mov	r2, r0
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	1ad3      	subs	r3, r2, r3
 80104ea:	2b02      	cmp	r3, #2
 80104ec:	d901      	bls.n	80104f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80104ee:	2303      	movs	r3, #3
 80104f0:	e03c      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80104f2:	4b06      	ldr	r3, [pc, #24]	; (801050c <HAL_RCC_OscConfig+0x470>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d1f0      	bne.n	80104e0 <HAL_RCC_OscConfig+0x444>
 80104fe:	e034      	b.n	801056a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	699b      	ldr	r3, [r3, #24]
 8010504:	2b01      	cmp	r3, #1
 8010506:	d107      	bne.n	8010518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8010508:	2301      	movs	r3, #1
 801050a:	e02f      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
 801050c:	40023800 	.word	0x40023800
 8010510:	40007000 	.word	0x40007000
 8010514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010518:	4b16      	ldr	r3, [pc, #88]	; (8010574 <HAL_RCC_OscConfig+0x4d8>)
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	69db      	ldr	r3, [r3, #28]
 8010528:	429a      	cmp	r2, r3
 801052a:	d11c      	bne.n	8010566 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010536:	429a      	cmp	r2, r3
 8010538:	d115      	bne.n	8010566 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801053a:	68fa      	ldr	r2, [r7, #12]
 801053c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010540:	4013      	ands	r3, r2
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010546:	4293      	cmp	r3, r2
 8010548:	d10d      	bne.n	8010566 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010554:	429a      	cmp	r2, r3
 8010556:	d106      	bne.n	8010566 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010562:	429a      	cmp	r2, r3
 8010564:	d001      	beq.n	801056a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	e000      	b.n	801056c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 801056a:	2300      	movs	r3, #0
}
 801056c:	4618      	mov	r0, r3
 801056e:	3718      	adds	r7, #24
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}
 8010574:	40023800 	.word	0x40023800

08010578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d101      	bne.n	801058c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010588:	2301      	movs	r3, #1
 801058a:	e0cc      	b.n	8010726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801058c:	4b68      	ldr	r3, [pc, #416]	; (8010730 <HAL_RCC_ClockConfig+0x1b8>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f003 030f 	and.w	r3, r3, #15
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	429a      	cmp	r2, r3
 8010598:	d90c      	bls.n	80105b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801059a:	4b65      	ldr	r3, [pc, #404]	; (8010730 <HAL_RCC_ClockConfig+0x1b8>)
 801059c:	683a      	ldr	r2, [r7, #0]
 801059e:	b2d2      	uxtb	r2, r2
 80105a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80105a2:	4b63      	ldr	r3, [pc, #396]	; (8010730 <HAL_RCC_ClockConfig+0x1b8>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	f003 030f 	and.w	r3, r3, #15
 80105aa:	683a      	ldr	r2, [r7, #0]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d001      	beq.n	80105b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80105b0:	2301      	movs	r3, #1
 80105b2:	e0b8      	b.n	8010726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f003 0302 	and.w	r3, r3, #2
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d020      	beq.n	8010602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f003 0304 	and.w	r3, r3, #4
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d005      	beq.n	80105d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80105cc:	4b59      	ldr	r3, [pc, #356]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 80105ce:	689b      	ldr	r3, [r3, #8]
 80105d0:	4a58      	ldr	r2, [pc, #352]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 80105d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80105d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f003 0308 	and.w	r3, r3, #8
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d005      	beq.n	80105f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80105e4:	4b53      	ldr	r3, [pc, #332]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 80105e6:	689b      	ldr	r3, [r3, #8]
 80105e8:	4a52      	ldr	r2, [pc, #328]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 80105ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80105ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80105f0:	4b50      	ldr	r3, [pc, #320]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 80105f2:	689b      	ldr	r3, [r3, #8]
 80105f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	689b      	ldr	r3, [r3, #8]
 80105fc:	494d      	ldr	r1, [pc, #308]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 80105fe:	4313      	orrs	r3, r2
 8010600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f003 0301 	and.w	r3, r3, #1
 801060a:	2b00      	cmp	r3, #0
 801060c:	d044      	beq.n	8010698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	2b01      	cmp	r3, #1
 8010614:	d107      	bne.n	8010626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010616:	4b47      	ldr	r3, [pc, #284]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801061e:	2b00      	cmp	r3, #0
 8010620:	d119      	bne.n	8010656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010622:	2301      	movs	r3, #1
 8010624:	e07f      	b.n	8010726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	685b      	ldr	r3, [r3, #4]
 801062a:	2b02      	cmp	r3, #2
 801062c:	d003      	beq.n	8010636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010632:	2b03      	cmp	r3, #3
 8010634:	d107      	bne.n	8010646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010636:	4b3f      	ldr	r3, [pc, #252]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801063e:	2b00      	cmp	r3, #0
 8010640:	d109      	bne.n	8010656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010642:	2301      	movs	r3, #1
 8010644:	e06f      	b.n	8010726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010646:	4b3b      	ldr	r3, [pc, #236]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f003 0302 	and.w	r3, r3, #2
 801064e:	2b00      	cmp	r3, #0
 8010650:	d101      	bne.n	8010656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010652:	2301      	movs	r3, #1
 8010654:	e067      	b.n	8010726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010656:	4b37      	ldr	r3, [pc, #220]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 8010658:	689b      	ldr	r3, [r3, #8]
 801065a:	f023 0203 	bic.w	r2, r3, #3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	685b      	ldr	r3, [r3, #4]
 8010662:	4934      	ldr	r1, [pc, #208]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 8010664:	4313      	orrs	r3, r2
 8010666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010668:	f7fd fe2e 	bl	800e2c8 <HAL_GetTick>
 801066c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801066e:	e00a      	b.n	8010686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010670:	f7fd fe2a 	bl	800e2c8 <HAL_GetTick>
 8010674:	4602      	mov	r2, r0
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	f241 3288 	movw	r2, #5000	; 0x1388
 801067e:	4293      	cmp	r3, r2
 8010680:	d901      	bls.n	8010686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010682:	2303      	movs	r3, #3
 8010684:	e04f      	b.n	8010726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010686:	4b2b      	ldr	r3, [pc, #172]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 8010688:	689b      	ldr	r3, [r3, #8]
 801068a:	f003 020c 	and.w	r2, r3, #12
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	429a      	cmp	r2, r3
 8010696:	d1eb      	bne.n	8010670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010698:	4b25      	ldr	r3, [pc, #148]	; (8010730 <HAL_RCC_ClockConfig+0x1b8>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f003 030f 	and.w	r3, r3, #15
 80106a0:	683a      	ldr	r2, [r7, #0]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d20c      	bcs.n	80106c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80106a6:	4b22      	ldr	r3, [pc, #136]	; (8010730 <HAL_RCC_ClockConfig+0x1b8>)
 80106a8:	683a      	ldr	r2, [r7, #0]
 80106aa:	b2d2      	uxtb	r2, r2
 80106ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80106ae:	4b20      	ldr	r3, [pc, #128]	; (8010730 <HAL_RCC_ClockConfig+0x1b8>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f003 030f 	and.w	r3, r3, #15
 80106b6:	683a      	ldr	r2, [r7, #0]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d001      	beq.n	80106c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80106bc:	2301      	movs	r3, #1
 80106be:	e032      	b.n	8010726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	f003 0304 	and.w	r3, r3, #4
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d008      	beq.n	80106de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80106cc:	4b19      	ldr	r3, [pc, #100]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 80106ce:	689b      	ldr	r3, [r3, #8]
 80106d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	4916      	ldr	r1, [pc, #88]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 80106da:	4313      	orrs	r3, r2
 80106dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f003 0308 	and.w	r3, r3, #8
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d009      	beq.n	80106fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80106ea:	4b12      	ldr	r3, [pc, #72]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 80106ec:	689b      	ldr	r3, [r3, #8]
 80106ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	691b      	ldr	r3, [r3, #16]
 80106f6:	00db      	lsls	r3, r3, #3
 80106f8:	490e      	ldr	r1, [pc, #56]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 80106fa:	4313      	orrs	r3, r2
 80106fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80106fe:	f000 f821 	bl	8010744 <HAL_RCC_GetSysClockFreq>
 8010702:	4602      	mov	r2, r0
 8010704:	4b0b      	ldr	r3, [pc, #44]	; (8010734 <HAL_RCC_ClockConfig+0x1bc>)
 8010706:	689b      	ldr	r3, [r3, #8]
 8010708:	091b      	lsrs	r3, r3, #4
 801070a:	f003 030f 	and.w	r3, r3, #15
 801070e:	490a      	ldr	r1, [pc, #40]	; (8010738 <HAL_RCC_ClockConfig+0x1c0>)
 8010710:	5ccb      	ldrb	r3, [r1, r3]
 8010712:	fa22 f303 	lsr.w	r3, r2, r3
 8010716:	4a09      	ldr	r2, [pc, #36]	; (801073c <HAL_RCC_ClockConfig+0x1c4>)
 8010718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801071a:	4b09      	ldr	r3, [pc, #36]	; (8010740 <HAL_RCC_ClockConfig+0x1c8>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	4618      	mov	r0, r3
 8010720:	f7f1 fa72 	bl	8001c08 <HAL_InitTick>

  return HAL_OK;
 8010724:	2300      	movs	r3, #0
}
 8010726:	4618      	mov	r0, r3
 8010728:	3710      	adds	r7, #16
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	40023c00 	.word	0x40023c00
 8010734:	40023800 	.word	0x40023800
 8010738:	08018b4c 	.word	0x08018b4c
 801073c:	20000014 	.word	0x20000014
 8010740:	200005a8 	.word	0x200005a8

08010744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010748:	b090      	sub	sp, #64	; 0x40
 801074a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801074c:	2300      	movs	r3, #0
 801074e:	637b      	str	r3, [r7, #52]	; 0x34
 8010750:	2300      	movs	r3, #0
 8010752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010754:	2300      	movs	r3, #0
 8010756:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8010758:	2300      	movs	r3, #0
 801075a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801075c:	4b59      	ldr	r3, [pc, #356]	; (80108c4 <HAL_RCC_GetSysClockFreq+0x180>)
 801075e:	689b      	ldr	r3, [r3, #8]
 8010760:	f003 030c 	and.w	r3, r3, #12
 8010764:	2b08      	cmp	r3, #8
 8010766:	d00d      	beq.n	8010784 <HAL_RCC_GetSysClockFreq+0x40>
 8010768:	2b08      	cmp	r3, #8
 801076a:	f200 80a1 	bhi.w	80108b0 <HAL_RCC_GetSysClockFreq+0x16c>
 801076e:	2b00      	cmp	r3, #0
 8010770:	d002      	beq.n	8010778 <HAL_RCC_GetSysClockFreq+0x34>
 8010772:	2b04      	cmp	r3, #4
 8010774:	d003      	beq.n	801077e <HAL_RCC_GetSysClockFreq+0x3a>
 8010776:	e09b      	b.n	80108b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010778:	4b53      	ldr	r3, [pc, #332]	; (80108c8 <HAL_RCC_GetSysClockFreq+0x184>)
 801077a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 801077c:	e09b      	b.n	80108b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801077e:	4b53      	ldr	r3, [pc, #332]	; (80108cc <HAL_RCC_GetSysClockFreq+0x188>)
 8010780:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010782:	e098      	b.n	80108b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010784:	4b4f      	ldr	r3, [pc, #316]	; (80108c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801078c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801078e:	4b4d      	ldr	r3, [pc, #308]	; (80108c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010796:	2b00      	cmp	r3, #0
 8010798:	d028      	beq.n	80107ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801079a:	4b4a      	ldr	r3, [pc, #296]	; (80108c4 <HAL_RCC_GetSysClockFreq+0x180>)
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	099b      	lsrs	r3, r3, #6
 80107a0:	2200      	movs	r2, #0
 80107a2:	623b      	str	r3, [r7, #32]
 80107a4:	627a      	str	r2, [r7, #36]	; 0x24
 80107a6:	6a3b      	ldr	r3, [r7, #32]
 80107a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80107ac:	2100      	movs	r1, #0
 80107ae:	4b47      	ldr	r3, [pc, #284]	; (80108cc <HAL_RCC_GetSysClockFreq+0x188>)
 80107b0:	fb03 f201 	mul.w	r2, r3, r1
 80107b4:	2300      	movs	r3, #0
 80107b6:	fb00 f303 	mul.w	r3, r0, r3
 80107ba:	4413      	add	r3, r2
 80107bc:	4a43      	ldr	r2, [pc, #268]	; (80108cc <HAL_RCC_GetSysClockFreq+0x188>)
 80107be:	fba0 1202 	umull	r1, r2, r0, r2
 80107c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80107c4:	460a      	mov	r2, r1
 80107c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80107c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107ca:	4413      	add	r3, r2
 80107cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d0:	2200      	movs	r2, #0
 80107d2:	61bb      	str	r3, [r7, #24]
 80107d4:	61fa      	str	r2, [r7, #28]
 80107d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80107da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80107de:	f7f0 f9cd 	bl	8000b7c <__aeabi_uldivmod>
 80107e2:	4602      	mov	r2, r0
 80107e4:	460b      	mov	r3, r1
 80107e6:	4613      	mov	r3, r2
 80107e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107ea:	e053      	b.n	8010894 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80107ec:	4b35      	ldr	r3, [pc, #212]	; (80108c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	099b      	lsrs	r3, r3, #6
 80107f2:	2200      	movs	r2, #0
 80107f4:	613b      	str	r3, [r7, #16]
 80107f6:	617a      	str	r2, [r7, #20]
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80107fe:	f04f 0b00 	mov.w	fp, #0
 8010802:	4652      	mov	r2, sl
 8010804:	465b      	mov	r3, fp
 8010806:	f04f 0000 	mov.w	r0, #0
 801080a:	f04f 0100 	mov.w	r1, #0
 801080e:	0159      	lsls	r1, r3, #5
 8010810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010814:	0150      	lsls	r0, r2, #5
 8010816:	4602      	mov	r2, r0
 8010818:	460b      	mov	r3, r1
 801081a:	ebb2 080a 	subs.w	r8, r2, sl
 801081e:	eb63 090b 	sbc.w	r9, r3, fp
 8010822:	f04f 0200 	mov.w	r2, #0
 8010826:	f04f 0300 	mov.w	r3, #0
 801082a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801082e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8010832:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8010836:	ebb2 0408 	subs.w	r4, r2, r8
 801083a:	eb63 0509 	sbc.w	r5, r3, r9
 801083e:	f04f 0200 	mov.w	r2, #0
 8010842:	f04f 0300 	mov.w	r3, #0
 8010846:	00eb      	lsls	r3, r5, #3
 8010848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801084c:	00e2      	lsls	r2, r4, #3
 801084e:	4614      	mov	r4, r2
 8010850:	461d      	mov	r5, r3
 8010852:	eb14 030a 	adds.w	r3, r4, sl
 8010856:	603b      	str	r3, [r7, #0]
 8010858:	eb45 030b 	adc.w	r3, r5, fp
 801085c:	607b      	str	r3, [r7, #4]
 801085e:	f04f 0200 	mov.w	r2, #0
 8010862:	f04f 0300 	mov.w	r3, #0
 8010866:	e9d7 4500 	ldrd	r4, r5, [r7]
 801086a:	4629      	mov	r1, r5
 801086c:	028b      	lsls	r3, r1, #10
 801086e:	4621      	mov	r1, r4
 8010870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010874:	4621      	mov	r1, r4
 8010876:	028a      	lsls	r2, r1, #10
 8010878:	4610      	mov	r0, r2
 801087a:	4619      	mov	r1, r3
 801087c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801087e:	2200      	movs	r2, #0
 8010880:	60bb      	str	r3, [r7, #8]
 8010882:	60fa      	str	r2, [r7, #12]
 8010884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010888:	f7f0 f978 	bl	8000b7c <__aeabi_uldivmod>
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	4613      	mov	r3, r2
 8010892:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010894:	4b0b      	ldr	r3, [pc, #44]	; (80108c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8010896:	685b      	ldr	r3, [r3, #4]
 8010898:	0c1b      	lsrs	r3, r3, #16
 801089a:	f003 0303 	and.w	r3, r3, #3
 801089e:	3301      	adds	r3, #1
 80108a0:	005b      	lsls	r3, r3, #1
 80108a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80108a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80108ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80108ae:	e002      	b.n	80108b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80108b0:	4b05      	ldr	r3, [pc, #20]	; (80108c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80108b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80108b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80108b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3740      	adds	r7, #64	; 0x40
 80108bc:	46bd      	mov	sp, r7
 80108be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80108c2:	bf00      	nop
 80108c4:	40023800 	.word	0x40023800
 80108c8:	00f42400 	.word	0x00f42400
 80108cc:	017d7840 	.word	0x017d7840

080108d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80108d0:	b480      	push	{r7}
 80108d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80108d4:	4b03      	ldr	r3, [pc, #12]	; (80108e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80108d6:	681b      	ldr	r3, [r3, #0]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	20000014 	.word	0x20000014

080108e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80108ec:	f7ff fff0 	bl	80108d0 <HAL_RCC_GetHCLKFreq>
 80108f0:	4602      	mov	r2, r0
 80108f2:	4b05      	ldr	r3, [pc, #20]	; (8010908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80108f4:	689b      	ldr	r3, [r3, #8]
 80108f6:	0a9b      	lsrs	r3, r3, #10
 80108f8:	f003 0307 	and.w	r3, r3, #7
 80108fc:	4903      	ldr	r1, [pc, #12]	; (801090c <HAL_RCC_GetPCLK1Freq+0x24>)
 80108fe:	5ccb      	ldrb	r3, [r1, r3]
 8010900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010904:	4618      	mov	r0, r3
 8010906:	bd80      	pop	{r7, pc}
 8010908:	40023800 	.word	0x40023800
 801090c:	08018b5c 	.word	0x08018b5c

08010910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010914:	f7ff ffdc 	bl	80108d0 <HAL_RCC_GetHCLKFreq>
 8010918:	4602      	mov	r2, r0
 801091a:	4b05      	ldr	r3, [pc, #20]	; (8010930 <HAL_RCC_GetPCLK2Freq+0x20>)
 801091c:	689b      	ldr	r3, [r3, #8]
 801091e:	0b5b      	lsrs	r3, r3, #13
 8010920:	f003 0307 	and.w	r3, r3, #7
 8010924:	4903      	ldr	r1, [pc, #12]	; (8010934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010926:	5ccb      	ldrb	r3, [r1, r3]
 8010928:	fa22 f303 	lsr.w	r3, r2, r3
}
 801092c:	4618      	mov	r0, r3
 801092e:	bd80      	pop	{r7, pc}
 8010930:	40023800 	.word	0x40023800
 8010934:	08018b5c 	.word	0x08018b5c

08010938 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010938:	b480      	push	{r7}
 801093a:	b083      	sub	sp, #12
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	220f      	movs	r2, #15
 8010946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010948:	4b12      	ldr	r3, [pc, #72]	; (8010994 <HAL_RCC_GetClockConfig+0x5c>)
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	f003 0203 	and.w	r2, r3, #3
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010954:	4b0f      	ldr	r3, [pc, #60]	; (8010994 <HAL_RCC_GetClockConfig+0x5c>)
 8010956:	689b      	ldr	r3, [r3, #8]
 8010958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010960:	4b0c      	ldr	r3, [pc, #48]	; (8010994 <HAL_RCC_GetClockConfig+0x5c>)
 8010962:	689b      	ldr	r3, [r3, #8]
 8010964:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801096c:	4b09      	ldr	r3, [pc, #36]	; (8010994 <HAL_RCC_GetClockConfig+0x5c>)
 801096e:	689b      	ldr	r3, [r3, #8]
 8010970:	08db      	lsrs	r3, r3, #3
 8010972:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801097a:	4b07      	ldr	r3, [pc, #28]	; (8010998 <HAL_RCC_GetClockConfig+0x60>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f003 020f 	and.w	r2, r3, #15
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	601a      	str	r2, [r3, #0]
}
 8010986:	bf00      	nop
 8010988:	370c      	adds	r7, #12
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	40023800 	.word	0x40023800
 8010998:	40023c00 	.word	0x40023c00

0801099c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d101      	bne.n	80109ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80109aa:	2301      	movs	r3, #1
 80109ac:	e056      	b.n	8010a5c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2200      	movs	r2, #0
 80109b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80109ba:	b2db      	uxtb	r3, r3
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d106      	bne.n	80109ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f7f1 f857 	bl	8001a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2202      	movs	r2, #2
 80109d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	681a      	ldr	r2, [r3, #0]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80109e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	685a      	ldr	r2, [r3, #4]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	431a      	orrs	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	431a      	orrs	r2, r3
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	691b      	ldr	r3, [r3, #16]
 80109fa:	431a      	orrs	r2, r3
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	695b      	ldr	r3, [r3, #20]
 8010a00:	431a      	orrs	r2, r3
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	699b      	ldr	r3, [r3, #24]
 8010a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010a0a:	431a      	orrs	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	69db      	ldr	r3, [r3, #28]
 8010a10:	431a      	orrs	r2, r3
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6a1b      	ldr	r3, [r3, #32]
 8010a16:	ea42 0103 	orr.w	r1, r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	430a      	orrs	r2, r1
 8010a24:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	699b      	ldr	r3, [r3, #24]
 8010a2a:	0c1b      	lsrs	r3, r3, #16
 8010a2c:	f003 0104 	and.w	r1, r3, #4
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	430a      	orrs	r2, r1
 8010a3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	69da      	ldr	r2, [r3, #28]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010a4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2201      	movs	r2, #1
 8010a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010a5a:	2300      	movs	r3, #0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3708      	adds	r7, #8
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b08c      	sub	sp, #48	; 0x30
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
 8010a70:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010a72:	2301      	movs	r3, #1
 8010a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010a76:	2300      	movs	r3, #0
 8010a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010a82:	2b01      	cmp	r3, #1
 8010a84:	d101      	bne.n	8010a8a <HAL_SPI_TransmitReceive+0x26>
 8010a86:	2302      	movs	r3, #2
 8010a88:	e18a      	b.n	8010da0 <HAL_SPI_TransmitReceive+0x33c>
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010a92:	f7fd fc19 	bl	800e2c8 <HAL_GetTick>
 8010a96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	685b      	ldr	r3, [r3, #4]
 8010aa6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010aa8:	887b      	ldrh	r3, [r7, #2]
 8010aaa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d00f      	beq.n	8010ad4 <HAL_SPI_TransmitReceive+0x70>
 8010ab4:	69fb      	ldr	r3, [r7, #28]
 8010ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010aba:	d107      	bne.n	8010acc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	689b      	ldr	r3, [r3, #8]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d103      	bne.n	8010acc <HAL_SPI_TransmitReceive+0x68>
 8010ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010ac8:	2b04      	cmp	r3, #4
 8010aca:	d003      	beq.n	8010ad4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010acc:	2302      	movs	r3, #2
 8010ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010ad2:	e15b      	b.n	8010d8c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d005      	beq.n	8010ae6 <HAL_SPI_TransmitReceive+0x82>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d002      	beq.n	8010ae6 <HAL_SPI_TransmitReceive+0x82>
 8010ae0:	887b      	ldrh	r3, [r7, #2]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d103      	bne.n	8010aee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010aec:	e14e      	b.n	8010d8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010af4:	b2db      	uxtb	r3, r3
 8010af6:	2b04      	cmp	r3, #4
 8010af8:	d003      	beq.n	8010b02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2205      	movs	r2, #5
 8010afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	2200      	movs	r2, #0
 8010b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	887a      	ldrh	r2, [r7, #2]
 8010b12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	887a      	ldrh	r2, [r7, #2]
 8010b18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	68ba      	ldr	r2, [r7, #8]
 8010b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	887a      	ldrh	r2, [r7, #2]
 8010b24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	887a      	ldrh	r2, [r7, #2]
 8010b2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	2200      	movs	r2, #0
 8010b36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b42:	2b40      	cmp	r3, #64	; 0x40
 8010b44:	d007      	beq.n	8010b56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	681a      	ldr	r2, [r3, #0]
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010b54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	68db      	ldr	r3, [r3, #12]
 8010b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b5e:	d178      	bne.n	8010c52 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d002      	beq.n	8010b6e <HAL_SPI_TransmitReceive+0x10a>
 8010b68:	8b7b      	ldrh	r3, [r7, #26]
 8010b6a:	2b01      	cmp	r3, #1
 8010b6c:	d166      	bne.n	8010c3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b72:	881a      	ldrh	r2, [r3, #0]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b7e:	1c9a      	adds	r2, r3, #2
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	3b01      	subs	r3, #1
 8010b8c:	b29a      	uxth	r2, r3
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010b92:	e053      	b.n	8010c3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	f003 0302 	and.w	r3, r3, #2
 8010b9e:	2b02      	cmp	r3, #2
 8010ba0:	d11b      	bne.n	8010bda <HAL_SPI_TransmitReceive+0x176>
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d016      	beq.n	8010bda <HAL_SPI_TransmitReceive+0x176>
 8010bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bae:	2b01      	cmp	r3, #1
 8010bb0:	d113      	bne.n	8010bda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bb6:	881a      	ldrh	r2, [r3, #0]
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bc2:	1c9a      	adds	r2, r3, #2
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	3b01      	subs	r3, #1
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	689b      	ldr	r3, [r3, #8]
 8010be0:	f003 0301 	and.w	r3, r3, #1
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	d119      	bne.n	8010c1c <HAL_SPI_TransmitReceive+0x1b8>
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d014      	beq.n	8010c1c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	68da      	ldr	r2, [r3, #12]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bfc:	b292      	uxth	r2, r2
 8010bfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c04:	1c9a      	adds	r2, r3, #2
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	3b01      	subs	r3, #1
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010c18:	2301      	movs	r3, #1
 8010c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010c1c:	f7fd fb54 	bl	800e2c8 <HAL_GetTick>
 8010c20:	4602      	mov	r2, r0
 8010c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c24:	1ad3      	subs	r3, r2, r3
 8010c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d807      	bhi.n	8010c3c <HAL_SPI_TransmitReceive+0x1d8>
 8010c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c32:	d003      	beq.n	8010c3c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8010c34:	2303      	movs	r3, #3
 8010c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010c3a:	e0a7      	b.n	8010d8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d1a6      	bne.n	8010b94 <HAL_SPI_TransmitReceive+0x130>
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d1a1      	bne.n	8010b94 <HAL_SPI_TransmitReceive+0x130>
 8010c50:	e07c      	b.n	8010d4c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d002      	beq.n	8010c60 <HAL_SPI_TransmitReceive+0x1fc>
 8010c5a:	8b7b      	ldrh	r3, [r7, #26]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d16b      	bne.n	8010d38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	330c      	adds	r3, #12
 8010c6a:	7812      	ldrb	r2, [r2, #0]
 8010c6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c72:	1c5a      	adds	r2, r3, #1
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	3b01      	subs	r3, #1
 8010c80:	b29a      	uxth	r2, r3
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010c86:	e057      	b.n	8010d38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	689b      	ldr	r3, [r3, #8]
 8010c8e:	f003 0302 	and.w	r3, r3, #2
 8010c92:	2b02      	cmp	r3, #2
 8010c94:	d11c      	bne.n	8010cd0 <HAL_SPI_TransmitReceive+0x26c>
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c9a:	b29b      	uxth	r3, r3
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d017      	beq.n	8010cd0 <HAL_SPI_TransmitReceive+0x26c>
 8010ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca2:	2b01      	cmp	r3, #1
 8010ca4:	d114      	bne.n	8010cd0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	330c      	adds	r3, #12
 8010cb0:	7812      	ldrb	r2, [r2, #0]
 8010cb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cb8:	1c5a      	adds	r2, r3, #1
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	3b01      	subs	r3, #1
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	689b      	ldr	r3, [r3, #8]
 8010cd6:	f003 0301 	and.w	r3, r3, #1
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d119      	bne.n	8010d12 <HAL_SPI_TransmitReceive+0x2ae>
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d014      	beq.n	8010d12 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	68da      	ldr	r2, [r3, #12]
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cf2:	b2d2      	uxtb	r2, r2
 8010cf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cfa:	1c5a      	adds	r2, r3, #1
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010d04:	b29b      	uxth	r3, r3
 8010d06:	3b01      	subs	r3, #1
 8010d08:	b29a      	uxth	r2, r3
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010d0e:	2301      	movs	r3, #1
 8010d10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010d12:	f7fd fad9 	bl	800e2c8 <HAL_GetTick>
 8010d16:	4602      	mov	r2, r0
 8010d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1a:	1ad3      	subs	r3, r2, r3
 8010d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d803      	bhi.n	8010d2a <HAL_SPI_TransmitReceive+0x2c6>
 8010d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d28:	d102      	bne.n	8010d30 <HAL_SPI_TransmitReceive+0x2cc>
 8010d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d103      	bne.n	8010d38 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8010d30:	2303      	movs	r3, #3
 8010d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010d36:	e029      	b.n	8010d8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d1a2      	bne.n	8010c88 <HAL_SPI_TransmitReceive+0x224>
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d19d      	bne.n	8010c88 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d50:	68f8      	ldr	r0, [r7, #12]
 8010d52:	f000 f893 	bl	8010e7c <SPI_EndRxTxTransaction>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d006      	beq.n	8010d6a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2220      	movs	r2, #32
 8010d66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010d68:	e010      	b.n	8010d8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	689b      	ldr	r3, [r3, #8]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d10b      	bne.n	8010d8a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010d72:	2300      	movs	r3, #0
 8010d74:	617b      	str	r3, [r7, #20]
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	617b      	str	r3, [r7, #20]
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	689b      	ldr	r3, [r3, #8]
 8010d84:	617b      	str	r3, [r7, #20]
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	e000      	b.n	8010d8c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010d8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	2201      	movs	r2, #1
 8010d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2200      	movs	r2, #0
 8010d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010d9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3730      	adds	r7, #48	; 0x30
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	603b      	str	r3, [r7, #0]
 8010db4:	4613      	mov	r3, r2
 8010db6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010db8:	e04c      	b.n	8010e54 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dc0:	d048      	beq.n	8010e54 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010dc2:	f7fd fa81 	bl	800e2c8 <HAL_GetTick>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	69bb      	ldr	r3, [r7, #24]
 8010dca:	1ad3      	subs	r3, r2, r3
 8010dcc:	683a      	ldr	r2, [r7, #0]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d902      	bls.n	8010dd8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d13d      	bne.n	8010e54 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	685a      	ldr	r2, [r3, #4]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010de6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010df0:	d111      	bne.n	8010e16 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	689b      	ldr	r3, [r3, #8]
 8010df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010dfa:	d004      	beq.n	8010e06 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	689b      	ldr	r3, [r3, #8]
 8010e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e04:	d107      	bne.n	8010e16 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	681a      	ldr	r2, [r3, #0]
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e1e:	d10f      	bne.n	8010e40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	681a      	ldr	r2, [r3, #0]
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010e2e:	601a      	str	r2, [r3, #0]
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	681a      	ldr	r2, [r3, #0]
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010e3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	2201      	movs	r2, #1
 8010e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8010e50:	2303      	movs	r3, #3
 8010e52:	e00f      	b.n	8010e74 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	689a      	ldr	r2, [r3, #8]
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	4013      	ands	r3, r2
 8010e5e:	68ba      	ldr	r2, [r7, #8]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	bf0c      	ite	eq
 8010e64:	2301      	moveq	r3, #1
 8010e66:	2300      	movne	r3, #0
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	79fb      	ldrb	r3, [r7, #7]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d1a3      	bne.n	8010dba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8010e72:	2300      	movs	r3, #0
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3710      	adds	r7, #16
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b088      	sub	sp, #32
 8010e80:	af02      	add	r7, sp, #8
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010e88:	4b1b      	ldr	r3, [pc, #108]	; (8010ef8 <SPI_EndRxTxTransaction+0x7c>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a1b      	ldr	r2, [pc, #108]	; (8010efc <SPI_EndRxTxTransaction+0x80>)
 8010e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e92:	0d5b      	lsrs	r3, r3, #21
 8010e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010e98:	fb02 f303 	mul.w	r3, r2, r3
 8010e9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	685b      	ldr	r3, [r3, #4]
 8010ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010ea6:	d112      	bne.n	8010ece <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	9300      	str	r3, [sp, #0]
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	2180      	movs	r1, #128	; 0x80
 8010eb2:	68f8      	ldr	r0, [r7, #12]
 8010eb4:	f7ff ff78 	bl	8010da8 <SPI_WaitFlagStateUntilTimeout>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d016      	beq.n	8010eec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ec2:	f043 0220 	orr.w	r2, r3, #32
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010eca:	2303      	movs	r3, #3
 8010ecc:	e00f      	b.n	8010eee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d00a      	beq.n	8010eea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	3b01      	subs	r3, #1
 8010ed8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	689b      	ldr	r3, [r3, #8]
 8010ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ee4:	2b80      	cmp	r3, #128	; 0x80
 8010ee6:	d0f2      	beq.n	8010ece <SPI_EndRxTxTransaction+0x52>
 8010ee8:	e000      	b.n	8010eec <SPI_EndRxTxTransaction+0x70>
        break;
 8010eea:	bf00      	nop
  }

  return HAL_OK;
 8010eec:	2300      	movs	r3, #0
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3718      	adds	r7, #24
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	20000014 	.word	0x20000014
 8010efc:	165e9f81 	.word	0x165e9f81

08010f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d101      	bne.n	8010f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	e01d      	b.n	8010f4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d106      	bne.n	8010f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 f815 	bl	8010f56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2202      	movs	r2, #2
 8010f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	3304      	adds	r3, #4
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	4610      	mov	r0, r2
 8010f40:	f000 fc36 	bl	80117b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2201      	movs	r2, #1
 8010f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3708      	adds	r7, #8
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8010f56:	b480      	push	{r7}
 8010f58:	b083      	sub	sp, #12
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8010f5e:	bf00      	nop
 8010f60:	370c      	adds	r7, #12
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr

08010f6a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010f6a:	b480      	push	{r7}
 8010f6c:	b085      	sub	sp, #20
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	68da      	ldr	r2, [r3, #12]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f042 0201 	orr.w	r2, r2, #1
 8010f80:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	689b      	ldr	r3, [r3, #8]
 8010f88:	f003 0307 	and.w	r3, r3, #7
 8010f8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2b06      	cmp	r3, #6
 8010f92:	d007      	beq.n	8010fa4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f042 0201 	orr.w	r2, r2, #1
 8010fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010fa4:	2300      	movs	r3, #0
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3714      	adds	r7, #20
 8010faa:	46bd      	mov	sp, r7
 8010fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb0:	4770      	bx	lr

08010fb2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8010fb2:	b580      	push	{r7, lr}
 8010fb4:	b082      	sub	sp, #8
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d101      	bne.n	8010fc4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	e01d      	b.n	8011000 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d106      	bne.n	8010fde <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f7f1 f9c9 	bl	8002370 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2202      	movs	r2, #2
 8010fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	3304      	adds	r3, #4
 8010fee:	4619      	mov	r1, r3
 8010ff0:	4610      	mov	r0, r2
 8010ff2:	f000 fbdd 	bl	80117b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010ffe:	2300      	movs	r3, #0
}
 8011000:	4618      	mov	r0, r3
 8011002:	3708      	adds	r7, #8
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}

08011008 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d101      	bne.n	801101a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011016:	2301      	movs	r3, #1
 8011018:	e01d      	b.n	8011056 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011020:	b2db      	uxtb	r3, r3
 8011022:	2b00      	cmp	r3, #0
 8011024:	d106      	bne.n	8011034 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2200      	movs	r2, #0
 801102a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7f1 f93a 	bl	80022a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2202      	movs	r2, #2
 8011038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	3304      	adds	r3, #4
 8011044:	4619      	mov	r1, r3
 8011046:	4610      	mov	r0, r2
 8011048:	f000 fbb2 	bl	80117b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2201      	movs	r2, #1
 8011050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011054:	2300      	movs	r3, #0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
	...

08011060 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b084      	sub	sp, #16
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	2201      	movs	r2, #1
 8011070:	6839      	ldr	r1, [r7, #0]
 8011072:	4618      	mov	r0, r3
 8011074:	f000 fdec 	bl	8011c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4a15      	ldr	r2, [pc, #84]	; (80110d4 <HAL_TIM_PWM_Start+0x74>)
 801107e:	4293      	cmp	r3, r2
 8011080:	d004      	beq.n	801108c <HAL_TIM_PWM_Start+0x2c>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	4a14      	ldr	r2, [pc, #80]	; (80110d8 <HAL_TIM_PWM_Start+0x78>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d101      	bne.n	8011090 <HAL_TIM_PWM_Start+0x30>
 801108c:	2301      	movs	r3, #1
 801108e:	e000      	b.n	8011092 <HAL_TIM_PWM_Start+0x32>
 8011090:	2300      	movs	r3, #0
 8011092:	2b00      	cmp	r3, #0
 8011094:	d007      	beq.n	80110a6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80110a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	f003 0307 	and.w	r3, r3, #7
 80110b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	2b06      	cmp	r3, #6
 80110b6:	d007      	beq.n	80110c8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	f042 0201 	orr.w	r2, r2, #1
 80110c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80110c8:	2300      	movs	r3, #0
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3710      	adds	r7, #16
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	40010000 	.word	0x40010000
 80110d8:	40010400 	.word	0x40010400

080110dc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	2b0c      	cmp	r3, #12
 80110ea:	d841      	bhi.n	8011170 <HAL_TIM_PWM_Start_IT+0x94>
 80110ec:	a201      	add	r2, pc, #4	; (adr r2, 80110f4 <HAL_TIM_PWM_Start_IT+0x18>)
 80110ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f2:	bf00      	nop
 80110f4:	08011129 	.word	0x08011129
 80110f8:	08011171 	.word	0x08011171
 80110fc:	08011171 	.word	0x08011171
 8011100:	08011171 	.word	0x08011171
 8011104:	0801113b 	.word	0x0801113b
 8011108:	08011171 	.word	0x08011171
 801110c:	08011171 	.word	0x08011171
 8011110:	08011171 	.word	0x08011171
 8011114:	0801114d 	.word	0x0801114d
 8011118:	08011171 	.word	0x08011171
 801111c:	08011171 	.word	0x08011171
 8011120:	08011171 	.word	0x08011171
 8011124:	0801115f 	.word	0x0801115f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	68da      	ldr	r2, [r3, #12]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f042 0202 	orr.w	r2, r2, #2
 8011136:	60da      	str	r2, [r3, #12]
      break;
 8011138:	e01b      	b.n	8011172 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	68da      	ldr	r2, [r3, #12]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f042 0204 	orr.w	r2, r2, #4
 8011148:	60da      	str	r2, [r3, #12]
      break;
 801114a:	e012      	b.n	8011172 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	68da      	ldr	r2, [r3, #12]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	f042 0208 	orr.w	r2, r2, #8
 801115a:	60da      	str	r2, [r3, #12]
      break;
 801115c:	e009      	b.n	8011172 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	68da      	ldr	r2, [r3, #12]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f042 0210 	orr.w	r2, r2, #16
 801116c:	60da      	str	r2, [r3, #12]
      break;
 801116e:	e000      	b.n	8011172 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8011170:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	2201      	movs	r2, #1
 8011178:	6839      	ldr	r1, [r7, #0]
 801117a:	4618      	mov	r0, r3
 801117c:	f000 fd68 	bl	8011c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4a15      	ldr	r2, [pc, #84]	; (80111dc <HAL_TIM_PWM_Start_IT+0x100>)
 8011186:	4293      	cmp	r3, r2
 8011188:	d004      	beq.n	8011194 <HAL_TIM_PWM_Start_IT+0xb8>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	4a14      	ldr	r2, [pc, #80]	; (80111e0 <HAL_TIM_PWM_Start_IT+0x104>)
 8011190:	4293      	cmp	r3, r2
 8011192:	d101      	bne.n	8011198 <HAL_TIM_PWM_Start_IT+0xbc>
 8011194:	2301      	movs	r3, #1
 8011196:	e000      	b.n	801119a <HAL_TIM_PWM_Start_IT+0xbe>
 8011198:	2300      	movs	r3, #0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d007      	beq.n	80111ae <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80111ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	689b      	ldr	r3, [r3, #8]
 80111b4:	f003 0307 	and.w	r3, r3, #7
 80111b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	2b06      	cmp	r3, #6
 80111be:	d007      	beq.n	80111d0 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f042 0201 	orr.w	r2, r2, #1
 80111ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80111d0:	2300      	movs	r3, #0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3710      	adds	r7, #16
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	40010000 	.word	0x40010000
 80111e0:	40010400 	.word	0x40010400

080111e4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	2b0c      	cmp	r3, #12
 80111f2:	d841      	bhi.n	8011278 <HAL_TIM_PWM_Stop_IT+0x94>
 80111f4:	a201      	add	r2, pc, #4	; (adr r2, 80111fc <HAL_TIM_PWM_Stop_IT+0x18>)
 80111f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111fa:	bf00      	nop
 80111fc:	08011231 	.word	0x08011231
 8011200:	08011279 	.word	0x08011279
 8011204:	08011279 	.word	0x08011279
 8011208:	08011279 	.word	0x08011279
 801120c:	08011243 	.word	0x08011243
 8011210:	08011279 	.word	0x08011279
 8011214:	08011279 	.word	0x08011279
 8011218:	08011279 	.word	0x08011279
 801121c:	08011255 	.word	0x08011255
 8011220:	08011279 	.word	0x08011279
 8011224:	08011279 	.word	0x08011279
 8011228:	08011279 	.word	0x08011279
 801122c:	08011267 	.word	0x08011267
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	68da      	ldr	r2, [r3, #12]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f022 0202 	bic.w	r2, r2, #2
 801123e:	60da      	str	r2, [r3, #12]
      break;
 8011240:	e01b      	b.n	801127a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	68da      	ldr	r2, [r3, #12]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	f022 0204 	bic.w	r2, r2, #4
 8011250:	60da      	str	r2, [r3, #12]
      break;
 8011252:	e012      	b.n	801127a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	68da      	ldr	r2, [r3, #12]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f022 0208 	bic.w	r2, r2, #8
 8011262:	60da      	str	r2, [r3, #12]
      break;
 8011264:	e009      	b.n	801127a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	68da      	ldr	r2, [r3, #12]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f022 0210 	bic.w	r2, r2, #16
 8011274:	60da      	str	r2, [r3, #12]
      break;
 8011276:	e000      	b.n	801127a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8011278:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2200      	movs	r2, #0
 8011280:	6839      	ldr	r1, [r7, #0]
 8011282:	4618      	mov	r0, r3
 8011284:	f000 fce4 	bl	8011c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	4a20      	ldr	r2, [pc, #128]	; (8011310 <HAL_TIM_PWM_Stop_IT+0x12c>)
 801128e:	4293      	cmp	r3, r2
 8011290:	d004      	beq.n	801129c <HAL_TIM_PWM_Stop_IT+0xb8>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	4a1f      	ldr	r2, [pc, #124]	; (8011314 <HAL_TIM_PWM_Stop_IT+0x130>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d101      	bne.n	80112a0 <HAL_TIM_PWM_Stop_IT+0xbc>
 801129c:	2301      	movs	r3, #1
 801129e:	e000      	b.n	80112a2 <HAL_TIM_PWM_Stop_IT+0xbe>
 80112a0:	2300      	movs	r3, #0
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d017      	beq.n	80112d6 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	6a1a      	ldr	r2, [r3, #32]
 80112ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80112b0:	4013      	ands	r3, r2
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d10f      	bne.n	80112d6 <HAL_TIM_PWM_Stop_IT+0xf2>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	6a1a      	ldr	r2, [r3, #32]
 80112bc:	f240 4344 	movw	r3, #1092	; 0x444
 80112c0:	4013      	ands	r3, r2
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d107      	bne.n	80112d6 <HAL_TIM_PWM_Stop_IT+0xf2>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80112d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	6a1a      	ldr	r2, [r3, #32]
 80112dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80112e0:	4013      	ands	r3, r2
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d10f      	bne.n	8011306 <HAL_TIM_PWM_Stop_IT+0x122>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	6a1a      	ldr	r2, [r3, #32]
 80112ec:	f240 4344 	movw	r3, #1092	; 0x444
 80112f0:	4013      	ands	r3, r2
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d107      	bne.n	8011306 <HAL_TIM_PWM_Stop_IT+0x122>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	681a      	ldr	r2, [r3, #0]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	f022 0201 	bic.w	r2, r2, #1
 8011304:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	4618      	mov	r0, r3
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}
 8011310:	40010000 	.word	0x40010000
 8011314:	40010400 	.word	0x40010400

08011318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	691b      	ldr	r3, [r3, #16]
 8011326:	f003 0302 	and.w	r3, r3, #2
 801132a:	2b02      	cmp	r3, #2
 801132c:	d122      	bne.n	8011374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	f003 0302 	and.w	r3, r3, #2
 8011338:	2b02      	cmp	r3, #2
 801133a:	d11b      	bne.n	8011374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f06f 0202 	mvn.w	r2, #2
 8011344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2201      	movs	r2, #1
 801134a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	699b      	ldr	r3, [r3, #24]
 8011352:	f003 0303 	and.w	r3, r3, #3
 8011356:	2b00      	cmp	r3, #0
 8011358:	d003      	beq.n	8011362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801135a:	6878      	ldr	r0, [r7, #4]
 801135c:	f000 fa14 	bl	8011788 <HAL_TIM_IC_CaptureCallback>
 8011360:	e005      	b.n	801136e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fa06 	bl	8011774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f7fa fd21 	bl	800bdb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2200      	movs	r2, #0
 8011372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	691b      	ldr	r3, [r3, #16]
 801137a:	f003 0304 	and.w	r3, r3, #4
 801137e:	2b04      	cmp	r3, #4
 8011380:	d122      	bne.n	80113c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	f003 0304 	and.w	r3, r3, #4
 801138c:	2b04      	cmp	r3, #4
 801138e:	d11b      	bne.n	80113c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f06f 0204 	mvn.w	r2, #4
 8011398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2202      	movs	r2, #2
 801139e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	699b      	ldr	r3, [r3, #24]
 80113a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d003      	beq.n	80113b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f000 f9ea 	bl	8011788 <HAL_TIM_IC_CaptureCallback>
 80113b4:	e005      	b.n	80113c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 f9dc 	bl	8011774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f7fa fcf7 	bl	800bdb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2200      	movs	r2, #0
 80113c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	691b      	ldr	r3, [r3, #16]
 80113ce:	f003 0308 	and.w	r3, r3, #8
 80113d2:	2b08      	cmp	r3, #8
 80113d4:	d122      	bne.n	801141c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	f003 0308 	and.w	r3, r3, #8
 80113e0:	2b08      	cmp	r3, #8
 80113e2:	d11b      	bne.n	801141c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f06f 0208 	mvn.w	r2, #8
 80113ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2204      	movs	r2, #4
 80113f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	69db      	ldr	r3, [r3, #28]
 80113fa:	f003 0303 	and.w	r3, r3, #3
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d003      	beq.n	801140a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f000 f9c0 	bl	8011788 <HAL_TIM_IC_CaptureCallback>
 8011408:	e005      	b.n	8011416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f000 f9b2 	bl	8011774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f7fa fccd 	bl	800bdb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2200      	movs	r2, #0
 801141a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	691b      	ldr	r3, [r3, #16]
 8011422:	f003 0310 	and.w	r3, r3, #16
 8011426:	2b10      	cmp	r3, #16
 8011428:	d122      	bne.n	8011470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	f003 0310 	and.w	r3, r3, #16
 8011434:	2b10      	cmp	r3, #16
 8011436:	d11b      	bne.n	8011470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f06f 0210 	mvn.w	r2, #16
 8011440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2208      	movs	r2, #8
 8011446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	69db      	ldr	r3, [r3, #28]
 801144e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011452:	2b00      	cmp	r3, #0
 8011454:	d003      	beq.n	801145e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 f996 	bl	8011788 <HAL_TIM_IC_CaptureCallback>
 801145c:	e005      	b.n	801146a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f000 f988 	bl	8011774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7fa fca3 	bl	800bdb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	691b      	ldr	r3, [r3, #16]
 8011476:	f003 0301 	and.w	r3, r3, #1
 801147a:	2b01      	cmp	r3, #1
 801147c:	d10e      	bne.n	801149c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	68db      	ldr	r3, [r3, #12]
 8011484:	f003 0301 	and.w	r3, r3, #1
 8011488:	2b01      	cmp	r3, #1
 801148a:	d107      	bne.n	801149c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f06f 0201 	mvn.w	r2, #1
 8011494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f7f0 fa68 	bl	800196c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	691b      	ldr	r3, [r3, #16]
 80114a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114a6:	2b80      	cmp	r3, #128	; 0x80
 80114a8:	d10e      	bne.n	80114c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	68db      	ldr	r3, [r3, #12]
 80114b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114b4:	2b80      	cmp	r3, #128	; 0x80
 80114b6:	d107      	bne.n	80114c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80114c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f000 fcc2 	bl	8011e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	691b      	ldr	r3, [r3, #16]
 80114ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114d2:	2b40      	cmp	r3, #64	; 0x40
 80114d4:	d10e      	bne.n	80114f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	68db      	ldr	r3, [r3, #12]
 80114dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114e0:	2b40      	cmp	r3, #64	; 0x40
 80114e2:	d107      	bne.n	80114f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80114ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f000 f954 	bl	801179c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	691b      	ldr	r3, [r3, #16]
 80114fa:	f003 0320 	and.w	r3, r3, #32
 80114fe:	2b20      	cmp	r3, #32
 8011500:	d10e      	bne.n	8011520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	f003 0320 	and.w	r3, r3, #32
 801150c:	2b20      	cmp	r3, #32
 801150e:	d107      	bne.n	8011520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	f06f 0220 	mvn.w	r2, #32
 8011518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 fc8c 	bl	8011e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011520:	bf00      	nop
 8011522:	3708      	adds	r7, #8
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}

08011528 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801153a:	2b01      	cmp	r3, #1
 801153c:	d101      	bne.n	8011542 <HAL_TIM_OC_ConfigChannel+0x1a>
 801153e:	2302      	movs	r3, #2
 8011540:	e04e      	b.n	80115e0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2201      	movs	r2, #1
 8011546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2202      	movs	r2, #2
 801154e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2b0c      	cmp	r3, #12
 8011556:	d839      	bhi.n	80115cc <HAL_TIM_OC_ConfigChannel+0xa4>
 8011558:	a201      	add	r2, pc, #4	; (adr r2, 8011560 <HAL_TIM_OC_ConfigChannel+0x38>)
 801155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801155e:	bf00      	nop
 8011560:	08011595 	.word	0x08011595
 8011564:	080115cd 	.word	0x080115cd
 8011568:	080115cd 	.word	0x080115cd
 801156c:	080115cd 	.word	0x080115cd
 8011570:	080115a3 	.word	0x080115a3
 8011574:	080115cd 	.word	0x080115cd
 8011578:	080115cd 	.word	0x080115cd
 801157c:	080115cd 	.word	0x080115cd
 8011580:	080115b1 	.word	0x080115b1
 8011584:	080115cd 	.word	0x080115cd
 8011588:	080115cd 	.word	0x080115cd
 801158c:	080115cd 	.word	0x080115cd
 8011590:	080115bf 	.word	0x080115bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	68b9      	ldr	r1, [r7, #8]
 801159a:	4618      	mov	r0, r3
 801159c:	f000 f9a8 	bl	80118f0 <TIM_OC1_SetConfig>
      break;
 80115a0:	e015      	b.n	80115ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	68b9      	ldr	r1, [r7, #8]
 80115a8:	4618      	mov	r0, r3
 80115aa:	f000 fa11 	bl	80119d0 <TIM_OC2_SetConfig>
      break;
 80115ae:	e00e      	b.n	80115ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	68b9      	ldr	r1, [r7, #8]
 80115b6:	4618      	mov	r0, r3
 80115b8:	f000 fa80 	bl	8011abc <TIM_OC3_SetConfig>
      break;
 80115bc:	e007      	b.n	80115ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	68b9      	ldr	r1, [r7, #8]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f000 faed 	bl	8011ba4 <TIM_OC4_SetConfig>
      break;
 80115ca:	e000      	b.n	80115ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80115cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2201      	movs	r2, #1
 80115d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2200      	movs	r2, #0
 80115da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80115de:	2300      	movs	r3, #0
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	3710      	adds	r7, #16
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b084      	sub	sp, #16
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	60f8      	str	r0, [r7, #12]
 80115f0:	60b9      	str	r1, [r7, #8]
 80115f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d101      	bne.n	8011602 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80115fe:	2302      	movs	r3, #2
 8011600:	e0b4      	b.n	801176c <HAL_TIM_PWM_ConfigChannel+0x184>
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2201      	movs	r2, #1
 8011606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2202      	movs	r2, #2
 801160e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2b0c      	cmp	r3, #12
 8011616:	f200 809f 	bhi.w	8011758 <HAL_TIM_PWM_ConfigChannel+0x170>
 801161a:	a201      	add	r2, pc, #4	; (adr r2, 8011620 <HAL_TIM_PWM_ConfigChannel+0x38>)
 801161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011620:	08011655 	.word	0x08011655
 8011624:	08011759 	.word	0x08011759
 8011628:	08011759 	.word	0x08011759
 801162c:	08011759 	.word	0x08011759
 8011630:	08011695 	.word	0x08011695
 8011634:	08011759 	.word	0x08011759
 8011638:	08011759 	.word	0x08011759
 801163c:	08011759 	.word	0x08011759
 8011640:	080116d7 	.word	0x080116d7
 8011644:	08011759 	.word	0x08011759
 8011648:	08011759 	.word	0x08011759
 801164c:	08011759 	.word	0x08011759
 8011650:	08011717 	.word	0x08011717
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	68b9      	ldr	r1, [r7, #8]
 801165a:	4618      	mov	r0, r3
 801165c:	f000 f948 	bl	80118f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	699a      	ldr	r2, [r3, #24]
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	f042 0208 	orr.w	r2, r2, #8
 801166e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	699a      	ldr	r2, [r3, #24]
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	f022 0204 	bic.w	r2, r2, #4
 801167e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	6999      	ldr	r1, [r3, #24]
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	691a      	ldr	r2, [r3, #16]
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	430a      	orrs	r2, r1
 8011690:	619a      	str	r2, [r3, #24]
      break;
 8011692:	e062      	b.n	801175a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	68b9      	ldr	r1, [r7, #8]
 801169a:	4618      	mov	r0, r3
 801169c:	f000 f998 	bl	80119d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	699a      	ldr	r2, [r3, #24]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80116ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	699a      	ldr	r2, [r3, #24]
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80116be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	6999      	ldr	r1, [r3, #24]
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	691b      	ldr	r3, [r3, #16]
 80116ca:	021a      	lsls	r2, r3, #8
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	430a      	orrs	r2, r1
 80116d2:	619a      	str	r2, [r3, #24]
      break;
 80116d4:	e041      	b.n	801175a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	68b9      	ldr	r1, [r7, #8]
 80116dc:	4618      	mov	r0, r3
 80116de:	f000 f9ed 	bl	8011abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	69da      	ldr	r2, [r3, #28]
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	f042 0208 	orr.w	r2, r2, #8
 80116f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	69da      	ldr	r2, [r3, #28]
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	f022 0204 	bic.w	r2, r2, #4
 8011700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	69d9      	ldr	r1, [r3, #28]
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	691a      	ldr	r2, [r3, #16]
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	430a      	orrs	r2, r1
 8011712:	61da      	str	r2, [r3, #28]
      break;
 8011714:	e021      	b.n	801175a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	68b9      	ldr	r1, [r7, #8]
 801171c:	4618      	mov	r0, r3
 801171e:	f000 fa41 	bl	8011ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	69da      	ldr	r2, [r3, #28]
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	69da      	ldr	r2, [r3, #28]
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	69d9      	ldr	r1, [r3, #28]
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	691b      	ldr	r3, [r3, #16]
 801174c:	021a      	lsls	r2, r3, #8
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	430a      	orrs	r2, r1
 8011754:	61da      	str	r2, [r3, #28]
      break;
 8011756:	e000      	b.n	801175a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8011758:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	2201      	movs	r2, #1
 801175e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2200      	movs	r2, #0
 8011766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801176a:	2300      	movs	r3, #0
}
 801176c:	4618      	mov	r0, r3
 801176e:	3710      	adds	r7, #16
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}

08011774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011774:	b480      	push	{r7}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801177c:	bf00      	nop
 801177e:	370c      	adds	r7, #12
 8011780:	46bd      	mov	sp, r7
 8011782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011786:	4770      	bx	lr

08011788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011788:	b480      	push	{r7}
 801178a:	b083      	sub	sp, #12
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011790:	bf00      	nop
 8011792:	370c      	adds	r7, #12
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr

0801179c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801179c:	b480      	push	{r7}
 801179e:	b083      	sub	sp, #12
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80117a4:	bf00      	nop
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr

080117b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80117b0:	b480      	push	{r7}
 80117b2:	b085      	sub	sp, #20
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
 80117b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	4a40      	ldr	r2, [pc, #256]	; (80118c4 <TIM_Base_SetConfig+0x114>)
 80117c4:	4293      	cmp	r3, r2
 80117c6:	d013      	beq.n	80117f0 <TIM_Base_SetConfig+0x40>
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117ce:	d00f      	beq.n	80117f0 <TIM_Base_SetConfig+0x40>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	4a3d      	ldr	r2, [pc, #244]	; (80118c8 <TIM_Base_SetConfig+0x118>)
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d00b      	beq.n	80117f0 <TIM_Base_SetConfig+0x40>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	4a3c      	ldr	r2, [pc, #240]	; (80118cc <TIM_Base_SetConfig+0x11c>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d007      	beq.n	80117f0 <TIM_Base_SetConfig+0x40>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	4a3b      	ldr	r2, [pc, #236]	; (80118d0 <TIM_Base_SetConfig+0x120>)
 80117e4:	4293      	cmp	r3, r2
 80117e6:	d003      	beq.n	80117f0 <TIM_Base_SetConfig+0x40>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4a3a      	ldr	r2, [pc, #232]	; (80118d4 <TIM_Base_SetConfig+0x124>)
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d108      	bne.n	8011802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	68fa      	ldr	r2, [r7, #12]
 80117fe:	4313      	orrs	r3, r2
 8011800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	4a2f      	ldr	r2, [pc, #188]	; (80118c4 <TIM_Base_SetConfig+0x114>)
 8011806:	4293      	cmp	r3, r2
 8011808:	d02b      	beq.n	8011862 <TIM_Base_SetConfig+0xb2>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011810:	d027      	beq.n	8011862 <TIM_Base_SetConfig+0xb2>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	4a2c      	ldr	r2, [pc, #176]	; (80118c8 <TIM_Base_SetConfig+0x118>)
 8011816:	4293      	cmp	r3, r2
 8011818:	d023      	beq.n	8011862 <TIM_Base_SetConfig+0xb2>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4a2b      	ldr	r2, [pc, #172]	; (80118cc <TIM_Base_SetConfig+0x11c>)
 801181e:	4293      	cmp	r3, r2
 8011820:	d01f      	beq.n	8011862 <TIM_Base_SetConfig+0xb2>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4a2a      	ldr	r2, [pc, #168]	; (80118d0 <TIM_Base_SetConfig+0x120>)
 8011826:	4293      	cmp	r3, r2
 8011828:	d01b      	beq.n	8011862 <TIM_Base_SetConfig+0xb2>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	4a29      	ldr	r2, [pc, #164]	; (80118d4 <TIM_Base_SetConfig+0x124>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d017      	beq.n	8011862 <TIM_Base_SetConfig+0xb2>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	4a28      	ldr	r2, [pc, #160]	; (80118d8 <TIM_Base_SetConfig+0x128>)
 8011836:	4293      	cmp	r3, r2
 8011838:	d013      	beq.n	8011862 <TIM_Base_SetConfig+0xb2>
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	4a27      	ldr	r2, [pc, #156]	; (80118dc <TIM_Base_SetConfig+0x12c>)
 801183e:	4293      	cmp	r3, r2
 8011840:	d00f      	beq.n	8011862 <TIM_Base_SetConfig+0xb2>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	4a26      	ldr	r2, [pc, #152]	; (80118e0 <TIM_Base_SetConfig+0x130>)
 8011846:	4293      	cmp	r3, r2
 8011848:	d00b      	beq.n	8011862 <TIM_Base_SetConfig+0xb2>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	4a25      	ldr	r2, [pc, #148]	; (80118e4 <TIM_Base_SetConfig+0x134>)
 801184e:	4293      	cmp	r3, r2
 8011850:	d007      	beq.n	8011862 <TIM_Base_SetConfig+0xb2>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	4a24      	ldr	r2, [pc, #144]	; (80118e8 <TIM_Base_SetConfig+0x138>)
 8011856:	4293      	cmp	r3, r2
 8011858:	d003      	beq.n	8011862 <TIM_Base_SetConfig+0xb2>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	4a23      	ldr	r2, [pc, #140]	; (80118ec <TIM_Base_SetConfig+0x13c>)
 801185e:	4293      	cmp	r3, r2
 8011860:	d108      	bne.n	8011874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	68fa      	ldr	r2, [r7, #12]
 8011870:	4313      	orrs	r3, r2
 8011872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	695b      	ldr	r3, [r3, #20]
 801187e:	4313      	orrs	r3, r2
 8011880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	68fa      	ldr	r2, [r7, #12]
 8011886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	689a      	ldr	r2, [r3, #8]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	4a0a      	ldr	r2, [pc, #40]	; (80118c4 <TIM_Base_SetConfig+0x114>)
 801189c:	4293      	cmp	r3, r2
 801189e:	d003      	beq.n	80118a8 <TIM_Base_SetConfig+0xf8>
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	4a0c      	ldr	r2, [pc, #48]	; (80118d4 <TIM_Base_SetConfig+0x124>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d103      	bne.n	80118b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	691a      	ldr	r2, [r3, #16]
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2201      	movs	r2, #1
 80118b4:	615a      	str	r2, [r3, #20]
}
 80118b6:	bf00      	nop
 80118b8:	3714      	adds	r7, #20
 80118ba:	46bd      	mov	sp, r7
 80118bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c0:	4770      	bx	lr
 80118c2:	bf00      	nop
 80118c4:	40010000 	.word	0x40010000
 80118c8:	40000400 	.word	0x40000400
 80118cc:	40000800 	.word	0x40000800
 80118d0:	40000c00 	.word	0x40000c00
 80118d4:	40010400 	.word	0x40010400
 80118d8:	40014000 	.word	0x40014000
 80118dc:	40014400 	.word	0x40014400
 80118e0:	40014800 	.word	0x40014800
 80118e4:	40001800 	.word	0x40001800
 80118e8:	40001c00 	.word	0x40001c00
 80118ec:	40002000 	.word	0x40002000

080118f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b087      	sub	sp, #28
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6a1b      	ldr	r3, [r3, #32]
 80118fe:	f023 0201 	bic.w	r2, r3, #1
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a1b      	ldr	r3, [r3, #32]
 801190a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	699b      	ldr	r3, [r3, #24]
 8011916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801191e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	f023 0303 	bic.w	r3, r3, #3
 8011926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	68fa      	ldr	r2, [r7, #12]
 801192e:	4313      	orrs	r3, r2
 8011930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	f023 0302 	bic.w	r3, r3, #2
 8011938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	689b      	ldr	r3, [r3, #8]
 801193e:	697a      	ldr	r2, [r7, #20]
 8011940:	4313      	orrs	r3, r2
 8011942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	4a20      	ldr	r2, [pc, #128]	; (80119c8 <TIM_OC1_SetConfig+0xd8>)
 8011948:	4293      	cmp	r3, r2
 801194a:	d003      	beq.n	8011954 <TIM_OC1_SetConfig+0x64>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	4a1f      	ldr	r2, [pc, #124]	; (80119cc <TIM_OC1_SetConfig+0xdc>)
 8011950:	4293      	cmp	r3, r2
 8011952:	d10c      	bne.n	801196e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	f023 0308 	bic.w	r3, r3, #8
 801195a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	697a      	ldr	r2, [r7, #20]
 8011962:	4313      	orrs	r3, r2
 8011964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	f023 0304 	bic.w	r3, r3, #4
 801196c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	4a15      	ldr	r2, [pc, #84]	; (80119c8 <TIM_OC1_SetConfig+0xd8>)
 8011972:	4293      	cmp	r3, r2
 8011974:	d003      	beq.n	801197e <TIM_OC1_SetConfig+0x8e>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	4a14      	ldr	r2, [pc, #80]	; (80119cc <TIM_OC1_SetConfig+0xdc>)
 801197a:	4293      	cmp	r3, r2
 801197c:	d111      	bne.n	80119a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801198c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	695b      	ldr	r3, [r3, #20]
 8011992:	693a      	ldr	r2, [r7, #16]
 8011994:	4313      	orrs	r3, r2
 8011996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	699b      	ldr	r3, [r3, #24]
 801199c:	693a      	ldr	r2, [r7, #16]
 801199e:	4313      	orrs	r3, r2
 80119a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	693a      	ldr	r2, [r7, #16]
 80119a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	68fa      	ldr	r2, [r7, #12]
 80119ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	685a      	ldr	r2, [r3, #4]
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	697a      	ldr	r2, [r7, #20]
 80119ba:	621a      	str	r2, [r3, #32]
}
 80119bc:	bf00      	nop
 80119be:	371c      	adds	r7, #28
 80119c0:	46bd      	mov	sp, r7
 80119c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c6:	4770      	bx	lr
 80119c8:	40010000 	.word	0x40010000
 80119cc:	40010400 	.word	0x40010400

080119d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80119d0:	b480      	push	{r7}
 80119d2:	b087      	sub	sp, #28
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6a1b      	ldr	r3, [r3, #32]
 80119de:	f023 0210 	bic.w	r2, r3, #16
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6a1b      	ldr	r3, [r3, #32]
 80119ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	699b      	ldr	r3, [r3, #24]
 80119f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80119fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	021b      	lsls	r3, r3, #8
 8011a0e:	68fa      	ldr	r2, [r7, #12]
 8011a10:	4313      	orrs	r3, r2
 8011a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	f023 0320 	bic.w	r3, r3, #32
 8011a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	689b      	ldr	r3, [r3, #8]
 8011a20:	011b      	lsls	r3, r3, #4
 8011a22:	697a      	ldr	r2, [r7, #20]
 8011a24:	4313      	orrs	r3, r2
 8011a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	4a22      	ldr	r2, [pc, #136]	; (8011ab4 <TIM_OC2_SetConfig+0xe4>)
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	d003      	beq.n	8011a38 <TIM_OC2_SetConfig+0x68>
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	4a21      	ldr	r2, [pc, #132]	; (8011ab8 <TIM_OC2_SetConfig+0xe8>)
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d10d      	bne.n	8011a54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	68db      	ldr	r3, [r3, #12]
 8011a44:	011b      	lsls	r3, r3, #4
 8011a46:	697a      	ldr	r2, [r7, #20]
 8011a48:	4313      	orrs	r3, r2
 8011a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	4a17      	ldr	r2, [pc, #92]	; (8011ab4 <TIM_OC2_SetConfig+0xe4>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d003      	beq.n	8011a64 <TIM_OC2_SetConfig+0x94>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	4a16      	ldr	r2, [pc, #88]	; (8011ab8 <TIM_OC2_SetConfig+0xe8>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d113      	bne.n	8011a8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011a6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	695b      	ldr	r3, [r3, #20]
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	693a      	ldr	r2, [r7, #16]
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	699b      	ldr	r3, [r3, #24]
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	693a      	ldr	r2, [r7, #16]
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	693a      	ldr	r2, [r7, #16]
 8011a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	68fa      	ldr	r2, [r7, #12]
 8011a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	685a      	ldr	r2, [r3, #4]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	697a      	ldr	r2, [r7, #20]
 8011aa4:	621a      	str	r2, [r3, #32]
}
 8011aa6:	bf00      	nop
 8011aa8:	371c      	adds	r7, #28
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr
 8011ab2:	bf00      	nop
 8011ab4:	40010000 	.word	0x40010000
 8011ab8:	40010400 	.word	0x40010400

08011abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b087      	sub	sp, #28
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6a1b      	ldr	r3, [r3, #32]
 8011aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6a1b      	ldr	r3, [r3, #32]
 8011ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	69db      	ldr	r3, [r3, #28]
 8011ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	f023 0303 	bic.w	r3, r3, #3
 8011af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	68fa      	ldr	r2, [r7, #12]
 8011afa:	4313      	orrs	r3, r2
 8011afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	689b      	ldr	r3, [r3, #8]
 8011b0a:	021b      	lsls	r3, r3, #8
 8011b0c:	697a      	ldr	r2, [r7, #20]
 8011b0e:	4313      	orrs	r3, r2
 8011b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	4a21      	ldr	r2, [pc, #132]	; (8011b9c <TIM_OC3_SetConfig+0xe0>)
 8011b16:	4293      	cmp	r3, r2
 8011b18:	d003      	beq.n	8011b22 <TIM_OC3_SetConfig+0x66>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	4a20      	ldr	r2, [pc, #128]	; (8011ba0 <TIM_OC3_SetConfig+0xe4>)
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	d10d      	bne.n	8011b3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	68db      	ldr	r3, [r3, #12]
 8011b2e:	021b      	lsls	r3, r3, #8
 8011b30:	697a      	ldr	r2, [r7, #20]
 8011b32:	4313      	orrs	r3, r2
 8011b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	4a16      	ldr	r2, [pc, #88]	; (8011b9c <TIM_OC3_SetConfig+0xe0>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d003      	beq.n	8011b4e <TIM_OC3_SetConfig+0x92>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	4a15      	ldr	r2, [pc, #84]	; (8011ba0 <TIM_OC3_SetConfig+0xe4>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d113      	bne.n	8011b76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	695b      	ldr	r3, [r3, #20]
 8011b62:	011b      	lsls	r3, r3, #4
 8011b64:	693a      	ldr	r2, [r7, #16]
 8011b66:	4313      	orrs	r3, r2
 8011b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	699b      	ldr	r3, [r3, #24]
 8011b6e:	011b      	lsls	r3, r3, #4
 8011b70:	693a      	ldr	r2, [r7, #16]
 8011b72:	4313      	orrs	r3, r2
 8011b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	693a      	ldr	r2, [r7, #16]
 8011b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	68fa      	ldr	r2, [r7, #12]
 8011b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	685a      	ldr	r2, [r3, #4]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	697a      	ldr	r2, [r7, #20]
 8011b8e:	621a      	str	r2, [r3, #32]
}
 8011b90:	bf00      	nop
 8011b92:	371c      	adds	r7, #28
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	40010000 	.word	0x40010000
 8011ba0:	40010400 	.word	0x40010400

08011ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b087      	sub	sp, #28
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6a1b      	ldr	r3, [r3, #32]
 8011bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6a1b      	ldr	r3, [r3, #32]
 8011bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	69db      	ldr	r3, [r3, #28]
 8011bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	021b      	lsls	r3, r3, #8
 8011be2:	68fa      	ldr	r2, [r7, #12]
 8011be4:	4313      	orrs	r3, r2
 8011be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	689b      	ldr	r3, [r3, #8]
 8011bf4:	031b      	lsls	r3, r3, #12
 8011bf6:	693a      	ldr	r2, [r7, #16]
 8011bf8:	4313      	orrs	r3, r2
 8011bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	4a12      	ldr	r2, [pc, #72]	; (8011c48 <TIM_OC4_SetConfig+0xa4>)
 8011c00:	4293      	cmp	r3, r2
 8011c02:	d003      	beq.n	8011c0c <TIM_OC4_SetConfig+0x68>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	4a11      	ldr	r2, [pc, #68]	; (8011c4c <TIM_OC4_SetConfig+0xa8>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d109      	bne.n	8011c20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	695b      	ldr	r3, [r3, #20]
 8011c18:	019b      	lsls	r3, r3, #6
 8011c1a:	697a      	ldr	r2, [r7, #20]
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	697a      	ldr	r2, [r7, #20]
 8011c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	68fa      	ldr	r2, [r7, #12]
 8011c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	685a      	ldr	r2, [r3, #4]
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	693a      	ldr	r2, [r7, #16]
 8011c38:	621a      	str	r2, [r3, #32]
}
 8011c3a:	bf00      	nop
 8011c3c:	371c      	adds	r7, #28
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c44:	4770      	bx	lr
 8011c46:	bf00      	nop
 8011c48:	40010000 	.word	0x40010000
 8011c4c:	40010400 	.word	0x40010400

08011c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b087      	sub	sp, #28
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	60f8      	str	r0, [r7, #12]
 8011c58:	60b9      	str	r1, [r7, #8]
 8011c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	f003 031f 	and.w	r3, r3, #31
 8011c62:	2201      	movs	r2, #1
 8011c64:	fa02 f303 	lsl.w	r3, r2, r3
 8011c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	6a1a      	ldr	r2, [r3, #32]
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	43db      	mvns	r3, r3
 8011c72:	401a      	ands	r2, r3
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	6a1a      	ldr	r2, [r3, #32]
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	f003 031f 	and.w	r3, r3, #31
 8011c82:	6879      	ldr	r1, [r7, #4]
 8011c84:	fa01 f303 	lsl.w	r3, r1, r3
 8011c88:	431a      	orrs	r2, r3
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	621a      	str	r2, [r3, #32]
}
 8011c8e:	bf00      	nop
 8011c90:	371c      	adds	r7, #28
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr
	...

08011c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b085      	sub	sp, #20
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
 8011ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d101      	bne.n	8011cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011cb0:	2302      	movs	r3, #2
 8011cb2:	e05a      	b.n	8011d6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2201      	movs	r2, #1
 8011cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2202      	movs	r2, #2
 8011cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	68fa      	ldr	r2, [r7, #12]
 8011ce2:	4313      	orrs	r3, r2
 8011ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	68fa      	ldr	r2, [r7, #12]
 8011cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4a21      	ldr	r2, [pc, #132]	; (8011d78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d022      	beq.n	8011d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d00:	d01d      	beq.n	8011d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	4a1d      	ldr	r2, [pc, #116]	; (8011d7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011d08:	4293      	cmp	r3, r2
 8011d0a:	d018      	beq.n	8011d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	4a1b      	ldr	r2, [pc, #108]	; (8011d80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011d12:	4293      	cmp	r3, r2
 8011d14:	d013      	beq.n	8011d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	4a1a      	ldr	r2, [pc, #104]	; (8011d84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011d1c:	4293      	cmp	r3, r2
 8011d1e:	d00e      	beq.n	8011d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	4a18      	ldr	r2, [pc, #96]	; (8011d88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d009      	beq.n	8011d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	4a17      	ldr	r2, [pc, #92]	; (8011d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011d30:	4293      	cmp	r3, r2
 8011d32:	d004      	beq.n	8011d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	4a15      	ldr	r2, [pc, #84]	; (8011d90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	d10c      	bne.n	8011d58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	68ba      	ldr	r2, [r7, #8]
 8011d4c:	4313      	orrs	r3, r2
 8011d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	68ba      	ldr	r2, [r7, #8]
 8011d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2200      	movs	r2, #0
 8011d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011d68:	2300      	movs	r3, #0
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3714      	adds	r7, #20
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop
 8011d78:	40010000 	.word	0x40010000
 8011d7c:	40000400 	.word	0x40000400
 8011d80:	40000800 	.word	0x40000800
 8011d84:	40000c00 	.word	0x40000c00
 8011d88:	40010400 	.word	0x40010400
 8011d8c:	40014000 	.word	0x40014000
 8011d90:	40001800 	.word	0x40001800

08011d94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b085      	sub	sp, #20
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011da8:	2b01      	cmp	r3, #1
 8011daa:	d101      	bne.n	8011db0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011dac:	2302      	movs	r3, #2
 8011dae:	e03d      	b.n	8011e2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2201      	movs	r2, #1
 8011db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	4313      	orrs	r3, r2
 8011dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	689b      	ldr	r3, [r3, #8]
 8011dd0:	4313      	orrs	r3, r2
 8011dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	4313      	orrs	r3, r2
 8011de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	4313      	orrs	r3, r2
 8011dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	691b      	ldr	r3, [r3, #16]
 8011dfa:	4313      	orrs	r3, r2
 8011dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	695b      	ldr	r3, [r3, #20]
 8011e08:	4313      	orrs	r3, r2
 8011e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	69db      	ldr	r3, [r3, #28]
 8011e16:	4313      	orrs	r3, r2
 8011e18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2200      	movs	r2, #0
 8011e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011e2a:	2300      	movs	r3, #0
}
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	3714      	adds	r7, #20
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr

08011e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011e40:	bf00      	nop
 8011e42:	370c      	adds	r7, #12
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr

08011e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b083      	sub	sp, #12
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011e54:	bf00      	nop
 8011e56:	370c      	adds	r7, #12
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d101      	bne.n	8011e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011e6e:	2301      	movs	r3, #1
 8011e70:	e03f      	b.n	8011ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011e78:	b2db      	uxtb	r3, r3
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d106      	bne.n	8011e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	2200      	movs	r2, #0
 8011e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f7f0 fb6c 	bl	8002564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2224      	movs	r2, #36	; 0x24
 8011e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	68da      	ldr	r2, [r3, #12]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f000 fc23 	bl	80126f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	691a      	ldr	r2, [r3, #16]
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	695a      	ldr	r2, [r3, #20]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	68da      	ldr	r2, [r3, #12]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2200      	movs	r2, #0
 8011ede:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2220      	movs	r2, #32
 8011ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2220      	movs	r2, #32
 8011eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8011ef0:	2300      	movs	r3, #0
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3708      	adds	r7, #8
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
	...

08011efc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b086      	sub	sp, #24
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	60f8      	str	r0, [r7, #12]
 8011f04:	60b9      	str	r1, [r7, #8]
 8011f06:	4613      	mov	r3, r2
 8011f08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	2b20      	cmp	r3, #32
 8011f14:	d153      	bne.n	8011fbe <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d002      	beq.n	8011f22 <HAL_UART_Transmit_DMA+0x26>
 8011f1c:	88fb      	ldrh	r3, [r7, #6]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d101      	bne.n	8011f26 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8011f22:	2301      	movs	r3, #1
 8011f24:	e04c      	b.n	8011fc0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d101      	bne.n	8011f34 <HAL_UART_Transmit_DMA+0x38>
 8011f30:	2302      	movs	r3, #2
 8011f32:	e045      	b.n	8011fc0 <HAL_UART_Transmit_DMA+0xc4>
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	2201      	movs	r2, #1
 8011f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8011f3c:	68ba      	ldr	r2, [r7, #8]
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	88fa      	ldrh	r2, [r7, #6]
 8011f46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	88fa      	ldrh	r2, [r7, #6]
 8011f4c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	2200      	movs	r2, #0
 8011f52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	2221      	movs	r2, #33	; 0x21
 8011f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f60:	4a19      	ldr	r2, [pc, #100]	; (8011fc8 <HAL_UART_Transmit_DMA+0xcc>)
 8011f62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f68:	4a18      	ldr	r2, [pc, #96]	; (8011fcc <HAL_UART_Transmit_DMA+0xd0>)
 8011f6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f70:	4a17      	ldr	r2, [pc, #92]	; (8011fd0 <HAL_UART_Transmit_DMA+0xd4>)
 8011f72:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f78:	2200      	movs	r2, #0
 8011f7a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8011f7c:	f107 0308 	add.w	r3, r7, #8
 8011f80:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	6819      	ldr	r1, [r3, #0]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	3304      	adds	r3, #4
 8011f90:	461a      	mov	r2, r3
 8011f92:	88fb      	ldrh	r3, [r7, #6]
 8011f94:	f7fd fab0 	bl	800f4f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011fa0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	695a      	ldr	r2, [r3, #20]
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011fb8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	e000      	b.n	8011fc0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8011fbe:	2302      	movs	r3, #2
  }
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3718      	adds	r7, #24
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	080122fd 	.word	0x080122fd
 8011fcc:	0801234f 	.word	0x0801234f
 8011fd0:	080123ef 	.word	0x080123ef

08011fd4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b086      	sub	sp, #24
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	60f8      	str	r0, [r7, #12]
 8011fdc:	60b9      	str	r1, [r7, #8]
 8011fde:	4613      	mov	r3, r2
 8011fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011fe8:	b2db      	uxtb	r3, r3
 8011fea:	2b20      	cmp	r3, #32
 8011fec:	d166      	bne.n	80120bc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d002      	beq.n	8011ffa <HAL_UART_Receive_DMA+0x26>
 8011ff4:	88fb      	ldrh	r3, [r7, #6]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d101      	bne.n	8011ffe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	e05f      	b.n	80120be <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012004:	2b01      	cmp	r3, #1
 8012006:	d101      	bne.n	801200c <HAL_UART_Receive_DMA+0x38>
 8012008:	2302      	movs	r3, #2
 801200a:	e058      	b.n	80120be <HAL_UART_Receive_DMA+0xea>
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	2201      	movs	r2, #1
 8012010:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8012014:	68ba      	ldr	r2, [r7, #8]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	88fa      	ldrh	r2, [r7, #6]
 801201e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2200      	movs	r2, #0
 8012024:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	2222      	movs	r2, #34	; 0x22
 801202a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012032:	4a25      	ldr	r2, [pc, #148]	; (80120c8 <HAL_UART_Receive_DMA+0xf4>)
 8012034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801203a:	4a24      	ldr	r2, [pc, #144]	; (80120cc <HAL_UART_Receive_DMA+0xf8>)
 801203c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012042:	4a23      	ldr	r2, [pc, #140]	; (80120d0 <HAL_UART_Receive_DMA+0xfc>)
 8012044:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801204a:	2200      	movs	r2, #0
 801204c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 801204e:	f107 0308 	add.w	r3, r7, #8
 8012052:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	3304      	adds	r3, #4
 801205e:	4619      	mov	r1, r3
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	681a      	ldr	r2, [r3, #0]
 8012064:	88fb      	ldrh	r3, [r7, #6]
 8012066:	f7fd fa47 	bl	800f4f8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 801206a:	2300      	movs	r3, #0
 801206c:	613b      	str	r3, [r7, #16]
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	613b      	str	r3, [r7, #16]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	685b      	ldr	r3, [r3, #4]
 801207c:	613b      	str	r3, [r7, #16]
 801207e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	2200      	movs	r2, #0
 8012084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	68da      	ldr	r2, [r3, #12]
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012096:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	695a      	ldr	r2, [r3, #20]
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	f042 0201 	orr.w	r2, r2, #1
 80120a6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	695a      	ldr	r2, [r3, #20]
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80120b6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80120b8:	2300      	movs	r3, #0
 80120ba:	e000      	b.n	80120be <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80120bc:	2302      	movs	r3, #2
  }
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3718      	adds	r7, #24
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop
 80120c8:	0801236b 	.word	0x0801236b
 80120cc:	080123d3 	.word	0x080123d3
 80120d0:	080123ef 	.word	0x080123ef

080120d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b088      	sub	sp, #32
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	68db      	ldr	r3, [r3, #12]
 80120ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	695b      	ldr	r3, [r3, #20]
 80120f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80120f4:	2300      	movs	r3, #0
 80120f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80120f8:	2300      	movs	r3, #0
 80120fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80120fc:	69fb      	ldr	r3, [r7, #28]
 80120fe:	f003 030f 	and.w	r3, r3, #15
 8012102:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d10d      	bne.n	8012126 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801210a:	69fb      	ldr	r3, [r7, #28]
 801210c:	f003 0320 	and.w	r3, r3, #32
 8012110:	2b00      	cmp	r3, #0
 8012112:	d008      	beq.n	8012126 <HAL_UART_IRQHandler+0x52>
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	f003 0320 	and.w	r3, r3, #32
 801211a:	2b00      	cmp	r3, #0
 801211c:	d003      	beq.n	8012126 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f000 fa65 	bl	80125ee <UART_Receive_IT>
      return;
 8012124:	e0d0      	b.n	80122c8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	2b00      	cmp	r3, #0
 801212a:	f000 80b0 	beq.w	801228e <HAL_UART_IRQHandler+0x1ba>
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	f003 0301 	and.w	r3, r3, #1
 8012134:	2b00      	cmp	r3, #0
 8012136:	d105      	bne.n	8012144 <HAL_UART_IRQHandler+0x70>
 8012138:	69bb      	ldr	r3, [r7, #24]
 801213a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801213e:	2b00      	cmp	r3, #0
 8012140:	f000 80a5 	beq.w	801228e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012144:	69fb      	ldr	r3, [r7, #28]
 8012146:	f003 0301 	and.w	r3, r3, #1
 801214a:	2b00      	cmp	r3, #0
 801214c:	d00a      	beq.n	8012164 <HAL_UART_IRQHandler+0x90>
 801214e:	69bb      	ldr	r3, [r7, #24]
 8012150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012154:	2b00      	cmp	r3, #0
 8012156:	d005      	beq.n	8012164 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801215c:	f043 0201 	orr.w	r2, r3, #1
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012164:	69fb      	ldr	r3, [r7, #28]
 8012166:	f003 0304 	and.w	r3, r3, #4
 801216a:	2b00      	cmp	r3, #0
 801216c:	d00a      	beq.n	8012184 <HAL_UART_IRQHandler+0xb0>
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	f003 0301 	and.w	r3, r3, #1
 8012174:	2b00      	cmp	r3, #0
 8012176:	d005      	beq.n	8012184 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801217c:	f043 0202 	orr.w	r2, r3, #2
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012184:	69fb      	ldr	r3, [r7, #28]
 8012186:	f003 0302 	and.w	r3, r3, #2
 801218a:	2b00      	cmp	r3, #0
 801218c:	d00a      	beq.n	80121a4 <HAL_UART_IRQHandler+0xd0>
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	f003 0301 	and.w	r3, r3, #1
 8012194:	2b00      	cmp	r3, #0
 8012196:	d005      	beq.n	80121a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801219c:	f043 0204 	orr.w	r2, r3, #4
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80121a4:	69fb      	ldr	r3, [r7, #28]
 80121a6:	f003 0308 	and.w	r3, r3, #8
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d00f      	beq.n	80121ce <HAL_UART_IRQHandler+0xfa>
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	f003 0320 	and.w	r3, r3, #32
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d104      	bne.n	80121c2 <HAL_UART_IRQHandler+0xee>
 80121b8:	697b      	ldr	r3, [r7, #20]
 80121ba:	f003 0301 	and.w	r3, r3, #1
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d005      	beq.n	80121ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121c6:	f043 0208 	orr.w	r2, r3, #8
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d077      	beq.n	80122c6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80121d6:	69fb      	ldr	r3, [r7, #28]
 80121d8:	f003 0320 	and.w	r3, r3, #32
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d007      	beq.n	80121f0 <HAL_UART_IRQHandler+0x11c>
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	f003 0320 	and.w	r3, r3, #32
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d002      	beq.n	80121f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f000 f9ff 	bl	80125ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	695b      	ldr	r3, [r3, #20]
 80121f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121fa:	2b40      	cmp	r3, #64	; 0x40
 80121fc:	bf0c      	ite	eq
 80121fe:	2301      	moveq	r3, #1
 8012200:	2300      	movne	r3, #0
 8012202:	b2db      	uxtb	r3, r3
 8012204:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801220a:	f003 0308 	and.w	r3, r3, #8
 801220e:	2b00      	cmp	r3, #0
 8012210:	d102      	bne.n	8012218 <HAL_UART_IRQHandler+0x144>
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d031      	beq.n	801227c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 f948 	bl	80124ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	695b      	ldr	r3, [r3, #20]
 8012224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012228:	2b40      	cmp	r3, #64	; 0x40
 801222a:	d123      	bne.n	8012274 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	695a      	ldr	r2, [r3, #20]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801223a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012240:	2b00      	cmp	r3, #0
 8012242:	d013      	beq.n	801226c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012248:	4a21      	ldr	r2, [pc, #132]	; (80122d0 <HAL_UART_IRQHandler+0x1fc>)
 801224a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012250:	4618      	mov	r0, r3
 8012252:	f7fd f9a9 	bl	800f5a8 <HAL_DMA_Abort_IT>
 8012256:	4603      	mov	r3, r0
 8012258:	2b00      	cmp	r3, #0
 801225a:	d016      	beq.n	801228a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012266:	4610      	mov	r0, r2
 8012268:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801226a:	e00e      	b.n	801228a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f7fb fe5d 	bl	800df2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012272:	e00a      	b.n	801228a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f7fb fe59 	bl	800df2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801227a:	e006      	b.n	801228a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7fb fe55 	bl	800df2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2200      	movs	r2, #0
 8012286:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8012288:	e01d      	b.n	80122c6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801228a:	bf00      	nop
    return;
 801228c:	e01b      	b.n	80122c6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012294:	2b00      	cmp	r3, #0
 8012296:	d008      	beq.n	80122aa <HAL_UART_IRQHandler+0x1d6>
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d003      	beq.n	80122aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f000 f935 	bl	8012512 <UART_Transmit_IT>
    return;
 80122a8:	e00e      	b.n	80122c8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d009      	beq.n	80122c8 <HAL_UART_IRQHandler+0x1f4>
 80122b4:	69bb      	ldr	r3, [r7, #24]
 80122b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d004      	beq.n	80122c8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 f97d 	bl	80125be <UART_EndTransmit_IT>
    return;
 80122c4:	e000      	b.n	80122c8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80122c6:	bf00      	nop
  }
}
 80122c8:	3720      	adds	r7, #32
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	bf00      	nop
 80122d0:	080124eb 	.word	0x080124eb

080122d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80122d4:	b480      	push	{r7}
 80122d6:	b083      	sub	sp, #12
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80122dc:	bf00      	nop
 80122de:	370c      	adds	r7, #12
 80122e0:	46bd      	mov	sp, r7
 80122e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e6:	4770      	bx	lr

080122e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80122e8:	b480      	push	{r7}
 80122ea:	b083      	sub	sp, #12
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80122f0:	bf00      	nop
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b084      	sub	sp, #16
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012308:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012314:	2b00      	cmp	r3, #0
 8012316:	d113      	bne.n	8012340 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	2200      	movs	r2, #0
 801231c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	695a      	ldr	r2, [r3, #20]
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801232c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	68da      	ldr	r2, [r3, #12]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801233c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801233e:	e002      	b.n	8012346 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f7fb fd99 	bl	800de78 <HAL_UART_TxCpltCallback>
}
 8012346:	bf00      	nop
 8012348:	3710      	adds	r7, #16
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}

0801234e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801234e:	b580      	push	{r7, lr}
 8012350:	b084      	sub	sp, #16
 8012352:	af00      	add	r7, sp, #0
 8012354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801235a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801235c:	68f8      	ldr	r0, [r7, #12]
 801235e:	f7ff ffb9 	bl	80122d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012362:	bf00      	nop
 8012364:	3710      	adds	r7, #16
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}

0801236a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801236a:	b580      	push	{r7, lr}
 801236c:	b084      	sub	sp, #16
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012376:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012382:	2b00      	cmp	r3, #0
 8012384:	d11e      	bne.n	80123c4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2200      	movs	r2, #0
 801238a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	68da      	ldr	r2, [r3, #12]
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801239a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	695a      	ldr	r2, [r3, #20]
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	f022 0201 	bic.w	r2, r2, #1
 80123aa:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	695a      	ldr	r2, [r3, #20]
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80123ba:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	2220      	movs	r2, #32
 80123c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80123c4:	68f8      	ldr	r0, [r7, #12]
 80123c6:	f7fb fda7 	bl	800df18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80123ca:	bf00      	nop
 80123cc:	3710      	adds	r7, #16
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}

080123d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80123d2:	b580      	push	{r7, lr}
 80123d4:	b084      	sub	sp, #16
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80123e0:	68f8      	ldr	r0, [r7, #12]
 80123e2:	f7ff ff81 	bl	80122e8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80123e6:	bf00      	nop
 80123e8:	3710      	adds	r7, #16
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}

080123ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80123ee:	b580      	push	{r7, lr}
 80123f0:	b084      	sub	sp, #16
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80123f6:	2300      	movs	r3, #0
 80123f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	695b      	ldr	r3, [r3, #20]
 8012406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801240a:	2b80      	cmp	r3, #128	; 0x80
 801240c:	bf0c      	ite	eq
 801240e:	2301      	moveq	r3, #1
 8012410:	2300      	movne	r3, #0
 8012412:	b2db      	uxtb	r3, r3
 8012414:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8012416:	68bb      	ldr	r3, [r7, #8]
 8012418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801241c:	b2db      	uxtb	r3, r3
 801241e:	2b21      	cmp	r3, #33	; 0x21
 8012420:	d108      	bne.n	8012434 <UART_DMAError+0x46>
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d005      	beq.n	8012434 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	2200      	movs	r2, #0
 801242c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801242e:	68b8      	ldr	r0, [r7, #8]
 8012430:	f000 f827 	bl	8012482 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	695b      	ldr	r3, [r3, #20]
 801243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801243e:	2b40      	cmp	r3, #64	; 0x40
 8012440:	bf0c      	ite	eq
 8012442:	2301      	moveq	r3, #1
 8012444:	2300      	movne	r3, #0
 8012446:	b2db      	uxtb	r3, r3
 8012448:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012450:	b2db      	uxtb	r3, r3
 8012452:	2b22      	cmp	r3, #34	; 0x22
 8012454:	d108      	bne.n	8012468 <UART_DMAError+0x7a>
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d005      	beq.n	8012468 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	2200      	movs	r2, #0
 8012460:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8012462:	68b8      	ldr	r0, [r7, #8]
 8012464:	f000 f823 	bl	80124ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801246c:	f043 0210 	orr.w	r2, r3, #16
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012474:	68b8      	ldr	r0, [r7, #8]
 8012476:	f7fb fd59 	bl	800df2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801247a:	bf00      	nop
 801247c:	3710      	adds	r7, #16
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}

08012482 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012482:	b480      	push	{r7}
 8012484:	b083      	sub	sp, #12
 8012486:	af00      	add	r7, sp, #0
 8012488:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	68da      	ldr	r2, [r3, #12]
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8012498:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2220      	movs	r2, #32
 801249e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80124a2:	bf00      	nop
 80124a4:	370c      	adds	r7, #12
 80124a6:	46bd      	mov	sp, r7
 80124a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ac:	4770      	bx	lr

080124ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80124ae:	b480      	push	{r7}
 80124b0:	b083      	sub	sp, #12
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	68da      	ldr	r2, [r3, #12]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80124c4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	695a      	ldr	r2, [r3, #20]
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	f022 0201 	bic.w	r2, r2, #1
 80124d4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2220      	movs	r2, #32
 80124da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80124de:	bf00      	nop
 80124e0:	370c      	adds	r7, #12
 80124e2:	46bd      	mov	sp, r7
 80124e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e8:	4770      	bx	lr

080124ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80124ea:	b580      	push	{r7, lr}
 80124ec:	b084      	sub	sp, #16
 80124ee:	af00      	add	r7, sp, #0
 80124f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	2200      	movs	r2, #0
 80124fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	2200      	movs	r2, #0
 8012502:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012504:	68f8      	ldr	r0, [r7, #12]
 8012506:	f7fb fd11 	bl	800df2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801250a:	bf00      	nop
 801250c:	3710      	adds	r7, #16
 801250e:	46bd      	mov	sp, r7
 8012510:	bd80      	pop	{r7, pc}

08012512 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8012512:	b480      	push	{r7}
 8012514:	b085      	sub	sp, #20
 8012516:	af00      	add	r7, sp, #0
 8012518:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012520:	b2db      	uxtb	r3, r3
 8012522:	2b21      	cmp	r3, #33	; 0x21
 8012524:	d144      	bne.n	80125b0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	689b      	ldr	r3, [r3, #8]
 801252a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801252e:	d11a      	bne.n	8012566 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6a1b      	ldr	r3, [r3, #32]
 8012534:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	881b      	ldrh	r3, [r3, #0]
 801253a:	461a      	mov	r2, r3
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012544:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	691b      	ldr	r3, [r3, #16]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d105      	bne.n	801255a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6a1b      	ldr	r3, [r3, #32]
 8012552:	1c9a      	adds	r2, r3, #2
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	621a      	str	r2, [r3, #32]
 8012558:	e00e      	b.n	8012578 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6a1b      	ldr	r3, [r3, #32]
 801255e:	1c5a      	adds	r2, r3, #1
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	621a      	str	r2, [r3, #32]
 8012564:	e008      	b.n	8012578 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	6a1b      	ldr	r3, [r3, #32]
 801256a:	1c59      	adds	r1, r3, #1
 801256c:	687a      	ldr	r2, [r7, #4]
 801256e:	6211      	str	r1, [r2, #32]
 8012570:	781a      	ldrb	r2, [r3, #0]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801257c:	b29b      	uxth	r3, r3
 801257e:	3b01      	subs	r3, #1
 8012580:	b29b      	uxth	r3, r3
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	4619      	mov	r1, r3
 8012586:	84d1      	strh	r1, [r2, #38]	; 0x26
 8012588:	2b00      	cmp	r3, #0
 801258a:	d10f      	bne.n	80125ac <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	68da      	ldr	r2, [r3, #12]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801259a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	68da      	ldr	r2, [r3, #12]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80125aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80125ac:	2300      	movs	r3, #0
 80125ae:	e000      	b.n	80125b2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80125b0:	2302      	movs	r3, #2
  }
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	3714      	adds	r7, #20
 80125b6:	46bd      	mov	sp, r7
 80125b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125bc:	4770      	bx	lr

080125be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80125be:	b580      	push	{r7, lr}
 80125c0:	b082      	sub	sp, #8
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	68da      	ldr	r2, [r3, #12]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80125d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	2220      	movs	r2, #32
 80125da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f7fb fc4a 	bl	800de78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80125e4:	2300      	movs	r3, #0
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3708      	adds	r7, #8
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}

080125ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80125ee:	b580      	push	{r7, lr}
 80125f0:	b084      	sub	sp, #16
 80125f2:	af00      	add	r7, sp, #0
 80125f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80125fc:	b2db      	uxtb	r3, r3
 80125fe:	2b22      	cmp	r3, #34	; 0x22
 8012600:	d171      	bne.n	80126e6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	689b      	ldr	r3, [r3, #8]
 8012606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801260a:	d123      	bne.n	8012654 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012610:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	691b      	ldr	r3, [r3, #16]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d10e      	bne.n	8012638 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	685b      	ldr	r3, [r3, #4]
 8012620:	b29b      	uxth	r3, r3
 8012622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012626:	b29a      	uxth	r2, r3
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012630:	1c9a      	adds	r2, r3, #2
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	629a      	str	r2, [r3, #40]	; 0x28
 8012636:	e029      	b.n	801268c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	b29b      	uxth	r3, r3
 8012640:	b2db      	uxtb	r3, r3
 8012642:	b29a      	uxth	r2, r3
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801264c:	1c5a      	adds	r2, r3, #1
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	629a      	str	r2, [r3, #40]	; 0x28
 8012652:	e01b      	b.n	801268c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	691b      	ldr	r3, [r3, #16]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d10a      	bne.n	8012672 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	6858      	ldr	r0, [r3, #4]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012666:	1c59      	adds	r1, r3, #1
 8012668:	687a      	ldr	r2, [r7, #4]
 801266a:	6291      	str	r1, [r2, #40]	; 0x28
 801266c:	b2c2      	uxtb	r2, r0
 801266e:	701a      	strb	r2, [r3, #0]
 8012670:	e00c      	b.n	801268c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	b2da      	uxtb	r2, r3
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801267e:	1c58      	adds	r0, r3, #1
 8012680:	6879      	ldr	r1, [r7, #4]
 8012682:	6288      	str	r0, [r1, #40]	; 0x28
 8012684:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012688:	b2d2      	uxtb	r2, r2
 801268a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012690:	b29b      	uxth	r3, r3
 8012692:	3b01      	subs	r3, #1
 8012694:	b29b      	uxth	r3, r3
 8012696:	687a      	ldr	r2, [r7, #4]
 8012698:	4619      	mov	r1, r3
 801269a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801269c:	2b00      	cmp	r3, #0
 801269e:	d120      	bne.n	80126e2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	68da      	ldr	r2, [r3, #12]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	f022 0220 	bic.w	r2, r2, #32
 80126ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	68da      	ldr	r2, [r3, #12]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80126be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	695a      	ldr	r2, [r3, #20]
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	f022 0201 	bic.w	r2, r2, #1
 80126ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2220      	movs	r2, #32
 80126d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f7fb fc1d 	bl	800df18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80126de:	2300      	movs	r3, #0
 80126e0:	e002      	b.n	80126e8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80126e2:	2300      	movs	r3, #0
 80126e4:	e000      	b.n	80126e8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80126e6:	2302      	movs	r3, #2
  }
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3710      	adds	r7, #16
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80126f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80126f4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80126fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	691b      	ldr	r3, [r3, #16]
 8012706:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801270a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801270e:	68d9      	ldr	r1, [r3, #12]
 8012710:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012714:	681a      	ldr	r2, [r3, #0]
 8012716:	ea40 0301 	orr.w	r3, r0, r1
 801271a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801271c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012720:	689a      	ldr	r2, [r3, #8]
 8012722:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012726:	691b      	ldr	r3, [r3, #16]
 8012728:	431a      	orrs	r2, r3
 801272a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801272e:	695b      	ldr	r3, [r3, #20]
 8012730:	431a      	orrs	r2, r3
 8012732:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012736:	69db      	ldr	r3, [r3, #28]
 8012738:	4313      	orrs	r3, r2
 801273a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 801273e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	68db      	ldr	r3, [r3, #12]
 8012746:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801274a:	f021 010c 	bic.w	r1, r1, #12
 801274e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8012758:	430b      	orrs	r3, r1
 801275a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801275c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	695b      	ldr	r3, [r3, #20]
 8012764:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012768:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801276c:	6999      	ldr	r1, [r3, #24]
 801276e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	ea40 0301 	orr.w	r3, r0, r1
 8012778:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801277a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801277e:	69db      	ldr	r3, [r3, #28]
 8012780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012784:	f040 824a 	bne.w	8012c1c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012788:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801278c:	681a      	ldr	r2, [r3, #0]
 801278e:	4b96      	ldr	r3, [pc, #600]	; (80129e8 <UART_SetConfig+0x2f8>)
 8012790:	429a      	cmp	r2, r3
 8012792:	d006      	beq.n	80127a2 <UART_SetConfig+0xb2>
 8012794:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012798:	681a      	ldr	r2, [r3, #0]
 801279a:	4b94      	ldr	r3, [pc, #592]	; (80129ec <UART_SetConfig+0x2fc>)
 801279c:	429a      	cmp	r2, r3
 801279e:	f040 8129 	bne.w	80129f4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80127a2:	f7fe f8b5 	bl	8010910 <HAL_RCC_GetPCLK2Freq>
 80127a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80127aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80127ae:	2200      	movs	r2, #0
 80127b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80127b4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80127b8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80127bc:	4622      	mov	r2, r4
 80127be:	462b      	mov	r3, r5
 80127c0:	1891      	adds	r1, r2, r2
 80127c2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80127c6:	415b      	adcs	r3, r3
 80127c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80127cc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80127d0:	4621      	mov	r1, r4
 80127d2:	1851      	adds	r1, r2, r1
 80127d4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80127d8:	4629      	mov	r1, r5
 80127da:	414b      	adcs	r3, r1
 80127dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80127e0:	f04f 0200 	mov.w	r2, #0
 80127e4:	f04f 0300 	mov.w	r3, #0
 80127e8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80127ec:	4649      	mov	r1, r9
 80127ee:	00cb      	lsls	r3, r1, #3
 80127f0:	4641      	mov	r1, r8
 80127f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80127f6:	4641      	mov	r1, r8
 80127f8:	00ca      	lsls	r2, r1, #3
 80127fa:	4610      	mov	r0, r2
 80127fc:	4619      	mov	r1, r3
 80127fe:	4603      	mov	r3, r0
 8012800:	4622      	mov	r2, r4
 8012802:	189b      	adds	r3, r3, r2
 8012804:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8012808:	462b      	mov	r3, r5
 801280a:	460a      	mov	r2, r1
 801280c:	eb42 0303 	adc.w	r3, r2, r3
 8012810:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8012814:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	2200      	movs	r2, #0
 801281c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8012820:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8012824:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8012828:	460b      	mov	r3, r1
 801282a:	18db      	adds	r3, r3, r3
 801282c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012830:	4613      	mov	r3, r2
 8012832:	eb42 0303 	adc.w	r3, r2, r3
 8012836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801283a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801283e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8012842:	f7ee f99b 	bl	8000b7c <__aeabi_uldivmod>
 8012846:	4602      	mov	r2, r0
 8012848:	460b      	mov	r3, r1
 801284a:	4b69      	ldr	r3, [pc, #420]	; (80129f0 <UART_SetConfig+0x300>)
 801284c:	fba3 2302 	umull	r2, r3, r3, r2
 8012850:	095b      	lsrs	r3, r3, #5
 8012852:	011c      	lsls	r4, r3, #4
 8012854:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012858:	2200      	movs	r2, #0
 801285a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 801285e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8012862:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8012866:	4642      	mov	r2, r8
 8012868:	464b      	mov	r3, r9
 801286a:	1891      	adds	r1, r2, r2
 801286c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8012870:	415b      	adcs	r3, r3
 8012872:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012876:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801287a:	4641      	mov	r1, r8
 801287c:	1851      	adds	r1, r2, r1
 801287e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8012882:	4649      	mov	r1, r9
 8012884:	414b      	adcs	r3, r1
 8012886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801288a:	f04f 0200 	mov.w	r2, #0
 801288e:	f04f 0300 	mov.w	r3, #0
 8012892:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8012896:	4659      	mov	r1, fp
 8012898:	00cb      	lsls	r3, r1, #3
 801289a:	4651      	mov	r1, sl
 801289c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80128a0:	4651      	mov	r1, sl
 80128a2:	00ca      	lsls	r2, r1, #3
 80128a4:	4610      	mov	r0, r2
 80128a6:	4619      	mov	r1, r3
 80128a8:	4603      	mov	r3, r0
 80128aa:	4642      	mov	r2, r8
 80128ac:	189b      	adds	r3, r3, r2
 80128ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80128b2:	464b      	mov	r3, r9
 80128b4:	460a      	mov	r2, r1
 80128b6:	eb42 0303 	adc.w	r3, r2, r3
 80128ba:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80128be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	2200      	movs	r2, #0
 80128c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80128ca:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80128ce:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80128d2:	460b      	mov	r3, r1
 80128d4:	18db      	adds	r3, r3, r3
 80128d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80128da:	4613      	mov	r3, r2
 80128dc:	eb42 0303 	adc.w	r3, r2, r3
 80128e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80128e4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80128e8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80128ec:	f7ee f946 	bl	8000b7c <__aeabi_uldivmod>
 80128f0:	4602      	mov	r2, r0
 80128f2:	460b      	mov	r3, r1
 80128f4:	4611      	mov	r1, r2
 80128f6:	4b3e      	ldr	r3, [pc, #248]	; (80129f0 <UART_SetConfig+0x300>)
 80128f8:	fba3 2301 	umull	r2, r3, r3, r1
 80128fc:	095b      	lsrs	r3, r3, #5
 80128fe:	2264      	movs	r2, #100	; 0x64
 8012900:	fb02 f303 	mul.w	r3, r2, r3
 8012904:	1acb      	subs	r3, r1, r3
 8012906:	00db      	lsls	r3, r3, #3
 8012908:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801290c:	4b38      	ldr	r3, [pc, #224]	; (80129f0 <UART_SetConfig+0x300>)
 801290e:	fba3 2302 	umull	r2, r3, r3, r2
 8012912:	095b      	lsrs	r3, r3, #5
 8012914:	005b      	lsls	r3, r3, #1
 8012916:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801291a:	441c      	add	r4, r3
 801291c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012920:	2200      	movs	r2, #0
 8012922:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8012926:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 801292a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 801292e:	4642      	mov	r2, r8
 8012930:	464b      	mov	r3, r9
 8012932:	1891      	adds	r1, r2, r2
 8012934:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8012938:	415b      	adcs	r3, r3
 801293a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801293e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8012942:	4641      	mov	r1, r8
 8012944:	1851      	adds	r1, r2, r1
 8012946:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801294a:	4649      	mov	r1, r9
 801294c:	414b      	adcs	r3, r1
 801294e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012952:	f04f 0200 	mov.w	r2, #0
 8012956:	f04f 0300 	mov.w	r3, #0
 801295a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 801295e:	4659      	mov	r1, fp
 8012960:	00cb      	lsls	r3, r1, #3
 8012962:	4651      	mov	r1, sl
 8012964:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012968:	4651      	mov	r1, sl
 801296a:	00ca      	lsls	r2, r1, #3
 801296c:	4610      	mov	r0, r2
 801296e:	4619      	mov	r1, r3
 8012970:	4603      	mov	r3, r0
 8012972:	4642      	mov	r2, r8
 8012974:	189b      	adds	r3, r3, r2
 8012976:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 801297a:	464b      	mov	r3, r9
 801297c:	460a      	mov	r2, r1
 801297e:	eb42 0303 	adc.w	r3, r2, r3
 8012982:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8012986:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	2200      	movs	r2, #0
 801298e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8012992:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8012996:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 801299a:	460b      	mov	r3, r1
 801299c:	18db      	adds	r3, r3, r3
 801299e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80129a2:	4613      	mov	r3, r2
 80129a4:	eb42 0303 	adc.w	r3, r2, r3
 80129a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80129ac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80129b0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80129b4:	f7ee f8e2 	bl	8000b7c <__aeabi_uldivmod>
 80129b8:	4602      	mov	r2, r0
 80129ba:	460b      	mov	r3, r1
 80129bc:	4b0c      	ldr	r3, [pc, #48]	; (80129f0 <UART_SetConfig+0x300>)
 80129be:	fba3 1302 	umull	r1, r3, r3, r2
 80129c2:	095b      	lsrs	r3, r3, #5
 80129c4:	2164      	movs	r1, #100	; 0x64
 80129c6:	fb01 f303 	mul.w	r3, r1, r3
 80129ca:	1ad3      	subs	r3, r2, r3
 80129cc:	00db      	lsls	r3, r3, #3
 80129ce:	3332      	adds	r3, #50	; 0x32
 80129d0:	4a07      	ldr	r2, [pc, #28]	; (80129f0 <UART_SetConfig+0x300>)
 80129d2:	fba2 2303 	umull	r2, r3, r2, r3
 80129d6:	095b      	lsrs	r3, r3, #5
 80129d8:	f003 0207 	and.w	r2, r3, #7
 80129dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	4422      	add	r2, r4
 80129e4:	609a      	str	r2, [r3, #8]
 80129e6:	e349      	b.n	801307c <UART_SetConfig+0x98c>
 80129e8:	40011000 	.word	0x40011000
 80129ec:	40011400 	.word	0x40011400
 80129f0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80129f4:	f7fd ff78 	bl	80108e8 <HAL_RCC_GetPCLK1Freq>
 80129f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80129fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012a00:	2200      	movs	r2, #0
 8012a02:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8012a06:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8012a0a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8012a0e:	4622      	mov	r2, r4
 8012a10:	462b      	mov	r3, r5
 8012a12:	1891      	adds	r1, r2, r2
 8012a14:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8012a18:	415b      	adcs	r3, r3
 8012a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012a1e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8012a22:	4621      	mov	r1, r4
 8012a24:	eb12 0a01 	adds.w	sl, r2, r1
 8012a28:	4629      	mov	r1, r5
 8012a2a:	eb43 0b01 	adc.w	fp, r3, r1
 8012a2e:	f04f 0200 	mov.w	r2, #0
 8012a32:	f04f 0300 	mov.w	r3, #0
 8012a36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012a3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012a3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012a42:	4692      	mov	sl, r2
 8012a44:	469b      	mov	fp, r3
 8012a46:	4623      	mov	r3, r4
 8012a48:	eb1a 0303 	adds.w	r3, sl, r3
 8012a4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8012a50:	462b      	mov	r3, r5
 8012a52:	eb4b 0303 	adc.w	r3, fp, r3
 8012a56:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8012a5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	2200      	movs	r2, #0
 8012a62:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8012a66:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8012a6a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8012a6e:	460b      	mov	r3, r1
 8012a70:	18db      	adds	r3, r3, r3
 8012a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012a76:	4613      	mov	r3, r2
 8012a78:	eb42 0303 	adc.w	r3, r2, r3
 8012a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012a80:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8012a84:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8012a88:	f7ee f878 	bl	8000b7c <__aeabi_uldivmod>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	460b      	mov	r3, r1
 8012a90:	4b61      	ldr	r3, [pc, #388]	; (8012c18 <UART_SetConfig+0x528>)
 8012a92:	fba3 2302 	umull	r2, r3, r3, r2
 8012a96:	095b      	lsrs	r3, r3, #5
 8012a98:	011c      	lsls	r4, r3, #4
 8012a9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8012aa4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8012aa8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8012aac:	4642      	mov	r2, r8
 8012aae:	464b      	mov	r3, r9
 8012ab0:	1891      	adds	r1, r2, r2
 8012ab2:	67b9      	str	r1, [r7, #120]	; 0x78
 8012ab4:	415b      	adcs	r3, r3
 8012ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012ab8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8012abc:	4641      	mov	r1, r8
 8012abe:	1851      	adds	r1, r2, r1
 8012ac0:	6739      	str	r1, [r7, #112]	; 0x70
 8012ac2:	4649      	mov	r1, r9
 8012ac4:	414b      	adcs	r3, r1
 8012ac6:	677b      	str	r3, [r7, #116]	; 0x74
 8012ac8:	f04f 0200 	mov.w	r2, #0
 8012acc:	f04f 0300 	mov.w	r3, #0
 8012ad0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8012ad4:	4659      	mov	r1, fp
 8012ad6:	00cb      	lsls	r3, r1, #3
 8012ad8:	4651      	mov	r1, sl
 8012ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012ade:	4651      	mov	r1, sl
 8012ae0:	00ca      	lsls	r2, r1, #3
 8012ae2:	4610      	mov	r0, r2
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	4642      	mov	r2, r8
 8012aea:	189b      	adds	r3, r3, r2
 8012aec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8012af0:	464b      	mov	r3, r9
 8012af2:	460a      	mov	r2, r1
 8012af4:	eb42 0303 	adc.w	r3, r2, r3
 8012af8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8012afc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	2200      	movs	r2, #0
 8012b04:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8012b08:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8012b0c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8012b10:	460b      	mov	r3, r1
 8012b12:	18db      	adds	r3, r3, r3
 8012b14:	66bb      	str	r3, [r7, #104]	; 0x68
 8012b16:	4613      	mov	r3, r2
 8012b18:	eb42 0303 	adc.w	r3, r2, r3
 8012b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012b1e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8012b22:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8012b26:	f7ee f829 	bl	8000b7c <__aeabi_uldivmod>
 8012b2a:	4602      	mov	r2, r0
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	4611      	mov	r1, r2
 8012b30:	4b39      	ldr	r3, [pc, #228]	; (8012c18 <UART_SetConfig+0x528>)
 8012b32:	fba3 2301 	umull	r2, r3, r3, r1
 8012b36:	095b      	lsrs	r3, r3, #5
 8012b38:	2264      	movs	r2, #100	; 0x64
 8012b3a:	fb02 f303 	mul.w	r3, r2, r3
 8012b3e:	1acb      	subs	r3, r1, r3
 8012b40:	00db      	lsls	r3, r3, #3
 8012b42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8012b46:	4b34      	ldr	r3, [pc, #208]	; (8012c18 <UART_SetConfig+0x528>)
 8012b48:	fba3 2302 	umull	r2, r3, r3, r2
 8012b4c:	095b      	lsrs	r3, r3, #5
 8012b4e:	005b      	lsls	r3, r3, #1
 8012b50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012b54:	441c      	add	r4, r3
 8012b56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8012b60:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8012b64:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8012b68:	4642      	mov	r2, r8
 8012b6a:	464b      	mov	r3, r9
 8012b6c:	1891      	adds	r1, r2, r2
 8012b6e:	6639      	str	r1, [r7, #96]	; 0x60
 8012b70:	415b      	adcs	r3, r3
 8012b72:	667b      	str	r3, [r7, #100]	; 0x64
 8012b74:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012b78:	4641      	mov	r1, r8
 8012b7a:	1851      	adds	r1, r2, r1
 8012b7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8012b7e:	4649      	mov	r1, r9
 8012b80:	414b      	adcs	r3, r1
 8012b82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012b84:	f04f 0200 	mov.w	r2, #0
 8012b88:	f04f 0300 	mov.w	r3, #0
 8012b8c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8012b90:	4659      	mov	r1, fp
 8012b92:	00cb      	lsls	r3, r1, #3
 8012b94:	4651      	mov	r1, sl
 8012b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012b9a:	4651      	mov	r1, sl
 8012b9c:	00ca      	lsls	r2, r1, #3
 8012b9e:	4610      	mov	r0, r2
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	4642      	mov	r2, r8
 8012ba6:	189b      	adds	r3, r3, r2
 8012ba8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8012bac:	464b      	mov	r3, r9
 8012bae:	460a      	mov	r2, r1
 8012bb0:	eb42 0303 	adc.w	r3, r2, r3
 8012bb4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8012bb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8012bc4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8012bc8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8012bcc:	460b      	mov	r3, r1
 8012bce:	18db      	adds	r3, r3, r3
 8012bd0:	653b      	str	r3, [r7, #80]	; 0x50
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	eb42 0303 	adc.w	r3, r2, r3
 8012bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8012bda:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012bde:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8012be2:	f7ed ffcb 	bl	8000b7c <__aeabi_uldivmod>
 8012be6:	4602      	mov	r2, r0
 8012be8:	460b      	mov	r3, r1
 8012bea:	4b0b      	ldr	r3, [pc, #44]	; (8012c18 <UART_SetConfig+0x528>)
 8012bec:	fba3 1302 	umull	r1, r3, r3, r2
 8012bf0:	095b      	lsrs	r3, r3, #5
 8012bf2:	2164      	movs	r1, #100	; 0x64
 8012bf4:	fb01 f303 	mul.w	r3, r1, r3
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	00db      	lsls	r3, r3, #3
 8012bfc:	3332      	adds	r3, #50	; 0x32
 8012bfe:	4a06      	ldr	r2, [pc, #24]	; (8012c18 <UART_SetConfig+0x528>)
 8012c00:	fba2 2303 	umull	r2, r3, r2, r3
 8012c04:	095b      	lsrs	r3, r3, #5
 8012c06:	f003 0207 	and.w	r2, r3, #7
 8012c0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4422      	add	r2, r4
 8012c12:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8012c14:	e232      	b.n	801307c <UART_SetConfig+0x98c>
 8012c16:	bf00      	nop
 8012c18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012c1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012c20:	681a      	ldr	r2, [r3, #0]
 8012c22:	4b8d      	ldr	r3, [pc, #564]	; (8012e58 <UART_SetConfig+0x768>)
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d006      	beq.n	8012c36 <UART_SetConfig+0x546>
 8012c28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	4b8b      	ldr	r3, [pc, #556]	; (8012e5c <UART_SetConfig+0x76c>)
 8012c30:	429a      	cmp	r2, r3
 8012c32:	f040 8117 	bne.w	8012e64 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8012c36:	f7fd fe6b 	bl	8010910 <HAL_RCC_GetPCLK2Freq>
 8012c3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012c3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012c42:	2200      	movs	r2, #0
 8012c44:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8012c48:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8012c4c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8012c50:	4622      	mov	r2, r4
 8012c52:	462b      	mov	r3, r5
 8012c54:	1891      	adds	r1, r2, r2
 8012c56:	64b9      	str	r1, [r7, #72]	; 0x48
 8012c58:	415b      	adcs	r3, r3
 8012c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012c60:	4621      	mov	r1, r4
 8012c62:	eb12 0801 	adds.w	r8, r2, r1
 8012c66:	4629      	mov	r1, r5
 8012c68:	eb43 0901 	adc.w	r9, r3, r1
 8012c6c:	f04f 0200 	mov.w	r2, #0
 8012c70:	f04f 0300 	mov.w	r3, #0
 8012c74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012c78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012c7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012c80:	4690      	mov	r8, r2
 8012c82:	4699      	mov	r9, r3
 8012c84:	4623      	mov	r3, r4
 8012c86:	eb18 0303 	adds.w	r3, r8, r3
 8012c8a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8012c8e:	462b      	mov	r3, r5
 8012c90:	eb49 0303 	adc.w	r3, r9, r3
 8012c94:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8012c98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8012ca4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8012ca8:	f04f 0200 	mov.w	r2, #0
 8012cac:	f04f 0300 	mov.w	r3, #0
 8012cb0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8012cb4:	4629      	mov	r1, r5
 8012cb6:	008b      	lsls	r3, r1, #2
 8012cb8:	4621      	mov	r1, r4
 8012cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012cbe:	4621      	mov	r1, r4
 8012cc0:	008a      	lsls	r2, r1, #2
 8012cc2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8012cc6:	f7ed ff59 	bl	8000b7c <__aeabi_uldivmod>
 8012cca:	4602      	mov	r2, r0
 8012ccc:	460b      	mov	r3, r1
 8012cce:	4b64      	ldr	r3, [pc, #400]	; (8012e60 <UART_SetConfig+0x770>)
 8012cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8012cd4:	095b      	lsrs	r3, r3, #5
 8012cd6:	011c      	lsls	r4, r3, #4
 8012cd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012cdc:	2200      	movs	r2, #0
 8012cde:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8012ce2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8012ce6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8012cea:	4642      	mov	r2, r8
 8012cec:	464b      	mov	r3, r9
 8012cee:	1891      	adds	r1, r2, r2
 8012cf0:	6439      	str	r1, [r7, #64]	; 0x40
 8012cf2:	415b      	adcs	r3, r3
 8012cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8012cf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012cfa:	4641      	mov	r1, r8
 8012cfc:	1851      	adds	r1, r2, r1
 8012cfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8012d00:	4649      	mov	r1, r9
 8012d02:	414b      	adcs	r3, r1
 8012d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012d06:	f04f 0200 	mov.w	r2, #0
 8012d0a:	f04f 0300 	mov.w	r3, #0
 8012d0e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8012d12:	4659      	mov	r1, fp
 8012d14:	00cb      	lsls	r3, r1, #3
 8012d16:	4651      	mov	r1, sl
 8012d18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012d1c:	4651      	mov	r1, sl
 8012d1e:	00ca      	lsls	r2, r1, #3
 8012d20:	4610      	mov	r0, r2
 8012d22:	4619      	mov	r1, r3
 8012d24:	4603      	mov	r3, r0
 8012d26:	4642      	mov	r2, r8
 8012d28:	189b      	adds	r3, r3, r2
 8012d2a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8012d2e:	464b      	mov	r3, r9
 8012d30:	460a      	mov	r2, r1
 8012d32:	eb42 0303 	adc.w	r3, r2, r3
 8012d36:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8012d3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	2200      	movs	r2, #0
 8012d42:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8012d46:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8012d4a:	f04f 0200 	mov.w	r2, #0
 8012d4e:	f04f 0300 	mov.w	r3, #0
 8012d52:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8012d56:	4649      	mov	r1, r9
 8012d58:	008b      	lsls	r3, r1, #2
 8012d5a:	4641      	mov	r1, r8
 8012d5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012d60:	4641      	mov	r1, r8
 8012d62:	008a      	lsls	r2, r1, #2
 8012d64:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8012d68:	f7ed ff08 	bl	8000b7c <__aeabi_uldivmod>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	460b      	mov	r3, r1
 8012d70:	4b3b      	ldr	r3, [pc, #236]	; (8012e60 <UART_SetConfig+0x770>)
 8012d72:	fba3 1302 	umull	r1, r3, r3, r2
 8012d76:	095b      	lsrs	r3, r3, #5
 8012d78:	2164      	movs	r1, #100	; 0x64
 8012d7a:	fb01 f303 	mul.w	r3, r1, r3
 8012d7e:	1ad3      	subs	r3, r2, r3
 8012d80:	011b      	lsls	r3, r3, #4
 8012d82:	3332      	adds	r3, #50	; 0x32
 8012d84:	4a36      	ldr	r2, [pc, #216]	; (8012e60 <UART_SetConfig+0x770>)
 8012d86:	fba2 2303 	umull	r2, r3, r2, r3
 8012d8a:	095b      	lsrs	r3, r3, #5
 8012d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d90:	441c      	add	r4, r3
 8012d92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012d96:	2200      	movs	r2, #0
 8012d98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012d9c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8012da0:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8012da4:	4642      	mov	r2, r8
 8012da6:	464b      	mov	r3, r9
 8012da8:	1891      	adds	r1, r2, r2
 8012daa:	6339      	str	r1, [r7, #48]	; 0x30
 8012dac:	415b      	adcs	r3, r3
 8012dae:	637b      	str	r3, [r7, #52]	; 0x34
 8012db0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8012db4:	4641      	mov	r1, r8
 8012db6:	1851      	adds	r1, r2, r1
 8012db8:	62b9      	str	r1, [r7, #40]	; 0x28
 8012dba:	4649      	mov	r1, r9
 8012dbc:	414b      	adcs	r3, r1
 8012dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012dc0:	f04f 0200 	mov.w	r2, #0
 8012dc4:	f04f 0300 	mov.w	r3, #0
 8012dc8:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8012dcc:	4659      	mov	r1, fp
 8012dce:	00cb      	lsls	r3, r1, #3
 8012dd0:	4651      	mov	r1, sl
 8012dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012dd6:	4651      	mov	r1, sl
 8012dd8:	00ca      	lsls	r2, r1, #3
 8012dda:	4610      	mov	r0, r2
 8012ddc:	4619      	mov	r1, r3
 8012dde:	4603      	mov	r3, r0
 8012de0:	4642      	mov	r2, r8
 8012de2:	189b      	adds	r3, r3, r2
 8012de4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8012de8:	464b      	mov	r3, r9
 8012dea:	460a      	mov	r2, r1
 8012dec:	eb42 0303 	adc.w	r3, r2, r3
 8012df0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012df4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012df8:	685b      	ldr	r3, [r3, #4]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8012e00:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8012e04:	f04f 0200 	mov.w	r2, #0
 8012e08:	f04f 0300 	mov.w	r3, #0
 8012e0c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8012e10:	4649      	mov	r1, r9
 8012e12:	008b      	lsls	r3, r1, #2
 8012e14:	4641      	mov	r1, r8
 8012e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012e1a:	4641      	mov	r1, r8
 8012e1c:	008a      	lsls	r2, r1, #2
 8012e1e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8012e22:	f7ed feab 	bl	8000b7c <__aeabi_uldivmod>
 8012e26:	4602      	mov	r2, r0
 8012e28:	460b      	mov	r3, r1
 8012e2a:	4b0d      	ldr	r3, [pc, #52]	; (8012e60 <UART_SetConfig+0x770>)
 8012e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8012e30:	095b      	lsrs	r3, r3, #5
 8012e32:	2164      	movs	r1, #100	; 0x64
 8012e34:	fb01 f303 	mul.w	r3, r1, r3
 8012e38:	1ad3      	subs	r3, r2, r3
 8012e3a:	011b      	lsls	r3, r3, #4
 8012e3c:	3332      	adds	r3, #50	; 0x32
 8012e3e:	4a08      	ldr	r2, [pc, #32]	; (8012e60 <UART_SetConfig+0x770>)
 8012e40:	fba2 2303 	umull	r2, r3, r2, r3
 8012e44:	095b      	lsrs	r3, r3, #5
 8012e46:	f003 020f 	and.w	r2, r3, #15
 8012e4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	4422      	add	r2, r4
 8012e52:	609a      	str	r2, [r3, #8]
 8012e54:	e112      	b.n	801307c <UART_SetConfig+0x98c>
 8012e56:	bf00      	nop
 8012e58:	40011000 	.word	0x40011000
 8012e5c:	40011400 	.word	0x40011400
 8012e60:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8012e64:	f7fd fd40 	bl	80108e8 <HAL_RCC_GetPCLK1Freq>
 8012e68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012e6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012e70:	2200      	movs	r2, #0
 8012e72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8012e76:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8012e7a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8012e7e:	4642      	mov	r2, r8
 8012e80:	464b      	mov	r3, r9
 8012e82:	1891      	adds	r1, r2, r2
 8012e84:	6239      	str	r1, [r7, #32]
 8012e86:	415b      	adcs	r3, r3
 8012e88:	627b      	str	r3, [r7, #36]	; 0x24
 8012e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012e8e:	4641      	mov	r1, r8
 8012e90:	1854      	adds	r4, r2, r1
 8012e92:	4649      	mov	r1, r9
 8012e94:	eb43 0501 	adc.w	r5, r3, r1
 8012e98:	f04f 0200 	mov.w	r2, #0
 8012e9c:	f04f 0300 	mov.w	r3, #0
 8012ea0:	00eb      	lsls	r3, r5, #3
 8012ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012ea6:	00e2      	lsls	r2, r4, #3
 8012ea8:	4614      	mov	r4, r2
 8012eaa:	461d      	mov	r5, r3
 8012eac:	4643      	mov	r3, r8
 8012eae:	18e3      	adds	r3, r4, r3
 8012eb0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8012eb4:	464b      	mov	r3, r9
 8012eb6:	eb45 0303 	adc.w	r3, r5, r3
 8012eba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8012ebe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012ec2:	685b      	ldr	r3, [r3, #4]
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8012eca:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8012ece:	f04f 0200 	mov.w	r2, #0
 8012ed2:	f04f 0300 	mov.w	r3, #0
 8012ed6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8012eda:	4629      	mov	r1, r5
 8012edc:	008b      	lsls	r3, r1, #2
 8012ede:	4621      	mov	r1, r4
 8012ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012ee4:	4621      	mov	r1, r4
 8012ee6:	008a      	lsls	r2, r1, #2
 8012ee8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8012eec:	f7ed fe46 	bl	8000b7c <__aeabi_uldivmod>
 8012ef0:	4602      	mov	r2, r0
 8012ef2:	460b      	mov	r3, r1
 8012ef4:	4b64      	ldr	r3, [pc, #400]	; (8013088 <UART_SetConfig+0x998>)
 8012ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8012efa:	095b      	lsrs	r3, r3, #5
 8012efc:	011c      	lsls	r4, r3, #4
 8012efe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012f02:	2200      	movs	r2, #0
 8012f04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012f08:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8012f0c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8012f10:	4642      	mov	r2, r8
 8012f12:	464b      	mov	r3, r9
 8012f14:	1891      	adds	r1, r2, r2
 8012f16:	61b9      	str	r1, [r7, #24]
 8012f18:	415b      	adcs	r3, r3
 8012f1a:	61fb      	str	r3, [r7, #28]
 8012f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012f20:	4641      	mov	r1, r8
 8012f22:	1851      	adds	r1, r2, r1
 8012f24:	6139      	str	r1, [r7, #16]
 8012f26:	4649      	mov	r1, r9
 8012f28:	414b      	adcs	r3, r1
 8012f2a:	617b      	str	r3, [r7, #20]
 8012f2c:	f04f 0200 	mov.w	r2, #0
 8012f30:	f04f 0300 	mov.w	r3, #0
 8012f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012f38:	4659      	mov	r1, fp
 8012f3a:	00cb      	lsls	r3, r1, #3
 8012f3c:	4651      	mov	r1, sl
 8012f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012f42:	4651      	mov	r1, sl
 8012f44:	00ca      	lsls	r2, r1, #3
 8012f46:	4610      	mov	r0, r2
 8012f48:	4619      	mov	r1, r3
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	4642      	mov	r2, r8
 8012f4e:	189b      	adds	r3, r3, r2
 8012f50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012f54:	464b      	mov	r3, r9
 8012f56:	460a      	mov	r2, r1
 8012f58:	eb42 0303 	adc.w	r3, r2, r3
 8012f5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8012f60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012f64:	685b      	ldr	r3, [r3, #4]
 8012f66:	2200      	movs	r2, #0
 8012f68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012f6c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8012f70:	f04f 0200 	mov.w	r2, #0
 8012f74:	f04f 0300 	mov.w	r3, #0
 8012f78:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8012f7c:	4649      	mov	r1, r9
 8012f7e:	008b      	lsls	r3, r1, #2
 8012f80:	4641      	mov	r1, r8
 8012f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012f86:	4641      	mov	r1, r8
 8012f88:	008a      	lsls	r2, r1, #2
 8012f8a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8012f8e:	f7ed fdf5 	bl	8000b7c <__aeabi_uldivmod>
 8012f92:	4602      	mov	r2, r0
 8012f94:	460b      	mov	r3, r1
 8012f96:	4b3c      	ldr	r3, [pc, #240]	; (8013088 <UART_SetConfig+0x998>)
 8012f98:	fba3 1302 	umull	r1, r3, r3, r2
 8012f9c:	095b      	lsrs	r3, r3, #5
 8012f9e:	2164      	movs	r1, #100	; 0x64
 8012fa0:	fb01 f303 	mul.w	r3, r1, r3
 8012fa4:	1ad3      	subs	r3, r2, r3
 8012fa6:	011b      	lsls	r3, r3, #4
 8012fa8:	3332      	adds	r3, #50	; 0x32
 8012faa:	4a37      	ldr	r2, [pc, #220]	; (8013088 <UART_SetConfig+0x998>)
 8012fac:	fba2 2303 	umull	r2, r3, r2, r3
 8012fb0:	095b      	lsrs	r3, r3, #5
 8012fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012fb6:	441c      	add	r4, r3
 8012fb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012fc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8012fc6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8012fca:	4642      	mov	r2, r8
 8012fcc:	464b      	mov	r3, r9
 8012fce:	1891      	adds	r1, r2, r2
 8012fd0:	60b9      	str	r1, [r7, #8]
 8012fd2:	415b      	adcs	r3, r3
 8012fd4:	60fb      	str	r3, [r7, #12]
 8012fd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012fda:	4641      	mov	r1, r8
 8012fdc:	1851      	adds	r1, r2, r1
 8012fde:	6039      	str	r1, [r7, #0]
 8012fe0:	4649      	mov	r1, r9
 8012fe2:	414b      	adcs	r3, r1
 8012fe4:	607b      	str	r3, [r7, #4]
 8012fe6:	f04f 0200 	mov.w	r2, #0
 8012fea:	f04f 0300 	mov.w	r3, #0
 8012fee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8012ff2:	4659      	mov	r1, fp
 8012ff4:	00cb      	lsls	r3, r1, #3
 8012ff6:	4651      	mov	r1, sl
 8012ff8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012ffc:	4651      	mov	r1, sl
 8012ffe:	00ca      	lsls	r2, r1, #3
 8013000:	4610      	mov	r0, r2
 8013002:	4619      	mov	r1, r3
 8013004:	4603      	mov	r3, r0
 8013006:	4642      	mov	r2, r8
 8013008:	189b      	adds	r3, r3, r2
 801300a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801300e:	464b      	mov	r3, r9
 8013010:	460a      	mov	r2, r1
 8013012:	eb42 0303 	adc.w	r3, r2, r3
 8013016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801301a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	2200      	movs	r2, #0
 8013022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013026:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801302a:	f04f 0200 	mov.w	r2, #0
 801302e:	f04f 0300 	mov.w	r3, #0
 8013032:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8013036:	4649      	mov	r1, r9
 8013038:	008b      	lsls	r3, r1, #2
 801303a:	4641      	mov	r1, r8
 801303c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013040:	4641      	mov	r1, r8
 8013042:	008a      	lsls	r2, r1, #2
 8013044:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8013048:	f7ed fd98 	bl	8000b7c <__aeabi_uldivmod>
 801304c:	4602      	mov	r2, r0
 801304e:	460b      	mov	r3, r1
 8013050:	4b0d      	ldr	r3, [pc, #52]	; (8013088 <UART_SetConfig+0x998>)
 8013052:	fba3 1302 	umull	r1, r3, r3, r2
 8013056:	095b      	lsrs	r3, r3, #5
 8013058:	2164      	movs	r1, #100	; 0x64
 801305a:	fb01 f303 	mul.w	r3, r1, r3
 801305e:	1ad3      	subs	r3, r2, r3
 8013060:	011b      	lsls	r3, r3, #4
 8013062:	3332      	adds	r3, #50	; 0x32
 8013064:	4a08      	ldr	r2, [pc, #32]	; (8013088 <UART_SetConfig+0x998>)
 8013066:	fba2 2303 	umull	r2, r3, r2, r3
 801306a:	095b      	lsrs	r3, r3, #5
 801306c:	f003 020f 	and.w	r2, r3, #15
 8013070:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4422      	add	r2, r4
 8013078:	609a      	str	r2, [r3, #8]
}
 801307a:	e7ff      	b.n	801307c <UART_SetConfig+0x98c>
 801307c:	bf00      	nop
 801307e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8013082:	46bd      	mov	sp, r7
 8013084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013088:	51eb851f 	.word	0x51eb851f

0801308c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801308c:	b480      	push	{r7}
 801308e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8013090:	bf00      	nop
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr
	...

0801309c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801309c:	b480      	push	{r7}
 801309e:	b085      	sub	sp, #20
 80130a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130a2:	f3ef 8305 	mrs	r3, IPSR
 80130a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80130a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d10f      	bne.n	80130ce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130ae:	f3ef 8310 	mrs	r3, PRIMASK
 80130b2:	607b      	str	r3, [r7, #4]
  return(result);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d105      	bne.n	80130c6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80130ba:	f3ef 8311 	mrs	r3, BASEPRI
 80130be:	603b      	str	r3, [r7, #0]
  return(result);
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d007      	beq.n	80130d6 <osKernelInitialize+0x3a>
 80130c6:	4b0e      	ldr	r3, [pc, #56]	; (8013100 <osKernelInitialize+0x64>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	2b02      	cmp	r3, #2
 80130cc:	d103      	bne.n	80130d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80130ce:	f06f 0305 	mvn.w	r3, #5
 80130d2:	60fb      	str	r3, [r7, #12]
 80130d4:	e00c      	b.n	80130f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80130d6:	4b0a      	ldr	r3, [pc, #40]	; (8013100 <osKernelInitialize+0x64>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d105      	bne.n	80130ea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80130de:	4b08      	ldr	r3, [pc, #32]	; (8013100 <osKernelInitialize+0x64>)
 80130e0:	2201      	movs	r2, #1
 80130e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80130e4:	2300      	movs	r3, #0
 80130e6:	60fb      	str	r3, [r7, #12]
 80130e8:	e002      	b.n	80130f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80130ea:	f04f 33ff 	mov.w	r3, #4294967295
 80130ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80130f0:	68fb      	ldr	r3, [r7, #12]
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3714      	adds	r7, #20
 80130f6:	46bd      	mov	sp, r7
 80130f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fc:	4770      	bx	lr
 80130fe:	bf00      	nop
 8013100:	2000248c 	.word	0x2000248c

08013104 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801310a:	f3ef 8305 	mrs	r3, IPSR
 801310e:	60bb      	str	r3, [r7, #8]
  return(result);
 8013110:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013112:	2b00      	cmp	r3, #0
 8013114:	d10f      	bne.n	8013136 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013116:	f3ef 8310 	mrs	r3, PRIMASK
 801311a:	607b      	str	r3, [r7, #4]
  return(result);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d105      	bne.n	801312e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013122:	f3ef 8311 	mrs	r3, BASEPRI
 8013126:	603b      	str	r3, [r7, #0]
  return(result);
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d007      	beq.n	801313e <osKernelStart+0x3a>
 801312e:	4b0f      	ldr	r3, [pc, #60]	; (801316c <osKernelStart+0x68>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	2b02      	cmp	r3, #2
 8013134:	d103      	bne.n	801313e <osKernelStart+0x3a>
    stat = osErrorISR;
 8013136:	f06f 0305 	mvn.w	r3, #5
 801313a:	60fb      	str	r3, [r7, #12]
 801313c:	e010      	b.n	8013160 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801313e:	4b0b      	ldr	r3, [pc, #44]	; (801316c <osKernelStart+0x68>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2b01      	cmp	r3, #1
 8013144:	d109      	bne.n	801315a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013146:	f7ff ffa1 	bl	801308c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801314a:	4b08      	ldr	r3, [pc, #32]	; (801316c <osKernelStart+0x68>)
 801314c:	2202      	movs	r2, #2
 801314e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013150:	f001 fb2c 	bl	80147ac <vTaskStartScheduler>
      stat = osOK;
 8013154:	2300      	movs	r3, #0
 8013156:	60fb      	str	r3, [r7, #12]
 8013158:	e002      	b.n	8013160 <osKernelStart+0x5c>
    } else {
      stat = osError;
 801315a:	f04f 33ff 	mov.w	r3, #4294967295
 801315e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013160:	68fb      	ldr	r3, [r7, #12]
}
 8013162:	4618      	mov	r0, r3
 8013164:	3710      	adds	r7, #16
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
 801316a:	bf00      	nop
 801316c:	2000248c 	.word	0x2000248c

08013170 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013170:	b580      	push	{r7, lr}
 8013172:	b090      	sub	sp, #64	; 0x40
 8013174:	af04      	add	r7, sp, #16
 8013176:	60f8      	str	r0, [r7, #12]
 8013178:	60b9      	str	r1, [r7, #8]
 801317a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801317c:	2300      	movs	r3, #0
 801317e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013180:	f3ef 8305 	mrs	r3, IPSR
 8013184:	61fb      	str	r3, [r7, #28]
  return(result);
 8013186:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8013188:	2b00      	cmp	r3, #0
 801318a:	f040 808f 	bne.w	80132ac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801318e:	f3ef 8310 	mrs	r3, PRIMASK
 8013192:	61bb      	str	r3, [r7, #24]
  return(result);
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d105      	bne.n	80131a6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801319a:	f3ef 8311 	mrs	r3, BASEPRI
 801319e:	617b      	str	r3, [r7, #20]
  return(result);
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d003      	beq.n	80131ae <osThreadNew+0x3e>
 80131a6:	4b44      	ldr	r3, [pc, #272]	; (80132b8 <osThreadNew+0x148>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2b02      	cmp	r3, #2
 80131ac:	d07e      	beq.n	80132ac <osThreadNew+0x13c>
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d07b      	beq.n	80132ac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80131b4:	2380      	movs	r3, #128	; 0x80
 80131b6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80131b8:	2318      	movs	r3, #24
 80131ba:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80131bc:	2300      	movs	r3, #0
 80131be:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80131c0:	f04f 33ff 	mov.w	r3, #4294967295
 80131c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d045      	beq.n	8013258 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d002      	beq.n	80131da <osThreadNew+0x6a>
        name = attr->name;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	699b      	ldr	r3, [r3, #24]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d002      	beq.n	80131e8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	699b      	ldr	r3, [r3, #24]
 80131e6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80131e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d008      	beq.n	8013200 <osThreadNew+0x90>
 80131ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f0:	2b38      	cmp	r3, #56	; 0x38
 80131f2:	d805      	bhi.n	8013200 <osThreadNew+0x90>
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	685b      	ldr	r3, [r3, #4]
 80131f8:	f003 0301 	and.w	r3, r3, #1
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d001      	beq.n	8013204 <osThreadNew+0x94>
        return (NULL);
 8013200:	2300      	movs	r3, #0
 8013202:	e054      	b.n	80132ae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	695b      	ldr	r3, [r3, #20]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d003      	beq.n	8013214 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	695b      	ldr	r3, [r3, #20]
 8013210:	089b      	lsrs	r3, r3, #2
 8013212:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	689b      	ldr	r3, [r3, #8]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d00e      	beq.n	801323a <osThreadNew+0xca>
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	68db      	ldr	r3, [r3, #12]
 8013220:	2b5b      	cmp	r3, #91	; 0x5b
 8013222:	d90a      	bls.n	801323a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013228:	2b00      	cmp	r3, #0
 801322a:	d006      	beq.n	801323a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	695b      	ldr	r3, [r3, #20]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d002      	beq.n	801323a <osThreadNew+0xca>
        mem = 1;
 8013234:	2301      	movs	r3, #1
 8013236:	623b      	str	r3, [r7, #32]
 8013238:	e010      	b.n	801325c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d10c      	bne.n	801325c <osThreadNew+0xec>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	68db      	ldr	r3, [r3, #12]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d108      	bne.n	801325c <osThreadNew+0xec>
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	691b      	ldr	r3, [r3, #16]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d104      	bne.n	801325c <osThreadNew+0xec>
          mem = 0;
 8013252:	2300      	movs	r3, #0
 8013254:	623b      	str	r3, [r7, #32]
 8013256:	e001      	b.n	801325c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8013258:	2300      	movs	r3, #0
 801325a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801325c:	6a3b      	ldr	r3, [r7, #32]
 801325e:	2b01      	cmp	r3, #1
 8013260:	d110      	bne.n	8013284 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8013266:	687a      	ldr	r2, [r7, #4]
 8013268:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801326a:	9202      	str	r2, [sp, #8]
 801326c:	9301      	str	r3, [sp, #4]
 801326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013270:	9300      	str	r3, [sp, #0]
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013278:	68f8      	ldr	r0, [r7, #12]
 801327a:	f001 f8c1 	bl	8014400 <xTaskCreateStatic>
 801327e:	4603      	mov	r3, r0
 8013280:	613b      	str	r3, [r7, #16]
 8013282:	e013      	b.n	80132ac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8013284:	6a3b      	ldr	r3, [r7, #32]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d110      	bne.n	80132ac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801328c:	b29a      	uxth	r2, r3
 801328e:	f107 0310 	add.w	r3, r7, #16
 8013292:	9301      	str	r3, [sp, #4]
 8013294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013296:	9300      	str	r3, [sp, #0]
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801329c:	68f8      	ldr	r0, [r7, #12]
 801329e:	f001 f90c 	bl	80144ba <xTaskCreate>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b01      	cmp	r3, #1
 80132a6:	d001      	beq.n	80132ac <osThreadNew+0x13c>
          hTask = NULL;
 80132a8:	2300      	movs	r3, #0
 80132aa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80132ac:	693b      	ldr	r3, [r7, #16]
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3730      	adds	r7, #48	; 0x30
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	2000248c 	.word	0x2000248c

080132bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80132bc:	b580      	push	{r7, lr}
 80132be:	b086      	sub	sp, #24
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132c4:	f3ef 8305 	mrs	r3, IPSR
 80132c8:	613b      	str	r3, [r7, #16]
  return(result);
 80132ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d10f      	bne.n	80132f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80132d0:	f3ef 8310 	mrs	r3, PRIMASK
 80132d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d105      	bne.n	80132e8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80132dc:	f3ef 8311 	mrs	r3, BASEPRI
 80132e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d007      	beq.n	80132f8 <osDelay+0x3c>
 80132e8:	4b0a      	ldr	r3, [pc, #40]	; (8013314 <osDelay+0x58>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	2b02      	cmp	r3, #2
 80132ee:	d103      	bne.n	80132f8 <osDelay+0x3c>
    stat = osErrorISR;
 80132f0:	f06f 0305 	mvn.w	r3, #5
 80132f4:	617b      	str	r3, [r7, #20]
 80132f6:	e007      	b.n	8013308 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80132f8:	2300      	movs	r3, #0
 80132fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d002      	beq.n	8013308 <osDelay+0x4c>
      vTaskDelay(ticks);
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f001 fa1e 	bl	8014744 <vTaskDelay>
    }
  }

  return (stat);
 8013308:	697b      	ldr	r3, [r7, #20]
}
 801330a:	4618      	mov	r0, r3
 801330c:	3718      	adds	r7, #24
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
 8013312:	bf00      	nop
 8013314:	2000248c 	.word	0x2000248c

08013318 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013318:	b480      	push	{r7}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	60f8      	str	r0, [r7, #12]
 8013320:	60b9      	str	r1, [r7, #8]
 8013322:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	4a07      	ldr	r2, [pc, #28]	; (8013344 <vApplicationGetIdleTaskMemory+0x2c>)
 8013328:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	4a06      	ldr	r2, [pc, #24]	; (8013348 <vApplicationGetIdleTaskMemory+0x30>)
 801332e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2280      	movs	r2, #128	; 0x80
 8013334:	601a      	str	r2, [r3, #0]
}
 8013336:	bf00      	nop
 8013338:	3714      	adds	r7, #20
 801333a:	46bd      	mov	sp, r7
 801333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013340:	4770      	bx	lr
 8013342:	bf00      	nop
 8013344:	20002490 	.word	0x20002490
 8013348:	200024ec 	.word	0x200024ec

0801334c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801334c:	b480      	push	{r7}
 801334e:	b085      	sub	sp, #20
 8013350:	af00      	add	r7, sp, #0
 8013352:	60f8      	str	r0, [r7, #12]
 8013354:	60b9      	str	r1, [r7, #8]
 8013356:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	4a07      	ldr	r2, [pc, #28]	; (8013378 <vApplicationGetTimerTaskMemory+0x2c>)
 801335c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	4a06      	ldr	r2, [pc, #24]	; (801337c <vApplicationGetTimerTaskMemory+0x30>)
 8013362:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f44f 7280 	mov.w	r2, #256	; 0x100
 801336a:	601a      	str	r2, [r3, #0]
}
 801336c:	bf00      	nop
 801336e:	3714      	adds	r7, #20
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr
 8013378:	200026ec 	.word	0x200026ec
 801337c:	20002748 	.word	0x20002748

08013380 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013380:	b480      	push	{r7}
 8013382:	b083      	sub	sp, #12
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f103 0208 	add.w	r2, r3, #8
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f04f 32ff 	mov.w	r2, #4294967295
 8013398:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	f103 0208 	add.w	r2, r3, #8
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f103 0208 	add.w	r2, r3, #8
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	2200      	movs	r2, #0
 80133b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80133b4:	bf00      	nop
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr

080133c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80133c0:	b480      	push	{r7}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2200      	movs	r2, #0
 80133cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80133ce:	bf00      	nop
 80133d0:	370c      	adds	r7, #12
 80133d2:	46bd      	mov	sp, r7
 80133d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d8:	4770      	bx	lr

080133da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80133da:	b480      	push	{r7}
 80133dc:	b085      	sub	sp, #20
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
 80133e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	68fa      	ldr	r2, [r7, #12]
 80133ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	689a      	ldr	r2, [r3, #8]
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	689b      	ldr	r3, [r3, #8]
 80133fc:	683a      	ldr	r2, [r7, #0]
 80133fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	683a      	ldr	r2, [r7, #0]
 8013404:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	687a      	ldr	r2, [r7, #4]
 801340a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	1c5a      	adds	r2, r3, #1
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	601a      	str	r2, [r3, #0]
}
 8013416:	bf00      	nop
 8013418:	3714      	adds	r7, #20
 801341a:	46bd      	mov	sp, r7
 801341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013420:	4770      	bx	lr

08013422 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013422:	b480      	push	{r7}
 8013424:	b085      	sub	sp, #20
 8013426:	af00      	add	r7, sp, #0
 8013428:	6078      	str	r0, [r7, #4]
 801342a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013438:	d103      	bne.n	8013442 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	691b      	ldr	r3, [r3, #16]
 801343e:	60fb      	str	r3, [r7, #12]
 8013440:	e00c      	b.n	801345c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	3308      	adds	r3, #8
 8013446:	60fb      	str	r3, [r7, #12]
 8013448:	e002      	b.n	8013450 <vListInsert+0x2e>
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	685b      	ldr	r3, [r3, #4]
 801344e:	60fb      	str	r3, [r7, #12]
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	68ba      	ldr	r2, [r7, #8]
 8013458:	429a      	cmp	r2, r3
 801345a:	d2f6      	bcs.n	801344a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	685a      	ldr	r2, [r3, #4]
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	685b      	ldr	r3, [r3, #4]
 8013468:	683a      	ldr	r2, [r7, #0]
 801346a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	68fa      	ldr	r2, [r7, #12]
 8013470:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	683a      	ldr	r2, [r7, #0]
 8013476:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	1c5a      	adds	r2, r3, #1
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	601a      	str	r2, [r3, #0]
}
 8013488:	bf00      	nop
 801348a:	3714      	adds	r7, #20
 801348c:	46bd      	mov	sp, r7
 801348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013492:	4770      	bx	lr

08013494 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013494:	b480      	push	{r7}
 8013496:	b085      	sub	sp, #20
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	691b      	ldr	r3, [r3, #16]
 80134a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	685b      	ldr	r3, [r3, #4]
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	6892      	ldr	r2, [r2, #8]
 80134aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	689b      	ldr	r3, [r3, #8]
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	6852      	ldr	r2, [r2, #4]
 80134b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	685b      	ldr	r3, [r3, #4]
 80134ba:	687a      	ldr	r2, [r7, #4]
 80134bc:	429a      	cmp	r2, r3
 80134be:	d103      	bne.n	80134c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	689a      	ldr	r2, [r3, #8]
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2200      	movs	r2, #0
 80134cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	1e5a      	subs	r2, r3, #1
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	681b      	ldr	r3, [r3, #0]
}
 80134dc:	4618      	mov	r0, r3
 80134de:	3714      	adds	r7, #20
 80134e0:	46bd      	mov	sp, r7
 80134e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e6:	4770      	bx	lr

080134e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b084      	sub	sp, #16
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d10a      	bne.n	8013512 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80134fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013500:	f383 8811 	msr	BASEPRI, r3
 8013504:	f3bf 8f6f 	isb	sy
 8013508:	f3bf 8f4f 	dsb	sy
 801350c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801350e:	bf00      	nop
 8013510:	e7fe      	b.n	8013510 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013512:	f002 fc47 	bl	8015da4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	681a      	ldr	r2, [r3, #0]
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801351e:	68f9      	ldr	r1, [r7, #12]
 8013520:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013522:	fb01 f303 	mul.w	r3, r1, r3
 8013526:	441a      	add	r2, r3
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	2200      	movs	r2, #0
 8013530:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	681a      	ldr	r2, [r3, #0]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013542:	3b01      	subs	r3, #1
 8013544:	68f9      	ldr	r1, [r7, #12]
 8013546:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013548:	fb01 f303 	mul.w	r3, r1, r3
 801354c:	441a      	add	r2, r3
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	22ff      	movs	r2, #255	; 0xff
 8013556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	22ff      	movs	r2, #255	; 0xff
 801355e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d114      	bne.n	8013592 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	691b      	ldr	r3, [r3, #16]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d01a      	beq.n	80135a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	3310      	adds	r3, #16
 8013574:	4618      	mov	r0, r3
 8013576:	f001 fba3 	bl	8014cc0 <xTaskRemoveFromEventList>
 801357a:	4603      	mov	r3, r0
 801357c:	2b00      	cmp	r3, #0
 801357e:	d012      	beq.n	80135a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013580:	4b0c      	ldr	r3, [pc, #48]	; (80135b4 <xQueueGenericReset+0xcc>)
 8013582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013586:	601a      	str	r2, [r3, #0]
 8013588:	f3bf 8f4f 	dsb	sy
 801358c:	f3bf 8f6f 	isb	sy
 8013590:	e009      	b.n	80135a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	3310      	adds	r3, #16
 8013596:	4618      	mov	r0, r3
 8013598:	f7ff fef2 	bl	8013380 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	3324      	adds	r3, #36	; 0x24
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7ff feed 	bl	8013380 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80135a6:	f002 fc2d 	bl	8015e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80135aa:	2301      	movs	r3, #1
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3710      	adds	r7, #16
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}
 80135b4:	e000ed04 	.word	0xe000ed04

080135b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b08e      	sub	sp, #56	; 0x38
 80135bc:	af02      	add	r7, sp, #8
 80135be:	60f8      	str	r0, [r7, #12]
 80135c0:	60b9      	str	r1, [r7, #8]
 80135c2:	607a      	str	r2, [r7, #4]
 80135c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d10a      	bne.n	80135e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80135cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d0:	f383 8811 	msr	BASEPRI, r3
 80135d4:	f3bf 8f6f 	isb	sy
 80135d8:	f3bf 8f4f 	dsb	sy
 80135dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80135de:	bf00      	nop
 80135e0:	e7fe      	b.n	80135e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10a      	bne.n	80135fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80135e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ec:	f383 8811 	msr	BASEPRI, r3
 80135f0:	f3bf 8f6f 	isb	sy
 80135f4:	f3bf 8f4f 	dsb	sy
 80135f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80135fa:	bf00      	nop
 80135fc:	e7fe      	b.n	80135fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d002      	beq.n	801360a <xQueueGenericCreateStatic+0x52>
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d001      	beq.n	801360e <xQueueGenericCreateStatic+0x56>
 801360a:	2301      	movs	r3, #1
 801360c:	e000      	b.n	8013610 <xQueueGenericCreateStatic+0x58>
 801360e:	2300      	movs	r3, #0
 8013610:	2b00      	cmp	r3, #0
 8013612:	d10a      	bne.n	801362a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013618:	f383 8811 	msr	BASEPRI, r3
 801361c:	f3bf 8f6f 	isb	sy
 8013620:	f3bf 8f4f 	dsb	sy
 8013624:	623b      	str	r3, [r7, #32]
}
 8013626:	bf00      	nop
 8013628:	e7fe      	b.n	8013628 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d102      	bne.n	8013636 <xQueueGenericCreateStatic+0x7e>
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d101      	bne.n	801363a <xQueueGenericCreateStatic+0x82>
 8013636:	2301      	movs	r3, #1
 8013638:	e000      	b.n	801363c <xQueueGenericCreateStatic+0x84>
 801363a:	2300      	movs	r3, #0
 801363c:	2b00      	cmp	r3, #0
 801363e:	d10a      	bne.n	8013656 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013644:	f383 8811 	msr	BASEPRI, r3
 8013648:	f3bf 8f6f 	isb	sy
 801364c:	f3bf 8f4f 	dsb	sy
 8013650:	61fb      	str	r3, [r7, #28]
}
 8013652:	bf00      	nop
 8013654:	e7fe      	b.n	8013654 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013656:	2350      	movs	r3, #80	; 0x50
 8013658:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	2b50      	cmp	r3, #80	; 0x50
 801365e:	d00a      	beq.n	8013676 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013664:	f383 8811 	msr	BASEPRI, r3
 8013668:	f3bf 8f6f 	isb	sy
 801366c:	f3bf 8f4f 	dsb	sy
 8013670:	61bb      	str	r3, [r7, #24]
}
 8013672:	bf00      	nop
 8013674:	e7fe      	b.n	8013674 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013676:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801367e:	2b00      	cmp	r3, #0
 8013680:	d00d      	beq.n	801369e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013684:	2201      	movs	r2, #1
 8013686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801368a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013690:	9300      	str	r3, [sp, #0]
 8013692:	4613      	mov	r3, r2
 8013694:	687a      	ldr	r2, [r7, #4]
 8013696:	68b9      	ldr	r1, [r7, #8]
 8013698:	68f8      	ldr	r0, [r7, #12]
 801369a:	f000 f845 	bl	8013728 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3730      	adds	r7, #48	; 0x30
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}

080136a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b08a      	sub	sp, #40	; 0x28
 80136ac:	af02      	add	r7, sp, #8
 80136ae:	60f8      	str	r0, [r7, #12]
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	4613      	mov	r3, r2
 80136b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d10a      	bne.n	80136d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80136bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c0:	f383 8811 	msr	BASEPRI, r3
 80136c4:	f3bf 8f6f 	isb	sy
 80136c8:	f3bf 8f4f 	dsb	sy
 80136cc:	613b      	str	r3, [r7, #16]
}
 80136ce:	bf00      	nop
 80136d0:	e7fe      	b.n	80136d0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d102      	bne.n	80136de <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80136d8:	2300      	movs	r3, #0
 80136da:	61fb      	str	r3, [r7, #28]
 80136dc:	e004      	b.n	80136e8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	68ba      	ldr	r2, [r7, #8]
 80136e2:	fb02 f303 	mul.w	r3, r2, r3
 80136e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	3350      	adds	r3, #80	; 0x50
 80136ec:	4618      	mov	r0, r3
 80136ee:	f002 fc7b 	bl	8015fe8 <pvPortMalloc>
 80136f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80136f4:	69bb      	ldr	r3, [r7, #24]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d011      	beq.n	801371e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80136fa:	69bb      	ldr	r3, [r7, #24]
 80136fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	3350      	adds	r3, #80	; 0x50
 8013702:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013704:	69bb      	ldr	r3, [r7, #24]
 8013706:	2200      	movs	r2, #0
 8013708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801370c:	79fa      	ldrb	r2, [r7, #7]
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	9300      	str	r3, [sp, #0]
 8013712:	4613      	mov	r3, r2
 8013714:	697a      	ldr	r2, [r7, #20]
 8013716:	68b9      	ldr	r1, [r7, #8]
 8013718:	68f8      	ldr	r0, [r7, #12]
 801371a:	f000 f805 	bl	8013728 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801371e:	69bb      	ldr	r3, [r7, #24]
	}
 8013720:	4618      	mov	r0, r3
 8013722:	3720      	adds	r7, #32
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}

08013728 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
 801372e:	60f8      	str	r0, [r7, #12]
 8013730:	60b9      	str	r1, [r7, #8]
 8013732:	607a      	str	r2, [r7, #4]
 8013734:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d103      	bne.n	8013744 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	69ba      	ldr	r2, [r7, #24]
 8013740:	601a      	str	r2, [r3, #0]
 8013742:	e002      	b.n	801374a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801374a:	69bb      	ldr	r3, [r7, #24]
 801374c:	68fa      	ldr	r2, [r7, #12]
 801374e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	68ba      	ldr	r2, [r7, #8]
 8013754:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013756:	2101      	movs	r1, #1
 8013758:	69b8      	ldr	r0, [r7, #24]
 801375a:	f7ff fec5 	bl	80134e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	78fa      	ldrb	r2, [r7, #3]
 8013762:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013766:	bf00      	nop
 8013768:	3710      	adds	r7, #16
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}

0801376e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801376e:	b580      	push	{r7, lr}
 8013770:	b082      	sub	sp, #8
 8013772:	af00      	add	r7, sp, #0
 8013774:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d00e      	beq.n	801379a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2200      	movs	r2, #0
 8013780:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2200      	movs	r2, #0
 8013786:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2200      	movs	r2, #0
 801378c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801378e:	2300      	movs	r3, #0
 8013790:	2200      	movs	r2, #0
 8013792:	2100      	movs	r1, #0
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f000 f81d 	bl	80137d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801379a:	bf00      	nop
 801379c:	3708      	adds	r7, #8
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}

080137a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80137a2:	b580      	push	{r7, lr}
 80137a4:	b086      	sub	sp, #24
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	4603      	mov	r3, r0
 80137aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80137ac:	2301      	movs	r3, #1
 80137ae:	617b      	str	r3, [r7, #20]
 80137b0:	2300      	movs	r3, #0
 80137b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80137b4:	79fb      	ldrb	r3, [r7, #7]
 80137b6:	461a      	mov	r2, r3
 80137b8:	6939      	ldr	r1, [r7, #16]
 80137ba:	6978      	ldr	r0, [r7, #20]
 80137bc:	f7ff ff74 	bl	80136a8 <xQueueGenericCreate>
 80137c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80137c2:	68f8      	ldr	r0, [r7, #12]
 80137c4:	f7ff ffd3 	bl	801376e <prvInitialiseMutex>

		return xNewQueue;
 80137c8:	68fb      	ldr	r3, [r7, #12]
	}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3718      	adds	r7, #24
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
	...

080137d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b08e      	sub	sp, #56	; 0x38
 80137d8:	af00      	add	r7, sp, #0
 80137da:	60f8      	str	r0, [r7, #12]
 80137dc:	60b9      	str	r1, [r7, #8]
 80137de:	607a      	str	r2, [r7, #4]
 80137e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80137e2:	2300      	movs	r3, #0
 80137e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80137ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d10a      	bne.n	8013806 <xQueueGenericSend+0x32>
	__asm volatile
 80137f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f4:	f383 8811 	msr	BASEPRI, r3
 80137f8:	f3bf 8f6f 	isb	sy
 80137fc:	f3bf 8f4f 	dsb	sy
 8013800:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013802:	bf00      	nop
 8013804:	e7fe      	b.n	8013804 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d103      	bne.n	8013814 <xQueueGenericSend+0x40>
 801380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013810:	2b00      	cmp	r3, #0
 8013812:	d101      	bne.n	8013818 <xQueueGenericSend+0x44>
 8013814:	2301      	movs	r3, #1
 8013816:	e000      	b.n	801381a <xQueueGenericSend+0x46>
 8013818:	2300      	movs	r3, #0
 801381a:	2b00      	cmp	r3, #0
 801381c:	d10a      	bne.n	8013834 <xQueueGenericSend+0x60>
	__asm volatile
 801381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013822:	f383 8811 	msr	BASEPRI, r3
 8013826:	f3bf 8f6f 	isb	sy
 801382a:	f3bf 8f4f 	dsb	sy
 801382e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013830:	bf00      	nop
 8013832:	e7fe      	b.n	8013832 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	2b02      	cmp	r3, #2
 8013838:	d103      	bne.n	8013842 <xQueueGenericSend+0x6e>
 801383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801383e:	2b01      	cmp	r3, #1
 8013840:	d101      	bne.n	8013846 <xQueueGenericSend+0x72>
 8013842:	2301      	movs	r3, #1
 8013844:	e000      	b.n	8013848 <xQueueGenericSend+0x74>
 8013846:	2300      	movs	r3, #0
 8013848:	2b00      	cmp	r3, #0
 801384a:	d10a      	bne.n	8013862 <xQueueGenericSend+0x8e>
	__asm volatile
 801384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013850:	f383 8811 	msr	BASEPRI, r3
 8013854:	f3bf 8f6f 	isb	sy
 8013858:	f3bf 8f4f 	dsb	sy
 801385c:	623b      	str	r3, [r7, #32]
}
 801385e:	bf00      	nop
 8013860:	e7fe      	b.n	8013860 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013862:	f001 fbeb 	bl	801503c <xTaskGetSchedulerState>
 8013866:	4603      	mov	r3, r0
 8013868:	2b00      	cmp	r3, #0
 801386a:	d102      	bne.n	8013872 <xQueueGenericSend+0x9e>
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d101      	bne.n	8013876 <xQueueGenericSend+0xa2>
 8013872:	2301      	movs	r3, #1
 8013874:	e000      	b.n	8013878 <xQueueGenericSend+0xa4>
 8013876:	2300      	movs	r3, #0
 8013878:	2b00      	cmp	r3, #0
 801387a:	d10a      	bne.n	8013892 <xQueueGenericSend+0xbe>
	__asm volatile
 801387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013880:	f383 8811 	msr	BASEPRI, r3
 8013884:	f3bf 8f6f 	isb	sy
 8013888:	f3bf 8f4f 	dsb	sy
 801388c:	61fb      	str	r3, [r7, #28]
}
 801388e:	bf00      	nop
 8013890:	e7fe      	b.n	8013890 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013892:	f002 fa87 	bl	8015da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801389e:	429a      	cmp	r2, r3
 80138a0:	d302      	bcc.n	80138a8 <xQueueGenericSend+0xd4>
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	2b02      	cmp	r3, #2
 80138a6:	d129      	bne.n	80138fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80138a8:	683a      	ldr	r2, [r7, #0]
 80138aa:	68b9      	ldr	r1, [r7, #8]
 80138ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138ae:	f000 fc39 	bl	8014124 <prvCopyDataToQueue>
 80138b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d010      	beq.n	80138de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138be:	3324      	adds	r3, #36	; 0x24
 80138c0:	4618      	mov	r0, r3
 80138c2:	f001 f9fd 	bl	8014cc0 <xTaskRemoveFromEventList>
 80138c6:	4603      	mov	r3, r0
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d013      	beq.n	80138f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80138cc:	4b3f      	ldr	r3, [pc, #252]	; (80139cc <xQueueGenericSend+0x1f8>)
 80138ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138d2:	601a      	str	r2, [r3, #0]
 80138d4:	f3bf 8f4f 	dsb	sy
 80138d8:	f3bf 8f6f 	isb	sy
 80138dc:	e00a      	b.n	80138f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80138de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d007      	beq.n	80138f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80138e4:	4b39      	ldr	r3, [pc, #228]	; (80139cc <xQueueGenericSend+0x1f8>)
 80138e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138ea:	601a      	str	r2, [r3, #0]
 80138ec:	f3bf 8f4f 	dsb	sy
 80138f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80138f4:	f002 fa86 	bl	8015e04 <vPortExitCritical>
				return pdPASS;
 80138f8:	2301      	movs	r3, #1
 80138fa:	e063      	b.n	80139c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d103      	bne.n	801390a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013902:	f002 fa7f 	bl	8015e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013906:	2300      	movs	r3, #0
 8013908:	e05c      	b.n	80139c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801390c:	2b00      	cmp	r3, #0
 801390e:	d106      	bne.n	801391e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013910:	f107 0314 	add.w	r3, r7, #20
 8013914:	4618      	mov	r0, r3
 8013916:	f001 fa37 	bl	8014d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801391a:	2301      	movs	r3, #1
 801391c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801391e:	f002 fa71 	bl	8015e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013922:	f000 ffa9 	bl	8014878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013926:	f002 fa3d 	bl	8015da4 <vPortEnterCritical>
 801392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801392c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013930:	b25b      	sxtb	r3, r3
 8013932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013936:	d103      	bne.n	8013940 <xQueueGenericSend+0x16c>
 8013938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393a:	2200      	movs	r2, #0
 801393c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013946:	b25b      	sxtb	r3, r3
 8013948:	f1b3 3fff 	cmp.w	r3, #4294967295
 801394c:	d103      	bne.n	8013956 <xQueueGenericSend+0x182>
 801394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013950:	2200      	movs	r2, #0
 8013952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013956:	f002 fa55 	bl	8015e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801395a:	1d3a      	adds	r2, r7, #4
 801395c:	f107 0314 	add.w	r3, r7, #20
 8013960:	4611      	mov	r1, r2
 8013962:	4618      	mov	r0, r3
 8013964:	f001 fa26 	bl	8014db4 <xTaskCheckForTimeOut>
 8013968:	4603      	mov	r3, r0
 801396a:	2b00      	cmp	r3, #0
 801396c:	d124      	bne.n	80139b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801396e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013970:	f000 fcd0 	bl	8014314 <prvIsQueueFull>
 8013974:	4603      	mov	r3, r0
 8013976:	2b00      	cmp	r3, #0
 8013978:	d018      	beq.n	80139ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397c:	3310      	adds	r3, #16
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	4611      	mov	r1, r2
 8013982:	4618      	mov	r0, r3
 8013984:	f001 f94c 	bl	8014c20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801398a:	f000 fc5b 	bl	8014244 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801398e:	f000 ff81 	bl	8014894 <xTaskResumeAll>
 8013992:	4603      	mov	r3, r0
 8013994:	2b00      	cmp	r3, #0
 8013996:	f47f af7c 	bne.w	8013892 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801399a:	4b0c      	ldr	r3, [pc, #48]	; (80139cc <xQueueGenericSend+0x1f8>)
 801399c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139a0:	601a      	str	r2, [r3, #0]
 80139a2:	f3bf 8f4f 	dsb	sy
 80139a6:	f3bf 8f6f 	isb	sy
 80139aa:	e772      	b.n	8013892 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80139ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ae:	f000 fc49 	bl	8014244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80139b2:	f000 ff6f 	bl	8014894 <xTaskResumeAll>
 80139b6:	e76c      	b.n	8013892 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80139b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ba:	f000 fc43 	bl	8014244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80139be:	f000 ff69 	bl	8014894 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80139c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3738      	adds	r7, #56	; 0x38
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	e000ed04 	.word	0xe000ed04

080139d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b08e      	sub	sp, #56	; 0x38
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
 80139dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80139e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d10a      	bne.n	80139fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80139e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ec:	f383 8811 	msr	BASEPRI, r3
 80139f0:	f3bf 8f6f 	isb	sy
 80139f4:	f3bf 8f4f 	dsb	sy
 80139f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80139fa:	bf00      	nop
 80139fc:	e7fe      	b.n	80139fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d103      	bne.n	8013a0c <xQueueGenericSendFromISR+0x3c>
 8013a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d101      	bne.n	8013a10 <xQueueGenericSendFromISR+0x40>
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	e000      	b.n	8013a12 <xQueueGenericSendFromISR+0x42>
 8013a10:	2300      	movs	r3, #0
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d10a      	bne.n	8013a2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a1a:	f383 8811 	msr	BASEPRI, r3
 8013a1e:	f3bf 8f6f 	isb	sy
 8013a22:	f3bf 8f4f 	dsb	sy
 8013a26:	623b      	str	r3, [r7, #32]
}
 8013a28:	bf00      	nop
 8013a2a:	e7fe      	b.n	8013a2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	2b02      	cmp	r3, #2
 8013a30:	d103      	bne.n	8013a3a <xQueueGenericSendFromISR+0x6a>
 8013a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a36:	2b01      	cmp	r3, #1
 8013a38:	d101      	bne.n	8013a3e <xQueueGenericSendFromISR+0x6e>
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	e000      	b.n	8013a40 <xQueueGenericSendFromISR+0x70>
 8013a3e:	2300      	movs	r3, #0
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d10a      	bne.n	8013a5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a48:	f383 8811 	msr	BASEPRI, r3
 8013a4c:	f3bf 8f6f 	isb	sy
 8013a50:	f3bf 8f4f 	dsb	sy
 8013a54:	61fb      	str	r3, [r7, #28]
}
 8013a56:	bf00      	nop
 8013a58:	e7fe      	b.n	8013a58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a5a:	f002 fa85 	bl	8015f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013a5e:	f3ef 8211 	mrs	r2, BASEPRI
 8013a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a66:	f383 8811 	msr	BASEPRI, r3
 8013a6a:	f3bf 8f6f 	isb	sy
 8013a6e:	f3bf 8f4f 	dsb	sy
 8013a72:	61ba      	str	r2, [r7, #24]
 8013a74:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013a76:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d302      	bcc.n	8013a8c <xQueueGenericSendFromISR+0xbc>
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	2b02      	cmp	r3, #2
 8013a8a:	d12c      	bne.n	8013ae6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013a96:	683a      	ldr	r2, [r7, #0]
 8013a98:	68b9      	ldr	r1, [r7, #8]
 8013a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a9c:	f000 fb42 	bl	8014124 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013aa0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aa8:	d112      	bne.n	8013ad0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d016      	beq.n	8013ae0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab4:	3324      	adds	r3, #36	; 0x24
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f001 f902 	bl	8014cc0 <xTaskRemoveFromEventList>
 8013abc:	4603      	mov	r3, r0
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d00e      	beq.n	8013ae0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d00b      	beq.n	8013ae0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2201      	movs	r2, #1
 8013acc:	601a      	str	r2, [r3, #0]
 8013ace:	e007      	b.n	8013ae0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013ad4:	3301      	adds	r3, #1
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	b25a      	sxtb	r2, r3
 8013ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013ae4:	e001      	b.n	8013aea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8013aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013aee:	693b      	ldr	r3, [r7, #16]
 8013af0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013af4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3738      	adds	r7, #56	; 0x38
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}

08013b00 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b08e      	sub	sp, #56	; 0x38
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
 8013b08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d10a      	bne.n	8013b2a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8013b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b18:	f383 8811 	msr	BASEPRI, r3
 8013b1c:	f3bf 8f6f 	isb	sy
 8013b20:	f3bf 8f4f 	dsb	sy
 8013b24:	623b      	str	r3, [r7, #32]
}
 8013b26:	bf00      	nop
 8013b28:	e7fe      	b.n	8013b28 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d00a      	beq.n	8013b48 <xQueueGiveFromISR+0x48>
	__asm volatile
 8013b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b36:	f383 8811 	msr	BASEPRI, r3
 8013b3a:	f3bf 8f6f 	isb	sy
 8013b3e:	f3bf 8f4f 	dsb	sy
 8013b42:	61fb      	str	r3, [r7, #28]
}
 8013b44:	bf00      	nop
 8013b46:	e7fe      	b.n	8013b46 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d103      	bne.n	8013b58 <xQueueGiveFromISR+0x58>
 8013b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b52:	689b      	ldr	r3, [r3, #8]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d101      	bne.n	8013b5c <xQueueGiveFromISR+0x5c>
 8013b58:	2301      	movs	r3, #1
 8013b5a:	e000      	b.n	8013b5e <xQueueGiveFromISR+0x5e>
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d10a      	bne.n	8013b78 <xQueueGiveFromISR+0x78>
	__asm volatile
 8013b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b66:	f383 8811 	msr	BASEPRI, r3
 8013b6a:	f3bf 8f6f 	isb	sy
 8013b6e:	f3bf 8f4f 	dsb	sy
 8013b72:	61bb      	str	r3, [r7, #24]
}
 8013b74:	bf00      	nop
 8013b76:	e7fe      	b.n	8013b76 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b78:	f002 f9f6 	bl	8015f68 <vPortValidateInterruptPriority>
	__asm volatile
 8013b7c:	f3ef 8211 	mrs	r2, BASEPRI
 8013b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b84:	f383 8811 	msr	BASEPRI, r3
 8013b88:	f3bf 8f6f 	isb	sy
 8013b8c:	f3bf 8f4f 	dsb	sy
 8013b90:	617a      	str	r2, [r7, #20]
 8013b92:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013b94:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b96:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b9c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d22b      	bcs.n	8013c00 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb4:	1c5a      	adds	r2, r3, #1
 8013bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013bba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc2:	d112      	bne.n	8013bea <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d016      	beq.n	8013bfa <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bce:	3324      	adds	r3, #36	; 0x24
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f001 f875 	bl	8014cc0 <xTaskRemoveFromEventList>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d00e      	beq.n	8013bfa <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d00b      	beq.n	8013bfa <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	2201      	movs	r2, #1
 8013be6:	601a      	str	r2, [r3, #0]
 8013be8:	e007      	b.n	8013bfa <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bee:	3301      	adds	r3, #1
 8013bf0:	b2db      	uxtb	r3, r3
 8013bf2:	b25a      	sxtb	r2, r3
 8013bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8013bfe:	e001      	b.n	8013c04 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013c00:	2300      	movs	r3, #0
 8013c02:	637b      	str	r3, [r7, #52]	; 0x34
 8013c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c06:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	f383 8811 	msr	BASEPRI, r3
}
 8013c0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3738      	adds	r7, #56	; 0x38
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}
	...

08013c1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b08c      	sub	sp, #48	; 0x30
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	60b9      	str	r1, [r7, #8]
 8013c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d10a      	bne.n	8013c4c <xQueueReceive+0x30>
	__asm volatile
 8013c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c3a:	f383 8811 	msr	BASEPRI, r3
 8013c3e:	f3bf 8f6f 	isb	sy
 8013c42:	f3bf 8f4f 	dsb	sy
 8013c46:	623b      	str	r3, [r7, #32]
}
 8013c48:	bf00      	nop
 8013c4a:	e7fe      	b.n	8013c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d103      	bne.n	8013c5a <xQueueReceive+0x3e>
 8013c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d101      	bne.n	8013c5e <xQueueReceive+0x42>
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	e000      	b.n	8013c60 <xQueueReceive+0x44>
 8013c5e:	2300      	movs	r3, #0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d10a      	bne.n	8013c7a <xQueueReceive+0x5e>
	__asm volatile
 8013c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c68:	f383 8811 	msr	BASEPRI, r3
 8013c6c:	f3bf 8f6f 	isb	sy
 8013c70:	f3bf 8f4f 	dsb	sy
 8013c74:	61fb      	str	r3, [r7, #28]
}
 8013c76:	bf00      	nop
 8013c78:	e7fe      	b.n	8013c78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c7a:	f001 f9df 	bl	801503c <xTaskGetSchedulerState>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d102      	bne.n	8013c8a <xQueueReceive+0x6e>
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d101      	bne.n	8013c8e <xQueueReceive+0x72>
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	e000      	b.n	8013c90 <xQueueReceive+0x74>
 8013c8e:	2300      	movs	r3, #0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d10a      	bne.n	8013caa <xQueueReceive+0x8e>
	__asm volatile
 8013c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c98:	f383 8811 	msr	BASEPRI, r3
 8013c9c:	f3bf 8f6f 	isb	sy
 8013ca0:	f3bf 8f4f 	dsb	sy
 8013ca4:	61bb      	str	r3, [r7, #24]
}
 8013ca6:	bf00      	nop
 8013ca8:	e7fe      	b.n	8013ca8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013caa:	f002 f87b 	bl	8015da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d01f      	beq.n	8013cfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013cba:	68b9      	ldr	r1, [r7, #8]
 8013cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cbe:	f000 fa9b 	bl	80141f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc4:	1e5a      	subs	r2, r3, #1
 8013cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ccc:	691b      	ldr	r3, [r3, #16]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d00f      	beq.n	8013cf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd4:	3310      	adds	r3, #16
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f000 fff2 	bl	8014cc0 <xTaskRemoveFromEventList>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d007      	beq.n	8013cf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013ce2:	4b3d      	ldr	r3, [pc, #244]	; (8013dd8 <xQueueReceive+0x1bc>)
 8013ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ce8:	601a      	str	r2, [r3, #0]
 8013cea:	f3bf 8f4f 	dsb	sy
 8013cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013cf2:	f002 f887 	bl	8015e04 <vPortExitCritical>
				return pdPASS;
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e069      	b.n	8013dce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d103      	bne.n	8013d08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013d00:	f002 f880 	bl	8015e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013d04:	2300      	movs	r3, #0
 8013d06:	e062      	b.n	8013dce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d106      	bne.n	8013d1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013d0e:	f107 0310 	add.w	r3, r7, #16
 8013d12:	4618      	mov	r0, r3
 8013d14:	f001 f838 	bl	8014d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013d1c:	f002 f872 	bl	8015e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013d20:	f000 fdaa 	bl	8014878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013d24:	f002 f83e 	bl	8015da4 <vPortEnterCritical>
 8013d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d2e:	b25b      	sxtb	r3, r3
 8013d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d34:	d103      	bne.n	8013d3e <xQueueReceive+0x122>
 8013d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d44:	b25b      	sxtb	r3, r3
 8013d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d4a:	d103      	bne.n	8013d54 <xQueueReceive+0x138>
 8013d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d4e:	2200      	movs	r2, #0
 8013d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d54:	f002 f856 	bl	8015e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d58:	1d3a      	adds	r2, r7, #4
 8013d5a:	f107 0310 	add.w	r3, r7, #16
 8013d5e:	4611      	mov	r1, r2
 8013d60:	4618      	mov	r0, r3
 8013d62:	f001 f827 	bl	8014db4 <xTaskCheckForTimeOut>
 8013d66:	4603      	mov	r3, r0
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d123      	bne.n	8013db4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d6e:	f000 fabb 	bl	80142e8 <prvIsQueueEmpty>
 8013d72:	4603      	mov	r3, r0
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d017      	beq.n	8013da8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d7a:	3324      	adds	r3, #36	; 0x24
 8013d7c:	687a      	ldr	r2, [r7, #4]
 8013d7e:	4611      	mov	r1, r2
 8013d80:	4618      	mov	r0, r3
 8013d82:	f000 ff4d 	bl	8014c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d88:	f000 fa5c 	bl	8014244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d8c:	f000 fd82 	bl	8014894 <xTaskResumeAll>
 8013d90:	4603      	mov	r3, r0
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d189      	bne.n	8013caa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013d96:	4b10      	ldr	r3, [pc, #64]	; (8013dd8 <xQueueReceive+0x1bc>)
 8013d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d9c:	601a      	str	r2, [r3, #0]
 8013d9e:	f3bf 8f4f 	dsb	sy
 8013da2:	f3bf 8f6f 	isb	sy
 8013da6:	e780      	b.n	8013caa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013daa:	f000 fa4b 	bl	8014244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013dae:	f000 fd71 	bl	8014894 <xTaskResumeAll>
 8013db2:	e77a      	b.n	8013caa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013db6:	f000 fa45 	bl	8014244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013dba:	f000 fd6b 	bl	8014894 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dc0:	f000 fa92 	bl	80142e8 <prvIsQueueEmpty>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	f43f af6f 	beq.w	8013caa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3730      	adds	r7, #48	; 0x30
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}
 8013dd6:	bf00      	nop
 8013dd8:	e000ed04 	.word	0xe000ed04

08013ddc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b08e      	sub	sp, #56	; 0x38
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013de6:	2300      	movs	r3, #0
 8013de8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013dee:	2300      	movs	r3, #0
 8013df0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d10a      	bne.n	8013e0e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8013df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dfc:	f383 8811 	msr	BASEPRI, r3
 8013e00:	f3bf 8f6f 	isb	sy
 8013e04:	f3bf 8f4f 	dsb	sy
 8013e08:	623b      	str	r3, [r7, #32]
}
 8013e0a:	bf00      	nop
 8013e0c:	e7fe      	b.n	8013e0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d00a      	beq.n	8013e2c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8013e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1a:	f383 8811 	msr	BASEPRI, r3
 8013e1e:	f3bf 8f6f 	isb	sy
 8013e22:	f3bf 8f4f 	dsb	sy
 8013e26:	61fb      	str	r3, [r7, #28]
}
 8013e28:	bf00      	nop
 8013e2a:	e7fe      	b.n	8013e2a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013e2c:	f001 f906 	bl	801503c <xTaskGetSchedulerState>
 8013e30:	4603      	mov	r3, r0
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d102      	bne.n	8013e3c <xQueueSemaphoreTake+0x60>
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d101      	bne.n	8013e40 <xQueueSemaphoreTake+0x64>
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	e000      	b.n	8013e42 <xQueueSemaphoreTake+0x66>
 8013e40:	2300      	movs	r3, #0
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d10a      	bne.n	8013e5c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8013e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4a:	f383 8811 	msr	BASEPRI, r3
 8013e4e:	f3bf 8f6f 	isb	sy
 8013e52:	f3bf 8f4f 	dsb	sy
 8013e56:	61bb      	str	r3, [r7, #24]
}
 8013e58:	bf00      	nop
 8013e5a:	e7fe      	b.n	8013e5a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013e5c:	f001 ffa2 	bl	8015da4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d024      	beq.n	8013eb6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e6e:	1e5a      	subs	r2, r3, #1
 8013e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d104      	bne.n	8013e86 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013e7c:	f001 fa54 	bl	8015328 <pvTaskIncrementMutexHeldCount>
 8013e80:	4602      	mov	r2, r0
 8013e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e88:	691b      	ldr	r3, [r3, #16]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d00f      	beq.n	8013eae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e90:	3310      	adds	r3, #16
 8013e92:	4618      	mov	r0, r3
 8013e94:	f000 ff14 	bl	8014cc0 <xTaskRemoveFromEventList>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d007      	beq.n	8013eae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013e9e:	4b54      	ldr	r3, [pc, #336]	; (8013ff0 <xQueueSemaphoreTake+0x214>)
 8013ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ea4:	601a      	str	r2, [r3, #0]
 8013ea6:	f3bf 8f4f 	dsb	sy
 8013eaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013eae:	f001 ffa9 	bl	8015e04 <vPortExitCritical>
				return pdPASS;
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	e097      	b.n	8013fe6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d111      	bne.n	8013ee0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d00a      	beq.n	8013ed8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8013ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec6:	f383 8811 	msr	BASEPRI, r3
 8013eca:	f3bf 8f6f 	isb	sy
 8013ece:	f3bf 8f4f 	dsb	sy
 8013ed2:	617b      	str	r3, [r7, #20]
}
 8013ed4:	bf00      	nop
 8013ed6:	e7fe      	b.n	8013ed6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013ed8:	f001 ff94 	bl	8015e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013edc:	2300      	movs	r3, #0
 8013ede:	e082      	b.n	8013fe6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d106      	bne.n	8013ef4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013ee6:	f107 030c 	add.w	r3, r7, #12
 8013eea:	4618      	mov	r0, r3
 8013eec:	f000 ff4c 	bl	8014d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013ef4:	f001 ff86 	bl	8015e04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ef8:	f000 fcbe 	bl	8014878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013efc:	f001 ff52 	bl	8015da4 <vPortEnterCritical>
 8013f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f06:	b25b      	sxtb	r3, r3
 8013f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f0c:	d103      	bne.n	8013f16 <xQueueSemaphoreTake+0x13a>
 8013f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f10:	2200      	movs	r2, #0
 8013f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f1c:	b25b      	sxtb	r3, r3
 8013f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f22:	d103      	bne.n	8013f2c <xQueueSemaphoreTake+0x150>
 8013f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f26:	2200      	movs	r2, #0
 8013f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013f2c:	f001 ff6a 	bl	8015e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013f30:	463a      	mov	r2, r7
 8013f32:	f107 030c 	add.w	r3, r7, #12
 8013f36:	4611      	mov	r1, r2
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f000 ff3b 	bl	8014db4 <xTaskCheckForTimeOut>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d132      	bne.n	8013faa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f46:	f000 f9cf 	bl	80142e8 <prvIsQueueEmpty>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d026      	beq.n	8013f9e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d109      	bne.n	8013f6c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8013f58:	f001 ff24 	bl	8015da4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	4618      	mov	r0, r3
 8013f62:	f001 f889 	bl	8015078 <xTaskPriorityInherit>
 8013f66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013f68:	f001 ff4c 	bl	8015e04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6e:	3324      	adds	r3, #36	; 0x24
 8013f70:	683a      	ldr	r2, [r7, #0]
 8013f72:	4611      	mov	r1, r2
 8013f74:	4618      	mov	r0, r3
 8013f76:	f000 fe53 	bl	8014c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013f7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f7c:	f000 f962 	bl	8014244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013f80:	f000 fc88 	bl	8014894 <xTaskResumeAll>
 8013f84:	4603      	mov	r3, r0
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	f47f af68 	bne.w	8013e5c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8013f8c:	4b18      	ldr	r3, [pc, #96]	; (8013ff0 <xQueueSemaphoreTake+0x214>)
 8013f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f92:	601a      	str	r2, [r3, #0]
 8013f94:	f3bf 8f4f 	dsb	sy
 8013f98:	f3bf 8f6f 	isb	sy
 8013f9c:	e75e      	b.n	8013e5c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fa0:	f000 f950 	bl	8014244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013fa4:	f000 fc76 	bl	8014894 <xTaskResumeAll>
 8013fa8:	e758      	b.n	8013e5c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013faa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fac:	f000 f94a 	bl	8014244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013fb0:	f000 fc70 	bl	8014894 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fb6:	f000 f997 	bl	80142e8 <prvIsQueueEmpty>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	f43f af4d 	beq.w	8013e5c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d00d      	beq.n	8013fe4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013fc8:	f001 feec 	bl	8015da4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013fcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fce:	f000 f891 	bl	80140f4 <prvGetDisinheritPriorityAfterTimeout>
 8013fd2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd6:	689b      	ldr	r3, [r3, #8]
 8013fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f001 f922 	bl	8015224 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013fe0:	f001 ff10 	bl	8015e04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013fe4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3738      	adds	r7, #56	; 0x38
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	e000ed04 	.word	0xe000ed04

08013ff4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b08e      	sub	sp, #56	; 0x38
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	60f8      	str	r0, [r7, #12]
 8013ffc:	60b9      	str	r1, [r7, #8]
 8013ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014006:	2b00      	cmp	r3, #0
 8014008:	d10a      	bne.n	8014020 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801400e:	f383 8811 	msr	BASEPRI, r3
 8014012:	f3bf 8f6f 	isb	sy
 8014016:	f3bf 8f4f 	dsb	sy
 801401a:	623b      	str	r3, [r7, #32]
}
 801401c:	bf00      	nop
 801401e:	e7fe      	b.n	801401e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d103      	bne.n	801402e <xQueueReceiveFromISR+0x3a>
 8014026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801402a:	2b00      	cmp	r3, #0
 801402c:	d101      	bne.n	8014032 <xQueueReceiveFromISR+0x3e>
 801402e:	2301      	movs	r3, #1
 8014030:	e000      	b.n	8014034 <xQueueReceiveFromISR+0x40>
 8014032:	2300      	movs	r3, #0
 8014034:	2b00      	cmp	r3, #0
 8014036:	d10a      	bne.n	801404e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801403c:	f383 8811 	msr	BASEPRI, r3
 8014040:	f3bf 8f6f 	isb	sy
 8014044:	f3bf 8f4f 	dsb	sy
 8014048:	61fb      	str	r3, [r7, #28]
}
 801404a:	bf00      	nop
 801404c:	e7fe      	b.n	801404c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801404e:	f001 ff8b 	bl	8015f68 <vPortValidateInterruptPriority>
	__asm volatile
 8014052:	f3ef 8211 	mrs	r2, BASEPRI
 8014056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801405a:	f383 8811 	msr	BASEPRI, r3
 801405e:	f3bf 8f6f 	isb	sy
 8014062:	f3bf 8f4f 	dsb	sy
 8014066:	61ba      	str	r2, [r7, #24]
 8014068:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801406a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801406c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014072:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014076:	2b00      	cmp	r3, #0
 8014078:	d02f      	beq.n	80140da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801407c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014084:	68b9      	ldr	r1, [r7, #8]
 8014086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014088:	f000 f8b6 	bl	80141f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801408e:	1e5a      	subs	r2, r3, #1
 8014090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014092:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014094:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014098:	f1b3 3fff 	cmp.w	r3, #4294967295
 801409c:	d112      	bne.n	80140c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a0:	691b      	ldr	r3, [r3, #16]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d016      	beq.n	80140d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80140a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a8:	3310      	adds	r3, #16
 80140aa:	4618      	mov	r0, r3
 80140ac:	f000 fe08 	bl	8014cc0 <xTaskRemoveFromEventList>
 80140b0:	4603      	mov	r3, r0
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d00e      	beq.n	80140d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d00b      	beq.n	80140d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2201      	movs	r2, #1
 80140c0:	601a      	str	r2, [r3, #0]
 80140c2:	e007      	b.n	80140d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80140c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140c8:	3301      	adds	r3, #1
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	b25a      	sxtb	r2, r3
 80140ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80140d4:	2301      	movs	r3, #1
 80140d6:	637b      	str	r3, [r7, #52]	; 0x34
 80140d8:	e001      	b.n	80140de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80140da:	2300      	movs	r3, #0
 80140dc:	637b      	str	r3, [r7, #52]	; 0x34
 80140de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	f383 8811 	msr	BASEPRI, r3
}
 80140e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80140ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80140ec:	4618      	mov	r0, r3
 80140ee:	3738      	adds	r7, #56	; 0x38
 80140f0:	46bd      	mov	sp, r7
 80140f2:	bd80      	pop	{r7, pc}

080140f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80140f4:	b480      	push	{r7}
 80140f6:	b085      	sub	sp, #20
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014100:	2b00      	cmp	r3, #0
 8014102:	d006      	beq.n	8014112 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801410e:	60fb      	str	r3, [r7, #12]
 8014110:	e001      	b.n	8014116 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014112:	2300      	movs	r3, #0
 8014114:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014116:	68fb      	ldr	r3, [r7, #12]
	}
 8014118:	4618      	mov	r0, r3
 801411a:	3714      	adds	r7, #20
 801411c:	46bd      	mov	sp, r7
 801411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014122:	4770      	bx	lr

08014124 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b086      	sub	sp, #24
 8014128:	af00      	add	r7, sp, #0
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	60b9      	str	r1, [r7, #8]
 801412e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014130:	2300      	movs	r3, #0
 8014132:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014138:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801413e:	2b00      	cmp	r3, #0
 8014140:	d10d      	bne.n	801415e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d14d      	bne.n	80141e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	689b      	ldr	r3, [r3, #8]
 801414e:	4618      	mov	r0, r3
 8014150:	f000 fffa 	bl	8015148 <xTaskPriorityDisinherit>
 8014154:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	2200      	movs	r2, #0
 801415a:	609a      	str	r2, [r3, #8]
 801415c:	e043      	b.n	80141e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d119      	bne.n	8014198 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	6858      	ldr	r0, [r3, #4]
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801416c:	461a      	mov	r2, r3
 801416e:	68b9      	ldr	r1, [r7, #8]
 8014170:	f003 f9b0 	bl	80174d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	685a      	ldr	r2, [r3, #4]
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801417c:	441a      	add	r2, r3
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	685a      	ldr	r2, [r3, #4]
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	689b      	ldr	r3, [r3, #8]
 801418a:	429a      	cmp	r2, r3
 801418c:	d32b      	bcc.n	80141e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	681a      	ldr	r2, [r3, #0]
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	605a      	str	r2, [r3, #4]
 8014196:	e026      	b.n	80141e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	68d8      	ldr	r0, [r3, #12]
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141a0:	461a      	mov	r2, r3
 80141a2:	68b9      	ldr	r1, [r7, #8]
 80141a4:	f003 f996 	bl	80174d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	68da      	ldr	r2, [r3, #12]
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141b0:	425b      	negs	r3, r3
 80141b2:	441a      	add	r2, r3
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	68da      	ldr	r2, [r3, #12]
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d207      	bcs.n	80141d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	689a      	ldr	r2, [r3, #8]
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141cc:	425b      	negs	r3, r3
 80141ce:	441a      	add	r2, r3
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2b02      	cmp	r3, #2
 80141d8:	d105      	bne.n	80141e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d002      	beq.n	80141e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	3b01      	subs	r3, #1
 80141e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80141e6:	693b      	ldr	r3, [r7, #16]
 80141e8:	1c5a      	adds	r2, r3, #1
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80141ee:	697b      	ldr	r3, [r7, #20]
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	3718      	adds	r7, #24
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}

080141f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014206:	2b00      	cmp	r3, #0
 8014208:	d018      	beq.n	801423c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	68da      	ldr	r2, [r3, #12]
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014212:	441a      	add	r2, r3
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	68da      	ldr	r2, [r3, #12]
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	689b      	ldr	r3, [r3, #8]
 8014220:	429a      	cmp	r2, r3
 8014222:	d303      	bcc.n	801422c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681a      	ldr	r2, [r3, #0]
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	68d9      	ldr	r1, [r3, #12]
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014234:	461a      	mov	r2, r3
 8014236:	6838      	ldr	r0, [r7, #0]
 8014238:	f003 f94c 	bl	80174d4 <memcpy>
	}
}
 801423c:	bf00      	nop
 801423e:	3708      	adds	r7, #8
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}

08014244 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b084      	sub	sp, #16
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801424c:	f001 fdaa 	bl	8015da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014256:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014258:	e011      	b.n	801427e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801425e:	2b00      	cmp	r3, #0
 8014260:	d012      	beq.n	8014288 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	3324      	adds	r3, #36	; 0x24
 8014266:	4618      	mov	r0, r3
 8014268:	f000 fd2a 	bl	8014cc0 <xTaskRemoveFromEventList>
 801426c:	4603      	mov	r3, r0
 801426e:	2b00      	cmp	r3, #0
 8014270:	d001      	beq.n	8014276 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014272:	f000 fe01 	bl	8014e78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014276:	7bfb      	ldrb	r3, [r7, #15]
 8014278:	3b01      	subs	r3, #1
 801427a:	b2db      	uxtb	r3, r3
 801427c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801427e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014282:	2b00      	cmp	r3, #0
 8014284:	dce9      	bgt.n	801425a <prvUnlockQueue+0x16>
 8014286:	e000      	b.n	801428a <prvUnlockQueue+0x46>
					break;
 8014288:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	22ff      	movs	r2, #255	; 0xff
 801428e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014292:	f001 fdb7 	bl	8015e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014296:	f001 fd85 	bl	8015da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80142a2:	e011      	b.n	80142c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	691b      	ldr	r3, [r3, #16]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d012      	beq.n	80142d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	3310      	adds	r3, #16
 80142b0:	4618      	mov	r0, r3
 80142b2:	f000 fd05 	bl	8014cc0 <xTaskRemoveFromEventList>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d001      	beq.n	80142c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80142bc:	f000 fddc 	bl	8014e78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80142c0:	7bbb      	ldrb	r3, [r7, #14]
 80142c2:	3b01      	subs	r3, #1
 80142c4:	b2db      	uxtb	r3, r3
 80142c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80142c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	dce9      	bgt.n	80142a4 <prvUnlockQueue+0x60>
 80142d0:	e000      	b.n	80142d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80142d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	22ff      	movs	r2, #255	; 0xff
 80142d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80142dc:	f001 fd92 	bl	8015e04 <vPortExitCritical>
}
 80142e0:	bf00      	nop
 80142e2:	3710      	adds	r7, #16
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b084      	sub	sp, #16
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80142f0:	f001 fd58 	bl	8015da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d102      	bne.n	8014302 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80142fc:	2301      	movs	r3, #1
 80142fe:	60fb      	str	r3, [r7, #12]
 8014300:	e001      	b.n	8014306 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014302:	2300      	movs	r3, #0
 8014304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014306:	f001 fd7d 	bl	8015e04 <vPortExitCritical>

	return xReturn;
 801430a:	68fb      	ldr	r3, [r7, #12]
}
 801430c:	4618      	mov	r0, r3
 801430e:	3710      	adds	r7, #16
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}

08014314 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801431c:	f001 fd42 	bl	8015da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014328:	429a      	cmp	r2, r3
 801432a:	d102      	bne.n	8014332 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801432c:	2301      	movs	r3, #1
 801432e:	60fb      	str	r3, [r7, #12]
 8014330:	e001      	b.n	8014336 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014332:	2300      	movs	r3, #0
 8014334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014336:	f001 fd65 	bl	8015e04 <vPortExitCritical>

	return xReturn;
 801433a:	68fb      	ldr	r3, [r7, #12]
}
 801433c:	4618      	mov	r0, r3
 801433e:	3710      	adds	r7, #16
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}

08014344 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014344:	b480      	push	{r7}
 8014346:	b085      	sub	sp, #20
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801434e:	2300      	movs	r3, #0
 8014350:	60fb      	str	r3, [r7, #12]
 8014352:	e014      	b.n	801437e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014354:	4a0f      	ldr	r2, [pc, #60]	; (8014394 <vQueueAddToRegistry+0x50>)
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d10b      	bne.n	8014378 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014360:	490c      	ldr	r1, [pc, #48]	; (8014394 <vQueueAddToRegistry+0x50>)
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	683a      	ldr	r2, [r7, #0]
 8014366:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801436a:	4a0a      	ldr	r2, [pc, #40]	; (8014394 <vQueueAddToRegistry+0x50>)
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	00db      	lsls	r3, r3, #3
 8014370:	4413      	add	r3, r2
 8014372:	687a      	ldr	r2, [r7, #4]
 8014374:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014376:	e006      	b.n	8014386 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	3301      	adds	r3, #1
 801437c:	60fb      	str	r3, [r7, #12]
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	2b07      	cmp	r3, #7
 8014382:	d9e7      	bls.n	8014354 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014384:	bf00      	nop
 8014386:	bf00      	nop
 8014388:	3714      	adds	r7, #20
 801438a:	46bd      	mov	sp, r7
 801438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014390:	4770      	bx	lr
 8014392:	bf00      	nop
 8014394:	20002b48 	.word	0x20002b48

08014398 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014398:	b580      	push	{r7, lr}
 801439a:	b086      	sub	sp, #24
 801439c:	af00      	add	r7, sp, #0
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	60b9      	str	r1, [r7, #8]
 80143a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80143a8:	f001 fcfc 	bl	8015da4 <vPortEnterCritical>
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143b2:	b25b      	sxtb	r3, r3
 80143b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143b8:	d103      	bne.n	80143c2 <vQueueWaitForMessageRestricted+0x2a>
 80143ba:	697b      	ldr	r3, [r7, #20]
 80143bc:	2200      	movs	r2, #0
 80143be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80143c2:	697b      	ldr	r3, [r7, #20]
 80143c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80143c8:	b25b      	sxtb	r3, r3
 80143ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143ce:	d103      	bne.n	80143d8 <vQueueWaitForMessageRestricted+0x40>
 80143d0:	697b      	ldr	r3, [r7, #20]
 80143d2:	2200      	movs	r2, #0
 80143d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80143d8:	f001 fd14 	bl	8015e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d106      	bne.n	80143f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	3324      	adds	r3, #36	; 0x24
 80143e8:	687a      	ldr	r2, [r7, #4]
 80143ea:	68b9      	ldr	r1, [r7, #8]
 80143ec:	4618      	mov	r0, r3
 80143ee:	f000 fc3b 	bl	8014c68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80143f2:	6978      	ldr	r0, [r7, #20]
 80143f4:	f7ff ff26 	bl	8014244 <prvUnlockQueue>
	}
 80143f8:	bf00      	nop
 80143fa:	3718      	adds	r7, #24
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014400:	b580      	push	{r7, lr}
 8014402:	b08e      	sub	sp, #56	; 0x38
 8014404:	af04      	add	r7, sp, #16
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	607a      	str	r2, [r7, #4]
 801440c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801440e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014410:	2b00      	cmp	r3, #0
 8014412:	d10a      	bne.n	801442a <xTaskCreateStatic+0x2a>
	__asm volatile
 8014414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014418:	f383 8811 	msr	BASEPRI, r3
 801441c:	f3bf 8f6f 	isb	sy
 8014420:	f3bf 8f4f 	dsb	sy
 8014424:	623b      	str	r3, [r7, #32]
}
 8014426:	bf00      	nop
 8014428:	e7fe      	b.n	8014428 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801442c:	2b00      	cmp	r3, #0
 801442e:	d10a      	bne.n	8014446 <xTaskCreateStatic+0x46>
	__asm volatile
 8014430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014434:	f383 8811 	msr	BASEPRI, r3
 8014438:	f3bf 8f6f 	isb	sy
 801443c:	f3bf 8f4f 	dsb	sy
 8014440:	61fb      	str	r3, [r7, #28]
}
 8014442:	bf00      	nop
 8014444:	e7fe      	b.n	8014444 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014446:	235c      	movs	r3, #92	; 0x5c
 8014448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801444a:	693b      	ldr	r3, [r7, #16]
 801444c:	2b5c      	cmp	r3, #92	; 0x5c
 801444e:	d00a      	beq.n	8014466 <xTaskCreateStatic+0x66>
	__asm volatile
 8014450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014454:	f383 8811 	msr	BASEPRI, r3
 8014458:	f3bf 8f6f 	isb	sy
 801445c:	f3bf 8f4f 	dsb	sy
 8014460:	61bb      	str	r3, [r7, #24]
}
 8014462:	bf00      	nop
 8014464:	e7fe      	b.n	8014464 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014466:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801446a:	2b00      	cmp	r3, #0
 801446c:	d01e      	beq.n	80144ac <xTaskCreateStatic+0xac>
 801446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014470:	2b00      	cmp	r3, #0
 8014472:	d01b      	beq.n	80144ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014476:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801447c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014480:	2202      	movs	r2, #2
 8014482:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014486:	2300      	movs	r3, #0
 8014488:	9303      	str	r3, [sp, #12]
 801448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801448c:	9302      	str	r3, [sp, #8]
 801448e:	f107 0314 	add.w	r3, r7, #20
 8014492:	9301      	str	r3, [sp, #4]
 8014494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014496:	9300      	str	r3, [sp, #0]
 8014498:	683b      	ldr	r3, [r7, #0]
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	68b9      	ldr	r1, [r7, #8]
 801449e:	68f8      	ldr	r0, [r7, #12]
 80144a0:	f000 f850 	bl	8014544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80144a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80144a6:	f000 f8dd 	bl	8014664 <prvAddNewTaskToReadyList>
 80144aa:	e001      	b.n	80144b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80144ac:	2300      	movs	r3, #0
 80144ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80144b0:	697b      	ldr	r3, [r7, #20]
	}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3728      	adds	r7, #40	; 0x28
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}

080144ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80144ba:	b580      	push	{r7, lr}
 80144bc:	b08c      	sub	sp, #48	; 0x30
 80144be:	af04      	add	r7, sp, #16
 80144c0:	60f8      	str	r0, [r7, #12]
 80144c2:	60b9      	str	r1, [r7, #8]
 80144c4:	603b      	str	r3, [r7, #0]
 80144c6:	4613      	mov	r3, r2
 80144c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80144ca:	88fb      	ldrh	r3, [r7, #6]
 80144cc:	009b      	lsls	r3, r3, #2
 80144ce:	4618      	mov	r0, r3
 80144d0:	f001 fd8a 	bl	8015fe8 <pvPortMalloc>
 80144d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80144d6:	697b      	ldr	r3, [r7, #20]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d00e      	beq.n	80144fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80144dc:	205c      	movs	r0, #92	; 0x5c
 80144de:	f001 fd83 	bl	8015fe8 <pvPortMalloc>
 80144e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80144e4:	69fb      	ldr	r3, [r7, #28]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d003      	beq.n	80144f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80144ea:	69fb      	ldr	r3, [r7, #28]
 80144ec:	697a      	ldr	r2, [r7, #20]
 80144ee:	631a      	str	r2, [r3, #48]	; 0x30
 80144f0:	e005      	b.n	80144fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80144f2:	6978      	ldr	r0, [r7, #20]
 80144f4:	f001 fe3c 	bl	8016170 <vPortFree>
 80144f8:	e001      	b.n	80144fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80144fa:	2300      	movs	r3, #0
 80144fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80144fe:	69fb      	ldr	r3, [r7, #28]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d017      	beq.n	8014534 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014504:	69fb      	ldr	r3, [r7, #28]
 8014506:	2200      	movs	r2, #0
 8014508:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801450c:	88fa      	ldrh	r2, [r7, #6]
 801450e:	2300      	movs	r3, #0
 8014510:	9303      	str	r3, [sp, #12]
 8014512:	69fb      	ldr	r3, [r7, #28]
 8014514:	9302      	str	r3, [sp, #8]
 8014516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014518:	9301      	str	r3, [sp, #4]
 801451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801451c:	9300      	str	r3, [sp, #0]
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	68b9      	ldr	r1, [r7, #8]
 8014522:	68f8      	ldr	r0, [r7, #12]
 8014524:	f000 f80e 	bl	8014544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014528:	69f8      	ldr	r0, [r7, #28]
 801452a:	f000 f89b 	bl	8014664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801452e:	2301      	movs	r3, #1
 8014530:	61bb      	str	r3, [r7, #24]
 8014532:	e002      	b.n	801453a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014534:	f04f 33ff 	mov.w	r3, #4294967295
 8014538:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801453a:	69bb      	ldr	r3, [r7, #24]
	}
 801453c:	4618      	mov	r0, r3
 801453e:	3720      	adds	r7, #32
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}

08014544 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b088      	sub	sp, #32
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
 8014550:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014554:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	009b      	lsls	r3, r3, #2
 801455a:	461a      	mov	r2, r3
 801455c:	21a5      	movs	r1, #165	; 0xa5
 801455e:	f002 ffc7 	bl	80174f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801456c:	3b01      	subs	r3, #1
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	4413      	add	r3, r2
 8014572:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014574:	69bb      	ldr	r3, [r7, #24]
 8014576:	f023 0307 	bic.w	r3, r3, #7
 801457a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801457c:	69bb      	ldr	r3, [r7, #24]
 801457e:	f003 0307 	and.w	r3, r3, #7
 8014582:	2b00      	cmp	r3, #0
 8014584:	d00a      	beq.n	801459c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801458a:	f383 8811 	msr	BASEPRI, r3
 801458e:	f3bf 8f6f 	isb	sy
 8014592:	f3bf 8f4f 	dsb	sy
 8014596:	617b      	str	r3, [r7, #20]
}
 8014598:	bf00      	nop
 801459a:	e7fe      	b.n	801459a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d01f      	beq.n	80145e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80145a2:	2300      	movs	r3, #0
 80145a4:	61fb      	str	r3, [r7, #28]
 80145a6:	e012      	b.n	80145ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80145a8:	68ba      	ldr	r2, [r7, #8]
 80145aa:	69fb      	ldr	r3, [r7, #28]
 80145ac:	4413      	add	r3, r2
 80145ae:	7819      	ldrb	r1, [r3, #0]
 80145b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145b2:	69fb      	ldr	r3, [r7, #28]
 80145b4:	4413      	add	r3, r2
 80145b6:	3334      	adds	r3, #52	; 0x34
 80145b8:	460a      	mov	r2, r1
 80145ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80145bc:	68ba      	ldr	r2, [r7, #8]
 80145be:	69fb      	ldr	r3, [r7, #28]
 80145c0:	4413      	add	r3, r2
 80145c2:	781b      	ldrb	r3, [r3, #0]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d006      	beq.n	80145d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80145c8:	69fb      	ldr	r3, [r7, #28]
 80145ca:	3301      	adds	r3, #1
 80145cc:	61fb      	str	r3, [r7, #28]
 80145ce:	69fb      	ldr	r3, [r7, #28]
 80145d0:	2b0f      	cmp	r3, #15
 80145d2:	d9e9      	bls.n	80145a8 <prvInitialiseNewTask+0x64>
 80145d4:	e000      	b.n	80145d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80145d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80145d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145da:	2200      	movs	r2, #0
 80145dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80145e0:	e003      	b.n	80145ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80145e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e4:	2200      	movs	r2, #0
 80145e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80145ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ec:	2b37      	cmp	r3, #55	; 0x37
 80145ee:	d901      	bls.n	80145f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80145f0:	2337      	movs	r3, #55	; 0x37
 80145f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80145f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80145fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014602:	2200      	movs	r2, #0
 8014604:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014608:	3304      	adds	r3, #4
 801460a:	4618      	mov	r0, r3
 801460c:	f7fe fed8 	bl	80133c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014612:	3318      	adds	r3, #24
 8014614:	4618      	mov	r0, r3
 8014616:	f7fe fed3 	bl	80133c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801461c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801461e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014622:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014628:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801462c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801462e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014632:	2200      	movs	r2, #0
 8014634:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014638:	2200      	movs	r2, #0
 801463a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801463e:	683a      	ldr	r2, [r7, #0]
 8014640:	68f9      	ldr	r1, [r7, #12]
 8014642:	69b8      	ldr	r0, [r7, #24]
 8014644:	f001 fa82 	bl	8015b4c <pxPortInitialiseStack>
 8014648:	4602      	mov	r2, r0
 801464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801464c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014650:	2b00      	cmp	r3, #0
 8014652:	d002      	beq.n	801465a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801465a:	bf00      	nop
 801465c:	3720      	adds	r7, #32
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
	...

08014664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801466c:	f001 fb9a 	bl	8015da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014670:	4b2d      	ldr	r3, [pc, #180]	; (8014728 <prvAddNewTaskToReadyList+0xc4>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	3301      	adds	r3, #1
 8014676:	4a2c      	ldr	r2, [pc, #176]	; (8014728 <prvAddNewTaskToReadyList+0xc4>)
 8014678:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801467a:	4b2c      	ldr	r3, [pc, #176]	; (801472c <prvAddNewTaskToReadyList+0xc8>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d109      	bne.n	8014696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014682:	4a2a      	ldr	r2, [pc, #168]	; (801472c <prvAddNewTaskToReadyList+0xc8>)
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014688:	4b27      	ldr	r3, [pc, #156]	; (8014728 <prvAddNewTaskToReadyList+0xc4>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	2b01      	cmp	r3, #1
 801468e:	d110      	bne.n	80146b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014690:	f000 fc16 	bl	8014ec0 <prvInitialiseTaskLists>
 8014694:	e00d      	b.n	80146b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014696:	4b26      	ldr	r3, [pc, #152]	; (8014730 <prvAddNewTaskToReadyList+0xcc>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d109      	bne.n	80146b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801469e:	4b23      	ldr	r3, [pc, #140]	; (801472c <prvAddNewTaskToReadyList+0xc8>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d802      	bhi.n	80146b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80146ac:	4a1f      	ldr	r2, [pc, #124]	; (801472c <prvAddNewTaskToReadyList+0xc8>)
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80146b2:	4b20      	ldr	r3, [pc, #128]	; (8014734 <prvAddNewTaskToReadyList+0xd0>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	3301      	adds	r3, #1
 80146b8:	4a1e      	ldr	r2, [pc, #120]	; (8014734 <prvAddNewTaskToReadyList+0xd0>)
 80146ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80146bc:	4b1d      	ldr	r3, [pc, #116]	; (8014734 <prvAddNewTaskToReadyList+0xd0>)
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146c8:	4b1b      	ldr	r3, [pc, #108]	; (8014738 <prvAddNewTaskToReadyList+0xd4>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	429a      	cmp	r2, r3
 80146ce:	d903      	bls.n	80146d8 <prvAddNewTaskToReadyList+0x74>
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146d4:	4a18      	ldr	r2, [pc, #96]	; (8014738 <prvAddNewTaskToReadyList+0xd4>)
 80146d6:	6013      	str	r3, [r2, #0]
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146dc:	4613      	mov	r3, r2
 80146de:	009b      	lsls	r3, r3, #2
 80146e0:	4413      	add	r3, r2
 80146e2:	009b      	lsls	r3, r3, #2
 80146e4:	4a15      	ldr	r2, [pc, #84]	; (801473c <prvAddNewTaskToReadyList+0xd8>)
 80146e6:	441a      	add	r2, r3
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	3304      	adds	r3, #4
 80146ec:	4619      	mov	r1, r3
 80146ee:	4610      	mov	r0, r2
 80146f0:	f7fe fe73 	bl	80133da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80146f4:	f001 fb86 	bl	8015e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80146f8:	4b0d      	ldr	r3, [pc, #52]	; (8014730 <prvAddNewTaskToReadyList+0xcc>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d00e      	beq.n	801471e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014700:	4b0a      	ldr	r3, [pc, #40]	; (801472c <prvAddNewTaskToReadyList+0xc8>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801470a:	429a      	cmp	r2, r3
 801470c:	d207      	bcs.n	801471e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801470e:	4b0c      	ldr	r3, [pc, #48]	; (8014740 <prvAddNewTaskToReadyList+0xdc>)
 8014710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014714:	601a      	str	r2, [r3, #0]
 8014716:	f3bf 8f4f 	dsb	sy
 801471a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801471e:	bf00      	nop
 8014720:	3708      	adds	r7, #8
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	2000305c 	.word	0x2000305c
 801472c:	20002b88 	.word	0x20002b88
 8014730:	20003068 	.word	0x20003068
 8014734:	20003078 	.word	0x20003078
 8014738:	20003064 	.word	0x20003064
 801473c:	20002b8c 	.word	0x20002b8c
 8014740:	e000ed04 	.word	0xe000ed04

08014744 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014744:	b580      	push	{r7, lr}
 8014746:	b084      	sub	sp, #16
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801474c:	2300      	movs	r3, #0
 801474e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d017      	beq.n	8014786 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014756:	4b13      	ldr	r3, [pc, #76]	; (80147a4 <vTaskDelay+0x60>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d00a      	beq.n	8014774 <vTaskDelay+0x30>
	__asm volatile
 801475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014762:	f383 8811 	msr	BASEPRI, r3
 8014766:	f3bf 8f6f 	isb	sy
 801476a:	f3bf 8f4f 	dsb	sy
 801476e:	60bb      	str	r3, [r7, #8]
}
 8014770:	bf00      	nop
 8014772:	e7fe      	b.n	8014772 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014774:	f000 f880 	bl	8014878 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014778:	2100      	movs	r1, #0
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f000 fde8 	bl	8015350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014780:	f000 f888 	bl	8014894 <xTaskResumeAll>
 8014784:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d107      	bne.n	801479c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801478c:	4b06      	ldr	r3, [pc, #24]	; (80147a8 <vTaskDelay+0x64>)
 801478e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014792:	601a      	str	r2, [r3, #0]
 8014794:	f3bf 8f4f 	dsb	sy
 8014798:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801479c:	bf00      	nop
 801479e:	3710      	adds	r7, #16
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}
 80147a4:	20003084 	.word	0x20003084
 80147a8:	e000ed04 	.word	0xe000ed04

080147ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b08a      	sub	sp, #40	; 0x28
 80147b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80147b2:	2300      	movs	r3, #0
 80147b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80147b6:	2300      	movs	r3, #0
 80147b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80147ba:	463a      	mov	r2, r7
 80147bc:	1d39      	adds	r1, r7, #4
 80147be:	f107 0308 	add.w	r3, r7, #8
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7fe fda8 	bl	8013318 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80147c8:	6839      	ldr	r1, [r7, #0]
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	68ba      	ldr	r2, [r7, #8]
 80147ce:	9202      	str	r2, [sp, #8]
 80147d0:	9301      	str	r3, [sp, #4]
 80147d2:	2300      	movs	r3, #0
 80147d4:	9300      	str	r3, [sp, #0]
 80147d6:	2300      	movs	r3, #0
 80147d8:	460a      	mov	r2, r1
 80147da:	4921      	ldr	r1, [pc, #132]	; (8014860 <vTaskStartScheduler+0xb4>)
 80147dc:	4821      	ldr	r0, [pc, #132]	; (8014864 <vTaskStartScheduler+0xb8>)
 80147de:	f7ff fe0f 	bl	8014400 <xTaskCreateStatic>
 80147e2:	4603      	mov	r3, r0
 80147e4:	4a20      	ldr	r2, [pc, #128]	; (8014868 <vTaskStartScheduler+0xbc>)
 80147e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80147e8:	4b1f      	ldr	r3, [pc, #124]	; (8014868 <vTaskStartScheduler+0xbc>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d002      	beq.n	80147f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80147f0:	2301      	movs	r3, #1
 80147f2:	617b      	str	r3, [r7, #20]
 80147f4:	e001      	b.n	80147fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80147f6:	2300      	movs	r3, #0
 80147f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	2b01      	cmp	r3, #1
 80147fe:	d102      	bne.n	8014806 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014800:	f000 fdfa 	bl	80153f8 <xTimerCreateTimerTask>
 8014804:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	2b01      	cmp	r3, #1
 801480a:	d116      	bne.n	801483a <vTaskStartScheduler+0x8e>
	__asm volatile
 801480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014810:	f383 8811 	msr	BASEPRI, r3
 8014814:	f3bf 8f6f 	isb	sy
 8014818:	f3bf 8f4f 	dsb	sy
 801481c:	613b      	str	r3, [r7, #16]
}
 801481e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014820:	4b12      	ldr	r3, [pc, #72]	; (801486c <vTaskStartScheduler+0xc0>)
 8014822:	f04f 32ff 	mov.w	r2, #4294967295
 8014826:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014828:	4b11      	ldr	r3, [pc, #68]	; (8014870 <vTaskStartScheduler+0xc4>)
 801482a:	2201      	movs	r2, #1
 801482c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801482e:	4b11      	ldr	r3, [pc, #68]	; (8014874 <vTaskStartScheduler+0xc8>)
 8014830:	2200      	movs	r2, #0
 8014832:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014834:	f001 fa14 	bl	8015c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014838:	e00e      	b.n	8014858 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014840:	d10a      	bne.n	8014858 <vTaskStartScheduler+0xac>
	__asm volatile
 8014842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014846:	f383 8811 	msr	BASEPRI, r3
 801484a:	f3bf 8f6f 	isb	sy
 801484e:	f3bf 8f4f 	dsb	sy
 8014852:	60fb      	str	r3, [r7, #12]
}
 8014854:	bf00      	nop
 8014856:	e7fe      	b.n	8014856 <vTaskStartScheduler+0xaa>
}
 8014858:	bf00      	nop
 801485a:	3718      	adds	r7, #24
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}
 8014860:	08018a80 	.word	0x08018a80
 8014864:	08014e91 	.word	0x08014e91
 8014868:	20003080 	.word	0x20003080
 801486c:	2000307c 	.word	0x2000307c
 8014870:	20003068 	.word	0x20003068
 8014874:	20003060 	.word	0x20003060

08014878 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014878:	b480      	push	{r7}
 801487a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801487c:	4b04      	ldr	r3, [pc, #16]	; (8014890 <vTaskSuspendAll+0x18>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	3301      	adds	r3, #1
 8014882:	4a03      	ldr	r2, [pc, #12]	; (8014890 <vTaskSuspendAll+0x18>)
 8014884:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014886:	bf00      	nop
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr
 8014890:	20003084 	.word	0x20003084

08014894 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801489a:	2300      	movs	r3, #0
 801489c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801489e:	2300      	movs	r3, #0
 80148a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80148a2:	4b42      	ldr	r3, [pc, #264]	; (80149ac <xTaskResumeAll+0x118>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d10a      	bne.n	80148c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80148aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ae:	f383 8811 	msr	BASEPRI, r3
 80148b2:	f3bf 8f6f 	isb	sy
 80148b6:	f3bf 8f4f 	dsb	sy
 80148ba:	603b      	str	r3, [r7, #0]
}
 80148bc:	bf00      	nop
 80148be:	e7fe      	b.n	80148be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80148c0:	f001 fa70 	bl	8015da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80148c4:	4b39      	ldr	r3, [pc, #228]	; (80149ac <xTaskResumeAll+0x118>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	3b01      	subs	r3, #1
 80148ca:	4a38      	ldr	r2, [pc, #224]	; (80149ac <xTaskResumeAll+0x118>)
 80148cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148ce:	4b37      	ldr	r3, [pc, #220]	; (80149ac <xTaskResumeAll+0x118>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d162      	bne.n	801499c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80148d6:	4b36      	ldr	r3, [pc, #216]	; (80149b0 <xTaskResumeAll+0x11c>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d05e      	beq.n	801499c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80148de:	e02f      	b.n	8014940 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148e0:	4b34      	ldr	r3, [pc, #208]	; (80149b4 <xTaskResumeAll+0x120>)
 80148e2:	68db      	ldr	r3, [r3, #12]
 80148e4:	68db      	ldr	r3, [r3, #12]
 80148e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	3318      	adds	r3, #24
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7fe fdd1 	bl	8013494 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	3304      	adds	r3, #4
 80148f6:	4618      	mov	r0, r3
 80148f8:	f7fe fdcc 	bl	8013494 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014900:	4b2d      	ldr	r3, [pc, #180]	; (80149b8 <xTaskResumeAll+0x124>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	429a      	cmp	r2, r3
 8014906:	d903      	bls.n	8014910 <xTaskResumeAll+0x7c>
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801490c:	4a2a      	ldr	r2, [pc, #168]	; (80149b8 <xTaskResumeAll+0x124>)
 801490e:	6013      	str	r3, [r2, #0]
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014914:	4613      	mov	r3, r2
 8014916:	009b      	lsls	r3, r3, #2
 8014918:	4413      	add	r3, r2
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	4a27      	ldr	r2, [pc, #156]	; (80149bc <xTaskResumeAll+0x128>)
 801491e:	441a      	add	r2, r3
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	3304      	adds	r3, #4
 8014924:	4619      	mov	r1, r3
 8014926:	4610      	mov	r0, r2
 8014928:	f7fe fd57 	bl	80133da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014930:	4b23      	ldr	r3, [pc, #140]	; (80149c0 <xTaskResumeAll+0x12c>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014936:	429a      	cmp	r2, r3
 8014938:	d302      	bcc.n	8014940 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801493a:	4b22      	ldr	r3, [pc, #136]	; (80149c4 <xTaskResumeAll+0x130>)
 801493c:	2201      	movs	r2, #1
 801493e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014940:	4b1c      	ldr	r3, [pc, #112]	; (80149b4 <xTaskResumeAll+0x120>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d1cb      	bne.n	80148e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d001      	beq.n	8014952 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801494e:	f000 fb55 	bl	8014ffc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014952:	4b1d      	ldr	r3, [pc, #116]	; (80149c8 <xTaskResumeAll+0x134>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d010      	beq.n	8014980 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801495e:	f000 f847 	bl	80149f0 <xTaskIncrementTick>
 8014962:	4603      	mov	r3, r0
 8014964:	2b00      	cmp	r3, #0
 8014966:	d002      	beq.n	801496e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014968:	4b16      	ldr	r3, [pc, #88]	; (80149c4 <xTaskResumeAll+0x130>)
 801496a:	2201      	movs	r2, #1
 801496c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	3b01      	subs	r3, #1
 8014972:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d1f1      	bne.n	801495e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 801497a:	4b13      	ldr	r3, [pc, #76]	; (80149c8 <xTaskResumeAll+0x134>)
 801497c:	2200      	movs	r2, #0
 801497e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014980:	4b10      	ldr	r3, [pc, #64]	; (80149c4 <xTaskResumeAll+0x130>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d009      	beq.n	801499c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014988:	2301      	movs	r3, #1
 801498a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801498c:	4b0f      	ldr	r3, [pc, #60]	; (80149cc <xTaskResumeAll+0x138>)
 801498e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014992:	601a      	str	r2, [r3, #0]
 8014994:	f3bf 8f4f 	dsb	sy
 8014998:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801499c:	f001 fa32 	bl	8015e04 <vPortExitCritical>

	return xAlreadyYielded;
 80149a0:	68bb      	ldr	r3, [r7, #8]
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3710      	adds	r7, #16
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}
 80149aa:	bf00      	nop
 80149ac:	20003084 	.word	0x20003084
 80149b0:	2000305c 	.word	0x2000305c
 80149b4:	2000301c 	.word	0x2000301c
 80149b8:	20003064 	.word	0x20003064
 80149bc:	20002b8c 	.word	0x20002b8c
 80149c0:	20002b88 	.word	0x20002b88
 80149c4:	20003070 	.word	0x20003070
 80149c8:	2000306c 	.word	0x2000306c
 80149cc:	e000ed04 	.word	0xe000ed04

080149d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80149d0:	b480      	push	{r7}
 80149d2:	b083      	sub	sp, #12
 80149d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80149d6:	4b05      	ldr	r3, [pc, #20]	; (80149ec <xTaskGetTickCount+0x1c>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80149dc:	687b      	ldr	r3, [r7, #4]
}
 80149de:	4618      	mov	r0, r3
 80149e0:	370c      	adds	r7, #12
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr
 80149ea:	bf00      	nop
 80149ec:	20003060 	.word	0x20003060

080149f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b086      	sub	sp, #24
 80149f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80149f6:	2300      	movs	r3, #0
 80149f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149fa:	4b4f      	ldr	r3, [pc, #316]	; (8014b38 <xTaskIncrementTick+0x148>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	f040 8089 	bne.w	8014b16 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014a04:	4b4d      	ldr	r3, [pc, #308]	; (8014b3c <xTaskIncrementTick+0x14c>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014a0c:	4a4b      	ldr	r2, [pc, #300]	; (8014b3c <xTaskIncrementTick+0x14c>)
 8014a0e:	693b      	ldr	r3, [r7, #16]
 8014a10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014a12:	693b      	ldr	r3, [r7, #16]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d120      	bne.n	8014a5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014a18:	4b49      	ldr	r3, [pc, #292]	; (8014b40 <xTaskIncrementTick+0x150>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d00a      	beq.n	8014a38 <xTaskIncrementTick+0x48>
	__asm volatile
 8014a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a26:	f383 8811 	msr	BASEPRI, r3
 8014a2a:	f3bf 8f6f 	isb	sy
 8014a2e:	f3bf 8f4f 	dsb	sy
 8014a32:	603b      	str	r3, [r7, #0]
}
 8014a34:	bf00      	nop
 8014a36:	e7fe      	b.n	8014a36 <xTaskIncrementTick+0x46>
 8014a38:	4b41      	ldr	r3, [pc, #260]	; (8014b40 <xTaskIncrementTick+0x150>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	60fb      	str	r3, [r7, #12]
 8014a3e:	4b41      	ldr	r3, [pc, #260]	; (8014b44 <xTaskIncrementTick+0x154>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	4a3f      	ldr	r2, [pc, #252]	; (8014b40 <xTaskIncrementTick+0x150>)
 8014a44:	6013      	str	r3, [r2, #0]
 8014a46:	4a3f      	ldr	r2, [pc, #252]	; (8014b44 <xTaskIncrementTick+0x154>)
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	6013      	str	r3, [r2, #0]
 8014a4c:	4b3e      	ldr	r3, [pc, #248]	; (8014b48 <xTaskIncrementTick+0x158>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	3301      	adds	r3, #1
 8014a52:	4a3d      	ldr	r2, [pc, #244]	; (8014b48 <xTaskIncrementTick+0x158>)
 8014a54:	6013      	str	r3, [r2, #0]
 8014a56:	f000 fad1 	bl	8014ffc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014a5a:	4b3c      	ldr	r3, [pc, #240]	; (8014b4c <xTaskIncrementTick+0x15c>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	693a      	ldr	r2, [r7, #16]
 8014a60:	429a      	cmp	r2, r3
 8014a62:	d349      	bcc.n	8014af8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a64:	4b36      	ldr	r3, [pc, #216]	; (8014b40 <xTaskIncrementTick+0x150>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d104      	bne.n	8014a78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a6e:	4b37      	ldr	r3, [pc, #220]	; (8014b4c <xTaskIncrementTick+0x15c>)
 8014a70:	f04f 32ff 	mov.w	r2, #4294967295
 8014a74:	601a      	str	r2, [r3, #0]
					break;
 8014a76:	e03f      	b.n	8014af8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a78:	4b31      	ldr	r3, [pc, #196]	; (8014b40 <xTaskIncrementTick+0x150>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	68db      	ldr	r3, [r3, #12]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	685b      	ldr	r3, [r3, #4]
 8014a86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014a88:	693a      	ldr	r2, [r7, #16]
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d203      	bcs.n	8014a98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014a90:	4a2e      	ldr	r2, [pc, #184]	; (8014b4c <xTaskIncrementTick+0x15c>)
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014a96:	e02f      	b.n	8014af8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	3304      	adds	r3, #4
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7fe fcf9 	bl	8013494 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d004      	beq.n	8014ab4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	3318      	adds	r3, #24
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7fe fcf0 	bl	8013494 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ab8:	4b25      	ldr	r3, [pc, #148]	; (8014b50 <xTaskIncrementTick+0x160>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d903      	bls.n	8014ac8 <xTaskIncrementTick+0xd8>
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ac4:	4a22      	ldr	r2, [pc, #136]	; (8014b50 <xTaskIncrementTick+0x160>)
 8014ac6:	6013      	str	r3, [r2, #0]
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014acc:	4613      	mov	r3, r2
 8014ace:	009b      	lsls	r3, r3, #2
 8014ad0:	4413      	add	r3, r2
 8014ad2:	009b      	lsls	r3, r3, #2
 8014ad4:	4a1f      	ldr	r2, [pc, #124]	; (8014b54 <xTaskIncrementTick+0x164>)
 8014ad6:	441a      	add	r2, r3
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	3304      	adds	r3, #4
 8014adc:	4619      	mov	r1, r3
 8014ade:	4610      	mov	r0, r2
 8014ae0:	f7fe fc7b 	bl	80133da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ae8:	4b1b      	ldr	r3, [pc, #108]	; (8014b58 <xTaskIncrementTick+0x168>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d3b8      	bcc.n	8014a64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014af2:	2301      	movs	r3, #1
 8014af4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014af6:	e7b5      	b.n	8014a64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014af8:	4b17      	ldr	r3, [pc, #92]	; (8014b58 <xTaskIncrementTick+0x168>)
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014afe:	4915      	ldr	r1, [pc, #84]	; (8014b54 <xTaskIncrementTick+0x164>)
 8014b00:	4613      	mov	r3, r2
 8014b02:	009b      	lsls	r3, r3, #2
 8014b04:	4413      	add	r3, r2
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	440b      	add	r3, r1
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	2b01      	cmp	r3, #1
 8014b0e:	d907      	bls.n	8014b20 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8014b10:	2301      	movs	r3, #1
 8014b12:	617b      	str	r3, [r7, #20]
 8014b14:	e004      	b.n	8014b20 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014b16:	4b11      	ldr	r3, [pc, #68]	; (8014b5c <xTaskIncrementTick+0x16c>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	4a0f      	ldr	r2, [pc, #60]	; (8014b5c <xTaskIncrementTick+0x16c>)
 8014b1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014b20:	4b0f      	ldr	r3, [pc, #60]	; (8014b60 <xTaskIncrementTick+0x170>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d001      	beq.n	8014b2c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8014b28:	2301      	movs	r3, #1
 8014b2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014b2c:	697b      	ldr	r3, [r7, #20]
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3718      	adds	r7, #24
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	20003084 	.word	0x20003084
 8014b3c:	20003060 	.word	0x20003060
 8014b40:	20003014 	.word	0x20003014
 8014b44:	20003018 	.word	0x20003018
 8014b48:	20003074 	.word	0x20003074
 8014b4c:	2000307c 	.word	0x2000307c
 8014b50:	20003064 	.word	0x20003064
 8014b54:	20002b8c 	.word	0x20002b8c
 8014b58:	20002b88 	.word	0x20002b88
 8014b5c:	2000306c 	.word	0x2000306c
 8014b60:	20003070 	.word	0x20003070

08014b64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014b64:	b480      	push	{r7}
 8014b66:	b085      	sub	sp, #20
 8014b68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014b6a:	4b28      	ldr	r3, [pc, #160]	; (8014c0c <vTaskSwitchContext+0xa8>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d003      	beq.n	8014b7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014b72:	4b27      	ldr	r3, [pc, #156]	; (8014c10 <vTaskSwitchContext+0xac>)
 8014b74:	2201      	movs	r2, #1
 8014b76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014b78:	e041      	b.n	8014bfe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014b7a:	4b25      	ldr	r3, [pc, #148]	; (8014c10 <vTaskSwitchContext+0xac>)
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b80:	4b24      	ldr	r3, [pc, #144]	; (8014c14 <vTaskSwitchContext+0xb0>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	60fb      	str	r3, [r7, #12]
 8014b86:	e010      	b.n	8014baa <vTaskSwitchContext+0x46>
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d10a      	bne.n	8014ba4 <vTaskSwitchContext+0x40>
	__asm volatile
 8014b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b92:	f383 8811 	msr	BASEPRI, r3
 8014b96:	f3bf 8f6f 	isb	sy
 8014b9a:	f3bf 8f4f 	dsb	sy
 8014b9e:	607b      	str	r3, [r7, #4]
}
 8014ba0:	bf00      	nop
 8014ba2:	e7fe      	b.n	8014ba2 <vTaskSwitchContext+0x3e>
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	3b01      	subs	r3, #1
 8014ba8:	60fb      	str	r3, [r7, #12]
 8014baa:	491b      	ldr	r1, [pc, #108]	; (8014c18 <vTaskSwitchContext+0xb4>)
 8014bac:	68fa      	ldr	r2, [r7, #12]
 8014bae:	4613      	mov	r3, r2
 8014bb0:	009b      	lsls	r3, r3, #2
 8014bb2:	4413      	add	r3, r2
 8014bb4:	009b      	lsls	r3, r3, #2
 8014bb6:	440b      	add	r3, r1
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d0e4      	beq.n	8014b88 <vTaskSwitchContext+0x24>
 8014bbe:	68fa      	ldr	r2, [r7, #12]
 8014bc0:	4613      	mov	r3, r2
 8014bc2:	009b      	lsls	r3, r3, #2
 8014bc4:	4413      	add	r3, r2
 8014bc6:	009b      	lsls	r3, r3, #2
 8014bc8:	4a13      	ldr	r2, [pc, #76]	; (8014c18 <vTaskSwitchContext+0xb4>)
 8014bca:	4413      	add	r3, r2
 8014bcc:	60bb      	str	r3, [r7, #8]
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	685b      	ldr	r3, [r3, #4]
 8014bd2:	685a      	ldr	r2, [r3, #4]
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	605a      	str	r2, [r3, #4]
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	685a      	ldr	r2, [r3, #4]
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	3308      	adds	r3, #8
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d104      	bne.n	8014bee <vTaskSwitchContext+0x8a>
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	685a      	ldr	r2, [r3, #4]
 8014bea:	68bb      	ldr	r3, [r7, #8]
 8014bec:	605a      	str	r2, [r3, #4]
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	685b      	ldr	r3, [r3, #4]
 8014bf2:	68db      	ldr	r3, [r3, #12]
 8014bf4:	4a09      	ldr	r2, [pc, #36]	; (8014c1c <vTaskSwitchContext+0xb8>)
 8014bf6:	6013      	str	r3, [r2, #0]
 8014bf8:	4a06      	ldr	r2, [pc, #24]	; (8014c14 <vTaskSwitchContext+0xb0>)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	6013      	str	r3, [r2, #0]
}
 8014bfe:	bf00      	nop
 8014c00:	3714      	adds	r7, #20
 8014c02:	46bd      	mov	sp, r7
 8014c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop
 8014c0c:	20003084 	.word	0x20003084
 8014c10:	20003070 	.word	0x20003070
 8014c14:	20003064 	.word	0x20003064
 8014c18:	20002b8c 	.word	0x20002b8c
 8014c1c:	20002b88 	.word	0x20002b88

08014c20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b084      	sub	sp, #16
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
 8014c28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d10a      	bne.n	8014c46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c34:	f383 8811 	msr	BASEPRI, r3
 8014c38:	f3bf 8f6f 	isb	sy
 8014c3c:	f3bf 8f4f 	dsb	sy
 8014c40:	60fb      	str	r3, [r7, #12]
}
 8014c42:	bf00      	nop
 8014c44:	e7fe      	b.n	8014c44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c46:	4b07      	ldr	r3, [pc, #28]	; (8014c64 <vTaskPlaceOnEventList+0x44>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	3318      	adds	r3, #24
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f7fe fbe7 	bl	8013422 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c54:	2101      	movs	r1, #1
 8014c56:	6838      	ldr	r0, [r7, #0]
 8014c58:	f000 fb7a 	bl	8015350 <prvAddCurrentTaskToDelayedList>
}
 8014c5c:	bf00      	nop
 8014c5e:	3710      	adds	r7, #16
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	20002b88 	.word	0x20002b88

08014c68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b086      	sub	sp, #24
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	60f8      	str	r0, [r7, #12]
 8014c70:	60b9      	str	r1, [r7, #8]
 8014c72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d10a      	bne.n	8014c90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c7e:	f383 8811 	msr	BASEPRI, r3
 8014c82:	f3bf 8f6f 	isb	sy
 8014c86:	f3bf 8f4f 	dsb	sy
 8014c8a:	617b      	str	r3, [r7, #20]
}
 8014c8c:	bf00      	nop
 8014c8e:	e7fe      	b.n	8014c8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c90:	4b0a      	ldr	r3, [pc, #40]	; (8014cbc <vTaskPlaceOnEventListRestricted+0x54>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	3318      	adds	r3, #24
 8014c96:	4619      	mov	r1, r3
 8014c98:	68f8      	ldr	r0, [r7, #12]
 8014c9a:	f7fe fb9e 	bl	80133da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d002      	beq.n	8014caa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ca8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014caa:	6879      	ldr	r1, [r7, #4]
 8014cac:	68b8      	ldr	r0, [r7, #8]
 8014cae:	f000 fb4f 	bl	8015350 <prvAddCurrentTaskToDelayedList>
	}
 8014cb2:	bf00      	nop
 8014cb4:	3718      	adds	r7, #24
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	20002b88 	.word	0x20002b88

08014cc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b086      	sub	sp, #24
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	68db      	ldr	r3, [r3, #12]
 8014ccc:	68db      	ldr	r3, [r3, #12]
 8014cce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d10a      	bne.n	8014cec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cda:	f383 8811 	msr	BASEPRI, r3
 8014cde:	f3bf 8f6f 	isb	sy
 8014ce2:	f3bf 8f4f 	dsb	sy
 8014ce6:	60fb      	str	r3, [r7, #12]
}
 8014ce8:	bf00      	nop
 8014cea:	e7fe      	b.n	8014cea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	3318      	adds	r3, #24
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f7fe fbcf 	bl	8013494 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cf6:	4b1e      	ldr	r3, [pc, #120]	; (8014d70 <xTaskRemoveFromEventList+0xb0>)
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d11d      	bne.n	8014d3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	3304      	adds	r3, #4
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7fe fbc6 	bl	8013494 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014d08:	693b      	ldr	r3, [r7, #16]
 8014d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d0c:	4b19      	ldr	r3, [pc, #100]	; (8014d74 <xTaskRemoveFromEventList+0xb4>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d903      	bls.n	8014d1c <xTaskRemoveFromEventList+0x5c>
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d18:	4a16      	ldr	r2, [pc, #88]	; (8014d74 <xTaskRemoveFromEventList+0xb4>)
 8014d1a:	6013      	str	r3, [r2, #0]
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d20:	4613      	mov	r3, r2
 8014d22:	009b      	lsls	r3, r3, #2
 8014d24:	4413      	add	r3, r2
 8014d26:	009b      	lsls	r3, r3, #2
 8014d28:	4a13      	ldr	r2, [pc, #76]	; (8014d78 <xTaskRemoveFromEventList+0xb8>)
 8014d2a:	441a      	add	r2, r3
 8014d2c:	693b      	ldr	r3, [r7, #16]
 8014d2e:	3304      	adds	r3, #4
 8014d30:	4619      	mov	r1, r3
 8014d32:	4610      	mov	r0, r2
 8014d34:	f7fe fb51 	bl	80133da <vListInsertEnd>
 8014d38:	e005      	b.n	8014d46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	3318      	adds	r3, #24
 8014d3e:	4619      	mov	r1, r3
 8014d40:	480e      	ldr	r0, [pc, #56]	; (8014d7c <xTaskRemoveFromEventList+0xbc>)
 8014d42:	f7fe fb4a 	bl	80133da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d4a:	4b0d      	ldr	r3, [pc, #52]	; (8014d80 <xTaskRemoveFromEventList+0xc0>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d905      	bls.n	8014d60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014d54:	2301      	movs	r3, #1
 8014d56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014d58:	4b0a      	ldr	r3, [pc, #40]	; (8014d84 <xTaskRemoveFromEventList+0xc4>)
 8014d5a:	2201      	movs	r2, #1
 8014d5c:	601a      	str	r2, [r3, #0]
 8014d5e:	e001      	b.n	8014d64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014d60:	2300      	movs	r3, #0
 8014d62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014d64:	697b      	ldr	r3, [r7, #20]
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3718      	adds	r7, #24
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	20003084 	.word	0x20003084
 8014d74:	20003064 	.word	0x20003064
 8014d78:	20002b8c 	.word	0x20002b8c
 8014d7c:	2000301c 	.word	0x2000301c
 8014d80:	20002b88 	.word	0x20002b88
 8014d84:	20003070 	.word	0x20003070

08014d88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014d88:	b480      	push	{r7}
 8014d8a:	b083      	sub	sp, #12
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014d90:	4b06      	ldr	r3, [pc, #24]	; (8014dac <vTaskInternalSetTimeOutState+0x24>)
 8014d92:	681a      	ldr	r2, [r3, #0]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014d98:	4b05      	ldr	r3, [pc, #20]	; (8014db0 <vTaskInternalSetTimeOutState+0x28>)
 8014d9a:	681a      	ldr	r2, [r3, #0]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	605a      	str	r2, [r3, #4]
}
 8014da0:	bf00      	nop
 8014da2:	370c      	adds	r7, #12
 8014da4:	46bd      	mov	sp, r7
 8014da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014daa:	4770      	bx	lr
 8014dac:	20003074 	.word	0x20003074
 8014db0:	20003060 	.word	0x20003060

08014db4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b088      	sub	sp, #32
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
 8014dbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d10a      	bne.n	8014dda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dc8:	f383 8811 	msr	BASEPRI, r3
 8014dcc:	f3bf 8f6f 	isb	sy
 8014dd0:	f3bf 8f4f 	dsb	sy
 8014dd4:	613b      	str	r3, [r7, #16]
}
 8014dd6:	bf00      	nop
 8014dd8:	e7fe      	b.n	8014dd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d10a      	bne.n	8014df6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014de4:	f383 8811 	msr	BASEPRI, r3
 8014de8:	f3bf 8f6f 	isb	sy
 8014dec:	f3bf 8f4f 	dsb	sy
 8014df0:	60fb      	str	r3, [r7, #12]
}
 8014df2:	bf00      	nop
 8014df4:	e7fe      	b.n	8014df4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014df6:	f000 ffd5 	bl	8015da4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014dfa:	4b1d      	ldr	r3, [pc, #116]	; (8014e70 <xTaskCheckForTimeOut+0xbc>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	685b      	ldr	r3, [r3, #4]
 8014e04:	69ba      	ldr	r2, [r7, #24]
 8014e06:	1ad3      	subs	r3, r2, r3
 8014e08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e12:	d102      	bne.n	8014e1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014e14:	2300      	movs	r3, #0
 8014e16:	61fb      	str	r3, [r7, #28]
 8014e18:	e023      	b.n	8014e62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	681a      	ldr	r2, [r3, #0]
 8014e1e:	4b15      	ldr	r3, [pc, #84]	; (8014e74 <xTaskCheckForTimeOut+0xc0>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	429a      	cmp	r2, r3
 8014e24:	d007      	beq.n	8014e36 <xTaskCheckForTimeOut+0x82>
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	685b      	ldr	r3, [r3, #4]
 8014e2a:	69ba      	ldr	r2, [r7, #24]
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d302      	bcc.n	8014e36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014e30:	2301      	movs	r3, #1
 8014e32:	61fb      	str	r3, [r7, #28]
 8014e34:	e015      	b.n	8014e62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	697a      	ldr	r2, [r7, #20]
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	d20b      	bcs.n	8014e58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	1ad2      	subs	r2, r2, r3
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f7ff ff9b 	bl	8014d88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014e52:	2300      	movs	r3, #0
 8014e54:	61fb      	str	r3, [r7, #28]
 8014e56:	e004      	b.n	8014e62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014e5e:	2301      	movs	r3, #1
 8014e60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014e62:	f000 ffcf 	bl	8015e04 <vPortExitCritical>

	return xReturn;
 8014e66:	69fb      	ldr	r3, [r7, #28]
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3720      	adds	r7, #32
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	20003060 	.word	0x20003060
 8014e74:	20003074 	.word	0x20003074

08014e78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014e78:	b480      	push	{r7}
 8014e7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014e7c:	4b03      	ldr	r3, [pc, #12]	; (8014e8c <vTaskMissedYield+0x14>)
 8014e7e:	2201      	movs	r2, #1
 8014e80:	601a      	str	r2, [r3, #0]
}
 8014e82:	bf00      	nop
 8014e84:	46bd      	mov	sp, r7
 8014e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8a:	4770      	bx	lr
 8014e8c:	20003070 	.word	0x20003070

08014e90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014e98:	f000 f852 	bl	8014f40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014e9c:	4b06      	ldr	r3, [pc, #24]	; (8014eb8 <prvIdleTask+0x28>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	2b01      	cmp	r3, #1
 8014ea2:	d9f9      	bls.n	8014e98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014ea4:	4b05      	ldr	r3, [pc, #20]	; (8014ebc <prvIdleTask+0x2c>)
 8014ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014eaa:	601a      	str	r2, [r3, #0]
 8014eac:	f3bf 8f4f 	dsb	sy
 8014eb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014eb4:	e7f0      	b.n	8014e98 <prvIdleTask+0x8>
 8014eb6:	bf00      	nop
 8014eb8:	20002b8c 	.word	0x20002b8c
 8014ebc:	e000ed04 	.word	0xe000ed04

08014ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	607b      	str	r3, [r7, #4]
 8014eca:	e00c      	b.n	8014ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014ecc:	687a      	ldr	r2, [r7, #4]
 8014ece:	4613      	mov	r3, r2
 8014ed0:	009b      	lsls	r3, r3, #2
 8014ed2:	4413      	add	r3, r2
 8014ed4:	009b      	lsls	r3, r3, #2
 8014ed6:	4a12      	ldr	r2, [pc, #72]	; (8014f20 <prvInitialiseTaskLists+0x60>)
 8014ed8:	4413      	add	r3, r2
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7fe fa50 	bl	8013380 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	607b      	str	r3, [r7, #4]
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2b37      	cmp	r3, #55	; 0x37
 8014eea:	d9ef      	bls.n	8014ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014eec:	480d      	ldr	r0, [pc, #52]	; (8014f24 <prvInitialiseTaskLists+0x64>)
 8014eee:	f7fe fa47 	bl	8013380 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014ef2:	480d      	ldr	r0, [pc, #52]	; (8014f28 <prvInitialiseTaskLists+0x68>)
 8014ef4:	f7fe fa44 	bl	8013380 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014ef8:	480c      	ldr	r0, [pc, #48]	; (8014f2c <prvInitialiseTaskLists+0x6c>)
 8014efa:	f7fe fa41 	bl	8013380 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014efe:	480c      	ldr	r0, [pc, #48]	; (8014f30 <prvInitialiseTaskLists+0x70>)
 8014f00:	f7fe fa3e 	bl	8013380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014f04:	480b      	ldr	r0, [pc, #44]	; (8014f34 <prvInitialiseTaskLists+0x74>)
 8014f06:	f7fe fa3b 	bl	8013380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014f0a:	4b0b      	ldr	r3, [pc, #44]	; (8014f38 <prvInitialiseTaskLists+0x78>)
 8014f0c:	4a05      	ldr	r2, [pc, #20]	; (8014f24 <prvInitialiseTaskLists+0x64>)
 8014f0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014f10:	4b0a      	ldr	r3, [pc, #40]	; (8014f3c <prvInitialiseTaskLists+0x7c>)
 8014f12:	4a05      	ldr	r2, [pc, #20]	; (8014f28 <prvInitialiseTaskLists+0x68>)
 8014f14:	601a      	str	r2, [r3, #0]
}
 8014f16:	bf00      	nop
 8014f18:	3708      	adds	r7, #8
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}
 8014f1e:	bf00      	nop
 8014f20:	20002b8c 	.word	0x20002b8c
 8014f24:	20002fec 	.word	0x20002fec
 8014f28:	20003000 	.word	0x20003000
 8014f2c:	2000301c 	.word	0x2000301c
 8014f30:	20003030 	.word	0x20003030
 8014f34:	20003048 	.word	0x20003048
 8014f38:	20003014 	.word	0x20003014
 8014f3c:	20003018 	.word	0x20003018

08014f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b082      	sub	sp, #8
 8014f44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f46:	e019      	b.n	8014f7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014f48:	f000 ff2c 	bl	8015da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f4c:	4b10      	ldr	r3, [pc, #64]	; (8014f90 <prvCheckTasksWaitingTermination+0x50>)
 8014f4e:	68db      	ldr	r3, [r3, #12]
 8014f50:	68db      	ldr	r3, [r3, #12]
 8014f52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	3304      	adds	r3, #4
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f7fe fa9b 	bl	8013494 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014f5e:	4b0d      	ldr	r3, [pc, #52]	; (8014f94 <prvCheckTasksWaitingTermination+0x54>)
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	3b01      	subs	r3, #1
 8014f64:	4a0b      	ldr	r2, [pc, #44]	; (8014f94 <prvCheckTasksWaitingTermination+0x54>)
 8014f66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014f68:	4b0b      	ldr	r3, [pc, #44]	; (8014f98 <prvCheckTasksWaitingTermination+0x58>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	3b01      	subs	r3, #1
 8014f6e:	4a0a      	ldr	r2, [pc, #40]	; (8014f98 <prvCheckTasksWaitingTermination+0x58>)
 8014f70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014f72:	f000 ff47 	bl	8015e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014f76:	6878      	ldr	r0, [r7, #4]
 8014f78:	f000 f810 	bl	8014f9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f7c:	4b06      	ldr	r3, [pc, #24]	; (8014f98 <prvCheckTasksWaitingTermination+0x58>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d1e1      	bne.n	8014f48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014f84:	bf00      	nop
 8014f86:	bf00      	nop
 8014f88:	3708      	adds	r7, #8
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}
 8014f8e:	bf00      	nop
 8014f90:	20003030 	.word	0x20003030
 8014f94:	2000305c 	.word	0x2000305c
 8014f98:	20003044 	.word	0x20003044

08014f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b084      	sub	sp, #16
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d108      	bne.n	8014fc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f001 f8dc 	bl	8016170 <vPortFree>
				vPortFree( pxTCB );
 8014fb8:	6878      	ldr	r0, [r7, #4]
 8014fba:	f001 f8d9 	bl	8016170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014fbe:	e018      	b.n	8014ff2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014fc6:	2b01      	cmp	r3, #1
 8014fc8:	d103      	bne.n	8014fd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f001 f8d0 	bl	8016170 <vPortFree>
	}
 8014fd0:	e00f      	b.n	8014ff2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014fd8:	2b02      	cmp	r3, #2
 8014fda:	d00a      	beq.n	8014ff2 <prvDeleteTCB+0x56>
	__asm volatile
 8014fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fe0:	f383 8811 	msr	BASEPRI, r3
 8014fe4:	f3bf 8f6f 	isb	sy
 8014fe8:	f3bf 8f4f 	dsb	sy
 8014fec:	60fb      	str	r3, [r7, #12]
}
 8014fee:	bf00      	nop
 8014ff0:	e7fe      	b.n	8014ff0 <prvDeleteTCB+0x54>
	}
 8014ff2:	bf00      	nop
 8014ff4:	3710      	adds	r7, #16
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}
	...

08014ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	b083      	sub	sp, #12
 8015000:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015002:	4b0c      	ldr	r3, [pc, #48]	; (8015034 <prvResetNextTaskUnblockTime+0x38>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d104      	bne.n	8015016 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801500c:	4b0a      	ldr	r3, [pc, #40]	; (8015038 <prvResetNextTaskUnblockTime+0x3c>)
 801500e:	f04f 32ff 	mov.w	r2, #4294967295
 8015012:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015014:	e008      	b.n	8015028 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015016:	4b07      	ldr	r3, [pc, #28]	; (8015034 <prvResetNextTaskUnblockTime+0x38>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	68db      	ldr	r3, [r3, #12]
 801501c:	68db      	ldr	r3, [r3, #12]
 801501e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	4a04      	ldr	r2, [pc, #16]	; (8015038 <prvResetNextTaskUnblockTime+0x3c>)
 8015026:	6013      	str	r3, [r2, #0]
}
 8015028:	bf00      	nop
 801502a:	370c      	adds	r7, #12
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr
 8015034:	20003014 	.word	0x20003014
 8015038:	2000307c 	.word	0x2000307c

0801503c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801503c:	b480      	push	{r7}
 801503e:	b083      	sub	sp, #12
 8015040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015042:	4b0b      	ldr	r3, [pc, #44]	; (8015070 <xTaskGetSchedulerState+0x34>)
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d102      	bne.n	8015050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801504a:	2301      	movs	r3, #1
 801504c:	607b      	str	r3, [r7, #4]
 801504e:	e008      	b.n	8015062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015050:	4b08      	ldr	r3, [pc, #32]	; (8015074 <xTaskGetSchedulerState+0x38>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d102      	bne.n	801505e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015058:	2302      	movs	r3, #2
 801505a:	607b      	str	r3, [r7, #4]
 801505c:	e001      	b.n	8015062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801505e:	2300      	movs	r3, #0
 8015060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015062:	687b      	ldr	r3, [r7, #4]
	}
 8015064:	4618      	mov	r0, r3
 8015066:	370c      	adds	r7, #12
 8015068:	46bd      	mov	sp, r7
 801506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506e:	4770      	bx	lr
 8015070:	20003068 	.word	0x20003068
 8015074:	20003084 	.word	0x20003084

08015078 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015078:	b580      	push	{r7, lr}
 801507a:	b084      	sub	sp, #16
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015084:	2300      	movs	r3, #0
 8015086:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d051      	beq.n	8015132 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801508e:	68bb      	ldr	r3, [r7, #8]
 8015090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015092:	4b2a      	ldr	r3, [pc, #168]	; (801513c <xTaskPriorityInherit+0xc4>)
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015098:	429a      	cmp	r2, r3
 801509a:	d241      	bcs.n	8015120 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801509c:	68bb      	ldr	r3, [r7, #8]
 801509e:	699b      	ldr	r3, [r3, #24]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	db06      	blt.n	80150b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150a4:	4b25      	ldr	r3, [pc, #148]	; (801513c <xTaskPriorityInherit+0xc4>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80150ae:	68bb      	ldr	r3, [r7, #8]
 80150b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80150b2:	68bb      	ldr	r3, [r7, #8]
 80150b4:	6959      	ldr	r1, [r3, #20]
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150ba:	4613      	mov	r3, r2
 80150bc:	009b      	lsls	r3, r3, #2
 80150be:	4413      	add	r3, r2
 80150c0:	009b      	lsls	r3, r3, #2
 80150c2:	4a1f      	ldr	r2, [pc, #124]	; (8015140 <xTaskPriorityInherit+0xc8>)
 80150c4:	4413      	add	r3, r2
 80150c6:	4299      	cmp	r1, r3
 80150c8:	d122      	bne.n	8015110 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150ca:	68bb      	ldr	r3, [r7, #8]
 80150cc:	3304      	adds	r3, #4
 80150ce:	4618      	mov	r0, r3
 80150d0:	f7fe f9e0 	bl	8013494 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80150d4:	4b19      	ldr	r3, [pc, #100]	; (801513c <xTaskPriorityInherit+0xc4>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150e2:	4b18      	ldr	r3, [pc, #96]	; (8015144 <xTaskPriorityInherit+0xcc>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d903      	bls.n	80150f2 <xTaskPriorityInherit+0x7a>
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ee:	4a15      	ldr	r2, [pc, #84]	; (8015144 <xTaskPriorityInherit+0xcc>)
 80150f0:	6013      	str	r3, [r2, #0]
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150f6:	4613      	mov	r3, r2
 80150f8:	009b      	lsls	r3, r3, #2
 80150fa:	4413      	add	r3, r2
 80150fc:	009b      	lsls	r3, r3, #2
 80150fe:	4a10      	ldr	r2, [pc, #64]	; (8015140 <xTaskPriorityInherit+0xc8>)
 8015100:	441a      	add	r2, r3
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	3304      	adds	r3, #4
 8015106:	4619      	mov	r1, r3
 8015108:	4610      	mov	r0, r2
 801510a:	f7fe f966 	bl	80133da <vListInsertEnd>
 801510e:	e004      	b.n	801511a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015110:	4b0a      	ldr	r3, [pc, #40]	; (801513c <xTaskPriorityInherit+0xc4>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015116:	68bb      	ldr	r3, [r7, #8]
 8015118:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801511a:	2301      	movs	r3, #1
 801511c:	60fb      	str	r3, [r7, #12]
 801511e:	e008      	b.n	8015132 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015120:	68bb      	ldr	r3, [r7, #8]
 8015122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015124:	4b05      	ldr	r3, [pc, #20]	; (801513c <xTaskPriorityInherit+0xc4>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801512a:	429a      	cmp	r2, r3
 801512c:	d201      	bcs.n	8015132 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801512e:	2301      	movs	r3, #1
 8015130:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015132:	68fb      	ldr	r3, [r7, #12]
	}
 8015134:	4618      	mov	r0, r3
 8015136:	3710      	adds	r7, #16
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	20002b88 	.word	0x20002b88
 8015140:	20002b8c 	.word	0x20002b8c
 8015144:	20003064 	.word	0x20003064

08015148 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015148:	b580      	push	{r7, lr}
 801514a:	b086      	sub	sp, #24
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015154:	2300      	movs	r3, #0
 8015156:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d056      	beq.n	801520c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801515e:	4b2e      	ldr	r3, [pc, #184]	; (8015218 <xTaskPriorityDisinherit+0xd0>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	693a      	ldr	r2, [r7, #16]
 8015164:	429a      	cmp	r2, r3
 8015166:	d00a      	beq.n	801517e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801516c:	f383 8811 	msr	BASEPRI, r3
 8015170:	f3bf 8f6f 	isb	sy
 8015174:	f3bf 8f4f 	dsb	sy
 8015178:	60fb      	str	r3, [r7, #12]
}
 801517a:	bf00      	nop
 801517c:	e7fe      	b.n	801517c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801517e:	693b      	ldr	r3, [r7, #16]
 8015180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015182:	2b00      	cmp	r3, #0
 8015184:	d10a      	bne.n	801519c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801518a:	f383 8811 	msr	BASEPRI, r3
 801518e:	f3bf 8f6f 	isb	sy
 8015192:	f3bf 8f4f 	dsb	sy
 8015196:	60bb      	str	r3, [r7, #8]
}
 8015198:	bf00      	nop
 801519a:	e7fe      	b.n	801519a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151a0:	1e5a      	subs	r2, r3, #1
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80151a6:	693b      	ldr	r3, [r7, #16]
 80151a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151aa:	693b      	ldr	r3, [r7, #16]
 80151ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d02c      	beq.n	801520c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d128      	bne.n	801520c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	3304      	adds	r3, #4
 80151be:	4618      	mov	r0, r3
 80151c0:	f7fe f968 	bl	8013494 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80151d8:	693b      	ldr	r3, [r7, #16]
 80151da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151dc:	4b0f      	ldr	r3, [pc, #60]	; (801521c <xTaskPriorityDisinherit+0xd4>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d903      	bls.n	80151ec <xTaskPriorityDisinherit+0xa4>
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151e8:	4a0c      	ldr	r2, [pc, #48]	; (801521c <xTaskPriorityDisinherit+0xd4>)
 80151ea:	6013      	str	r3, [r2, #0]
 80151ec:	693b      	ldr	r3, [r7, #16]
 80151ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151f0:	4613      	mov	r3, r2
 80151f2:	009b      	lsls	r3, r3, #2
 80151f4:	4413      	add	r3, r2
 80151f6:	009b      	lsls	r3, r3, #2
 80151f8:	4a09      	ldr	r2, [pc, #36]	; (8015220 <xTaskPriorityDisinherit+0xd8>)
 80151fa:	441a      	add	r2, r3
 80151fc:	693b      	ldr	r3, [r7, #16]
 80151fe:	3304      	adds	r3, #4
 8015200:	4619      	mov	r1, r3
 8015202:	4610      	mov	r0, r2
 8015204:	f7fe f8e9 	bl	80133da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015208:	2301      	movs	r3, #1
 801520a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801520c:	697b      	ldr	r3, [r7, #20]
	}
 801520e:	4618      	mov	r0, r3
 8015210:	3718      	adds	r7, #24
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}
 8015216:	bf00      	nop
 8015218:	20002b88 	.word	0x20002b88
 801521c:	20003064 	.word	0x20003064
 8015220:	20002b8c 	.word	0x20002b8c

08015224 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015224:	b580      	push	{r7, lr}
 8015226:	b088      	sub	sp, #32
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
 801522c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015232:	2301      	movs	r3, #1
 8015234:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d06a      	beq.n	8015312 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801523c:	69bb      	ldr	r3, [r7, #24]
 801523e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015240:	2b00      	cmp	r3, #0
 8015242:	d10a      	bne.n	801525a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8015244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015248:	f383 8811 	msr	BASEPRI, r3
 801524c:	f3bf 8f6f 	isb	sy
 8015250:	f3bf 8f4f 	dsb	sy
 8015254:	60fb      	str	r3, [r7, #12]
}
 8015256:	bf00      	nop
 8015258:	e7fe      	b.n	8015258 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801525a:	69bb      	ldr	r3, [r7, #24]
 801525c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801525e:	683a      	ldr	r2, [r7, #0]
 8015260:	429a      	cmp	r2, r3
 8015262:	d902      	bls.n	801526a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015264:	683b      	ldr	r3, [r7, #0]
 8015266:	61fb      	str	r3, [r7, #28]
 8015268:	e002      	b.n	8015270 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801526a:	69bb      	ldr	r3, [r7, #24]
 801526c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801526e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015270:	69bb      	ldr	r3, [r7, #24]
 8015272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015274:	69fa      	ldr	r2, [r7, #28]
 8015276:	429a      	cmp	r2, r3
 8015278:	d04b      	beq.n	8015312 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801527a:	69bb      	ldr	r3, [r7, #24]
 801527c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801527e:	697a      	ldr	r2, [r7, #20]
 8015280:	429a      	cmp	r2, r3
 8015282:	d146      	bne.n	8015312 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015284:	4b25      	ldr	r3, [pc, #148]	; (801531c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	69ba      	ldr	r2, [r7, #24]
 801528a:	429a      	cmp	r2, r3
 801528c:	d10a      	bne.n	80152a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015292:	f383 8811 	msr	BASEPRI, r3
 8015296:	f3bf 8f6f 	isb	sy
 801529a:	f3bf 8f4f 	dsb	sy
 801529e:	60bb      	str	r3, [r7, #8]
}
 80152a0:	bf00      	nop
 80152a2:	e7fe      	b.n	80152a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80152aa:	69bb      	ldr	r3, [r7, #24]
 80152ac:	69fa      	ldr	r2, [r7, #28]
 80152ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80152b0:	69bb      	ldr	r3, [r7, #24]
 80152b2:	699b      	ldr	r3, [r3, #24]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	db04      	blt.n	80152c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80152b8:	69fb      	ldr	r3, [r7, #28]
 80152ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80152be:	69bb      	ldr	r3, [r7, #24]
 80152c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	6959      	ldr	r1, [r3, #20]
 80152c6:	693a      	ldr	r2, [r7, #16]
 80152c8:	4613      	mov	r3, r2
 80152ca:	009b      	lsls	r3, r3, #2
 80152cc:	4413      	add	r3, r2
 80152ce:	009b      	lsls	r3, r3, #2
 80152d0:	4a13      	ldr	r2, [pc, #76]	; (8015320 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80152d2:	4413      	add	r3, r2
 80152d4:	4299      	cmp	r1, r3
 80152d6:	d11c      	bne.n	8015312 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80152d8:	69bb      	ldr	r3, [r7, #24]
 80152da:	3304      	adds	r3, #4
 80152dc:	4618      	mov	r0, r3
 80152de:	f7fe f8d9 	bl	8013494 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80152e2:	69bb      	ldr	r3, [r7, #24]
 80152e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152e6:	4b0f      	ldr	r3, [pc, #60]	; (8015324 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d903      	bls.n	80152f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80152ee:	69bb      	ldr	r3, [r7, #24]
 80152f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152f2:	4a0c      	ldr	r2, [pc, #48]	; (8015324 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80152f4:	6013      	str	r3, [r2, #0]
 80152f6:	69bb      	ldr	r3, [r7, #24]
 80152f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152fa:	4613      	mov	r3, r2
 80152fc:	009b      	lsls	r3, r3, #2
 80152fe:	4413      	add	r3, r2
 8015300:	009b      	lsls	r3, r3, #2
 8015302:	4a07      	ldr	r2, [pc, #28]	; (8015320 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015304:	441a      	add	r2, r3
 8015306:	69bb      	ldr	r3, [r7, #24]
 8015308:	3304      	adds	r3, #4
 801530a:	4619      	mov	r1, r3
 801530c:	4610      	mov	r0, r2
 801530e:	f7fe f864 	bl	80133da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015312:	bf00      	nop
 8015314:	3720      	adds	r7, #32
 8015316:	46bd      	mov	sp, r7
 8015318:	bd80      	pop	{r7, pc}
 801531a:	bf00      	nop
 801531c:	20002b88 	.word	0x20002b88
 8015320:	20002b8c 	.word	0x20002b8c
 8015324:	20003064 	.word	0x20003064

08015328 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015328:	b480      	push	{r7}
 801532a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801532c:	4b07      	ldr	r3, [pc, #28]	; (801534c <pvTaskIncrementMutexHeldCount+0x24>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d004      	beq.n	801533e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015334:	4b05      	ldr	r3, [pc, #20]	; (801534c <pvTaskIncrementMutexHeldCount+0x24>)
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801533a:	3201      	adds	r2, #1
 801533c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801533e:	4b03      	ldr	r3, [pc, #12]	; (801534c <pvTaskIncrementMutexHeldCount+0x24>)
 8015340:	681b      	ldr	r3, [r3, #0]
	}
 8015342:	4618      	mov	r0, r3
 8015344:	46bd      	mov	sp, r7
 8015346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534a:	4770      	bx	lr
 801534c:	20002b88 	.word	0x20002b88

08015350 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b084      	sub	sp, #16
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
 8015358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801535a:	4b21      	ldr	r3, [pc, #132]	; (80153e0 <prvAddCurrentTaskToDelayedList+0x90>)
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015360:	4b20      	ldr	r3, [pc, #128]	; (80153e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	3304      	adds	r3, #4
 8015366:	4618      	mov	r0, r3
 8015368:	f7fe f894 	bl	8013494 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015372:	d10a      	bne.n	801538a <prvAddCurrentTaskToDelayedList+0x3a>
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d007      	beq.n	801538a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801537a:	4b1a      	ldr	r3, [pc, #104]	; (80153e4 <prvAddCurrentTaskToDelayedList+0x94>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	3304      	adds	r3, #4
 8015380:	4619      	mov	r1, r3
 8015382:	4819      	ldr	r0, [pc, #100]	; (80153e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8015384:	f7fe f829 	bl	80133da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015388:	e026      	b.n	80153d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801538a:	68fa      	ldr	r2, [r7, #12]
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	4413      	add	r3, r2
 8015390:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015392:	4b14      	ldr	r3, [pc, #80]	; (80153e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	68ba      	ldr	r2, [r7, #8]
 8015398:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801539a:	68ba      	ldr	r2, [r7, #8]
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	429a      	cmp	r2, r3
 80153a0:	d209      	bcs.n	80153b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153a2:	4b12      	ldr	r3, [pc, #72]	; (80153ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80153a4:	681a      	ldr	r2, [r3, #0]
 80153a6:	4b0f      	ldr	r3, [pc, #60]	; (80153e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	3304      	adds	r3, #4
 80153ac:	4619      	mov	r1, r3
 80153ae:	4610      	mov	r0, r2
 80153b0:	f7fe f837 	bl	8013422 <vListInsert>
}
 80153b4:	e010      	b.n	80153d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153b6:	4b0e      	ldr	r3, [pc, #56]	; (80153f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	4b0a      	ldr	r3, [pc, #40]	; (80153e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	3304      	adds	r3, #4
 80153c0:	4619      	mov	r1, r3
 80153c2:	4610      	mov	r0, r2
 80153c4:	f7fe f82d 	bl	8013422 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80153c8:	4b0a      	ldr	r3, [pc, #40]	; (80153f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	68ba      	ldr	r2, [r7, #8]
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d202      	bcs.n	80153d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80153d2:	4a08      	ldr	r2, [pc, #32]	; (80153f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80153d4:	68bb      	ldr	r3, [r7, #8]
 80153d6:	6013      	str	r3, [r2, #0]
}
 80153d8:	bf00      	nop
 80153da:	3710      	adds	r7, #16
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}
 80153e0:	20003060 	.word	0x20003060
 80153e4:	20002b88 	.word	0x20002b88
 80153e8:	20003048 	.word	0x20003048
 80153ec:	20003018 	.word	0x20003018
 80153f0:	20003014 	.word	0x20003014
 80153f4:	2000307c 	.word	0x2000307c

080153f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b08a      	sub	sp, #40	; 0x28
 80153fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80153fe:	2300      	movs	r3, #0
 8015400:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015402:	f000 fb63 	bl	8015acc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015406:	4b1c      	ldr	r3, [pc, #112]	; (8015478 <xTimerCreateTimerTask+0x80>)
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d021      	beq.n	8015452 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801540e:	2300      	movs	r3, #0
 8015410:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015412:	2300      	movs	r3, #0
 8015414:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015416:	1d3a      	adds	r2, r7, #4
 8015418:	f107 0108 	add.w	r1, r7, #8
 801541c:	f107 030c 	add.w	r3, r7, #12
 8015420:	4618      	mov	r0, r3
 8015422:	f7fd ff93 	bl	801334c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015426:	6879      	ldr	r1, [r7, #4]
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	68fa      	ldr	r2, [r7, #12]
 801542c:	9202      	str	r2, [sp, #8]
 801542e:	9301      	str	r3, [sp, #4]
 8015430:	2306      	movs	r3, #6
 8015432:	9300      	str	r3, [sp, #0]
 8015434:	2300      	movs	r3, #0
 8015436:	460a      	mov	r2, r1
 8015438:	4910      	ldr	r1, [pc, #64]	; (801547c <xTimerCreateTimerTask+0x84>)
 801543a:	4811      	ldr	r0, [pc, #68]	; (8015480 <xTimerCreateTimerTask+0x88>)
 801543c:	f7fe ffe0 	bl	8014400 <xTaskCreateStatic>
 8015440:	4603      	mov	r3, r0
 8015442:	4a10      	ldr	r2, [pc, #64]	; (8015484 <xTimerCreateTimerTask+0x8c>)
 8015444:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015446:	4b0f      	ldr	r3, [pc, #60]	; (8015484 <xTimerCreateTimerTask+0x8c>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d001      	beq.n	8015452 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801544e:	2301      	movs	r3, #1
 8015450:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d10a      	bne.n	801546e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801545c:	f383 8811 	msr	BASEPRI, r3
 8015460:	f3bf 8f6f 	isb	sy
 8015464:	f3bf 8f4f 	dsb	sy
 8015468:	613b      	str	r3, [r7, #16]
}
 801546a:	bf00      	nop
 801546c:	e7fe      	b.n	801546c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801546e:	697b      	ldr	r3, [r7, #20]
}
 8015470:	4618      	mov	r0, r3
 8015472:	3718      	adds	r7, #24
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}
 8015478:	200030b8 	.word	0x200030b8
 801547c:	08018a88 	.word	0x08018a88
 8015480:	08015675 	.word	0x08015675
 8015484:	200030bc 	.word	0x200030bc

08015488 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8015488:	b580      	push	{r7, lr}
 801548a:	b088      	sub	sp, #32
 801548c:	af02      	add	r7, sp, #8
 801548e:	60f8      	str	r0, [r7, #12]
 8015490:	60b9      	str	r1, [r7, #8]
 8015492:	607a      	str	r2, [r7, #4]
 8015494:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8015496:	202c      	movs	r0, #44	; 0x2c
 8015498:	f000 fda6 	bl	8015fe8 <pvPortMalloc>
 801549c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d00d      	beq.n	80154c0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	2200      	movs	r2, #0
 80154a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	9301      	str	r3, [sp, #4]
 80154b0:	6a3b      	ldr	r3, [r7, #32]
 80154b2:	9300      	str	r3, [sp, #0]
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	687a      	ldr	r2, [r7, #4]
 80154b8:	68b9      	ldr	r1, [r7, #8]
 80154ba:	68f8      	ldr	r0, [r7, #12]
 80154bc:	f000 f805 	bl	80154ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80154c0:	697b      	ldr	r3, [r7, #20]
	}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3718      	adds	r7, #24
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}

080154ca <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80154ca:	b580      	push	{r7, lr}
 80154cc:	b086      	sub	sp, #24
 80154ce:	af00      	add	r7, sp, #0
 80154d0:	60f8      	str	r0, [r7, #12]
 80154d2:	60b9      	str	r1, [r7, #8]
 80154d4:	607a      	str	r2, [r7, #4]
 80154d6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d10a      	bne.n	80154f4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80154de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154e2:	f383 8811 	msr	BASEPRI, r3
 80154e6:	f3bf 8f6f 	isb	sy
 80154ea:	f3bf 8f4f 	dsb	sy
 80154ee:	617b      	str	r3, [r7, #20]
}
 80154f0:	bf00      	nop
 80154f2:	e7fe      	b.n	80154f2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80154f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d01e      	beq.n	8015538 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80154fa:	f000 fae7 	bl	8015acc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80154fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015500:	68fa      	ldr	r2, [r7, #12]
 8015502:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015506:	68ba      	ldr	r2, [r7, #8]
 8015508:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801550c:	683a      	ldr	r2, [r7, #0]
 801550e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015512:	6a3a      	ldr	r2, [r7, #32]
 8015514:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015518:	3304      	adds	r3, #4
 801551a:	4618      	mov	r0, r3
 801551c:	f7fd ff50 	bl	80133c0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d008      	beq.n	8015538 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8015526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801552c:	f043 0304 	orr.w	r3, r3, #4
 8015530:	b2da      	uxtb	r2, r3
 8015532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015534:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8015538:	bf00      	nop
 801553a:	3718      	adds	r7, #24
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}

08015540 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b08a      	sub	sp, #40	; 0x28
 8015544:	af00      	add	r7, sp, #0
 8015546:	60f8      	str	r0, [r7, #12]
 8015548:	60b9      	str	r1, [r7, #8]
 801554a:	607a      	str	r2, [r7, #4]
 801554c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801554e:	2300      	movs	r3, #0
 8015550:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d10a      	bne.n	801556e <xTimerGenericCommand+0x2e>
	__asm volatile
 8015558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801555c:	f383 8811 	msr	BASEPRI, r3
 8015560:	f3bf 8f6f 	isb	sy
 8015564:	f3bf 8f4f 	dsb	sy
 8015568:	623b      	str	r3, [r7, #32]
}
 801556a:	bf00      	nop
 801556c:	e7fe      	b.n	801556c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801556e:	4b1a      	ldr	r3, [pc, #104]	; (80155d8 <xTimerGenericCommand+0x98>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d02a      	beq.n	80155cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	2b05      	cmp	r3, #5
 8015586:	dc18      	bgt.n	80155ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015588:	f7ff fd58 	bl	801503c <xTaskGetSchedulerState>
 801558c:	4603      	mov	r3, r0
 801558e:	2b02      	cmp	r3, #2
 8015590:	d109      	bne.n	80155a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015592:	4b11      	ldr	r3, [pc, #68]	; (80155d8 <xTimerGenericCommand+0x98>)
 8015594:	6818      	ldr	r0, [r3, #0]
 8015596:	f107 0110 	add.w	r1, r7, #16
 801559a:	2300      	movs	r3, #0
 801559c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801559e:	f7fe f919 	bl	80137d4 <xQueueGenericSend>
 80155a2:	6278      	str	r0, [r7, #36]	; 0x24
 80155a4:	e012      	b.n	80155cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80155a6:	4b0c      	ldr	r3, [pc, #48]	; (80155d8 <xTimerGenericCommand+0x98>)
 80155a8:	6818      	ldr	r0, [r3, #0]
 80155aa:	f107 0110 	add.w	r1, r7, #16
 80155ae:	2300      	movs	r3, #0
 80155b0:	2200      	movs	r2, #0
 80155b2:	f7fe f90f 	bl	80137d4 <xQueueGenericSend>
 80155b6:	6278      	str	r0, [r7, #36]	; 0x24
 80155b8:	e008      	b.n	80155cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80155ba:	4b07      	ldr	r3, [pc, #28]	; (80155d8 <xTimerGenericCommand+0x98>)
 80155bc:	6818      	ldr	r0, [r3, #0]
 80155be:	f107 0110 	add.w	r1, r7, #16
 80155c2:	2300      	movs	r3, #0
 80155c4:	683a      	ldr	r2, [r7, #0]
 80155c6:	f7fe fa03 	bl	80139d0 <xQueueGenericSendFromISR>
 80155ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80155cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	3728      	adds	r7, #40	; 0x28
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop
 80155d8:	200030b8 	.word	0x200030b8

080155dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b088      	sub	sp, #32
 80155e0:	af02      	add	r7, sp, #8
 80155e2:	6078      	str	r0, [r7, #4]
 80155e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155e6:	4b22      	ldr	r3, [pc, #136]	; (8015670 <prvProcessExpiredTimer+0x94>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	68db      	ldr	r3, [r3, #12]
 80155ec:	68db      	ldr	r3, [r3, #12]
 80155ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	3304      	adds	r3, #4
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7fd ff4d 	bl	8013494 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015600:	f003 0304 	and.w	r3, r3, #4
 8015604:	2b00      	cmp	r3, #0
 8015606:	d022      	beq.n	801564e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	699a      	ldr	r2, [r3, #24]
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	18d1      	adds	r1, r2, r3
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	683a      	ldr	r2, [r7, #0]
 8015614:	6978      	ldr	r0, [r7, #20]
 8015616:	f000 f8d1 	bl	80157bc <prvInsertTimerInActiveList>
 801561a:	4603      	mov	r3, r0
 801561c:	2b00      	cmp	r3, #0
 801561e:	d01f      	beq.n	8015660 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015620:	2300      	movs	r3, #0
 8015622:	9300      	str	r3, [sp, #0]
 8015624:	2300      	movs	r3, #0
 8015626:	687a      	ldr	r2, [r7, #4]
 8015628:	2100      	movs	r1, #0
 801562a:	6978      	ldr	r0, [r7, #20]
 801562c:	f7ff ff88 	bl	8015540 <xTimerGenericCommand>
 8015630:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015632:	693b      	ldr	r3, [r7, #16]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d113      	bne.n	8015660 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801563c:	f383 8811 	msr	BASEPRI, r3
 8015640:	f3bf 8f6f 	isb	sy
 8015644:	f3bf 8f4f 	dsb	sy
 8015648:	60fb      	str	r3, [r7, #12]
}
 801564a:	bf00      	nop
 801564c:	e7fe      	b.n	801564c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015654:	f023 0301 	bic.w	r3, r3, #1
 8015658:	b2da      	uxtb	r2, r3
 801565a:	697b      	ldr	r3, [r7, #20]
 801565c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	6a1b      	ldr	r3, [r3, #32]
 8015664:	6978      	ldr	r0, [r7, #20]
 8015666:	4798      	blx	r3
}
 8015668:	bf00      	nop
 801566a:	3718      	adds	r7, #24
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}
 8015670:	200030b0 	.word	0x200030b0

08015674 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b084      	sub	sp, #16
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801567c:	f107 0308 	add.w	r3, r7, #8
 8015680:	4618      	mov	r0, r3
 8015682:	f000 f857 	bl	8015734 <prvGetNextExpireTime>
 8015686:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	4619      	mov	r1, r3
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	f000 f803 	bl	8015698 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015692:	f000 f8d5 	bl	8015840 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015696:	e7f1      	b.n	801567c <prvTimerTask+0x8>

08015698 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b084      	sub	sp, #16
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80156a2:	f7ff f8e9 	bl	8014878 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80156a6:	f107 0308 	add.w	r3, r7, #8
 80156aa:	4618      	mov	r0, r3
 80156ac:	f000 f866 	bl	801577c <prvSampleTimeNow>
 80156b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d130      	bne.n	801571a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d10a      	bne.n	80156d4 <prvProcessTimerOrBlockTask+0x3c>
 80156be:	687a      	ldr	r2, [r7, #4]
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d806      	bhi.n	80156d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80156c6:	f7ff f8e5 	bl	8014894 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80156ca:	68f9      	ldr	r1, [r7, #12]
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	f7ff ff85 	bl	80155dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80156d2:	e024      	b.n	801571e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80156d4:	683b      	ldr	r3, [r7, #0]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d008      	beq.n	80156ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80156da:	4b13      	ldr	r3, [pc, #76]	; (8015728 <prvProcessTimerOrBlockTask+0x90>)
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d101      	bne.n	80156e8 <prvProcessTimerOrBlockTask+0x50>
 80156e4:	2301      	movs	r3, #1
 80156e6:	e000      	b.n	80156ea <prvProcessTimerOrBlockTask+0x52>
 80156e8:	2300      	movs	r3, #0
 80156ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80156ec:	4b0f      	ldr	r3, [pc, #60]	; (801572c <prvProcessTimerOrBlockTask+0x94>)
 80156ee:	6818      	ldr	r0, [r3, #0]
 80156f0:	687a      	ldr	r2, [r7, #4]
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	1ad3      	subs	r3, r2, r3
 80156f6:	683a      	ldr	r2, [r7, #0]
 80156f8:	4619      	mov	r1, r3
 80156fa:	f7fe fe4d 	bl	8014398 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80156fe:	f7ff f8c9 	bl	8014894 <xTaskResumeAll>
 8015702:	4603      	mov	r3, r0
 8015704:	2b00      	cmp	r3, #0
 8015706:	d10a      	bne.n	801571e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015708:	4b09      	ldr	r3, [pc, #36]	; (8015730 <prvProcessTimerOrBlockTask+0x98>)
 801570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801570e:	601a      	str	r2, [r3, #0]
 8015710:	f3bf 8f4f 	dsb	sy
 8015714:	f3bf 8f6f 	isb	sy
}
 8015718:	e001      	b.n	801571e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801571a:	f7ff f8bb 	bl	8014894 <xTaskResumeAll>
}
 801571e:	bf00      	nop
 8015720:	3710      	adds	r7, #16
 8015722:	46bd      	mov	sp, r7
 8015724:	bd80      	pop	{r7, pc}
 8015726:	bf00      	nop
 8015728:	200030b4 	.word	0x200030b4
 801572c:	200030b8 	.word	0x200030b8
 8015730:	e000ed04 	.word	0xe000ed04

08015734 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015734:	b480      	push	{r7}
 8015736:	b085      	sub	sp, #20
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801573c:	4b0e      	ldr	r3, [pc, #56]	; (8015778 <prvGetNextExpireTime+0x44>)
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d101      	bne.n	801574a <prvGetNextExpireTime+0x16>
 8015746:	2201      	movs	r2, #1
 8015748:	e000      	b.n	801574c <prvGetNextExpireTime+0x18>
 801574a:	2200      	movs	r2, #0
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d105      	bne.n	8015764 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015758:	4b07      	ldr	r3, [pc, #28]	; (8015778 <prvGetNextExpireTime+0x44>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	60fb      	str	r3, [r7, #12]
 8015762:	e001      	b.n	8015768 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015764:	2300      	movs	r3, #0
 8015766:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015768:	68fb      	ldr	r3, [r7, #12]
}
 801576a:	4618      	mov	r0, r3
 801576c:	3714      	adds	r7, #20
 801576e:	46bd      	mov	sp, r7
 8015770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015774:	4770      	bx	lr
 8015776:	bf00      	nop
 8015778:	200030b0 	.word	0x200030b0

0801577c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b084      	sub	sp, #16
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015784:	f7ff f924 	bl	80149d0 <xTaskGetTickCount>
 8015788:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801578a:	4b0b      	ldr	r3, [pc, #44]	; (80157b8 <prvSampleTimeNow+0x3c>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	68fa      	ldr	r2, [r7, #12]
 8015790:	429a      	cmp	r2, r3
 8015792:	d205      	bcs.n	80157a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015794:	f000 f936 	bl	8015a04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	2201      	movs	r2, #1
 801579c:	601a      	str	r2, [r3, #0]
 801579e:	e002      	b.n	80157a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2200      	movs	r2, #0
 80157a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80157a6:	4a04      	ldr	r2, [pc, #16]	; (80157b8 <prvSampleTimeNow+0x3c>)
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80157ac:	68fb      	ldr	r3, [r7, #12]
}
 80157ae:	4618      	mov	r0, r3
 80157b0:	3710      	adds	r7, #16
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bd80      	pop	{r7, pc}
 80157b6:	bf00      	nop
 80157b8:	200030c0 	.word	0x200030c0

080157bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b086      	sub	sp, #24
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	60f8      	str	r0, [r7, #12]
 80157c4:	60b9      	str	r1, [r7, #8]
 80157c6:	607a      	str	r2, [r7, #4]
 80157c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80157ca:	2300      	movs	r3, #0
 80157cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	68ba      	ldr	r2, [r7, #8]
 80157d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	68fa      	ldr	r2, [r7, #12]
 80157d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80157da:	68ba      	ldr	r2, [r7, #8]
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	429a      	cmp	r2, r3
 80157e0:	d812      	bhi.n	8015808 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157e2:	687a      	ldr	r2, [r7, #4]
 80157e4:	683b      	ldr	r3, [r7, #0]
 80157e6:	1ad2      	subs	r2, r2, r3
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	699b      	ldr	r3, [r3, #24]
 80157ec:	429a      	cmp	r2, r3
 80157ee:	d302      	bcc.n	80157f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80157f0:	2301      	movs	r3, #1
 80157f2:	617b      	str	r3, [r7, #20]
 80157f4:	e01b      	b.n	801582e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80157f6:	4b10      	ldr	r3, [pc, #64]	; (8015838 <prvInsertTimerInActiveList+0x7c>)
 80157f8:	681a      	ldr	r2, [r3, #0]
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	3304      	adds	r3, #4
 80157fe:	4619      	mov	r1, r3
 8015800:	4610      	mov	r0, r2
 8015802:	f7fd fe0e 	bl	8013422 <vListInsert>
 8015806:	e012      	b.n	801582e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015808:	687a      	ldr	r2, [r7, #4]
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	429a      	cmp	r2, r3
 801580e:	d206      	bcs.n	801581e <prvInsertTimerInActiveList+0x62>
 8015810:	68ba      	ldr	r2, [r7, #8]
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	429a      	cmp	r2, r3
 8015816:	d302      	bcc.n	801581e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015818:	2301      	movs	r3, #1
 801581a:	617b      	str	r3, [r7, #20]
 801581c:	e007      	b.n	801582e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801581e:	4b07      	ldr	r3, [pc, #28]	; (801583c <prvInsertTimerInActiveList+0x80>)
 8015820:	681a      	ldr	r2, [r3, #0]
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	3304      	adds	r3, #4
 8015826:	4619      	mov	r1, r3
 8015828:	4610      	mov	r0, r2
 801582a:	f7fd fdfa 	bl	8013422 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801582e:	697b      	ldr	r3, [r7, #20]
}
 8015830:	4618      	mov	r0, r3
 8015832:	3718      	adds	r7, #24
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}
 8015838:	200030b4 	.word	0x200030b4
 801583c:	200030b0 	.word	0x200030b0

08015840 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b08e      	sub	sp, #56	; 0x38
 8015844:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015846:	e0ca      	b.n	80159de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2b00      	cmp	r3, #0
 801584c:	da18      	bge.n	8015880 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801584e:	1d3b      	adds	r3, r7, #4
 8015850:	3304      	adds	r3, #4
 8015852:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015856:	2b00      	cmp	r3, #0
 8015858:	d10a      	bne.n	8015870 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801585e:	f383 8811 	msr	BASEPRI, r3
 8015862:	f3bf 8f6f 	isb	sy
 8015866:	f3bf 8f4f 	dsb	sy
 801586a:	61fb      	str	r3, [r7, #28]
}
 801586c:	bf00      	nop
 801586e:	e7fe      	b.n	801586e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015876:	6850      	ldr	r0, [r2, #4]
 8015878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801587a:	6892      	ldr	r2, [r2, #8]
 801587c:	4611      	mov	r1, r2
 801587e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2b00      	cmp	r3, #0
 8015884:	f2c0 80aa 	blt.w	80159dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801588e:	695b      	ldr	r3, [r3, #20]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d004      	beq.n	801589e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015896:	3304      	adds	r3, #4
 8015898:	4618      	mov	r0, r3
 801589a:	f7fd fdfb 	bl	8013494 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801589e:	463b      	mov	r3, r7
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7ff ff6b 	bl	801577c <prvSampleTimeNow>
 80158a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	2b09      	cmp	r3, #9
 80158ac:	f200 8097 	bhi.w	80159de <prvProcessReceivedCommands+0x19e>
 80158b0:	a201      	add	r2, pc, #4	; (adr r2, 80158b8 <prvProcessReceivedCommands+0x78>)
 80158b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158b6:	bf00      	nop
 80158b8:	080158e1 	.word	0x080158e1
 80158bc:	080158e1 	.word	0x080158e1
 80158c0:	080158e1 	.word	0x080158e1
 80158c4:	08015955 	.word	0x08015955
 80158c8:	08015969 	.word	0x08015969
 80158cc:	080159b3 	.word	0x080159b3
 80158d0:	080158e1 	.word	0x080158e1
 80158d4:	080158e1 	.word	0x080158e1
 80158d8:	08015955 	.word	0x08015955
 80158dc:	08015969 	.word	0x08015969
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80158e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158e6:	f043 0301 	orr.w	r3, r3, #1
 80158ea:	b2da      	uxtb	r2, r3
 80158ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80158f2:	68ba      	ldr	r2, [r7, #8]
 80158f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f6:	699b      	ldr	r3, [r3, #24]
 80158f8:	18d1      	adds	r1, r2, r3
 80158fa:	68bb      	ldr	r3, [r7, #8]
 80158fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015900:	f7ff ff5c 	bl	80157bc <prvInsertTimerInActiveList>
 8015904:	4603      	mov	r3, r0
 8015906:	2b00      	cmp	r3, #0
 8015908:	d069      	beq.n	80159de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801590c:	6a1b      	ldr	r3, [r3, #32]
 801590e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015910:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015918:	f003 0304 	and.w	r3, r3, #4
 801591c:	2b00      	cmp	r3, #0
 801591e:	d05e      	beq.n	80159de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015920:	68ba      	ldr	r2, [r7, #8]
 8015922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015924:	699b      	ldr	r3, [r3, #24]
 8015926:	441a      	add	r2, r3
 8015928:	2300      	movs	r3, #0
 801592a:	9300      	str	r3, [sp, #0]
 801592c:	2300      	movs	r3, #0
 801592e:	2100      	movs	r1, #0
 8015930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015932:	f7ff fe05 	bl	8015540 <xTimerGenericCommand>
 8015936:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015938:	6a3b      	ldr	r3, [r7, #32]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d14f      	bne.n	80159de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015942:	f383 8811 	msr	BASEPRI, r3
 8015946:	f3bf 8f6f 	isb	sy
 801594a:	f3bf 8f4f 	dsb	sy
 801594e:	61bb      	str	r3, [r7, #24]
}
 8015950:	bf00      	nop
 8015952:	e7fe      	b.n	8015952 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801595a:	f023 0301 	bic.w	r3, r3, #1
 801595e:	b2da      	uxtb	r2, r3
 8015960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015966:	e03a      	b.n	80159de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801596e:	f043 0301 	orr.w	r3, r3, #1
 8015972:	b2da      	uxtb	r2, r3
 8015974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801597a:	68ba      	ldr	r2, [r7, #8]
 801597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801597e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015982:	699b      	ldr	r3, [r3, #24]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d10a      	bne.n	801599e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801598c:	f383 8811 	msr	BASEPRI, r3
 8015990:	f3bf 8f6f 	isb	sy
 8015994:	f3bf 8f4f 	dsb	sy
 8015998:	617b      	str	r3, [r7, #20]
}
 801599a:	bf00      	nop
 801599c:	e7fe      	b.n	801599c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159a0:	699a      	ldr	r2, [r3, #24]
 80159a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a4:	18d1      	adds	r1, r2, r3
 80159a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159ac:	f7ff ff06 	bl	80157bc <prvInsertTimerInActiveList>
					break;
 80159b0:	e015      	b.n	80159de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80159b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159b8:	f003 0302 	and.w	r3, r3, #2
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d103      	bne.n	80159c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80159c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159c2:	f000 fbd5 	bl	8016170 <vPortFree>
 80159c6:	e00a      	b.n	80159de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80159c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159ce:	f023 0301 	bic.w	r3, r3, #1
 80159d2:	b2da      	uxtb	r2, r3
 80159d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80159da:	e000      	b.n	80159de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80159dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80159de:	4b08      	ldr	r3, [pc, #32]	; (8015a00 <prvProcessReceivedCommands+0x1c0>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	1d39      	adds	r1, r7, #4
 80159e4:	2200      	movs	r2, #0
 80159e6:	4618      	mov	r0, r3
 80159e8:	f7fe f918 	bl	8013c1c <xQueueReceive>
 80159ec:	4603      	mov	r3, r0
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	f47f af2a 	bne.w	8015848 <prvProcessReceivedCommands+0x8>
	}
}
 80159f4:	bf00      	nop
 80159f6:	bf00      	nop
 80159f8:	3730      	adds	r7, #48	; 0x30
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	200030b8 	.word	0x200030b8

08015a04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b088      	sub	sp, #32
 8015a08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015a0a:	e048      	b.n	8015a9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015a0c:	4b2d      	ldr	r3, [pc, #180]	; (8015ac4 <prvSwitchTimerLists+0xc0>)
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	68db      	ldr	r3, [r3, #12]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a16:	4b2b      	ldr	r3, [pc, #172]	; (8015ac4 <prvSwitchTimerLists+0xc0>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	68db      	ldr	r3, [r3, #12]
 8015a1c:	68db      	ldr	r3, [r3, #12]
 8015a1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	3304      	adds	r3, #4
 8015a24:	4618      	mov	r0, r3
 8015a26:	f7fd fd35 	bl	8013494 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	6a1b      	ldr	r3, [r3, #32]
 8015a2e:	68f8      	ldr	r0, [r7, #12]
 8015a30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a38:	f003 0304 	and.w	r3, r3, #4
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d02e      	beq.n	8015a9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	699b      	ldr	r3, [r3, #24]
 8015a44:	693a      	ldr	r2, [r7, #16]
 8015a46:	4413      	add	r3, r2
 8015a48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015a4a:	68ba      	ldr	r2, [r7, #8]
 8015a4c:	693b      	ldr	r3, [r7, #16]
 8015a4e:	429a      	cmp	r2, r3
 8015a50:	d90e      	bls.n	8015a70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	68ba      	ldr	r2, [r7, #8]
 8015a56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	68fa      	ldr	r2, [r7, #12]
 8015a5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015a5e:	4b19      	ldr	r3, [pc, #100]	; (8015ac4 <prvSwitchTimerLists+0xc0>)
 8015a60:	681a      	ldr	r2, [r3, #0]
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	3304      	adds	r3, #4
 8015a66:	4619      	mov	r1, r3
 8015a68:	4610      	mov	r0, r2
 8015a6a:	f7fd fcda 	bl	8013422 <vListInsert>
 8015a6e:	e016      	b.n	8015a9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015a70:	2300      	movs	r3, #0
 8015a72:	9300      	str	r3, [sp, #0]
 8015a74:	2300      	movs	r3, #0
 8015a76:	693a      	ldr	r2, [r7, #16]
 8015a78:	2100      	movs	r1, #0
 8015a7a:	68f8      	ldr	r0, [r7, #12]
 8015a7c:	f7ff fd60 	bl	8015540 <xTimerGenericCommand>
 8015a80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d10a      	bne.n	8015a9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a8c:	f383 8811 	msr	BASEPRI, r3
 8015a90:	f3bf 8f6f 	isb	sy
 8015a94:	f3bf 8f4f 	dsb	sy
 8015a98:	603b      	str	r3, [r7, #0]
}
 8015a9a:	bf00      	nop
 8015a9c:	e7fe      	b.n	8015a9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015a9e:	4b09      	ldr	r3, [pc, #36]	; (8015ac4 <prvSwitchTimerLists+0xc0>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d1b1      	bne.n	8015a0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015aa8:	4b06      	ldr	r3, [pc, #24]	; (8015ac4 <prvSwitchTimerLists+0xc0>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015aae:	4b06      	ldr	r3, [pc, #24]	; (8015ac8 <prvSwitchTimerLists+0xc4>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	4a04      	ldr	r2, [pc, #16]	; (8015ac4 <prvSwitchTimerLists+0xc0>)
 8015ab4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015ab6:	4a04      	ldr	r2, [pc, #16]	; (8015ac8 <prvSwitchTimerLists+0xc4>)
 8015ab8:	697b      	ldr	r3, [r7, #20]
 8015aba:	6013      	str	r3, [r2, #0]
}
 8015abc:	bf00      	nop
 8015abe:	3718      	adds	r7, #24
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}
 8015ac4:	200030b0 	.word	0x200030b0
 8015ac8:	200030b4 	.word	0x200030b4

08015acc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b082      	sub	sp, #8
 8015ad0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015ad2:	f000 f967 	bl	8015da4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015ad6:	4b15      	ldr	r3, [pc, #84]	; (8015b2c <prvCheckForValidListAndQueue+0x60>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d120      	bne.n	8015b20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015ade:	4814      	ldr	r0, [pc, #80]	; (8015b30 <prvCheckForValidListAndQueue+0x64>)
 8015ae0:	f7fd fc4e 	bl	8013380 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015ae4:	4813      	ldr	r0, [pc, #76]	; (8015b34 <prvCheckForValidListAndQueue+0x68>)
 8015ae6:	f7fd fc4b 	bl	8013380 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015aea:	4b13      	ldr	r3, [pc, #76]	; (8015b38 <prvCheckForValidListAndQueue+0x6c>)
 8015aec:	4a10      	ldr	r2, [pc, #64]	; (8015b30 <prvCheckForValidListAndQueue+0x64>)
 8015aee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015af0:	4b12      	ldr	r3, [pc, #72]	; (8015b3c <prvCheckForValidListAndQueue+0x70>)
 8015af2:	4a10      	ldr	r2, [pc, #64]	; (8015b34 <prvCheckForValidListAndQueue+0x68>)
 8015af4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015af6:	2300      	movs	r3, #0
 8015af8:	9300      	str	r3, [sp, #0]
 8015afa:	4b11      	ldr	r3, [pc, #68]	; (8015b40 <prvCheckForValidListAndQueue+0x74>)
 8015afc:	4a11      	ldr	r2, [pc, #68]	; (8015b44 <prvCheckForValidListAndQueue+0x78>)
 8015afe:	2110      	movs	r1, #16
 8015b00:	200a      	movs	r0, #10
 8015b02:	f7fd fd59 	bl	80135b8 <xQueueGenericCreateStatic>
 8015b06:	4603      	mov	r3, r0
 8015b08:	4a08      	ldr	r2, [pc, #32]	; (8015b2c <prvCheckForValidListAndQueue+0x60>)
 8015b0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015b0c:	4b07      	ldr	r3, [pc, #28]	; (8015b2c <prvCheckForValidListAndQueue+0x60>)
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d005      	beq.n	8015b20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015b14:	4b05      	ldr	r3, [pc, #20]	; (8015b2c <prvCheckForValidListAndQueue+0x60>)
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	490b      	ldr	r1, [pc, #44]	; (8015b48 <prvCheckForValidListAndQueue+0x7c>)
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7fe fc12 	bl	8014344 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015b20:	f000 f970 	bl	8015e04 <vPortExitCritical>
}
 8015b24:	bf00      	nop
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	200030b8 	.word	0x200030b8
 8015b30:	20003088 	.word	0x20003088
 8015b34:	2000309c 	.word	0x2000309c
 8015b38:	200030b0 	.word	0x200030b0
 8015b3c:	200030b4 	.word	0x200030b4
 8015b40:	20003164 	.word	0x20003164
 8015b44:	200030c4 	.word	0x200030c4
 8015b48:	08018a90 	.word	0x08018a90

08015b4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015b4c:	b480      	push	{r7}
 8015b4e:	b085      	sub	sp, #20
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	60f8      	str	r0, [r7, #12]
 8015b54:	60b9      	str	r1, [r7, #8]
 8015b56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	3b04      	subs	r3, #4
 8015b5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	3b04      	subs	r3, #4
 8015b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	f023 0201 	bic.w	r2, r3, #1
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	3b04      	subs	r3, #4
 8015b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015b7c:	4a0c      	ldr	r2, [pc, #48]	; (8015bb0 <pxPortInitialiseStack+0x64>)
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	3b14      	subs	r3, #20
 8015b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015b88:	687a      	ldr	r2, [r7, #4]
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	3b04      	subs	r3, #4
 8015b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	f06f 0202 	mvn.w	r2, #2
 8015b9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	3b20      	subs	r3, #32
 8015ba0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3714      	adds	r7, #20
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bae:	4770      	bx	lr
 8015bb0:	08015bb5 	.word	0x08015bb5

08015bb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015bb4:	b480      	push	{r7}
 8015bb6:	b085      	sub	sp, #20
 8015bb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015bbe:	4b12      	ldr	r3, [pc, #72]	; (8015c08 <prvTaskExitError+0x54>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bc6:	d00a      	beq.n	8015bde <prvTaskExitError+0x2a>
	__asm volatile
 8015bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bcc:	f383 8811 	msr	BASEPRI, r3
 8015bd0:	f3bf 8f6f 	isb	sy
 8015bd4:	f3bf 8f4f 	dsb	sy
 8015bd8:	60fb      	str	r3, [r7, #12]
}
 8015bda:	bf00      	nop
 8015bdc:	e7fe      	b.n	8015bdc <prvTaskExitError+0x28>
	__asm volatile
 8015bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015be2:	f383 8811 	msr	BASEPRI, r3
 8015be6:	f3bf 8f6f 	isb	sy
 8015bea:	f3bf 8f4f 	dsb	sy
 8015bee:	60bb      	str	r3, [r7, #8]
}
 8015bf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015bf2:	bf00      	nop
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d0fc      	beq.n	8015bf4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015bfa:	bf00      	nop
 8015bfc:	bf00      	nop
 8015bfe:	3714      	adds	r7, #20
 8015c00:	46bd      	mov	sp, r7
 8015c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c06:	4770      	bx	lr
 8015c08:	200005b0 	.word	0x200005b0
 8015c0c:	00000000 	.word	0x00000000

08015c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015c10:	4b07      	ldr	r3, [pc, #28]	; (8015c30 <pxCurrentTCBConst2>)
 8015c12:	6819      	ldr	r1, [r3, #0]
 8015c14:	6808      	ldr	r0, [r1, #0]
 8015c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c1a:	f380 8809 	msr	PSP, r0
 8015c1e:	f3bf 8f6f 	isb	sy
 8015c22:	f04f 0000 	mov.w	r0, #0
 8015c26:	f380 8811 	msr	BASEPRI, r0
 8015c2a:	4770      	bx	lr
 8015c2c:	f3af 8000 	nop.w

08015c30 <pxCurrentTCBConst2>:
 8015c30:	20002b88 	.word	0x20002b88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015c34:	bf00      	nop
 8015c36:	bf00      	nop

08015c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015c38:	4808      	ldr	r0, [pc, #32]	; (8015c5c <prvPortStartFirstTask+0x24>)
 8015c3a:	6800      	ldr	r0, [r0, #0]
 8015c3c:	6800      	ldr	r0, [r0, #0]
 8015c3e:	f380 8808 	msr	MSP, r0
 8015c42:	f04f 0000 	mov.w	r0, #0
 8015c46:	f380 8814 	msr	CONTROL, r0
 8015c4a:	b662      	cpsie	i
 8015c4c:	b661      	cpsie	f
 8015c4e:	f3bf 8f4f 	dsb	sy
 8015c52:	f3bf 8f6f 	isb	sy
 8015c56:	df00      	svc	0
 8015c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015c5a:	bf00      	nop
 8015c5c:	e000ed08 	.word	0xe000ed08

08015c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b086      	sub	sp, #24
 8015c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015c66:	4b46      	ldr	r3, [pc, #280]	; (8015d80 <xPortStartScheduler+0x120>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4a46      	ldr	r2, [pc, #280]	; (8015d84 <xPortStartScheduler+0x124>)
 8015c6c:	4293      	cmp	r3, r2
 8015c6e:	d10a      	bne.n	8015c86 <xPortStartScheduler+0x26>
	__asm volatile
 8015c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c74:	f383 8811 	msr	BASEPRI, r3
 8015c78:	f3bf 8f6f 	isb	sy
 8015c7c:	f3bf 8f4f 	dsb	sy
 8015c80:	613b      	str	r3, [r7, #16]
}
 8015c82:	bf00      	nop
 8015c84:	e7fe      	b.n	8015c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015c86:	4b3e      	ldr	r3, [pc, #248]	; (8015d80 <xPortStartScheduler+0x120>)
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	4a3f      	ldr	r2, [pc, #252]	; (8015d88 <xPortStartScheduler+0x128>)
 8015c8c:	4293      	cmp	r3, r2
 8015c8e:	d10a      	bne.n	8015ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8015c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c94:	f383 8811 	msr	BASEPRI, r3
 8015c98:	f3bf 8f6f 	isb	sy
 8015c9c:	f3bf 8f4f 	dsb	sy
 8015ca0:	60fb      	str	r3, [r7, #12]
}
 8015ca2:	bf00      	nop
 8015ca4:	e7fe      	b.n	8015ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015ca6:	4b39      	ldr	r3, [pc, #228]	; (8015d8c <xPortStartScheduler+0x12c>)
 8015ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	781b      	ldrb	r3, [r3, #0]
 8015cae:	b2db      	uxtb	r3, r3
 8015cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	22ff      	movs	r2, #255	; 0xff
 8015cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015cb8:	697b      	ldr	r3, [r7, #20]
 8015cba:	781b      	ldrb	r3, [r3, #0]
 8015cbc:	b2db      	uxtb	r3, r3
 8015cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015cc0:	78fb      	ldrb	r3, [r7, #3]
 8015cc2:	b2db      	uxtb	r3, r3
 8015cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015cc8:	b2da      	uxtb	r2, r3
 8015cca:	4b31      	ldr	r3, [pc, #196]	; (8015d90 <xPortStartScheduler+0x130>)
 8015ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015cce:	4b31      	ldr	r3, [pc, #196]	; (8015d94 <xPortStartScheduler+0x134>)
 8015cd0:	2207      	movs	r2, #7
 8015cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015cd4:	e009      	b.n	8015cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015cd6:	4b2f      	ldr	r3, [pc, #188]	; (8015d94 <xPortStartScheduler+0x134>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	3b01      	subs	r3, #1
 8015cdc:	4a2d      	ldr	r2, [pc, #180]	; (8015d94 <xPortStartScheduler+0x134>)
 8015cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015ce0:	78fb      	ldrb	r3, [r7, #3]
 8015ce2:	b2db      	uxtb	r3, r3
 8015ce4:	005b      	lsls	r3, r3, #1
 8015ce6:	b2db      	uxtb	r3, r3
 8015ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015cea:	78fb      	ldrb	r3, [r7, #3]
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015cf2:	2b80      	cmp	r3, #128	; 0x80
 8015cf4:	d0ef      	beq.n	8015cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015cf6:	4b27      	ldr	r3, [pc, #156]	; (8015d94 <xPortStartScheduler+0x134>)
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	f1c3 0307 	rsb	r3, r3, #7
 8015cfe:	2b04      	cmp	r3, #4
 8015d00:	d00a      	beq.n	8015d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8015d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d06:	f383 8811 	msr	BASEPRI, r3
 8015d0a:	f3bf 8f6f 	isb	sy
 8015d0e:	f3bf 8f4f 	dsb	sy
 8015d12:	60bb      	str	r3, [r7, #8]
}
 8015d14:	bf00      	nop
 8015d16:	e7fe      	b.n	8015d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015d18:	4b1e      	ldr	r3, [pc, #120]	; (8015d94 <xPortStartScheduler+0x134>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	021b      	lsls	r3, r3, #8
 8015d1e:	4a1d      	ldr	r2, [pc, #116]	; (8015d94 <xPortStartScheduler+0x134>)
 8015d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015d22:	4b1c      	ldr	r3, [pc, #112]	; (8015d94 <xPortStartScheduler+0x134>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015d2a:	4a1a      	ldr	r2, [pc, #104]	; (8015d94 <xPortStartScheduler+0x134>)
 8015d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	b2da      	uxtb	r2, r3
 8015d32:	697b      	ldr	r3, [r7, #20]
 8015d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015d36:	4b18      	ldr	r3, [pc, #96]	; (8015d98 <xPortStartScheduler+0x138>)
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	4a17      	ldr	r2, [pc, #92]	; (8015d98 <xPortStartScheduler+0x138>)
 8015d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015d42:	4b15      	ldr	r3, [pc, #84]	; (8015d98 <xPortStartScheduler+0x138>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	4a14      	ldr	r2, [pc, #80]	; (8015d98 <xPortStartScheduler+0x138>)
 8015d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015d4e:	f000 f8dd 	bl	8015f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015d52:	4b12      	ldr	r3, [pc, #72]	; (8015d9c <xPortStartScheduler+0x13c>)
 8015d54:	2200      	movs	r2, #0
 8015d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015d58:	f000 f8fc 	bl	8015f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015d5c:	4b10      	ldr	r3, [pc, #64]	; (8015da0 <xPortStartScheduler+0x140>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	4a0f      	ldr	r2, [pc, #60]	; (8015da0 <xPortStartScheduler+0x140>)
 8015d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015d68:	f7ff ff66 	bl	8015c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015d6c:	f7fe fefa 	bl	8014b64 <vTaskSwitchContext>
	prvTaskExitError();
 8015d70:	f7ff ff20 	bl	8015bb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015d74:	2300      	movs	r3, #0
}
 8015d76:	4618      	mov	r0, r3
 8015d78:	3718      	adds	r7, #24
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	bd80      	pop	{r7, pc}
 8015d7e:	bf00      	nop
 8015d80:	e000ed00 	.word	0xe000ed00
 8015d84:	410fc271 	.word	0x410fc271
 8015d88:	410fc270 	.word	0x410fc270
 8015d8c:	e000e400 	.word	0xe000e400
 8015d90:	200031b4 	.word	0x200031b4
 8015d94:	200031b8 	.word	0x200031b8
 8015d98:	e000ed20 	.word	0xe000ed20
 8015d9c:	200005b0 	.word	0x200005b0
 8015da0:	e000ef34 	.word	0xe000ef34

08015da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015da4:	b480      	push	{r7}
 8015da6:	b083      	sub	sp, #12
 8015da8:	af00      	add	r7, sp, #0
	__asm volatile
 8015daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dae:	f383 8811 	msr	BASEPRI, r3
 8015db2:	f3bf 8f6f 	isb	sy
 8015db6:	f3bf 8f4f 	dsb	sy
 8015dba:	607b      	str	r3, [r7, #4]
}
 8015dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015dbe:	4b0f      	ldr	r3, [pc, #60]	; (8015dfc <vPortEnterCritical+0x58>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	4a0d      	ldr	r2, [pc, #52]	; (8015dfc <vPortEnterCritical+0x58>)
 8015dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015dc8:	4b0c      	ldr	r3, [pc, #48]	; (8015dfc <vPortEnterCritical+0x58>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	2b01      	cmp	r3, #1
 8015dce:	d10f      	bne.n	8015df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015dd0:	4b0b      	ldr	r3, [pc, #44]	; (8015e00 <vPortEnterCritical+0x5c>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	b2db      	uxtb	r3, r3
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d00a      	beq.n	8015df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8015dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dde:	f383 8811 	msr	BASEPRI, r3
 8015de2:	f3bf 8f6f 	isb	sy
 8015de6:	f3bf 8f4f 	dsb	sy
 8015dea:	603b      	str	r3, [r7, #0]
}
 8015dec:	bf00      	nop
 8015dee:	e7fe      	b.n	8015dee <vPortEnterCritical+0x4a>
	}
}
 8015df0:	bf00      	nop
 8015df2:	370c      	adds	r7, #12
 8015df4:	46bd      	mov	sp, r7
 8015df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfa:	4770      	bx	lr
 8015dfc:	200005b0 	.word	0x200005b0
 8015e00:	e000ed04 	.word	0xe000ed04

08015e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015e04:	b480      	push	{r7}
 8015e06:	b083      	sub	sp, #12
 8015e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015e0a:	4b12      	ldr	r3, [pc, #72]	; (8015e54 <vPortExitCritical+0x50>)
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d10a      	bne.n	8015e28 <vPortExitCritical+0x24>
	__asm volatile
 8015e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e16:	f383 8811 	msr	BASEPRI, r3
 8015e1a:	f3bf 8f6f 	isb	sy
 8015e1e:	f3bf 8f4f 	dsb	sy
 8015e22:	607b      	str	r3, [r7, #4]
}
 8015e24:	bf00      	nop
 8015e26:	e7fe      	b.n	8015e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015e28:	4b0a      	ldr	r3, [pc, #40]	; (8015e54 <vPortExitCritical+0x50>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	3b01      	subs	r3, #1
 8015e2e:	4a09      	ldr	r2, [pc, #36]	; (8015e54 <vPortExitCritical+0x50>)
 8015e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015e32:	4b08      	ldr	r3, [pc, #32]	; (8015e54 <vPortExitCritical+0x50>)
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d105      	bne.n	8015e46 <vPortExitCritical+0x42>
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015e3e:	683b      	ldr	r3, [r7, #0]
 8015e40:	f383 8811 	msr	BASEPRI, r3
}
 8015e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015e46:	bf00      	nop
 8015e48:	370c      	adds	r7, #12
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e50:	4770      	bx	lr
 8015e52:	bf00      	nop
 8015e54:	200005b0 	.word	0x200005b0
	...

08015e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015e60:	f3ef 8009 	mrs	r0, PSP
 8015e64:	f3bf 8f6f 	isb	sy
 8015e68:	4b15      	ldr	r3, [pc, #84]	; (8015ec0 <pxCurrentTCBConst>)
 8015e6a:	681a      	ldr	r2, [r3, #0]
 8015e6c:	f01e 0f10 	tst.w	lr, #16
 8015e70:	bf08      	it	eq
 8015e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e7a:	6010      	str	r0, [r2, #0]
 8015e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015e84:	f380 8811 	msr	BASEPRI, r0
 8015e88:	f3bf 8f4f 	dsb	sy
 8015e8c:	f3bf 8f6f 	isb	sy
 8015e90:	f7fe fe68 	bl	8014b64 <vTaskSwitchContext>
 8015e94:	f04f 0000 	mov.w	r0, #0
 8015e98:	f380 8811 	msr	BASEPRI, r0
 8015e9c:	bc09      	pop	{r0, r3}
 8015e9e:	6819      	ldr	r1, [r3, #0]
 8015ea0:	6808      	ldr	r0, [r1, #0]
 8015ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ea6:	f01e 0f10 	tst.w	lr, #16
 8015eaa:	bf08      	it	eq
 8015eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015eb0:	f380 8809 	msr	PSP, r0
 8015eb4:	f3bf 8f6f 	isb	sy
 8015eb8:	4770      	bx	lr
 8015eba:	bf00      	nop
 8015ebc:	f3af 8000 	nop.w

08015ec0 <pxCurrentTCBConst>:
 8015ec0:	20002b88 	.word	0x20002b88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015ec4:	bf00      	nop
 8015ec6:	bf00      	nop

08015ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b082      	sub	sp, #8
 8015ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8015ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ed2:	f383 8811 	msr	BASEPRI, r3
 8015ed6:	f3bf 8f6f 	isb	sy
 8015eda:	f3bf 8f4f 	dsb	sy
 8015ede:	607b      	str	r3, [r7, #4]
}
 8015ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015ee2:	f7fe fd85 	bl	80149f0 <xTaskIncrementTick>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d003      	beq.n	8015ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015eec:	4b06      	ldr	r3, [pc, #24]	; (8015f08 <SysTick_Handler+0x40>)
 8015eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ef2:	601a      	str	r2, [r3, #0]
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	f383 8811 	msr	BASEPRI, r3
}
 8015efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015f00:	bf00      	nop
 8015f02:	3708      	adds	r7, #8
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bd80      	pop	{r7, pc}
 8015f08:	e000ed04 	.word	0xe000ed04

08015f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015f0c:	b480      	push	{r7}
 8015f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015f10:	4b0b      	ldr	r3, [pc, #44]	; (8015f40 <vPortSetupTimerInterrupt+0x34>)
 8015f12:	2200      	movs	r2, #0
 8015f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015f16:	4b0b      	ldr	r3, [pc, #44]	; (8015f44 <vPortSetupTimerInterrupt+0x38>)
 8015f18:	2200      	movs	r2, #0
 8015f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015f1c:	4b0a      	ldr	r3, [pc, #40]	; (8015f48 <vPortSetupTimerInterrupt+0x3c>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	4a0a      	ldr	r2, [pc, #40]	; (8015f4c <vPortSetupTimerInterrupt+0x40>)
 8015f22:	fba2 2303 	umull	r2, r3, r2, r3
 8015f26:	099b      	lsrs	r3, r3, #6
 8015f28:	4a09      	ldr	r2, [pc, #36]	; (8015f50 <vPortSetupTimerInterrupt+0x44>)
 8015f2a:	3b01      	subs	r3, #1
 8015f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015f2e:	4b04      	ldr	r3, [pc, #16]	; (8015f40 <vPortSetupTimerInterrupt+0x34>)
 8015f30:	2207      	movs	r2, #7
 8015f32:	601a      	str	r2, [r3, #0]
}
 8015f34:	bf00      	nop
 8015f36:	46bd      	mov	sp, r7
 8015f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3c:	4770      	bx	lr
 8015f3e:	bf00      	nop
 8015f40:	e000e010 	.word	0xe000e010
 8015f44:	e000e018 	.word	0xe000e018
 8015f48:	20000014 	.word	0x20000014
 8015f4c:	10624dd3 	.word	0x10624dd3
 8015f50:	e000e014 	.word	0xe000e014

08015f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015f64 <vPortEnableVFP+0x10>
 8015f58:	6801      	ldr	r1, [r0, #0]
 8015f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015f5e:	6001      	str	r1, [r0, #0]
 8015f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015f62:	bf00      	nop
 8015f64:	e000ed88 	.word	0xe000ed88

08015f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015f68:	b480      	push	{r7}
 8015f6a:	b085      	sub	sp, #20
 8015f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015f6e:	f3ef 8305 	mrs	r3, IPSR
 8015f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	2b0f      	cmp	r3, #15
 8015f78:	d914      	bls.n	8015fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015f7a:	4a17      	ldr	r2, [pc, #92]	; (8015fd8 <vPortValidateInterruptPriority+0x70>)
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	4413      	add	r3, r2
 8015f80:	781b      	ldrb	r3, [r3, #0]
 8015f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015f84:	4b15      	ldr	r3, [pc, #84]	; (8015fdc <vPortValidateInterruptPriority+0x74>)
 8015f86:	781b      	ldrb	r3, [r3, #0]
 8015f88:	7afa      	ldrb	r2, [r7, #11]
 8015f8a:	429a      	cmp	r2, r3
 8015f8c:	d20a      	bcs.n	8015fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f92:	f383 8811 	msr	BASEPRI, r3
 8015f96:	f3bf 8f6f 	isb	sy
 8015f9a:	f3bf 8f4f 	dsb	sy
 8015f9e:	607b      	str	r3, [r7, #4]
}
 8015fa0:	bf00      	nop
 8015fa2:	e7fe      	b.n	8015fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015fa4:	4b0e      	ldr	r3, [pc, #56]	; (8015fe0 <vPortValidateInterruptPriority+0x78>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015fac:	4b0d      	ldr	r3, [pc, #52]	; (8015fe4 <vPortValidateInterruptPriority+0x7c>)
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d90a      	bls.n	8015fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fb8:	f383 8811 	msr	BASEPRI, r3
 8015fbc:	f3bf 8f6f 	isb	sy
 8015fc0:	f3bf 8f4f 	dsb	sy
 8015fc4:	603b      	str	r3, [r7, #0]
}
 8015fc6:	bf00      	nop
 8015fc8:	e7fe      	b.n	8015fc8 <vPortValidateInterruptPriority+0x60>
	}
 8015fca:	bf00      	nop
 8015fcc:	3714      	adds	r7, #20
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr
 8015fd6:	bf00      	nop
 8015fd8:	e000e3f0 	.word	0xe000e3f0
 8015fdc:	200031b4 	.word	0x200031b4
 8015fe0:	e000ed0c 	.word	0xe000ed0c
 8015fe4:	200031b8 	.word	0x200031b8

08015fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b08a      	sub	sp, #40	; 0x28
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015ff4:	f7fe fc40 	bl	8014878 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015ff8:	4b58      	ldr	r3, [pc, #352]	; (801615c <pvPortMalloc+0x174>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d101      	bne.n	8016004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016000:	f000 f910 	bl	8016224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016004:	4b56      	ldr	r3, [pc, #344]	; (8016160 <pvPortMalloc+0x178>)
 8016006:	681a      	ldr	r2, [r3, #0]
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	4013      	ands	r3, r2
 801600c:	2b00      	cmp	r3, #0
 801600e:	f040 808e 	bne.w	801612e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d01d      	beq.n	8016054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016018:	2208      	movs	r2, #8
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	4413      	add	r3, r2
 801601e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	f003 0307 	and.w	r3, r3, #7
 8016026:	2b00      	cmp	r3, #0
 8016028:	d014      	beq.n	8016054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f023 0307 	bic.w	r3, r3, #7
 8016030:	3308      	adds	r3, #8
 8016032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f003 0307 	and.w	r3, r3, #7
 801603a:	2b00      	cmp	r3, #0
 801603c:	d00a      	beq.n	8016054 <pvPortMalloc+0x6c>
	__asm volatile
 801603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016042:	f383 8811 	msr	BASEPRI, r3
 8016046:	f3bf 8f6f 	isb	sy
 801604a:	f3bf 8f4f 	dsb	sy
 801604e:	617b      	str	r3, [r7, #20]
}
 8016050:	bf00      	nop
 8016052:	e7fe      	b.n	8016052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d069      	beq.n	801612e <pvPortMalloc+0x146>
 801605a:	4b42      	ldr	r3, [pc, #264]	; (8016164 <pvPortMalloc+0x17c>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	687a      	ldr	r2, [r7, #4]
 8016060:	429a      	cmp	r2, r3
 8016062:	d864      	bhi.n	801612e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016064:	4b40      	ldr	r3, [pc, #256]	; (8016168 <pvPortMalloc+0x180>)
 8016066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016068:	4b3f      	ldr	r3, [pc, #252]	; (8016168 <pvPortMalloc+0x180>)
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801606e:	e004      	b.n	801607a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801607c:	685b      	ldr	r3, [r3, #4]
 801607e:	687a      	ldr	r2, [r7, #4]
 8016080:	429a      	cmp	r2, r3
 8016082:	d903      	bls.n	801608c <pvPortMalloc+0xa4>
 8016084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d1f1      	bne.n	8016070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801608c:	4b33      	ldr	r3, [pc, #204]	; (801615c <pvPortMalloc+0x174>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016092:	429a      	cmp	r2, r3
 8016094:	d04b      	beq.n	801612e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016096:	6a3b      	ldr	r3, [r7, #32]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	2208      	movs	r2, #8
 801609c:	4413      	add	r3, r2
 801609e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80160a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a2:	681a      	ldr	r2, [r3, #0]
 80160a4:	6a3b      	ldr	r3, [r7, #32]
 80160a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80160a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160aa:	685a      	ldr	r2, [r3, #4]
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	1ad2      	subs	r2, r2, r3
 80160b0:	2308      	movs	r3, #8
 80160b2:	005b      	lsls	r3, r3, #1
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d91f      	bls.n	80160f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80160b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	4413      	add	r3, r2
 80160be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80160c0:	69bb      	ldr	r3, [r7, #24]
 80160c2:	f003 0307 	and.w	r3, r3, #7
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d00a      	beq.n	80160e0 <pvPortMalloc+0xf8>
	__asm volatile
 80160ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ce:	f383 8811 	msr	BASEPRI, r3
 80160d2:	f3bf 8f6f 	isb	sy
 80160d6:	f3bf 8f4f 	dsb	sy
 80160da:	613b      	str	r3, [r7, #16]
}
 80160dc:	bf00      	nop
 80160de:	e7fe      	b.n	80160de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80160e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e2:	685a      	ldr	r2, [r3, #4]
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	1ad2      	subs	r2, r2, r3
 80160e8:	69bb      	ldr	r3, [r7, #24]
 80160ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80160ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ee:	687a      	ldr	r2, [r7, #4]
 80160f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80160f2:	69b8      	ldr	r0, [r7, #24]
 80160f4:	f000 f8f8 	bl	80162e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80160f8:	4b1a      	ldr	r3, [pc, #104]	; (8016164 <pvPortMalloc+0x17c>)
 80160fa:	681a      	ldr	r2, [r3, #0]
 80160fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	1ad3      	subs	r3, r2, r3
 8016102:	4a18      	ldr	r2, [pc, #96]	; (8016164 <pvPortMalloc+0x17c>)
 8016104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016106:	4b17      	ldr	r3, [pc, #92]	; (8016164 <pvPortMalloc+0x17c>)
 8016108:	681a      	ldr	r2, [r3, #0]
 801610a:	4b18      	ldr	r3, [pc, #96]	; (801616c <pvPortMalloc+0x184>)
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	429a      	cmp	r2, r3
 8016110:	d203      	bcs.n	801611a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016112:	4b14      	ldr	r3, [pc, #80]	; (8016164 <pvPortMalloc+0x17c>)
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	4a15      	ldr	r2, [pc, #84]	; (801616c <pvPortMalloc+0x184>)
 8016118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801611c:	685a      	ldr	r2, [r3, #4]
 801611e:	4b10      	ldr	r3, [pc, #64]	; (8016160 <pvPortMalloc+0x178>)
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	431a      	orrs	r2, r3
 8016124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801612a:	2200      	movs	r2, #0
 801612c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801612e:	f7fe fbb1 	bl	8014894 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016132:	69fb      	ldr	r3, [r7, #28]
 8016134:	f003 0307 	and.w	r3, r3, #7
 8016138:	2b00      	cmp	r3, #0
 801613a:	d00a      	beq.n	8016152 <pvPortMalloc+0x16a>
	__asm volatile
 801613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016140:	f383 8811 	msr	BASEPRI, r3
 8016144:	f3bf 8f6f 	isb	sy
 8016148:	f3bf 8f4f 	dsb	sy
 801614c:	60fb      	str	r3, [r7, #12]
}
 801614e:	bf00      	nop
 8016150:	e7fe      	b.n	8016150 <pvPortMalloc+0x168>
	return pvReturn;
 8016152:	69fb      	ldr	r3, [r7, #28]
}
 8016154:	4618      	mov	r0, r3
 8016156:	3728      	adds	r7, #40	; 0x28
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}
 801615c:	20006dc4 	.word	0x20006dc4
 8016160:	20006dd0 	.word	0x20006dd0
 8016164:	20006dc8 	.word	0x20006dc8
 8016168:	20006dbc 	.word	0x20006dbc
 801616c:	20006dcc 	.word	0x20006dcc

08016170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b086      	sub	sp, #24
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d048      	beq.n	8016214 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016182:	2308      	movs	r3, #8
 8016184:	425b      	negs	r3, r3
 8016186:	697a      	ldr	r2, [r7, #20]
 8016188:	4413      	add	r3, r2
 801618a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801618c:	697b      	ldr	r3, [r7, #20]
 801618e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	685a      	ldr	r2, [r3, #4]
 8016194:	4b21      	ldr	r3, [pc, #132]	; (801621c <vPortFree+0xac>)
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	4013      	ands	r3, r2
 801619a:	2b00      	cmp	r3, #0
 801619c:	d10a      	bne.n	80161b4 <vPortFree+0x44>
	__asm volatile
 801619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161a2:	f383 8811 	msr	BASEPRI, r3
 80161a6:	f3bf 8f6f 	isb	sy
 80161aa:	f3bf 8f4f 	dsb	sy
 80161ae:	60fb      	str	r3, [r7, #12]
}
 80161b0:	bf00      	nop
 80161b2:	e7fe      	b.n	80161b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d00a      	beq.n	80161d2 <vPortFree+0x62>
	__asm volatile
 80161bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161c0:	f383 8811 	msr	BASEPRI, r3
 80161c4:	f3bf 8f6f 	isb	sy
 80161c8:	f3bf 8f4f 	dsb	sy
 80161cc:	60bb      	str	r3, [r7, #8]
}
 80161ce:	bf00      	nop
 80161d0:	e7fe      	b.n	80161d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80161d2:	693b      	ldr	r3, [r7, #16]
 80161d4:	685a      	ldr	r2, [r3, #4]
 80161d6:	4b11      	ldr	r3, [pc, #68]	; (801621c <vPortFree+0xac>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	4013      	ands	r3, r2
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d019      	beq.n	8016214 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d115      	bne.n	8016214 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80161e8:	693b      	ldr	r3, [r7, #16]
 80161ea:	685a      	ldr	r2, [r3, #4]
 80161ec:	4b0b      	ldr	r3, [pc, #44]	; (801621c <vPortFree+0xac>)
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	43db      	mvns	r3, r3
 80161f2:	401a      	ands	r2, r3
 80161f4:	693b      	ldr	r3, [r7, #16]
 80161f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80161f8:	f7fe fb3e 	bl	8014878 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80161fc:	693b      	ldr	r3, [r7, #16]
 80161fe:	685a      	ldr	r2, [r3, #4]
 8016200:	4b07      	ldr	r3, [pc, #28]	; (8016220 <vPortFree+0xb0>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	4413      	add	r3, r2
 8016206:	4a06      	ldr	r2, [pc, #24]	; (8016220 <vPortFree+0xb0>)
 8016208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801620a:	6938      	ldr	r0, [r7, #16]
 801620c:	f000 f86c 	bl	80162e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016210:	f7fe fb40 	bl	8014894 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016214:	bf00      	nop
 8016216:	3718      	adds	r7, #24
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}
 801621c:	20006dd0 	.word	0x20006dd0
 8016220:	20006dc8 	.word	0x20006dc8

08016224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016224:	b480      	push	{r7}
 8016226:	b085      	sub	sp, #20
 8016228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801622a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801622e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016230:	4b27      	ldr	r3, [pc, #156]	; (80162d0 <prvHeapInit+0xac>)
 8016232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	f003 0307 	and.w	r3, r3, #7
 801623a:	2b00      	cmp	r3, #0
 801623c:	d00c      	beq.n	8016258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	3307      	adds	r3, #7
 8016242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	f023 0307 	bic.w	r3, r3, #7
 801624a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801624c:	68ba      	ldr	r2, [r7, #8]
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	1ad3      	subs	r3, r2, r3
 8016252:	4a1f      	ldr	r2, [pc, #124]	; (80162d0 <prvHeapInit+0xac>)
 8016254:	4413      	add	r3, r2
 8016256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801625c:	4a1d      	ldr	r2, [pc, #116]	; (80162d4 <prvHeapInit+0xb0>)
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016262:	4b1c      	ldr	r3, [pc, #112]	; (80162d4 <prvHeapInit+0xb0>)
 8016264:	2200      	movs	r2, #0
 8016266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	68ba      	ldr	r2, [r7, #8]
 801626c:	4413      	add	r3, r2
 801626e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016270:	2208      	movs	r2, #8
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	1a9b      	subs	r3, r3, r2
 8016276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	f023 0307 	bic.w	r3, r3, #7
 801627e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	4a15      	ldr	r2, [pc, #84]	; (80162d8 <prvHeapInit+0xb4>)
 8016284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016286:	4b14      	ldr	r3, [pc, #80]	; (80162d8 <prvHeapInit+0xb4>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	2200      	movs	r2, #0
 801628c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801628e:	4b12      	ldr	r3, [pc, #72]	; (80162d8 <prvHeapInit+0xb4>)
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	2200      	movs	r2, #0
 8016294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801629a:	683b      	ldr	r3, [r7, #0]
 801629c:	68fa      	ldr	r2, [r7, #12]
 801629e:	1ad2      	subs	r2, r2, r3
 80162a0:	683b      	ldr	r3, [r7, #0]
 80162a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80162a4:	4b0c      	ldr	r3, [pc, #48]	; (80162d8 <prvHeapInit+0xb4>)
 80162a6:	681a      	ldr	r2, [r3, #0]
 80162a8:	683b      	ldr	r3, [r7, #0]
 80162aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	685b      	ldr	r3, [r3, #4]
 80162b0:	4a0a      	ldr	r2, [pc, #40]	; (80162dc <prvHeapInit+0xb8>)
 80162b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80162b4:	683b      	ldr	r3, [r7, #0]
 80162b6:	685b      	ldr	r3, [r3, #4]
 80162b8:	4a09      	ldr	r2, [pc, #36]	; (80162e0 <prvHeapInit+0xbc>)
 80162ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80162bc:	4b09      	ldr	r3, [pc, #36]	; (80162e4 <prvHeapInit+0xc0>)
 80162be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80162c2:	601a      	str	r2, [r3, #0]
}
 80162c4:	bf00      	nop
 80162c6:	3714      	adds	r7, #20
 80162c8:	46bd      	mov	sp, r7
 80162ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ce:	4770      	bx	lr
 80162d0:	200031bc 	.word	0x200031bc
 80162d4:	20006dbc 	.word	0x20006dbc
 80162d8:	20006dc4 	.word	0x20006dc4
 80162dc:	20006dcc 	.word	0x20006dcc
 80162e0:	20006dc8 	.word	0x20006dc8
 80162e4:	20006dd0 	.word	0x20006dd0

080162e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80162e8:	b480      	push	{r7}
 80162ea:	b085      	sub	sp, #20
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80162f0:	4b28      	ldr	r3, [pc, #160]	; (8016394 <prvInsertBlockIntoFreeList+0xac>)
 80162f2:	60fb      	str	r3, [r7, #12]
 80162f4:	e002      	b.n	80162fc <prvInsertBlockIntoFreeList+0x14>
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	60fb      	str	r3, [r7, #12]
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	687a      	ldr	r2, [r7, #4]
 8016302:	429a      	cmp	r2, r3
 8016304:	d8f7      	bhi.n	80162f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	68ba      	ldr	r2, [r7, #8]
 8016310:	4413      	add	r3, r2
 8016312:	687a      	ldr	r2, [r7, #4]
 8016314:	429a      	cmp	r2, r3
 8016316:	d108      	bne.n	801632a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	685a      	ldr	r2, [r3, #4]
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	685b      	ldr	r3, [r3, #4]
 8016320:	441a      	add	r2, r3
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	68ba      	ldr	r2, [r7, #8]
 8016334:	441a      	add	r2, r3
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	429a      	cmp	r2, r3
 801633c:	d118      	bne.n	8016370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	681a      	ldr	r2, [r3, #0]
 8016342:	4b15      	ldr	r3, [pc, #84]	; (8016398 <prvInsertBlockIntoFreeList+0xb0>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	429a      	cmp	r2, r3
 8016348:	d00d      	beq.n	8016366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	685a      	ldr	r2, [r3, #4]
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	441a      	add	r2, r3
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	681a      	ldr	r2, [r3, #0]
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	601a      	str	r2, [r3, #0]
 8016364:	e008      	b.n	8016378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016366:	4b0c      	ldr	r3, [pc, #48]	; (8016398 <prvInsertBlockIntoFreeList+0xb0>)
 8016368:	681a      	ldr	r2, [r3, #0]
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	601a      	str	r2, [r3, #0]
 801636e:	e003      	b.n	8016378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	681a      	ldr	r2, [r3, #0]
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016378:	68fa      	ldr	r2, [r7, #12]
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	429a      	cmp	r2, r3
 801637e:	d002      	beq.n	8016386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	687a      	ldr	r2, [r7, #4]
 8016384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016386:	bf00      	nop
 8016388:	3714      	adds	r7, #20
 801638a:	46bd      	mov	sp, r7
 801638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016390:	4770      	bx	lr
 8016392:	bf00      	nop
 8016394:	20006dbc 	.word	0x20006dbc
 8016398:	20006dc4 	.word	0x20006dc4

0801639c <findslot>:
 801639c:	4b0a      	ldr	r3, [pc, #40]	; (80163c8 <findslot+0x2c>)
 801639e:	b510      	push	{r4, lr}
 80163a0:	4604      	mov	r4, r0
 80163a2:	6818      	ldr	r0, [r3, #0]
 80163a4:	b118      	cbz	r0, 80163ae <findslot+0x12>
 80163a6:	6983      	ldr	r3, [r0, #24]
 80163a8:	b90b      	cbnz	r3, 80163ae <findslot+0x12>
 80163aa:	f000 ffc5 	bl	8017338 <__sinit>
 80163ae:	2c13      	cmp	r4, #19
 80163b0:	d807      	bhi.n	80163c2 <findslot+0x26>
 80163b2:	4806      	ldr	r0, [pc, #24]	; (80163cc <findslot+0x30>)
 80163b4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80163b8:	3201      	adds	r2, #1
 80163ba:	d002      	beq.n	80163c2 <findslot+0x26>
 80163bc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80163c0:	bd10      	pop	{r4, pc}
 80163c2:	2000      	movs	r0, #0
 80163c4:	e7fc      	b.n	80163c0 <findslot+0x24>
 80163c6:	bf00      	nop
 80163c8:	200005c0 	.word	0x200005c0
 80163cc:	20006de0 	.word	0x20006de0

080163d0 <error>:
 80163d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163d2:	4604      	mov	r4, r0
 80163d4:	f000 ff52 	bl	801727c <__errno>
 80163d8:	2613      	movs	r6, #19
 80163da:	4605      	mov	r5, r0
 80163dc:	2700      	movs	r7, #0
 80163de:	4630      	mov	r0, r6
 80163e0:	4639      	mov	r1, r7
 80163e2:	beab      	bkpt	0x00ab
 80163e4:	4606      	mov	r6, r0
 80163e6:	602e      	str	r6, [r5, #0]
 80163e8:	4620      	mov	r0, r4
 80163ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080163ec <checkerror>:
 80163ec:	1c43      	adds	r3, r0, #1
 80163ee:	d101      	bne.n	80163f4 <checkerror+0x8>
 80163f0:	f7ff bfee 	b.w	80163d0 <error>
 80163f4:	4770      	bx	lr

080163f6 <_swiread>:
 80163f6:	b530      	push	{r4, r5, lr}
 80163f8:	b085      	sub	sp, #20
 80163fa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80163fe:	9203      	str	r2, [sp, #12]
 8016400:	2406      	movs	r4, #6
 8016402:	ad01      	add	r5, sp, #4
 8016404:	4620      	mov	r0, r4
 8016406:	4629      	mov	r1, r5
 8016408:	beab      	bkpt	0x00ab
 801640a:	4604      	mov	r4, r0
 801640c:	4620      	mov	r0, r4
 801640e:	f7ff ffed 	bl	80163ec <checkerror>
 8016412:	b005      	add	sp, #20
 8016414:	bd30      	pop	{r4, r5, pc}

08016416 <_read>:
 8016416:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016418:	4615      	mov	r5, r2
 801641a:	9101      	str	r1, [sp, #4]
 801641c:	f7ff ffbe 	bl	801639c <findslot>
 8016420:	9901      	ldr	r1, [sp, #4]
 8016422:	4604      	mov	r4, r0
 8016424:	b938      	cbnz	r0, 8016436 <_read+0x20>
 8016426:	f000 ff29 	bl	801727c <__errno>
 801642a:	2309      	movs	r3, #9
 801642c:	6003      	str	r3, [r0, #0]
 801642e:	f04f 30ff 	mov.w	r0, #4294967295
 8016432:	b003      	add	sp, #12
 8016434:	bd30      	pop	{r4, r5, pc}
 8016436:	6800      	ldr	r0, [r0, #0]
 8016438:	462a      	mov	r2, r5
 801643a:	f7ff ffdc 	bl	80163f6 <_swiread>
 801643e:	1c43      	adds	r3, r0, #1
 8016440:	d0f7      	beq.n	8016432 <_read+0x1c>
 8016442:	6863      	ldr	r3, [r4, #4]
 8016444:	1a2a      	subs	r2, r5, r0
 8016446:	4413      	add	r3, r2
 8016448:	6063      	str	r3, [r4, #4]
 801644a:	4610      	mov	r0, r2
 801644c:	e7f1      	b.n	8016432 <_read+0x1c>

0801644e <_swilseek>:
 801644e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016450:	460c      	mov	r4, r1
 8016452:	4616      	mov	r6, r2
 8016454:	f7ff ffa2 	bl	801639c <findslot>
 8016458:	4605      	mov	r5, r0
 801645a:	b940      	cbnz	r0, 801646e <_swilseek+0x20>
 801645c:	f000 ff0e 	bl	801727c <__errno>
 8016460:	2309      	movs	r3, #9
 8016462:	6003      	str	r3, [r0, #0]
 8016464:	f04f 34ff 	mov.w	r4, #4294967295
 8016468:	4620      	mov	r0, r4
 801646a:	b003      	add	sp, #12
 801646c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801646e:	2e02      	cmp	r6, #2
 8016470:	d903      	bls.n	801647a <_swilseek+0x2c>
 8016472:	f000 ff03 	bl	801727c <__errno>
 8016476:	2316      	movs	r3, #22
 8016478:	e7f3      	b.n	8016462 <_swilseek+0x14>
 801647a:	2e01      	cmp	r6, #1
 801647c:	d112      	bne.n	80164a4 <_swilseek+0x56>
 801647e:	6843      	ldr	r3, [r0, #4]
 8016480:	18e4      	adds	r4, r4, r3
 8016482:	d4f6      	bmi.n	8016472 <_swilseek+0x24>
 8016484:	682b      	ldr	r3, [r5, #0]
 8016486:	260a      	movs	r6, #10
 8016488:	e9cd 3400 	strd	r3, r4, [sp]
 801648c:	466f      	mov	r7, sp
 801648e:	4630      	mov	r0, r6
 8016490:	4639      	mov	r1, r7
 8016492:	beab      	bkpt	0x00ab
 8016494:	4606      	mov	r6, r0
 8016496:	4630      	mov	r0, r6
 8016498:	f7ff ffa8 	bl	80163ec <checkerror>
 801649c:	2800      	cmp	r0, #0
 801649e:	dbe1      	blt.n	8016464 <_swilseek+0x16>
 80164a0:	606c      	str	r4, [r5, #4]
 80164a2:	e7e1      	b.n	8016468 <_swilseek+0x1a>
 80164a4:	2e02      	cmp	r6, #2
 80164a6:	d1ed      	bne.n	8016484 <_swilseek+0x36>
 80164a8:	6803      	ldr	r3, [r0, #0]
 80164aa:	9300      	str	r3, [sp, #0]
 80164ac:	260c      	movs	r6, #12
 80164ae:	466f      	mov	r7, sp
 80164b0:	4630      	mov	r0, r6
 80164b2:	4639      	mov	r1, r7
 80164b4:	beab      	bkpt	0x00ab
 80164b6:	4606      	mov	r6, r0
 80164b8:	4630      	mov	r0, r6
 80164ba:	f7ff ff97 	bl	80163ec <checkerror>
 80164be:	1c43      	adds	r3, r0, #1
 80164c0:	d0d0      	beq.n	8016464 <_swilseek+0x16>
 80164c2:	4404      	add	r4, r0
 80164c4:	e7de      	b.n	8016484 <_swilseek+0x36>

080164c6 <_lseek>:
 80164c6:	f7ff bfc2 	b.w	801644e <_swilseek>

080164ca <_swiwrite>:
 80164ca:	b530      	push	{r4, r5, lr}
 80164cc:	b085      	sub	sp, #20
 80164ce:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80164d2:	9203      	str	r2, [sp, #12]
 80164d4:	2405      	movs	r4, #5
 80164d6:	ad01      	add	r5, sp, #4
 80164d8:	4620      	mov	r0, r4
 80164da:	4629      	mov	r1, r5
 80164dc:	beab      	bkpt	0x00ab
 80164de:	4604      	mov	r4, r0
 80164e0:	4620      	mov	r0, r4
 80164e2:	f7ff ff83 	bl	80163ec <checkerror>
 80164e6:	b005      	add	sp, #20
 80164e8:	bd30      	pop	{r4, r5, pc}

080164ea <_write>:
 80164ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164ec:	4615      	mov	r5, r2
 80164ee:	9101      	str	r1, [sp, #4]
 80164f0:	f7ff ff54 	bl	801639c <findslot>
 80164f4:	9901      	ldr	r1, [sp, #4]
 80164f6:	4604      	mov	r4, r0
 80164f8:	b930      	cbnz	r0, 8016508 <_write+0x1e>
 80164fa:	f000 febf 	bl	801727c <__errno>
 80164fe:	2309      	movs	r3, #9
 8016500:	6003      	str	r3, [r0, #0]
 8016502:	f04f 30ff 	mov.w	r0, #4294967295
 8016506:	e012      	b.n	801652e <_write+0x44>
 8016508:	6800      	ldr	r0, [r0, #0]
 801650a:	462a      	mov	r2, r5
 801650c:	f7ff ffdd 	bl	80164ca <_swiwrite>
 8016510:	2800      	cmp	r0, #0
 8016512:	dbf6      	blt.n	8016502 <_write+0x18>
 8016514:	6862      	ldr	r2, [r4, #4]
 8016516:	1a2b      	subs	r3, r5, r0
 8016518:	441a      	add	r2, r3
 801651a:	42a8      	cmp	r0, r5
 801651c:	6062      	str	r2, [r4, #4]
 801651e:	d105      	bne.n	801652c <_write+0x42>
 8016520:	2000      	movs	r0, #0
 8016522:	b003      	add	sp, #12
 8016524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016528:	f7ff bf52 	b.w	80163d0 <error>
 801652c:	4618      	mov	r0, r3
 801652e:	b003      	add	sp, #12
 8016530:	bd30      	pop	{r4, r5, pc}

08016532 <_swiclose>:
 8016532:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016534:	2402      	movs	r4, #2
 8016536:	9001      	str	r0, [sp, #4]
 8016538:	ad01      	add	r5, sp, #4
 801653a:	4620      	mov	r0, r4
 801653c:	4629      	mov	r1, r5
 801653e:	beab      	bkpt	0x00ab
 8016540:	4604      	mov	r4, r0
 8016542:	4620      	mov	r0, r4
 8016544:	f7ff ff52 	bl	80163ec <checkerror>
 8016548:	b003      	add	sp, #12
 801654a:	bd30      	pop	{r4, r5, pc}

0801654c <_close>:
 801654c:	b538      	push	{r3, r4, r5, lr}
 801654e:	4605      	mov	r5, r0
 8016550:	f7ff ff24 	bl	801639c <findslot>
 8016554:	4604      	mov	r4, r0
 8016556:	b930      	cbnz	r0, 8016566 <_close+0x1a>
 8016558:	f000 fe90 	bl	801727c <__errno>
 801655c:	2309      	movs	r3, #9
 801655e:	6003      	str	r3, [r0, #0]
 8016560:	f04f 30ff 	mov.w	r0, #4294967295
 8016564:	bd38      	pop	{r3, r4, r5, pc}
 8016566:	3d01      	subs	r5, #1
 8016568:	2d01      	cmp	r5, #1
 801656a:	d809      	bhi.n	8016580 <_close+0x34>
 801656c:	4b09      	ldr	r3, [pc, #36]	; (8016594 <_close+0x48>)
 801656e:	689a      	ldr	r2, [r3, #8]
 8016570:	691b      	ldr	r3, [r3, #16]
 8016572:	429a      	cmp	r2, r3
 8016574:	d104      	bne.n	8016580 <_close+0x34>
 8016576:	f04f 33ff 	mov.w	r3, #4294967295
 801657a:	6003      	str	r3, [r0, #0]
 801657c:	2000      	movs	r0, #0
 801657e:	e7f1      	b.n	8016564 <_close+0x18>
 8016580:	6820      	ldr	r0, [r4, #0]
 8016582:	f7ff ffd6 	bl	8016532 <_swiclose>
 8016586:	2800      	cmp	r0, #0
 8016588:	d1ec      	bne.n	8016564 <_close+0x18>
 801658a:	f04f 33ff 	mov.w	r3, #4294967295
 801658e:	6023      	str	r3, [r4, #0]
 8016590:	e7e8      	b.n	8016564 <_close+0x18>
 8016592:	bf00      	nop
 8016594:	20006de0 	.word	0x20006de0

08016598 <_getpid>:
 8016598:	2001      	movs	r0, #1
 801659a:	4770      	bx	lr

0801659c <_swistat>:
 801659c:	b570      	push	{r4, r5, r6, lr}
 801659e:	460c      	mov	r4, r1
 80165a0:	f7ff fefc 	bl	801639c <findslot>
 80165a4:	4605      	mov	r5, r0
 80165a6:	b930      	cbnz	r0, 80165b6 <_swistat+0x1a>
 80165a8:	f000 fe68 	bl	801727c <__errno>
 80165ac:	2309      	movs	r3, #9
 80165ae:	6003      	str	r3, [r0, #0]
 80165b0:	f04f 30ff 	mov.w	r0, #4294967295
 80165b4:	bd70      	pop	{r4, r5, r6, pc}
 80165b6:	6863      	ldr	r3, [r4, #4]
 80165b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80165bc:	6063      	str	r3, [r4, #4]
 80165be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80165c2:	64a3      	str	r3, [r4, #72]	; 0x48
 80165c4:	260c      	movs	r6, #12
 80165c6:	4630      	mov	r0, r6
 80165c8:	4629      	mov	r1, r5
 80165ca:	beab      	bkpt	0x00ab
 80165cc:	4605      	mov	r5, r0
 80165ce:	4628      	mov	r0, r5
 80165d0:	f7ff ff0c 	bl	80163ec <checkerror>
 80165d4:	1c43      	adds	r3, r0, #1
 80165d6:	bf1c      	itt	ne
 80165d8:	6120      	strne	r0, [r4, #16]
 80165da:	2000      	movne	r0, #0
 80165dc:	e7ea      	b.n	80165b4 <_swistat+0x18>

080165de <_fstat>:
 80165de:	460b      	mov	r3, r1
 80165e0:	b510      	push	{r4, lr}
 80165e2:	2100      	movs	r1, #0
 80165e4:	4604      	mov	r4, r0
 80165e6:	2258      	movs	r2, #88	; 0x58
 80165e8:	4618      	mov	r0, r3
 80165ea:	f000 ff81 	bl	80174f0 <memset>
 80165ee:	4601      	mov	r1, r0
 80165f0:	4620      	mov	r0, r4
 80165f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165f6:	f7ff bfd1 	b.w	801659c <_swistat>

080165fa <_stat>:
 80165fa:	b538      	push	{r3, r4, r5, lr}
 80165fc:	460d      	mov	r5, r1
 80165fe:	4604      	mov	r4, r0
 8016600:	2258      	movs	r2, #88	; 0x58
 8016602:	2100      	movs	r1, #0
 8016604:	4628      	mov	r0, r5
 8016606:	f000 ff73 	bl	80174f0 <memset>
 801660a:	4620      	mov	r0, r4
 801660c:	2100      	movs	r1, #0
 801660e:	f000 f811 	bl	8016634 <_swiopen>
 8016612:	1c43      	adds	r3, r0, #1
 8016614:	4604      	mov	r4, r0
 8016616:	d00b      	beq.n	8016630 <_stat+0x36>
 8016618:	686b      	ldr	r3, [r5, #4]
 801661a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801661e:	606b      	str	r3, [r5, #4]
 8016620:	4629      	mov	r1, r5
 8016622:	f7ff ffbb 	bl	801659c <_swistat>
 8016626:	4605      	mov	r5, r0
 8016628:	4620      	mov	r0, r4
 801662a:	f7ff ff8f 	bl	801654c <_close>
 801662e:	462c      	mov	r4, r5
 8016630:	4620      	mov	r0, r4
 8016632:	bd38      	pop	{r3, r4, r5, pc}

08016634 <_swiopen>:
 8016634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016638:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80166e4 <_swiopen+0xb0>
 801663c:	b097      	sub	sp, #92	; 0x5c
 801663e:	4607      	mov	r7, r0
 8016640:	460e      	mov	r6, r1
 8016642:	2500      	movs	r5, #0
 8016644:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8016648:	1c61      	adds	r1, r4, #1
 801664a:	d037      	beq.n	80166bc <_swiopen+0x88>
 801664c:	3501      	adds	r5, #1
 801664e:	2d14      	cmp	r5, #20
 8016650:	d1f8      	bne.n	8016644 <_swiopen+0x10>
 8016652:	f000 fe13 	bl	801727c <__errno>
 8016656:	2318      	movs	r3, #24
 8016658:	6003      	str	r3, [r0, #0]
 801665a:	f04f 34ff 	mov.w	r4, #4294967295
 801665e:	e03d      	b.n	80166dc <_swiopen+0xa8>
 8016660:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8016664:	f240 6301 	movw	r3, #1537	; 0x601
 8016668:	07b2      	lsls	r2, r6, #30
 801666a:	bf48      	it	mi
 801666c:	f044 0402 	orrmi.w	r4, r4, #2
 8016670:	421e      	tst	r6, r3
 8016672:	bf18      	it	ne
 8016674:	f044 0404 	orrne.w	r4, r4, #4
 8016678:	0733      	lsls	r3, r6, #28
 801667a:	bf48      	it	mi
 801667c:	f024 0404 	bicmi.w	r4, r4, #4
 8016680:	4638      	mov	r0, r7
 8016682:	bf48      	it	mi
 8016684:	f044 0408 	orrmi.w	r4, r4, #8
 8016688:	9700      	str	r7, [sp, #0]
 801668a:	f7e9 fda1 	bl	80001d0 <strlen>
 801668e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8016692:	2401      	movs	r4, #1
 8016694:	4620      	mov	r0, r4
 8016696:	4649      	mov	r1, r9
 8016698:	beab      	bkpt	0x00ab
 801669a:	4604      	mov	r4, r0
 801669c:	2c00      	cmp	r4, #0
 801669e:	db08      	blt.n	80166b2 <_swiopen+0x7e>
 80166a0:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80166a4:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80166a8:	2300      	movs	r3, #0
 80166aa:	f8c8 3004 	str.w	r3, [r8, #4]
 80166ae:	462c      	mov	r4, r5
 80166b0:	e014      	b.n	80166dc <_swiopen+0xa8>
 80166b2:	4620      	mov	r0, r4
 80166b4:	f7ff fe8c 	bl	80163d0 <error>
 80166b8:	4604      	mov	r4, r0
 80166ba:	e00f      	b.n	80166dc <_swiopen+0xa8>
 80166bc:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80166c0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80166c4:	46e9      	mov	r9, sp
 80166c6:	d1cb      	bne.n	8016660 <_swiopen+0x2c>
 80166c8:	4649      	mov	r1, r9
 80166ca:	4638      	mov	r0, r7
 80166cc:	f7ff ff95 	bl	80165fa <_stat>
 80166d0:	3001      	adds	r0, #1
 80166d2:	d0c5      	beq.n	8016660 <_swiopen+0x2c>
 80166d4:	f000 fdd2 	bl	801727c <__errno>
 80166d8:	2311      	movs	r3, #17
 80166da:	6003      	str	r3, [r0, #0]
 80166dc:	4620      	mov	r0, r4
 80166de:	b017      	add	sp, #92	; 0x5c
 80166e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166e4:	20006de0 	.word	0x20006de0

080166e8 <_get_semihosting_exts>:
 80166e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80166ec:	4606      	mov	r6, r0
 80166ee:	460f      	mov	r7, r1
 80166f0:	482a      	ldr	r0, [pc, #168]	; (801679c <_get_semihosting_exts+0xb4>)
 80166f2:	2100      	movs	r1, #0
 80166f4:	4615      	mov	r5, r2
 80166f6:	f7ff ff9d 	bl	8016634 <_swiopen>
 80166fa:	462a      	mov	r2, r5
 80166fc:	4604      	mov	r4, r0
 80166fe:	2100      	movs	r1, #0
 8016700:	4630      	mov	r0, r6
 8016702:	f000 fef5 	bl	80174f0 <memset>
 8016706:	1c63      	adds	r3, r4, #1
 8016708:	d016      	beq.n	8016738 <_get_semihosting_exts+0x50>
 801670a:	4620      	mov	r0, r4
 801670c:	f7ff fe46 	bl	801639c <findslot>
 8016710:	f04f 090c 	mov.w	r9, #12
 8016714:	4680      	mov	r8, r0
 8016716:	4648      	mov	r0, r9
 8016718:	4641      	mov	r1, r8
 801671a:	beab      	bkpt	0x00ab
 801671c:	4680      	mov	r8, r0
 801671e:	4640      	mov	r0, r8
 8016720:	f7ff fe64 	bl	80163ec <checkerror>
 8016724:	2803      	cmp	r0, #3
 8016726:	dd02      	ble.n	801672e <_get_semihosting_exts+0x46>
 8016728:	1ec3      	subs	r3, r0, #3
 801672a:	42ab      	cmp	r3, r5
 801672c:	dc08      	bgt.n	8016740 <_get_semihosting_exts+0x58>
 801672e:	4620      	mov	r0, r4
 8016730:	f7ff ff0c 	bl	801654c <_close>
 8016734:	f04f 34ff 	mov.w	r4, #4294967295
 8016738:	4620      	mov	r0, r4
 801673a:	b003      	add	sp, #12
 801673c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016740:	2204      	movs	r2, #4
 8016742:	eb0d 0102 	add.w	r1, sp, r2
 8016746:	4620      	mov	r0, r4
 8016748:	f7ff fe65 	bl	8016416 <_read>
 801674c:	2803      	cmp	r0, #3
 801674e:	ddee      	ble.n	801672e <_get_semihosting_exts+0x46>
 8016750:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016754:	2b53      	cmp	r3, #83	; 0x53
 8016756:	d1ea      	bne.n	801672e <_get_semihosting_exts+0x46>
 8016758:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801675c:	2b48      	cmp	r3, #72	; 0x48
 801675e:	d1e6      	bne.n	801672e <_get_semihosting_exts+0x46>
 8016760:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8016764:	2b46      	cmp	r3, #70	; 0x46
 8016766:	d1e2      	bne.n	801672e <_get_semihosting_exts+0x46>
 8016768:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801676c:	2b42      	cmp	r3, #66	; 0x42
 801676e:	d1de      	bne.n	801672e <_get_semihosting_exts+0x46>
 8016770:	2201      	movs	r2, #1
 8016772:	4639      	mov	r1, r7
 8016774:	4620      	mov	r0, r4
 8016776:	f7ff fe6a 	bl	801644e <_swilseek>
 801677a:	2800      	cmp	r0, #0
 801677c:	dbd7      	blt.n	801672e <_get_semihosting_exts+0x46>
 801677e:	462a      	mov	r2, r5
 8016780:	4631      	mov	r1, r6
 8016782:	4620      	mov	r0, r4
 8016784:	f7ff fe47 	bl	8016416 <_read>
 8016788:	4605      	mov	r5, r0
 801678a:	4620      	mov	r0, r4
 801678c:	f7ff fede 	bl	801654c <_close>
 8016790:	4628      	mov	r0, r5
 8016792:	f7ff fe2b 	bl	80163ec <checkerror>
 8016796:	4604      	mov	r4, r0
 8016798:	e7ce      	b.n	8016738 <_get_semihosting_exts+0x50>
 801679a:	bf00      	nop
 801679c:	080195f8 	.word	0x080195f8

080167a0 <initialise_semihosting_exts>:
 80167a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80167a2:	4d0a      	ldr	r5, [pc, #40]	; (80167cc <initialise_semihosting_exts+0x2c>)
 80167a4:	4c0a      	ldr	r4, [pc, #40]	; (80167d0 <initialise_semihosting_exts+0x30>)
 80167a6:	2100      	movs	r1, #0
 80167a8:	2201      	movs	r2, #1
 80167aa:	a801      	add	r0, sp, #4
 80167ac:	6029      	str	r1, [r5, #0]
 80167ae:	6022      	str	r2, [r4, #0]
 80167b0:	f7ff ff9a 	bl	80166e8 <_get_semihosting_exts>
 80167b4:	2800      	cmp	r0, #0
 80167b6:	dd07      	ble.n	80167c8 <initialise_semihosting_exts+0x28>
 80167b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80167bc:	f003 0201 	and.w	r2, r3, #1
 80167c0:	f003 0302 	and.w	r3, r3, #2
 80167c4:	602a      	str	r2, [r5, #0]
 80167c6:	6023      	str	r3, [r4, #0]
 80167c8:	b003      	add	sp, #12
 80167ca:	bd30      	pop	{r4, r5, pc}
 80167cc:	200005b4 	.word	0x200005b4
 80167d0:	200005b8 	.word	0x200005b8

080167d4 <_has_ext_stdout_stderr>:
 80167d4:	b510      	push	{r4, lr}
 80167d6:	4c04      	ldr	r4, [pc, #16]	; (80167e8 <_has_ext_stdout_stderr+0x14>)
 80167d8:	6823      	ldr	r3, [r4, #0]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	da01      	bge.n	80167e2 <_has_ext_stdout_stderr+0xe>
 80167de:	f7ff ffdf 	bl	80167a0 <initialise_semihosting_exts>
 80167e2:	6820      	ldr	r0, [r4, #0]
 80167e4:	bd10      	pop	{r4, pc}
 80167e6:	bf00      	nop
 80167e8:	200005b8 	.word	0x200005b8

080167ec <initialise_monitor_handles>:
 80167ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167f0:	b085      	sub	sp, #20
 80167f2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80168a4 <initialise_monitor_handles+0xb8>
 80167f6:	f8cd 9004 	str.w	r9, [sp, #4]
 80167fa:	2303      	movs	r3, #3
 80167fc:	2400      	movs	r4, #0
 80167fe:	9303      	str	r3, [sp, #12]
 8016800:	af01      	add	r7, sp, #4
 8016802:	9402      	str	r4, [sp, #8]
 8016804:	2501      	movs	r5, #1
 8016806:	4628      	mov	r0, r5
 8016808:	4639      	mov	r1, r7
 801680a:	beab      	bkpt	0x00ab
 801680c:	4605      	mov	r5, r0
 801680e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80168a8 <initialise_monitor_handles+0xbc>
 8016812:	4623      	mov	r3, r4
 8016814:	4c20      	ldr	r4, [pc, #128]	; (8016898 <initialise_monitor_handles+0xac>)
 8016816:	f8c8 5000 	str.w	r5, [r8]
 801681a:	f04f 32ff 	mov.w	r2, #4294967295
 801681e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8016822:	3301      	adds	r3, #1
 8016824:	2b14      	cmp	r3, #20
 8016826:	d1fa      	bne.n	801681e <initialise_monitor_handles+0x32>
 8016828:	f7ff ffd4 	bl	80167d4 <_has_ext_stdout_stderr>
 801682c:	4d1b      	ldr	r5, [pc, #108]	; (801689c <initialise_monitor_handles+0xb0>)
 801682e:	b1d0      	cbz	r0, 8016866 <initialise_monitor_handles+0x7a>
 8016830:	f04f 0a03 	mov.w	sl, #3
 8016834:	2304      	movs	r3, #4
 8016836:	f8cd 9004 	str.w	r9, [sp, #4]
 801683a:	2601      	movs	r6, #1
 801683c:	f8cd a00c 	str.w	sl, [sp, #12]
 8016840:	9302      	str	r3, [sp, #8]
 8016842:	4630      	mov	r0, r6
 8016844:	4639      	mov	r1, r7
 8016846:	beab      	bkpt	0x00ab
 8016848:	4683      	mov	fp, r0
 801684a:	4b15      	ldr	r3, [pc, #84]	; (80168a0 <initialise_monitor_handles+0xb4>)
 801684c:	f8cd 9004 	str.w	r9, [sp, #4]
 8016850:	f8c3 b000 	str.w	fp, [r3]
 8016854:	2308      	movs	r3, #8
 8016856:	f8cd a00c 	str.w	sl, [sp, #12]
 801685a:	9302      	str	r3, [sp, #8]
 801685c:	4630      	mov	r0, r6
 801685e:	4639      	mov	r1, r7
 8016860:	beab      	bkpt	0x00ab
 8016862:	4606      	mov	r6, r0
 8016864:	602e      	str	r6, [r5, #0]
 8016866:	682b      	ldr	r3, [r5, #0]
 8016868:	3301      	adds	r3, #1
 801686a:	bf02      	ittt	eq
 801686c:	4b0c      	ldreq	r3, [pc, #48]	; (80168a0 <initialise_monitor_handles+0xb4>)
 801686e:	681b      	ldreq	r3, [r3, #0]
 8016870:	602b      	streq	r3, [r5, #0]
 8016872:	2600      	movs	r6, #0
 8016874:	f8d8 3000 	ldr.w	r3, [r8]
 8016878:	6023      	str	r3, [r4, #0]
 801687a:	6066      	str	r6, [r4, #4]
 801687c:	f7ff ffaa 	bl	80167d4 <_has_ext_stdout_stderr>
 8016880:	b130      	cbz	r0, 8016890 <initialise_monitor_handles+0xa4>
 8016882:	4b07      	ldr	r3, [pc, #28]	; (80168a0 <initialise_monitor_handles+0xb4>)
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	e9c4 3602 	strd	r3, r6, [r4, #8]
 801688a:	682b      	ldr	r3, [r5, #0]
 801688c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8016890:	b005      	add	sp, #20
 8016892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016896:	bf00      	nop
 8016898:	20006de0 	.word	0x20006de0
 801689c:	20006dd4 	.word	0x20006dd4
 80168a0:	20006ddc 	.word	0x20006ddc
 80168a4:	0801960e 	.word	0x0801960e
 80168a8:	20006dd8 	.word	0x20006dd8

080168ac <_isatty>:
 80168ac:	b570      	push	{r4, r5, r6, lr}
 80168ae:	f7ff fd75 	bl	801639c <findslot>
 80168b2:	2509      	movs	r5, #9
 80168b4:	4604      	mov	r4, r0
 80168b6:	b920      	cbnz	r0, 80168c2 <_isatty+0x16>
 80168b8:	f000 fce0 	bl	801727c <__errno>
 80168bc:	6005      	str	r5, [r0, #0]
 80168be:	4620      	mov	r0, r4
 80168c0:	bd70      	pop	{r4, r5, r6, pc}
 80168c2:	4628      	mov	r0, r5
 80168c4:	4621      	mov	r1, r4
 80168c6:	beab      	bkpt	0x00ab
 80168c8:	4604      	mov	r4, r0
 80168ca:	2c01      	cmp	r4, #1
 80168cc:	d0f7      	beq.n	80168be <_isatty+0x12>
 80168ce:	f000 fcd5 	bl	801727c <__errno>
 80168d2:	2400      	movs	r4, #0
 80168d4:	4605      	mov	r5, r0
 80168d6:	2613      	movs	r6, #19
 80168d8:	4630      	mov	r0, r6
 80168da:	4621      	mov	r1, r4
 80168dc:	beab      	bkpt	0x00ab
 80168de:	4606      	mov	r6, r0
 80168e0:	602e      	str	r6, [r5, #0]
 80168e2:	e7ec      	b.n	80168be <_isatty+0x12>

080168e4 <_Znwj>:
 80168e4:	2801      	cmp	r0, #1
 80168e6:	bf38      	it	cc
 80168e8:	2001      	movcc	r0, #1
 80168ea:	b510      	push	{r4, lr}
 80168ec:	4604      	mov	r4, r0
 80168ee:	4620      	mov	r0, r4
 80168f0:	f000 fde8 	bl	80174c4 <malloc>
 80168f4:	b930      	cbnz	r0, 8016904 <_Znwj+0x20>
 80168f6:	f000 f81b 	bl	8016930 <_ZSt15get_new_handlerv>
 80168fa:	b908      	cbnz	r0, 8016900 <_Znwj+0x1c>
 80168fc:	f000 fcae 	bl	801725c <abort>
 8016900:	4780      	blx	r0
 8016902:	e7f4      	b.n	80168ee <_Znwj+0xa>
 8016904:	bd10      	pop	{r4, pc}

08016906 <__cxa_pure_virtual>:
 8016906:	b508      	push	{r3, lr}
 8016908:	f000 f80c 	bl	8016924 <_ZSt9terminatev>

0801690c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801690c:	b508      	push	{r3, lr}
 801690e:	4780      	blx	r0
 8016910:	f000 fca4 	bl	801725c <abort>

08016914 <_ZSt13get_terminatev>:
 8016914:	4b02      	ldr	r3, [pc, #8]	; (8016920 <_ZSt13get_terminatev+0xc>)
 8016916:	6818      	ldr	r0, [r3, #0]
 8016918:	f3bf 8f5b 	dmb	ish
 801691c:	4770      	bx	lr
 801691e:	bf00      	nop
 8016920:	200005bc 	.word	0x200005bc

08016924 <_ZSt9terminatev>:
 8016924:	b508      	push	{r3, lr}
 8016926:	f7ff fff5 	bl	8016914 <_ZSt13get_terminatev>
 801692a:	f7ff ffef 	bl	801690c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08016930 <_ZSt15get_new_handlerv>:
 8016930:	4b02      	ldr	r3, [pc, #8]	; (801693c <_ZSt15get_new_handlerv+0xc>)
 8016932:	6818      	ldr	r0, [r3, #0]
 8016934:	f3bf 8f5b 	dmb	ish
 8016938:	4770      	bx	lr
 801693a:	bf00      	nop
 801693c:	20006e80 	.word	0x20006e80

08016940 <ceilf>:
 8016940:	ee10 3a10 	vmov	r3, s0
 8016944:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016948:	3a7f      	subs	r2, #127	; 0x7f
 801694a:	2a16      	cmp	r2, #22
 801694c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016950:	dc2a      	bgt.n	80169a8 <ceilf+0x68>
 8016952:	2a00      	cmp	r2, #0
 8016954:	da11      	bge.n	801697a <ceilf+0x3a>
 8016956:	eddf 7a19 	vldr	s15, [pc, #100]	; 80169bc <ceilf+0x7c>
 801695a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801695e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016966:	dd05      	ble.n	8016974 <ceilf+0x34>
 8016968:	2b00      	cmp	r3, #0
 801696a:	db23      	blt.n	80169b4 <ceilf+0x74>
 801696c:	2900      	cmp	r1, #0
 801696e:	bf18      	it	ne
 8016970:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8016974:	ee00 3a10 	vmov	s0, r3
 8016978:	4770      	bx	lr
 801697a:	4911      	ldr	r1, [pc, #68]	; (80169c0 <ceilf+0x80>)
 801697c:	4111      	asrs	r1, r2
 801697e:	420b      	tst	r3, r1
 8016980:	d0fa      	beq.n	8016978 <ceilf+0x38>
 8016982:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80169bc <ceilf+0x7c>
 8016986:	ee30 0a27 	vadd.f32	s0, s0, s15
 801698a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801698e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016992:	ddef      	ble.n	8016974 <ceilf+0x34>
 8016994:	2b00      	cmp	r3, #0
 8016996:	bfc2      	ittt	gt
 8016998:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801699c:	fa40 f202 	asrgt.w	r2, r0, r2
 80169a0:	189b      	addgt	r3, r3, r2
 80169a2:	ea23 0301 	bic.w	r3, r3, r1
 80169a6:	e7e5      	b.n	8016974 <ceilf+0x34>
 80169a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80169ac:	d3e4      	bcc.n	8016978 <ceilf+0x38>
 80169ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 80169b2:	4770      	bx	lr
 80169b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80169b8:	e7dc      	b.n	8016974 <ceilf+0x34>
 80169ba:	bf00      	nop
 80169bc:	7149f2ca 	.word	0x7149f2ca
 80169c0:	007fffff 	.word	0x007fffff

080169c4 <floorf>:
 80169c4:	ee10 3a10 	vmov	r3, s0
 80169c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80169cc:	3a7f      	subs	r2, #127	; 0x7f
 80169ce:	2a16      	cmp	r2, #22
 80169d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80169d4:	dc2a      	bgt.n	8016a2c <floorf+0x68>
 80169d6:	2a00      	cmp	r2, #0
 80169d8:	da11      	bge.n	80169fe <floorf+0x3a>
 80169da:	eddf 7a18 	vldr	s15, [pc, #96]	; 8016a3c <floorf+0x78>
 80169de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80169e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80169e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169ea:	dd05      	ble.n	80169f8 <floorf+0x34>
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	da23      	bge.n	8016a38 <floorf+0x74>
 80169f0:	4a13      	ldr	r2, [pc, #76]	; (8016a40 <floorf+0x7c>)
 80169f2:	2900      	cmp	r1, #0
 80169f4:	bf18      	it	ne
 80169f6:	4613      	movne	r3, r2
 80169f8:	ee00 3a10 	vmov	s0, r3
 80169fc:	4770      	bx	lr
 80169fe:	4911      	ldr	r1, [pc, #68]	; (8016a44 <floorf+0x80>)
 8016a00:	4111      	asrs	r1, r2
 8016a02:	420b      	tst	r3, r1
 8016a04:	d0fa      	beq.n	80169fc <floorf+0x38>
 8016a06:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8016a3c <floorf+0x78>
 8016a0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016a0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a16:	ddef      	ble.n	80169f8 <floorf+0x34>
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	bfbe      	ittt	lt
 8016a1c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8016a20:	fa40 f202 	asrlt.w	r2, r0, r2
 8016a24:	189b      	addlt	r3, r3, r2
 8016a26:	ea23 0301 	bic.w	r3, r3, r1
 8016a2a:	e7e5      	b.n	80169f8 <floorf+0x34>
 8016a2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016a30:	d3e4      	bcc.n	80169fc <floorf+0x38>
 8016a32:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016a36:	4770      	bx	lr
 8016a38:	2300      	movs	r3, #0
 8016a3a:	e7dd      	b.n	80169f8 <floorf+0x34>
 8016a3c:	7149f2ca 	.word	0x7149f2ca
 8016a40:	bf800000 	.word	0xbf800000
 8016a44:	007fffff 	.word	0x007fffff

08016a48 <truncf>:
 8016a48:	ee10 1a10 	vmov	r1, s0
 8016a4c:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8016a50:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8016a54:	2a16      	cmp	r2, #22
 8016a56:	dc0a      	bgt.n	8016a6e <truncf+0x26>
 8016a58:	2a00      	cmp	r2, #0
 8016a5a:	bfa5      	ittet	ge
 8016a5c:	4b06      	ldrge	r3, [pc, #24]	; (8016a78 <truncf+0x30>)
 8016a5e:	4113      	asrge	r3, r2
 8016a60:	f001 4300 	andlt.w	r3, r1, #2147483648	; 0x80000000
 8016a64:	ea21 0303 	bicge.w	r3, r1, r3
 8016a68:	ee00 3a10 	vmov	s0, r3
 8016a6c:	4770      	bx	lr
 8016a6e:	2a80      	cmp	r2, #128	; 0x80
 8016a70:	bf08      	it	eq
 8016a72:	ee30 0a00 	vaddeq.f32	s0, s0, s0
 8016a76:	4770      	bx	lr
 8016a78:	007fffff 	.word	0x007fffff

08016a7c <powf>:
 8016a7c:	b508      	push	{r3, lr}
 8016a7e:	ed2d 8b04 	vpush	{d8-d9}
 8016a82:	eeb0 8a60 	vmov.f32	s16, s1
 8016a86:	eeb0 9a40 	vmov.f32	s18, s0
 8016a8a:	f000 f86d 	bl	8016b68 <__ieee754_powf>
 8016a8e:	eeb4 8a48 	vcmp.f32	s16, s16
 8016a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a96:	eef0 8a40 	vmov.f32	s17, s0
 8016a9a:	d63e      	bvs.n	8016b1a <powf+0x9e>
 8016a9c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8016aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa4:	d112      	bne.n	8016acc <powf+0x50>
 8016aa6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aae:	d039      	beq.n	8016b24 <powf+0xa8>
 8016ab0:	eeb0 0a48 	vmov.f32	s0, s16
 8016ab4:	f000 fb53 	bl	801715e <finitef>
 8016ab8:	b378      	cbz	r0, 8016b1a <powf+0x9e>
 8016aba:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ac2:	d52a      	bpl.n	8016b1a <powf+0x9e>
 8016ac4:	f000 fbda 	bl	801727c <__errno>
 8016ac8:	2322      	movs	r3, #34	; 0x22
 8016aca:	e014      	b.n	8016af6 <powf+0x7a>
 8016acc:	f000 fb47 	bl	801715e <finitef>
 8016ad0:	b998      	cbnz	r0, 8016afa <powf+0x7e>
 8016ad2:	eeb0 0a49 	vmov.f32	s0, s18
 8016ad6:	f000 fb42 	bl	801715e <finitef>
 8016ada:	b170      	cbz	r0, 8016afa <powf+0x7e>
 8016adc:	eeb0 0a48 	vmov.f32	s0, s16
 8016ae0:	f000 fb3d 	bl	801715e <finitef>
 8016ae4:	b148      	cbz	r0, 8016afa <powf+0x7e>
 8016ae6:	eef4 8a68 	vcmp.f32	s17, s17
 8016aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aee:	d7e9      	bvc.n	8016ac4 <powf+0x48>
 8016af0:	f000 fbc4 	bl	801727c <__errno>
 8016af4:	2321      	movs	r3, #33	; 0x21
 8016af6:	6003      	str	r3, [r0, #0]
 8016af8:	e00f      	b.n	8016b1a <powf+0x9e>
 8016afa:	eef5 8a40 	vcmp.f32	s17, #0.0
 8016afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b02:	d10a      	bne.n	8016b1a <powf+0x9e>
 8016b04:	eeb0 0a49 	vmov.f32	s0, s18
 8016b08:	f000 fb29 	bl	801715e <finitef>
 8016b0c:	b128      	cbz	r0, 8016b1a <powf+0x9e>
 8016b0e:	eeb0 0a48 	vmov.f32	s0, s16
 8016b12:	f000 fb24 	bl	801715e <finitef>
 8016b16:	2800      	cmp	r0, #0
 8016b18:	d1d4      	bne.n	8016ac4 <powf+0x48>
 8016b1a:	eeb0 0a68 	vmov.f32	s0, s17
 8016b1e:	ecbd 8b04 	vpop	{d8-d9}
 8016b22:	bd08      	pop	{r3, pc}
 8016b24:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016b28:	e7f7      	b.n	8016b1a <powf+0x9e>
	...

08016b2c <sqrtf>:
 8016b2c:	b508      	push	{r3, lr}
 8016b2e:	ed2d 8b02 	vpush	{d8}
 8016b32:	eeb0 8a40 	vmov.f32	s16, s0
 8016b36:	f000 fae5 	bl	8017104 <__ieee754_sqrtf>
 8016b3a:	eeb4 8a48 	vcmp.f32	s16, s16
 8016b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b42:	d60c      	bvs.n	8016b5e <sqrtf+0x32>
 8016b44:	eddf 8a07 	vldr	s17, [pc, #28]	; 8016b64 <sqrtf+0x38>
 8016b48:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b50:	d505      	bpl.n	8016b5e <sqrtf+0x32>
 8016b52:	f000 fb93 	bl	801727c <__errno>
 8016b56:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8016b5a:	2321      	movs	r3, #33	; 0x21
 8016b5c:	6003      	str	r3, [r0, #0]
 8016b5e:	ecbd 8b02 	vpop	{d8}
 8016b62:	bd08      	pop	{r3, pc}
 8016b64:	00000000 	.word	0x00000000

08016b68 <__ieee754_powf>:
 8016b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b6c:	ee10 4a90 	vmov	r4, s1
 8016b70:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8016b74:	ed2d 8b02 	vpush	{d8}
 8016b78:	ee10 6a10 	vmov	r6, s0
 8016b7c:	eeb0 8a40 	vmov.f32	s16, s0
 8016b80:	eef0 8a60 	vmov.f32	s17, s1
 8016b84:	d10c      	bne.n	8016ba0 <__ieee754_powf+0x38>
 8016b86:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8016b8a:	0076      	lsls	r6, r6, #1
 8016b8c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8016b90:	f240 8296 	bls.w	80170c0 <__ieee754_powf+0x558>
 8016b94:	ee38 0a28 	vadd.f32	s0, s16, s17
 8016b98:	ecbd 8b02 	vpop	{d8}
 8016b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ba0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016ba4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8016ba8:	dcf4      	bgt.n	8016b94 <__ieee754_powf+0x2c>
 8016baa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8016bae:	dd08      	ble.n	8016bc2 <__ieee754_powf+0x5a>
 8016bb0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8016bb4:	d1ee      	bne.n	8016b94 <__ieee754_powf+0x2c>
 8016bb6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8016bba:	0064      	lsls	r4, r4, #1
 8016bbc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8016bc0:	e7e6      	b.n	8016b90 <__ieee754_powf+0x28>
 8016bc2:	2e00      	cmp	r6, #0
 8016bc4:	da20      	bge.n	8016c08 <__ieee754_powf+0xa0>
 8016bc6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8016bca:	da2d      	bge.n	8016c28 <__ieee754_powf+0xc0>
 8016bcc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8016bd0:	f2c0 827f 	blt.w	80170d2 <__ieee754_powf+0x56a>
 8016bd4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8016bd8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8016bdc:	fa48 f703 	asr.w	r7, r8, r3
 8016be0:	fa07 f303 	lsl.w	r3, r7, r3
 8016be4:	4543      	cmp	r3, r8
 8016be6:	f040 8274 	bne.w	80170d2 <__ieee754_powf+0x56a>
 8016bea:	f007 0701 	and.w	r7, r7, #1
 8016bee:	f1c7 0702 	rsb	r7, r7, #2
 8016bf2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8016bf6:	d11f      	bne.n	8016c38 <__ieee754_powf+0xd0>
 8016bf8:	2c00      	cmp	r4, #0
 8016bfa:	f280 8267 	bge.w	80170cc <__ieee754_powf+0x564>
 8016bfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016c02:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8016c06:	e7c7      	b.n	8016b98 <__ieee754_powf+0x30>
 8016c08:	2700      	movs	r7, #0
 8016c0a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8016c0e:	d1f0      	bne.n	8016bf2 <__ieee754_powf+0x8a>
 8016c10:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8016c14:	f000 8254 	beq.w	80170c0 <__ieee754_powf+0x558>
 8016c18:	dd08      	ble.n	8016c2c <__ieee754_powf+0xc4>
 8016c1a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8016f24 <__ieee754_powf+0x3bc>
 8016c1e:	2c00      	cmp	r4, #0
 8016c20:	bfa8      	it	ge
 8016c22:	eeb0 0a68 	vmovge.f32	s0, s17
 8016c26:	e7b7      	b.n	8016b98 <__ieee754_powf+0x30>
 8016c28:	2702      	movs	r7, #2
 8016c2a:	e7ee      	b.n	8016c0a <__ieee754_powf+0xa2>
 8016c2c:	2c00      	cmp	r4, #0
 8016c2e:	f280 824a 	bge.w	80170c6 <__ieee754_powf+0x55e>
 8016c32:	eeb1 0a68 	vneg.f32	s0, s17
 8016c36:	e7af      	b.n	8016b98 <__ieee754_powf+0x30>
 8016c38:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8016c3c:	d102      	bne.n	8016c44 <__ieee754_powf+0xdc>
 8016c3e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8016c42:	e7a9      	b.n	8016b98 <__ieee754_powf+0x30>
 8016c44:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8016c48:	eeb0 0a48 	vmov.f32	s0, s16
 8016c4c:	d107      	bne.n	8016c5e <__ieee754_powf+0xf6>
 8016c4e:	2e00      	cmp	r6, #0
 8016c50:	db05      	blt.n	8016c5e <__ieee754_powf+0xf6>
 8016c52:	ecbd 8b02 	vpop	{d8}
 8016c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c5a:	f000 ba53 	b.w	8017104 <__ieee754_sqrtf>
 8016c5e:	f000 fa77 	bl	8017150 <fabsf>
 8016c62:	b125      	cbz	r5, 8016c6e <__ieee754_powf+0x106>
 8016c64:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8016c68:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016c6c:	d116      	bne.n	8016c9c <__ieee754_powf+0x134>
 8016c6e:	2c00      	cmp	r4, #0
 8016c70:	bfbc      	itt	lt
 8016c72:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8016c76:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8016c7a:	2e00      	cmp	r6, #0
 8016c7c:	da8c      	bge.n	8016b98 <__ieee754_powf+0x30>
 8016c7e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8016c82:	ea55 0307 	orrs.w	r3, r5, r7
 8016c86:	d104      	bne.n	8016c92 <__ieee754_powf+0x12a>
 8016c88:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016c8c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016c90:	e782      	b.n	8016b98 <__ieee754_powf+0x30>
 8016c92:	2f01      	cmp	r7, #1
 8016c94:	d180      	bne.n	8016b98 <__ieee754_powf+0x30>
 8016c96:	eeb1 0a40 	vneg.f32	s0, s0
 8016c9a:	e77d      	b.n	8016b98 <__ieee754_powf+0x30>
 8016c9c:	0ff0      	lsrs	r0, r6, #31
 8016c9e:	3801      	subs	r0, #1
 8016ca0:	ea57 0300 	orrs.w	r3, r7, r0
 8016ca4:	d104      	bne.n	8016cb0 <__ieee754_powf+0x148>
 8016ca6:	ee38 8a48 	vsub.f32	s16, s16, s16
 8016caa:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8016cae:	e773      	b.n	8016b98 <__ieee754_powf+0x30>
 8016cb0:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8016cb4:	dd74      	ble.n	8016da0 <__ieee754_powf+0x238>
 8016cb6:	4b9c      	ldr	r3, [pc, #624]	; (8016f28 <__ieee754_powf+0x3c0>)
 8016cb8:	429d      	cmp	r5, r3
 8016cba:	dc08      	bgt.n	8016cce <__ieee754_powf+0x166>
 8016cbc:	2c00      	cmp	r4, #0
 8016cbe:	da0b      	bge.n	8016cd8 <__ieee754_powf+0x170>
 8016cc0:	2000      	movs	r0, #0
 8016cc2:	ecbd 8b02 	vpop	{d8}
 8016cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016cca:	f000 ba3b 	b.w	8017144 <__math_oflowf>
 8016cce:	4b97      	ldr	r3, [pc, #604]	; (8016f2c <__ieee754_powf+0x3c4>)
 8016cd0:	429d      	cmp	r5, r3
 8016cd2:	dd08      	ble.n	8016ce6 <__ieee754_powf+0x17e>
 8016cd4:	2c00      	cmp	r4, #0
 8016cd6:	dcf3      	bgt.n	8016cc0 <__ieee754_powf+0x158>
 8016cd8:	2000      	movs	r0, #0
 8016cda:	ecbd 8b02 	vpop	{d8}
 8016cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ce2:	f000 ba29 	b.w	8017138 <__math_uflowf>
 8016ce6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016cea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016cee:	eddf 6a90 	vldr	s13, [pc, #576]	; 8016f30 <__ieee754_powf+0x3c8>
 8016cf2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8016cf6:	eee0 6a67 	vfms.f32	s13, s0, s15
 8016cfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016cfe:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8016d02:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d0a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8016f34 <__ieee754_powf+0x3cc>
 8016d0e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8016d12:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8016f38 <__ieee754_powf+0x3d0>
 8016d16:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016d1a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8016f3c <__ieee754_powf+0x3d4>
 8016d1e:	eef0 6a67 	vmov.f32	s13, s15
 8016d22:	eee0 6a07 	vfma.f32	s13, s0, s14
 8016d26:	ee16 3a90 	vmov	r3, s13
 8016d2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016d2e:	f023 030f 	bic.w	r3, r3, #15
 8016d32:	ee00 3a90 	vmov	s1, r3
 8016d36:	eee0 0a47 	vfms.f32	s1, s0, s14
 8016d3a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016d3e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8016d42:	f024 040f 	bic.w	r4, r4, #15
 8016d46:	ee07 4a10 	vmov	s14, r4
 8016d4a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8016d4e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8016d52:	ee07 3a90 	vmov	s15, r3
 8016d56:	eee7 0a27 	vfma.f32	s1, s14, s15
 8016d5a:	3f01      	subs	r7, #1
 8016d5c:	ea57 0200 	orrs.w	r2, r7, r0
 8016d60:	ee07 4a10 	vmov	s14, r4
 8016d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016d68:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8016d6c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8016d70:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016d74:	ee17 4a10 	vmov	r4, s14
 8016d78:	bf08      	it	eq
 8016d7a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8016d7e:	2c00      	cmp	r4, #0
 8016d80:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016d84:	f340 817e 	ble.w	8017084 <__ieee754_powf+0x51c>
 8016d88:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8016d8c:	f340 80f8 	ble.w	8016f80 <__ieee754_powf+0x418>
 8016d90:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d98:	bf4c      	ite	mi
 8016d9a:	2001      	movmi	r0, #1
 8016d9c:	2000      	movpl	r0, #0
 8016d9e:	e790      	b.n	8016cc2 <__ieee754_powf+0x15a>
 8016da0:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8016da4:	bf01      	itttt	eq
 8016da6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8016f40 <__ieee754_powf+0x3d8>
 8016daa:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8016dae:	f06f 0217 	mvneq.w	r2, #23
 8016db2:	ee17 5a90 	vmoveq	r5, s15
 8016db6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8016dba:	bf18      	it	ne
 8016dbc:	2200      	movne	r2, #0
 8016dbe:	3b7f      	subs	r3, #127	; 0x7f
 8016dc0:	4413      	add	r3, r2
 8016dc2:	4a60      	ldr	r2, [pc, #384]	; (8016f44 <__ieee754_powf+0x3dc>)
 8016dc4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8016dc8:	4295      	cmp	r5, r2
 8016dca:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8016dce:	dd06      	ble.n	8016dde <__ieee754_powf+0x276>
 8016dd0:	4a5d      	ldr	r2, [pc, #372]	; (8016f48 <__ieee754_powf+0x3e0>)
 8016dd2:	4295      	cmp	r5, r2
 8016dd4:	f340 80a4 	ble.w	8016f20 <__ieee754_powf+0x3b8>
 8016dd8:	3301      	adds	r3, #1
 8016dda:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8016dde:	2500      	movs	r5, #0
 8016de0:	4a5a      	ldr	r2, [pc, #360]	; (8016f4c <__ieee754_powf+0x3e4>)
 8016de2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8016de6:	ee07 1a90 	vmov	s15, r1
 8016dea:	ed92 7a00 	vldr	s14, [r2]
 8016dee:	4a58      	ldr	r2, [pc, #352]	; (8016f50 <__ieee754_powf+0x3e8>)
 8016df0:	ee37 6a27 	vadd.f32	s12, s14, s15
 8016df4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016df8:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8016dfc:	1049      	asrs	r1, r1, #1
 8016dfe:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8016e02:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8016e06:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8016e0a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8016e0e:	ee06 1a10 	vmov	s12, r1
 8016e12:	ee65 4a26 	vmul.f32	s9, s10, s13
 8016e16:	ee36 7a47 	vsub.f32	s14, s12, s14
 8016e1a:	ee14 6a90 	vmov	r6, s9
 8016e1e:	4016      	ands	r6, r2
 8016e20:	ee05 6a90 	vmov	s11, r6
 8016e24:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8016e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e2c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8016f54 <__ieee754_powf+0x3ec>
 8016e30:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8016e34:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8016e38:	ee25 6a26 	vmul.f32	s12, s10, s13
 8016e3c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8016f58 <__ieee754_powf+0x3f0>
 8016e40:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016e44:	eddf 6a45 	vldr	s13, [pc, #276]	; 8016f5c <__ieee754_powf+0x3f4>
 8016e48:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016e4c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8016f30 <__ieee754_powf+0x3c8>
 8016e50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016e54:	eddf 6a42 	vldr	s13, [pc, #264]	; 8016f60 <__ieee754_powf+0x3f8>
 8016e58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016e5c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8016f64 <__ieee754_powf+0x3fc>
 8016e60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016e64:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8016e68:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8016e6c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016e70:	eee5 6a07 	vfma.f32	s13, s10, s14
 8016e74:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8016e78:	eef0 7a45 	vmov.f32	s15, s10
 8016e7c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8016e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e84:	ee17 1a90 	vmov	r1, s15
 8016e88:	4011      	ands	r1, r2
 8016e8a:	ee07 1a90 	vmov	s15, r1
 8016e8e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8016e92:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8016e96:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8016e9a:	ee27 7a24 	vmul.f32	s14, s14, s9
 8016e9e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016ea2:	eeb0 6a47 	vmov.f32	s12, s14
 8016ea6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8016eaa:	ee16 1a10 	vmov	r1, s12
 8016eae:	4011      	ands	r1, r2
 8016eb0:	ee06 1a90 	vmov	s13, r1
 8016eb4:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8016eb8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016f68 <__ieee754_powf+0x400>
 8016ebc:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8016f6c <__ieee754_powf+0x404>
 8016ec0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016ec4:	ee06 1a10 	vmov	s12, r1
 8016ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016ecc:	eddf 7a28 	vldr	s15, [pc, #160]	; 8016f70 <__ieee754_powf+0x408>
 8016ed0:	4928      	ldr	r1, [pc, #160]	; (8016f74 <__ieee754_powf+0x40c>)
 8016ed2:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016ed6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8016eda:	edd1 7a00 	vldr	s15, [r1]
 8016ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ee2:	ee07 3a90 	vmov	s15, r3
 8016ee6:	4b24      	ldr	r3, [pc, #144]	; (8016f78 <__ieee754_powf+0x410>)
 8016ee8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016eec:	eef0 7a47 	vmov.f32	s15, s14
 8016ef0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016ef4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8016ef8:	edd5 0a00 	vldr	s1, [r5]
 8016efc:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016f00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f04:	ee17 3a90 	vmov	r3, s15
 8016f08:	4013      	ands	r3, r2
 8016f0a:	ee07 3a90 	vmov	s15, r3
 8016f0e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8016f12:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8016f16:	eee6 6a65 	vfms.f32	s13, s12, s11
 8016f1a:	ee77 7a66 	vsub.f32	s15, s14, s13
 8016f1e:	e70e      	b.n	8016d3e <__ieee754_powf+0x1d6>
 8016f20:	2501      	movs	r5, #1
 8016f22:	e75d      	b.n	8016de0 <__ieee754_powf+0x278>
 8016f24:	00000000 	.word	0x00000000
 8016f28:	3f7ffff3 	.word	0x3f7ffff3
 8016f2c:	3f800007 	.word	0x3f800007
 8016f30:	3eaaaaab 	.word	0x3eaaaaab
 8016f34:	3fb8aa3b 	.word	0x3fb8aa3b
 8016f38:	36eca570 	.word	0x36eca570
 8016f3c:	3fb8aa00 	.word	0x3fb8aa00
 8016f40:	4b800000 	.word	0x4b800000
 8016f44:	001cc471 	.word	0x001cc471
 8016f48:	005db3d6 	.word	0x005db3d6
 8016f4c:	08019614 	.word	0x08019614
 8016f50:	fffff000 	.word	0xfffff000
 8016f54:	3e6c3255 	.word	0x3e6c3255
 8016f58:	3e53f142 	.word	0x3e53f142
 8016f5c:	3e8ba305 	.word	0x3e8ba305
 8016f60:	3edb6db7 	.word	0x3edb6db7
 8016f64:	3f19999a 	.word	0x3f19999a
 8016f68:	3f76384f 	.word	0x3f76384f
 8016f6c:	3f763800 	.word	0x3f763800
 8016f70:	369dc3a0 	.word	0x369dc3a0
 8016f74:	08019624 	.word	0x08019624
 8016f78:	0801961c 	.word	0x0801961c
 8016f7c:	3338aa3c 	.word	0x3338aa3c
 8016f80:	f040 8095 	bne.w	80170ae <__ieee754_powf+0x546>
 8016f84:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8016f7c <__ieee754_powf+0x414>
 8016f88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016f8c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8016f90:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f98:	f73f aefa 	bgt.w	8016d90 <__ieee754_powf+0x228>
 8016f9c:	15db      	asrs	r3, r3, #23
 8016f9e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8016fa2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8016fa6:	4103      	asrs	r3, r0
 8016fa8:	4423      	add	r3, r4
 8016faa:	494b      	ldr	r1, [pc, #300]	; (80170d8 <__ieee754_powf+0x570>)
 8016fac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016fb0:	3a7f      	subs	r2, #127	; 0x7f
 8016fb2:	4111      	asrs	r1, r2
 8016fb4:	ea23 0101 	bic.w	r1, r3, r1
 8016fb8:	ee07 1a10 	vmov	s14, r1
 8016fbc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8016fc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8016fc4:	f1c2 0217 	rsb	r2, r2, #23
 8016fc8:	4110      	asrs	r0, r2
 8016fca:	2c00      	cmp	r4, #0
 8016fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016fd0:	bfb8      	it	lt
 8016fd2:	4240      	neglt	r0, r0
 8016fd4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016fd8:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80170dc <__ieee754_powf+0x574>
 8016fdc:	eddf 6a40 	vldr	s13, [pc, #256]	; 80170e0 <__ieee754_powf+0x578>
 8016fe0:	ee17 3a10 	vmov	r3, s14
 8016fe4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016fe8:	f023 030f 	bic.w	r3, r3, #15
 8016fec:	ee07 3a10 	vmov	s14, r3
 8016ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ff4:	ee27 0a00 	vmul.f32	s0, s14, s0
 8016ff8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016ffc:	eddf 7a39 	vldr	s15, [pc, #228]	; 80170e4 <__ieee754_powf+0x57c>
 8017000:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8017004:	eef0 7a40 	vmov.f32	s15, s0
 8017008:	eee7 7a26 	vfma.f32	s15, s14, s13
 801700c:	eeb0 6a67 	vmov.f32	s12, s15
 8017010:	eea7 6a66 	vfms.f32	s12, s14, s13
 8017014:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8017018:	ee30 0a46 	vsub.f32	s0, s0, s12
 801701c:	eddf 6a32 	vldr	s13, [pc, #200]	; 80170e8 <__ieee754_powf+0x580>
 8017020:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80170ec <__ieee754_powf+0x584>
 8017024:	eee7 6a06 	vfma.f32	s13, s14, s12
 8017028:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80170f0 <__ieee754_powf+0x588>
 801702c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8017030:	eddf 6a30 	vldr	s13, [pc, #192]	; 80170f4 <__ieee754_powf+0x58c>
 8017034:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017038:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80170f8 <__ieee754_powf+0x590>
 801703c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8017040:	eef0 6a67 	vmov.f32	s13, s15
 8017044:	eee6 6a47 	vfms.f32	s13, s12, s14
 8017048:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801704c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8017050:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8017054:	eea7 0a80 	vfma.f32	s0, s15, s0
 8017058:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801705c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8017060:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017064:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017068:	ee30 0a67 	vsub.f32	s0, s0, s15
 801706c:	ee10 3a10 	vmov	r3, s0
 8017070:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8017074:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017078:	da1f      	bge.n	80170ba <__ieee754_powf+0x552>
 801707a:	f000 f87d 	bl	8017178 <scalbnf>
 801707e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8017082:	e589      	b.n	8016b98 <__ieee754_powf+0x30>
 8017084:	4a1d      	ldr	r2, [pc, #116]	; (80170fc <__ieee754_powf+0x594>)
 8017086:	4293      	cmp	r3, r2
 8017088:	dd07      	ble.n	801709a <__ieee754_powf+0x532>
 801708a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801708e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017092:	bf4c      	ite	mi
 8017094:	2001      	movmi	r0, #1
 8017096:	2000      	movpl	r0, #0
 8017098:	e61f      	b.n	8016cda <__ieee754_powf+0x172>
 801709a:	d108      	bne.n	80170ae <__ieee754_powf+0x546>
 801709c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80170a0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80170a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170a8:	f6ff af78 	blt.w	8016f9c <__ieee754_powf+0x434>
 80170ac:	e7ed      	b.n	801708a <__ieee754_powf+0x522>
 80170ae:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80170b2:	f73f af73 	bgt.w	8016f9c <__ieee754_powf+0x434>
 80170b6:	2000      	movs	r0, #0
 80170b8:	e78c      	b.n	8016fd4 <__ieee754_powf+0x46c>
 80170ba:	ee00 3a10 	vmov	s0, r3
 80170be:	e7de      	b.n	801707e <__ieee754_powf+0x516>
 80170c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80170c4:	e568      	b.n	8016b98 <__ieee754_powf+0x30>
 80170c6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8017100 <__ieee754_powf+0x598>
 80170ca:	e565      	b.n	8016b98 <__ieee754_powf+0x30>
 80170cc:	eeb0 0a48 	vmov.f32	s0, s16
 80170d0:	e562      	b.n	8016b98 <__ieee754_powf+0x30>
 80170d2:	2700      	movs	r7, #0
 80170d4:	e58d      	b.n	8016bf2 <__ieee754_powf+0x8a>
 80170d6:	bf00      	nop
 80170d8:	007fffff 	.word	0x007fffff
 80170dc:	35bfbe8c 	.word	0x35bfbe8c
 80170e0:	3f317200 	.word	0x3f317200
 80170e4:	3f317218 	.word	0x3f317218
 80170e8:	b5ddea0e 	.word	0xb5ddea0e
 80170ec:	3331bb4c 	.word	0x3331bb4c
 80170f0:	388ab355 	.word	0x388ab355
 80170f4:	bb360b61 	.word	0xbb360b61
 80170f8:	3e2aaaab 	.word	0x3e2aaaab
 80170fc:	43160000 	.word	0x43160000
 8017100:	00000000 	.word	0x00000000

08017104 <__ieee754_sqrtf>:
 8017104:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017108:	4770      	bx	lr

0801710a <with_errnof>:
 801710a:	b513      	push	{r0, r1, r4, lr}
 801710c:	4604      	mov	r4, r0
 801710e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017112:	f000 f8b3 	bl	801727c <__errno>
 8017116:	ed9d 0a01 	vldr	s0, [sp, #4]
 801711a:	6004      	str	r4, [r0, #0]
 801711c:	b002      	add	sp, #8
 801711e:	bd10      	pop	{r4, pc}

08017120 <xflowf>:
 8017120:	b130      	cbz	r0, 8017130 <xflowf+0x10>
 8017122:	eef1 7a40 	vneg.f32	s15, s0
 8017126:	ee27 0a80 	vmul.f32	s0, s15, s0
 801712a:	2022      	movs	r0, #34	; 0x22
 801712c:	f7ff bfed 	b.w	801710a <with_errnof>
 8017130:	eef0 7a40 	vmov.f32	s15, s0
 8017134:	e7f7      	b.n	8017126 <xflowf+0x6>
	...

08017138 <__math_uflowf>:
 8017138:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017140 <__math_uflowf+0x8>
 801713c:	f7ff bff0 	b.w	8017120 <xflowf>
 8017140:	10000000 	.word	0x10000000

08017144 <__math_oflowf>:
 8017144:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801714c <__math_oflowf+0x8>
 8017148:	f7ff bfea 	b.w	8017120 <xflowf>
 801714c:	70000000 	.word	0x70000000

08017150 <fabsf>:
 8017150:	ee10 3a10 	vmov	r3, s0
 8017154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017158:	ee00 3a10 	vmov	s0, r3
 801715c:	4770      	bx	lr

0801715e <finitef>:
 801715e:	b082      	sub	sp, #8
 8017160:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017164:	9801      	ldr	r0, [sp, #4]
 8017166:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801716a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801716e:	bfac      	ite	ge
 8017170:	2000      	movge	r0, #0
 8017172:	2001      	movlt	r0, #1
 8017174:	b002      	add	sp, #8
 8017176:	4770      	bx	lr

08017178 <scalbnf>:
 8017178:	ee10 3a10 	vmov	r3, s0
 801717c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017180:	d025      	beq.n	80171ce <scalbnf+0x56>
 8017182:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017186:	d302      	bcc.n	801718e <scalbnf+0x16>
 8017188:	ee30 0a00 	vadd.f32	s0, s0, s0
 801718c:	4770      	bx	lr
 801718e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8017192:	d122      	bne.n	80171da <scalbnf+0x62>
 8017194:	4b2a      	ldr	r3, [pc, #168]	; (8017240 <scalbnf+0xc8>)
 8017196:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8017244 <scalbnf+0xcc>
 801719a:	4298      	cmp	r0, r3
 801719c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80171a0:	db16      	blt.n	80171d0 <scalbnf+0x58>
 80171a2:	ee10 3a10 	vmov	r3, s0
 80171a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80171aa:	3a19      	subs	r2, #25
 80171ac:	4402      	add	r2, r0
 80171ae:	2afe      	cmp	r2, #254	; 0xfe
 80171b0:	dd15      	ble.n	80171de <scalbnf+0x66>
 80171b2:	ee10 3a10 	vmov	r3, s0
 80171b6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8017248 <scalbnf+0xd0>
 80171ba:	eddf 6a24 	vldr	s13, [pc, #144]	; 801724c <scalbnf+0xd4>
 80171be:	2b00      	cmp	r3, #0
 80171c0:	eeb0 7a67 	vmov.f32	s14, s15
 80171c4:	bfb8      	it	lt
 80171c6:	eef0 7a66 	vmovlt.f32	s15, s13
 80171ca:	ee27 0a27 	vmul.f32	s0, s14, s15
 80171ce:	4770      	bx	lr
 80171d0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017250 <scalbnf+0xd8>
 80171d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80171d8:	4770      	bx	lr
 80171da:	0dd2      	lsrs	r2, r2, #23
 80171dc:	e7e6      	b.n	80171ac <scalbnf+0x34>
 80171de:	2a00      	cmp	r2, #0
 80171e0:	dd06      	ble.n	80171f0 <scalbnf+0x78>
 80171e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80171e6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80171ea:	ee00 3a10 	vmov	s0, r3
 80171ee:	4770      	bx	lr
 80171f0:	f112 0f16 	cmn.w	r2, #22
 80171f4:	da1a      	bge.n	801722c <scalbnf+0xb4>
 80171f6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80171fa:	4298      	cmp	r0, r3
 80171fc:	ee10 3a10 	vmov	r3, s0
 8017200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017204:	dd0a      	ble.n	801721c <scalbnf+0xa4>
 8017206:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8017248 <scalbnf+0xd0>
 801720a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801724c <scalbnf+0xd4>
 801720e:	eef0 7a40 	vmov.f32	s15, s0
 8017212:	2b00      	cmp	r3, #0
 8017214:	bf18      	it	ne
 8017216:	eeb0 0a47 	vmovne.f32	s0, s14
 801721a:	e7db      	b.n	80171d4 <scalbnf+0x5c>
 801721c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8017250 <scalbnf+0xd8>
 8017220:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8017254 <scalbnf+0xdc>
 8017224:	eef0 7a40 	vmov.f32	s15, s0
 8017228:	2b00      	cmp	r3, #0
 801722a:	e7f3      	b.n	8017214 <scalbnf+0x9c>
 801722c:	3219      	adds	r2, #25
 801722e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017232:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017236:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017258 <scalbnf+0xe0>
 801723a:	ee07 3a10 	vmov	s14, r3
 801723e:	e7c4      	b.n	80171ca <scalbnf+0x52>
 8017240:	ffff3cb0 	.word	0xffff3cb0
 8017244:	4c000000 	.word	0x4c000000
 8017248:	7149f2ca 	.word	0x7149f2ca
 801724c:	f149f2ca 	.word	0xf149f2ca
 8017250:	0da24260 	.word	0x0da24260
 8017254:	8da24260 	.word	0x8da24260
 8017258:	33000000 	.word	0x33000000

0801725c <abort>:
 801725c:	b508      	push	{r3, lr}
 801725e:	2006      	movs	r0, #6
 8017260:	f000 fb0a 	bl	8017878 <raise>
 8017264:	2001      	movs	r0, #1
 8017266:	f001 fa9f 	bl	80187a8 <_exit>
	...

0801726c <calloc>:
 801726c:	4b02      	ldr	r3, [pc, #8]	; (8017278 <calloc+0xc>)
 801726e:	460a      	mov	r2, r1
 8017270:	4601      	mov	r1, r0
 8017272:	6818      	ldr	r0, [r3, #0]
 8017274:	f000 b944 	b.w	8017500 <_calloc_r>
 8017278:	200005c0 	.word	0x200005c0

0801727c <__errno>:
 801727c:	4b01      	ldr	r3, [pc, #4]	; (8017284 <__errno+0x8>)
 801727e:	6818      	ldr	r0, [r3, #0]
 8017280:	4770      	bx	lr
 8017282:	bf00      	nop
 8017284:	200005c0 	.word	0x200005c0

08017288 <std>:
 8017288:	2300      	movs	r3, #0
 801728a:	b510      	push	{r4, lr}
 801728c:	4604      	mov	r4, r0
 801728e:	e9c0 3300 	strd	r3, r3, [r0]
 8017292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017296:	6083      	str	r3, [r0, #8]
 8017298:	8181      	strh	r1, [r0, #12]
 801729a:	6643      	str	r3, [r0, #100]	; 0x64
 801729c:	81c2      	strh	r2, [r0, #14]
 801729e:	6183      	str	r3, [r0, #24]
 80172a0:	4619      	mov	r1, r3
 80172a2:	2208      	movs	r2, #8
 80172a4:	305c      	adds	r0, #92	; 0x5c
 80172a6:	f000 f923 	bl	80174f0 <memset>
 80172aa:	4b05      	ldr	r3, [pc, #20]	; (80172c0 <std+0x38>)
 80172ac:	6263      	str	r3, [r4, #36]	; 0x24
 80172ae:	4b05      	ldr	r3, [pc, #20]	; (80172c4 <std+0x3c>)
 80172b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80172b2:	4b05      	ldr	r3, [pc, #20]	; (80172c8 <std+0x40>)
 80172b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80172b6:	4b05      	ldr	r3, [pc, #20]	; (80172cc <std+0x44>)
 80172b8:	6224      	str	r4, [r4, #32]
 80172ba:	6323      	str	r3, [r4, #48]	; 0x30
 80172bc:	bd10      	pop	{r4, pc}
 80172be:	bf00      	nop
 80172c0:	080178b1 	.word	0x080178b1
 80172c4:	080178d3 	.word	0x080178d3
 80172c8:	0801790b 	.word	0x0801790b
 80172cc:	0801792f 	.word	0x0801792f

080172d0 <_cleanup_r>:
 80172d0:	4901      	ldr	r1, [pc, #4]	; (80172d8 <_cleanup_r+0x8>)
 80172d2:	f000 b8af 	b.w	8017434 <_fwalk_reent>
 80172d6:	bf00      	nop
 80172d8:	08017c79 	.word	0x08017c79

080172dc <__sfmoreglue>:
 80172dc:	b570      	push	{r4, r5, r6, lr}
 80172de:	2268      	movs	r2, #104	; 0x68
 80172e0:	1e4d      	subs	r5, r1, #1
 80172e2:	4355      	muls	r5, r2
 80172e4:	460e      	mov	r6, r1
 80172e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80172ea:	f000 f98b 	bl	8017604 <_malloc_r>
 80172ee:	4604      	mov	r4, r0
 80172f0:	b140      	cbz	r0, 8017304 <__sfmoreglue+0x28>
 80172f2:	2100      	movs	r1, #0
 80172f4:	e9c0 1600 	strd	r1, r6, [r0]
 80172f8:	300c      	adds	r0, #12
 80172fa:	60a0      	str	r0, [r4, #8]
 80172fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017300:	f000 f8f6 	bl	80174f0 <memset>
 8017304:	4620      	mov	r0, r4
 8017306:	bd70      	pop	{r4, r5, r6, pc}

08017308 <__sfp_lock_acquire>:
 8017308:	4801      	ldr	r0, [pc, #4]	; (8017310 <__sfp_lock_acquire+0x8>)
 801730a:	f000 b8d8 	b.w	80174be <__retarget_lock_acquire_recursive>
 801730e:	bf00      	nop
 8017310:	20006e85 	.word	0x20006e85

08017314 <__sfp_lock_release>:
 8017314:	4801      	ldr	r0, [pc, #4]	; (801731c <__sfp_lock_release+0x8>)
 8017316:	f000 b8d3 	b.w	80174c0 <__retarget_lock_release_recursive>
 801731a:	bf00      	nop
 801731c:	20006e85 	.word	0x20006e85

08017320 <__sinit_lock_acquire>:
 8017320:	4801      	ldr	r0, [pc, #4]	; (8017328 <__sinit_lock_acquire+0x8>)
 8017322:	f000 b8cc 	b.w	80174be <__retarget_lock_acquire_recursive>
 8017326:	bf00      	nop
 8017328:	20006e86 	.word	0x20006e86

0801732c <__sinit_lock_release>:
 801732c:	4801      	ldr	r0, [pc, #4]	; (8017334 <__sinit_lock_release+0x8>)
 801732e:	f000 b8c7 	b.w	80174c0 <__retarget_lock_release_recursive>
 8017332:	bf00      	nop
 8017334:	20006e86 	.word	0x20006e86

08017338 <__sinit>:
 8017338:	b510      	push	{r4, lr}
 801733a:	4604      	mov	r4, r0
 801733c:	f7ff fff0 	bl	8017320 <__sinit_lock_acquire>
 8017340:	69a3      	ldr	r3, [r4, #24]
 8017342:	b11b      	cbz	r3, 801734c <__sinit+0x14>
 8017344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017348:	f7ff bff0 	b.w	801732c <__sinit_lock_release>
 801734c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017350:	6523      	str	r3, [r4, #80]	; 0x50
 8017352:	4b13      	ldr	r3, [pc, #76]	; (80173a0 <__sinit+0x68>)
 8017354:	4a13      	ldr	r2, [pc, #76]	; (80173a4 <__sinit+0x6c>)
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	62a2      	str	r2, [r4, #40]	; 0x28
 801735a:	42a3      	cmp	r3, r4
 801735c:	bf04      	itt	eq
 801735e:	2301      	moveq	r3, #1
 8017360:	61a3      	streq	r3, [r4, #24]
 8017362:	4620      	mov	r0, r4
 8017364:	f000 f820 	bl	80173a8 <__sfp>
 8017368:	6060      	str	r0, [r4, #4]
 801736a:	4620      	mov	r0, r4
 801736c:	f000 f81c 	bl	80173a8 <__sfp>
 8017370:	60a0      	str	r0, [r4, #8]
 8017372:	4620      	mov	r0, r4
 8017374:	f000 f818 	bl	80173a8 <__sfp>
 8017378:	2200      	movs	r2, #0
 801737a:	60e0      	str	r0, [r4, #12]
 801737c:	2104      	movs	r1, #4
 801737e:	6860      	ldr	r0, [r4, #4]
 8017380:	f7ff ff82 	bl	8017288 <std>
 8017384:	68a0      	ldr	r0, [r4, #8]
 8017386:	2201      	movs	r2, #1
 8017388:	2109      	movs	r1, #9
 801738a:	f7ff ff7d 	bl	8017288 <std>
 801738e:	68e0      	ldr	r0, [r4, #12]
 8017390:	2202      	movs	r2, #2
 8017392:	2112      	movs	r1, #18
 8017394:	f7ff ff78 	bl	8017288 <std>
 8017398:	2301      	movs	r3, #1
 801739a:	61a3      	str	r3, [r4, #24]
 801739c:	e7d2      	b.n	8017344 <__sinit+0xc>
 801739e:	bf00      	nop
 80173a0:	0801968c 	.word	0x0801968c
 80173a4:	080172d1 	.word	0x080172d1

080173a8 <__sfp>:
 80173a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173aa:	4607      	mov	r7, r0
 80173ac:	f7ff ffac 	bl	8017308 <__sfp_lock_acquire>
 80173b0:	4b1e      	ldr	r3, [pc, #120]	; (801742c <__sfp+0x84>)
 80173b2:	681e      	ldr	r6, [r3, #0]
 80173b4:	69b3      	ldr	r3, [r6, #24]
 80173b6:	b913      	cbnz	r3, 80173be <__sfp+0x16>
 80173b8:	4630      	mov	r0, r6
 80173ba:	f7ff ffbd 	bl	8017338 <__sinit>
 80173be:	3648      	adds	r6, #72	; 0x48
 80173c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80173c4:	3b01      	subs	r3, #1
 80173c6:	d503      	bpl.n	80173d0 <__sfp+0x28>
 80173c8:	6833      	ldr	r3, [r6, #0]
 80173ca:	b30b      	cbz	r3, 8017410 <__sfp+0x68>
 80173cc:	6836      	ldr	r6, [r6, #0]
 80173ce:	e7f7      	b.n	80173c0 <__sfp+0x18>
 80173d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80173d4:	b9d5      	cbnz	r5, 801740c <__sfp+0x64>
 80173d6:	4b16      	ldr	r3, [pc, #88]	; (8017430 <__sfp+0x88>)
 80173d8:	60e3      	str	r3, [r4, #12]
 80173da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80173de:	6665      	str	r5, [r4, #100]	; 0x64
 80173e0:	f000 f86c 	bl	80174bc <__retarget_lock_init_recursive>
 80173e4:	f7ff ff96 	bl	8017314 <__sfp_lock_release>
 80173e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80173ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80173f0:	6025      	str	r5, [r4, #0]
 80173f2:	61a5      	str	r5, [r4, #24]
 80173f4:	2208      	movs	r2, #8
 80173f6:	4629      	mov	r1, r5
 80173f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80173fc:	f000 f878 	bl	80174f0 <memset>
 8017400:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017404:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017408:	4620      	mov	r0, r4
 801740a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801740c:	3468      	adds	r4, #104	; 0x68
 801740e:	e7d9      	b.n	80173c4 <__sfp+0x1c>
 8017410:	2104      	movs	r1, #4
 8017412:	4638      	mov	r0, r7
 8017414:	f7ff ff62 	bl	80172dc <__sfmoreglue>
 8017418:	4604      	mov	r4, r0
 801741a:	6030      	str	r0, [r6, #0]
 801741c:	2800      	cmp	r0, #0
 801741e:	d1d5      	bne.n	80173cc <__sfp+0x24>
 8017420:	f7ff ff78 	bl	8017314 <__sfp_lock_release>
 8017424:	230c      	movs	r3, #12
 8017426:	603b      	str	r3, [r7, #0]
 8017428:	e7ee      	b.n	8017408 <__sfp+0x60>
 801742a:	bf00      	nop
 801742c:	0801968c 	.word	0x0801968c
 8017430:	ffff0001 	.word	0xffff0001

08017434 <_fwalk_reent>:
 8017434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017438:	4606      	mov	r6, r0
 801743a:	4688      	mov	r8, r1
 801743c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017440:	2700      	movs	r7, #0
 8017442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017446:	f1b9 0901 	subs.w	r9, r9, #1
 801744a:	d505      	bpl.n	8017458 <_fwalk_reent+0x24>
 801744c:	6824      	ldr	r4, [r4, #0]
 801744e:	2c00      	cmp	r4, #0
 8017450:	d1f7      	bne.n	8017442 <_fwalk_reent+0xe>
 8017452:	4638      	mov	r0, r7
 8017454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017458:	89ab      	ldrh	r3, [r5, #12]
 801745a:	2b01      	cmp	r3, #1
 801745c:	d907      	bls.n	801746e <_fwalk_reent+0x3a>
 801745e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017462:	3301      	adds	r3, #1
 8017464:	d003      	beq.n	801746e <_fwalk_reent+0x3a>
 8017466:	4629      	mov	r1, r5
 8017468:	4630      	mov	r0, r6
 801746a:	47c0      	blx	r8
 801746c:	4307      	orrs	r7, r0
 801746e:	3568      	adds	r5, #104	; 0x68
 8017470:	e7e9      	b.n	8017446 <_fwalk_reent+0x12>
	...

08017474 <__libc_init_array>:
 8017474:	b570      	push	{r4, r5, r6, lr}
 8017476:	4d0d      	ldr	r5, [pc, #52]	; (80174ac <__libc_init_array+0x38>)
 8017478:	4c0d      	ldr	r4, [pc, #52]	; (80174b0 <__libc_init_array+0x3c>)
 801747a:	1b64      	subs	r4, r4, r5
 801747c:	10a4      	asrs	r4, r4, #2
 801747e:	2600      	movs	r6, #0
 8017480:	42a6      	cmp	r6, r4
 8017482:	d109      	bne.n	8017498 <__libc_init_array+0x24>
 8017484:	4d0b      	ldr	r5, [pc, #44]	; (80174b4 <__libc_init_array+0x40>)
 8017486:	4c0c      	ldr	r4, [pc, #48]	; (80174b8 <__libc_init_array+0x44>)
 8017488:	f001 f990 	bl	80187ac <_init>
 801748c:	1b64      	subs	r4, r4, r5
 801748e:	10a4      	asrs	r4, r4, #2
 8017490:	2600      	movs	r6, #0
 8017492:	42a6      	cmp	r6, r4
 8017494:	d105      	bne.n	80174a2 <__libc_init_array+0x2e>
 8017496:	bd70      	pop	{r4, r5, r6, pc}
 8017498:	f855 3b04 	ldr.w	r3, [r5], #4
 801749c:	4798      	blx	r3
 801749e:	3601      	adds	r6, #1
 80174a0:	e7ee      	b.n	8017480 <__libc_init_array+0xc>
 80174a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80174a6:	4798      	blx	r3
 80174a8:	3601      	adds	r6, #1
 80174aa:	e7f2      	b.n	8017492 <__libc_init_array+0x1e>
 80174ac:	080196cc 	.word	0x080196cc
 80174b0:	080196cc 	.word	0x080196cc
 80174b4:	080196cc 	.word	0x080196cc
 80174b8:	080196d0 	.word	0x080196d0

080174bc <__retarget_lock_init_recursive>:
 80174bc:	4770      	bx	lr

080174be <__retarget_lock_acquire_recursive>:
 80174be:	4770      	bx	lr

080174c0 <__retarget_lock_release_recursive>:
 80174c0:	4770      	bx	lr
	...

080174c4 <malloc>:
 80174c4:	4b02      	ldr	r3, [pc, #8]	; (80174d0 <malloc+0xc>)
 80174c6:	4601      	mov	r1, r0
 80174c8:	6818      	ldr	r0, [r3, #0]
 80174ca:	f000 b89b 	b.w	8017604 <_malloc_r>
 80174ce:	bf00      	nop
 80174d0:	200005c0 	.word	0x200005c0

080174d4 <memcpy>:
 80174d4:	440a      	add	r2, r1
 80174d6:	4291      	cmp	r1, r2
 80174d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80174dc:	d100      	bne.n	80174e0 <memcpy+0xc>
 80174de:	4770      	bx	lr
 80174e0:	b510      	push	{r4, lr}
 80174e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80174e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80174ea:	4291      	cmp	r1, r2
 80174ec:	d1f9      	bne.n	80174e2 <memcpy+0xe>
 80174ee:	bd10      	pop	{r4, pc}

080174f0 <memset>:
 80174f0:	4402      	add	r2, r0
 80174f2:	4603      	mov	r3, r0
 80174f4:	4293      	cmp	r3, r2
 80174f6:	d100      	bne.n	80174fa <memset+0xa>
 80174f8:	4770      	bx	lr
 80174fa:	f803 1b01 	strb.w	r1, [r3], #1
 80174fe:	e7f9      	b.n	80174f4 <memset+0x4>

08017500 <_calloc_r>:
 8017500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017502:	fba1 2402 	umull	r2, r4, r1, r2
 8017506:	b94c      	cbnz	r4, 801751c <_calloc_r+0x1c>
 8017508:	4611      	mov	r1, r2
 801750a:	9201      	str	r2, [sp, #4]
 801750c:	f000 f87a 	bl	8017604 <_malloc_r>
 8017510:	9a01      	ldr	r2, [sp, #4]
 8017512:	4605      	mov	r5, r0
 8017514:	b930      	cbnz	r0, 8017524 <_calloc_r+0x24>
 8017516:	4628      	mov	r0, r5
 8017518:	b003      	add	sp, #12
 801751a:	bd30      	pop	{r4, r5, pc}
 801751c:	220c      	movs	r2, #12
 801751e:	6002      	str	r2, [r0, #0]
 8017520:	2500      	movs	r5, #0
 8017522:	e7f8      	b.n	8017516 <_calloc_r+0x16>
 8017524:	4621      	mov	r1, r4
 8017526:	f7ff ffe3 	bl	80174f0 <memset>
 801752a:	e7f4      	b.n	8017516 <_calloc_r+0x16>

0801752c <_free_r>:
 801752c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801752e:	2900      	cmp	r1, #0
 8017530:	d044      	beq.n	80175bc <_free_r+0x90>
 8017532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017536:	9001      	str	r0, [sp, #4]
 8017538:	2b00      	cmp	r3, #0
 801753a:	f1a1 0404 	sub.w	r4, r1, #4
 801753e:	bfb8      	it	lt
 8017540:	18e4      	addlt	r4, r4, r3
 8017542:	f000 fc4d 	bl	8017de0 <__malloc_lock>
 8017546:	4a1e      	ldr	r2, [pc, #120]	; (80175c0 <_free_r+0x94>)
 8017548:	9801      	ldr	r0, [sp, #4]
 801754a:	6813      	ldr	r3, [r2, #0]
 801754c:	b933      	cbnz	r3, 801755c <_free_r+0x30>
 801754e:	6063      	str	r3, [r4, #4]
 8017550:	6014      	str	r4, [r2, #0]
 8017552:	b003      	add	sp, #12
 8017554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017558:	f000 bc48 	b.w	8017dec <__malloc_unlock>
 801755c:	42a3      	cmp	r3, r4
 801755e:	d908      	bls.n	8017572 <_free_r+0x46>
 8017560:	6825      	ldr	r5, [r4, #0]
 8017562:	1961      	adds	r1, r4, r5
 8017564:	428b      	cmp	r3, r1
 8017566:	bf01      	itttt	eq
 8017568:	6819      	ldreq	r1, [r3, #0]
 801756a:	685b      	ldreq	r3, [r3, #4]
 801756c:	1949      	addeq	r1, r1, r5
 801756e:	6021      	streq	r1, [r4, #0]
 8017570:	e7ed      	b.n	801754e <_free_r+0x22>
 8017572:	461a      	mov	r2, r3
 8017574:	685b      	ldr	r3, [r3, #4]
 8017576:	b10b      	cbz	r3, 801757c <_free_r+0x50>
 8017578:	42a3      	cmp	r3, r4
 801757a:	d9fa      	bls.n	8017572 <_free_r+0x46>
 801757c:	6811      	ldr	r1, [r2, #0]
 801757e:	1855      	adds	r5, r2, r1
 8017580:	42a5      	cmp	r5, r4
 8017582:	d10b      	bne.n	801759c <_free_r+0x70>
 8017584:	6824      	ldr	r4, [r4, #0]
 8017586:	4421      	add	r1, r4
 8017588:	1854      	adds	r4, r2, r1
 801758a:	42a3      	cmp	r3, r4
 801758c:	6011      	str	r1, [r2, #0]
 801758e:	d1e0      	bne.n	8017552 <_free_r+0x26>
 8017590:	681c      	ldr	r4, [r3, #0]
 8017592:	685b      	ldr	r3, [r3, #4]
 8017594:	6053      	str	r3, [r2, #4]
 8017596:	4421      	add	r1, r4
 8017598:	6011      	str	r1, [r2, #0]
 801759a:	e7da      	b.n	8017552 <_free_r+0x26>
 801759c:	d902      	bls.n	80175a4 <_free_r+0x78>
 801759e:	230c      	movs	r3, #12
 80175a0:	6003      	str	r3, [r0, #0]
 80175a2:	e7d6      	b.n	8017552 <_free_r+0x26>
 80175a4:	6825      	ldr	r5, [r4, #0]
 80175a6:	1961      	adds	r1, r4, r5
 80175a8:	428b      	cmp	r3, r1
 80175aa:	bf04      	itt	eq
 80175ac:	6819      	ldreq	r1, [r3, #0]
 80175ae:	685b      	ldreq	r3, [r3, #4]
 80175b0:	6063      	str	r3, [r4, #4]
 80175b2:	bf04      	itt	eq
 80175b4:	1949      	addeq	r1, r1, r5
 80175b6:	6021      	streq	r1, [r4, #0]
 80175b8:	6054      	str	r4, [r2, #4]
 80175ba:	e7ca      	b.n	8017552 <_free_r+0x26>
 80175bc:	b003      	add	sp, #12
 80175be:	bd30      	pop	{r4, r5, pc}
 80175c0:	20006e88 	.word	0x20006e88

080175c4 <sbrk_aligned>:
 80175c4:	b570      	push	{r4, r5, r6, lr}
 80175c6:	4e0e      	ldr	r6, [pc, #56]	; (8017600 <sbrk_aligned+0x3c>)
 80175c8:	460c      	mov	r4, r1
 80175ca:	6831      	ldr	r1, [r6, #0]
 80175cc:	4605      	mov	r5, r0
 80175ce:	b911      	cbnz	r1, 80175d6 <sbrk_aligned+0x12>
 80175d0:	f000 f91a 	bl	8017808 <_sbrk_r>
 80175d4:	6030      	str	r0, [r6, #0]
 80175d6:	4621      	mov	r1, r4
 80175d8:	4628      	mov	r0, r5
 80175da:	f000 f915 	bl	8017808 <_sbrk_r>
 80175de:	1c43      	adds	r3, r0, #1
 80175e0:	d00a      	beq.n	80175f8 <sbrk_aligned+0x34>
 80175e2:	1cc4      	adds	r4, r0, #3
 80175e4:	f024 0403 	bic.w	r4, r4, #3
 80175e8:	42a0      	cmp	r0, r4
 80175ea:	d007      	beq.n	80175fc <sbrk_aligned+0x38>
 80175ec:	1a21      	subs	r1, r4, r0
 80175ee:	4628      	mov	r0, r5
 80175f0:	f000 f90a 	bl	8017808 <_sbrk_r>
 80175f4:	3001      	adds	r0, #1
 80175f6:	d101      	bne.n	80175fc <sbrk_aligned+0x38>
 80175f8:	f04f 34ff 	mov.w	r4, #4294967295
 80175fc:	4620      	mov	r0, r4
 80175fe:	bd70      	pop	{r4, r5, r6, pc}
 8017600:	20006e8c 	.word	0x20006e8c

08017604 <_malloc_r>:
 8017604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017608:	1ccd      	adds	r5, r1, #3
 801760a:	f025 0503 	bic.w	r5, r5, #3
 801760e:	3508      	adds	r5, #8
 8017610:	2d0c      	cmp	r5, #12
 8017612:	bf38      	it	cc
 8017614:	250c      	movcc	r5, #12
 8017616:	2d00      	cmp	r5, #0
 8017618:	4607      	mov	r7, r0
 801761a:	db01      	blt.n	8017620 <_malloc_r+0x1c>
 801761c:	42a9      	cmp	r1, r5
 801761e:	d905      	bls.n	801762c <_malloc_r+0x28>
 8017620:	230c      	movs	r3, #12
 8017622:	603b      	str	r3, [r7, #0]
 8017624:	2600      	movs	r6, #0
 8017626:	4630      	mov	r0, r6
 8017628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801762c:	4e2e      	ldr	r6, [pc, #184]	; (80176e8 <_malloc_r+0xe4>)
 801762e:	f000 fbd7 	bl	8017de0 <__malloc_lock>
 8017632:	6833      	ldr	r3, [r6, #0]
 8017634:	461c      	mov	r4, r3
 8017636:	bb34      	cbnz	r4, 8017686 <_malloc_r+0x82>
 8017638:	4629      	mov	r1, r5
 801763a:	4638      	mov	r0, r7
 801763c:	f7ff ffc2 	bl	80175c4 <sbrk_aligned>
 8017640:	1c43      	adds	r3, r0, #1
 8017642:	4604      	mov	r4, r0
 8017644:	d14d      	bne.n	80176e2 <_malloc_r+0xde>
 8017646:	6834      	ldr	r4, [r6, #0]
 8017648:	4626      	mov	r6, r4
 801764a:	2e00      	cmp	r6, #0
 801764c:	d140      	bne.n	80176d0 <_malloc_r+0xcc>
 801764e:	6823      	ldr	r3, [r4, #0]
 8017650:	4631      	mov	r1, r6
 8017652:	4638      	mov	r0, r7
 8017654:	eb04 0803 	add.w	r8, r4, r3
 8017658:	f000 f8d6 	bl	8017808 <_sbrk_r>
 801765c:	4580      	cmp	r8, r0
 801765e:	d13a      	bne.n	80176d6 <_malloc_r+0xd2>
 8017660:	6821      	ldr	r1, [r4, #0]
 8017662:	3503      	adds	r5, #3
 8017664:	1a6d      	subs	r5, r5, r1
 8017666:	f025 0503 	bic.w	r5, r5, #3
 801766a:	3508      	adds	r5, #8
 801766c:	2d0c      	cmp	r5, #12
 801766e:	bf38      	it	cc
 8017670:	250c      	movcc	r5, #12
 8017672:	4629      	mov	r1, r5
 8017674:	4638      	mov	r0, r7
 8017676:	f7ff ffa5 	bl	80175c4 <sbrk_aligned>
 801767a:	3001      	adds	r0, #1
 801767c:	d02b      	beq.n	80176d6 <_malloc_r+0xd2>
 801767e:	6823      	ldr	r3, [r4, #0]
 8017680:	442b      	add	r3, r5
 8017682:	6023      	str	r3, [r4, #0]
 8017684:	e00e      	b.n	80176a4 <_malloc_r+0xa0>
 8017686:	6822      	ldr	r2, [r4, #0]
 8017688:	1b52      	subs	r2, r2, r5
 801768a:	d41e      	bmi.n	80176ca <_malloc_r+0xc6>
 801768c:	2a0b      	cmp	r2, #11
 801768e:	d916      	bls.n	80176be <_malloc_r+0xba>
 8017690:	1961      	adds	r1, r4, r5
 8017692:	42a3      	cmp	r3, r4
 8017694:	6025      	str	r5, [r4, #0]
 8017696:	bf18      	it	ne
 8017698:	6059      	strne	r1, [r3, #4]
 801769a:	6863      	ldr	r3, [r4, #4]
 801769c:	bf08      	it	eq
 801769e:	6031      	streq	r1, [r6, #0]
 80176a0:	5162      	str	r2, [r4, r5]
 80176a2:	604b      	str	r3, [r1, #4]
 80176a4:	4638      	mov	r0, r7
 80176a6:	f104 060b 	add.w	r6, r4, #11
 80176aa:	f000 fb9f 	bl	8017dec <__malloc_unlock>
 80176ae:	f026 0607 	bic.w	r6, r6, #7
 80176b2:	1d23      	adds	r3, r4, #4
 80176b4:	1af2      	subs	r2, r6, r3
 80176b6:	d0b6      	beq.n	8017626 <_malloc_r+0x22>
 80176b8:	1b9b      	subs	r3, r3, r6
 80176ba:	50a3      	str	r3, [r4, r2]
 80176bc:	e7b3      	b.n	8017626 <_malloc_r+0x22>
 80176be:	6862      	ldr	r2, [r4, #4]
 80176c0:	42a3      	cmp	r3, r4
 80176c2:	bf0c      	ite	eq
 80176c4:	6032      	streq	r2, [r6, #0]
 80176c6:	605a      	strne	r2, [r3, #4]
 80176c8:	e7ec      	b.n	80176a4 <_malloc_r+0xa0>
 80176ca:	4623      	mov	r3, r4
 80176cc:	6864      	ldr	r4, [r4, #4]
 80176ce:	e7b2      	b.n	8017636 <_malloc_r+0x32>
 80176d0:	4634      	mov	r4, r6
 80176d2:	6876      	ldr	r6, [r6, #4]
 80176d4:	e7b9      	b.n	801764a <_malloc_r+0x46>
 80176d6:	230c      	movs	r3, #12
 80176d8:	603b      	str	r3, [r7, #0]
 80176da:	4638      	mov	r0, r7
 80176dc:	f000 fb86 	bl	8017dec <__malloc_unlock>
 80176e0:	e7a1      	b.n	8017626 <_malloc_r+0x22>
 80176e2:	6025      	str	r5, [r4, #0]
 80176e4:	e7de      	b.n	80176a4 <_malloc_r+0xa0>
 80176e6:	bf00      	nop
 80176e8:	20006e88 	.word	0x20006e88

080176ec <iprintf>:
 80176ec:	b40f      	push	{r0, r1, r2, r3}
 80176ee:	4b0a      	ldr	r3, [pc, #40]	; (8017718 <iprintf+0x2c>)
 80176f0:	b513      	push	{r0, r1, r4, lr}
 80176f2:	681c      	ldr	r4, [r3, #0]
 80176f4:	b124      	cbz	r4, 8017700 <iprintf+0x14>
 80176f6:	69a3      	ldr	r3, [r4, #24]
 80176f8:	b913      	cbnz	r3, 8017700 <iprintf+0x14>
 80176fa:	4620      	mov	r0, r4
 80176fc:	f7ff fe1c 	bl	8017338 <__sinit>
 8017700:	ab05      	add	r3, sp, #20
 8017702:	9a04      	ldr	r2, [sp, #16]
 8017704:	68a1      	ldr	r1, [r4, #8]
 8017706:	9301      	str	r3, [sp, #4]
 8017708:	4620      	mov	r0, r4
 801770a:	f000 fcfb 	bl	8018104 <_vfiprintf_r>
 801770e:	b002      	add	sp, #8
 8017710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017714:	b004      	add	sp, #16
 8017716:	4770      	bx	lr
 8017718:	200005c0 	.word	0x200005c0

0801771c <_puts_r>:
 801771c:	b570      	push	{r4, r5, r6, lr}
 801771e:	460e      	mov	r6, r1
 8017720:	4605      	mov	r5, r0
 8017722:	b118      	cbz	r0, 801772c <_puts_r+0x10>
 8017724:	6983      	ldr	r3, [r0, #24]
 8017726:	b90b      	cbnz	r3, 801772c <_puts_r+0x10>
 8017728:	f7ff fe06 	bl	8017338 <__sinit>
 801772c:	69ab      	ldr	r3, [r5, #24]
 801772e:	68ac      	ldr	r4, [r5, #8]
 8017730:	b913      	cbnz	r3, 8017738 <_puts_r+0x1c>
 8017732:	4628      	mov	r0, r5
 8017734:	f7ff fe00 	bl	8017338 <__sinit>
 8017738:	4b2c      	ldr	r3, [pc, #176]	; (80177ec <_puts_r+0xd0>)
 801773a:	429c      	cmp	r4, r3
 801773c:	d120      	bne.n	8017780 <_puts_r+0x64>
 801773e:	686c      	ldr	r4, [r5, #4]
 8017740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017742:	07db      	lsls	r3, r3, #31
 8017744:	d405      	bmi.n	8017752 <_puts_r+0x36>
 8017746:	89a3      	ldrh	r3, [r4, #12]
 8017748:	0598      	lsls	r0, r3, #22
 801774a:	d402      	bmi.n	8017752 <_puts_r+0x36>
 801774c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801774e:	f7ff feb6 	bl	80174be <__retarget_lock_acquire_recursive>
 8017752:	89a3      	ldrh	r3, [r4, #12]
 8017754:	0719      	lsls	r1, r3, #28
 8017756:	d51d      	bpl.n	8017794 <_puts_r+0x78>
 8017758:	6923      	ldr	r3, [r4, #16]
 801775a:	b1db      	cbz	r3, 8017794 <_puts_r+0x78>
 801775c:	3e01      	subs	r6, #1
 801775e:	68a3      	ldr	r3, [r4, #8]
 8017760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017764:	3b01      	subs	r3, #1
 8017766:	60a3      	str	r3, [r4, #8]
 8017768:	bb39      	cbnz	r1, 80177ba <_puts_r+0x9e>
 801776a:	2b00      	cmp	r3, #0
 801776c:	da38      	bge.n	80177e0 <_puts_r+0xc4>
 801776e:	4622      	mov	r2, r4
 8017770:	210a      	movs	r1, #10
 8017772:	4628      	mov	r0, r5
 8017774:	f000 f918 	bl	80179a8 <__swbuf_r>
 8017778:	3001      	adds	r0, #1
 801777a:	d011      	beq.n	80177a0 <_puts_r+0x84>
 801777c:	250a      	movs	r5, #10
 801777e:	e011      	b.n	80177a4 <_puts_r+0x88>
 8017780:	4b1b      	ldr	r3, [pc, #108]	; (80177f0 <_puts_r+0xd4>)
 8017782:	429c      	cmp	r4, r3
 8017784:	d101      	bne.n	801778a <_puts_r+0x6e>
 8017786:	68ac      	ldr	r4, [r5, #8]
 8017788:	e7da      	b.n	8017740 <_puts_r+0x24>
 801778a:	4b1a      	ldr	r3, [pc, #104]	; (80177f4 <_puts_r+0xd8>)
 801778c:	429c      	cmp	r4, r3
 801778e:	bf08      	it	eq
 8017790:	68ec      	ldreq	r4, [r5, #12]
 8017792:	e7d5      	b.n	8017740 <_puts_r+0x24>
 8017794:	4621      	mov	r1, r4
 8017796:	4628      	mov	r0, r5
 8017798:	f000 f96a 	bl	8017a70 <__swsetup_r>
 801779c:	2800      	cmp	r0, #0
 801779e:	d0dd      	beq.n	801775c <_puts_r+0x40>
 80177a0:	f04f 35ff 	mov.w	r5, #4294967295
 80177a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80177a6:	07da      	lsls	r2, r3, #31
 80177a8:	d405      	bmi.n	80177b6 <_puts_r+0x9a>
 80177aa:	89a3      	ldrh	r3, [r4, #12]
 80177ac:	059b      	lsls	r3, r3, #22
 80177ae:	d402      	bmi.n	80177b6 <_puts_r+0x9a>
 80177b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80177b2:	f7ff fe85 	bl	80174c0 <__retarget_lock_release_recursive>
 80177b6:	4628      	mov	r0, r5
 80177b8:	bd70      	pop	{r4, r5, r6, pc}
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	da04      	bge.n	80177c8 <_puts_r+0xac>
 80177be:	69a2      	ldr	r2, [r4, #24]
 80177c0:	429a      	cmp	r2, r3
 80177c2:	dc06      	bgt.n	80177d2 <_puts_r+0xb6>
 80177c4:	290a      	cmp	r1, #10
 80177c6:	d004      	beq.n	80177d2 <_puts_r+0xb6>
 80177c8:	6823      	ldr	r3, [r4, #0]
 80177ca:	1c5a      	adds	r2, r3, #1
 80177cc:	6022      	str	r2, [r4, #0]
 80177ce:	7019      	strb	r1, [r3, #0]
 80177d0:	e7c5      	b.n	801775e <_puts_r+0x42>
 80177d2:	4622      	mov	r2, r4
 80177d4:	4628      	mov	r0, r5
 80177d6:	f000 f8e7 	bl	80179a8 <__swbuf_r>
 80177da:	3001      	adds	r0, #1
 80177dc:	d1bf      	bne.n	801775e <_puts_r+0x42>
 80177de:	e7df      	b.n	80177a0 <_puts_r+0x84>
 80177e0:	6823      	ldr	r3, [r4, #0]
 80177e2:	250a      	movs	r5, #10
 80177e4:	1c5a      	adds	r2, r3, #1
 80177e6:	6022      	str	r2, [r4, #0]
 80177e8:	701d      	strb	r5, [r3, #0]
 80177ea:	e7db      	b.n	80177a4 <_puts_r+0x88>
 80177ec:	0801964c 	.word	0x0801964c
 80177f0:	0801966c 	.word	0x0801966c
 80177f4:	0801962c 	.word	0x0801962c

080177f8 <puts>:
 80177f8:	4b02      	ldr	r3, [pc, #8]	; (8017804 <puts+0xc>)
 80177fa:	4601      	mov	r1, r0
 80177fc:	6818      	ldr	r0, [r3, #0]
 80177fe:	f7ff bf8d 	b.w	801771c <_puts_r>
 8017802:	bf00      	nop
 8017804:	200005c0 	.word	0x200005c0

08017808 <_sbrk_r>:
 8017808:	b538      	push	{r3, r4, r5, lr}
 801780a:	4d06      	ldr	r5, [pc, #24]	; (8017824 <_sbrk_r+0x1c>)
 801780c:	2300      	movs	r3, #0
 801780e:	4604      	mov	r4, r0
 8017810:	4608      	mov	r0, r1
 8017812:	602b      	str	r3, [r5, #0]
 8017814:	f7ea fb06 	bl	8001e24 <_sbrk>
 8017818:	1c43      	adds	r3, r0, #1
 801781a:	d102      	bne.n	8017822 <_sbrk_r+0x1a>
 801781c:	682b      	ldr	r3, [r5, #0]
 801781e:	b103      	cbz	r3, 8017822 <_sbrk_r+0x1a>
 8017820:	6023      	str	r3, [r4, #0]
 8017822:	bd38      	pop	{r3, r4, r5, pc}
 8017824:	20006e90 	.word	0x20006e90

08017828 <_raise_r>:
 8017828:	291f      	cmp	r1, #31
 801782a:	b538      	push	{r3, r4, r5, lr}
 801782c:	4604      	mov	r4, r0
 801782e:	460d      	mov	r5, r1
 8017830:	d904      	bls.n	801783c <_raise_r+0x14>
 8017832:	2316      	movs	r3, #22
 8017834:	6003      	str	r3, [r0, #0]
 8017836:	f04f 30ff 	mov.w	r0, #4294967295
 801783a:	bd38      	pop	{r3, r4, r5, pc}
 801783c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801783e:	b112      	cbz	r2, 8017846 <_raise_r+0x1e>
 8017840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017844:	b94b      	cbnz	r3, 801785a <_raise_r+0x32>
 8017846:	4620      	mov	r0, r4
 8017848:	f000 f830 	bl	80178ac <_getpid_r>
 801784c:	462a      	mov	r2, r5
 801784e:	4601      	mov	r1, r0
 8017850:	4620      	mov	r0, r4
 8017852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017856:	f000 b817 	b.w	8017888 <_kill_r>
 801785a:	2b01      	cmp	r3, #1
 801785c:	d00a      	beq.n	8017874 <_raise_r+0x4c>
 801785e:	1c59      	adds	r1, r3, #1
 8017860:	d103      	bne.n	801786a <_raise_r+0x42>
 8017862:	2316      	movs	r3, #22
 8017864:	6003      	str	r3, [r0, #0]
 8017866:	2001      	movs	r0, #1
 8017868:	e7e7      	b.n	801783a <_raise_r+0x12>
 801786a:	2400      	movs	r4, #0
 801786c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017870:	4628      	mov	r0, r5
 8017872:	4798      	blx	r3
 8017874:	2000      	movs	r0, #0
 8017876:	e7e0      	b.n	801783a <_raise_r+0x12>

08017878 <raise>:
 8017878:	4b02      	ldr	r3, [pc, #8]	; (8017884 <raise+0xc>)
 801787a:	4601      	mov	r1, r0
 801787c:	6818      	ldr	r0, [r3, #0]
 801787e:	f7ff bfd3 	b.w	8017828 <_raise_r>
 8017882:	bf00      	nop
 8017884:	200005c0 	.word	0x200005c0

08017888 <_kill_r>:
 8017888:	b538      	push	{r3, r4, r5, lr}
 801788a:	4d07      	ldr	r5, [pc, #28]	; (80178a8 <_kill_r+0x20>)
 801788c:	2300      	movs	r3, #0
 801788e:	4604      	mov	r4, r0
 8017890:	4608      	mov	r0, r1
 8017892:	4611      	mov	r1, r2
 8017894:	602b      	str	r3, [r5, #0]
 8017896:	f000 ff7f 	bl	8018798 <_kill>
 801789a:	1c43      	adds	r3, r0, #1
 801789c:	d102      	bne.n	80178a4 <_kill_r+0x1c>
 801789e:	682b      	ldr	r3, [r5, #0]
 80178a0:	b103      	cbz	r3, 80178a4 <_kill_r+0x1c>
 80178a2:	6023      	str	r3, [r4, #0]
 80178a4:	bd38      	pop	{r3, r4, r5, pc}
 80178a6:	bf00      	nop
 80178a8:	20006e90 	.word	0x20006e90

080178ac <_getpid_r>:
 80178ac:	f7fe be74 	b.w	8016598 <_getpid>

080178b0 <__sread>:
 80178b0:	b510      	push	{r4, lr}
 80178b2:	460c      	mov	r4, r1
 80178b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178b8:	f000 fee8 	bl	801868c <_read_r>
 80178bc:	2800      	cmp	r0, #0
 80178be:	bfab      	itete	ge
 80178c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80178c2:	89a3      	ldrhlt	r3, [r4, #12]
 80178c4:	181b      	addge	r3, r3, r0
 80178c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80178ca:	bfac      	ite	ge
 80178cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80178ce:	81a3      	strhlt	r3, [r4, #12]
 80178d0:	bd10      	pop	{r4, pc}

080178d2 <__swrite>:
 80178d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178d6:	461f      	mov	r7, r3
 80178d8:	898b      	ldrh	r3, [r1, #12]
 80178da:	05db      	lsls	r3, r3, #23
 80178dc:	4605      	mov	r5, r0
 80178de:	460c      	mov	r4, r1
 80178e0:	4616      	mov	r6, r2
 80178e2:	d505      	bpl.n	80178f0 <__swrite+0x1e>
 80178e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178e8:	2302      	movs	r3, #2
 80178ea:	2200      	movs	r2, #0
 80178ec:	f000 fa00 	bl	8017cf0 <_lseek_r>
 80178f0:	89a3      	ldrh	r3, [r4, #12]
 80178f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80178fa:	81a3      	strh	r3, [r4, #12]
 80178fc:	4632      	mov	r2, r6
 80178fe:	463b      	mov	r3, r7
 8017900:	4628      	mov	r0, r5
 8017902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017906:	f000 b8a1 	b.w	8017a4c <_write_r>

0801790a <__sseek>:
 801790a:	b510      	push	{r4, lr}
 801790c:	460c      	mov	r4, r1
 801790e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017912:	f000 f9ed 	bl	8017cf0 <_lseek_r>
 8017916:	1c43      	adds	r3, r0, #1
 8017918:	89a3      	ldrh	r3, [r4, #12]
 801791a:	bf15      	itete	ne
 801791c:	6560      	strne	r0, [r4, #84]	; 0x54
 801791e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017926:	81a3      	strheq	r3, [r4, #12]
 8017928:	bf18      	it	ne
 801792a:	81a3      	strhne	r3, [r4, #12]
 801792c:	bd10      	pop	{r4, pc}

0801792e <__sclose>:
 801792e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017932:	f000 b90b 	b.w	8017b4c <_close_r>

08017936 <_vsniprintf_r>:
 8017936:	b530      	push	{r4, r5, lr}
 8017938:	4614      	mov	r4, r2
 801793a:	2c00      	cmp	r4, #0
 801793c:	b09b      	sub	sp, #108	; 0x6c
 801793e:	4605      	mov	r5, r0
 8017940:	461a      	mov	r2, r3
 8017942:	da05      	bge.n	8017950 <_vsniprintf_r+0x1a>
 8017944:	238b      	movs	r3, #139	; 0x8b
 8017946:	6003      	str	r3, [r0, #0]
 8017948:	f04f 30ff 	mov.w	r0, #4294967295
 801794c:	b01b      	add	sp, #108	; 0x6c
 801794e:	bd30      	pop	{r4, r5, pc}
 8017950:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017954:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017958:	bf14      	ite	ne
 801795a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801795e:	4623      	moveq	r3, r4
 8017960:	9302      	str	r3, [sp, #8]
 8017962:	9305      	str	r3, [sp, #20]
 8017964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017968:	9100      	str	r1, [sp, #0]
 801796a:	9104      	str	r1, [sp, #16]
 801796c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017970:	4669      	mov	r1, sp
 8017972:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017974:	f000 fa9c 	bl	8017eb0 <_svfiprintf_r>
 8017978:	1c43      	adds	r3, r0, #1
 801797a:	bfbc      	itt	lt
 801797c:	238b      	movlt	r3, #139	; 0x8b
 801797e:	602b      	strlt	r3, [r5, #0]
 8017980:	2c00      	cmp	r4, #0
 8017982:	d0e3      	beq.n	801794c <_vsniprintf_r+0x16>
 8017984:	9b00      	ldr	r3, [sp, #0]
 8017986:	2200      	movs	r2, #0
 8017988:	701a      	strb	r2, [r3, #0]
 801798a:	e7df      	b.n	801794c <_vsniprintf_r+0x16>

0801798c <vsniprintf>:
 801798c:	b507      	push	{r0, r1, r2, lr}
 801798e:	9300      	str	r3, [sp, #0]
 8017990:	4613      	mov	r3, r2
 8017992:	460a      	mov	r2, r1
 8017994:	4601      	mov	r1, r0
 8017996:	4803      	ldr	r0, [pc, #12]	; (80179a4 <vsniprintf+0x18>)
 8017998:	6800      	ldr	r0, [r0, #0]
 801799a:	f7ff ffcc 	bl	8017936 <_vsniprintf_r>
 801799e:	b003      	add	sp, #12
 80179a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80179a4:	200005c0 	.word	0x200005c0

080179a8 <__swbuf_r>:
 80179a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179aa:	460e      	mov	r6, r1
 80179ac:	4614      	mov	r4, r2
 80179ae:	4605      	mov	r5, r0
 80179b0:	b118      	cbz	r0, 80179ba <__swbuf_r+0x12>
 80179b2:	6983      	ldr	r3, [r0, #24]
 80179b4:	b90b      	cbnz	r3, 80179ba <__swbuf_r+0x12>
 80179b6:	f7ff fcbf 	bl	8017338 <__sinit>
 80179ba:	4b21      	ldr	r3, [pc, #132]	; (8017a40 <__swbuf_r+0x98>)
 80179bc:	429c      	cmp	r4, r3
 80179be:	d12b      	bne.n	8017a18 <__swbuf_r+0x70>
 80179c0:	686c      	ldr	r4, [r5, #4]
 80179c2:	69a3      	ldr	r3, [r4, #24]
 80179c4:	60a3      	str	r3, [r4, #8]
 80179c6:	89a3      	ldrh	r3, [r4, #12]
 80179c8:	071a      	lsls	r2, r3, #28
 80179ca:	d52f      	bpl.n	8017a2c <__swbuf_r+0x84>
 80179cc:	6923      	ldr	r3, [r4, #16]
 80179ce:	b36b      	cbz	r3, 8017a2c <__swbuf_r+0x84>
 80179d0:	6923      	ldr	r3, [r4, #16]
 80179d2:	6820      	ldr	r0, [r4, #0]
 80179d4:	1ac0      	subs	r0, r0, r3
 80179d6:	6963      	ldr	r3, [r4, #20]
 80179d8:	b2f6      	uxtb	r6, r6
 80179da:	4283      	cmp	r3, r0
 80179dc:	4637      	mov	r7, r6
 80179de:	dc04      	bgt.n	80179ea <__swbuf_r+0x42>
 80179e0:	4621      	mov	r1, r4
 80179e2:	4628      	mov	r0, r5
 80179e4:	f000 f948 	bl	8017c78 <_fflush_r>
 80179e8:	bb30      	cbnz	r0, 8017a38 <__swbuf_r+0x90>
 80179ea:	68a3      	ldr	r3, [r4, #8]
 80179ec:	3b01      	subs	r3, #1
 80179ee:	60a3      	str	r3, [r4, #8]
 80179f0:	6823      	ldr	r3, [r4, #0]
 80179f2:	1c5a      	adds	r2, r3, #1
 80179f4:	6022      	str	r2, [r4, #0]
 80179f6:	701e      	strb	r6, [r3, #0]
 80179f8:	6963      	ldr	r3, [r4, #20]
 80179fa:	3001      	adds	r0, #1
 80179fc:	4283      	cmp	r3, r0
 80179fe:	d004      	beq.n	8017a0a <__swbuf_r+0x62>
 8017a00:	89a3      	ldrh	r3, [r4, #12]
 8017a02:	07db      	lsls	r3, r3, #31
 8017a04:	d506      	bpl.n	8017a14 <__swbuf_r+0x6c>
 8017a06:	2e0a      	cmp	r6, #10
 8017a08:	d104      	bne.n	8017a14 <__swbuf_r+0x6c>
 8017a0a:	4621      	mov	r1, r4
 8017a0c:	4628      	mov	r0, r5
 8017a0e:	f000 f933 	bl	8017c78 <_fflush_r>
 8017a12:	b988      	cbnz	r0, 8017a38 <__swbuf_r+0x90>
 8017a14:	4638      	mov	r0, r7
 8017a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a18:	4b0a      	ldr	r3, [pc, #40]	; (8017a44 <__swbuf_r+0x9c>)
 8017a1a:	429c      	cmp	r4, r3
 8017a1c:	d101      	bne.n	8017a22 <__swbuf_r+0x7a>
 8017a1e:	68ac      	ldr	r4, [r5, #8]
 8017a20:	e7cf      	b.n	80179c2 <__swbuf_r+0x1a>
 8017a22:	4b09      	ldr	r3, [pc, #36]	; (8017a48 <__swbuf_r+0xa0>)
 8017a24:	429c      	cmp	r4, r3
 8017a26:	bf08      	it	eq
 8017a28:	68ec      	ldreq	r4, [r5, #12]
 8017a2a:	e7ca      	b.n	80179c2 <__swbuf_r+0x1a>
 8017a2c:	4621      	mov	r1, r4
 8017a2e:	4628      	mov	r0, r5
 8017a30:	f000 f81e 	bl	8017a70 <__swsetup_r>
 8017a34:	2800      	cmp	r0, #0
 8017a36:	d0cb      	beq.n	80179d0 <__swbuf_r+0x28>
 8017a38:	f04f 37ff 	mov.w	r7, #4294967295
 8017a3c:	e7ea      	b.n	8017a14 <__swbuf_r+0x6c>
 8017a3e:	bf00      	nop
 8017a40:	0801964c 	.word	0x0801964c
 8017a44:	0801966c 	.word	0x0801966c
 8017a48:	0801962c 	.word	0x0801962c

08017a4c <_write_r>:
 8017a4c:	b538      	push	{r3, r4, r5, lr}
 8017a4e:	4d07      	ldr	r5, [pc, #28]	; (8017a6c <_write_r+0x20>)
 8017a50:	4604      	mov	r4, r0
 8017a52:	4608      	mov	r0, r1
 8017a54:	4611      	mov	r1, r2
 8017a56:	2200      	movs	r2, #0
 8017a58:	602a      	str	r2, [r5, #0]
 8017a5a:	461a      	mov	r2, r3
 8017a5c:	f7fe fd45 	bl	80164ea <_write>
 8017a60:	1c43      	adds	r3, r0, #1
 8017a62:	d102      	bne.n	8017a6a <_write_r+0x1e>
 8017a64:	682b      	ldr	r3, [r5, #0]
 8017a66:	b103      	cbz	r3, 8017a6a <_write_r+0x1e>
 8017a68:	6023      	str	r3, [r4, #0]
 8017a6a:	bd38      	pop	{r3, r4, r5, pc}
 8017a6c:	20006e90 	.word	0x20006e90

08017a70 <__swsetup_r>:
 8017a70:	4b32      	ldr	r3, [pc, #200]	; (8017b3c <__swsetup_r+0xcc>)
 8017a72:	b570      	push	{r4, r5, r6, lr}
 8017a74:	681d      	ldr	r5, [r3, #0]
 8017a76:	4606      	mov	r6, r0
 8017a78:	460c      	mov	r4, r1
 8017a7a:	b125      	cbz	r5, 8017a86 <__swsetup_r+0x16>
 8017a7c:	69ab      	ldr	r3, [r5, #24]
 8017a7e:	b913      	cbnz	r3, 8017a86 <__swsetup_r+0x16>
 8017a80:	4628      	mov	r0, r5
 8017a82:	f7ff fc59 	bl	8017338 <__sinit>
 8017a86:	4b2e      	ldr	r3, [pc, #184]	; (8017b40 <__swsetup_r+0xd0>)
 8017a88:	429c      	cmp	r4, r3
 8017a8a:	d10f      	bne.n	8017aac <__swsetup_r+0x3c>
 8017a8c:	686c      	ldr	r4, [r5, #4]
 8017a8e:	89a3      	ldrh	r3, [r4, #12]
 8017a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a94:	0719      	lsls	r1, r3, #28
 8017a96:	d42c      	bmi.n	8017af2 <__swsetup_r+0x82>
 8017a98:	06dd      	lsls	r5, r3, #27
 8017a9a:	d411      	bmi.n	8017ac0 <__swsetup_r+0x50>
 8017a9c:	2309      	movs	r3, #9
 8017a9e:	6033      	str	r3, [r6, #0]
 8017aa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017aa4:	81a3      	strh	r3, [r4, #12]
 8017aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8017aaa:	e03e      	b.n	8017b2a <__swsetup_r+0xba>
 8017aac:	4b25      	ldr	r3, [pc, #148]	; (8017b44 <__swsetup_r+0xd4>)
 8017aae:	429c      	cmp	r4, r3
 8017ab0:	d101      	bne.n	8017ab6 <__swsetup_r+0x46>
 8017ab2:	68ac      	ldr	r4, [r5, #8]
 8017ab4:	e7eb      	b.n	8017a8e <__swsetup_r+0x1e>
 8017ab6:	4b24      	ldr	r3, [pc, #144]	; (8017b48 <__swsetup_r+0xd8>)
 8017ab8:	429c      	cmp	r4, r3
 8017aba:	bf08      	it	eq
 8017abc:	68ec      	ldreq	r4, [r5, #12]
 8017abe:	e7e6      	b.n	8017a8e <__swsetup_r+0x1e>
 8017ac0:	0758      	lsls	r0, r3, #29
 8017ac2:	d512      	bpl.n	8017aea <__swsetup_r+0x7a>
 8017ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ac6:	b141      	cbz	r1, 8017ada <__swsetup_r+0x6a>
 8017ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017acc:	4299      	cmp	r1, r3
 8017ace:	d002      	beq.n	8017ad6 <__swsetup_r+0x66>
 8017ad0:	4630      	mov	r0, r6
 8017ad2:	f7ff fd2b 	bl	801752c <_free_r>
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	6363      	str	r3, [r4, #52]	; 0x34
 8017ada:	89a3      	ldrh	r3, [r4, #12]
 8017adc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017ae0:	81a3      	strh	r3, [r4, #12]
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	6063      	str	r3, [r4, #4]
 8017ae6:	6923      	ldr	r3, [r4, #16]
 8017ae8:	6023      	str	r3, [r4, #0]
 8017aea:	89a3      	ldrh	r3, [r4, #12]
 8017aec:	f043 0308 	orr.w	r3, r3, #8
 8017af0:	81a3      	strh	r3, [r4, #12]
 8017af2:	6923      	ldr	r3, [r4, #16]
 8017af4:	b94b      	cbnz	r3, 8017b0a <__swsetup_r+0x9a>
 8017af6:	89a3      	ldrh	r3, [r4, #12]
 8017af8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b00:	d003      	beq.n	8017b0a <__swsetup_r+0x9a>
 8017b02:	4621      	mov	r1, r4
 8017b04:	4630      	mov	r0, r6
 8017b06:	f000 f92b 	bl	8017d60 <__smakebuf_r>
 8017b0a:	89a0      	ldrh	r0, [r4, #12]
 8017b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017b10:	f010 0301 	ands.w	r3, r0, #1
 8017b14:	d00a      	beq.n	8017b2c <__swsetup_r+0xbc>
 8017b16:	2300      	movs	r3, #0
 8017b18:	60a3      	str	r3, [r4, #8]
 8017b1a:	6963      	ldr	r3, [r4, #20]
 8017b1c:	425b      	negs	r3, r3
 8017b1e:	61a3      	str	r3, [r4, #24]
 8017b20:	6923      	ldr	r3, [r4, #16]
 8017b22:	b943      	cbnz	r3, 8017b36 <__swsetup_r+0xc6>
 8017b24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017b28:	d1ba      	bne.n	8017aa0 <__swsetup_r+0x30>
 8017b2a:	bd70      	pop	{r4, r5, r6, pc}
 8017b2c:	0781      	lsls	r1, r0, #30
 8017b2e:	bf58      	it	pl
 8017b30:	6963      	ldrpl	r3, [r4, #20]
 8017b32:	60a3      	str	r3, [r4, #8]
 8017b34:	e7f4      	b.n	8017b20 <__swsetup_r+0xb0>
 8017b36:	2000      	movs	r0, #0
 8017b38:	e7f7      	b.n	8017b2a <__swsetup_r+0xba>
 8017b3a:	bf00      	nop
 8017b3c:	200005c0 	.word	0x200005c0
 8017b40:	0801964c 	.word	0x0801964c
 8017b44:	0801966c 	.word	0x0801966c
 8017b48:	0801962c 	.word	0x0801962c

08017b4c <_close_r>:
 8017b4c:	b538      	push	{r3, r4, r5, lr}
 8017b4e:	4d06      	ldr	r5, [pc, #24]	; (8017b68 <_close_r+0x1c>)
 8017b50:	2300      	movs	r3, #0
 8017b52:	4604      	mov	r4, r0
 8017b54:	4608      	mov	r0, r1
 8017b56:	602b      	str	r3, [r5, #0]
 8017b58:	f7fe fcf8 	bl	801654c <_close>
 8017b5c:	1c43      	adds	r3, r0, #1
 8017b5e:	d102      	bne.n	8017b66 <_close_r+0x1a>
 8017b60:	682b      	ldr	r3, [r5, #0]
 8017b62:	b103      	cbz	r3, 8017b66 <_close_r+0x1a>
 8017b64:	6023      	str	r3, [r4, #0]
 8017b66:	bd38      	pop	{r3, r4, r5, pc}
 8017b68:	20006e90 	.word	0x20006e90

08017b6c <__sflush_r>:
 8017b6c:	898a      	ldrh	r2, [r1, #12]
 8017b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b72:	4605      	mov	r5, r0
 8017b74:	0710      	lsls	r0, r2, #28
 8017b76:	460c      	mov	r4, r1
 8017b78:	d458      	bmi.n	8017c2c <__sflush_r+0xc0>
 8017b7a:	684b      	ldr	r3, [r1, #4]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	dc05      	bgt.n	8017b8c <__sflush_r+0x20>
 8017b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	dc02      	bgt.n	8017b8c <__sflush_r+0x20>
 8017b86:	2000      	movs	r0, #0
 8017b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b8e:	2e00      	cmp	r6, #0
 8017b90:	d0f9      	beq.n	8017b86 <__sflush_r+0x1a>
 8017b92:	2300      	movs	r3, #0
 8017b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b98:	682f      	ldr	r7, [r5, #0]
 8017b9a:	602b      	str	r3, [r5, #0]
 8017b9c:	d032      	beq.n	8017c04 <__sflush_r+0x98>
 8017b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017ba0:	89a3      	ldrh	r3, [r4, #12]
 8017ba2:	075a      	lsls	r2, r3, #29
 8017ba4:	d505      	bpl.n	8017bb2 <__sflush_r+0x46>
 8017ba6:	6863      	ldr	r3, [r4, #4]
 8017ba8:	1ac0      	subs	r0, r0, r3
 8017baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017bac:	b10b      	cbz	r3, 8017bb2 <__sflush_r+0x46>
 8017bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017bb0:	1ac0      	subs	r0, r0, r3
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	4602      	mov	r2, r0
 8017bb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017bb8:	6a21      	ldr	r1, [r4, #32]
 8017bba:	4628      	mov	r0, r5
 8017bbc:	47b0      	blx	r6
 8017bbe:	1c43      	adds	r3, r0, #1
 8017bc0:	89a3      	ldrh	r3, [r4, #12]
 8017bc2:	d106      	bne.n	8017bd2 <__sflush_r+0x66>
 8017bc4:	6829      	ldr	r1, [r5, #0]
 8017bc6:	291d      	cmp	r1, #29
 8017bc8:	d82c      	bhi.n	8017c24 <__sflush_r+0xb8>
 8017bca:	4a2a      	ldr	r2, [pc, #168]	; (8017c74 <__sflush_r+0x108>)
 8017bcc:	40ca      	lsrs	r2, r1
 8017bce:	07d6      	lsls	r6, r2, #31
 8017bd0:	d528      	bpl.n	8017c24 <__sflush_r+0xb8>
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	6062      	str	r2, [r4, #4]
 8017bd6:	04d9      	lsls	r1, r3, #19
 8017bd8:	6922      	ldr	r2, [r4, #16]
 8017bda:	6022      	str	r2, [r4, #0]
 8017bdc:	d504      	bpl.n	8017be8 <__sflush_r+0x7c>
 8017bde:	1c42      	adds	r2, r0, #1
 8017be0:	d101      	bne.n	8017be6 <__sflush_r+0x7a>
 8017be2:	682b      	ldr	r3, [r5, #0]
 8017be4:	b903      	cbnz	r3, 8017be8 <__sflush_r+0x7c>
 8017be6:	6560      	str	r0, [r4, #84]	; 0x54
 8017be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017bea:	602f      	str	r7, [r5, #0]
 8017bec:	2900      	cmp	r1, #0
 8017bee:	d0ca      	beq.n	8017b86 <__sflush_r+0x1a>
 8017bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017bf4:	4299      	cmp	r1, r3
 8017bf6:	d002      	beq.n	8017bfe <__sflush_r+0x92>
 8017bf8:	4628      	mov	r0, r5
 8017bfa:	f7ff fc97 	bl	801752c <_free_r>
 8017bfe:	2000      	movs	r0, #0
 8017c00:	6360      	str	r0, [r4, #52]	; 0x34
 8017c02:	e7c1      	b.n	8017b88 <__sflush_r+0x1c>
 8017c04:	6a21      	ldr	r1, [r4, #32]
 8017c06:	2301      	movs	r3, #1
 8017c08:	4628      	mov	r0, r5
 8017c0a:	47b0      	blx	r6
 8017c0c:	1c41      	adds	r1, r0, #1
 8017c0e:	d1c7      	bne.n	8017ba0 <__sflush_r+0x34>
 8017c10:	682b      	ldr	r3, [r5, #0]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d0c4      	beq.n	8017ba0 <__sflush_r+0x34>
 8017c16:	2b1d      	cmp	r3, #29
 8017c18:	d001      	beq.n	8017c1e <__sflush_r+0xb2>
 8017c1a:	2b16      	cmp	r3, #22
 8017c1c:	d101      	bne.n	8017c22 <__sflush_r+0xb6>
 8017c1e:	602f      	str	r7, [r5, #0]
 8017c20:	e7b1      	b.n	8017b86 <__sflush_r+0x1a>
 8017c22:	89a3      	ldrh	r3, [r4, #12]
 8017c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c28:	81a3      	strh	r3, [r4, #12]
 8017c2a:	e7ad      	b.n	8017b88 <__sflush_r+0x1c>
 8017c2c:	690f      	ldr	r7, [r1, #16]
 8017c2e:	2f00      	cmp	r7, #0
 8017c30:	d0a9      	beq.n	8017b86 <__sflush_r+0x1a>
 8017c32:	0793      	lsls	r3, r2, #30
 8017c34:	680e      	ldr	r6, [r1, #0]
 8017c36:	bf08      	it	eq
 8017c38:	694b      	ldreq	r3, [r1, #20]
 8017c3a:	600f      	str	r7, [r1, #0]
 8017c3c:	bf18      	it	ne
 8017c3e:	2300      	movne	r3, #0
 8017c40:	eba6 0807 	sub.w	r8, r6, r7
 8017c44:	608b      	str	r3, [r1, #8]
 8017c46:	f1b8 0f00 	cmp.w	r8, #0
 8017c4a:	dd9c      	ble.n	8017b86 <__sflush_r+0x1a>
 8017c4c:	6a21      	ldr	r1, [r4, #32]
 8017c4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017c50:	4643      	mov	r3, r8
 8017c52:	463a      	mov	r2, r7
 8017c54:	4628      	mov	r0, r5
 8017c56:	47b0      	blx	r6
 8017c58:	2800      	cmp	r0, #0
 8017c5a:	dc06      	bgt.n	8017c6a <__sflush_r+0xfe>
 8017c5c:	89a3      	ldrh	r3, [r4, #12]
 8017c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c62:	81a3      	strh	r3, [r4, #12]
 8017c64:	f04f 30ff 	mov.w	r0, #4294967295
 8017c68:	e78e      	b.n	8017b88 <__sflush_r+0x1c>
 8017c6a:	4407      	add	r7, r0
 8017c6c:	eba8 0800 	sub.w	r8, r8, r0
 8017c70:	e7e9      	b.n	8017c46 <__sflush_r+0xda>
 8017c72:	bf00      	nop
 8017c74:	20400001 	.word	0x20400001

08017c78 <_fflush_r>:
 8017c78:	b538      	push	{r3, r4, r5, lr}
 8017c7a:	690b      	ldr	r3, [r1, #16]
 8017c7c:	4605      	mov	r5, r0
 8017c7e:	460c      	mov	r4, r1
 8017c80:	b913      	cbnz	r3, 8017c88 <_fflush_r+0x10>
 8017c82:	2500      	movs	r5, #0
 8017c84:	4628      	mov	r0, r5
 8017c86:	bd38      	pop	{r3, r4, r5, pc}
 8017c88:	b118      	cbz	r0, 8017c92 <_fflush_r+0x1a>
 8017c8a:	6983      	ldr	r3, [r0, #24]
 8017c8c:	b90b      	cbnz	r3, 8017c92 <_fflush_r+0x1a>
 8017c8e:	f7ff fb53 	bl	8017338 <__sinit>
 8017c92:	4b14      	ldr	r3, [pc, #80]	; (8017ce4 <_fflush_r+0x6c>)
 8017c94:	429c      	cmp	r4, r3
 8017c96:	d11b      	bne.n	8017cd0 <_fflush_r+0x58>
 8017c98:	686c      	ldr	r4, [r5, #4]
 8017c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d0ef      	beq.n	8017c82 <_fflush_r+0xa>
 8017ca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017ca4:	07d0      	lsls	r0, r2, #31
 8017ca6:	d404      	bmi.n	8017cb2 <_fflush_r+0x3a>
 8017ca8:	0599      	lsls	r1, r3, #22
 8017caa:	d402      	bmi.n	8017cb2 <_fflush_r+0x3a>
 8017cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cae:	f7ff fc06 	bl	80174be <__retarget_lock_acquire_recursive>
 8017cb2:	4628      	mov	r0, r5
 8017cb4:	4621      	mov	r1, r4
 8017cb6:	f7ff ff59 	bl	8017b6c <__sflush_r>
 8017cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017cbc:	07da      	lsls	r2, r3, #31
 8017cbe:	4605      	mov	r5, r0
 8017cc0:	d4e0      	bmi.n	8017c84 <_fflush_r+0xc>
 8017cc2:	89a3      	ldrh	r3, [r4, #12]
 8017cc4:	059b      	lsls	r3, r3, #22
 8017cc6:	d4dd      	bmi.n	8017c84 <_fflush_r+0xc>
 8017cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cca:	f7ff fbf9 	bl	80174c0 <__retarget_lock_release_recursive>
 8017cce:	e7d9      	b.n	8017c84 <_fflush_r+0xc>
 8017cd0:	4b05      	ldr	r3, [pc, #20]	; (8017ce8 <_fflush_r+0x70>)
 8017cd2:	429c      	cmp	r4, r3
 8017cd4:	d101      	bne.n	8017cda <_fflush_r+0x62>
 8017cd6:	68ac      	ldr	r4, [r5, #8]
 8017cd8:	e7df      	b.n	8017c9a <_fflush_r+0x22>
 8017cda:	4b04      	ldr	r3, [pc, #16]	; (8017cec <_fflush_r+0x74>)
 8017cdc:	429c      	cmp	r4, r3
 8017cde:	bf08      	it	eq
 8017ce0:	68ec      	ldreq	r4, [r5, #12]
 8017ce2:	e7da      	b.n	8017c9a <_fflush_r+0x22>
 8017ce4:	0801964c 	.word	0x0801964c
 8017ce8:	0801966c 	.word	0x0801966c
 8017cec:	0801962c 	.word	0x0801962c

08017cf0 <_lseek_r>:
 8017cf0:	b538      	push	{r3, r4, r5, lr}
 8017cf2:	4d07      	ldr	r5, [pc, #28]	; (8017d10 <_lseek_r+0x20>)
 8017cf4:	4604      	mov	r4, r0
 8017cf6:	4608      	mov	r0, r1
 8017cf8:	4611      	mov	r1, r2
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	602a      	str	r2, [r5, #0]
 8017cfe:	461a      	mov	r2, r3
 8017d00:	f7fe fbe1 	bl	80164c6 <_lseek>
 8017d04:	1c43      	adds	r3, r0, #1
 8017d06:	d102      	bne.n	8017d0e <_lseek_r+0x1e>
 8017d08:	682b      	ldr	r3, [r5, #0]
 8017d0a:	b103      	cbz	r3, 8017d0e <_lseek_r+0x1e>
 8017d0c:	6023      	str	r3, [r4, #0]
 8017d0e:	bd38      	pop	{r3, r4, r5, pc}
 8017d10:	20006e90 	.word	0x20006e90

08017d14 <__swhatbuf_r>:
 8017d14:	b570      	push	{r4, r5, r6, lr}
 8017d16:	460e      	mov	r6, r1
 8017d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d1c:	2900      	cmp	r1, #0
 8017d1e:	b096      	sub	sp, #88	; 0x58
 8017d20:	4614      	mov	r4, r2
 8017d22:	461d      	mov	r5, r3
 8017d24:	da08      	bge.n	8017d38 <__swhatbuf_r+0x24>
 8017d26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	602a      	str	r2, [r5, #0]
 8017d2e:	061a      	lsls	r2, r3, #24
 8017d30:	d410      	bmi.n	8017d54 <__swhatbuf_r+0x40>
 8017d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d36:	e00e      	b.n	8017d56 <__swhatbuf_r+0x42>
 8017d38:	466a      	mov	r2, sp
 8017d3a:	f000 fcb9 	bl	80186b0 <_fstat_r>
 8017d3e:	2800      	cmp	r0, #0
 8017d40:	dbf1      	blt.n	8017d26 <__swhatbuf_r+0x12>
 8017d42:	9a01      	ldr	r2, [sp, #4]
 8017d44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017d48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017d4c:	425a      	negs	r2, r3
 8017d4e:	415a      	adcs	r2, r3
 8017d50:	602a      	str	r2, [r5, #0]
 8017d52:	e7ee      	b.n	8017d32 <__swhatbuf_r+0x1e>
 8017d54:	2340      	movs	r3, #64	; 0x40
 8017d56:	2000      	movs	r0, #0
 8017d58:	6023      	str	r3, [r4, #0]
 8017d5a:	b016      	add	sp, #88	; 0x58
 8017d5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017d60 <__smakebuf_r>:
 8017d60:	898b      	ldrh	r3, [r1, #12]
 8017d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017d64:	079d      	lsls	r5, r3, #30
 8017d66:	4606      	mov	r6, r0
 8017d68:	460c      	mov	r4, r1
 8017d6a:	d507      	bpl.n	8017d7c <__smakebuf_r+0x1c>
 8017d6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017d70:	6023      	str	r3, [r4, #0]
 8017d72:	6123      	str	r3, [r4, #16]
 8017d74:	2301      	movs	r3, #1
 8017d76:	6163      	str	r3, [r4, #20]
 8017d78:	b002      	add	sp, #8
 8017d7a:	bd70      	pop	{r4, r5, r6, pc}
 8017d7c:	ab01      	add	r3, sp, #4
 8017d7e:	466a      	mov	r2, sp
 8017d80:	f7ff ffc8 	bl	8017d14 <__swhatbuf_r>
 8017d84:	9900      	ldr	r1, [sp, #0]
 8017d86:	4605      	mov	r5, r0
 8017d88:	4630      	mov	r0, r6
 8017d8a:	f7ff fc3b 	bl	8017604 <_malloc_r>
 8017d8e:	b948      	cbnz	r0, 8017da4 <__smakebuf_r+0x44>
 8017d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d94:	059a      	lsls	r2, r3, #22
 8017d96:	d4ef      	bmi.n	8017d78 <__smakebuf_r+0x18>
 8017d98:	f023 0303 	bic.w	r3, r3, #3
 8017d9c:	f043 0302 	orr.w	r3, r3, #2
 8017da0:	81a3      	strh	r3, [r4, #12]
 8017da2:	e7e3      	b.n	8017d6c <__smakebuf_r+0xc>
 8017da4:	4b0d      	ldr	r3, [pc, #52]	; (8017ddc <__smakebuf_r+0x7c>)
 8017da6:	62b3      	str	r3, [r6, #40]	; 0x28
 8017da8:	89a3      	ldrh	r3, [r4, #12]
 8017daa:	6020      	str	r0, [r4, #0]
 8017dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017db0:	81a3      	strh	r3, [r4, #12]
 8017db2:	9b00      	ldr	r3, [sp, #0]
 8017db4:	6163      	str	r3, [r4, #20]
 8017db6:	9b01      	ldr	r3, [sp, #4]
 8017db8:	6120      	str	r0, [r4, #16]
 8017dba:	b15b      	cbz	r3, 8017dd4 <__smakebuf_r+0x74>
 8017dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017dc0:	4630      	mov	r0, r6
 8017dc2:	f000 fc87 	bl	80186d4 <_isatty_r>
 8017dc6:	b128      	cbz	r0, 8017dd4 <__smakebuf_r+0x74>
 8017dc8:	89a3      	ldrh	r3, [r4, #12]
 8017dca:	f023 0303 	bic.w	r3, r3, #3
 8017dce:	f043 0301 	orr.w	r3, r3, #1
 8017dd2:	81a3      	strh	r3, [r4, #12]
 8017dd4:	89a0      	ldrh	r0, [r4, #12]
 8017dd6:	4305      	orrs	r5, r0
 8017dd8:	81a5      	strh	r5, [r4, #12]
 8017dda:	e7cd      	b.n	8017d78 <__smakebuf_r+0x18>
 8017ddc:	080172d1 	.word	0x080172d1

08017de0 <__malloc_lock>:
 8017de0:	4801      	ldr	r0, [pc, #4]	; (8017de8 <__malloc_lock+0x8>)
 8017de2:	f7ff bb6c 	b.w	80174be <__retarget_lock_acquire_recursive>
 8017de6:	bf00      	nop
 8017de8:	20006e84 	.word	0x20006e84

08017dec <__malloc_unlock>:
 8017dec:	4801      	ldr	r0, [pc, #4]	; (8017df4 <__malloc_unlock+0x8>)
 8017dee:	f7ff bb67 	b.w	80174c0 <__retarget_lock_release_recursive>
 8017df2:	bf00      	nop
 8017df4:	20006e84 	.word	0x20006e84

08017df8 <__ssputs_r>:
 8017df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dfc:	688e      	ldr	r6, [r1, #8]
 8017dfe:	429e      	cmp	r6, r3
 8017e00:	4682      	mov	sl, r0
 8017e02:	460c      	mov	r4, r1
 8017e04:	4690      	mov	r8, r2
 8017e06:	461f      	mov	r7, r3
 8017e08:	d838      	bhi.n	8017e7c <__ssputs_r+0x84>
 8017e0a:	898a      	ldrh	r2, [r1, #12]
 8017e0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017e10:	d032      	beq.n	8017e78 <__ssputs_r+0x80>
 8017e12:	6825      	ldr	r5, [r4, #0]
 8017e14:	6909      	ldr	r1, [r1, #16]
 8017e16:	eba5 0901 	sub.w	r9, r5, r1
 8017e1a:	6965      	ldr	r5, [r4, #20]
 8017e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e24:	3301      	adds	r3, #1
 8017e26:	444b      	add	r3, r9
 8017e28:	106d      	asrs	r5, r5, #1
 8017e2a:	429d      	cmp	r5, r3
 8017e2c:	bf38      	it	cc
 8017e2e:	461d      	movcc	r5, r3
 8017e30:	0553      	lsls	r3, r2, #21
 8017e32:	d531      	bpl.n	8017e98 <__ssputs_r+0xa0>
 8017e34:	4629      	mov	r1, r5
 8017e36:	f7ff fbe5 	bl	8017604 <_malloc_r>
 8017e3a:	4606      	mov	r6, r0
 8017e3c:	b950      	cbnz	r0, 8017e54 <__ssputs_r+0x5c>
 8017e3e:	230c      	movs	r3, #12
 8017e40:	f8ca 3000 	str.w	r3, [sl]
 8017e44:	89a3      	ldrh	r3, [r4, #12]
 8017e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e4a:	81a3      	strh	r3, [r4, #12]
 8017e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e54:	6921      	ldr	r1, [r4, #16]
 8017e56:	464a      	mov	r2, r9
 8017e58:	f7ff fb3c 	bl	80174d4 <memcpy>
 8017e5c:	89a3      	ldrh	r3, [r4, #12]
 8017e5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e66:	81a3      	strh	r3, [r4, #12]
 8017e68:	6126      	str	r6, [r4, #16]
 8017e6a:	6165      	str	r5, [r4, #20]
 8017e6c:	444e      	add	r6, r9
 8017e6e:	eba5 0509 	sub.w	r5, r5, r9
 8017e72:	6026      	str	r6, [r4, #0]
 8017e74:	60a5      	str	r5, [r4, #8]
 8017e76:	463e      	mov	r6, r7
 8017e78:	42be      	cmp	r6, r7
 8017e7a:	d900      	bls.n	8017e7e <__ssputs_r+0x86>
 8017e7c:	463e      	mov	r6, r7
 8017e7e:	6820      	ldr	r0, [r4, #0]
 8017e80:	4632      	mov	r2, r6
 8017e82:	4641      	mov	r1, r8
 8017e84:	f000 fc36 	bl	80186f4 <memmove>
 8017e88:	68a3      	ldr	r3, [r4, #8]
 8017e8a:	1b9b      	subs	r3, r3, r6
 8017e8c:	60a3      	str	r3, [r4, #8]
 8017e8e:	6823      	ldr	r3, [r4, #0]
 8017e90:	4433      	add	r3, r6
 8017e92:	6023      	str	r3, [r4, #0]
 8017e94:	2000      	movs	r0, #0
 8017e96:	e7db      	b.n	8017e50 <__ssputs_r+0x58>
 8017e98:	462a      	mov	r2, r5
 8017e9a:	f000 fc45 	bl	8018728 <_realloc_r>
 8017e9e:	4606      	mov	r6, r0
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	d1e1      	bne.n	8017e68 <__ssputs_r+0x70>
 8017ea4:	6921      	ldr	r1, [r4, #16]
 8017ea6:	4650      	mov	r0, sl
 8017ea8:	f7ff fb40 	bl	801752c <_free_r>
 8017eac:	e7c7      	b.n	8017e3e <__ssputs_r+0x46>
	...

08017eb0 <_svfiprintf_r>:
 8017eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb4:	4698      	mov	r8, r3
 8017eb6:	898b      	ldrh	r3, [r1, #12]
 8017eb8:	061b      	lsls	r3, r3, #24
 8017eba:	b09d      	sub	sp, #116	; 0x74
 8017ebc:	4607      	mov	r7, r0
 8017ebe:	460d      	mov	r5, r1
 8017ec0:	4614      	mov	r4, r2
 8017ec2:	d50e      	bpl.n	8017ee2 <_svfiprintf_r+0x32>
 8017ec4:	690b      	ldr	r3, [r1, #16]
 8017ec6:	b963      	cbnz	r3, 8017ee2 <_svfiprintf_r+0x32>
 8017ec8:	2140      	movs	r1, #64	; 0x40
 8017eca:	f7ff fb9b 	bl	8017604 <_malloc_r>
 8017ece:	6028      	str	r0, [r5, #0]
 8017ed0:	6128      	str	r0, [r5, #16]
 8017ed2:	b920      	cbnz	r0, 8017ede <_svfiprintf_r+0x2e>
 8017ed4:	230c      	movs	r3, #12
 8017ed6:	603b      	str	r3, [r7, #0]
 8017ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8017edc:	e0d1      	b.n	8018082 <_svfiprintf_r+0x1d2>
 8017ede:	2340      	movs	r3, #64	; 0x40
 8017ee0:	616b      	str	r3, [r5, #20]
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ee6:	2320      	movs	r3, #32
 8017ee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ef0:	2330      	movs	r3, #48	; 0x30
 8017ef2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801809c <_svfiprintf_r+0x1ec>
 8017ef6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017efa:	f04f 0901 	mov.w	r9, #1
 8017efe:	4623      	mov	r3, r4
 8017f00:	469a      	mov	sl, r3
 8017f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f06:	b10a      	cbz	r2, 8017f0c <_svfiprintf_r+0x5c>
 8017f08:	2a25      	cmp	r2, #37	; 0x25
 8017f0a:	d1f9      	bne.n	8017f00 <_svfiprintf_r+0x50>
 8017f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8017f10:	d00b      	beq.n	8017f2a <_svfiprintf_r+0x7a>
 8017f12:	465b      	mov	r3, fp
 8017f14:	4622      	mov	r2, r4
 8017f16:	4629      	mov	r1, r5
 8017f18:	4638      	mov	r0, r7
 8017f1a:	f7ff ff6d 	bl	8017df8 <__ssputs_r>
 8017f1e:	3001      	adds	r0, #1
 8017f20:	f000 80aa 	beq.w	8018078 <_svfiprintf_r+0x1c8>
 8017f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f26:	445a      	add	r2, fp
 8017f28:	9209      	str	r2, [sp, #36]	; 0x24
 8017f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	f000 80a2 	beq.w	8018078 <_svfiprintf_r+0x1c8>
 8017f34:	2300      	movs	r3, #0
 8017f36:	f04f 32ff 	mov.w	r2, #4294967295
 8017f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f3e:	f10a 0a01 	add.w	sl, sl, #1
 8017f42:	9304      	str	r3, [sp, #16]
 8017f44:	9307      	str	r3, [sp, #28]
 8017f46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017f4a:	931a      	str	r3, [sp, #104]	; 0x68
 8017f4c:	4654      	mov	r4, sl
 8017f4e:	2205      	movs	r2, #5
 8017f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f54:	4851      	ldr	r0, [pc, #324]	; (801809c <_svfiprintf_r+0x1ec>)
 8017f56:	f7e8 f943 	bl	80001e0 <memchr>
 8017f5a:	9a04      	ldr	r2, [sp, #16]
 8017f5c:	b9d8      	cbnz	r0, 8017f96 <_svfiprintf_r+0xe6>
 8017f5e:	06d0      	lsls	r0, r2, #27
 8017f60:	bf44      	itt	mi
 8017f62:	2320      	movmi	r3, #32
 8017f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f68:	0711      	lsls	r1, r2, #28
 8017f6a:	bf44      	itt	mi
 8017f6c:	232b      	movmi	r3, #43	; 0x2b
 8017f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f72:	f89a 3000 	ldrb.w	r3, [sl]
 8017f76:	2b2a      	cmp	r3, #42	; 0x2a
 8017f78:	d015      	beq.n	8017fa6 <_svfiprintf_r+0xf6>
 8017f7a:	9a07      	ldr	r2, [sp, #28]
 8017f7c:	4654      	mov	r4, sl
 8017f7e:	2000      	movs	r0, #0
 8017f80:	f04f 0c0a 	mov.w	ip, #10
 8017f84:	4621      	mov	r1, r4
 8017f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f8a:	3b30      	subs	r3, #48	; 0x30
 8017f8c:	2b09      	cmp	r3, #9
 8017f8e:	d94e      	bls.n	801802e <_svfiprintf_r+0x17e>
 8017f90:	b1b0      	cbz	r0, 8017fc0 <_svfiprintf_r+0x110>
 8017f92:	9207      	str	r2, [sp, #28]
 8017f94:	e014      	b.n	8017fc0 <_svfiprintf_r+0x110>
 8017f96:	eba0 0308 	sub.w	r3, r0, r8
 8017f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8017f9e:	4313      	orrs	r3, r2
 8017fa0:	9304      	str	r3, [sp, #16]
 8017fa2:	46a2      	mov	sl, r4
 8017fa4:	e7d2      	b.n	8017f4c <_svfiprintf_r+0x9c>
 8017fa6:	9b03      	ldr	r3, [sp, #12]
 8017fa8:	1d19      	adds	r1, r3, #4
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	9103      	str	r1, [sp, #12]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	bfbb      	ittet	lt
 8017fb2:	425b      	neglt	r3, r3
 8017fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8017fb8:	9307      	strge	r3, [sp, #28]
 8017fba:	9307      	strlt	r3, [sp, #28]
 8017fbc:	bfb8      	it	lt
 8017fbe:	9204      	strlt	r2, [sp, #16]
 8017fc0:	7823      	ldrb	r3, [r4, #0]
 8017fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8017fc4:	d10c      	bne.n	8017fe0 <_svfiprintf_r+0x130>
 8017fc6:	7863      	ldrb	r3, [r4, #1]
 8017fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8017fca:	d135      	bne.n	8018038 <_svfiprintf_r+0x188>
 8017fcc:	9b03      	ldr	r3, [sp, #12]
 8017fce:	1d1a      	adds	r2, r3, #4
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	9203      	str	r2, [sp, #12]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	bfb8      	it	lt
 8017fd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8017fdc:	3402      	adds	r4, #2
 8017fde:	9305      	str	r3, [sp, #20]
 8017fe0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80180ac <_svfiprintf_r+0x1fc>
 8017fe4:	7821      	ldrb	r1, [r4, #0]
 8017fe6:	2203      	movs	r2, #3
 8017fe8:	4650      	mov	r0, sl
 8017fea:	f7e8 f8f9 	bl	80001e0 <memchr>
 8017fee:	b140      	cbz	r0, 8018002 <_svfiprintf_r+0x152>
 8017ff0:	2340      	movs	r3, #64	; 0x40
 8017ff2:	eba0 000a 	sub.w	r0, r0, sl
 8017ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8017ffa:	9b04      	ldr	r3, [sp, #16]
 8017ffc:	4303      	orrs	r3, r0
 8017ffe:	3401      	adds	r4, #1
 8018000:	9304      	str	r3, [sp, #16]
 8018002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018006:	4826      	ldr	r0, [pc, #152]	; (80180a0 <_svfiprintf_r+0x1f0>)
 8018008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801800c:	2206      	movs	r2, #6
 801800e:	f7e8 f8e7 	bl	80001e0 <memchr>
 8018012:	2800      	cmp	r0, #0
 8018014:	d038      	beq.n	8018088 <_svfiprintf_r+0x1d8>
 8018016:	4b23      	ldr	r3, [pc, #140]	; (80180a4 <_svfiprintf_r+0x1f4>)
 8018018:	bb1b      	cbnz	r3, 8018062 <_svfiprintf_r+0x1b2>
 801801a:	9b03      	ldr	r3, [sp, #12]
 801801c:	3307      	adds	r3, #7
 801801e:	f023 0307 	bic.w	r3, r3, #7
 8018022:	3308      	adds	r3, #8
 8018024:	9303      	str	r3, [sp, #12]
 8018026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018028:	4433      	add	r3, r6
 801802a:	9309      	str	r3, [sp, #36]	; 0x24
 801802c:	e767      	b.n	8017efe <_svfiprintf_r+0x4e>
 801802e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018032:	460c      	mov	r4, r1
 8018034:	2001      	movs	r0, #1
 8018036:	e7a5      	b.n	8017f84 <_svfiprintf_r+0xd4>
 8018038:	2300      	movs	r3, #0
 801803a:	3401      	adds	r4, #1
 801803c:	9305      	str	r3, [sp, #20]
 801803e:	4619      	mov	r1, r3
 8018040:	f04f 0c0a 	mov.w	ip, #10
 8018044:	4620      	mov	r0, r4
 8018046:	f810 2b01 	ldrb.w	r2, [r0], #1
 801804a:	3a30      	subs	r2, #48	; 0x30
 801804c:	2a09      	cmp	r2, #9
 801804e:	d903      	bls.n	8018058 <_svfiprintf_r+0x1a8>
 8018050:	2b00      	cmp	r3, #0
 8018052:	d0c5      	beq.n	8017fe0 <_svfiprintf_r+0x130>
 8018054:	9105      	str	r1, [sp, #20]
 8018056:	e7c3      	b.n	8017fe0 <_svfiprintf_r+0x130>
 8018058:	fb0c 2101 	mla	r1, ip, r1, r2
 801805c:	4604      	mov	r4, r0
 801805e:	2301      	movs	r3, #1
 8018060:	e7f0      	b.n	8018044 <_svfiprintf_r+0x194>
 8018062:	ab03      	add	r3, sp, #12
 8018064:	9300      	str	r3, [sp, #0]
 8018066:	462a      	mov	r2, r5
 8018068:	4b0f      	ldr	r3, [pc, #60]	; (80180a8 <_svfiprintf_r+0x1f8>)
 801806a:	a904      	add	r1, sp, #16
 801806c:	4638      	mov	r0, r7
 801806e:	f3af 8000 	nop.w
 8018072:	1c42      	adds	r2, r0, #1
 8018074:	4606      	mov	r6, r0
 8018076:	d1d6      	bne.n	8018026 <_svfiprintf_r+0x176>
 8018078:	89ab      	ldrh	r3, [r5, #12]
 801807a:	065b      	lsls	r3, r3, #25
 801807c:	f53f af2c 	bmi.w	8017ed8 <_svfiprintf_r+0x28>
 8018080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018082:	b01d      	add	sp, #116	; 0x74
 8018084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018088:	ab03      	add	r3, sp, #12
 801808a:	9300      	str	r3, [sp, #0]
 801808c:	462a      	mov	r2, r5
 801808e:	4b06      	ldr	r3, [pc, #24]	; (80180a8 <_svfiprintf_r+0x1f8>)
 8018090:	a904      	add	r1, sp, #16
 8018092:	4638      	mov	r0, r7
 8018094:	f000 f9d4 	bl	8018440 <_printf_i>
 8018098:	e7eb      	b.n	8018072 <_svfiprintf_r+0x1c2>
 801809a:	bf00      	nop
 801809c:	08019690 	.word	0x08019690
 80180a0:	0801969a 	.word	0x0801969a
 80180a4:	00000000 	.word	0x00000000
 80180a8:	08017df9 	.word	0x08017df9
 80180ac:	08019696 	.word	0x08019696

080180b0 <__sfputc_r>:
 80180b0:	6893      	ldr	r3, [r2, #8]
 80180b2:	3b01      	subs	r3, #1
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	b410      	push	{r4}
 80180b8:	6093      	str	r3, [r2, #8]
 80180ba:	da08      	bge.n	80180ce <__sfputc_r+0x1e>
 80180bc:	6994      	ldr	r4, [r2, #24]
 80180be:	42a3      	cmp	r3, r4
 80180c0:	db01      	blt.n	80180c6 <__sfputc_r+0x16>
 80180c2:	290a      	cmp	r1, #10
 80180c4:	d103      	bne.n	80180ce <__sfputc_r+0x1e>
 80180c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180ca:	f7ff bc6d 	b.w	80179a8 <__swbuf_r>
 80180ce:	6813      	ldr	r3, [r2, #0]
 80180d0:	1c58      	adds	r0, r3, #1
 80180d2:	6010      	str	r0, [r2, #0]
 80180d4:	7019      	strb	r1, [r3, #0]
 80180d6:	4608      	mov	r0, r1
 80180d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180dc:	4770      	bx	lr

080180de <__sfputs_r>:
 80180de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180e0:	4606      	mov	r6, r0
 80180e2:	460f      	mov	r7, r1
 80180e4:	4614      	mov	r4, r2
 80180e6:	18d5      	adds	r5, r2, r3
 80180e8:	42ac      	cmp	r4, r5
 80180ea:	d101      	bne.n	80180f0 <__sfputs_r+0x12>
 80180ec:	2000      	movs	r0, #0
 80180ee:	e007      	b.n	8018100 <__sfputs_r+0x22>
 80180f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180f4:	463a      	mov	r2, r7
 80180f6:	4630      	mov	r0, r6
 80180f8:	f7ff ffda 	bl	80180b0 <__sfputc_r>
 80180fc:	1c43      	adds	r3, r0, #1
 80180fe:	d1f3      	bne.n	80180e8 <__sfputs_r+0xa>
 8018100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018104 <_vfiprintf_r>:
 8018104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018108:	460d      	mov	r5, r1
 801810a:	b09d      	sub	sp, #116	; 0x74
 801810c:	4614      	mov	r4, r2
 801810e:	4698      	mov	r8, r3
 8018110:	4606      	mov	r6, r0
 8018112:	b118      	cbz	r0, 801811c <_vfiprintf_r+0x18>
 8018114:	6983      	ldr	r3, [r0, #24]
 8018116:	b90b      	cbnz	r3, 801811c <_vfiprintf_r+0x18>
 8018118:	f7ff f90e 	bl	8017338 <__sinit>
 801811c:	4b89      	ldr	r3, [pc, #548]	; (8018344 <_vfiprintf_r+0x240>)
 801811e:	429d      	cmp	r5, r3
 8018120:	d11b      	bne.n	801815a <_vfiprintf_r+0x56>
 8018122:	6875      	ldr	r5, [r6, #4]
 8018124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018126:	07d9      	lsls	r1, r3, #31
 8018128:	d405      	bmi.n	8018136 <_vfiprintf_r+0x32>
 801812a:	89ab      	ldrh	r3, [r5, #12]
 801812c:	059a      	lsls	r2, r3, #22
 801812e:	d402      	bmi.n	8018136 <_vfiprintf_r+0x32>
 8018130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018132:	f7ff f9c4 	bl	80174be <__retarget_lock_acquire_recursive>
 8018136:	89ab      	ldrh	r3, [r5, #12]
 8018138:	071b      	lsls	r3, r3, #28
 801813a:	d501      	bpl.n	8018140 <_vfiprintf_r+0x3c>
 801813c:	692b      	ldr	r3, [r5, #16]
 801813e:	b9eb      	cbnz	r3, 801817c <_vfiprintf_r+0x78>
 8018140:	4629      	mov	r1, r5
 8018142:	4630      	mov	r0, r6
 8018144:	f7ff fc94 	bl	8017a70 <__swsetup_r>
 8018148:	b1c0      	cbz	r0, 801817c <_vfiprintf_r+0x78>
 801814a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801814c:	07dc      	lsls	r4, r3, #31
 801814e:	d50e      	bpl.n	801816e <_vfiprintf_r+0x6a>
 8018150:	f04f 30ff 	mov.w	r0, #4294967295
 8018154:	b01d      	add	sp, #116	; 0x74
 8018156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801815a:	4b7b      	ldr	r3, [pc, #492]	; (8018348 <_vfiprintf_r+0x244>)
 801815c:	429d      	cmp	r5, r3
 801815e:	d101      	bne.n	8018164 <_vfiprintf_r+0x60>
 8018160:	68b5      	ldr	r5, [r6, #8]
 8018162:	e7df      	b.n	8018124 <_vfiprintf_r+0x20>
 8018164:	4b79      	ldr	r3, [pc, #484]	; (801834c <_vfiprintf_r+0x248>)
 8018166:	429d      	cmp	r5, r3
 8018168:	bf08      	it	eq
 801816a:	68f5      	ldreq	r5, [r6, #12]
 801816c:	e7da      	b.n	8018124 <_vfiprintf_r+0x20>
 801816e:	89ab      	ldrh	r3, [r5, #12]
 8018170:	0598      	lsls	r0, r3, #22
 8018172:	d4ed      	bmi.n	8018150 <_vfiprintf_r+0x4c>
 8018174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018176:	f7ff f9a3 	bl	80174c0 <__retarget_lock_release_recursive>
 801817a:	e7e9      	b.n	8018150 <_vfiprintf_r+0x4c>
 801817c:	2300      	movs	r3, #0
 801817e:	9309      	str	r3, [sp, #36]	; 0x24
 8018180:	2320      	movs	r3, #32
 8018182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018186:	f8cd 800c 	str.w	r8, [sp, #12]
 801818a:	2330      	movs	r3, #48	; 0x30
 801818c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018350 <_vfiprintf_r+0x24c>
 8018190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018194:	f04f 0901 	mov.w	r9, #1
 8018198:	4623      	mov	r3, r4
 801819a:	469a      	mov	sl, r3
 801819c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181a0:	b10a      	cbz	r2, 80181a6 <_vfiprintf_r+0xa2>
 80181a2:	2a25      	cmp	r2, #37	; 0x25
 80181a4:	d1f9      	bne.n	801819a <_vfiprintf_r+0x96>
 80181a6:	ebba 0b04 	subs.w	fp, sl, r4
 80181aa:	d00b      	beq.n	80181c4 <_vfiprintf_r+0xc0>
 80181ac:	465b      	mov	r3, fp
 80181ae:	4622      	mov	r2, r4
 80181b0:	4629      	mov	r1, r5
 80181b2:	4630      	mov	r0, r6
 80181b4:	f7ff ff93 	bl	80180de <__sfputs_r>
 80181b8:	3001      	adds	r0, #1
 80181ba:	f000 80aa 	beq.w	8018312 <_vfiprintf_r+0x20e>
 80181be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181c0:	445a      	add	r2, fp
 80181c2:	9209      	str	r2, [sp, #36]	; 0x24
 80181c4:	f89a 3000 	ldrb.w	r3, [sl]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	f000 80a2 	beq.w	8018312 <_vfiprintf_r+0x20e>
 80181ce:	2300      	movs	r3, #0
 80181d0:	f04f 32ff 	mov.w	r2, #4294967295
 80181d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181d8:	f10a 0a01 	add.w	sl, sl, #1
 80181dc:	9304      	str	r3, [sp, #16]
 80181de:	9307      	str	r3, [sp, #28]
 80181e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80181e4:	931a      	str	r3, [sp, #104]	; 0x68
 80181e6:	4654      	mov	r4, sl
 80181e8:	2205      	movs	r2, #5
 80181ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181ee:	4858      	ldr	r0, [pc, #352]	; (8018350 <_vfiprintf_r+0x24c>)
 80181f0:	f7e7 fff6 	bl	80001e0 <memchr>
 80181f4:	9a04      	ldr	r2, [sp, #16]
 80181f6:	b9d8      	cbnz	r0, 8018230 <_vfiprintf_r+0x12c>
 80181f8:	06d1      	lsls	r1, r2, #27
 80181fa:	bf44      	itt	mi
 80181fc:	2320      	movmi	r3, #32
 80181fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018202:	0713      	lsls	r3, r2, #28
 8018204:	bf44      	itt	mi
 8018206:	232b      	movmi	r3, #43	; 0x2b
 8018208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801820c:	f89a 3000 	ldrb.w	r3, [sl]
 8018210:	2b2a      	cmp	r3, #42	; 0x2a
 8018212:	d015      	beq.n	8018240 <_vfiprintf_r+0x13c>
 8018214:	9a07      	ldr	r2, [sp, #28]
 8018216:	4654      	mov	r4, sl
 8018218:	2000      	movs	r0, #0
 801821a:	f04f 0c0a 	mov.w	ip, #10
 801821e:	4621      	mov	r1, r4
 8018220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018224:	3b30      	subs	r3, #48	; 0x30
 8018226:	2b09      	cmp	r3, #9
 8018228:	d94e      	bls.n	80182c8 <_vfiprintf_r+0x1c4>
 801822a:	b1b0      	cbz	r0, 801825a <_vfiprintf_r+0x156>
 801822c:	9207      	str	r2, [sp, #28]
 801822e:	e014      	b.n	801825a <_vfiprintf_r+0x156>
 8018230:	eba0 0308 	sub.w	r3, r0, r8
 8018234:	fa09 f303 	lsl.w	r3, r9, r3
 8018238:	4313      	orrs	r3, r2
 801823a:	9304      	str	r3, [sp, #16]
 801823c:	46a2      	mov	sl, r4
 801823e:	e7d2      	b.n	80181e6 <_vfiprintf_r+0xe2>
 8018240:	9b03      	ldr	r3, [sp, #12]
 8018242:	1d19      	adds	r1, r3, #4
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	9103      	str	r1, [sp, #12]
 8018248:	2b00      	cmp	r3, #0
 801824a:	bfbb      	ittet	lt
 801824c:	425b      	neglt	r3, r3
 801824e:	f042 0202 	orrlt.w	r2, r2, #2
 8018252:	9307      	strge	r3, [sp, #28]
 8018254:	9307      	strlt	r3, [sp, #28]
 8018256:	bfb8      	it	lt
 8018258:	9204      	strlt	r2, [sp, #16]
 801825a:	7823      	ldrb	r3, [r4, #0]
 801825c:	2b2e      	cmp	r3, #46	; 0x2e
 801825e:	d10c      	bne.n	801827a <_vfiprintf_r+0x176>
 8018260:	7863      	ldrb	r3, [r4, #1]
 8018262:	2b2a      	cmp	r3, #42	; 0x2a
 8018264:	d135      	bne.n	80182d2 <_vfiprintf_r+0x1ce>
 8018266:	9b03      	ldr	r3, [sp, #12]
 8018268:	1d1a      	adds	r2, r3, #4
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	9203      	str	r2, [sp, #12]
 801826e:	2b00      	cmp	r3, #0
 8018270:	bfb8      	it	lt
 8018272:	f04f 33ff 	movlt.w	r3, #4294967295
 8018276:	3402      	adds	r4, #2
 8018278:	9305      	str	r3, [sp, #20]
 801827a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018360 <_vfiprintf_r+0x25c>
 801827e:	7821      	ldrb	r1, [r4, #0]
 8018280:	2203      	movs	r2, #3
 8018282:	4650      	mov	r0, sl
 8018284:	f7e7 ffac 	bl	80001e0 <memchr>
 8018288:	b140      	cbz	r0, 801829c <_vfiprintf_r+0x198>
 801828a:	2340      	movs	r3, #64	; 0x40
 801828c:	eba0 000a 	sub.w	r0, r0, sl
 8018290:	fa03 f000 	lsl.w	r0, r3, r0
 8018294:	9b04      	ldr	r3, [sp, #16]
 8018296:	4303      	orrs	r3, r0
 8018298:	3401      	adds	r4, #1
 801829a:	9304      	str	r3, [sp, #16]
 801829c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182a0:	482c      	ldr	r0, [pc, #176]	; (8018354 <_vfiprintf_r+0x250>)
 80182a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80182a6:	2206      	movs	r2, #6
 80182a8:	f7e7 ff9a 	bl	80001e0 <memchr>
 80182ac:	2800      	cmp	r0, #0
 80182ae:	d03f      	beq.n	8018330 <_vfiprintf_r+0x22c>
 80182b0:	4b29      	ldr	r3, [pc, #164]	; (8018358 <_vfiprintf_r+0x254>)
 80182b2:	bb1b      	cbnz	r3, 80182fc <_vfiprintf_r+0x1f8>
 80182b4:	9b03      	ldr	r3, [sp, #12]
 80182b6:	3307      	adds	r3, #7
 80182b8:	f023 0307 	bic.w	r3, r3, #7
 80182bc:	3308      	adds	r3, #8
 80182be:	9303      	str	r3, [sp, #12]
 80182c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182c2:	443b      	add	r3, r7
 80182c4:	9309      	str	r3, [sp, #36]	; 0x24
 80182c6:	e767      	b.n	8018198 <_vfiprintf_r+0x94>
 80182c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80182cc:	460c      	mov	r4, r1
 80182ce:	2001      	movs	r0, #1
 80182d0:	e7a5      	b.n	801821e <_vfiprintf_r+0x11a>
 80182d2:	2300      	movs	r3, #0
 80182d4:	3401      	adds	r4, #1
 80182d6:	9305      	str	r3, [sp, #20]
 80182d8:	4619      	mov	r1, r3
 80182da:	f04f 0c0a 	mov.w	ip, #10
 80182de:	4620      	mov	r0, r4
 80182e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182e4:	3a30      	subs	r2, #48	; 0x30
 80182e6:	2a09      	cmp	r2, #9
 80182e8:	d903      	bls.n	80182f2 <_vfiprintf_r+0x1ee>
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d0c5      	beq.n	801827a <_vfiprintf_r+0x176>
 80182ee:	9105      	str	r1, [sp, #20]
 80182f0:	e7c3      	b.n	801827a <_vfiprintf_r+0x176>
 80182f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80182f6:	4604      	mov	r4, r0
 80182f8:	2301      	movs	r3, #1
 80182fa:	e7f0      	b.n	80182de <_vfiprintf_r+0x1da>
 80182fc:	ab03      	add	r3, sp, #12
 80182fe:	9300      	str	r3, [sp, #0]
 8018300:	462a      	mov	r2, r5
 8018302:	4b16      	ldr	r3, [pc, #88]	; (801835c <_vfiprintf_r+0x258>)
 8018304:	a904      	add	r1, sp, #16
 8018306:	4630      	mov	r0, r6
 8018308:	f3af 8000 	nop.w
 801830c:	4607      	mov	r7, r0
 801830e:	1c78      	adds	r0, r7, #1
 8018310:	d1d6      	bne.n	80182c0 <_vfiprintf_r+0x1bc>
 8018312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018314:	07d9      	lsls	r1, r3, #31
 8018316:	d405      	bmi.n	8018324 <_vfiprintf_r+0x220>
 8018318:	89ab      	ldrh	r3, [r5, #12]
 801831a:	059a      	lsls	r2, r3, #22
 801831c:	d402      	bmi.n	8018324 <_vfiprintf_r+0x220>
 801831e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018320:	f7ff f8ce 	bl	80174c0 <__retarget_lock_release_recursive>
 8018324:	89ab      	ldrh	r3, [r5, #12]
 8018326:	065b      	lsls	r3, r3, #25
 8018328:	f53f af12 	bmi.w	8018150 <_vfiprintf_r+0x4c>
 801832c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801832e:	e711      	b.n	8018154 <_vfiprintf_r+0x50>
 8018330:	ab03      	add	r3, sp, #12
 8018332:	9300      	str	r3, [sp, #0]
 8018334:	462a      	mov	r2, r5
 8018336:	4b09      	ldr	r3, [pc, #36]	; (801835c <_vfiprintf_r+0x258>)
 8018338:	a904      	add	r1, sp, #16
 801833a:	4630      	mov	r0, r6
 801833c:	f000 f880 	bl	8018440 <_printf_i>
 8018340:	e7e4      	b.n	801830c <_vfiprintf_r+0x208>
 8018342:	bf00      	nop
 8018344:	0801964c 	.word	0x0801964c
 8018348:	0801966c 	.word	0x0801966c
 801834c:	0801962c 	.word	0x0801962c
 8018350:	08019690 	.word	0x08019690
 8018354:	0801969a 	.word	0x0801969a
 8018358:	00000000 	.word	0x00000000
 801835c:	080180df 	.word	0x080180df
 8018360:	08019696 	.word	0x08019696

08018364 <_printf_common>:
 8018364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018368:	4616      	mov	r6, r2
 801836a:	4699      	mov	r9, r3
 801836c:	688a      	ldr	r2, [r1, #8]
 801836e:	690b      	ldr	r3, [r1, #16]
 8018370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018374:	4293      	cmp	r3, r2
 8018376:	bfb8      	it	lt
 8018378:	4613      	movlt	r3, r2
 801837a:	6033      	str	r3, [r6, #0]
 801837c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018380:	4607      	mov	r7, r0
 8018382:	460c      	mov	r4, r1
 8018384:	b10a      	cbz	r2, 801838a <_printf_common+0x26>
 8018386:	3301      	adds	r3, #1
 8018388:	6033      	str	r3, [r6, #0]
 801838a:	6823      	ldr	r3, [r4, #0]
 801838c:	0699      	lsls	r1, r3, #26
 801838e:	bf42      	ittt	mi
 8018390:	6833      	ldrmi	r3, [r6, #0]
 8018392:	3302      	addmi	r3, #2
 8018394:	6033      	strmi	r3, [r6, #0]
 8018396:	6825      	ldr	r5, [r4, #0]
 8018398:	f015 0506 	ands.w	r5, r5, #6
 801839c:	d106      	bne.n	80183ac <_printf_common+0x48>
 801839e:	f104 0a19 	add.w	sl, r4, #25
 80183a2:	68e3      	ldr	r3, [r4, #12]
 80183a4:	6832      	ldr	r2, [r6, #0]
 80183a6:	1a9b      	subs	r3, r3, r2
 80183a8:	42ab      	cmp	r3, r5
 80183aa:	dc26      	bgt.n	80183fa <_printf_common+0x96>
 80183ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80183b0:	1e13      	subs	r3, r2, #0
 80183b2:	6822      	ldr	r2, [r4, #0]
 80183b4:	bf18      	it	ne
 80183b6:	2301      	movne	r3, #1
 80183b8:	0692      	lsls	r2, r2, #26
 80183ba:	d42b      	bmi.n	8018414 <_printf_common+0xb0>
 80183bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80183c0:	4649      	mov	r1, r9
 80183c2:	4638      	mov	r0, r7
 80183c4:	47c0      	blx	r8
 80183c6:	3001      	adds	r0, #1
 80183c8:	d01e      	beq.n	8018408 <_printf_common+0xa4>
 80183ca:	6823      	ldr	r3, [r4, #0]
 80183cc:	68e5      	ldr	r5, [r4, #12]
 80183ce:	6832      	ldr	r2, [r6, #0]
 80183d0:	f003 0306 	and.w	r3, r3, #6
 80183d4:	2b04      	cmp	r3, #4
 80183d6:	bf08      	it	eq
 80183d8:	1aad      	subeq	r5, r5, r2
 80183da:	68a3      	ldr	r3, [r4, #8]
 80183dc:	6922      	ldr	r2, [r4, #16]
 80183de:	bf0c      	ite	eq
 80183e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80183e4:	2500      	movne	r5, #0
 80183e6:	4293      	cmp	r3, r2
 80183e8:	bfc4      	itt	gt
 80183ea:	1a9b      	subgt	r3, r3, r2
 80183ec:	18ed      	addgt	r5, r5, r3
 80183ee:	2600      	movs	r6, #0
 80183f0:	341a      	adds	r4, #26
 80183f2:	42b5      	cmp	r5, r6
 80183f4:	d11a      	bne.n	801842c <_printf_common+0xc8>
 80183f6:	2000      	movs	r0, #0
 80183f8:	e008      	b.n	801840c <_printf_common+0xa8>
 80183fa:	2301      	movs	r3, #1
 80183fc:	4652      	mov	r2, sl
 80183fe:	4649      	mov	r1, r9
 8018400:	4638      	mov	r0, r7
 8018402:	47c0      	blx	r8
 8018404:	3001      	adds	r0, #1
 8018406:	d103      	bne.n	8018410 <_printf_common+0xac>
 8018408:	f04f 30ff 	mov.w	r0, #4294967295
 801840c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018410:	3501      	adds	r5, #1
 8018412:	e7c6      	b.n	80183a2 <_printf_common+0x3e>
 8018414:	18e1      	adds	r1, r4, r3
 8018416:	1c5a      	adds	r2, r3, #1
 8018418:	2030      	movs	r0, #48	; 0x30
 801841a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801841e:	4422      	add	r2, r4
 8018420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018428:	3302      	adds	r3, #2
 801842a:	e7c7      	b.n	80183bc <_printf_common+0x58>
 801842c:	2301      	movs	r3, #1
 801842e:	4622      	mov	r2, r4
 8018430:	4649      	mov	r1, r9
 8018432:	4638      	mov	r0, r7
 8018434:	47c0      	blx	r8
 8018436:	3001      	adds	r0, #1
 8018438:	d0e6      	beq.n	8018408 <_printf_common+0xa4>
 801843a:	3601      	adds	r6, #1
 801843c:	e7d9      	b.n	80183f2 <_printf_common+0x8e>
	...

08018440 <_printf_i>:
 8018440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018444:	7e0f      	ldrb	r7, [r1, #24]
 8018446:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018448:	2f78      	cmp	r7, #120	; 0x78
 801844a:	4691      	mov	r9, r2
 801844c:	4680      	mov	r8, r0
 801844e:	460c      	mov	r4, r1
 8018450:	469a      	mov	sl, r3
 8018452:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018456:	d807      	bhi.n	8018468 <_printf_i+0x28>
 8018458:	2f62      	cmp	r7, #98	; 0x62
 801845a:	d80a      	bhi.n	8018472 <_printf_i+0x32>
 801845c:	2f00      	cmp	r7, #0
 801845e:	f000 80d8 	beq.w	8018612 <_printf_i+0x1d2>
 8018462:	2f58      	cmp	r7, #88	; 0x58
 8018464:	f000 80a3 	beq.w	80185ae <_printf_i+0x16e>
 8018468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801846c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018470:	e03a      	b.n	80184e8 <_printf_i+0xa8>
 8018472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018476:	2b15      	cmp	r3, #21
 8018478:	d8f6      	bhi.n	8018468 <_printf_i+0x28>
 801847a:	a101      	add	r1, pc, #4	; (adr r1, 8018480 <_printf_i+0x40>)
 801847c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018480:	080184d9 	.word	0x080184d9
 8018484:	080184ed 	.word	0x080184ed
 8018488:	08018469 	.word	0x08018469
 801848c:	08018469 	.word	0x08018469
 8018490:	08018469 	.word	0x08018469
 8018494:	08018469 	.word	0x08018469
 8018498:	080184ed 	.word	0x080184ed
 801849c:	08018469 	.word	0x08018469
 80184a0:	08018469 	.word	0x08018469
 80184a4:	08018469 	.word	0x08018469
 80184a8:	08018469 	.word	0x08018469
 80184ac:	080185f9 	.word	0x080185f9
 80184b0:	0801851d 	.word	0x0801851d
 80184b4:	080185db 	.word	0x080185db
 80184b8:	08018469 	.word	0x08018469
 80184bc:	08018469 	.word	0x08018469
 80184c0:	0801861b 	.word	0x0801861b
 80184c4:	08018469 	.word	0x08018469
 80184c8:	0801851d 	.word	0x0801851d
 80184cc:	08018469 	.word	0x08018469
 80184d0:	08018469 	.word	0x08018469
 80184d4:	080185e3 	.word	0x080185e3
 80184d8:	682b      	ldr	r3, [r5, #0]
 80184da:	1d1a      	adds	r2, r3, #4
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	602a      	str	r2, [r5, #0]
 80184e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80184e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80184e8:	2301      	movs	r3, #1
 80184ea:	e0a3      	b.n	8018634 <_printf_i+0x1f4>
 80184ec:	6820      	ldr	r0, [r4, #0]
 80184ee:	6829      	ldr	r1, [r5, #0]
 80184f0:	0606      	lsls	r6, r0, #24
 80184f2:	f101 0304 	add.w	r3, r1, #4
 80184f6:	d50a      	bpl.n	801850e <_printf_i+0xce>
 80184f8:	680e      	ldr	r6, [r1, #0]
 80184fa:	602b      	str	r3, [r5, #0]
 80184fc:	2e00      	cmp	r6, #0
 80184fe:	da03      	bge.n	8018508 <_printf_i+0xc8>
 8018500:	232d      	movs	r3, #45	; 0x2d
 8018502:	4276      	negs	r6, r6
 8018504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018508:	485e      	ldr	r0, [pc, #376]	; (8018684 <_printf_i+0x244>)
 801850a:	230a      	movs	r3, #10
 801850c:	e019      	b.n	8018542 <_printf_i+0x102>
 801850e:	680e      	ldr	r6, [r1, #0]
 8018510:	602b      	str	r3, [r5, #0]
 8018512:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018516:	bf18      	it	ne
 8018518:	b236      	sxthne	r6, r6
 801851a:	e7ef      	b.n	80184fc <_printf_i+0xbc>
 801851c:	682b      	ldr	r3, [r5, #0]
 801851e:	6820      	ldr	r0, [r4, #0]
 8018520:	1d19      	adds	r1, r3, #4
 8018522:	6029      	str	r1, [r5, #0]
 8018524:	0601      	lsls	r1, r0, #24
 8018526:	d501      	bpl.n	801852c <_printf_i+0xec>
 8018528:	681e      	ldr	r6, [r3, #0]
 801852a:	e002      	b.n	8018532 <_printf_i+0xf2>
 801852c:	0646      	lsls	r6, r0, #25
 801852e:	d5fb      	bpl.n	8018528 <_printf_i+0xe8>
 8018530:	881e      	ldrh	r6, [r3, #0]
 8018532:	4854      	ldr	r0, [pc, #336]	; (8018684 <_printf_i+0x244>)
 8018534:	2f6f      	cmp	r7, #111	; 0x6f
 8018536:	bf0c      	ite	eq
 8018538:	2308      	moveq	r3, #8
 801853a:	230a      	movne	r3, #10
 801853c:	2100      	movs	r1, #0
 801853e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018542:	6865      	ldr	r5, [r4, #4]
 8018544:	60a5      	str	r5, [r4, #8]
 8018546:	2d00      	cmp	r5, #0
 8018548:	bfa2      	ittt	ge
 801854a:	6821      	ldrge	r1, [r4, #0]
 801854c:	f021 0104 	bicge.w	r1, r1, #4
 8018550:	6021      	strge	r1, [r4, #0]
 8018552:	b90e      	cbnz	r6, 8018558 <_printf_i+0x118>
 8018554:	2d00      	cmp	r5, #0
 8018556:	d04d      	beq.n	80185f4 <_printf_i+0x1b4>
 8018558:	4615      	mov	r5, r2
 801855a:	fbb6 f1f3 	udiv	r1, r6, r3
 801855e:	fb03 6711 	mls	r7, r3, r1, r6
 8018562:	5dc7      	ldrb	r7, [r0, r7]
 8018564:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018568:	4637      	mov	r7, r6
 801856a:	42bb      	cmp	r3, r7
 801856c:	460e      	mov	r6, r1
 801856e:	d9f4      	bls.n	801855a <_printf_i+0x11a>
 8018570:	2b08      	cmp	r3, #8
 8018572:	d10b      	bne.n	801858c <_printf_i+0x14c>
 8018574:	6823      	ldr	r3, [r4, #0]
 8018576:	07de      	lsls	r6, r3, #31
 8018578:	d508      	bpl.n	801858c <_printf_i+0x14c>
 801857a:	6923      	ldr	r3, [r4, #16]
 801857c:	6861      	ldr	r1, [r4, #4]
 801857e:	4299      	cmp	r1, r3
 8018580:	bfde      	ittt	le
 8018582:	2330      	movle	r3, #48	; 0x30
 8018584:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018588:	f105 35ff 	addle.w	r5, r5, #4294967295
 801858c:	1b52      	subs	r2, r2, r5
 801858e:	6122      	str	r2, [r4, #16]
 8018590:	f8cd a000 	str.w	sl, [sp]
 8018594:	464b      	mov	r3, r9
 8018596:	aa03      	add	r2, sp, #12
 8018598:	4621      	mov	r1, r4
 801859a:	4640      	mov	r0, r8
 801859c:	f7ff fee2 	bl	8018364 <_printf_common>
 80185a0:	3001      	adds	r0, #1
 80185a2:	d14c      	bne.n	801863e <_printf_i+0x1fe>
 80185a4:	f04f 30ff 	mov.w	r0, #4294967295
 80185a8:	b004      	add	sp, #16
 80185aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185ae:	4835      	ldr	r0, [pc, #212]	; (8018684 <_printf_i+0x244>)
 80185b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80185b4:	6829      	ldr	r1, [r5, #0]
 80185b6:	6823      	ldr	r3, [r4, #0]
 80185b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80185bc:	6029      	str	r1, [r5, #0]
 80185be:	061d      	lsls	r5, r3, #24
 80185c0:	d514      	bpl.n	80185ec <_printf_i+0x1ac>
 80185c2:	07df      	lsls	r7, r3, #31
 80185c4:	bf44      	itt	mi
 80185c6:	f043 0320 	orrmi.w	r3, r3, #32
 80185ca:	6023      	strmi	r3, [r4, #0]
 80185cc:	b91e      	cbnz	r6, 80185d6 <_printf_i+0x196>
 80185ce:	6823      	ldr	r3, [r4, #0]
 80185d0:	f023 0320 	bic.w	r3, r3, #32
 80185d4:	6023      	str	r3, [r4, #0]
 80185d6:	2310      	movs	r3, #16
 80185d8:	e7b0      	b.n	801853c <_printf_i+0xfc>
 80185da:	6823      	ldr	r3, [r4, #0]
 80185dc:	f043 0320 	orr.w	r3, r3, #32
 80185e0:	6023      	str	r3, [r4, #0]
 80185e2:	2378      	movs	r3, #120	; 0x78
 80185e4:	4828      	ldr	r0, [pc, #160]	; (8018688 <_printf_i+0x248>)
 80185e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80185ea:	e7e3      	b.n	80185b4 <_printf_i+0x174>
 80185ec:	0659      	lsls	r1, r3, #25
 80185ee:	bf48      	it	mi
 80185f0:	b2b6      	uxthmi	r6, r6
 80185f2:	e7e6      	b.n	80185c2 <_printf_i+0x182>
 80185f4:	4615      	mov	r5, r2
 80185f6:	e7bb      	b.n	8018570 <_printf_i+0x130>
 80185f8:	682b      	ldr	r3, [r5, #0]
 80185fa:	6826      	ldr	r6, [r4, #0]
 80185fc:	6961      	ldr	r1, [r4, #20]
 80185fe:	1d18      	adds	r0, r3, #4
 8018600:	6028      	str	r0, [r5, #0]
 8018602:	0635      	lsls	r5, r6, #24
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	d501      	bpl.n	801860c <_printf_i+0x1cc>
 8018608:	6019      	str	r1, [r3, #0]
 801860a:	e002      	b.n	8018612 <_printf_i+0x1d2>
 801860c:	0670      	lsls	r0, r6, #25
 801860e:	d5fb      	bpl.n	8018608 <_printf_i+0x1c8>
 8018610:	8019      	strh	r1, [r3, #0]
 8018612:	2300      	movs	r3, #0
 8018614:	6123      	str	r3, [r4, #16]
 8018616:	4615      	mov	r5, r2
 8018618:	e7ba      	b.n	8018590 <_printf_i+0x150>
 801861a:	682b      	ldr	r3, [r5, #0]
 801861c:	1d1a      	adds	r2, r3, #4
 801861e:	602a      	str	r2, [r5, #0]
 8018620:	681d      	ldr	r5, [r3, #0]
 8018622:	6862      	ldr	r2, [r4, #4]
 8018624:	2100      	movs	r1, #0
 8018626:	4628      	mov	r0, r5
 8018628:	f7e7 fdda 	bl	80001e0 <memchr>
 801862c:	b108      	cbz	r0, 8018632 <_printf_i+0x1f2>
 801862e:	1b40      	subs	r0, r0, r5
 8018630:	6060      	str	r0, [r4, #4]
 8018632:	6863      	ldr	r3, [r4, #4]
 8018634:	6123      	str	r3, [r4, #16]
 8018636:	2300      	movs	r3, #0
 8018638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801863c:	e7a8      	b.n	8018590 <_printf_i+0x150>
 801863e:	6923      	ldr	r3, [r4, #16]
 8018640:	462a      	mov	r2, r5
 8018642:	4649      	mov	r1, r9
 8018644:	4640      	mov	r0, r8
 8018646:	47d0      	blx	sl
 8018648:	3001      	adds	r0, #1
 801864a:	d0ab      	beq.n	80185a4 <_printf_i+0x164>
 801864c:	6823      	ldr	r3, [r4, #0]
 801864e:	079b      	lsls	r3, r3, #30
 8018650:	d413      	bmi.n	801867a <_printf_i+0x23a>
 8018652:	68e0      	ldr	r0, [r4, #12]
 8018654:	9b03      	ldr	r3, [sp, #12]
 8018656:	4298      	cmp	r0, r3
 8018658:	bfb8      	it	lt
 801865a:	4618      	movlt	r0, r3
 801865c:	e7a4      	b.n	80185a8 <_printf_i+0x168>
 801865e:	2301      	movs	r3, #1
 8018660:	4632      	mov	r2, r6
 8018662:	4649      	mov	r1, r9
 8018664:	4640      	mov	r0, r8
 8018666:	47d0      	blx	sl
 8018668:	3001      	adds	r0, #1
 801866a:	d09b      	beq.n	80185a4 <_printf_i+0x164>
 801866c:	3501      	adds	r5, #1
 801866e:	68e3      	ldr	r3, [r4, #12]
 8018670:	9903      	ldr	r1, [sp, #12]
 8018672:	1a5b      	subs	r3, r3, r1
 8018674:	42ab      	cmp	r3, r5
 8018676:	dcf2      	bgt.n	801865e <_printf_i+0x21e>
 8018678:	e7eb      	b.n	8018652 <_printf_i+0x212>
 801867a:	2500      	movs	r5, #0
 801867c:	f104 0619 	add.w	r6, r4, #25
 8018680:	e7f5      	b.n	801866e <_printf_i+0x22e>
 8018682:	bf00      	nop
 8018684:	080196a1 	.word	0x080196a1
 8018688:	080196b2 	.word	0x080196b2

0801868c <_read_r>:
 801868c:	b538      	push	{r3, r4, r5, lr}
 801868e:	4d07      	ldr	r5, [pc, #28]	; (80186ac <_read_r+0x20>)
 8018690:	4604      	mov	r4, r0
 8018692:	4608      	mov	r0, r1
 8018694:	4611      	mov	r1, r2
 8018696:	2200      	movs	r2, #0
 8018698:	602a      	str	r2, [r5, #0]
 801869a:	461a      	mov	r2, r3
 801869c:	f7fd febb 	bl	8016416 <_read>
 80186a0:	1c43      	adds	r3, r0, #1
 80186a2:	d102      	bne.n	80186aa <_read_r+0x1e>
 80186a4:	682b      	ldr	r3, [r5, #0]
 80186a6:	b103      	cbz	r3, 80186aa <_read_r+0x1e>
 80186a8:	6023      	str	r3, [r4, #0]
 80186aa:	bd38      	pop	{r3, r4, r5, pc}
 80186ac:	20006e90 	.word	0x20006e90

080186b0 <_fstat_r>:
 80186b0:	b538      	push	{r3, r4, r5, lr}
 80186b2:	4d07      	ldr	r5, [pc, #28]	; (80186d0 <_fstat_r+0x20>)
 80186b4:	2300      	movs	r3, #0
 80186b6:	4604      	mov	r4, r0
 80186b8:	4608      	mov	r0, r1
 80186ba:	4611      	mov	r1, r2
 80186bc:	602b      	str	r3, [r5, #0]
 80186be:	f7fd ff8e 	bl	80165de <_fstat>
 80186c2:	1c43      	adds	r3, r0, #1
 80186c4:	d102      	bne.n	80186cc <_fstat_r+0x1c>
 80186c6:	682b      	ldr	r3, [r5, #0]
 80186c8:	b103      	cbz	r3, 80186cc <_fstat_r+0x1c>
 80186ca:	6023      	str	r3, [r4, #0]
 80186cc:	bd38      	pop	{r3, r4, r5, pc}
 80186ce:	bf00      	nop
 80186d0:	20006e90 	.word	0x20006e90

080186d4 <_isatty_r>:
 80186d4:	b538      	push	{r3, r4, r5, lr}
 80186d6:	4d06      	ldr	r5, [pc, #24]	; (80186f0 <_isatty_r+0x1c>)
 80186d8:	2300      	movs	r3, #0
 80186da:	4604      	mov	r4, r0
 80186dc:	4608      	mov	r0, r1
 80186de:	602b      	str	r3, [r5, #0]
 80186e0:	f7fe f8e4 	bl	80168ac <_isatty>
 80186e4:	1c43      	adds	r3, r0, #1
 80186e6:	d102      	bne.n	80186ee <_isatty_r+0x1a>
 80186e8:	682b      	ldr	r3, [r5, #0]
 80186ea:	b103      	cbz	r3, 80186ee <_isatty_r+0x1a>
 80186ec:	6023      	str	r3, [r4, #0]
 80186ee:	bd38      	pop	{r3, r4, r5, pc}
 80186f0:	20006e90 	.word	0x20006e90

080186f4 <memmove>:
 80186f4:	4288      	cmp	r0, r1
 80186f6:	b510      	push	{r4, lr}
 80186f8:	eb01 0402 	add.w	r4, r1, r2
 80186fc:	d902      	bls.n	8018704 <memmove+0x10>
 80186fe:	4284      	cmp	r4, r0
 8018700:	4623      	mov	r3, r4
 8018702:	d807      	bhi.n	8018714 <memmove+0x20>
 8018704:	1e43      	subs	r3, r0, #1
 8018706:	42a1      	cmp	r1, r4
 8018708:	d008      	beq.n	801871c <memmove+0x28>
 801870a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801870e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018712:	e7f8      	b.n	8018706 <memmove+0x12>
 8018714:	4402      	add	r2, r0
 8018716:	4601      	mov	r1, r0
 8018718:	428a      	cmp	r2, r1
 801871a:	d100      	bne.n	801871e <memmove+0x2a>
 801871c:	bd10      	pop	{r4, pc}
 801871e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018726:	e7f7      	b.n	8018718 <memmove+0x24>

08018728 <_realloc_r>:
 8018728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801872c:	4680      	mov	r8, r0
 801872e:	4614      	mov	r4, r2
 8018730:	460e      	mov	r6, r1
 8018732:	b921      	cbnz	r1, 801873e <_realloc_r+0x16>
 8018734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018738:	4611      	mov	r1, r2
 801873a:	f7fe bf63 	b.w	8017604 <_malloc_r>
 801873e:	b92a      	cbnz	r2, 801874c <_realloc_r+0x24>
 8018740:	f7fe fef4 	bl	801752c <_free_r>
 8018744:	4625      	mov	r5, r4
 8018746:	4628      	mov	r0, r5
 8018748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801874c:	f000 f81b 	bl	8018786 <_malloc_usable_size_r>
 8018750:	4284      	cmp	r4, r0
 8018752:	4607      	mov	r7, r0
 8018754:	d802      	bhi.n	801875c <_realloc_r+0x34>
 8018756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801875a:	d812      	bhi.n	8018782 <_realloc_r+0x5a>
 801875c:	4621      	mov	r1, r4
 801875e:	4640      	mov	r0, r8
 8018760:	f7fe ff50 	bl	8017604 <_malloc_r>
 8018764:	4605      	mov	r5, r0
 8018766:	2800      	cmp	r0, #0
 8018768:	d0ed      	beq.n	8018746 <_realloc_r+0x1e>
 801876a:	42bc      	cmp	r4, r7
 801876c:	4622      	mov	r2, r4
 801876e:	4631      	mov	r1, r6
 8018770:	bf28      	it	cs
 8018772:	463a      	movcs	r2, r7
 8018774:	f7fe feae 	bl	80174d4 <memcpy>
 8018778:	4631      	mov	r1, r6
 801877a:	4640      	mov	r0, r8
 801877c:	f7fe fed6 	bl	801752c <_free_r>
 8018780:	e7e1      	b.n	8018746 <_realloc_r+0x1e>
 8018782:	4635      	mov	r5, r6
 8018784:	e7df      	b.n	8018746 <_realloc_r+0x1e>

08018786 <_malloc_usable_size_r>:
 8018786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801878a:	1f18      	subs	r0, r3, #4
 801878c:	2b00      	cmp	r3, #0
 801878e:	bfbc      	itt	lt
 8018790:	580b      	ldrlt	r3, [r1, r0]
 8018792:	18c0      	addlt	r0, r0, r3
 8018794:	4770      	bx	lr
	...

08018798 <_kill>:
 8018798:	4b02      	ldr	r3, [pc, #8]	; (80187a4 <_kill+0xc>)
 801879a:	2258      	movs	r2, #88	; 0x58
 801879c:	601a      	str	r2, [r3, #0]
 801879e:	f04f 30ff 	mov.w	r0, #4294967295
 80187a2:	4770      	bx	lr
 80187a4:	20006e90 	.word	0x20006e90

080187a8 <_exit>:
 80187a8:	e7fe      	b.n	80187a8 <_exit>
	...

080187ac <_init>:
 80187ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ae:	bf00      	nop
 80187b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187b2:	bc08      	pop	{r3}
 80187b4:	469e      	mov	lr, r3
 80187b6:	4770      	bx	lr

080187b8 <_fini>:
 80187b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ba:	bf00      	nop
 80187bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187be:	bc08      	pop	{r3}
 80187c0:	469e      	mov	lr, r3
 80187c2:	4770      	bx	lr
